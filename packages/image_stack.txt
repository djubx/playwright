<-- START_DESCRIPTION -->

# Image Stack Flutter Package
================================

The `image_stack` Flutter package is a powerful tool for creating a stack of images with various customization options. It allows developers to create a visually appealing and interactive image gallery with ease.

## When to Use This Package
---------------------------

This package is ideal for applications that require a gallery-like feature, such as:

* Social media apps
* E-commerce apps
* Photo editing apps
* Travel apps

## Features
------------

* Customizable image size and spacing
* Support for multiple image sources (assets, network, and file)
* Interactive gestures (tap, double-tap, and swipe)
* Optional placeholder and error widgets

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `image_stack` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  image_stack: ^1.0.0
```
2. Run `flutter pub get` to install the package.
3. Import the package in your Dart file:
```dart
import 'package:image_stack/image_stack.dart';
```

## Platform-Specific Details
---------------------------

### Android

* Make sure to add the `android.permission.INTERNET` permission to your `AndroidManifest.xml` file if you plan to use network images.

### iOS

* No additional setup is required.

## Configurations and Optimizations
-----------------------------------

* To improve performance, use a caching mechanism like `CachedNetworkImage` or `flutter_cache_manager`.
* To handle errors, use the `errorWidget` property to display a custom error message.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:image_stack/image_stack.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Image Stack Demo',
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  List<String> _imageUrls = [
    'https://picsum.photos/200/300',
    'https://picsum.photos/200/301',
    'https://picsum.photos/200/302',
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Image Stack Demo'),
      ),
      body: Center(
        child: ImageStack(
          // Step 1: Define the image sources
          images: _imageUrls.map((url) => NetworkImage(url)).toList(),
          // Step 2: Customize the image size and spacing
          imageWidth: 200,
          imageHeight: 200,
          spacing: 10,
          // Step 3: Add interactive gestures
          onTap: (index) {
            print('Tapped on image $index');
          },
          onDoubleTap: (index) {
            print('Double-tapped on image $index');
          },
          onSwipe: (index) {
            print('Swiped on image $index');
          },
          // Step 4: Add a placeholder and error widget
          placeholder: Center(child: CircularProgressIndicator()),
          errorWidget: Center(child: Text('Error loading image')),
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user runs the app and sees a list of images.
// 2. The user taps on an image to see it in full screen.
// 3. The user double-taps on an image to zoom in and out.
// 4. The user swipes left or right to navigate through the images.
// 5. If an image fails to load, an error message is displayed.
```

// Final summary:
// The code flows by first defining the image sources, then customizing the image size and spacing.
// Next, interactive gestures are added to handle user input.
// Finally, a placeholder and error widget are added to handle loading and error states.
// The application flow is designed to provide a seamless and interactive user experience.

<-- END_MAIN -->
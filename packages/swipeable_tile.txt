```markdown
<-- START_DESCRIPTION -->

# Swipeable Tile Flutter Package

The `swipeable_tile` Flutter package is a versatile and user-friendly widget that allows developers to create interactive tiles with swipe actions. This package is particularly useful in applications where you need to provide users with quick actions on list items, such as deleting, archiving, or marking items as read.

## When to Use

- **Email Clients**: Implement swipe actions to delete or archive emails.
- **Task Managers**: Allow users to mark tasks as complete or delete them.
- **Messaging Apps**: Enable quick actions like reply, delete, or mute conversations.

## Features

- **Customizable Actions**: Define multiple actions for both left and right swipes.
- **Animation Support**: Smooth animations for swipe actions.
- **Flexible Design**: Easily integrate with existing UI components.
- **Platform Compatibility**: Works seamlessly on both Android and iOS.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using Swipeable Tile

In this tutorial, we will walk through the setup process for the `swipeable_tile` package and demonstrate how to integrate it into a Flutter application.

## Setup

1. **Add Dependency**: Add the `swipeable_tile` package to your `pubspec.yaml` file.

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     swipeable_tile: ^1.0.0
   ```

2. **Install Packages**: Run `flutter pub get` to install the package.

3. **Import the Package**: Import the package in your Dart file where you plan to use it.

   ```dart
   import 'package:swipeable_tile/swipeable_tile.dart';
   ```

## Platform-Specific Details

### Android

- Ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21 to support the necessary animations.

  ```gradle
  defaultConfig {
      minSdkVersion 21
  }
  ```

### iOS

- No additional setup is required for iOS, but ensure your deployment target is set to iOS 9.0 or higher in your `ios/Podfile`.

  ```ruby
  platform :ios, '9.0'
  ```

## Usage

To use the `swipeable_tile`, wrap your list items with the `SwipeableTile` widget and define the actions for left and right swipes.

```dart
SwipeableTile(
  color: Colors.white,
  swipeThreshold: 0.2,
  direction: SwipeDirection.horizontal,
  onSwiped: (direction) {
    // Handle swipe action
  },
  backgroundBuilder: (context, direction, progress) {
    return Container(
      color: direction == SwipeDirection.endToStart ? Colors.red : Colors.green,
      child: Icon(
        direction == SwipeDirection.endToStart ? Icons.delete : Icons.archive,
        color: Colors.white,
      ),
    );
  },
  child: ListTile(
    title: Text('Swipe me!'),
  ),
)
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

# Complete Example: Swipeable Tile in Action

Below is a complete example of a Flutter application using the `swipeable_tile` package. This example demonstrates how to implement swipe actions on a list of items.

```dart
import 'package:flutter/material.dart';
import 'package:swipeable_tile/swipeable_tile.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Swipeable Tile Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: SwipeableTileDemo(),
    );
  }
}

class SwipeableTileDemo extends StatelessWidget {
  final List<String> items = List.generate(20, (index) => 'Item $index');

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Swipeable Tile Demo'),
      ),
      body: ListView.builder(
        itemCount: items.length,
        itemBuilder: (context, index) {
          return SwipeableTile(
            color: Colors.white,
            swipeThreshold: 0.2,
            direction: SwipeDirection.horizontal,
            onSwiped: (direction) {
              // Handle swipe action
              if (direction == SwipeDirection.endToStart) {
                // Perform delete action
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text('Deleted ${items[index]}')),
                );
              } else {
                // Perform archive action
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text('Archived ${items[index]}')),
                );
              }
            },
            backgroundBuilder: (context, direction, progress) {
              return Container(
                color: direction == SwipeDirection.endToStart ? Colors.red : Colors.green,
                child: Icon(
                  direction == SwipeDirection.endToStart ? Icons.delete : Icons.archive,
                  color: Colors.white,
                ),
              );
            },
            child: ListTile(
              title: Text(items[index]),
            ),
          );
        },
      ),
    );
  }
}
```

// The application starts with the `main` function, which calls `runApp` to launch the `MyApp` widget.
// `MyApp` is a stateless widget that sets up the MaterialApp with a title and theme.
// The home of the app is set to `SwipeableTileDemo`, another stateless widget.
// `SwipeableTileDemo` contains a list of items and builds a `ListView` using `ListView.builder`.
// Each item in the list is wrapped in a `SwipeableTile` widget.
// The `SwipeableTile` widget is configured with a swipe threshold and direction.
// The `onSwiped` callback handles the swipe actions, showing a `SnackBar` for delete or archive actions.
// The `backgroundBuilder` provides the background color and icon for swipe actions.
// The `ListTile` displays the item text.

// This example demonstrates how to integrate swipe actions into a list using the `swipeable_tile` package.
// The app provides visual feedback for swipe actions and is easily customizable for different use cases.

<-- END_MAIN -->
```
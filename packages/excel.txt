<-- START_DESCRIPTION -->

# Excel Flutter Package: A Comprehensive Overview
=====================================================

The `excel` Flutter package is a powerful tool for working with Excel files (.xlsx) in Flutter applications. It provides a simple and efficient way to read, write, and manipulate Excel files, making it an ideal choice for apps that require data analysis, reporting, or document management.

### When to Use This Package

*   When your app needs to generate reports or invoices in Excel format.
*   When you need to read and analyze data from Excel files.
*   When you want to provide users with the ability to import and export data in Excel format.

### Key Features

*   Read and write Excel files (.xlsx)
*   Create and edit worksheets
*   Add and remove rows and columns
*   Format cells (e.g., text, numbers, dates)
*   Insert images and charts
*   Support for formulas and conditional formatting

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the Excel Flutter Package
=============================================

### Step 1: Add the Package to Your Project

Add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  excel: ^1.1.5
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:excel/excel.dart';
```

### Step 3: Create an Excel File

Create an instance of the `Excel` class to create a new Excel file:

```dart
Excel excel = Excel.createExcel();
```

### Step 4: Add a Worksheet

Add a new worksheet to the Excel file:

```dart
Sheet sheet = excel['Sheet1'];
```

### Step 5: Write Data to the Worksheet

Write data to the worksheet using the `cell` method:

```dart
sheet.cell(CellIndex.indexByColumnRow(columnIndex: 0, rowIndex: 0)).value = 'Hello, World!';
```

### Step 6: Save the Excel File

Save the Excel file to a file:

```dart
excel.encode().then((onValue) {
  File('example.xlsx')
    ..createSync(recursive: true)
    ..writeAsBytesSync(onValue);
});
```

### Platform-Specific Details

*   **Android:** No additional configuration is required.
*   **iOS:** No additional configuration is required.

### Optimizations

*   Use `excel.encode()` to encode the Excel file as a byte array, which can be saved to a file or sent over a network.
*   Use `excel.decode()` to decode a byte array into an Excel file.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:excel/excel.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Excel Flutter Package Example'),
        ),
        body: Center(
          child: ElevatedButton(
            onPressed: () async {
              // Create an Excel file
              Excel excel = Excel.createExcel();

              // Add a worksheet
              Sheet sheet = excel['Sheet1'];

              // Write data to the worksheet
              sheet.cell(CellIndex.indexByColumnRow(columnIndex: 0, rowIndex: 0)).value = 'Hello, World!';

              // Save the Excel file
              excel.encode().then((onValue) {
                File('example.xlsx')
                  ..createSync(recursive: true)
                  ..writeAsBytesSync(onValue);
              });

              // Read the Excel file
              File file = File('example.xlsx');
              List<int> bytes = await file.readAsBytes();
              Excel excelRead = Excel.decode(bytes: bytes);

              // Print the data from the worksheet
              print(excelRead.tables['Sheet1'].rows[0][0].value);
            },
            child: Text('Create and Read Excel File'),
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user clicks the button to create and read an Excel file.
// 2. An Excel file is created using the `Excel.createExcel()` method.
// 3. A worksheet is added to the Excel file using the `excel['Sheet1']` method.
// 4. Data is written to the worksheet using the `cell` method.
// 5. The Excel file is saved to a file using the `excel.encode()` method.
// 6. The Excel file is read from the file using the `File` class and the `readAsBytes` method.
// 7. The Excel file is decoded using the `Excel.decode()` method.
// 8. The data from the worksheet is printed to the console.

// This example demonstrates how to create and read an Excel file using the `excel` Flutter package.
```

<-- END_MAIN -->
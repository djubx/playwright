<-- START_DESCRIPTION -->

# Web Scraper Flutter Package
================================

The `web_scraper` Flutter package is a powerful tool for extracting data from websites. It allows developers to scrape website data, parse HTML, and handle various types of content. This package is ideal for building applications that require data extraction from websites, such as data mining, monitoring, or automation tools.

### Key Features

*   **Data Extraction**: Extract data from websites using HTML parsing, XPath expressions, or CSS selectors.
*   **Platform Support**: Supports both Android and iOS platforms.
*   **Asynchronous**: Handles asynchronous requests and parsing for smooth performance.

### When to Use

*   **Data Mining**: Extract data from websites for analysis, monitoring, or automation purposes.
*   **Web Automation**: Automate tasks on websites, such as filling forms or clicking buttons.
*   **Content Aggregation**: Aggregate content from multiple websites into a single application.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Web Scraper Package
=====================================================

### Step 1: Add the Package to Your Flutter Project

Add the `web_scraper` package to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  web_scraper: ^0.0.9
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the `web_scraper` package in your Dart file:

```dart
import 'package:web_scraper/web_scraper.dart';
```

### Step 3: Create a WebScraper Instance

Create a `WebScraper` instance with the URL of the website you want to scrape:

```dart
WebScraper webScraper = WebScraper('https://example.com');
```

### Step 4: Load the Website Data

Use the `loadWebPage` method to load the website data:

```dart
await webScraper.loadWebPage();
```

### Step 5: Extract Data

Use the `getElement` method to extract data from the website:

```dart
String title = webScraper.getElement('title', ['class', 'title']);
```

### Platform-Specific Details

*   **Android**: Make sure to add the `android.permission.INTERNET` permission to your `AndroidManifest.xml` file.
*   **iOS**: Make sure to add the `NSAppTransportSecurity` key to your `Info.plist` file.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:web_scraper/web_scraper.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Web Scraper Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  WebScraper _webScraper;
  String _title = '';

  @override
  void initState() {
    super.initState();
    _webScraper = WebScraper('https://example.com');
    _loadData();
  }

  _loadData() async {
    // Load the website data
    await _webScraper.loadWebPage();

    // Extract the title
    String title = _webScraper.getElement('title', ['class', 'title']);

    // Update the UI
    setState(() {
      _title = title;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Web Scraper Demo'),
      ),
      body: Center(
        child: Text(_title),
      ),
    );
  }
}

// Application flow:
// 1. The app starts and creates a WebScraper instance with the URL of the website.
// 2. The app loads the website data using the loadWebPage method.
// 3. The app extracts the title from the website using the getElement method.
// 4. The app updates the UI with the extracted title.
// 5. The app displays the extracted title on the screen.

// Summary:
// This code demonstrates how to use the web_scraper package to extract data from a website.
// It creates a WebScraper instance, loads the website data, extracts the title, and updates the UI.
// The app displays the extracted title on the screen.

```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# on_process_button_widget Flutter Package
=============================================

The `on_process_button_widget` package is a Flutter widget that allows you to create a button that displays a loading animation while a process is running. This package is useful when you want to perform an asynchronous operation, such as a network request or a database query, and you want to provide visual feedback to the user while the operation is in progress.

### Features

*   Displays a loading animation while a process is running
*   Customizable button text and loading animation
*   Supports asynchronous operations

### When to Use

*   When performing network requests or database queries
*   When performing time-consuming operations, such as image processing or file compression
*   When you want to provide visual feedback to the user while an operation is in progress

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

## Step 1: Add the Package to Your Project

Add the following line to your `pubspec.yaml` file:

```yml
dependencies:
  on_process_button_widget: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:on_process_button_widget/on_process_button_widget.dart';
```

## Step 3: Create the Button

Create the button and pass the `onPressed` callback:

```dart
OnProcessButtonWidget(
  onPressed: () async {
    // Perform your asynchronous operation here
    await Future.delayed(Duration(seconds: 2));
  },
  child: Text('Click me'),
)
```

## Platform-Specific Details

*   Android: No additional configuration is required.
*   iOS: No additional configuration is required.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:on_process_button_widget/on_process_button_widget.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'On Process Button Widget Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('On Process Button Widget Demo'),
      ),
      body: Center(
        child: OnProcessButtonWidget(
          // When the button is pressed, this callback is called
          onPressed: () async {
            // Simulate an asynchronous operation
            await Future.delayed(Duration(seconds: 2));
          },
          // The child widget to display inside the button
          child: Text('Click me'),
          // The text to display while the process is running
          loadingText: 'Loading...',
        ),
      ),
    );
  }
}

// The app starts by running the main function, which creates a new MyApp instance.
// MyApp builds a MaterialApp with a title and a theme.
// The home property is set to MyHomePage, which is a stateful widget.
// MyHomePage builds a Scaffold with an AppBar and a body.
// The body contains an OnProcessButtonWidget, which displays a button with a loading animation.
// When the button is pressed, the onPressed callback is called, simulating an asynchronous operation.
// While the operation is in progress, the button displays a loading animation and the text 'Loading...'.
```

<-- END_MAIN -->
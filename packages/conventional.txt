<-- START_DESCRIPTION -->
Conventional Flutter Package: A Detailed Overview
=====================================================

The Conventional Flutter package is a powerful tool for building robust and scalable Flutter applications. It provides a set of pre-built widgets and utilities that simplify the development process, allowing developers to focus on creating high-quality user experiences.

When to Use This Package
------------------------

The Conventional Flutter package is ideal for building complex applications that require a high degree of customization and flexibility. It's particularly well-suited for applications that involve:

* Complex navigation flows
* Customizable UI components
* Advanced state management

Features
--------

The Conventional Flutter package includes a range of features that make it an attractive choice for developers, including:

* Pre-built widgets for common UI components, such as navigation bars and tab bars
* Advanced state management capabilities, including support for Provider and Riverpod
* Customizable theme and styling options
* Support for platform-specific features, such as Android's bottom navigation bar and iOS's tab bar

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->
Setting Up the Conventional Flutter Package
--------------------------------------------

To get started with the Conventional Flutter package, follow these steps:

### Step 1: Add the Package to Your Project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  conventional_flutter: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:conventional_flutter/conventional_flutter.dart';
```
### Step 3: Configure the Package

Configure the package by creating a `ConventionalFlutter` instance:
```dart
ConventionalFlutter(
  title: 'My App',
  theme: ThemeData(
    primarySwatch: Colors.blue,
  ),
  home: MyHomePage(),
);
```
Platform-Specific Details
-------------------------

The Conventional Flutter package includes platform-specific features that require additional configuration.

### Android

To use the Android bottom navigation bar, add the following line to your `AndroidManifest.xml` file:
```xml
<activity
  android:name=".MainActivity"
  android:exported="true"
  android:launchMode="singleTop"
  android:theme="@style/Theme.MyApp">
  <intent-filter>
    <action android:name="android.intent.action.MAIN" />
    <category android:name="android.intent.category.LAUNCHER" />
  </intent-filter>
  <meta-data
    android:name="android.support.PARENT_ACTIVITY"
    android:value=".MainActivity" />
</activity>
```
### iOS

To use the iOS tab bar, add the following line to your `Info.plist` file:
```xml
<key>UITabBar</key>
<dict>
  <key>UITabBarStyle</key>
  <string>black</string>
</dict>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->
```dart
import 'package:flutter/material.dart';
import 'package:conventional_flutter/conventional_flutter.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return ConventionalFlutter(
      title: 'My App',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  int _currentIndex = 0;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('My App'),
      ),
      body: IndexedStack(
        index: _currentIndex,
        children: [
          Center(
            child: Text('Page 1'),
          ),
          Center(
            child: Text('Page 2'),
          ),
          Center(
            child: Text('Page 3'),
          ),
        ],
      ),
      bottomNavigationBar: BottomNavigationBar(
        currentIndex: _currentIndex,
        onTap: (index) {
          setState(() {
            _currentIndex = index;
          });
        },
        items: [
          BottomNavigationBarItem(
            icon: Icon(Icons.home),
            label: 'Home',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.settings),
            label: 'Settings',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.info),
            label: 'Info',
          ),
        ],
      ),
    );
  }
}
```
// The app starts by running the `main` function, which creates a `MyApp` instance.
// The `MyApp` instance creates a `ConventionalFlutter` instance, which is the root of the app.
// The `ConventionalFlutter` instance creates a `MaterialApp` instance, which is the root of the material design app.
// The `MaterialApp` instance creates a `MyHomePage` instance, which is the home page of the app.
// The `MyHomePage` instance creates a `Scaffold` instance, which is the basic material design layout structure.
// The `Scaffold` instance creates an `AppBar` instance, which is the top app bar.
// The `Scaffold` instance creates a `Body` instance, which is the main content of the app.
// The `Body` instance creates an `IndexedStack` instance, which is a stack of children that can be indexed.
// The `IndexedStack` instance creates three `Center` instances, each with a `Text` instance.
// The `Scaffold` instance creates a `BottomNavigationBar` instance, which is the bottom navigation bar.
// The `BottomNavigationBar` instance creates three `BottomNavigationBarItem` instances, each with an `Icon` instance and a `Text` instance.
// When the user taps on a `BottomNavigationBarItem`, the `_currentIndex` is updated, and the `IndexedStack` is updated to show the corresponding child.

<-- END_MAIN -->
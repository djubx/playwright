<-- START_DESCRIPTION -->

# Pinyin Flutter Package
========================

The "pinyin" Flutter package is a library that provides a simple way to convert Chinese characters to Pinyin, which is the Romanization of Chinese characters. This package is useful for developers who want to provide a way for users to input Chinese characters using a standard keyboard.

## Features

* Convert Chinese characters to Pinyin
* Support for multiple Pinyin formats (e.g. with or without tones)
* Easy to use API

## When to Use

This package is useful in a variety of scenarios, such as:

* Providing a way for users to input Chinese characters using a standard keyboard
* Converting Chinese characters to Pinyin for display or storage
* Implementing a search function that allows users to search for Chinese characters using Pinyin

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

## Setup

To use the "pinyin" Flutter package, you need to add it to your project's `pubspec.yaml` file:

```yml
dependencies:
  pinyin: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Basic Usage

To use the package, you need to import it in your Dart file:

```dart
import 'package:pinyin/pinyin.dart';
```

Then, you can use the `Pinyin` class to convert Chinese characters to Pinyin:

```dart
String chinese = '';
String pinyin = Pinyin(chinese).toString();
print(pinyin); // prints 'nǐ hǎo'
```

## Platform-Specific Details

The "pinyin" Flutter package works on both Android and iOS platforms. However, there are some platform-specific details to note:

* On Android, the package uses the `java.text.Normalizer` class to normalize Chinese characters before converting them to Pinyin.
* On iOS, the package uses the `CFStringTransform` function to normalize Chinese characters before converting them to Pinyin.

## Configurations and Optimizations

The "pinyin" Flutter package provides some configurations and optimizations that you can use to customize its behavior:

* You can use the `PinyinFormat` enum to specify the format of the Pinyin output. For example, you can use `PinyinFormat.WithTones` to include tones in the Pinyin output.
* You can use the `PinyinOptimizer` class to optimize the performance of the package. For example, you can use `PinyinOptimizer.Cache` to cache the results of previous conversions.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:pinyin/pinyin.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Pinyin Demo',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Pinyin Demo'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Text('Enter Chinese characters:'),
              TextField(
                onChanged: (text) {
                  String pinyin = Pinyin(text).toString();
                  print('Pinyin: $pinyin');
                },
              ),
              SizedBox(height: 20),
              Text('Pinyin output:'),
              Text(''),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user enters Chinese characters in the TextField.
// 2. The onChanged callback is called whenever the user types something.
// 3. In the onChanged callback, we convert the Chinese characters to Pinyin using the Pinyin class.
// 4. We print the Pinyin output to the console.
// 5. We display the Pinyin output in the Text widget below the TextField.

// In summary, this code demonstrates how to use the "pinyin" Flutter package to convert Chinese characters to Pinyin in a TextField.
```

<-- END_MAIN -->
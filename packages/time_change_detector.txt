<-- START_DESCRIPTION -->

# Time Change Detector Flutter Package
=====================================

The `time_change_detector` Flutter package is a utility library that helps detect changes in the device's time settings. This package is useful when you need to perform certain actions or update your app's state when the user changes the device's time.

### When to Use This Package

*   You need to update your app's state or perform certain actions when the device's time changes.
*   You want to detect changes in the device's time zone.
*   You need to synchronize your app's time with the device's time.

### Features

*   Detects changes in the device's time settings.
*   Detects changes in the device's time zone.
*   Provides a callback function to handle time changes.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Using the Time Change Detector Flutter Package
=====================================================

### Step 1: Add the Package to Your Project

Add the `time_change_detector` package to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  time_change_detector: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the `time_change_detector` package in your Dart file:

```dart
import 'package:time_change_detector/time_change_detector.dart';
```

### Step 3: Initialize the Package

Initialize the `time_change_detector` package in your app's `initState` method:

```dart
@override
void initState() {
  super.initState();
  TimeChangeDetector().init();
}
```

### Step 4: Handle Time Changes

Use the `TimeChangeDetector` class to handle time changes:

```dart
TimeChangeDetector().onTimeChange.listen((event) {
  // Handle time change event
});
```

### Platform-Specific Details

*   **Android:** The `time_change_detector` package uses the `android.intent.action.TIME_SET` intent to detect time changes.
*   **iOS:** The `time_change_detector` package uses the `UIApplicationSignificantTimeChangeNotification` notification to detect time changes.

### Required Configurations or Optimizations

*   Make sure to add the `android.permission.SET_TIME` permission to your `AndroidManifest.xml` file:

```xml
<uses-permission android:name="android.permission.SET_TIME" />
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:time_change_detector/time_change_detector.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Time Change Detector Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  String _currentTime = '';

  @override
  void initState() {
    super.initState();
    TimeChangeDetector().init();
    TimeChangeDetector().onTimeChange.listen((event) {
      setState(() {
        _currentTime = event;
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Time Change Detector Demo'),
      ),
      body: Center(
        child: Text(
          _currentTime,
          style: TextStyle(fontSize: 24),
        ),
      ),
    );
  }
}

// The app starts by running the main function, which creates a new instance of the MyApp widget.
// The MyApp widget is a stateless widget that returns a MaterialApp widget with a title and a theme.
// The home property of the MaterialApp widget is set to an instance of the MyHomePage widget.
// The MyHomePage widget is a stateful widget that initializes the TimeChangeDetector package in its initState method.
// The TimeChangeDetector package is used to detect changes in the device's time settings.
// When a time change is detected, the onTimeChange callback is called, which updates the _currentTime variable with the new time.
// The _currentTime variable is then displayed in the center of the screen using a Text widget.
// The app continues to run and detect time changes until it is closed.

```

<-- END_MAIN -->
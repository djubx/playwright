```markdown
<!-- START_DESCRIPTION -->
# Vexana Inspector: A Comprehensive Overview

The **vexana_inspector** package is a powerful tool designed for Flutter developers who want to enhance their debugging and inspection capabilities when working with the Vexana networking library. This package provides a user-friendly interface to monitor network requests, responses, and errors, making it easier to identify issues during development.

## When to Use Vexana Inspector
- **Debugging Network Calls**: When you need to inspect the details of your API calls, including headers, body, and response times.
- **Performance Monitoring**: To analyze the performance of your network requests and optimize them accordingly.
- **Error Tracking**: To quickly identify and resolve issues related to network failures or unexpected responses.

## Key Features
- **Real-time Monitoring**: Observe network requests and responses in real-time.
- **Detailed Logs**: Access comprehensive logs that include request and response data.
- **User-Friendly Interface**: A simple and intuitive UI for easy navigation and inspection.
- **Integration with Vexana**: Seamlessly integrates with the Vexana library, enhancing its capabilities.

Overall, the Vexana Inspector package is an essential tool for developers looking to streamline their debugging process and improve the reliability of their applications.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Vexana Inspector: Setup and Usage Tutorial

## Installation
To get started with the Vexana Inspector package, you need to add it to your Flutter project. Open your `pubspec.yaml` file and include the following dependency:

```yaml
dependencies:
  vexana_inspector: ^latest_version
```

Make sure to replace `latest_version` with the most recent version available on [pub.dev](https://pub.dev/packages/vexana_inspector).

## Platform-Specific Configuration

### Android
For Android, ensure that you have the necessary permissions in your `AndroidManifest.xml` file. Add the following permissions if they are not already present:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
```

### iOS
For iOS, you may need to configure your `Info.plist` to allow network requests. Add the following lines to your `Info.plist`:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

## Usage
To use the Vexana Inspector, you need to initialize it in your application. Hereâ€™s how you can do that:

1. Import the package in your Dart file:

```dart
import 'package:vexana_inspector/vexana_inspector.dart';
```

2. Initialize the inspector in your main function:

```dart
void main() {
  VexanaInspector.init();
  runApp(MyApp());
}
```

3. Use the inspector to monitor your network requests by wrapping your Vexana client with the inspector:

```dart
final client = VexanaClient(inspector: VexanaInspector());
```

Now, you can start making network requests, and the inspector will log all the details for you to review.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Vexana Inspector in Action

```dart
import 'package:flutter/material.dart';
import 'package:vexana/vexana.dart';
import 'package:vexana_inspector/vexana_inspector.dart';

void main() {
  // Initialize the Vexana Inspector
  VexanaInspector.init();
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Vexana Inspector Demo',
      home: HomeScreen(),
    );
  }
}

class HomeScreen extends StatelessWidget {
  // Create a Vexana client with the inspector
  final VexanaClient client = VexanaClient(inspector: VexanaInspector());

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Vexana Inspector Demo'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () async {
            // Make a network request
            final response = await client.sendRequest(
              'https://jsonplaceholder.typicode.com/posts',
              RequestType.GET,
            );

            // Show the response in a dialog
            showDialog(
              context: context,
              builder: (context) => AlertDialog(
                title: Text('Response'),
                content: Text(response.data.toString()),
                actions: [
                  TextButton(
                    onPressed: () => Navigator.of(context).pop(),
                    child: Text('Close'),
                  ),
                ],
              ),
            );
          },
          child: Text('Fetch Data'),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function initializes the Vexana Inspector and runs the MyApp widget.
// 2. MyApp builds a MaterialApp with a HomeScreen as its home.
// 3. HomeScreen creates a VexanaClient instance with the inspector.
// 4. When the button is pressed, a GET request is made to the specified URL.
// 5. The response is displayed in a dialog box, allowing the user to see the fetched data.
```
<!-- END_MAIN -->
```

### Summary of Application Flow
The application starts by initializing the Vexana Inspector, which allows for monitoring network requests. The `HomeScreen` contains a button that, when pressed, triggers a GET request to a sample API. The response is then displayed in a dialog, showcasing the data fetched from the network. This flow demonstrates how the Vexana Inspector can be utilized to debug and inspect network calls effectively.
<-- START_DESCRIPTION -->

# Fancy Bottom Navigation 2 Package
The `fancy_bottom_navigation_2` package is a popular Flutter package used to create a customizable and visually appealing bottom navigation bar. It provides a range of features, including:

* Customizable icons, colors, and text
* Support for both Android and iOS platforms
* Ability to add a floating action button (FAB)
* Option to hide or show the navigation bar on scroll

This package is ideal for apps that require a modern and sleek bottom navigation bar.

### When to Use This Package
You can use this package in a variety of scenarios, such as:

* Creating a social media app with a bottom navigation bar
* Building a productivity app with a customizable navigation bar
* Developing a game with a unique navigation system

### Features
Some of the key features of this package include:

* Customizable icons, colors, and text
* Support for both Android and iOS platforms
* Ability to add a floating action button (FAB)
* Option to hide or show the navigation bar on scroll

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
To use the `fancy_bottom_navigation_2` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  fancy_bottom_navigation_2: ^0.3.2
```
2. Run `flutter pub get` to install the package.
3. Import the package in your Dart file:
```dart
import 'package:fancy_bottom_navigation_2/fancy_bottom_navigation_2.dart';
```
### Platform-Specific Details
For Android, you need to add the following code to your `AndroidManifest.xml` file:
```xml
<application
    ...
    android:theme="@style/Theme.AppCompat.Light.NoActionBar"
    ...
>
```
For iOS, you need to add the following code to your `Info.plist` file:
```xml
<key>UIViewControllerBasedStatusBarAppearance</key>
<false/>
```
### Configurations and Optimizations
You can customize the appearance of the navigation bar by using the following properties:

* `iconSize`: The size of the icons.
* `selectedColor`: The color of the selected icon.
* `unselectedColor`: The color of the unselected icons.
* `backgroundColor`: The background color of the navigation bar.

You can also add a floating action button (FAB) by using the `floatingActionButton` property.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:fancy_bottom_navigation_2/fancy_bottom_navigation_2.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Fancy Bottom Navigation 2 Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  int _currentIndex = 0;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Fancy Bottom Navigation 2 Demo'),
      ),
      body: Center(
        child: Text('Page $_currentIndex'),
      ),
      bottomNavigationBar: FancyBottomNavigation(
        // Step 1: Define the icons and their corresponding pages
        tabs: [
          TabData(iconData: Icons.home, title: 'Home'),
          TabData(iconData: Icons.search, title: 'Search'),
          TabData(iconData: Icons.settings, title: 'Settings'),
        ],
        // Step 2: Define the initial index
        initialIndex: _currentIndex,
        // Step 3: Define the callback function for when an icon is tapped
        onTabChangedListener: (index) {
          setState(() {
            _currentIndex = index;
          });
        },
        // Step 4: Customize the appearance of the navigation bar
        iconSize: 24,
        selectedColor: Colors.blue,
        unselectedColor: Colors.grey,
        backgroundColor: Colors.white,
        // Step 5: Add a floating action button (FAB)
        floatingActionButton: FloatingActionButton(
          onPressed: () {
            print('FAB pressed');
          },
          child: Icon(Icons.add),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user taps an icon on the navigation bar.
// 2. The `onTabChangedListener` callback function is called with the index of the tapped icon.
// 3. The `_currentIndex` variable is updated with the new index.
// 4. The `setState` function is called to rebuild the widget tree with the new index.
// 5. The `FancyBottomNavigation` widget is rebuilt with the new index, and the corresponding page is displayed.

// In summary, the code flows as follows:
// 1. Define the icons and their corresponding pages.
// 2. Define the initial index.
// 3. Define the callback function for when an icon is tapped.
// 4. Customize the appearance of the navigation bar.
// 5. Add a floating action button (FAB).
// 6. Rebuild the widget tree with the new index when an icon is tapped.

```

<-- END_MAIN -->
<-- START_DESCRIPTION -->
# pref_dessert Flutter Package
The pref_dessert Flutter package is a lightweight, easy-to-use library for managing application preferences. It provides a simple and efficient way to store and retrieve data in the form of key-value pairs.

## Features
- **Easy to use**: The package has a simple and intuitive API, making it easy to integrate into your Flutter application.
- **Fast and efficient**: pref_dessert uses the native SharedPreferences on Android and NSUserDefaults on iOS, ensuring fast and efficient data storage and retrieval.
- **Support for multiple data types**: The package supports storing and retrieving various data types, including strings, integers, booleans, and more.

## When to use pref_dessert
- **Simple data storage**: pref_dessert is ideal for storing small amounts of data, such as user preferences, settings, or cached data.
- **Fast data access**: When you need to quickly store and retrieve data, pref_dessert is a great choice.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->
# Setting up pref_dessert
To use pref_dessert in your Flutter project, follow these steps:

## Step 1: Add the package to your pubspec.yaml file
```yml
dependencies:
  pref_dessert: ^1.0.0
```

## Step 2: Import the package in your Dart file
```dart
import 'package:pref_dessert/pref_dessert.dart';
```

## Step 3: Initialize the package
```dart
await PrefDessert.init();
```

## Platform-Specific Details
- **Android**: pref_dessert uses the native SharedPreferences to store data. No additional configuration is required.
- **iOS**: pref_dessert uses NSUserDefaults to store data. No additional configuration is required.

## Optimizations
- **Data serialization**: When storing complex data types, consider using a serialization library like json_serializable to convert data to a string.

<-- END_TUTORIAL -->

<-- START_MAIN -->
```dart
import 'package:flutter/material.dart';
import 'package:pref_dessert/pref_dessert.dart';

void main() async {
  // Initialize the package
  await PrefDessert.init();

  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Define a key for storing a string value
  final _key = 'example_key';

  // Define a text controller for user input
  final _textController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('pref_dessert Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              // Text field for user input
              TextField(
                controller: _textController,
              ),
              // Button to save the input value
              ElevatedButton(
                onPressed: () async {
                  // Save the input value using pref_dessert
                  await PrefDessert.setString(_key, _textController.text);
                },
                child: Text('Save'),
              ),
              // Button to retrieve the saved value
              ElevatedButton(
                onPressed: () async {
                  // Retrieve the saved value using pref_dessert
                  final value = await PrefDessert.getString(_key);
                  print(value);
                },
                child: Text('Retrieve'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user inputs a value in the text field.
// 2. When the user clicks the "Save" button, the input value is saved using pref_dessert.
// 3. When the user clicks the "Retrieve" button, the saved value is retrieved using pref_dessert and printed to the console.

// Summary:
// This example demonstrates how to use pref_dessert to store and retrieve a string value.
// The package is initialized, and a key is defined for storing the value.
// The user input is saved using pref_dessert, and the saved value is retrieved and printed to the console.
```
<-- END_MAIN -->
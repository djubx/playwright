<-- START_DESCRIPTION -->

Positioned Scroll Observer
==========================

The `positioned_scroll_observer` package is a Flutter library that allows you to observe the scroll position of a `Scrollable` widget. It provides a simple way to react to changes in the scroll position, making it ideal for use cases such as:

*   Loading more data when the user reaches the end of a list
*   Changing the app bar's appearance based on the scroll position
*   Triggering animations based on the scroll position

Key Features:

*   **Easy to use**: Simply wrap your `Scrollable` widget with the `PositionedScrollObserver` widget and provide a callback function to receive the scroll position updates.
*   **Flexible**: Works with any type of `Scrollable` widget, including `ListView`, `GridView`, and `CustomScrollView`.
*   **Platform-agnostic**: Works on both Android and iOS platforms.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
---------------

To use the `positioned_scroll_observer` package, follow these steps:

1.  Add the package to your `pubspec.yaml` file:

    ```yml
dependencies:
  positioned_scroll_observer: ^1.0.0
```

2.  Run `flutter pub get` to install the package.
3.  Import the package in your Dart file:

    ```dart
import 'package:positioned_scroll_observer/positioned_scroll_observer.dart';
```

4.  Wrap your `Scrollable` widget with the `PositionedScrollObserver` widget:

    ```dart
PositionedScrollObserver(
  child: ListView.builder(
    itemCount: 100,
    itemBuilder: (context, index) {
      return ListTile(title: Text('Item $index'));
    },
  ),
  onScroll: (scrollPosition) {
    print('Scroll position: $scrollPosition');
  },
)
```

Platform-Specific Details
-------------------------

The `positioned_scroll_observer` package works on both Android and iOS platforms. However, there are some platform-specific details to be aware of:

*   On Android, the `PositionedScrollObserver` widget uses the `Scrollable` widget's `controller` property to observe the scroll position. This means that you must provide a `ScrollController` instance to the `Scrollable` widget for the `PositionedScrollObserver` to work.
*   On iOS, the `PositionedScrollObserver` widget uses the `Scrollable` widget's `physics` property to observe the scroll position. This means that you must provide a `ScrollPhysics` instance to the `Scrollable` widget for the `PositionedScrollObserver` to work.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:positioned_scroll_observer/positioned_scroll_observer.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Positioned Scroll Observer Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _scrollController = ScrollController();

  @override
  void initState() {
    super.initState();
  }

  @override
  void dispose() {
    _scrollController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Positioned Scroll Observer Demo'),
      ),
      body: PositionedScrollObserver(
        // Step 1: Provide a ScrollController instance to the Scrollable widget.
        child: ListView.builder(
          controller: _scrollController,
          itemCount: 100,
          itemBuilder: (context, index) {
            return ListTile(title: Text('Item $index'));
          },
        ),
        // Step 2: Provide a callback function to receive the scroll position updates.
        onScroll: (scrollPosition) {
          print('Scroll position: $scrollPosition');
          // Step 3: Update the app bar's appearance based on the scroll position.
          if (scrollPosition > 50) {
            setState(() {
              // Change the app bar's color to blue when the scroll position is greater than 50.
            });
          } else {
            setState(() {
              // Change the app bar's color to red when the scroll position is less than or equal to 50.
            });
          }
        },
      ),
    );
  }
}

// Application flow:
// 1. The user scrolls the ListView.
// 2. The PositionedScrollObserver widget observes the scroll position and calls the onScroll callback function.
// 3. The onScroll callback function updates the app bar's appearance based on the scroll position.
// 4. The app bar's color changes to blue when the scroll position is greater than 50, and to red when the scroll position is less than or equal to 50.

```

<-- END_MAIN -->
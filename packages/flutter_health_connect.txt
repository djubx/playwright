<-- START_DESCRIPTION -->

# Flutter Health Connect Package
================================

The `flutter_health_connect` package is a Flutter plugin that allows developers to access and manage health-related data on both Android and iOS platforms. It provides a unified API for accessing health data from various sources, such as Google Fit, Apple Health, and other wearable devices.

## When to Use This Package
---------------------------

This package is ideal for developing health and fitness-related applications that require access to user health data. Some examples of applications that can benefit from this package include:

* Fitness tracking apps
* Health monitoring apps
* Wearable device companion apps
* Telemedicine apps

## Features
------------

The `flutter_health_connect` package provides the following features:

* Access to health data from various sources (Google Fit, Apple Health, etc.)
* Support for multiple data types (steps, distance, calories, etc.)
* Ability to read and write health data
* Platform-specific optimizations for Android and iOS

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `flutter_health_connect` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_health_connect: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:flutter_health_connect/flutter_health_connect.dart';
```
### Step 3: Initialize the Package

Initialize the package by calling the `init` method:
```dart
await FlutterHealthConnect.init();
```
### Step 4: Request Permissions

Request the necessary permissions to access health data:
```dart
await FlutterHealthConnect.requestPermissions();
```
### Step 5: Read or Write Health Data

Use the `read` or `write` methods to access or modify health data:
```dart
// Read health data
final healthData = await FlutterHealthConnect.read(
  dataType: DataType.STEPS,
  startTime: DateTime.now() - Duration(days: 7),
  endTime: DateTime.now(),
);

// Write health data
await FlutterHealthConnect.write(
  dataType: DataType.STEPS,
  value: 1000,
  startTime: DateTime.now(),
  endTime: DateTime.now(),
);
```
### Platform-Specific Details

#### Android

* Make sure to add the following permissions to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.ACTIVITY_RECOGNITION" />
<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
```
* Use the `Google Fit` API to access health data.

#### iOS

* Make sure to add the following permissions to your `Info.plist` file:
```xml
<key>NSHealthShareUsageDescription</key>
<string>This app needs access to your health data to function properly.</string>
```
* Use the `HealthKit` API to access health data.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_health_connect/flutter_health_connect.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatefulWidget {
  @override
  _MyAppState createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  final _healthConnect = FlutterHealthConnect();

  @override
  void initState() {
    super.initState();
    _initHealthConnect();
  }

  Future<void> _initHealthConnect() async {
    // Initialize the health connect package
    await _healthConnect.init();

    // Request the necessary permissions
    await _healthConnect.requestPermissions();
  }

  Future<void> _readHealthData() async {
    // Read health data for the past 7 days
    final healthData = await _healthConnect.read(
      dataType: DataType.STEPS,
      startTime: DateTime.now() - Duration(days: 7),
      endTime: DateTime.now(),
    );

    // Print the health data
    print(healthData);
  }

  Future<void> _writeHealthData() async {
    // Write health data for the current day
    await _healthConnect.write(
      dataType: DataType.STEPS,
      value: 1000,
      startTime: DateTime.now(),
      endTime: DateTime.now(),
    );
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Health Connect Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              ElevatedButton(
                onPressed: _readHealthData,
                child: Text('Read Health Data'),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _writeHealthData,
                child: Text('Write Health Data'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and the health connect package is initialized.
// 2. The user is prompted to grant the necessary permissions to access health data.
// 3. The user can then read or write health data by pressing the corresponding buttons.
// 4. When the user presses the read button, the app reads the health data for the past 7 days and prints it to the console.
// 5. When the user presses the write button, the app writes health data for the current day.

// The health connect package handles the underlying complexity of accessing health data on both Android and iOS platforms.
// The app uses the Google Fit API on Android and the HealthKit API on iOS to access health data.
```

<-- END_MAIN -->
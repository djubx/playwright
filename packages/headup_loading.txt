<-- START_DESCRIPTION -->

# Headup Loading Flutter Package
=====================================

The `headup_loading` Flutter package provides a simple and customizable way to display a loading animation in your Flutter app. It is designed to be used when you need to perform some asynchronous operation, such as fetching data from a server or performing some computation, and you want to display a loading animation to the user while they wait.

## Features

*   Customizable loading animation
*   Support for different loading animation styles
*   Easy to use and integrate into your Flutter app

## When to Use

You can use the `headup_loading` package in any situation where you need to display a loading animation to the user. Some examples include:

*   Fetching data from a server
*   Performing some computation that takes a long time
*   Loading a large image or video

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

## Setup

To use the `headup_loading` package, you need to add it to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  headup_loading: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Basic Usage

To use the `headup_loading` package, you need to import it into your Dart file:

```dart
import 'package:headup_loading/headup_loading.dart';
```

Then, you can use the `HeadupLoading` widget to display a loading animation:

```dart
HeadupLoading(
  child: Text('Loading...'),
)
```

## Customization

You can customize the loading animation by using the `style` property:

```dart
HeadupLoading(
  child: Text('Loading...'),
  style: HeadupLoadingStyle.circular,
)
```

## Platform-Specific Details

The `headup_loading` package works on both Android and iOS platforms. However, you may need to add some platform-specific code to your app to get it working correctly.

### Android

On Android, you need to add the following code to your `AndroidManifest.xml` file:

```xml
<application
  ...
  android:hardwareAccelerated="true"
  ...
>
```

This will enable hardware acceleration for your app, which is required for the loading animation to work correctly.

### iOS

On iOS, you don't need to add any platform-specific code to get the `headup_loading` package working. However, you may need to add some code to your `Info.plist` file to customize the appearance of the loading animation:

```xml
<key>UIActivityIndicatorViewStyle</key>
<string>UIActivityIndicatorViewStyleWhiteLarge</string>
```

This will change the style of the loading animation to a large white spinner.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:headup_loading/headup_loading.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Headup Loading Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  bool _isLoading = false;

  void _toggleLoading() {
    setState(() {
      _isLoading = !_isLoading;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Headup Loading Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            _isLoading
                ? HeadupLoading(
                    child: Text('Loading...'),
                    style: HeadupLoadingStyle.circular,
                  )
                : Text('Press the button to start loading'),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _toggleLoading,
              child: Text(_isLoading ? 'Stop Loading' : 'Start Loading'),
            ),
          ],
        ),
      ),
    );
  }
}

// The app starts by running the main function, which creates a new instance of the RealFlutter widget.
// The RealFlutter widget is a stateless widget that wraps the entire app in a MaterialApp.
// The MaterialApp has a title and a theme, and it uses the MyHomePage widget as its home page.
// The MyHomePage widget is a stateful widget that has a boolean flag to track whether the app is currently loading.
// The _toggleLoading function is used to toggle the loading state.
// The build method of the MyHomePage widget returns a Scaffold with an AppBar and a body.
// The body of the Scaffold is a Center widget that contains a Column with two children.
// The first child is a HeadupLoading widget that is only visible when the app is loading.
// The second child is an ElevatedButton that is used to toggle the loading state.
// When the button is pressed, the _toggleLoading function is called, which updates the loading state and causes the widget tree to be rebuilt.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Sticky Infinite List Flutter Package
=====================================

The `sticky_infinite_list` package is a powerful tool for creating infinite lists with sticky headers in Flutter applications. It provides a simple and efficient way to display large datasets with a sticky header that remains visible as the user scrolls through the list.

### When to Use This Package

This package is ideal for applications that require displaying large amounts of data in a list format, such as:

* Social media feeds
* News articles
* Product catalogs
* Chat applications

### Features

* Infinite scrolling with sticky headers
* Customizable header and item widgets
* Support for multiple data types
* Efficient data loading and caching

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `sticky_infinite_list` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  sticky_infinite_list: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:sticky_infinite_list/sticky_infinite_list.dart';
```
### Step 3: Create a Data Source

Create a data source that will provide the data for your infinite list. This can be a simple list of objects or a more complex data source that fetches data from a server.

### Step 4: Create a Sticky Infinite List

Create a `StickyInfiniteList` widget and pass in your data source and a builder function that will create the header and item widgets.
```dart
StickyInfiniteList(
  data: yourDataSource,
  headerBuilder: (context, index) => YourHeaderWidget(),
  itemBuilder: (context, index) => YourItemWidget(),
);
```
### Platform-Specific Details

* On Android, you may need to add the following line to your `AndroidManifest.xml` file to enable smooth scrolling:
```xml
<application android:hardwareAccelerated="true">
```
* On iOS, you may need to add the following line to your `Info.plist` file to enable smooth scrolling:
```xml
<key>UIRequiresFullScreen</key>
<true/>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:sticky_infinite_list/sticky_infinite_list.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Sticky Infinite List Demo',
      home: StickyInfiniteListDemo(),
    );
  }
}

class StickyInfiniteListDemo extends StatefulWidget {
  @override
  _StickyInfiniteListDemoState createState() => _StickyInfiniteListDemoState();
}

class _StickyInfiniteListDemoState extends State<StickyInfiniteListDemo> {
  List<String> _data = [];

  @override
  void initState() {
    super.initState();
    for (int i = 0; i < 100; i++) {
      _data.add('Item $i');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Sticky Infinite List Demo'),
      ),
      body: StickyInfiniteList(
        data: _data,
        headerBuilder: (context, index) => HeaderWidget(index: index),
        itemBuilder: (context, index) => ItemWidget(index: index),
      ),
    );
  }
}

class HeaderWidget extends StatelessWidget {
  final int index;

  HeaderWidget({this.index});

  @override
  Widget build(BuildContext context) {
    return Container(
      height: 50,
      color: Colors.blue,
      child: Center(
        child: Text('Header $index'),
      ),
    );
  }
}

class ItemWidget extends StatelessWidget {
  final int index;

  ItemWidget({this.index});

  @override
  Widget build(BuildContext context) {
    return Container(
      height: 50,
      color: Colors.white,
      child: Center(
        child: Text('Item $index'),
      ),
    );
  }
}
```

// The application flow is as follows:
// 1. The user runs the app and the `RealFlutter` widget is created.
// 2. The `RealFlutter` widget builds the `StickyInfiniteListDemo` widget.
// 3. The `StickyInfiniteListDemo` widget creates a list of 100 items and stores it in the `_data` variable.
// 4. The `StickyInfiniteListDemo` widget builds the `StickyInfiniteList` widget and passes in the `_data` variable.
// 5. The `StickyInfiniteList` widget creates a header and item widgets for each item in the `_data` variable.
// 6. The user scrolls through the list and the `StickyInfiniteList` widget updates the header and item widgets accordingly.

<-- END_MAIN -->
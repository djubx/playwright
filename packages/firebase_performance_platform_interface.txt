<-- START_DESCRIPTION -->

# Firebase Performance Platform Interface
=====================================

The `firebase_performance_platform_interface` package provides a common interface for the Firebase Performance SDK, allowing developers to easily integrate performance monitoring into their Flutter applications.

## When to Use This Package

This package is ideal for developers who want to monitor and improve the performance of their Flutter applications. It provides a simple and easy-to-use API for tracking performance metrics, such as app startup time, network requests, and custom traces.

## Features

*   **App Startup Time**: Automatically tracks the time it takes for the app to start up.
*   **Network Requests**: Tracks the time it takes for network requests to complete.
*   **Custom Traces**: Allows developers to create custom traces to track specific performance metrics.
*   **Automatic Tracing**: Automatically traces certain events, such as app startup and network requests.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
================

## Step 1: Add the Package to Your Pubspec.yaml File

Add the following line to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  firebase_performance_platform_interface: ^1.0.0
```

## Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:firebase_performance_platform_interface/firebase_performance_platform_interface.dart';
```

## Step 3: Initialize the Firebase Performance SDK

Initialize the Firebase Performance SDK in your app's `main` function:

```dart
void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await FirebasePerformance.instance.initialize();
  runApp(MyApp());
}
```

## Step 4: Track Performance Metrics

Use the `FirebasePerformance` instance to track performance metrics:

```dart
FirebasePerformance.instance.newTrace('my_trace').start();
// Code to be measured
FirebasePerformance.instance.newTrace('my_trace').stop();
```

## Platform-Specific Details

### Android

*   Add the following line to your `android/app/build.gradle` file:

```groovy
dependencies {
  implementation 'com.google.firebase:firebase-perf:20.0.0'
}
```

*   Add the following line to your `android/app/src/main/AndroidManifest.xml` file:

```xml
<application>
  ...
  <meta-data
    android:name="firebase_performance_logcat_enabled"
    android:value="true" />
</application>
```

### iOS

*   Add the following line to your `ios/Podfile` file:

```ruby
pod 'Firebase/Performance'
```

*   Run `pod install` in your terminal.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:firebase_performance_platform_interface/firebase_performance_platform_interface.dart';

void main() async {
  // Initialize the Firebase Performance SDK
  WidgetsFlutterBinding.ensureInitialized();
  await FirebasePerformance.instance.initialize();

  // Run the app
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Firebase Performance Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              ElevatedButton(
                onPressed: () {
                  // Start a custom trace
                  FirebasePerformance.instance.newTrace('my_trace').start();
                  // Code to be measured
                  print('Hello, World!');
                  // Stop the custom trace
                  FirebasePerformance.instance.newTrace('my_trace').stop();
                },
                child: Text('Start Custom Trace'),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  // Start an automatic trace
                  FirebasePerformance.instance.newTrace('automatic_trace').start();
                  // Code to be measured
                  print('Hello, World!');
                  // Stop the automatic trace
                  FirebasePerformance.instance.newTrace('automatic_trace').stop();
                },
                child: Text('Start Automatic Trace'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The app starts by initializing the Firebase Performance SDK.
// Then, it runs the RealFlutter app, which displays two buttons.
// The first button starts a custom trace, prints a message, and stops the custom trace.
// The second button starts an automatic trace, prints a message, and stops the automatic trace.
// The app uses the FirebasePerformance instance to track performance metrics.
// The app also uses the ElevatedButton widget to create buttons.
// The app uses the SizedBox widget to add space between the buttons.
// The app uses the Text widget to display text.
```

<-- END_MAIN -->
```markdown
<!-- START_DESCRIPTION -->
# Crea Radio Button Flutter Package

The `crea_radio_button` package is a versatile Flutter package designed to simplify the implementation of radio buttons in your applications. It provides a customizable and easy-to-use interface for creating radio buttons, allowing developers to enhance user experience with minimal effort. 

## When to Use This Package
You might consider using the `crea_radio_button` package when:
- You need to implement a selection mechanism where only one option can be selected at a time.
- You want to create a visually appealing and customizable radio button interface.
- You are looking for a package that simplifies the management of radio button states.

## Features
- **Customizable Appearance**: Easily change the look and feel of radio buttons to match your app's theme.
- **State Management**: Built-in support for managing the selected state of radio buttons.
- **Accessibility**: Designed with accessibility in mind, ensuring that all users can interact with the radio buttons effectively.
- **Responsive Design**: Adapts well to different screen sizes and orientations.

Overall, the `crea_radio_button` package is an excellent choice for developers looking to implement radio buttons in a clean and efficient manner.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Crea Radio Button

## Installation
To get started with the `crea_radio_button` package, you need to add it to your `pubspec.yaml` file. Open your `pubspec.yaml` and add the following line under dependencies:

```yaml
dependencies:
  crea_radio_button: ^1.0.0
```

After adding the dependency, run the following command in your terminal to install the package:

```bash
flutter pub get
```

## Platform-Specific Details
### Android
For Android, ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

### iOS
For iOS, make sure to set the deployment target in your `ios/Podfile`:

```ruby
platform :ios, '10.0'
```

## Usage
To use the `crea_radio_button` package, you can import it into your Dart file:

```dart
import 'package:crea_radio_button/crea_radio_button.dart';
```

You can then create a simple radio button group as follows:

```dart
CreaRadioButton(
  options: ['Option 1', 'Option 2', 'Option 3'],
  onChanged: (value) {
    // Handle the selected value
  },
)
```

This will create a radio button group with three options. The `onChanged` callback will be triggered whenever a user selects a different option.

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of Crea Radio Button

```dart
import 'package:flutter/material.dart';
import 'package:crea_radio_button/crea_radio_button.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Crea Radio Button Example',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Crea Radio Button Example'),
        ),
        body: Center(
          child: RadioButtonGroup(),
        ),
      ),
    );
  }
}

class RadioButtonGroup extends StatefulWidget {
  @override
  _RadioButtonGroupState createState() => _RadioButtonGroupState();
}

class _RadioButtonGroupState extends State<RadioButtonGroup> {
  // Variable to hold the selected value
  String? selectedValue;

  @override
  Widget build(BuildContext context) {
    return Column(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        // Creating a radio button group with three options
        CreaRadioButton(
          options: ['Option 1', 'Option 2', 'Option 3'],
          onChanged: (value) {
            // Update the selected value when a radio button is selected
            setState(() {
              selectedValue = value;
            });
          },
          selectedValue: selectedValue, // Pass the selected value
        ),
        SizedBox(height: 20),
        // Display the selected value
        Text(
          selectedValue != null ? 'Selected: $selectedValue' : 'No option selected',
          style: TextStyle(fontSize: 20),
        ),
      ],
    );
  }
}

// Application Flow Explanation:
// 1. The main function runs the RealFlutter app.
// 2. RealFlutter builds a MaterialApp with a title and a Scaffold.
// 3. The Scaffold contains an AppBar and a Center widget that holds the RadioButtonGroup.
// 4. The RadioButtonGroup is a StatefulWidget that maintains the selected value.
// 5. Inside the RadioButtonGroup, the CreaRadioButton is created with three options.
// 6. When a radio button is selected, the onChanged callback updates the selectedValue state.
// 7. The selected value is displayed below the radio buttons, updating dynamically as the user makes selections.
```
<!-- END_MAIN -->
``` 

This structured blog post provides a comprehensive overview of the `crea_radio_button` package, guiding developers through its features, installation, usage, and a complete example to illustrate its functionality.
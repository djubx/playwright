```markdown
<-- START_DESCRIPTION -->

# BlurryContainer Flutter Package: An Overview

The `blurrycontainer` Flutter package is a powerful tool for developers looking to add visually appealing blur effects to their Flutter applications. This package simplifies the process of creating blurred backgrounds, overlays, and widgets, enhancing the user interface with a modern and sleek look.

## When to Use BlurryContainer

The `blurrycontainer` package is ideal for applications that require a focus on aesthetics and user experience. It can be used in scenarios such as:

- **Background Blur**: When you want to blur the background of a screen to highlight a foreground element.
- **Modal Overlays**: To create a blurred overlay effect for modals or dialogs.
- **Image Effects**: To apply blur effects to images for a soft-focus look.

## Features

- **Customizable Blur Intensity**: Adjust the level of blur to suit your design needs.
- **Color Overlay**: Add a color overlay on top of the blur for additional styling.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS platforms.
- **Performance Optimized**: Designed to maintain smooth performance even with complex UI elements.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using BlurryContainer

In this tutorial, we will walk through the setup process for the `blurrycontainer` package and demonstrate how to use it in a Flutter application.

## Setup Process

### Step 1: Add Dependency

First, add the `blurrycontainer` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  blurrycontainer: ^1.0.0
```

Run `flutter pub get` to install the package.

### Step 2: Platform-Specific Configurations

#### Android

No additional configuration is required for Android. Ensure your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```gradle
minSdkVersion 21
```

#### iOS

For iOS, ensure that your deployment target is set to at least iOS 9.0 in your `ios/Podfile`:

```ruby
platform :ios, '9.0'
```

### Step 3: Using BlurryContainer

To use the `blurrycontainer`, import it into your Dart file:

```dart
import 'package:blurrycontainer/blurrycontainer.dart';
```

You can now use the `BlurryContainer` widget in your widget tree to create blur effects.

<-- END_TUTORIAL -->

<-- MAIN -->

# Complete Example: Using BlurryContainer in Flutter

Below is a complete example of a Flutter application using the `blurrycontainer` package. This example demonstrates how to create a blurred background with a color overlay.

```dart
import 'package:flutter/material.dart';
import 'package:blurrycontainer/blurrycontainer.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'BlurryContainer Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: HomeScreen(),
    );
  }
}

class HomeScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('BlurryContainer Example'),
      ),
      body: Stack(
        children: [
          // Background image
          Container(
            decoration: BoxDecoration(
              image: DecorationImage(
                image: AssetImage('assets/background.jpg'),
                fit: BoxFit.cover,
              ),
            ),
          ),
          // BlurryContainer widget
          BlurryContainer(
            blur: 5, // Set the blur intensity
            color: Colors.black.withOpacity(0.2), // Add a color overlay
            child: Center(
              child: Text(
                'Hello, Blurry World!',
                style: TextStyle(
                  color: Colors.white,
                  fontSize: 24,
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }
}
```

// The `main` function is the entry point of the Flutter application.
// `MyApp` is the root widget of the application, setting up the MaterialApp.
// `HomeScreen` is the main screen of the app, displaying a blurred background.
// A `Stack` widget is used to layer the background image and the `BlurryContainer`.
// The `BlurryContainer` applies a blur effect over the background image.
// A `Center` widget is used to place text in the middle of the screen.

<-- END_MAIN -->
```

This blog post provides a comprehensive guide to using the `blurrycontainer` package in Flutter applications. By following the setup instructions and using the provided example, developers can easily integrate blur effects into their apps, enhancing the visual appeal and user experience.
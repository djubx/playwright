<-- START_DESCRIPTION -->

**gps_connectivity Flutter Package: A Comprehensive Overview**
===========================================================

The `gps_connectivity` Flutter package provides a simple and efficient way to access device location services, including GPS, cellular, and Wi-Fi connectivity. This package is ideal for applications that require location-based services, such as mapping, tracking, and navigation.

**Key Features:**

*   Access device location services, including GPS, cellular, and Wi-Fi connectivity
*   Get current location, latitude, and longitude
*   Check location service status (enabled/disabled)
*   Request location permissions
*   Listen for location changes

**When to Use:**

*   Mapping and navigation applications
*   Location-based tracking and monitoring systems
*   Geolocation-based gaming and entertainment applications
*   Emergency services and SOS applications

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setting Up and Using the gps_connectivity Package**
=====================================================

### Step 1: Add the Package to Your Project

Add the `gps_connectivity` package to your `pubspec.yaml` file:

```yml
dependencies:
  gps_connectivity: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the `gps_connectivity` package in your Dart file:

```dart
import 'package:gps_connectivity/gps_connectivity.dart';
```

### Step 3: Request Location Permissions

Request location permissions using the `requestLocationPermissions` method:

```dart
await GpsConnectivity.requestLocationPermissions();
```

### Step 4: Get Current Location

Get the current location using the `getCurrentLocation` method:

```dart
final location = await GpsConnectivity.getCurrentLocation();
```

### Step 5: Listen for Location Changes

Listen for location changes using the `onLocationChanged` stream:

```dart
GpsConnectivity.onLocationChanged.listen((location) {
  // Handle location change
});
```

### Platform-Specific Details:

*   **Android:** Add the following permissions to your `AndroidManifest.xml` file:

    ```xml
<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
<uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
```

*   **iOS:** Add the following lines to your `Info.plist` file:

    ```xml
<key>NSLocationWhenInUseUsageDescription</key>
<string>This app needs access to location services</string>
<key>NSLocationAlwaysUsageDescription</key>
<string>This app needs access to location services</string>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:gps_connectivity/gps_connectivity.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'GPS Connectivity Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _locationController = TextEditingController();

  Future<void> _requestLocationPermissions() async {
    // Request location permissions
    await GpsConnectivity.requestLocationPermissions();
  }

  Future<void> _getCurrentLocation() async {
    // Get current location
    final location = await GpsConnectivity.getCurrentLocation();
    _locationController.text = '${location.latitude}, ${location.longitude}';
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('GPS Connectivity Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            TextField(
              controller: _locationController,
              decoration: InputDecoration(
                labelText: 'Location',
                border: OutlineInputBorder(),
              ),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _requestLocationPermissions,
              child: Text('Request Location Permissions'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _getCurrentLocation,
              child: Text('Get Current Location'),
            ),
          ],
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user opens the app and is presented with a screen containing two buttons: "Request Location Permissions" and "Get Current Location".
// 2. When the user clicks the "Request Location Permissions" button, the app requests location permissions using the `requestLocationPermissions` method.
// 3. Once the permissions are granted, the user can click the "Get Current Location" button to get the current location using the `getCurrentLocation` method.
// 4. The current location is then displayed in a text field on the screen.
// 5. The user can repeat the process by clicking the "Get Current Location" button again to get the updated location.

```

<-- END_MAIN -->
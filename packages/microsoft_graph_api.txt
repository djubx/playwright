<-- START_DESCRIPTION -->

**Microsoft Graph API Flutter Package**
=====================================

The `microsoft_graph_api` Flutter package provides a simple and efficient way to integrate Microsoft Graph API into your Flutter application. This package allows you to access various Microsoft services such as Azure Active Directory, Office 365, and OneDrive.

**When to Use This Package**
---------------------------

You can use this package in the following scenarios:

*   To authenticate users with Azure Active Directory (AAD) and access Microsoft services on their behalf.
*   To access and manage files on OneDrive.
*   To interact with Office 365 services such as Outlook, Teams, and SharePoint.

**Features**
------------

The `microsoft_graph_api` package provides the following features:

*   Authentication with Azure Active Directory (AAD)
*   Access to Microsoft Graph API endpoints
*   Support for OneDrive file management
*   Interaction with Office 365 services

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setup and Usage**
-------------------

### Step 1: Add the Package to Your Project

Add the `microsoft_graph_api` package to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  microsoft_graph_api: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Register Your Application on Azure Portal

To use the Microsoft Graph API, you need to register your application on the Azure portal. Follow these steps:

1.  Go to the Azure portal (<https://portal.azure.com/>) and sign in with your Azure account.
2.  Click on "Azure Active Directory" and then click on "App registrations."
3.  Click on "New registration" and enter a name for your application.
4.  Select "Accounts in any organizational directory (Any Azure AD directory - Multitenant)" as the supported account type.
5.  Click on "Register" to create the application.

### Step 3: Configure the Package

Create a new file called `microsoft_graph_api_config.dart` and add the following code:

```dart
import 'package:microsoft_graph_api/microsoft_graph_api.dart';

class MicrosoftGraphApiConfig {
  static final clientId = 'your_client_id';
  static final tenantId = 'your_tenant_id';
  static final redirectUri = 'your_redirect_uri';
}
```

Replace `your_client_id`, `your_tenant_id`, and `your_redirect_uri` with the values from your Azure portal application registration.

### Step 4: Authenticate the User

To authenticate the user, use the `MicrosoftGraphApi` class:

```dart
import 'package:flutter/material.dart';
import 'package:microsoft_graph_api/microsoft_graph_api.dart';
import 'microsoft_graph_api_config.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Microsoft Graph API Demo'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () async {
            await MicrosoftGraphApi.authenticate(
              clientId: MicrosoftGraphApiConfig.clientId,
              tenantId: MicrosoftGraphApiConfig.tenantId,
              redirectUri: MicrosoftGraphApiConfig.redirectUri,
            );
          },
          child: Text('Authenticate'),
        ),
      ),
    );
  }
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:microsoft_graph_api/microsoft_graph_api.dart';
import 'microsoft_graph_api_config.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Microsoft Graph API Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    // Create a new MicrosoftGraphApi instance
    MicrosoftGraphApi _microsoftGraphApi = MicrosoftGraphApi(
      clientId: MicrosoftGraphApiConfig.clientId,
      tenantId: MicrosoftGraphApiConfig.tenantId,
      redirectUri: MicrosoftGraphApiConfig.redirectUri,
    );

    return Scaffold(
      appBar: AppBar(
        title: Text('Microsoft Graph API Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            // Authenticate the user
            ElevatedButton(
              onPressed: () async {
                await _microsoftGraphApi.authenticate();
              },
              child: Text('Authenticate'),
            ),
            // Get the user's profile
            ElevatedButton(
              onPressed: () async {
                final profile = await _microsoftGraphApi.getProfile();
                print(profile);
              },
              child: Text('Get Profile'),
            ),
            // Get the user's files
            ElevatedButton(
              onPressed: () async {
                final files = await _microsoftGraphApi.getFiles();
                print(files);
              },
              child: Text('Get Files'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user clicks the "Authenticate" button, which calls the `authenticate` method of the `MicrosoftGraphApi` instance.
// 2. The `authenticate` method redirects the user to the Azure Active Directory login page.
// 3. After the user logs in, the `authenticate` method returns an access token, which is stored in the `MicrosoftGraphApi` instance.
// 4. The user can then click the "Get Profile" or "Get Files" buttons, which call the `getProfile` or `getFiles` methods of the `MicrosoftGraphApi` instance, respectively.
// 5. These methods use the access token to make requests to the Microsoft Graph API and return the user's profile or files.

// Note: This is just a basic example and does not include error handling or other features that a real-world application would require.
```

<-- END_MAIN -->
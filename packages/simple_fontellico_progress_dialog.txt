```markdown
<!-- START_DESCRIPTION -->
# Simple Fontellico Progress Dialog Flutter Package

The **simple_fontellico_progress_dialog** package is a lightweight and customizable progress dialog for Flutter applications. It provides a simple way to display loading indicators while performing asynchronous tasks, enhancing user experience by keeping users informed about ongoing processes.

## When to Use This Package

You should consider using the **simple_fontellico_progress_dialog** package in scenarios such as:
- When you need to show a loading indicator during data fetching from an API.
- While performing long-running tasks like file uploads or downloads.
- When you want to provide feedback to users during operations that may take time, ensuring they know the app is still responsive.

## Features

- **Customizable Dialog**: You can easily customize the appearance of the dialog, including colors, text, and icons.
- **Easy Integration**: The package is straightforward to integrate into any Flutter application with minimal setup.
- **Lightweight**: It adds minimal overhead to your application, making it suitable for performance-sensitive applications.

Overall, the **simple_fontellico_progress_dialog** package is an excellent choice for developers looking to enhance their Flutter applications with a user-friendly loading experience.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Simple Fontellico Progress Dialog

## Step 1: Adding the Dependency

To use the **simple_fontellico_progress_dialog** package, you first need to add it to your `pubspec.yaml` file. Open the file and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  simple_fontellico_progress_dialog: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run `flutter pub get` in your terminal to install the package.

## Step 2: Importing the Package

In your Dart file, import the package at the top:

```dart
import 'package:simple_fontellico_progress_dialog/simple_fontellico_progress_dialog.dart';
```

## Step 3: Using the Progress Dialog

### Android Configuration

For Android, ensure that your `AndroidManifest.xml` file has the necessary permissions if you are performing network operations. Typically, you might need:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
```

### iOS Configuration

For iOS, you may need to add permissions in your `Info.plist` file if you are accessing the internet. Add the following lines:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

### Example Usage

You can now use the progress dialog in your application. Hereâ€™s a simple example of how to show and hide the dialog:

```dart
// Create an instance of the progress dialog
ProgressDialog progressDialog = ProgressDialog(context);
progressDialog.show(max: 100, msg: 'Loading...');

// Simulate a network call or long-running task
await Future.delayed(Duration(seconds: 3));

// Hide the dialog after the task is complete
progressDialog.hide();
```

This code snippet demonstrates how to show a progress dialog while simulating a delay, such as a network request.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Simple Fontellico Progress Dialog

```dart
import 'package:flutter/material.dart';
import 'package:simple_fontellico_progress_dialog/simple_fontellico_progress_dialog.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Progress Dialog Example',
      home: HomeScreen(),
    );
  }
}

class HomeScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Progress Dialog Example'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () async {
            // Create an instance of the progress dialog
            ProgressDialog progressDialog = ProgressDialog(context);
            // Show the dialog with a maximum value and a message
            progressDialog.show(max: 100, msg: 'Loading...');

            // Simulate a network call or long-running task
            await Future.delayed(Duration(seconds: 3));

            // Hide the dialog after the task is complete
            progressDialog.hide();
          },
          child: Text('Show Progress Dialog'),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the RealFlutter widget.
// 2. The RealFlutter widget builds a MaterialApp with a title and a home screen.
// 3. The HomeScreen widget contains a button that, when pressed, creates an instance of ProgressDialog.
// 4. The dialog is shown with a message indicating that loading is in progress.
// 5. A simulated delay of 3 seconds represents a long-running task (like a network call).
// 6. After the delay, the dialog is hidden, indicating that the task is complete.
```
<!-- END_MAIN -->
```

This structured blog provides a comprehensive overview of the **simple_fontellico_progress_dialog** package, including its features, setup instructions, and a complete example with detailed comments explaining the application flow.
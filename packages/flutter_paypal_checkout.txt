<-- START_DESCRIPTION -->

# Flutter PayPal Checkout Package
=====================================

The `flutter_paypal_checkout` package is a Flutter plugin that allows developers to integrate PayPal checkout into their mobile applications. It provides a simple and secure way to accept payments through PayPal.

### When to Use

This package is ideal for e-commerce applications, online marketplaces, and any other applications that require secure payment processing.

### Features

*   Supports PayPal checkout
*   Handles payment processing securely
*   Easy to integrate into existing Flutter applications

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Flutter PayPal Checkout Package
================================================================

## Step 1: Add the Package to Your Project

Add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  flutter_paypal_checkout: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:flutter_paypal_checkout/flutter_paypal_checkout.dart';
```

## Step 3: Set Up PayPal Configuration

Create a `PayPalConfiguration` object with your PayPal client ID:

```dart
PayPalConfiguration _configuration = PayPalConfiguration(
  clientId: 'YOUR_CLIENT_ID',
  environment: PayPalEnvironment.sandbox,
);
```

## Step 4: Create a PayPal Payment

Create a `PayPalPayment` object with the payment details:

```dart
PayPalPayment _payment = PayPalPayment(
  amount: 10.00,
  currency: 'USD',
  paymentMethod: PayPalPaymentMethod.paypal,
);
```

## Step 5: Start the PayPal Checkout Process

Use the `PayPalCheckout` class to start the checkout process:

```dart
PayPalCheckout.startCheckout(
  configuration: _configuration,
  payment: _payment,
);
```

### Platform-Specific Details

#### Android

Add the following code to your `AndroidManifest.xml` file:

```xml
<activity
  android:name="com.paypal.android.sdk.payments.PaymentActivity"
  android:exported="true" />
```

#### iOS

Add the following code to your `Info.plist` file:

```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_paypal_checkout/flutter_paypal_checkout.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Create a PayPal configuration object
  PayPalConfiguration _configuration = PayPalConfiguration(
    clientId: 'YOUR_CLIENT_ID',
    environment: PayPalEnvironment.sandbox,
  );

  // Create a PayPal payment object
  PayPalPayment _payment = PayPalPayment(
    amount: 10.00,
    currency: 'USD',
    paymentMethod: PayPalPaymentMethod.paypal,
  );

  // Function to start the PayPal checkout process
  void _startCheckout() {
    PayPalCheckout.startCheckout(
      configuration: _configuration,
      payment: _payment,
    );
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('PayPal Checkout Demo'),
        ),
        body: Center(
          child: ElevatedButton(
            onPressed: _startCheckout,
            child: Text('Start Checkout'),
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user clicks the "Start Checkout" button.
// 2. The _startCheckout function is called, which starts the PayPal checkout process.
// 3. The PayPal checkout process is handled by the PayPalCheckout class.
// 4. The user is redirected to the PayPal website to complete the payment.
// 5. After the payment is complete, the user is redirected back to the app.
// 6. The app displays a success message to the user.

// Note: You should replace 'YOUR_CLIENT_ID' with your actual PayPal client ID.
```

<-- END_MAIN -->
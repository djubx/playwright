```markdown
<-- START_DESCRIPTION -->

# Overview of the `applovin_max` Flutter Package

The `applovin_max` Flutter package is a powerful tool for integrating AppLovin's MAX ad mediation platform into your Flutter applications. This package allows developers to monetize their apps by displaying various types of ads, such as banner ads, interstitial ads, and rewarded video ads, with ease and efficiency.

## When to Use `applovin_max`

- **Monetization**: If you're looking to generate revenue from your Flutter app through advertisements, `applovin_max` provides a robust solution.
- **Ad Mediation**: It supports ad mediation, allowing you to serve ads from multiple networks, optimizing fill rates and increasing revenue.
- **Cross-Platform Support**: Ideal for apps targeting both Android and iOS platforms, ensuring a consistent ad experience across devices.

## Features

- **Banner Ads**: Display non-intrusive ads at the top or bottom of the screen.
- **Interstitial Ads**: Full-screen ads that appear at natural transition points in the app.
- **Rewarded Video Ads**: Engage users by offering rewards for watching video ads.
- **Ad Mediation**: Integrate with multiple ad networks to maximize revenue.
- **Customizable Ad Placements**: Flexibility in where and how ads are displayed.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using `applovin_max` in Flutter

In this tutorial, we'll walk through the setup process for integrating the `applovin_max` package into a Flutter project, covering both Android and iOS configurations.

## Step 1: Add Dependency

Add the `applovin_max` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  applovin_max: ^1.0.0
```

Run `flutter pub get` to install the package.

## Step 2: Android Configuration

1. **Update `AndroidManifest.xml`**: Add the necessary permissions and metadata.

```xml
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.app">
    <application>
        <!-- Add AppLovin SDK Key -->
        <meta-data
            android:name="applovin.sdk.key"
            android:value="YOUR_APPLOVIN_SDK_KEY" />
    </application>
</manifest>
```

2. **ProGuard Rules**: If using ProGuard, add the following rules to `proguard-rules.pro`:

```pro
-keep class com.applovin.** { *; }
-keep class com.google.android.gms.ads.identifier.AdvertisingIdClient { *; }
```

## Step 3: iOS Configuration

1. **Update `Info.plist`**: Add the AppLovin SDK key.

```xml
<key>AppLovinSdkKey</key>
<string>YOUR_APPLOVIN_SDK_KEY</string>
```

2. **Podfile**: Ensure your `Podfile` is using frameworks:

```ruby
platform :ios, '10.0'
use_frameworks!
```

Run `pod install` in the `ios` directory.

## Step 4: Initialize the SDK

Initialize the AppLovin SDK in your Flutter app's main file:

```dart
import 'package:applovin_max/applovin_max.dart';

void main() {
  runApp(MyApp());
  AppLovinMAX.initialize('YOUR_APPLOVIN_SDK_KEY');
}
```

## Step 5: Displaying Ads

- **Banner Ads**: Use the `AppLovinMAX.createBannerAd()` method to create and display banner ads.
- **Interstitial Ads**: Load and show interstitial ads using `AppLovinMAX.loadInterstitial()` and `AppLovinMAX.showInterstitial()`.
- **Rewarded Ads**: Similarly, load and show rewarded ads with `AppLovinMAX.loadRewardedAd()` and `AppLovinMAX.showRewardedAd()`.

<-- END_TUTORIAL -->

<-- START_MAIN -->

# Complete Example of Using `applovin_max` in Flutter

Below is a complete example demonstrating how to integrate and use the `applovin_max` package in a Flutter application.

```dart
import 'package:flutter/material.dart';
import 'package:applovin_max/applovin_max.dart';

void main() {
  runApp(RealFlutter());
  // Initialize the AppLovin SDK with your SDK key
  AppLovinMAX.initialize('YOUR_APPLOVIN_SDK_KEY');
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'AppLovin MAX Demo',
      home: AdDemoPage(),
    );
  }
}

class AdDemoPage extends StatefulWidget {
  @override
  _AdDemoPageState createState() => _AdDemoPageState();
}

class _AdDemoPageState extends State<AdDemoPage> {
  @override
  void initState() {
    super.initState();
    // Load an interstitial ad
    AppLovinMAX.loadInterstitial('YOUR_INTERSTITIAL_AD_UNIT_ID');
    // Load a rewarded ad
    AppLovinMAX.loadRewardedAd('YOUR_REWARDED_AD_UNIT_ID');
  }

  void _showInterstitialAd() {
    // Check if the interstitial ad is ready and show it
    if (AppLovinMAX.isInterstitialReady('YOUR_INTERSTITIAL_AD_UNIT_ID')) {
      AppLovinMAX.showInterstitial('YOUR_INTERSTITIAL_AD_UNIT_ID');
    }
  }

  void _showRewardedAd() {
    // Check if the rewarded ad is ready and show it
    if (AppLovinMAX.isRewardedAdReady('YOUR_REWARDED_AD_UNIT_ID')) {
      AppLovinMAX.showRewardedAd('YOUR_REWARDED_AD_UNIT_ID');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('AppLovin MAX Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: _showInterstitialAd,
              child: Text('Show Interstitial Ad'),
            ),
            ElevatedButton(
              onPressed: _showRewardedAd,
              child: Text('Show Rewarded Ad'),
            ),
          ],
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The `main` function initializes the AppLovin SDK with the provided SDK key.
// 2. The `RealFlutter` widget is the root of the application, setting up a MaterialApp.
// 3. `AdDemoPage` is a stateful widget that manages the loading and displaying of ads.
// 4. In `initState`, interstitial and rewarded ads are loaded using their respective ad unit IDs.
// 5. Two buttons are provided to the user to show interstitial and rewarded ads.
// 6. When a button is pressed, the app checks if the ad is ready and displays it if available.

<-- END_MAIN -->
```
```markdown
<-- START_DESCRIPTION -->

# Overview of the `store_checker` Flutter Package

The `store_checker` Flutter package is a powerful tool designed to help developers determine whether their app is running on a genuine app store or a third-party store. This package is particularly useful for applications that need to ensure compliance with app store policies or want to prevent unauthorized distribution.

## When to Use `store_checker`

- **Security**: To ensure that your app is not being distributed through unauthorized channels.
- **Compliance**: To comply with app store policies that require apps to be distributed only through official channels.
- **Analytics**: To gather data on where your app is being downloaded from, which can be useful for market analysis.

## Features

- **Platform Support**: Works seamlessly on both Android and iOS platforms.
- **Easy Integration**: Simple API that can be integrated with minimal effort.
- **Real-time Checking**: Provides real-time verification of the app store source.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the `store_checker` Package

In this tutorial, we will walk through the process of setting up the `store_checker` package in a Flutter project and demonstrate how to use it effectively.

## Step 1: Add Dependency

First, add the `store_checker` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  store_checker: ^1.0.0
```

Run `flutter pub get` to install the package.

## Step 2: Platform-Specific Setup

### Android

1. **Update `AndroidManifest.xml`**: No specific changes are required for Android, but ensure your app has internet permissions if you plan to use network-based checks.

### iOS

1. **Update `Info.plist`**: No specific changes are required for iOS, but ensure your app has the necessary permissions if you plan to use network-based checks.

## Step 3: Using the Package

To use the `store_checker` package, you need to import it and call its methods within your Flutter application. Below is a simple example of how to use the package:

```dart
import 'package:store_checker/store_checker.dart';

class RealFlutter {
  Future<void> checkStore() async {
    StoreCheckerResult result = await StoreChecker.checkStore();
    if (result == StoreCheckerResult.playStore) {
      print('App is running on Google Play Store');
    } else if (result == StoreCheckerResult.appStore) {
      print('App is running on Apple App Store');
    } else {
      print('App is running on an unknown store');
    }
  }
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:store_checker/store_checker.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Store Checker Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: StoreCheckPage(),
    );
  }
}

class StoreCheckPage extends StatefulWidget {
  @override
  _StoreCheckPageState createState() => _StoreCheckPageState();
}

class _StoreCheckPageState extends State<StoreCheckPage> {
  String _storeMessage = 'Checking store...';

  @override
  void initState() {
    super.initState();
    _checkStore();
  }

  Future<void> _checkStore() async {
    // Call the store checker to determine the app store
    StoreCheckerResult result = await StoreChecker.checkStore();
    // Update the UI based on the result
    setState(() {
      if (result == StoreCheckerResult.playStore) {
        _storeMessage = 'App is running on Google Play Store';
      } else if (result == StoreCheckerResult.appStore) {
        _storeMessage = 'App is running on Apple App Store';
      } else {
        _storeMessage = 'App is running on an unknown store';
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Store Checker'),
      ),
      body: Center(
        child: Text(
          _storeMessage,
          style: TextStyle(fontSize: 20),
        ),
      ),
    );
  }
}

// The application starts by running the MyApp widget.
// MyApp is a StatelessWidget that sets up the MaterialApp and the home page.
// The home page is StoreCheckPage, which is a StatefulWidget.
// In the initState of StoreCheckPage, we call _checkStore to determine the app store.
// _checkStore uses the StoreChecker package to check the store and updates the UI accordingly.
// The result is displayed in the center of the screen using a Text widget.
```

<-- END_MAIN -->
```
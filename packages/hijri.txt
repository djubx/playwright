```markdown
<-- START_DESCRIPTION -->

# Hijri Flutter Package: An Overview

The `hijri` Flutter package is a powerful tool for developers who need to incorporate the Islamic Hijri calendar into their Flutter applications. This package provides a comprehensive set of features to handle Hijri date conversions, formatting, and calculations, making it an essential tool for applications targeting Muslim audiences or regions where the Hijri calendar is prevalent.

## When to Use the Hijri Package

The `hijri` package is particularly useful in scenarios where:
- You need to display dates in the Hijri calendar format.
- Your application requires conversion between Gregorian and Hijri dates.
- You want to perform date calculations based on the Hijri calendar, such as finding the number of days between two Hijri dates.

## Key Features

- **Date Conversion**: Easily convert between Gregorian and Hijri dates.
- **Date Formatting**: Format Hijri dates in various styles.
- **Date Calculations**: Perform arithmetic operations on Hijri dates.
- **Localization Support**: Display Hijri dates in different languages.

The package is designed to be simple to use, yet flexible enough to handle complex date manipulations, making it a valuable addition to any Flutter developer's toolkit.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the Hijri Package

In this tutorial, we will walk through the process of setting up the `hijri` package in a Flutter project and demonstrate how to use its features effectively.

## Setup Process

### Step 1: Add Dependency

First, add the `hijri` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  hijri: ^1.0.0
```

Run `flutter pub get` to install the package.

### Step 2: Platform-Specific Configuration

The `hijri` package is platform-independent, so no additional configuration is required for Android or iOS. However, ensure your Flutter environment is set up correctly for both platforms.

### Step 3: Import the Package

In your Dart file, import the `hijri` package:

```dart
import 'package:hijri/hijri.dart';
```

## Using the Hijri Package

### Convert Gregorian to Hijri

To convert a Gregorian date to a Hijri date, use the `HijriCalendar` class:

```dart
HijriCalendar hijriDate = HijriCalendar.fromDate(DateTime.now());
print(hijriDate.toFormat("dd MMMM yyyy")); // Outputs the current Hijri date
```

### Format Hijri Dates

You can format Hijri dates using the `toFormat` method:

```dart
String formattedDate = hijriDate.toFormat("dd MMMM yyyy");
print(formattedDate); // Outputs the formatted Hijri date
```

### Perform Date Calculations

Perform arithmetic operations on Hijri dates:

```dart
HijriCalendar futureDate = hijriDate.addDays(10);
print(futureDate.toFormat("dd MMMM yyyy")); // Outputs the Hijri date 10 days from now
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:hijri/hijri.dart';

void main() {
  runApp(RealFlutterApp());
}

class RealFlutterApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Hijri Date Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: HijriDateHomePage(),
    );
  }
}

class HijriDateHomePage extends StatefulWidget {
  @override
  _HijriDateHomePageState createState() => _HijriDateHomePageState();
}

class _HijriDateHomePageState extends State<HijriDateHomePage> {
  HijriCalendar _hijriDate;

  @override
  void initState() {
    super.initState();
    // Initialize the Hijri date with the current date
    _hijriDate = HijriCalendar.fromDate(DateTime.now());
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Hijri Date Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Today\'s Hijri Date:',
              style: TextStyle(fontSize: 20),
            ),
            SizedBox(height: 10),
            Text(
              _hijriDate.toFormat("dd MMMM yyyy"),
              style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _addDays,
              child: Text('Add 10 Days'),
            ),
          ],
        ),
      ),
    );
  }

  void _addDays() {
    setState(() {
      // Add 10 days to the current Hijri date
      _hijriDate = _hijriDate.addDays(10);
    });
  }
}

// The application starts by initializing the Hijri date with the current date.
// The main widget, RealFlutterApp, sets up the MaterialApp with a home page.
// The home page displays the current Hijri date and a button to add 10 days.
// When the button is pressed, the _addDays method is called, updating the state
// and recalculating the Hijri date to reflect the addition of 10 days.
// The UI updates to show the new Hijri date, demonstrating the package's functionality.
```

<-- END_MAIN -->
```
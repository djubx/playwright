<-- START_DESCRIPTION -->

Action Broadcast Package: A High-Level Overview
==============================================

The `action_broadcast` package is a powerful tool for Flutter developers that allows them to broadcast actions to multiple listeners across the app. This package is particularly useful when you need to notify multiple parts of your app about a specific event or action.

When to Use This Package
------------------------

You can use this package in scenarios such as:

* Notifying multiple widgets about a change in the app's state
* Broadcasting a message to multiple listeners when a specific event occurs
* Decoupling widgets from each other and communicating through actions

Features
--------

The `action_broadcast` package provides the following features:

* Broadcasting actions to multiple listeners
* Registering and unregistering listeners
* Handling actions with a specific payload

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setting Up the Package
----------------------

To use the `action_broadcast` package, you need to add it to your `pubspec.yaml` file:

```yml
dependencies:
  action_broadcast: ^1.0.0
```

Then, run `flutter pub get` to install the package.

Platform-Specific Details
-------------------------

### Android

No additional setup is required for Android.

### iOS

No additional setup is required for iOS.

Using the Package
-----------------

To use the package, you need to create an instance of the `ActionBroadcast` class:

```dart
import 'package:action_broadcast/action_broadcast.dart';

class RealFlutter {
  final ActionBroadcast _actionBroadcast = ActionBroadcast();

  void broadcastAction(String action) {
    _actionBroadcast.broadcast(action);
  }

  void registerListener(String action, Function callback) {
    _actionBroadcast.registerListener(action, callback);
  }

  void unregisterListener(String action, Function callback) {
    _actionBroadcast.unregisterListener(action, callback);
  }
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:action_broadcast/action_broadcast.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Action Broadcast Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final RealFlutter _realFlutter = RealFlutter();

  @override
  void initState() {
    super.initState();
    _realFlutter.registerListener('action_1', _handleAction1);
    _realFlutter.registerListener('action_2', _handleAction2);
  }

  @override
  void dispose() {
    _realFlutter.unregisterListener('action_1', _handleAction1);
    _realFlutter.unregisterListener('action_2', _handleAction2);
    super.dispose();
  }

  void _handleAction1() {
    print('Action 1 received');
  }

  void _handleAction2() {
    print('Action 2 received');
  }

  void _broadcastAction1() {
    _realFlutter.broadcastAction('action_1');
  }

  void _broadcastAction2() {
    _realFlutter.broadcastAction('action_2');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Action Broadcast Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: _broadcastAction1,
              child: Text('Broadcast Action 1'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _broadcastAction2,
              child: Text('Broadcast Action 2'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user presses the "Broadcast Action 1" button.
// 2. The _broadcastAction1 function is called, which broadcasts the 'action_1' action.
// 3. The _handleAction1 function is called, which prints "Action 1 received" to the console.
// 4. The user presses the "Broadcast Action 2" button.
// 5. The _broadcastAction2 function is called, which broadcasts the 'action_2' action.
// 6. The _handleAction2 function is called, which prints "Action 2 received" to the console.

// In summary, the code flows as follows:
// - The user interacts with the UI, which triggers a broadcast action.
// - The broadcast action is received by the registered listeners.
// - The listeners handle the action and perform the necessary actions.
```

<-- END_MAIN -->
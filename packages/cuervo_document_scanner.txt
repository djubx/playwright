```markdown
<!-- START_DESCRIPTION -->
# cuervo_document_scanner Flutter Package

The `cuervo_document_scanner` package is a powerful tool for Flutter developers looking to integrate document scanning capabilities into their applications. This package leverages advanced image processing techniques to allow users to scan documents using their device's camera, providing features such as automatic edge detection, perspective correction, and image enhancement.

## When to Use This Package
You might consider using the `cuervo_document_scanner` package in scenarios such as:
- Building applications that require document management, like scanning receipts, contracts, or notes.
- Creating educational apps that allow students to digitize their handwritten notes.
- Developing business applications that need to capture and store documents on the go.

## Key Features
- **Automatic Edge Detection**: The package automatically detects the edges of documents, making it easy to scan any paper.
- **Perspective Correction**: It corrects the perspective of the scanned document, ensuring that the final image looks professional.
- **Image Enhancement**: The package enhances the scanned images for better readability.
- **Customizable UI**: Developers can customize the scanning interface to match their app's design.

Overall, the `cuervo_document_scanner` package is an excellent choice for any Flutter application that requires document scanning functionality.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using cuervo_document_scanner

In this section, we will walk through the setup process for the `cuervo_document_scanner` package and demonstrate how to use it in your Flutter application.

## Installation

To add the `cuervo_document_scanner` package to your Flutter project, include it in your `pubspec.yaml` file:

```yaml
dependencies:
  cuervo_document_scanner: ^latest_version
```

Make sure to replace `latest_version` with the most recent version available on [pub.dev](https://pub.dev/packages/cuervo_document_scanner).

## Platform-Specific Configuration

### Android
1. Open your `android/app/build.gradle` file and ensure that you have the following permissions in the `AndroidManifest.xml`:

```xml
<uses-permission android:name="android.permission.CAMERA"/>
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
```

2. Ensure that your `minSdkVersion` is set to at least 21 in `android/app/build.gradle`:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

### iOS
1. Open your `ios/Runner/Info.plist` file and add the following keys to request camera access:

```xml
<key>NSCameraUsageDescription</key>
<string>We need access to your camera to scan documents.</string>
<key>NSPhotoLibraryUsageDescription</key>
<string>We need access to your photo library to save scanned documents.</string>
```

## Using the Package

To use the `cuervo_document_scanner` package, you can create a simple UI that triggers the document scanning process. Below is a basic example of how to implement this.

```dart
import 'package:flutter/material.dart';
import 'package:cuervo_document_scanner/cuervo_document_scanner.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Document Scanner')),
        body: Center(
          child: ElevatedButton(
            onPressed: () async {
              // Start the document scanning process
              final scannedImage = await CuervoDocumentScanner.scanDocument();
              if (scannedImage != null) {
                // Handle the scanned image (e.g., display or save it)
                showDialog(
                  context: context,
                  builder: (context) => AlertDialog(
                    title: Text('Scanned Document'),
                    content: Image.file(scannedImage),
                    actions: [
                      TextButton(
                        onPressed: () => Navigator.of(context).pop(),
                        child: Text('OK'),
                      ),
                    ],
                  ),
                );
              }
            },
            child: Text('Scan Document'),
          ),
        ),
      ),
    );
  }
}
```

In this example, we create a simple Flutter application with a button that initiates the document scanning process when pressed. The scanned image is then displayed in a dialog.

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of cuervo_document_scanner

Below is a complete Flutter main file that demonstrates the key features of the `cuervo_document_scanner` package.

```dart
import 'package:flutter/material.dart';
import 'package:cuervo_document_scanner/cuervo_document_scanner.dart';
import 'dart:io';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Document Scanner')),
        body: Center(
          child: ElevatedButton(
            onPressed: () async {
              // Start the document scanning process
              final scannedImage = await CuervoDocumentScanner.scanDocument();
              if (scannedImage != null) {
                // Handle the scanned image (e.g., display or save it)
                showDialog(
                  context: context,
                  builder: (context) => AlertDialog(
                    title: Text('Scanned Document'),
                    content: Image.file(scannedImage), // Display the scanned image
                    actions: [
                      TextButton(
                        onPressed: () => Navigator.of(context).pop(), // Close the dialog
                        child: Text('OK'),
                      ),
                    ],
                  ),
                );
              }
            },
            child: Text('Scan Document'), // Button to trigger scanning
          ),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the RealFlutter widget.
// 2. The RealFlutter widget builds a MaterialApp with a Scaffold containing an AppBar and a Center widget.
// 3. Inside the Center widget, an ElevatedButton is created.
// 4. When the button is pressed, the scanDocument method from the cuervo_document_scanner package is called.
// 5. If a document is successfully scanned, an AlertDialog is displayed showing the scanned image.
// 6. The user can close the dialog by pressing the 'OK' button, which calls Navigator.of(context).pop() to dismiss the dialog.
```
<!-- END_MAIN -->
``` 

This structured approach provides a comprehensive overview of the `cuervo_document_scanner` package, guiding developers through its features, setup, and practical usage in a Flutter application.
```markdown
<-- START_DESCRIPTION -->

# Persian Flutter Package: An Overview

The "persian" Flutter package is a powerful tool designed to facilitate the handling of Persian (Farsi) language and calendar systems within Flutter applications. This package is particularly useful for developers creating apps for Persian-speaking audiences or those that require integration with the Persian calendar.

## When to Use the Persian Package

- **Localization**: If your application targets Persian-speaking users, this package helps in localizing the app content to Persian.
- **Calendar Integration**: For apps that need to display or manipulate dates in the Persian calendar format.
- **Cultural Relevance**: Applications that require cultural elements specific to Persian-speaking regions, such as date formats, numerals, and text direction.

## Key Features

- **Date Conversion**: Convert between Gregorian and Persian dates seamlessly.
- **Localization Support**: Easily localize your app's content to Persian.
- **Text Direction**: Automatically adjust text direction for right-to-left languages.
- **Numeral Conversion**: Convert between Persian and Arabic numerals.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Persian Package in Your Flutter Project

Integrating the "persian" package into your Flutter project is straightforward. Follow these steps to get started:

## Step 1: Add Dependency

First, add the `persian` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  persian: ^1.0.0
```

Run `flutter pub get` to install the package.

## Step 2: Import the Package

In your Dart file, import the package:

```dart
import 'package:persian/persian.dart';
```

## Step 3: Platform-Specific Configuration

### Android

Ensure your `android/app/build.gradle` file has the correct configurations for supporting RTL languages:

```gradle
android {
    ...
    defaultConfig {
        ...
        resConfigs "fa" // Add this line to support Persian language
    }
}
```

### iOS

For iOS, ensure that your project supports RTL languages by checking the `Info.plist` file:

```xml
<key>CFBundleLocalizations</key>
<array>
    <string>fa</string>
</array>
```

## Step 4: Using the Package

You can now use the package to convert dates, localize text, and more. Hereâ€™s a simple example of converting a Gregorian date to a Persian date:

```dart
DateTime now = DateTime.now();
PersianDate persianDate = now.toPersian();
print(persianDate.toString()); // Outputs the current date in Persian format
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:persian/persian.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: PersianDateExample(),
    );
  }
}

class PersianDateExample extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Get the current date and convert it to Persian
    DateTime now = DateTime.now();
    PersianDate persianDate = now.toPersian();

    // Convert a number to Persian numerals
    String persianNumber = 12345.toPersian();

    return Scaffold(
      appBar: AppBar(
        title: Text('Persian Package Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            // Display the current Persian date
            Text(
              'Current Persian Date: ${persianDate.toString()}',
              style: TextStyle(fontSize: 20),
            ),
            SizedBox(height: 20),
            // Display a number in Persian numerals
            Text(
              'Number in Persian: $persianNumber',
              style: TextStyle(fontSize: 20),
            ),
          ],
        ),
      ),
    );
  }
}

// Application Flow:
// 1. The main function initializes the app by running the RealFlutter widget.
// 2. RealFlutter is a StatelessWidget that sets up the MaterialApp with a home screen.
// 3. The home screen is defined by the PersianDateExample widget.
// 4. Inside PersianDateExample, the current date is fetched and converted to a Persian date using the toPersian() method.
// 5. A number is also converted to Persian numerals using the toPersian() method.
// 6. The Scaffold widget sets up the basic visual structure with an AppBar and a centered Column.
// 7. The Column contains two Text widgets displaying the Persian date and the Persian numeral, respectively.
// 8. The app displays these values on the screen, demonstrating the package's capabilities.

<-- END_MAIN -->
```

This blog post provides a comprehensive guide to using the "persian" Flutter package, from setup to implementation, ensuring you can effectively integrate Persian language and calendar support into your Flutter applications.
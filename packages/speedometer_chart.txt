<-- START_DESCRIPTION -->

**Speedometer Chart Flutter Package**
=====================================

The speedometer_chart Flutter package is a customizable and easy-to-use library for creating speedometer charts in Flutter applications. It provides a range of features and options for customizing the appearance and behavior of the chart.

**When to Use**
---------------

The speedometer_chart package is ideal for use cases where you need to display a speedometer or gauge chart in your Flutter application. Some examples of when to use this package include:

* Displaying a vehicle's speed or RPM
* Showing a user's progress towards a goal
* Visualizing data that requires a circular or gauge-like representation

**Features**
------------

The speedometer_chart package includes the following features:

* Customizable chart appearance, including colors, fonts, and sizes
* Support for multiple chart types, including speedometers and gauges
* Animated chart transitions and interactions
* Support for both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setup and Usage**
-------------------

To use the speedometer_chart package in your Flutter application, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  speedometer_chart: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:speedometer_chart/speedometer_chart.dart';
```
### Step 3: Create a Speedometer Chart

Create a speedometer chart using the `SpeedometerChart` widget:
```dart
SpeedometerChart(
  size: Size(200, 200),
  minValue: 0,
  maxValue: 100,
  currentValue: 50,
  backgroundColor: Colors.white,
  foregroundColor: Colors.blue,
)
```
### Platform-Specific Details

The speedometer_chart package works on both Android and iOS platforms. However, you may need to add the following lines to your `AndroidManifest.xml` file to ensure proper rendering on Android:
```xml
<application
  ...
  android:hardwareAccelerated="true"
  ...
>
```
### Configurations and Optimizations

You can customize the appearance and behavior of the speedometer chart by using various properties and methods provided by the `SpeedometerChart` widget. For example, you can change the chart's size, colors, and font styles.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:speedometer_chart/speedometer_chart.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Speedometer Chart Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  double _currentValue = 50;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Speedometer Chart Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            SpeedometerChart(
              size: Size(200, 200),
              minValue: 0,
              maxValue: 100,
              currentValue: _currentValue,
              backgroundColor: Colors.white,
              foregroundColor: Colors.blue,
            ),
            Slider(
              value: _currentValue,
              min: 0,
              max: 100,
              divisions: 10,
              label: _currentValue.round().toString(),
              onChanged: (value) {
                setState(() {
                  _currentValue = value;
                });
              },
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app and sees a speedometer chart with a initial value of 50.
// 2. The user can change the value of the speedometer chart by using the slider.
// 3. As the user changes the value, the speedometer chart updates in real-time to reflect the new value.
// 4. The user can see the current value of the speedometer chart displayed on the slider.
```

// The code flow is as follows:
// 1. We import the necessary packages, including the speedometer_chart package.
// 2. We create a material app with a home page that displays a speedometer chart.
// 3. We define a stateful widget for the home page that contains a speedometer chart and a slider.
// 4. We use the SpeedometerChart widget to create a speedometer chart with a size, min and max values, and a current value.
// 5. We use the Slider widget to create a slider that allows the user to change the value of the speedometer chart.
// 6. We update the state of the widget with the new value when the user changes the slider.
// 7. We display the current value of the speedometer chart on the slider.

<-- END_MAIN -->
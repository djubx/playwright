<-- START_DESCRIPTION -->

Cloud Text-to-Speech Flutter Package
=====================================

The `cloud_text_to_speech` Flutter package is a powerful tool for converting text into natural-sounding speech. It leverages the Google Cloud Text-to-Speech API to generate high-quality audio files that can be played back in your Flutter application.

When to Use This Package
------------------------

This package is ideal for applications that require text-to-speech functionality, such as:

* Audiobooks and podcasts
* Language learning apps
* Accessibility features for visually impaired users
* Voice assistants and chatbots

Features
--------

* Supports over 30 languages and 180 voices
* Customizable speech parameters, including pitch, rate, and volume
* Supports MP3 and WAV audio formats
* Works on both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Configuration
-----------------------

To use the `cloud_text_to_speech` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  cloud_text_to_speech: ^0.1.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:cloud_text_to_speech/cloud_text_to_speech.dart';
```
### Step 3: Initialize the Package

Initialize the package with your Google Cloud API credentials:
```dart
CloudTextToSpeech _cloudTextToSpeech = CloudTextToSpeech(
  apiKey: 'YOUR_API_KEY',
  apiSecret: 'YOUR_API_SECRET',
);
```
### Step 4: Configure Platform-Specific Settings

#### Android

Add the following lines to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.INTERNET" />
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
```
#### iOS

Add the following lines to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```
### Step 5: Use the Package

Use the package to convert text to speech:
```dart
_cloudTextToSpeech.convertTextToSpeech(
  text: 'Hello, world!',
  language: 'en-US',
  voice: 'en-US-Standard-A',
  audioFormat: AudioFormat.mp3,
).then((audioFile) {
  // Play the audio file
});
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:cloud_text_to_speech/cloud_text_to_speech.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Cloud Text-to-Speech Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  CloudTextToSpeech _cloudTextToSpeech;
  String _text = 'Hello, world!';
  String _language = 'en-US';
  String _voice = 'en-US-Standard-A';
  AudioFormat _audioFormat = AudioFormat.mp3;

  @override
  void initState() {
    super.initState();
    _cloudTextToSpeech = CloudTextToSpeech(
      apiKey: 'YOUR_API_KEY',
      apiSecret: 'YOUR_API_SECRET',
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Cloud Text-to-Speech Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            TextField(
              controller: TextEditingController(text: _text),
              onChanged: (text) {
                setState(() {
                  _text = text;
                });
              },
            ),
            DropdownButton<String>(
              value: _language,
              onChanged: (language) {
                setState(() {
                  _language = language;
                });
              },
              items: [
                DropdownMenuItem(
                  child: Text('English (US)'),
                  value: 'en-US',
                ),
                DropdownMenuItem(
                  child: Text('Spanish (ES)'),
                  value: 'es-ES',
                ),
              ],
            ),
            DropdownButton<String>(
              value: _voice,
              onChanged: (voice) {
                setState(() {
                  _voice = voice;
                });
              },
              items: [
                DropdownMenuItem(
                  child: Text('en-US-Standard-A'),
                  value: 'en-US-Standard-A',
                ),
                DropdownMenuItem(
                  child: Text('es-ES-Standard-A'),
                  value: 'es-ES-Standard-A',
                ),
              ],
            ),
            DropdownButton<AudioFormat>(
              value: _audioFormat,
              onChanged: (audioFormat) {
                setState(() {
                  _audioFormat = audioFormat;
                });
              },
              items: [
                DropdownMenuItem(
                  child: Text('MP3'),
                  value: AudioFormat.mp3,
                ),
                DropdownMenuItem(
                  child: Text('WAV'),
                  value: AudioFormat.wav,
                ),
              ],
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () async {
                final audioFile = await _cloudTextToSpeech.convertTextToSpeech(
                  text: _text,
                  language: _language,
                  voice: _voice,
                  audioFormat: _audioFormat,
                );
                // Play the audio file
              },
              child: Text('Convert Text to Speech'),
            ),
          ],
        ),
      ),
    );
  }
}

// The app starts by initializing the CloudTextToSpeech instance with the API credentials.
// The user can then enter the text to be converted, select the language, voice, and audio format.
// When the user clicks the "Convert Text to Speech" button, the app calls the convertTextToSpeech method.
// The method returns an audio file, which can be played by the app.
// The app uses the DropdownButton widget to display the available languages, voices, and audio formats.
// The app uses the ElevatedButton widget to display the "Convert Text to Speech" button.
```

<-- END_MAIN -->
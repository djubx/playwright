# Video Frame Extractor Flutter Package

## <-- START_DESCRIPTION -->

### Overview

The `video_frame_extractor` package is a powerful tool for Flutter developers looking to extract frames from video files. This package is particularly useful in applications that require video processing, such as video editing apps, thumbnail generation, or any scenario where you need to analyze or manipulate video content frame by frame.

### When to Use

You might consider using the `video_frame_extractor` package in scenarios such as:
- Creating a video player with frame-by-frame navigation.
- Generating thumbnails for video previews.
- Analyzing video content for specific frames.
- Building video editing tools that require frame manipulation.

### Features

- **Frame Extraction**: Extracts individual frames from video files.
- **Support for Multiple Formats**: Works with various video formats, including MP4, AVI, and more.
- **Easy Integration**: Simple API that integrates seamlessly with Flutter applications.
- **Platform Compatibility**: Supports both Android and iOS platforms.

## <-- END_DESCRIPTION -->

## <-- START_TUTORIAL -->

### Setup Process

To get started with the `video_frame_extractor` package, follow these steps:

1. **Add Dependency**: Open your `pubspec.yaml` file and add the package dependency:

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     video_frame_extractor: ^latest_version
   ```

   Replace `^latest_version` with the latest version of the package available on [pub.dev](https://pub.dev/packages/video_frame_extractor).

2. **Install the Package**: Run the following command in your terminal to install the package:

   ```bash
   flutter pub get
   ```

3. **Platform-Specific Configuration**:
   - **Android**: Ensure that your `android/app/build.gradle` file has the following configurations:

     ```groovy
     android {
         ...
         compileOptions {
             sourceCompatibility JavaVersion.VERSION_1_8
             targetCompatibility JavaVersion.VERSION_1_8
         }
     }
     ```

   - **iOS**: Open your `ios/Runner/Info.plist` file and add the following permissions if you plan to access videos from the user's library:

     ```xml
     <key>NSPhotoLibraryUsageDescription</key>
     <string>We need access to your photo library to extract frames from videos.</string>
     ```

### Using the Package

To use the `video_frame_extractor` package, you can follow this simple example:

1. Import the package in your Dart file:

   ```dart
   import 'package:video_frame_extractor/video_frame_extractor.dart';
   ```

2. Use the `VideoFrameExtractor` class to extract frames from a video file:

   ```dart
   Future<void> extractFrames(String videoPath) async {
     // Extract frames from the video
     List<Uint8List> frames = await VideoFrameExtractor.extractFrames(videoPath);
     // Do something with the frames, e.g., display them
   }
   ```

## <-- END_TUTORIAL -->

## <-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:video_frame_extractor/video_frame_extractor.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Video Frame Extractor Demo',
      home: VideoFrameExtractorDemo(),
    );
  }
}

class VideoFrameExtractorDemo extends StatefulWidget {
  @override
  _VideoFrameExtractorDemoState createState() => _VideoFrameExtractorDemoState();
}

class _VideoFrameExtractorDemoState extends State<VideoFrameExtractorDemo> {
  List<Uint8List> _frames = []; // List to hold extracted frames
  bool _isLoading = false; // Loading state

  // Function to extract frames from a video
  Future<void> _extractFrames() async {
    setState(() {
      _isLoading = true; // Set loading state to true
    });

    // Path to the video file (replace with your video path)
    String videoPath = 'path/to/your/video.mp4';

    // Extract frames from the video
    try {
      _frames = await VideoFrameExtractor.extractFrames(videoPath);
    } catch (e) {
      print('Error extracting frames: $e'); // Handle any errors
    } finally {
      setState(() {
        _isLoading = false; // Set loading state to false
      });
    }
  }

  @override
  void initState() {
    super.initState();
    _extractFrames(); // Call the function to extract frames on init
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Video Frame Extractor Demo'),
      ),
      body: _isLoading
          ? Center(child: CircularProgressIndicator()) // Show loading indicator
          : _frames.isEmpty
              ? Center(child: Text('No frames extracted.')) // No frames message
              : ListView.builder(
                  itemCount: _frames.length,
                  itemBuilder: (context, index) {
                    return Image.memory(_frames[index]); // Display each frame
                  },
                ),
    );
  }
}
```

```dart
// The above code demonstrates a simple Flutter application that extracts frames from a video file.
// 
// 1. The `main` function initializes the app and sets `RealFlutter` as the home widget.
// 2. The `RealFlutter` widget builds a MaterialApp with a title and a home page.
// 3. The `VideoFrameExtractorDemo` widget is a stateful widget that manages the frame extraction process.
// 4. In the `_VideoFrameExtractorDemoState` class:
//    - A list `_frames` is created to store the extracted frames.
//    - A boolean `_isLoading` is used to manage the loading state.
//    - The `_extractFrames` function is defined to extract frames from a specified video path.
//    - The `initState` method calls `_extractFrames` when the widget is first created.
// 5. The `build` method displays a loading indicator while frames are being extracted, a message if no frames are extracted, or a list of images if frames are available.
// 
// This application flow allows users to see the extracted frames from a video file in a simple and effective manner.
```

## <-- END_MAIN -->

### Summary

In this blog post, we explored the `video_frame_extractor` Flutter package, which allows developers to extract frames from video files easily. We covered the setup process, including platform-specific configurations for Android and iOS, and provided a complete example of a Flutter application that demonstrates the package's capabilities. The application extracts frames from a video and displays them in a list, providing a clear and user-friendly interface. This package is ideal for developers looking to implement video processing features in their Flutter applications.
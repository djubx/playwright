<-- START_DESCRIPTION -->

# go_transitions Flutter Package
=====================================

The `go_transitions` Flutter package provides a simple and easy-to-use way to manage transitions between routes in your Flutter app. It allows you to define custom transitions and apply them to specific routes or to all routes in your app.

## When to Use
--------------

You can use `go_transitions` when you want to:

* Define custom transitions between routes in your app
* Apply different transitions to specific routes or to all routes in your app
* Easily manage transitions between routes without having to write complex code

## Features
------------

* Define custom transitions using a simple and intuitive API
* Apply transitions to specific routes or to all routes in your app
* Support for both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up go_transitions
==========================

To use `go_transitions` in your Flutter app, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  go_transitions: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:go_transitions/go_transitions.dart';
```
### Step 3: Define Your Transitions

Define your custom transitions using the `GoTransition` class:
```dart
GoTransition myTransition = GoTransition(
  duration: Duration(milliseconds: 500),
  builder: (context, child) {
    return FadeTransition(opacity: 0.5, child: child);
  },
);
```
### Step 4: Apply the Transition to a Route

Apply the transition to a specific route using the `GoRouter` class:
```dart
GoRouter(
  routes: [
    GoRoute(
      path: '/',
      builder: (context) => MyHomePage(),
      transition: myTransition,
    ),
  ],
);
```
### Platform-Specific Details

* Android: Make sure to add the `android:hardwareAccelerated` attribute to your `AndroidManifest.xml` file:
```xml
<application
  ...
  android:hardwareAccelerated="true">
```
* iOS: No additional configuration is required.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:go_transitions/go_transitions.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Go Transitions Demo',
      home: GoRouter(
        routes: [
          GoRoute(
            path: '/',
            builder: (context) => MyHomePage(),
            transition: myTransition,
          ),
          GoRoute(
            path: '/second',
            builder: (context) => SecondPage(),
            transition: myTransition,
          ),
        ],
      ),
    );
  }
}

GoTransition myTransition = GoTransition(
  duration: Duration(milliseconds: 500),
  builder: (context, child) {
    return FadeTransition(opacity: 0.5, child: child);
  },
);

class MyHomePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Home Page'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            GoRouter.of(context).push('/second');
          },
          child: Text('Go to Second Page'),
        ),
      ),
    );
  }
}

class SecondPage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Second Page'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            GoRouter.of(context).pop();
          },
          child: Text('Go Back'),
        ),
      ),
    );
  }
}
```

// This is the main entry point of the app.
// The MyApp widget is the root of the app.
// It uses the MaterialApp widget to define the app's title and home page.
// The home page is defined using the GoRouter widget, which manages the app's routes.
// The GoRouter widget takes a list of GoRoute widgets, each defining a route in the app.
// Each GoRoute widget specifies the path, builder, and transition for the route.
// The builder property specifies the widget to build for the route.
// The transition property specifies the transition to use when navigating to the route.
// In this example, we define two routes: the home page and the second page.
// We use the same transition for both routes, which is a fade transition with a duration of 500 milliseconds.
// When the user navigates to the second page, the GoRouter widget uses the transition to animate the page change.
// When the user navigates back to the home page, the GoRouter widget uses the transition again to animate the page change.

<-- END_MAIN -->
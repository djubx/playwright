# Angel3 Hot Flutter Package

## <-- START_DESCRIPTION -->

### Overview of the "angel3_hot" Package

The `angel3_hot` package is a powerful tool designed for Flutter developers who want to enhance their development experience with hot reload capabilities. This package is particularly useful for those working with the Angel framework, allowing for rapid development and testing of applications without the need for a full restart. 

### When to Use

You should consider using `angel3_hot` when:
- You are developing applications using the Angel framework.
- You want to improve your development workflow with hot reload features.
- You need a seamless way to test changes in your code without losing the application state.

### Key Features

- **Hot Reload**: Instantly see changes in your application without restarting.
- **Integration with Angel Framework**: Works seamlessly with the Angel backend framework.
- **State Preservation**: Maintains the application state during reloads, enhancing the development experience.
- **Cross-Platform Support**: Compatible with both Android and iOS platforms.

## <-- END_DESCRIPTION -->

## <-- START_TUTORIAL -->

### Setup Process

To get started with the `angel3_hot` package, follow these steps:

1. **Add Dependency**: Open your `pubspec.yaml` file and add the `angel3_hot` package under dependencies.

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     angel3_hot: ^latest_version
   ```

   Replace `^latest_version` with the latest version available on [pub.dev](https://pub.dev/packages/angel3_hot).

2. **Install the Package**: Run the following command in your terminal to install the package:

   ```bash
   flutter pub get
   ```

3. **Platform-Specific Configuration**:
   - **Android**: Ensure that your `android/app/build.gradle` file has the correct configurations for Kotlin and Gradle versions.
   - **iOS**: Open your `ios/Runner.xcworkspace` in Xcode and ensure that your deployment target is set to a version compatible with Flutter.

4. **Import the Package**: In your Dart files, import the package to start using it.

   ```dart
   import 'package:angel3_hot/angel3_hot.dart';
   ```

### Using the Package

To utilize the `angel3_hot` package, you will typically set up a `RealFlutter` class that initializes the hot reload functionality. Hereâ€™s a basic example of how to set it up:

```dart
import 'package:flutter/material.dart';
import 'package:angel3_hot/angel3_hot.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Angel3 Hot Example',
      home: HomeScreen(),
    );
  }
}

class HomeScreen extends StatefulWidget {
  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  int _counter = 0;

  void _incrementCounter() {
    setState(() {
      _counter++;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Angel3 Hot Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text('You have pushed the button this many times:'),
            Text('$_counter', style: Theme.of(context).textTheme.headline4),
          ],
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _incrementCounter,
        tooltip: 'Increment',
        child: Icon(Icons.add),
      ),
    );
  }
}
```

## <-- END_TUTORIAL -->

## <-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:angel3_hot/angel3_hot.dart';

// Entry point of the application
void main() {
  // Run the RealFlutter application
  runApp(RealFlutter());
}

// Main application widget
class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Build the MaterialApp widget
    return MaterialApp(
      title: 'Angel3 Hot Example', // Title of the app
      home: HomeScreen(), // Set the home screen
    );
  }
}

// Home screen widget
class HomeScreen extends StatefulWidget {
  @override
  _HomeScreenState createState() => _HomeScreenState(); // Create state for HomeScreen
}

// State class for HomeScreen
class _HomeScreenState extends State<HomeScreen> {
  int _counter = 0; // Counter variable to keep track of button presses

  // Method to increment the counter
  void _incrementCounter() {
    setState(() {
      _counter++; // Increment the counter
    });
  }

  @override
  Widget build(BuildContext context) {
    // Build the UI for the HomeScreen
    return Scaffold(
      appBar: AppBar(
        title: Text('Angel3 Hot Example'), // App bar title
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text('You have pushed the button this many times:'), // Instruction text
            Text('$_counter', style: Theme.of(context).textTheme.headline4), // Display counter
          ],
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _incrementCounter, // Call increment method on press
        tooltip: 'Increment', // Tooltip for the button
        child: Icon(Icons.add), // Button icon
      ),
    );
  }
}

/*
Application Flow Explanation:
1. The application starts with the main() function, which calls runApp() to launch the RealFlutter app.
2. The RealFlutter class builds a MaterialApp with a title and sets the HomeScreen as the home widget.
3. The HomeScreen widget maintains a counter state, initialized to zero.
4. When the floating action button is pressed, the _incrementCounter method is called, which updates the state and increments the counter.
5. The UI is rebuilt to reflect the updated counter value, demonstrating the hot reload feature of the angel3_hot package.
*/

## <-- END_MAIN -->
<-- START_DESCRIPTION -->

# Jalali Table Calendar Flutter Package
=====================================

The `jalali_table_calendar` package is a Flutter library that provides a table-based calendar for displaying and selecting dates in the Jalali (Persian) calendar system. This package is ideal for applications that require a calendar interface for users to select dates, and it supports both Android and iOS platforms.

### Features

*   Displays a table-based calendar with Jalali dates
*   Supports date selection and range selection
*   Customizable calendar appearance and behavior
*   Compatible with both Android and iOS platforms

### When to Use

This package is suitable for applications that require a calendar interface for users to select dates, such as:

*   Scheduling apps
*   Event planning apps
*   Date picker components

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the Package
=====================================

To use the `jalali_table_calendar` package in your Flutter project, follow these steps:

### Step 1: Add the Package to Your Project

Add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  jalali_table_calendar: ^1.1.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:jalali_table_calendar/jalali_table_calendar.dart';
```

### Step 3: Create a Calendar Widget

Create a `JalaliTableCalendar` widget and customize its appearance and behavior as needed:

```dart
JalaliTableCalendar(
  onDaySelected: (date) {
    // Handle date selection
  },
  calendarBuilders: CalendarBuilders(
    markerBuilder: (context, day, event) {
      // Customize calendar markers
    },
  ),
)
```

### Platform-Specific Details

*   Android: No additional configuration is required.
*   iOS: No additional configuration is required.

### Optimizations

*   To improve performance, consider using a smaller calendar range.
*   To customize the calendar's appearance, use the `calendarBuilders` property.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:jalali_table_calendar/jalali_table_calendar.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Jalali Table Calendar Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  CalendarFormat _calendarFormat = CalendarFormat.month;
  DateTime _focusedDay = DateTime.now();
  DateTime _selectedDay = DateTime.now();

  @override
  Widget build(BuildContext context) {
    // Create a Scaffold with a Column
    return Scaffold(
      appBar: AppBar(
        title: Text('Jalali Table Calendar Demo'),
      ),
      body: Column(
        children: [
          // Create a JalaliTableCalendar widget
          JalaliTableCalendar(
            // Set the calendar format
            calendarFormat: _calendarFormat,
            // Set the focused day
            focusedDay: _focusedDay,
            // Set the selected day
            selectedDayPredicate: (day) => _selectedDay == day,
            // Handle date selection
            onDaySelected: (selectedDay, focusedDay) {
              setState(() {
                _focusedDay = focusedDay;
                _selectedDay = selectedDay;
              });
            },
            // Customize calendar markers
            calendarBuilders: CalendarBuilders(
              markerBuilder: (context, day, event) {
                return Container(
                  width: 20,
                  height: 20,
                  decoration: BoxDecoration(
                    shape: BoxShape.circle,
                    color: Colors.blue,
                  ),
                );
              },
            ),
          ),
          // Create a button to toggle the calendar format
          ElevatedButton(
            onPressed: () {
              setState(() {
                _calendarFormat = _calendarFormat == CalendarFormat.month
                    ? CalendarFormat.twoWeeks
                    : CalendarFormat.month;
              });
            },
            child: Text('Toggle Calendar Format'),
          ),
        ],
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and sees a calendar with the current month.
// 2. The user can select a date by tapping on it.
// 3. The selected date is highlighted in blue.
// 4. The user can toggle the calendar format between month and two weeks by tapping the button.
// 5. The calendar updates in real-time as the user interacts with it.
```

<-- END_MAIN -->
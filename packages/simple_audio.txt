# Simple Audio Flutter Package

<!-- START_DESCRIPTION -->
## Description

The `simple_audio` Flutter package is a lightweight and easy-to-use library designed for audio playback in Flutter applications. It provides a straightforward API for playing audio files, making it an excellent choice for developers looking to integrate audio features into their apps without the complexity of more extensive libraries.

### When to Use

You might consider using `simple_audio` in scenarios such as:
- Building a music player app.
- Adding sound effects to games.
- Implementing audio feedback in forms or buttons.
- Creating educational apps that require audio narration.

### Features

- **Easy Integration**: Simple API that allows for quick setup and usage.
- **Supports Multiple Formats**: Play audio files in various formats, including MP3 and WAV.
- **Playback Control**: Control playback with methods to play, pause, stop, and seek.
- **Volume Control**: Adjust the volume of the audio playback.
- **Stream Support**: Ability to play audio from network streams.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
## Tutorial

### Installation

To add the `simple_audio` package to your Flutter project, include it in your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  simple_audio: ^1.0.0  # Check for the latest version on pub.dev
```

Run `flutter pub get` to install the package.

### Platform-Specific Configuration

#### Android

For Android, ensure that you have the necessary permissions in your `AndroidManifest.xml` file:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
```

#### iOS

For iOS, you may need to add the following to your `Info.plist` to allow audio playback:

```xml
<key>NSMicrophoneUsageDescription</key>
<string>We need access to your microphone for audio playback.</string>
```

### Basic Usage

To use the `simple_audio` package, you can follow these steps:

1. Import the package in your Dart file:

```dart
import 'package:simple_audio/simple_audio.dart';
```

2. Create an instance of the `SimpleAudio` class and use its methods to control audio playback.

```dart
final audioPlayer = SimpleAudio();
```

3. Load an audio file and control playback:

```dart
audioPlayer.load('assets/audio/sample.mp3'); // Load audio file
audioPlayer.play(); // Play audio
```

4. Implement controls for pause, stop, and volume adjustments as needed.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
## Complete Example

```dart
import 'package:flutter/material.dart';
import 'package:simple_audio/simple_audio.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Create an instance of SimpleAudio
  final SimpleAudio audioPlayer = SimpleAudio();
  bool isPlaying = false; // Track playback state

  @override
  void initState() {
    super.initState();
    // Load the audio file when the widget is initialized
    audioPlayer.load('assets/audio/sample.mp3');
  }

  @override
  void dispose() {
    // Dispose of the audio player when the widget is removed
    audioPlayer.dispose();
    super.dispose();
  }

  void togglePlayback() {
    // Toggle play/pause based on current state
    if (isPlaying) {
      audioPlayer.pause(); // Pause the audio
    } else {
      audioPlayer.play(); // Play the audio
    }
    setState(() {
      isPlaying = !isPlaying; // Update playback state
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Simple Audio Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Text(
                isPlaying ? 'Playing' : 'Paused',
                style: TextStyle(fontSize: 24),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: togglePlayback, // Toggle playback on button press
                child: Text(isPlaying ? 'Pause' : 'Play'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
```

### Application Flow Explanation

// The application starts by running the RealFlutter widget.
// In the RealFlutter widget, we create an instance of SimpleAudio to handle audio playback.
// The audio file is loaded in the initState method, ensuring it's ready when the app starts.
// The dispose method is overridden to clean up the audio player when the widget is removed from the widget tree.
// The togglePlayback method is responsible for playing or pausing the audio based on the current state.
// The build method constructs the UI, displaying the current playback state and a button to control playback.
// When the button is pressed, it calls togglePlayback, which updates the UI accordingly.

<!-- END_MAIN -->

## Summary

The `simple_audio` package provides a straightforward solution for audio playback in Flutter applications. With its easy integration and essential features, it is suitable for various use cases, from simple sound effects to full-fledged audio players. By following the tutorial and example provided, developers can quickly implement audio functionality in their apps.
<-- START_DESCRIPTION -->

# Introduction to Neon Flutter Package
=====================================

The Neon Flutter package is a powerful tool for creating stunning, animated light effects in your Flutter applications. With its easy-to-use API and extensive customization options, you can add a mesmerizing neon glow to your UI elements, making your app stand out from the crowd.

## When to Use Neon
------------------

Use the Neon package when you want to:

* Add a futuristic or high-tech feel to your app
* Create eye-catching animations and effects
* Enhance the visual appeal of your UI elements
* Create a unique and memorable user experience

## Key Features
----------------

* Easy-to-use API for creating neon effects
* Extensive customization options (color, size, animation speed, etc.)
* Support for various animation types ( pulse, wave, etc.)
* Compatible with both Android and iOS platforms

<-- END_DESCRIPTION -->


<-- START_TUTORIAL -->

# Setting Up Neon Flutter Package
==================================

To use the Neon package in your Flutter project, follow these steps:

### Step 1: Add the Package to Your Project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  neon: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the Neon package in your Dart file:
```dart
import 'package:neon/neon.dart';
```
### Step 3: Create a Neon Effect

Create a Neon effect using the `Neon` widget:
```dart
Neon(
  color: Colors.pink,
  size: 100,
  animationSpeed: 2,
  child: Text('Hello, World!'),
)
```
This will create a pink neon effect around the `Text` widget.

### Platform-Specific Details

* For Android, make sure to add the following line to your `AndroidManifest.xml` file:
```xml
<application
  ...
  android:hardwareAccelerated="true"
  ...
>
```
This will enable hardware acceleration for the Neon effects.

* For iOS, no additional configuration is required.

### Optimizations

To optimize the performance of the Neon effects, you can:

* Use a smaller `size` value to reduce the computational overhead.
* Use a slower `animationSpeed` value to reduce the frame rate.

<-- END_TUTORIAL -->


<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:neon/neon.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Neon Demo',
      home: Scaffold(
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              // Create a Neon effect with a pulse animation
              Neon(
                color: Colors.blue,
                size: 150,
                animationSpeed: 1.5,
                animationType: NeonAnimationType.pulse,
                child: Text(
                  'Pulse Animation',
                  style: TextStyle(fontSize: 24),
                ),
              ),
              SizedBox(height: 20),
              // Create a Neon effect with a wave animation
              Neon(
                color: Colors.red,
                size: 100,
                animationSpeed: 2,
                animationType: NeonAnimationType.wave,
                child: Text(
                  'Wave Animation',
                  style: TextStyle(fontSize: 24),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app, and the `RealFlutter` widget is created.
// 2. The `RealFlutter` widget builds the UI, which consists of a `Scaffold` with a `Center` widget.
// 3. The `Center` widget contains a `Column` with two `Neon` widgets.
// 4. Each `Neon` widget creates a Neon effect around its child `Text` widget.
// 5. The Neon effects are animated using the specified animation type and speed.
// 6. The user can see the animated Neon effects on the screen.

// In summary, this code creates a simple Flutter app that demonstrates the use of the Neon package.
// The app creates two Neon effects with different animation types and speeds, and displays them on the screen.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Twilio Voice Flutter Package
================================

The `twilio_voice` Flutter package allows developers to integrate Twilio's Voice API into their Flutter applications. This package provides a simple and efficient way to make and receive voice calls using Twilio's robust Voice API.

## When to Use This Package
---------------------------

This package is ideal for applications that require voice calling capabilities, such as:

* Customer support apps
* Telemedicine apps
* Social media apps with voice calling features
* Conference calling apps

## Features
------------

The `twilio_voice` package offers the following features:

* Make and receive voice calls
* Handle call events (e.g., ringing, connected, disconnected)
* Support for hold and resume functionality
* Integration with Twilio's Voice API

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Twilio Voice Flutter Package
=============================================

## Step 1: Add the Package to Your Flutter Project
------------------------------------------------

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  twilio_voice: ^1.0.0
```
Then, run `flutter pub get` to install the package.

## Step 2: Configure Twilio Voice API
--------------------------------------

Create a Twilio account and obtain your Account SID and Auth Token. Create a new file named `twilio_config.dart` with the following code:
```dart
class TwilioConfig {
  static const String accountSid = 'your_account_sid';
  static const String authToken = 'your_auth_token';
}
```
Replace `your_account_sid` and `your_auth_token` with your actual Twilio credentials.

## Step 3: Initialize the Twilio Voice Package
---------------------------------------------

In your `main.dart` file, import the `twilio_voice` package and initialize it with your Twilio credentials:
```dart
import 'package:twilio_voice/twilio_voice.dart';
import 'twilio_config.dart';

void main() {
  TwilioVoice.initialize(
    accountSid: TwilioConfig.accountSid,
    authToken: TwilioConfig.authToken,
  );
  runApp(MyApp());
}
```
## Platform-Specific Configurations
-----------------------------------

### Android

Add the following permissions to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.INTERNET" />
<uses-permission android:name="android.permission.RECORD_AUDIO" />
```
### iOS

Add the following lines to your `Info.plist` file:
```xml
<key>NSMicrophoneUsageDescription</key>
<string>This app needs access to the microphone to make voice calls</string>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:twilio_voice/twilio_voice.dart';
import 'twilio_config.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Step 1: Create a new instance of the TwilioVoice class
  TwilioVoice _twilioVoice = TwilioVoice();

  // Step 2: Define the caller and callee IDs
  String _callerId = 'caller_id';
  String _calleeId = 'callee_id';

  // Step 3: Define the call event handlers
  void _onCallRinging() {
    print('Call is ringing...');
  }

  void _onCallConnected() {
    print('Call is connected...');
  }

  void _onCallDisconnected() {
    print('Call is disconnected...');
  }

  // Step 4: Make a new call
  void _makeCall() async {
    try {
      // Step 5: Create a new call using the TwilioVoice class
      Call _call = await _twilioVoice.makeCall(
        callerId: _callerId,
        calleeId: _calleeId,
      );

      // Step 6: Set up the call event handlers
      _call.onRinging(_onCallRinging);
      _call.onConnected(_onCallConnected);
      _call.onDisconnected(_onCallDisconnected);
    } catch (e) {
      print('Error making call: $e');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Twilio Voice Example'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: _makeCall,
          child: Text('Make Call'),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user clicks the "Make Call" button.
// 2. The _makeCall function is called, which creates a new instance of the TwilioVoice class.
// 3. The TwilioVoice class is used to make a new call using the makeCall method.
// 4. The call event handlers are set up to handle the call events (ringing, connected, disconnected).
// 5. The call is made and the call events are handled accordingly.
```

<-- END_MAIN -->
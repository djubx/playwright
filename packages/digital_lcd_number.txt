<-- START_DESCRIPTION -->

Digital LCD Number Flutter Package
=====================================

The `digital_lcd_number` Flutter package is a customizable widget that displays numbers in a digital LCD format. It's perfect for creating retro-style displays, digital clocks, or any other application where a unique numerical display is desired.

### Features

* Customizable digit size and color
* Support for decimal points and negative numbers
* Optional animation for digit changes
* Compatible with both Android and iOS platforms

### When to Use

This package is ideal for applications that require a unique numerical display, such as:

* Digital clocks or watches
* Retro-style games or simulations
* Industrial or scientific applications where a clear numerical display is crucial
* Any application where a customizable numerical display is desired

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
---------------

To use the `digital_lcd_number` package, follow these steps:

### Step 1: Add the Package to Your Project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  digital_lcd_number: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

In your Dart file, import the package:
```dart
import 'package:digital_lcd_number/digital_lcd_number.dart';
```
### Step 3: Create a Digital LCD Number Widget

Create a `DigitalLCDNumber` widget and customize its properties as desired:
```dart
DigitalLCDNumber(
  number: 123.45,
  digitSize: 24,
  digitColor: Colors.red,
  decimalPoint: true,
  animationDuration: Duration(milliseconds: 500),
)
```
### Platform-Specific Details

* Android: No additional configuration is required.
* iOS: To ensure proper rendering, add the following line to your `Info.plist` file:
```xml
<key>UIAppFonts</key>
<array>
  <string>DigitalLCD.ttf</string>
</array>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:digital_lcd_number/digital_lcd_number.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  double _number = 123.45;

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Digital LCD Number Demo',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Digital LCD Number Demo'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              DigitalLCDNumber(
                number: _number,
                digitSize: 48,
                digitColor: Colors.blue,
                decimalPoint: true,
                animationDuration: Duration(milliseconds: 1000),
              ),
              SizedBox(height: 24),
              ElevatedButton(
                onPressed: () {
                  setState(() {
                    _number += 1;
                  });
                },
                child: Text('Increment'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app and sees the initial digital LCD number display.
// 2. When the user presses the "Increment" button, the `_number` variable is incremented by 1.
// 3. The `setState` method is called to update the UI with the new `_number` value.
// 4. The `DigitalLCDNumber` widget is rebuilt with the new `_number` value, and the animation is triggered.
// 5. The user sees the digital LCD number display update with the new value, along with the animation effect.
```

<-- END_MAIN -->
```markdown
<-- START_DESCRIPTION -->

# Auth0 Flutter Package: Overview

The `auth0_flutter` package is a powerful tool for integrating Auth0 authentication services into your Flutter applications. Auth0 is a flexible, drop-in solution to add authentication and authorization services to your apps. It supports social login providers, enterprise identity providers, and custom username/password login.

## When to Use `auth0_flutter`

- **User Authentication**: When you need to authenticate users via social logins (like Google, Facebook), enterprise logins (like Microsoft Active Directory), or custom databases.
- **Authorization**: When you need to manage user roles and permissions.
- **Secure API Access**: When you need to secure API endpoints with OAuth 2.0 and OpenID Connect.

## Key Features

- **Universal Login**: Provides a customizable login page hosted by Auth0.
- **Social and Enterprise Logins**: Supports a wide range of identity providers.
- **User Management**: Allows you to manage user profiles and metadata.
- **Secure**: Built-in security features like token validation and refresh.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up `auth0_flutter` in Your Flutter Project

In this tutorial, we will walk through the setup process for integrating the `auth0_flutter` package into a Flutter application. We will cover platform-specific configurations for both Android and iOS.

## Step 1: Add Dependency

Add the `auth0_flutter` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  auth0_flutter: ^0.9.0
```

Run `flutter pub get` to install the package.

## Step 2: Configure Auth0

1. **Create an Auth0 Account**: If you don't have an account, sign up at [Auth0](https://auth0.com/).
2. **Create a New Application**: In the Auth0 dashboard, create a new application and select "Native" as the application type.
3. **Configure Callback URLs**:
   - **Android**: Use `your.package.name://YOUR_AUTH0_DOMAIN/android/YOUR_PACKAGE_NAME/callback`.
   - **iOS**: Use `YOUR_BUNDLE_IDENTIFIER://YOUR_AUTH0_DOMAIN/ios/YOUR_BUNDLE_IDENTIFIER/callback`.

## Step 3: Platform-Specific Configuration

### Android

1. **Update `AndroidManifest.xml`**:

```xml
<activity
    android:name="com.auth0.android.provider.RedirectActivity"
    android:launchMode="singleTask">
    <intent-filter>
        <action android:name="android.intent.action.VIEW" />
        <category android:name="android.intent.category.DEFAULT" />
        <category android:name="android.intent.category.BROWSABLE" />
        <data
            android:scheme="your.package.name"
            android:host="YOUR_AUTH0_DOMAIN"
            android:pathPrefix="/android/YOUR_PACKAGE_NAME/callback" />
    </intent-filter>
</activity>
```

2. **Add Internet Permission**:

```xml
<uses-permission android:name="android.permission.INTERNET" />
```

### iOS

1. **Update `Info.plist`**:

```xml
<key>CFBundleURLTypes</key>
<array>
    <dict>
        <key>CFBundleURLSchemes</key>
        <array>
            <string>YOUR_BUNDLE_IDENTIFIER</string>
        </array>
    </dict>
</array>
<key>LSApplicationQueriesSchemes</key>
<array>
    <string>YOUR_AUTH0_DOMAIN</string>
</array>
```

2. **Enable Universal Links**: Follow the [Auth0 iOS guide](https://auth0.com/docs/quickstart/native/ios/00-login) for detailed steps.

## Step 4: Initialize Auth0 in Flutter

Create a class `RealFlutter` to handle authentication logic:

```dart
import 'package:auth0_flutter/auth0_flutter.dart';

class RealFlutter {
  final Auth0 auth0;

  RealFlutter()
      : auth0 = Auth0(
          clientId: 'YOUR_CLIENT_ID',
          domain: 'YOUR_AUTH0_DOMAIN',
        );

  Future<void> login() async {
    try {
      final result = await auth0.webAuthentication().login();
      print('Access Token: ${result.accessToken}');
    } catch (e) {
      print('Error: $e');
    }
  }
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

# Complete Example: Flutter Main File

Below is a complete example of a Flutter application using the `auth0_flutter` package. This example demonstrates user login and displays the access token upon successful authentication.

```dart
import 'package:flutter/material.dart';
import 'package:auth0_flutter/auth0_flutter.dart';

// Main class to handle Auth0 authentication
class RealFlutter {
  final Auth0 auth0;

  // Initialize Auth0 with client ID and domain
  RealFlutter()
      : auth0 = Auth0(
          clientId: 'YOUR_CLIENT_ID',
          domain: 'YOUR_AUTH0_DOMAIN',
        );

  // Method to handle user login
  Future<void> login(BuildContext context) async {
    try {
      // Initiate the login process
      final result = await auth0.webAuthentication().login();
      // Display the access token on successful login
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Access Token: ${result.accessToken}')),
      );
    } catch (e) {
      // Handle login errors
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error: $e')),
      );
    }
  }
}

void main() {
  runApp(MyApp());
}

// Main application widget
class MyApp extends StatelessWidget {
  final RealFlutter realFlutter = RealFlutter();

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Auth0 Flutter Demo',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Auth0 Flutter Demo'),
        ),
        body: Center(
          child: ElevatedButton(
            onPressed: () => realFlutter.login(context),
            child: Text('Login with Auth0'),
          ),
        ),
      ),
    );
  }
}

// Application Flow:
// 1. The application starts with the `MyApp` widget, which sets up a basic Material app.
// 2. The `RealFlutter` class is instantiated to manage Auth0 authentication.
// 3. The `MyApp` widget builds a simple UI with a button to trigger the login process.
// 4. When the button is pressed, the `login` method in `RealFlutter` is called.
// 5. The `login` method uses Auth0's web authentication to log in the user.
// 6. Upon successful login, the access token is displayed using a SnackBar.
// 7. If an error occurs during login, it is caught and displayed in a SnackBar.

```

<-- END_MAIN -->
```
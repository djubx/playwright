<-- START_DESCRIPTION -->

Auth0 Flutter Package: A Comprehensive Overview
=====================================================

The `auth0_flutter` package is a popular authentication solution for Flutter applications. It provides a simple and secure way to manage user authentication, leveraging the Auth0 platform's robust features. In this blog, we'll delve into the package's features, explore when to use it, and provide a step-by-step tutorial on setting it up.

### Features

*   **Universal Login**: Auth0's Universal Login provides a customizable, device-agnostic login experience for your users.
*   **Social Connections**: Easily integrate social media platforms like Google, Facebook, and Twitter for seamless authentication.
*   **Multi-Factor Authentication**: Add an extra layer of security with Auth0's built-in MFA support.
*   **User Management**: Manage user profiles, preferences, and access control with ease.

### When to Use

The `auth0_flutter` package is ideal for applications requiring robust, scalable authentication solutions. Use it when:

*   You need to integrate multiple social media platforms for authentication.
*   You require a customizable login experience for your users.
*   You want to leverage Auth0's advanced security features, such as MFA and anomaly detection.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setting Up Auth0 Flutter Package: A Step-by-Step Guide
=====================================================

### Prerequisites

*   Create an Auth0 account and set up a new tenant.
*   Install the `auth0_flutter` package using pub: `flutter pub add auth0_flutter`

### Platform-Specific Configurations

#### Android

In your `android/app/src/main/AndroidManifest.xml` file, add the following:

```xml
<activity
    android:name="com.auth0.android.provider.RedirectActivity"
    android:exported="true"
    android:theme="@style/Theme.NoActionBar">
    <intent-filter>
        <action android:name="android.intent.action.VIEW" />
        <category android:name="android.intent.category.DEFAULT" />
        <category android:name="android.intent.category.BROWSABLE" />
        <data
            android:host="{your-auth0-domain}"
            android:pathPrefix="/android/{your-app-package-name}/callback"
            android:scheme="https" />
    </intent-filter>
</activity>
```

Replace `{your-auth0-domain}` and `{your-app-package-name}` with your Auth0 domain and app package name, respectively.

#### iOS

In your `ios/Runner/Info.plist` file, add the following:

```xml
<key>CFBundleURLTypes</key>
<array>
    <dict>
        <key>CFBundleTypeRole</key>
        <string>Editor</string>
        <key>CFBundleURLSchemes</key>
        <array>
            <string>{your-auth0-scheme}</string>
        </array>
    </dict>
</array>
```

Replace `{your-auth0-scheme}` with your Auth0 scheme.

### Initializing the Auth0 Client

Create a new instance of the `Auth0Client` class, passing in your Auth0 domain and client ID:

```dart
import 'package:auth0_flutter/auth0_flutter.dart';

final auth0Client = Auth0Client(
  domain: '{your-auth0-domain}',
  clientId: '{your-auth0-client-id}',
);
```

Replace `{your-auth0-domain}` and `{your-auth0-client-id}` with your Auth0 domain and client ID, respectively.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:auth0_flutter/auth0_flutter.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Auth0 Flutter Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final auth0Client = Auth0Client(
    domain: '{your-auth0-domain}',
    clientId: '{your-auth0-client-id}',
  );

  String _accessToken = '';

  Future<void> _login() async {
    // 1. Initialize the Auth0 client with the domain and client ID.
    final auth0Client = Auth0Client(
      domain: '{your-auth0-domain}',
      clientId: '{your-auth0-client-id}',
    );

    // 2. Use the Auth0 client to redirect the user to the Auth0 login page.
    final result = await auth0Client.webAuth.authorize();

    // 3. Once the user is redirected back to the app, get the access token.
    final token = await auth0Client.getTokenSilently();
    setState(() {
      _accessToken = token.accessToken;
    });
  }

  Future<void> _logout() async {
    // 1. Use the Auth0 client to clear the access token and log out the user.
    await auth0Client.logout();
    setState(() {
      _accessToken = '';
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Auth0 Flutter Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text('Access Token:'),
            Text(_accessToken),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _login,
              child: Text('Log In'),
            ),
            SizedBox(height: 10),
            ElevatedButton(
              onPressed: _logout,
              child: Text('Log Out'),
            ),
          ],
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user clicks the "Log In" button, which redirects them to the Auth0 login page.
// 2. Once the user is redirected back to the app, the access token is obtained and stored in the _accessToken variable.
// 3. The user can then click the "Log Out" button to clear the access token and log out.
// 4. The access token is displayed on the screen, and the user can see their logged-in status.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

**Progress Loader Overlay Flutter Package**
=============================================

The `progress_loader_overlay` package is a Flutter package that provides a simple and customizable way to display a progress loader overlay on top of your app's content. This package is useful when you want to indicate to the user that some background task is in progress, such as network requests, file operations, or database queries.

**When to Use This Package**
---------------------------

You can use this package in the following scenarios:

* When making network requests, such as API calls or file downloads
* When performing file operations, such as reading or writing to storage
* When executing database queries or transactions
* When performing any other background task that takes time to complete

**Features**
------------

This package provides the following features:

* Customizable progress loader animation
* Support for different loader types, such as circular, linear, and Cupertino-style loaders
* Ability to display a text message or a custom widget above or below the loader
* Support for different overlay styles, such as modal or non-modal overlays
* Ability to customize the overlay's background color, opacity, and border radius

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setup and Usage**
-------------------

To use this package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  progress_loader_overlay: ^1.0.0
```
2. Import the package in your Dart file:
```dart
import 'package:progress_loader_overlay/progress_loader_overlay.dart';
```
3. Create a `ProgressLoaderOverlay` widget and pass it a `ProgressLoader` object:
```dart
ProgressLoaderOverlay(
  progressLoader: ProgressLoader(
    loaderType: LoaderType.Circular,
    loaderColor: Colors.blue,
  ),
  child: // your child widget here
)
```
4. To display the loader, call the `showLoader` method:
```dart
ProgressLoaderOverlayState overlayState = ProgressLoaderOverlay.of(context);
overlayState.showLoader();
```
5. To hide the loader, call the `hideLoader` method:
```dart
overlayState.hideLoader();
```

**Platform-Specific Details**
---------------------------

* On Android, the loader is displayed as a `ProgressDialog` with a circular progress bar.
* On iOS, the loader is displayed as a `UIActivityIndicatorView` with a Cupertino-style progress bar.

**Configurations and Optimizations**
-----------------------------------

* You can customize the loader's animation by passing a `Curve` object to the `animationCurve` property.
* You can customize the loader's size by passing a `double` value to the `loaderSize` property.
* You can customize the overlay's background color, opacity, and border radius by passing a `Color`, `double`, and `double` value to the `backgroundColor`, `opacity`, and `borderRadius` properties, respectively.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:progress_loader_overlay/progress_loader_overlay.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Progress Loader Overlay Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  ProgressLoaderOverlayState _overlayState;

  @override
  Widget build(BuildContext context) {
    return ProgressLoaderOverlay(
      progressLoader: ProgressLoader(
        loaderType: LoaderType.Circular,
        loaderColor: Colors.blue,
      ),
      child: Scaffold(
        appBar: AppBar(
          title: Text('Progress Loader Overlay Demo'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Text(
                'Click the button to show the loader',
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  _overlayState.showLoader();
                  Future.delayed(Duration(seconds: 3), () {
                    _overlayState.hideLoader();
                  });
                },
                child: Text('Show Loader'),
              ),
            ],
          ),
        ),
      ),
    );
  }

  @override
  void didUpdateWidget(MyHomePage oldWidget) {
    super.didUpdateWidget(oldWidget);
    _overlayState = ProgressLoaderOverlay.of(context);
  }
}

// The application flow is as follows:
// 1. The user clicks the "Show Loader" button.
// 2. The `_overlayState.showLoader()` method is called, which displays the loader.
// 3. The `Future.delayed()` method is called, which delays the execution of the next line of code by 3 seconds.
// 4. After 3 seconds, the `_overlayState.hideLoader()` method is called, which hides the loader.
// 5. The user can then interact with the app again.
```

<-- END_MAIN -->
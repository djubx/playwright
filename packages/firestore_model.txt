<-- START_DESCRIPTION -->

# Firestore Model Package Overview
=====================================

The `firestore_model` package is a powerful tool for Flutter developers to interact with Google Firestore databases. It provides a simple and efficient way to perform CRUD (Create, Read, Update, Delete) operations on Firestore documents.

### When to Use This Package

This package is ideal for applications that require data storage and synchronization across multiple devices. It's particularly useful for real-time applications, such as:

* Chat apps
* Social media platforms
* Collaborative document editing tools
* Real-time analytics dashboards

### Key Features

* **Easy Document Management**: Create, read, update, and delete documents with ease.
* **Real-time Data Synchronization**: Get notified when data changes in real-time.
* **Offline Support**: Store data locally and sync when the device comes online.
* **Query Support**: Filter and sort data using powerful queries.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Firestore Model Package
==========================================

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter:
    sdk: flutter
  firestore_model: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:firestore_model/firestore_model.dart';
```
### Step 3: Initialize the Firestore Instance

Initialize the Firestore instance in your `main` function:
```dart
void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp();
  runApp(MyApp());
}
```
### Step 4: Create a Firestore Model

Create a new class that extends `FirestoreModel`:
```dart
class RealFlutter extends FirestoreModel {
  String title;
  String description;

  RealFlutter({this.title, this.description});

  factory RealFlutter.fromMap(Map<String, dynamic> map) {
    return RealFlutter(
      title: map['title'],
      description: map['description'],
    );
  }
}
```
### Step 5: Use the Model to Interact with Firestore

Use the model to create, read, update, and delete documents:
```dart
void createDocument() async {
  RealFlutter model = RealFlutter(title: 'Hello World', description: 'This is a test document');
  await model.create();
}

void readDocument() async {
  RealFlutter model = await RealFlutter.read('documentId');
  print(model.title);
}

void updateDocument() async {
  RealFlutter model = await RealFlutter.read('documentId');
  model.title = 'Updated Title';
  await model.update();
}

void deleteDocument() async {
  await RealFlutter.delete('documentId');
}
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:firestore_model/firestore_model.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp();
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Firestore Model Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _formKey = GlobalKey<FormState>();
  String _title;
  String _description;

  void createDocument() async {
    // Create a new RealFlutter model
    RealFlutter model = RealFlutter(title: _title, description: _description);
    // Create the document in Firestore
    await model.create();
    // Clear the form fields
    _formKey.currentState.reset();
  }

  void readDocument() async {
    // Read the document from Firestore
    RealFlutter model = await RealFlutter.read('documentId');
    // Print the document title
    print(model.title);
  }

  void updateDocument() async {
    // Read the document from Firestore
    RealFlutter model = await RealFlutter.read('documentId');
    // Update the document title
    model.title = 'Updated Title';
    // Update the document in Firestore
    await model.update();
  }

  void deleteDocument() async {
    // Delete the document from Firestore
    await RealFlutter.delete('documentId');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Firestore Model Demo'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              TextFormField(
                decoration: InputDecoration(
                  labelText: 'Title',
                ),
                validator: (value) {
                  if (value.isEmpty) {
                    return 'Please enter a title';
                  }
                  return null;
                },
                onSaved: (value) => _title = value,
              ),
              TextFormField(
                decoration: InputDecoration(
                  labelText: 'Description',
                ),
                validator: (value) {
                  if (value.isEmpty) {
                    return 'Please enter a description';
                  }
                  return null;
                },
                onSaved: (value) => _description = value,
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: createDocument,
                child: Text('Create Document'),
              ),
              SizedBox(height: 10),
              ElevatedButton(
                onPressed: readDocument,
                child: Text('Read Document'),
              ),
              SizedBox(height: 10),
              ElevatedButton(
                onPressed: updateDocument,
                child: Text('Update Document'),
              ),
              SizedBox(height: 10),
              ElevatedButton(
                onPressed: deleteDocument,
                child: Text('Delete Document'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and is presented with a form to create a new document.
// 2. The user enters a title and description, and clicks the "Create Document" button.
// 3. The app creates a new RealFlutter model with the entered title and description.
// 4. The app creates a new document in Firestore using the RealFlutter model.
// 5. The app clears the form fields.
// 6. The user can then click the "Read Document" button to read the document from Firestore.
// 7. The app reads the document from Firestore and prints the title.
// 8. The user can then click the "Update Document" button to update the document.
// 9. The app updates the document in Firestore.
// 10. The user can then click the "Delete Document" button to delete the document.
// 11. The app deletes the document from Firestore.

```

<-- END_MAIN -->
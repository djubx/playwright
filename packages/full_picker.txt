<-- START_DESCRIPTION -->

# Full Picker Flutter Package
The full_picker Flutter package is a powerful and customizable file picker that allows users to select files from their device's storage. It provides a simple and intuitive interface for users to browse and select files, and it supports a wide range of file types.

## When to Use
The full_picker package is ideal for apps that require users to select files from their device's storage, such as:

* File sharing apps
* Document editing apps
* Image and video editing apps
* Music and audio players

## Features
The full_picker package provides the following features:

* Customizable file picker interface
* Support for multiple file types (e.g., images, videos, documents, etc.)
* Ability to select multiple files at once
* Option to filter files by type or extension
* Support for Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Full Picker Package
To use the full_picker package in your Flutter app, follow these steps:

1. Add the package to your pubspec.yaml file:
```yml
dependencies:
  full_picker: ^1.0.0
```
2. Run `flutter pub get` to install the package.
3. Import the package in your Dart file:
```dart
import 'package:full_picker/full_picker.dart';
```
4. Create a FullPicker instance and pass it to the `showFullPicker` method:
```dart
FullPicker _fullPicker = FullPicker();

void _showFullPicker() {
  _fullPicker.showFullPicker(
    context: context,
    onFileSelected: (file) {
      // Handle file selection
    },
  );
}
```
5. Customize the file picker interface by passing options to the `showFullPicker` method:
```dart
_fullPicker.showFullPicker(
  context: context,
  onFileSelected: (file) {
    // Handle file selection
  },
  fileType: FileType.image,
  allowMultiple: true,
  filterExtensions: ['jpg', 'png'],
);
```
### Platform-Specific Details
* Android: The full_picker package uses the Android Storage Access Framework (SAF) to access files. Make sure to add the `android.permission.READ_EXTERNAL_STORAGE` permission to your AndroidManifest.xml file.
* iOS: The full_picker package uses the UIImagePickerController to access files. Make sure to add the `NSPhotoLibraryUsageDescription` key to your Info.plist file.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:full_picker/full_picker.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Full Picker Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  FullPicker _fullPicker = FullPicker();
  List<File> _selectedFiles = [];

  void _showFullPicker() {
    // Show the full picker with custom options
    _fullPicker.showFullPicker(
      context: context,
      onFileSelected: (file) {
        // Handle file selection
        setState(() {
          _selectedFiles.add(file);
        });
      },
      fileType: FileType.image,
      allowMultiple: true,
      filterExtensions: ['jpg', 'png'],
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Full Picker Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: _showFullPicker,
              child: Text('Show Full Picker'),
            ),
            SizedBox(height: 20),
            Text('Selected Files:'),
            SizedBox(height: 10),
            _selectedFiles.isEmpty
                ? Text('No files selected')
                : Column(
                    children: _selectedFiles.map((file) {
                      return Text(file.path);
                    }).toList(),
                  ),
          ],
        ),
      ),
    );
  }
}

// The app starts by running the main function, which creates a MaterialApp instance.
// The MaterialApp instance is then used to create a MyHomePage instance, which is a stateful widget.
// The MyHomePage instance has a button that, when pressed, shows the full picker using the _showFullPicker method.
// The _showFullPicker method creates a FullPicker instance and passes it to the showFullPicker method, along with custom options.
// When a file is selected, the onFileSelected callback is called, which adds the selected file to the _selectedFiles list.
// The _selectedFiles list is then used to display the selected files in the UI.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Radio Player Flutter Package
================================

The `radio_player` Flutter package is a powerful tool for playing online radio stations in your Flutter applications. It provides a simple and intuitive API for playing, pausing, and stopping radio streams, as well as handling errors and buffering events.

## When to Use This Package
---------------------------

This package is ideal for applications that require online radio playback, such as:

* Online radio stations
* Music streaming apps
* Podcast players

## Features
------------

* Play online radio streams
* Pause and stop playback
* Handle errors and buffering events
* Support for multiple audio formats (e.g. MP3, AAC, etc.)

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Radio Player Package
--------------------------------------

To use the `radio_player` package in your Flutter application, follow these steps:

### Step 1: Add the Package to Your `pubspec.yaml` File

```yml
dependencies:
  flutter:
    sdk: flutter
  radio_player: ^0.1.0
```

### Step 2: Import the Package in Your Dart File

```dart
import 'package:radio_player/radio_player.dart';
```

### Step 3: Initialize the Radio Player

```dart
RadioPlayer _radioPlayer = RadioPlayer();
```

### Step 4: Set Up the Audio Stream

```dart
_radioPlayer.setUrl('https://example.com/radio_stream.mp3');
```

### Step 5: Play the Radio Stream

```dart
_radioPlayer.play();
```

### Platform-Specific Details

* Android: Make sure to add the `android.permission.INTERNET` permission to your `AndroidManifest.xml` file.
* iOS: Make sure to add the `NSAppTransportSecurity` key to your `Info.plist` file.

### Required Configurations and Optimizations

* Make sure to handle errors and buffering events using the `onError` and `onBuffering` callbacks.
* Use the `onPlayerStateChanged` callback to update your app's UI based on the player's state.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:radio_player/radio_player.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  RadioPlayer _radioPlayer = RadioPlayer();
  bool _isPlaying = false;

  @override
  void initState() {
    super.initState();
    _radioPlayer.setUrl('https://example.com/radio_stream.mp3');
    _radioPlayer.onPlayerStateChanged.listen((state) {
      if (state == PlayerState.PLAYING) {
        setState(() {
          _isPlaying = true;
        });
      } else if (state == PlayerState.STOPPED) {
        setState(() {
          _isPlaying = false;
        });
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Radio Player Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Text(_isPlaying ? 'Playing' : 'Stopped'),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  if (_isPlaying) {
                    _radioPlayer.stop();
                  } else {
                    _radioPlayer.play();
                  }
                },
                child: Text(_isPlaying ? 'Stop' : 'Play'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The app starts by initializing the RadioPlayer instance and setting the URL of the radio stream.
// The app then listens for changes to the player's state using the onPlayerStateChanged callback.
// When the player's state changes, the app updates the UI to reflect the current state (playing or stopped).
// The app uses a single button to toggle playback on and off.
// When the button is pressed, the app checks the current state of the player and either stops or plays the stream accordingly.
```

<-- END_MAIN -->
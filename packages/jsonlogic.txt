<-- START_DESCRIPTION -->

# jsonlogic Flutter Package
The jsonlogic Flutter package is a powerful tool for evaluating JSON logic rules in your Flutter applications. It allows you to define complex logic rules using JSON objects and then evaluate them in your app.

## When to Use
This package is particularly useful when you need to implement complex business logic rules in your app, such as:

* Validating user input data
* Evaluating conditional statements
* Implementing decision trees

## Features
The jsonlogic Flutter package offers the following features:

* Support for logical operators (AND, OR, NOT)
* Support for comparison operators (EQUAL, NOT_EQUAL, GREATER_THAN, LESS_THAN)
* Support for arithmetic operators (ADD, SUBTRACT, MULTIPLY, DIVIDE)
* Support for string manipulation functions (CONCAT, SUBSTRING)
* Support for array manipulation functions (MAP, FILTER, REDUCE)

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
To use the jsonlogic Flutter package, follow these steps:

1. Add the package to your pubspec.yaml file:
```yml
dependencies:
  jsonlogic: ^1.0.0
```
2. Import the package in your Dart file:
```dart
import 'package:jsonlogic/jsonlogic.dart';
```
3. Define your JSON logic rules:
```json
{
  "rules": [
    {
      "conditions": [
        {
          "field": "age",
          "operator": "GREATER_THAN",
          "value": 18
        }
      ],
      "actions": [
        {
          "type": "SHOW_MESSAGE",
          "message": "You are eligible to vote!"
        }
      ]
    }
  ]
}
```
4. Evaluate the rules using the `JsonLogic` class:
```dart
void main() {
  final jsonLogic = JsonLogic();
  final rules = jsonDecode('{"rules": [...]}');
  final data = {'age': 25};
  final result = jsonLogic.evaluate(rules, data);
  print(result); // Output: You are eligible to vote!
}
```
### Platform-Specific Details
No platform-specific configurations are required for this package.

### Optimizations
For optimal performance, it is recommended to cache the `JsonLogic` instance and reuse it throughout your app.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:jsonlogic/jsonlogic.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final _jsonLogic = JsonLogic();
  final _rules = jsonDecode('''
  {
    "rules": [
      {
        "conditions": [
          {
            "field": "age",
            "operator": "GREATER_THAN",
            "value": 18
          }
        ],
        "actions": [
          {
            "type": "SHOW_MESSAGE",
            "message": "You are eligible to vote!"
          }
        ]
      }
    ]
  }
  ''');
  final _data = {'age': 25};
  String _result = '';

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('JsonLogic Demo'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Text(_result),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  final result = _jsonLogic.evaluate(_rules, _data);
                  setState(() {
                    _result = result;
                  });
                },
                child: Text('Evaluate Rules'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The app starts by creating a new instance of the RealFlutter widget.
// The RealFlutter widget is a stateful widget that contains a JsonLogic instance, rules, and data.
// When the user presses the "Evaluate Rules" button, the app calls the evaluate method of the JsonLogic instance, passing in the rules and data.
// The evaluate method returns a result, which is then displayed on the screen.
// The app uses the setState method to update the UI with the new result.
// The rules are defined in a JSON object, which is decoded into a Map using the jsonDecode function.
// The data is a simple Map that contains the user's age.
// The JsonLogic instance is created once and reused throughout the app.
```

<-- END_MAIN -->
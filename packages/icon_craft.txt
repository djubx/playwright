<-- START_DESCRIPTION -->
### Description
The `icon_craft` Flutter package is a powerful tool for creating and customizing icons in Flutter applications. It provides a wide range of features, including icon theming, sizing, and styling, making it easy to create consistent and visually appealing icons throughout your app.

With `icon_craft`, you can create icons from a variety of sources, including fonts, images, and SVGs. The package also provides a range of pre-built icon themes, making it easy to get started with creating icons that match your app's style.

Some examples of when to use `icon_craft` include:

* Creating custom icons for your app's navigation bar or tab bar
* Adding icons to buttons or other interactive elements
* Creating a consistent icon theme throughout your app

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->
### Tutorial
To get started with `icon_craft`, add the package to your pubspec.yaml file:
```yml
dependencies:
  icon_craft: ^1.0.0
```
Then, import the package in your Dart file:
```dart
import 'package:icon_craft/icon_craft.dart';
```
To use `icon_craft`, you'll need to create an instance of the `IconCraft` class:
```dart
IconCraft _iconCraft = IconCraft();
```
You can then use the `_iconCraft` instance to create icons from a variety of sources. For example, to create an icon from a font:
```dart
Icon _icon = _iconCraft.createIcon(
  Icons.search,
  size: 24,
  color: Colors.blue,
);
```
To create an icon from an image:
```dart
Icon _icon = _iconCraft.createIcon(
  AssetImage('assets/icon.png'),
  size: 24,
);
```
To create an icon from an SVG:
```dart
Icon _icon = _iconCraft.createIcon(
  SvgPicture.asset('assets/icon.svg'),
  size: 24,
);
```
You can also customize the icon's theme using the `IconTheme` class:
```dart
IconTheme _iconTheme = IconTheme(
  size: 24,
  color: Colors.blue,
);

Icon _icon = _iconCraft.createIcon(
  Icons.search,
  theme: _iconTheme,
);
```
<-- END_TUTORIAL -->

<-- START_MAIN -->
```dart
import 'package:flutter/material.dart';
import 'package:icon_craft/icon_craft.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  IconCraft _iconCraft = IconCraft();

  @override
  Widget build(BuildContext context) {
    // Create a Scaffold to hold the app's UI
    return Scaffold(
      appBar: AppBar(
        // Create an icon for the app bar using IconCraft
        leading: _iconCraft.createIcon(
          Icons.menu,
          size: 24,
          color: Colors.white,
        ),
        title: Text('IconCraft Example'),
      ),
      body: Center(
        // Create a button with an icon using IconCraft
        child: ElevatedButton(
          onPressed: () {},
          child: Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              // Create an icon for the button using IconCraft
              _iconCraft.createIcon(
                Icons.search,
                size: 18,
                color: Colors.white,
              ),
              SizedBox(width: 8),
              Text('Search'),
            ],
          ),
        ),
      ),
    );
  }
}

// The app's flow is as follows:
// 1. The user runs the app and the RealFlutter widget is created.
// 2. The RealFlutter widget creates an instance of the IconCraft class.
// 3. The IconCraft instance is used to create an icon for the app bar.
// 4. The IconCraft instance is used to create an icon for the button.
// 5. The button is displayed to the user and they can interact with it.
// 6. When the user presses the button, the onPressed callback is called.
```
<-- END_MAIN -->

In summary, the code flows as follows: the RealFlutter widget is created, which creates an instance of the IconCraft class. The IconCraft instance is then used to create icons for the app bar and a button. The button is displayed to the user and they can interact with it. When the user presses the button, the onPressed callback is called.
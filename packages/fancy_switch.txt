<-- START_DESCRIPTION -->

# Fancy Switch Flutter Package
The Fancy Switch Flutter package is a customizable and animated toggle switch that can be used in Flutter applications. It provides a variety of features, including:

* Customizable colors and shapes
* Animated transitions
* Support for multiple switch types (e.g. boolean, integer, string)
* Platform-specific designs for Android and iOS

This package is useful when you want to add a visually appealing and interactive switch to your Flutter application. For example, you can use it to toggle between different themes, enable or disable features, or switch between different modes.

Some examples of when to use this package include:

* Creating a settings page with toggle switches for different options
* Adding a theme switcher to your application
* Creating a toggle button for enabling or disabling features

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting up the Fancy Switch Package
To use the Fancy Switch package in your Flutter application, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  fancy_switch: ^1.0.0
```
2. Run `flutter pub get` to install the package.
3. Import the package in your Dart file:
```dart
import 'package:fancy_switch/fancy_switch.dart';
```
4. Create a `FancySwitch` widget and customize its properties:
```dart
FancySwitch(
  value: true,
  onChanged: (value) {
    print('Switch value: $value');
  },
  color: Colors.blue,
  shape: FancySwitchShape.circle,
)
```
### Platform-Specific Details

* For Android, you can use the `FancySwitch.android` constructor to create a switch with a Material Design look and feel.
* For iOS, you can use the `FancySwitch.ios` constructor to create a switch with a Cupertino look and feel.

### Required Configurations and Optimizations

* Make sure to handle the `onChanged` callback to update the switch value.
* You can customize the switch's appearance by using the `color`, `shape`, and `size` properties.
* To optimize performance, you can use the `FancySwitch.cache` constructor to cache the switch's animation.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:fancy_switch/fancy_switch.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  bool _switchValue = true;

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Fancy Switch Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              FancySwitch(
                value: _switchValue,
                onChanged: (value) {
                  setState(() {
                    _switchValue = value;
                  });
                },
                color: Colors.blue,
                shape: FancySwitchShape.circle,
              ),
              SizedBox(height: 20),
              Text('Switch value: $_switchValue'),
            ],
          ),
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user runs the application and sees the Fancy Switch widget.
// 2. The user toggles the switch, which updates the `_switchValue` variable.
// 3. The `onChanged` callback is called, which updates the switch value.
// 4. The `setState` method is called to rebuild the widget tree with the new switch value.
// 5. The user sees the updated switch value displayed on the screen.

// Final summary:
// The Fancy Switch package provides a customizable and animated toggle switch that can be used in Flutter applications.
// This example demonstrates how to use the package to create a simple switch with a Material Design look and feel.
// The application flow shows how the switch value is updated and displayed on the screen.
```

<-- END_MAIN -->
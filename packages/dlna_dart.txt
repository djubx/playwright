<-- START_DESCRIPTION -->
# DLNA_Dart Flutter Package
The `dlna_dart` package is a Flutter library that allows you to discover and control DLNA (Digital Living Network Alliance) devices on your local network. DLNA is a standard for sharing media content between devices, and this package provides a simple way to integrate DLNA functionality into your Flutter app.

## When to Use This Package
You can use this package in a variety of scenarios, such as:

* Building a media player app that can stream content to DLNA-enabled devices
* Creating a home automation app that can control DLNA-enabled devices
* Developing a media server app that can share content with DLNA-enabled devices

## Features
The `dlna_dart` package provides the following features:

* Device discovery: Discover DLNA devices on your local network
* Device control: Control DLNA devices, such as playing, pausing, and stopping media playback
* Media sharing: Share media content with DLNA devices
* Event handling: Handle events from DLNA devices, such as playback status changes

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->
# Setting Up the Package
To use the `dlna_dart` package, you need to add it to your Flutter project's `pubspec.yaml` file. Here's how:

1. Open your `pubspec.yaml` file and add the following line under the `dependencies` section:
```yml
dependencies:
  flutter:
    sdk: flutter
  dlna_dart: ^1.0.0
```
2. Run `flutter pub get` to install the package.

## Platform-Specific Details
The `dlna_dart` package uses platform-specific code to discover and control DLNA devices. Here are some platform-specific details to keep in mind:

* Android: The package uses the Android `NetworkServiceDiscovery` API to discover DLNA devices. You need to add the following permission to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
```
* iOS: The package uses the iOS `Bonjour` API to discover DLNA devices. You need to add the following framework to your `Info.plist` file:
```xml
<key>NSBonjourServices</key>
<array>
    <string>_dlna._tcp</string>
</array>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->
```dart
import 'package:flutter/material.dart';
import 'package:dlna_dart/dlna_dart.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'DLNA Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  List<DLNADevice> _devices = [];

  @override
  void initState() {
    super.initState();
    _discoverDevices();
  }

  Future<void> _discoverDevices() async {
    // Discover DLNA devices on the local network
    final devices = await DLNADevice.discoverDevices();
    setState(() {
      _devices = devices;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('DLNA Demo'),
      ),
      body: ListView.builder(
        itemCount: _devices.length,
        itemBuilder: (context, index) {
          final device = _devices[index];
          return ListTile(
            title: Text(device.name),
            subtitle: Text(device.ipAddress),
            trailing: IconButton(
              icon: Icon(Icons.play_arrow),
              onPressed: () async {
                // Play a media file on the selected device
                final mediaUrl = 'https://example.com/media.mp4';
                await device.playMedia(mediaUrl);
              },
            ),
          );
        },
      ),
    );
  }
}
```
// The app starts by discovering DLNA devices on the local network using the `_discoverDevices` method.
// The discovered devices are stored in the `_devices` list and displayed in a `ListView`.
// When a device is selected, the app plays a media file on the device using the `playMedia` method.

// The app uses the `DLNADevice` class to interact with DLNA devices.
// The `DLNADevice` class provides methods for discovering devices, playing media, and controlling playback.

// The app also uses the `dlna_dart` package to handle events from DLNA devices.
// The package provides a `DLNAEvent` class that represents events from DLNA devices.
// The app can listen to events from DLNA devices using the `DLNAEvent` class.

<-- END_MAIN -->
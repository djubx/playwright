<-- START_DESCRIPTION -->

# Animated Neumorphic Flutter Package
=====================================

The `animated_neumorphic` package is a Flutter library that provides a simple and easy-to-use way to create neumorphic animations. Neumorphism is a design style that combines skeuomorphism and minimalism, creating a visually appealing and interactive user interface.

This package is ideal for developers who want to add a touch of modernity and sophistication to their Flutter applications. With `animated_neumorphic`, you can create stunning animations that simulate the look and feel of 3D objects.

### Features

*   Easy-to-use API for creating neumorphic animations
*   Support for various animation types, including hover, press, and focus
*   Customizable animation duration and curve
*   Compatible with both Android and iOS platforms

### When to Use

*   When you want to add a modern and sleek look to your Flutter application
*   When you need to create interactive and engaging user interfaces
*   When you want to simulate the look and feel of 3D objects in your application

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Using the Animated Neumorphic Package
=============================================

In this tutorial, we will walk through the setup process and explain how to use the `animated_neumorphic` package in your Flutter application.

### Step 1: Add the Package to Your Project

To use the `animated_neumorphic` package, you need to add it to your project's `pubspec.yaml` file. Open the file and add the following line under the `dependencies` section:

```yml
dependencies:
  animated_neumorphic: ^1.0.0
```

Then, run the following command in your terminal to get the package:

```bash
flutter pub get
```

### Step 2: Import the Package

To use the package, you need to import it in your Dart file. Add the following line at the top of your file:

```dart
import 'package:animated_neumorphic/animated_neumorphic.dart';
```

### Step 3: Create a Neumorphic Animation

To create a neumorphic animation, you can use the `AnimatedNeumorphic` widget. Here is an example:

```dart
AnimatedNeumorphic(
  child: Container(
    width: 100,
    height: 100,
    color: Colors.blue,
  ),
  animationType: AnimationType.hover,
  animationDuration: Duration(milliseconds: 500),
  curve: Curves.easeInOut,
)
```

In this example, we create a blue container with a width and height of 100 pixels. We then wrap the container with the `AnimatedNeumorphic` widget, specifying the animation type as hover, animation duration as 500 milliseconds, and the curve as ease-in-out.

### Platform-Specific Details

The `animated_neumorphic` package is compatible with both Android and iOS platforms. However, you may need to adjust the animation duration and curve to achieve the desired effect on each platform.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:animated_neumorphic/animated_neumorphic.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Animated Neumorphic Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Animated Neumorphic Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            // Create a neumorphic animation with hover effect
            AnimatedNeumorphic(
              child: Container(
                width: 100,
                height: 100,
                color: Colors.blue,
              ),
              animationType: AnimationType.hover,
              animationDuration: Duration(milliseconds: 500),
              curve: Curves.easeInOut,
            ),
            SizedBox(height: 20),
            // Create a neumorphic animation with press effect
            AnimatedNeumorphic(
              child: Container(
                width: 100,
                height: 100,
                color: Colors.red,
              ),
              animationType: AnimationType.press,
              animationDuration: Duration(milliseconds: 500),
              curve: Curves.easeInOut,
            ),
            SizedBox(height: 20),
            // Create a neumorphic animation with focus effect
            AnimatedNeumorphic(
              child: Container(
                width: 100,
                height: 100,
                color: Colors.green,
              ),
              animationType: AnimationType.focus,
              animationDuration: Duration(milliseconds: 500),
              curve: Curves.easeInOut,
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the application and is presented with a screen containing three neumorphic animations.
// 2. Each animation has a different effect: hover, press, and focus.
// 3. When the user interacts with each animation, the corresponding effect is triggered.
// 4. The animation duration and curve can be adjusted to achieve the desired effect.
// 5. The application is compatible with both Android and iOS platforms.

```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# rxcache_network_image Flutter Package
=====================================

The `rxcache_network_image` package is a powerful caching solution for network images in Flutter applications. It provides a simple and efficient way to cache images, reducing the number of network requests and improving app performance.

### When to Use

Use `rxcache_network_image` when:

* You need to display a large number of network images in your app.
* You want to improve app performance by reducing network requests.
* You need a simple and efficient caching solution.

### Features

* Caches network images for a specified duration.
* Supports cache invalidation and refresh.
* Provides a simple and intuitive API.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
-----------------

### Add the Package

Add the `rxcache_network_image` package to your `pubspec.yaml` file:
```yml
dependencies:
  rxcache_network_image: ^1.0.0
```
### Import the Package

Import the package in your Dart file:
```dart
import 'package:rxcache_network_image/rxcache_network_image.dart';
```
### Use the Package

Use the `RxCacheNetworkImage` widget to display a network image:
```dart
RxCacheNetworkImage(
  imageUrl: 'https://example.com/image.jpg',
  cacheDuration: Duration(days: 7),
)
```
### Platform-Specific Details

* Android: The package uses the `AndroidHttpClient` to download images. Make sure to add the `android.permission.INTERNET` permission to your `AndroidManifest.xml` file.
* iOS: The package uses the `NSURLSession` to download images. Make sure to add the `NSAppTransportSecurity` key to your `Info.plist` file.

### Configurations and Optimizations

* You can configure the cache duration and refresh interval using the `cacheDuration` and `refreshInterval` properties.
* You can also use the `cacheKey` property to specify a custom cache key.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:rxcache_network_image/rxcache_network_image.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'RxCacheNetworkImage Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('RxCacheNetworkImage Demo'),
      ),
      body: Center(
        child: RxCacheNetworkImage(
          imageUrl: 'https://example.com/image.jpg',
          cacheDuration: Duration(days: 7),
          // cacheKey: 'custom_cache_key', // Optional
          // refreshInterval: Duration(hours: 1), // Optional
        ),
      ),
    );
  }
}

// Application flow:
// 1. The app starts and the `MyApp` widget is built.
// 2. The `MyHomePage` widget is built and the `RxCacheNetworkImage` widget is displayed.
// 3. The `RxCacheNetworkImage` widget checks the cache for the image.
// 4. If the image is cached, it is displayed immediately.
// 5. If the image is not cached, it is downloaded from the network and cached for the specified duration.
// 6. The cached image is then displayed.
// 7. If the cache duration expires, the image is refreshed from the network.
```

// Summary:
// The code flows as follows: the app starts, the `MyApp` widget is built, the `MyHomePage` widget is built, the `RxCacheNetworkImage` widget is displayed, it checks the cache, downloads the image if necessary, caches it, and displays it. The image is refreshed from the network when the cache duration expires.

<-- END_MAIN -->
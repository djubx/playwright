```markdown
<-- START_DESCRIPTION -->

# Widget Size Flutter Package: An Overview

The `widget_size` Flutter package is a powerful tool designed to help developers easily measure and respond to the size of widgets in their Flutter applications. This package is particularly useful when you need to adapt your UI dynamically based on the size of certain components, ensuring a responsive and flexible design.

## When to Use the Widget Size Package

- **Responsive Design**: When building applications that need to adapt to different screen sizes and orientations.
- **Dynamic Layouts**: When the layout of your application depends on the size of certain widgets.
- **Animation and Transitions**: When you need to animate or transition widgets based on their size.

## Key Features

- **Real-time Size Monitoring**: Continuously monitor the size of widgets and respond to changes.
- **Easy Integration**: Simple API that integrates seamlessly with existing Flutter widgets.
- **Cross-Platform Support**: Works on both Android and iOS platforms without additional configuration.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the Widget Size Package

In this tutorial, we will walk through the process of setting up the `widget_size` package in a Flutter project and demonstrate how to use it effectively.

## Setup Process

1. **Add Dependency**: First, add the `widget_size` package to your `pubspec.yaml` file.

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     widget_size: ^1.0.0
   ```

2. **Install the Package**: Run the following command to install the package.

   ```bash
   flutter pub get
   ```

3. **Import the Package**: Import the package in your Dart file where you intend to use it.

   ```dart
   import 'package:widget_size/widget_size.dart';
   ```

## Platform-Specific Details

### Android

No additional configuration is required for Android. Ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21 to support all features of Flutter.

### iOS

Ensure that your iOS deployment target is set to at least iOS 9.0 in your `ios/Podfile`.

```ruby
platform :ios, '9.0'
```

## Using the Package

To use the `widget_size` package, wrap the widget you want to measure with `WidgetSize` and provide a callback to handle size changes.

```dart
WidgetSize(
  onChange: (Size size) {
    print('Widget size: $size');
  },
  child: RealFlutter(),
)
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:widget_size/widget_size.dart';

void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Widget Size Demo',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Widget Size Example'),
        ),
        body: Center(
          child: RealFlutter(),
        ),
      ),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  Size _widgetSize = Size.zero;

  @override
  Widget build(BuildContext context) {
    return Column(
      mainAxisAlignment: MainAxisAlignment.center,
      children: <Widget>[
        WidgetSize(
          onChange: (Size size) {
            setState(() {
              _widgetSize = size;
            });
          },
          child: Container(
            color: Colors.blue,
            width: 100,
            height: 100,
            child: Center(
              child: Text(
                'Resize Me!',
                style: TextStyle(color: Colors.white),
              ),
            ),
          ),
        ),
        SizedBox(height: 20),
        Text('Current Size: ${_widgetSize.width} x ${_widgetSize.height}'),
      ],
    );
  }
}

// The main function initializes the app by calling runApp with MyApp.
// MyApp is a StatelessWidget that sets up the MaterialApp and home Scaffold.
// RealFlutter is a StatefulWidget that uses WidgetSize to monitor the size of a Container.
// The Container is displayed with a blue background and a text label.
// WidgetSize's onChange callback updates the _widgetSize state whenever the Container's size changes.
// The current size of the Container is displayed below it in a Text widget.
// This setup allows real-time monitoring and display of the widget's size.

<-- END_MAIN -->
```
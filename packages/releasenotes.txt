<-- START_DESCRIPTION -->

# Releasenotes Flutter Package
================================

The `releasenotes` Flutter package is a convenient tool for managing release notes and displaying them to users. It allows developers to easily track changes, bug fixes, and new features across different versions of their app.

### When to Use This Package

This package is particularly useful when:

* You want to keep your users informed about the latest changes and updates in your app.
* You need to manage release notes for multiple versions of your app.
* You want to display release notes in a user-friendly format.

### Features

The `releasenotes` package offers the following features:

* Easy management of release notes for multiple versions of your app.
* Support for displaying release notes in a user-friendly format.
* Customizable layout and design.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
================

### Step 1: Add the Package to Your Project

Add the `releasenotes` package to your `pubspec.yaml` file:
```yml
dependencies:
  releasenotes: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the `releasenotes` package in your Dart file:
```dart
import 'package:releasenotes/releasenotes.dart';
```
### Step 3: Create a Release Notes File

Create a JSON file (e.g., `release_notes.json`) containing the release notes for your app:
```json
{
  "versions": [
    {
      "version": "1.0.0",
      "releaseNotes": [
        "Initial release",
        "Feature 1",
        "Feature 2"
      ]
    },
    {
      "version": "1.1.0",
      "releaseNotes": [
        "Bug fix 1",
        "New feature 3"
      ]
    }
  ]
}
```
### Step 4: Display Release Notes

Use the `ReleaseNotes` widget to display the release notes:
```dart
ReleaseNotes(
  filePath: 'release_notes.json',
  version: '1.1.0',
)
```
### Platform-Specific Details

* For Android, make sure to add the `release_notes.json` file to the `assets` folder in your `pubspec.yaml` file:
```yml
flutter:
  assets:
    - release_notes.json
```
* For iOS, make sure to add the `release_notes.json` file to the `Resources` folder in your Xcode project.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:releasenotes/releasenotes.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Release Notes Demo',
      home: ReleaseNotesPage(),
    );
  }
}

class ReleaseNotesPage extends StatefulWidget {
  @override
  _ReleaseNotesPageState createState() => _ReleaseNotesPageState();
}

class _ReleaseNotesPageState extends State<ReleaseNotesPage> {
  String _version = '1.1.0';

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Release Notes Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text('Release Notes for Version $_version'),
            SizedBox(height: 20),
            ReleaseNotes(
              filePath: 'release_notes.json',
              version: _version,
            ),
          ],
        ),
      ),
    );
  }
}
```

// This is the main entry point of the app.
// The `MyApp` widget is the root of the app.
// It uses the `MaterialApp` widget to create a Material Design app.
// The `home` property is set to the `ReleaseNotesPage` widget.

// The `ReleaseNotesPage` widget is a stateful widget.
// It has a `_version` variable to store the current version.
// The `build` method returns a `Scaffold` widget with an `AppBar` and a `Center` widget.
// The `Center` widget contains a `Column` widget with two children: a `Text` widget and a `ReleaseNotes` widget.
// The `ReleaseNotes` widget is used to display the release notes for the current version.

// The app flow is as follows:
// 1. The user opens the app.
// 2. The `MyApp` widget is created and the `ReleaseNotesPage` widget is displayed.
// 3. The `ReleaseNotesPage` widget displays the release notes for the current version.
// 4. The user can view the release notes for different versions by changing the `_version` variable.

<-- END_MAIN -->
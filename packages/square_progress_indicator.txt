<-- START_DESCRIPTION -->

# Square Progress Indicator Flutter Package
=============================================

The `square_progress_indicator` Flutter package provides a customizable progress indicator that displays a square shape with a fill animation. It's a great alternative to the traditional circular progress indicators and can be used in a variety of scenarios, such as:

* Loading screens
* Button clicks
* Data processing
* Network requests

Features:

* Customizable size and color
* Fill animation with adjustable speed
* Optional border and border color
* Support for both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting up and using the Square Progress Indicator package
================================================================

### Step 1: Add the package to your pubspec.yaml file

```yml
dependencies:
  flutter:
    sdk: flutter
  square_progress_indicator: ^1.0.0
```

### Step 2: Import the package in your Dart file

```dart
import 'package:square_progress_indicator/square_progress_indicator.dart';
```

### Step 3: Create a SquareProgressIndicator widget

```dart
SquareProgressIndicator(
  size: 50.0,
  color: Colors.blue,
  borderColor: Colors.white,
  borderWidth: 2.0,
)
```

### Platform-specific details:

* Android: No additional configuration required.
* iOS: No additional configuration required.

### Optimizations:

* For better performance, use a smaller size and a lower border width.
* You can also use a caching mechanism to store the progress indicator's animation, reducing the computational overhead.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:square_progress_indicator/square_progress_indicator.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  double _progress = 0.0;

  @override
  void initState() {
    super.initState();
    _animateProgress();
  }

  void _animateProgress() {
    Future.delayed(Duration(milliseconds: 100), () {
      setState(() {
        _progress += 0.01;
        if (_progress < 1.0) {
          _animateProgress();
        }
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Square Progress Indicator Demo'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              SquareProgressIndicator(
                size: 100.0,
                color: Colors.blue,
                borderColor: Colors.white,
                borderWidth: 2.0,
                progress: _progress,
              ),
              SizedBox(height: 20.0),
              Text('Progress: ${(_progress * 100).toInt()}%'),
            ],
          ),
        ),
      ),
    );
  }
}

// Application flow:
// 1. The RealFlutter widget is created and starts the animation.
// 2. The _animateProgress function is called every 100ms to update the progress.
// 3. The progress is updated and the widget is rebuilt to reflect the new progress.
// 4. The SquareProgressIndicator widget displays the current progress.
// 5. The progress is displayed as a percentage below the progress indicator.
// Summary: The code creates a SquareProgressIndicator widget and animates its progress from 0 to 100%.
```

<-- END_MAIN -->
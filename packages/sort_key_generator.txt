<-- START_DESCRIPTION -->

# sort_key_generator Flutter Package
=====================================

The `sort_key_generator` package is a utility library for Flutter that helps generate sort keys for lists of objects. It provides a simple and efficient way to sort lists of objects based on multiple properties.

### When to Use

This package is useful when you need to sort lists of objects based on multiple properties. For example, you may want to sort a list of users by their last name and then by their first name.

### Features

*   Generates sort keys for lists of objects based on multiple properties
*   Supports both ascending and descending sort orders
*   Works with any type of object

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
------------------

To use the `sort_key_generator` package, follow these steps:

### Step 1: Add the Package to Your Project

Add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  sort_key_generator: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:sort_key_generator/sort_key_generator.dart';
```

### Step 3: Generate Sort Keys

Use the `SortKeyGenerator` class to generate sort keys for your list of objects. For example:

```dart
class User {
  String firstName;
  String lastName;

  User({required this.firstName, required this.lastName});
}

void main() {
  List<User> users = [
    User(firstName: 'John', lastName: 'Doe'),
    User(firstName: 'Jane', lastName: 'Doe'),
    User(firstName: 'Bob', lastName: 'Smith'),
  ];

  SortKeyGenerator<User> sortKeyGenerator = SortKeyGenerator<User>(
    properties: [
      (user) => user.lastName,
      (user) => user.firstName,
    ],
  );

  List<String> sortKeys = sortKeyGenerator.generateSortKeys(users);

  print(sortKeys);
}
```

This will output:

```
[Doe, John, Doe, Jane, Smith, Bob]
```

### Platform-Specific Details

This package works on all platforms supported by Flutter, including Android and iOS. No platform-specific configurations or optimizations are required.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:sort_key_generator/sort_key_generator.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Sort Key Generator Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  List<User> _users = [
    User(firstName: 'John', lastName: 'Doe'),
    User(firstName: 'Jane', lastName: 'Doe'),
    User(firstName: 'Bob', lastName: 'Smith'),
  ];

  List<String> _sortKeys = [];

  @override
  void initState() {
    super.initState();
    _generateSortKeys();
  }

  void _generateSortKeys() {
    SortKeyGenerator<User> sortKeyGenerator = SortKeyGenerator<User>(
      properties: [
        (user) => user.lastName,
        (user) => user.firstName,
      ],
    );

    _sortKeys = sortKeyGenerator.generateSortKeys(_users);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Sort Key Generator Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text('Sort Keys:'),
            Text(_sortKeys.join(', ')),
          ],
        ),
      ),
    );
  }
}

class User {
  String firstName;
  String lastName;

  User({required this.firstName, required this.lastName});
}

// The app starts by creating a list of User objects.
// Then, it generates sort keys for the list using the SortKeyGenerator class.
// The sort keys are generated based on the lastName and firstName properties of the User objects.
// Finally, the app displays the generated sort keys on the screen.
// The app uses the Material Design theme and has a simple layout with a centered column of text.
```

<-- END_MAIN -->
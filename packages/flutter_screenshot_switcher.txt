<-- START_DESCRIPTION -->

# Flutter Screenshot Switcher Package
=====================================

The `flutter_screenshot_switcher` package is a Flutter plugin that allows you to capture and switch between screenshots of your app. This package is useful for creating tutorials, guides, or showcasing your app's features.

### Features

* Capture screenshots of your app
* Switch between captured screenshots
* Supports both Android and iOS platforms

### When to use this package

* Creating tutorials or guides for your app
* Showcasing your app's features
* Creating a demo or presentation of your app

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting up the package
-------------------------

To use the `flutter_screenshot_switcher` package, follow these steps:

### Step 1: Add the package to your pubspec.yaml file

```yml
dependencies:
  flutter_screenshot_switcher: ^1.0.0
```

### Step 2: Import the package in your Dart file

```dart
import 'package:flutter_screenshot_switcher/flutter_screenshot_switcher.dart';
```

### Step 3: Initialize the package

```dart
Future<void> main() async {
  await FlutterScreenshotSwitcher.initialize();
  runApp(MyApp());
}
```

### Platform-specific details

#### Android

* Add the following permission to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
```
* Create a new folder in your project's root directory called `screenshots`

#### iOS

* Add the following permission to your `Info.plist` file:
```xml
<key>NSPhotoLibraryUsageDescription</key>
<string>This app needs access to your photo library to save screenshots</string>
```
* Create a new folder in your project's root directory called `screenshots`

### Using the package

To capture a screenshot, use the `captureScreenshot` method:
```dart
await FlutterScreenshotSwitcher.captureScreenshot();
```
To switch between captured screenshots, use the `switchScreenshot` method:
```dart
await FlutterScreenshotSwitcher.switchScreenshot(index: 1);
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_screenshot_switcher/flutter_screenshot_switcher.dart';

void main() async {
  await FlutterScreenshotSwitcher.initialize();
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  int _currentIndex = 0;

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Flutter Screenshot Switcher Demo'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Text(
                'Screenshot $_currentIndex',
                style: TextStyle(fontSize: 24),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () async {
                  // Capture a screenshot
                  await FlutterScreenshotSwitcher.captureScreenshot();
                  print('Screenshot captured!');
                },
                child: Text('Capture Screenshot'),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () async {
                  // Switch to the next screenshot
                  await FlutterScreenshotSwitcher.switchScreenshot(index: _currentIndex + 1);
                  setState(() {
                    _currentIndex++;
                  });
                  print('Switched to screenshot $_currentIndex');
                },
                child: Text('Switch Screenshot'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The app initializes the FlutterScreenshotSwitcher package.
// 2. The user clicks the "Capture Screenshot" button, which captures a screenshot of the app.
// 3. The user clicks the "Switch Screenshot" button, which switches to the next captured screenshot.
// 4. The app updates the _currentIndex variable to keep track of the current screenshot index.
// 5. The app displays the current screenshot index on the screen.

// Created/Modified files during execution:
// screenshots/screenshot_0.png
// screenshots/screenshot_1.png
// ...

```

<-- END_MAIN -->
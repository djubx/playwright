<-- START_DESCRIPTION -->

**Build CLI Annotations Flutter Package**
=============================================

The `build_cli_annotations` package is a powerful tool for generating command-line interfaces (CLI) in Flutter applications. It provides a simple and efficient way to create CLI tools, allowing developers to focus on the core functionality of their app.

**When to Use This Package**
---------------------------

This package is ideal for creating CLI tools that need to interact with the Flutter framework, such as:

* Building and deploying Flutter apps
* Running tests and debugging
* Creating and managing app resources

**Features**
------------

* Supports generating CLI tools for both Android and iOS platforms
* Provides a simple and intuitive API for defining CLI commands and options
* Automatically generates help documentation for CLI tools

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setting Up the Package**
-------------------------

To use the `build_cli_annotations` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  build_cli_annotations: ^1.0.0
```
2. Run `flutter pub get` to install the package.

**Defining CLI Commands and Options**
-----------------------------------

To define a CLI command, create a new class that extends `RealFlutter` and annotate it with `@CliCommand`:
```dart
import 'package:build_cli_annotations/build_cli_annotations.dart';

@CliCommand()
class MyCommand extends RealFlutter {
  @CliOption()
  String get name => 'my_command';

  @override
  void run() {
    print('Hello, World!');
  }
}
```
**Platform-Specific Details**
---------------------------

For Android, you need to add the following configuration to your `android/app/build.gradle` file:
```groovy
android {
  ...
  defaultConfig {
    ...
    javaCompileOptions {
      annotationProcessorOptions {
        arguments = ['androidManifestFile': 'AndroidManifest.xml']
      }
    }
  }
}
```
For iOS, you need to add the following configuration to your `ios/Podfile` file:
```ruby
target 'MyApp' do
  ...
  pod 'build_cli_annotations', '~> 1.0.0'
end
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:build_cli_annotations/build_cli_annotations.dart';

void main() {
  // Create a new instance of the RealFlutter class
  RealFlutter realFlutter = RealFlutter();

  // Define a new CLI command
  @CliCommand()
  class MyCommand extends RealFlutter {
    @CliOption()
    String get name => 'my_command';

    @override
    void run() {
      print('Hello, World!');
    }
  }

  // Add the command to the RealFlutter instance
  realFlutter.addCommand(MyCommand());

  // Run the command
  realFlutter.run(['my_command']);
}

// The following comments explain the flow of the application:

// 1. The main function creates a new instance of the RealFlutter class.
// 2. A new CLI command is defined using the @CliCommand annotation.
// 3. The command is added to the RealFlutter instance using the addCommand method.
// 4. The run method is called on the RealFlutter instance, passing in the name of the command to run.
// 5. The command is executed, printing 'Hello, World!' to the console.

// Final summary: This code demonstrates how to define a CLI command using the build_cli_annotations package and run it using the RealFlutter class.
```
<-- END_MAIN -->
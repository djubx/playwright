```markdown
<!-- START_DESCRIPTION -->
# Contextual Menu Flutter Package

The **contextual_menu** Flutter package provides a flexible and customizable way to create context menus in your Flutter applications. Context menus are essential for enhancing user experience by providing quick access to actions related to a specific item or area in the app. This package allows developers to easily implement context menus that can be triggered by long-press gestures or right-click actions.

## When to Use

You might want to use the **contextual_menu** package in scenarios such as:
- Displaying options for a list item in a list view.
- Providing additional actions for images or cards in a grid layout.
- Offering context-specific actions in a map or drawing application.

## Features

- **Customizable Menu Items**: You can define your own menu items with icons and text.
- **Flexible Triggers**: Supports both long-press and right-click gestures.
- **Platform-Specific Behavior**: Adapts to different platforms (iOS and Android) for a native feel.
- **Easy Integration**: Simple API that integrates seamlessly with existing Flutter widgets.

This package is particularly useful for applications that require a clean and efficient way to present options without cluttering the UI.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Contextual Menu Package

## Step 1: Adding the Dependency

To get started, add the **contextual_menu** package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  contextual_menu: ^1.0.0  # Check for the latest version on pub.dev
```

## Step 2: Importing the Package

In your Dart file, import the package:

```dart
import 'package:contextual_menu/contextual_menu.dart';
```

## Step 3: Basic Setup

### Android Configuration

For Android, ensure that your `AndroidManifest.xml` file has the necessary permissions if you are using features that require them. Typically, no additional configuration is needed for basic usage.

### iOS Configuration

For iOS, ensure that your app supports the necessary gestures. You may need to adjust the `Info.plist` file if you are using specific features that require permissions.

## Step 4: Using the Contextual Menu

Hereâ€™s a simple example of how to implement a contextual menu in your Flutter app:

```dart
import 'package:flutter/material.dart';
import 'package:contextual_menu/contextual_menu.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Contextual Menu Example')),
        body: Center(
          child: GestureDetector(
            onLongPress: () {
              // Show the contextual menu on long press
              showMenu(
                context: context,
                position: RelativeRect.fromLTRB(100, 100, 0, 0),
                items: [
                  PopupMenuItem(
                    child: Text('Option 1'),
                    value: 'option1',
                  ),
                  PopupMenuItem(
                    child: Text('Option 2'),
                    value: 'option2',
                  ),
                ],
              ).then((value) {
                // Handle the selected option
                if (value == 'option1') {
                  print('Option 1 selected');
                } else if (value == 'option2') {
                  print('Option 2 selected');
                }
              });
            },
            child: Container(
              padding: EdgeInsets.all(20),
              color: Colors.blue,
              child: Text('Long Press Me', style: TextStyle(color: Colors.white)),
            ),
          ),
        ),
      ),
    );
  }
}
```

### Explanation of the Code

- **GestureDetector**: This widget detects gestures. Here, we use it to listen for long-press events.
- **showMenu**: This function displays the contextual menu. It takes the context, position, and a list of menu items.
- **PopupMenuItem**: Each item in the menu is defined using this widget. You can customize it with text and actions.
- **Handling Selection**: After the menu is displayed, we handle the selected option using a callback.

This setup provides a basic contextual menu that appears when the user long-presses the container.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Contextual Menu in Flutter

```dart
import 'package:flutter/material.dart';
import 'package:contextual_menu/contextual_menu.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Contextual Menu Example')),
        body: Center(
          child: GestureDetector(
            onLongPress: () {
              // Show the contextual menu on long press
              showMenu(
                context: context,
                position: RelativeRect.fromLTRB(100, 100, 0, 0),
                items: [
                  PopupMenuItem(
                    child: Text('Option 1'),
                    value: 'option1',
                  ),
                  PopupMenuItem(
                    child: Text('Option 2'),
                    value: 'option2',
                  ),
                ],
              ).then((value) {
                // Handle the selected option
                if (value == 'option1') {
                  print('Option 1 selected');
                } else if (value == 'option2') {
                  print('Option 2 selected');
                }
              });
            },
            child: Container(
              padding: EdgeInsets.all(20),
              color: Colors.blue,
              child: Text('Long Press Me', style: TextStyle(color: Colors.white)),
            ),
          ),
        ),
      ),
    );
  }
}

void main() {
  runApp(RealFlutter());
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the RealFlutter widget.
// 2. The RealFlutter widget builds a MaterialApp with a Scaffold containing an AppBar and a Center widget.
// 3. Inside the Center widget, a GestureDetector is used to detect long-press gestures.
// 4. When the user long-presses the container, the showMenu function is called, displaying a contextual menu.
// 5. The menu contains two options: "Option 1" and "Option 2".
// 6. When an option is selected, the corresponding value is printed to the console.
// 7. The user interface remains responsive, allowing for a smooth user experience.
```
<!-- END_MAIN -->
``` 

This structured blog provides a comprehensive overview of the **contextual_menu** Flutter package, guiding users through its features, setup, and implementation with a complete example.
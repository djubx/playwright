<-- START_DESCRIPTION -->

# Media Projection Creator Flutter Package
=============================================

The `media_projection_creator` Flutter package provides a simple and efficient way to create and manage media projections on Android and iOS devices. Media projections allow apps to capture and record the device's screen, making it a useful feature for applications such as screen recorders, live streaming, and more.

## When to Use This Package
---------------------------

You should use this package when you need to create a media projection in your Flutter app, such as:

* Screen recording
* Live streaming
* Creating tutorial videos
* Capturing in-app gameplay

## Features
------------

* Create and manage media projections on Android and iOS devices
* Capture and record the device's screen
* Support for various video formats and resolutions
* Easy-to-use API for integrating media projections into your app

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Media Projection Creator Package
-------------------------------------------------

To use the `media_projection_creator` package in your Flutter app, follow these steps:

### Step 1: Add the Package to Your Pubspec.yaml File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  media_projection_creator: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package in Your Dart File

Import the package in your Dart file:
```dart
import 'package:media_projection_creator/media_projection_creator.dart';
```
### Step 3: Create a Media Projection

Create a media projection using the `MediaProjectionCreator` class:
```dart
MediaProjectionCreator _mediaProjectionCreator = MediaProjectionCreator();

Future<void> _createMediaProjection() async {
  final mediaProjection = await _mediaProjectionCreator.createMediaProjection();
  // Use the media projection to capture and record the screen
}
```
### Platform-Specific Details

* **Android:** On Android, you need to add the `android.permission.RECORD_AUDIO` and `android.permission.WRITE_EXTERNAL_STORAGE` permissions to your `AndroidManifest.xml` file.
* **iOS:** On iOS, you need to add the `NSMicrophoneUsageDescription` and `NSPhotoLibraryUsageDescription` keys to your `Info.plist` file.

### Configurations and Optimizations

* You can configure the video format and resolution using the `MediaProjectionSettings` class.
* You can optimize the media projection for better performance using the `MediaProjectionOptimizer` class.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:media_projection_creator/media_projection_creator.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Media Projection Creator Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  MediaProjectionCreator _mediaProjectionCreator = MediaProjectionCreator();
  MediaProjection? _mediaProjection;

  Future<void> _createMediaProjection() async {
    // Create a media projection
    final mediaProjection = await _mediaProjectionCreator.createMediaProjection();
    setState(() {
      _mediaProjection = mediaProjection;
    });
  }

  Future<void> _startRecording() async {
    // Start recording the screen
    await _mediaProjection?.startRecording();
  }

  Future<void> _stopRecording() async {
    // Stop recording the screen
    await _mediaProjection?.stopRecording();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Media Projection Creator Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: _createMediaProjection,
              child: Text('Create Media Projection'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _startRecording,
              child: Text('Start Recording'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _stopRecording,
              child: Text('Stop Recording'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user clicks the "Create Media Projection" button to create a media projection.
// 2. The media projection is created and stored in the _mediaProjection variable.
// 3. The user clicks the "Start Recording" button to start recording the screen.
// 4. The screen recording starts and the media projection is used to capture the screen.
// 5. The user clicks the "Stop Recording" button to stop recording the screen.
// 6. The screen recording stops and the media projection is released.
```

<-- END_MAIN -->

In summary, the code flows as follows:

1. The user clicks the "Create Media Projection" button to create a media projection.
2. The media projection is created and stored in the `_mediaProjection` variable.
3. The user clicks the "Start Recording" button to start recording the screen.
4. The screen recording starts and the media projection is used to capture the screen.
5. The user clicks the "Stop Recording" button to stop recording the screen.
6. The screen recording stops and the media projection is released.

Note that this is a basic example and you may need to add additional error handling and features depending on your specific use case.
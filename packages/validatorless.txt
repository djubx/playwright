<-- START_DESCRIPTION -->

**Validatorless Flutter Package: Streamlining Form Validation**
===========================================================

The Validatorless Flutter package is a lightweight, easy-to-use solution for form validation in Flutter applications. It eliminates the need for boilerplate code and provides a simple, declarative way to validate form fields.

**When to Use Validatorless**
-----------------------------

Validatorless is perfect for applications with complex forms, where validation logic can become cumbersome and hard to maintain. It's also ideal for developers who want to focus on building their app's core features without worrying about the intricacies of form validation.

**Key Features**
----------------

*   Declarative validation: Define validation rules in a concise, readable way.
*   Automatic error handling: Validatorless takes care of displaying error messages and highlighting invalid fields.
*   Extensive customization options: Tailor the validation experience to your app's unique needs.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setting Up Validatorless**
---------------------------

To use Validatorless in your Flutter project, follow these steps:

### Step 1: Add the Validatorless Package

Add the Validatorless package to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  validatorless: ^1.2.3
```

Then, run `flutter pub get` to install the package.

### Step 2: Import Validatorless

Import the Validatorless package in your Dart file:

```dart
import 'package:validatorless/validatorless.dart';
```

### Step 3: Define Validation Rules

Create a `ValidatorlessForm` widget and define validation rules for each field:

```dart
ValidatorlessForm(
  child: Column(
    children: [
      ValidatorlessTextFormField(
        validator: Validatorless.required('Name is required'),
        decoration: InputDecoration(labelText: 'Name'),
      ),
      ValidatorlessTextFormField(
        validator: Validatorless.email('Invalid email'),
        decoration: InputDecoration(labelText: 'Email'),
      ),
    ],
  ),
)
```

### Step 4: Handle Form Submission

Use the `ValidatorlessForm` widget's `onSubmit` callback to handle form submission:

```dart
ValidatorlessForm(
  onSubmit: (values) {
    // Handle form submission here
  },
  child: // ...
)
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:validatorless/validatorless.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Validatorless Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _formKey = GlobalKey<ValidatorlessFormState>();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Validatorless Demo'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(20.0),
        child: ValidatorlessForm(
          key: _formKey,
          onSubmit: (values) {
            // Handle form submission here
            print(values);
          },
          child: Column(
            children: [
              ValidatorlessTextFormField(
                validator: Validatorless.required('Name is required'),
                decoration: InputDecoration(labelText: 'Name'),
              ),
              ValidatorlessTextFormField(
                validator: Validatorless.email('Invalid email'),
                decoration: InputDecoration(labelText: 'Email'),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  _formKey.currentState?.submit();
                },
                child: Text('Submit'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and is presented with a form containing two fields: Name and Email.
// 2. The user enters their name and email address in the respective fields.
// 3. When the user submits the form, the ValidatorlessForm widget checks if the form is valid.
// 4. If the form is valid, the onSubmit callback is called, and the form values are printed to the console.
// 5. If the form is invalid, the ValidatorlessForm widget displays error messages for each invalid field.
```

<-- END_MAIN -->
```markdown
<-- START_DESCRIPTION -->

# Overview of the `root_jailbreak_sniffer` Flutter Package

The `root_jailbreak_sniffer` package is a powerful tool for Flutter developers who need to detect whether a device has been rooted (Android) or jailbroken (iOS). This package is essential for applications that require a high level of security, such as banking apps, enterprise applications, or any app that handles sensitive user data. By detecting a compromised device, developers can prevent their apps from running in potentially insecure environments.

## Features

- **Cross-Platform Support**: Works seamlessly on both Android and iOS platforms.
- **Easy Integration**: Simple API that can be integrated with minimal effort.
- **Real-Time Detection**: Provides real-time detection of root or jailbreak status.
- **Customizable Responses**: Allows developers to define custom actions when a device is detected as compromised.

## When to Use

- **Security-Sensitive Applications**: Apps that handle sensitive data or transactions.
- **Compliance Requirements**: Applications that need to comply with security standards or regulations.
- **Enterprise Applications**: Apps used within organizations that require strict security measures.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using `root_jailbreak_sniffer`

In this tutorial, we will walk through the process of setting up and using the `root_jailbreak_sniffer` package in a Flutter application. We will cover platform-specific configurations for both Android and iOS.

## Setup Process

### Step 1: Add Dependency

Add the `root_jailbreak_sniffer` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  root_jailbreak_sniffer: ^1.0.0
```

Run `flutter pub get` to install the package.

### Step 2: Android Configuration

For Android, ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 18:

```gradle
android {
    defaultConfig {
        minSdkVersion 18
    }
}
```

### Step 3: iOS Configuration

For iOS, make sure your `Podfile` is using a platform version of at least 9.0:

```ruby
platform :ios, '9.0'
```

### Step 4: Import the Package

In your Dart code, import the package:

```dart
import 'package:root_jailbreak_sniffer/root_jailbreak_sniffer.dart';
```

## Using the Package

To use the package, create an instance of the `RealFlutter` class and call the `isDeviceRootedOrJailbroken` method. This method returns a boolean indicating whether the device is compromised.

```dart
class RealFlutter {
  Future<bool> checkDeviceSecurity() async {
    return await RootJailbreakSniffer.isDeviceRootedOrJailbroken;
  }
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:root_jailbreak_sniffer/root_jailbreak_sniffer.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Root/Jailbreak Detection',
      home: SecurityCheckScreen(),
    );
  }
}

class SecurityCheckScreen extends StatefulWidget {
  @override
  _SecurityCheckScreenState createState() => _SecurityCheckScreenState();
}

class _SecurityCheckScreenState extends State<SecurityCheckScreen> {
  bool? _isDeviceCompromised;

  @override
  void initState() {
    super.initState();
    _checkDeviceSecurity();
  }

  // Function to check if the device is rooted or jailbroken
  Future<void> _checkDeviceSecurity() async {
    // Create an instance of RealFlutter
    RealFlutter realFlutter = RealFlutter();
    // Check the device security status
    bool isCompromised = await realFlutter.checkDeviceSecurity();
    // Update the state with the result
    setState(() {
      _isDeviceCompromised = isCompromised;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Security Check'),
      ),
      body: Center(
        child: _isDeviceCompromised == null
            ? CircularProgressIndicator() // Show loading indicator while checking
            : _isDeviceCompromised!
                ? Text('Device is compromised!', style: TextStyle(color: Colors.red, fontSize: 24))
                : Text('Device is secure.', style: TextStyle(color: Colors.green, fontSize: 24)),
      ),
    );
  }
}

// Application Flow:
// 1. The app starts with the `MyApp` widget, which sets up the MaterialApp and the home screen.
// 2. The `SecurityCheckScreen` is a stateful widget that checks the device's security status.
// 3. In the `initState` method, `_checkDeviceSecurity` is called to determine if the device is rooted or jailbroken.
// 4. The `RealFlutter` class is used to perform the security check using the `root_jailbreak_sniffer` package.
// 5. The result of the check updates the `_isDeviceCompromised` state variable.
// 6. The UI displays a loading indicator while the check is in progress.
// 7. Once the check is complete, the UI updates to show whether the device is secure or compromised.

<-- END_MAIN -->
```
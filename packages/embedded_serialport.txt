<-- START_DESCRIPTION -->

# Embedded Serial Port Flutter Package
=====================================

The `embedded_serialport` Flutter package provides a simple and efficient way to communicate with serial ports on Android and iOS devices. This package is ideal for IoT applications, robotics, and other projects that require serial communication.

### Features

*   Supports both Android and iOS platforms
*   Allows for serial port discovery and connection
*   Provides methods for sending and receiving data
*   Supports various baud rates and data bits

### When to Use

This package is useful when you need to communicate with serial devices, such as:

*   Microcontrollers (e.g., Arduino)
*   Sensors and actuators
*   Serial consoles
*   Other serial-enabled devices

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Package
=============================================

### Step 1: Add the Package to Your Project

Add the `embedded_serialport` package to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  embedded_serialport: ^0.1.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:embedded_serialport/embedded_serialport.dart';
```

### Step 3: Discover and Connect to a Serial Port

Use the `SerialPort` class to discover and connect to a serial port:

```dart
SerialPort _serialPort;

Future<void> _connectToSerialPort() async {
  final List<SerialPortInfo> availablePorts = await SerialPort.availablePorts;

  if (availablePorts.isNotEmpty) {
    final SerialPortInfo portInfo = availablePorts.first;
    _serialPort = await SerialPort.connect(portInfo);
  } else {
    print('No available serial ports');
  }
}
```

### Step 4: Send and Receive Data

Use the `write` and `read` methods to send and receive data:

```dart
Future<void> _sendData() async {
  if (_serialPort != null) {
    await _serialPort.write('Hello, world!');
  } else {
    print('No connected serial port');
  }
}

Future<void> _receiveData() async {
  if (_serialPort != null) {
    final String data = await _serialPort.read();
    print('Received data: $data');
  } else {
    print('No connected serial port');
  }
}
```

### Platform-Specific Details

*   **Android:** Make sure to add the `android.permission.INTERNET` permission to your `AndroidManifest.xml` file.
*   **iOS:** Add the `NSBluetoothAlwaysUsageDescription` key to your `Info.plist` file.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:embedded_serialport/embedded_serialport.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Serial Port Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  SerialPort _serialPort;

  Future<void> _connectToSerialPort() async {
    // Step 1: Discover available serial ports
    final List<SerialPortInfo> availablePorts = await SerialPort.availablePorts;

    if (availablePorts.isNotEmpty) {
      // Step 2: Connect to the first available serial port
      final SerialPortInfo portInfo = availablePorts.first;
      _serialPort = await SerialPort.connect(portInfo);
    } else {
      print('No available serial ports');
    }
  }

  Future<void> _sendData() async {
    // Step 3: Send data to the connected serial port
    if (_serialPort != null) {
      await _serialPort.write('Hello, world!');
    } else {
      print('No connected serial port');
    }
  }

  Future<void> _receiveData() async {
    // Step 4: Receive data from the connected serial port
    if (_serialPort != null) {
      final String data = await _serialPort.read();
      print('Received data: $data');
    } else {
      print('No connected serial port');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Serial Port Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: _connectToSerialPort,
              child: Text('Connect to Serial Port'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _sendData,
              child: Text('Send Data'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _receiveData,
              child: Text('Receive Data'),
            ),
          ],
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user clicks the "Connect to Serial Port" button, which calls the _connectToSerialPort method.
// 2. The _connectToSerialPort method discovers available serial ports and connects to the first one.
// 3. The user clicks the "Send Data" button, which calls the _sendData method.
// 4. The _sendData method sends the string "Hello, world!" to the connected serial port.
// 5. The user clicks the "Receive Data" button, which calls the _receiveData method.
// 6. The _receiveData method reads data from the connected serial port and prints it to the console.

// Summary:
// This example demonstrates how to use the embedded_serialport package to connect to a serial port,
// send data, and receive data. The application flow is controlled by the user clicking buttons to
// connect to the serial port, send data, and receive data.
```

<-- END_MAIN -->
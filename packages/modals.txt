<-- START_DESCRIPTION -->

Modals Flutter Package
======================

The `modals` Flutter package provides a simple and easy-to-use way to display modal dialogs in your Flutter application. Modals are useful when you need to display a temporary window that requires user interaction, such as a login form, a confirmation dialog, or a settings menu.

When to Use Modals
------------------

Modals are perfect for situations where you need to:

* Display a temporary window that requires user interaction
* Block the rest of the screen until the user interacts with the modal
* Provide a clear and focused way to display information or request user input

Features
--------

The `modals` package provides the following features:

* Easy-to-use API for displaying modals
* Support for custom modal designs and layouts
* Automatic handling of modal dismissal and callback handling
* Works on both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
---------------

To use the `modals` package, follow these steps:

1. Add the `modals` package to your `pubspec.yaml` file:
```yml
dependencies:
  modals: ^1.0.0
```
2. Import the `modals` package in your Dart file:
```dart
import 'package:modals/modals.dart';
```
3. Create a modal using the `Modal` class:
```dart
Modal modal = Modal(
  child: Container(
    child: Text('Hello, World!'),
  ),
);
```
4. Display the modal using the `showModal` method:
```dart
showModal(context: context, modal: modal);
```
Platform-Specific Details
-------------------------

### Android

On Android, the `modals` package uses the `Dialog` class to display modals. To customize the modal's appearance, you can use the `dialogTheme` property:
```dart
Modal modal = Modal(
  child: Container(
    child: Text('Hello, World!'),
  ),
  dialogTheme: DialogTheme(
    backgroundColor: Colors.white,
    elevation: 10,
  ),
);
```
### iOS

On iOS, the `modals` package uses the `UIAlertController` class to display modals. To customize the modal's appearance, you can use the `alertStyle` property:
```dart
Modal modal = Modal(
  child: Container(
    child: Text('Hello, World!'),
  ),
  alertStyle: AlertStyle(
    preferredStyle: AlertStyle.PreferredStyle.alert,
  ),
);
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:modals/modals.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Modals Demo',
      home: ModalsDemo(),
    );
  }
}

class ModalsDemo extends StatefulWidget {
  @override
  _ModalsDemoState createState() => _ModalsDemoState();
}

class _ModalsDemoState extends State<ModalsDemo> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Modals Demo'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Create a modal with a custom design
            Modal modal = Modal(
              child: Container(
                child: Text('Hello, World!'),
              ),
              dialogTheme: DialogTheme(
                backgroundColor: Colors.white,
                elevation: 10,
              ),
            );

            // Display the modal
            showModal(context: context, modal: modal);
          },
          child: Text('Show Modal'),
        ),
      ),
    );
  }
}
```

// This is the main entry point of the application.
// The `RealFlutter` class is the root widget of the application.
// It uses the `MaterialApp` widget to create a Material Design app.
// The `ModalsDemo` class is the home screen of the application.
// It uses the `Scaffold` widget to create a basic Material Design layout.
// The `ElevatedButton` widget is used to display a button that shows the modal.
// When the button is pressed, the `showModal` method is called to display the modal.
// The modal is created with a custom design using the `Modal` class.
// The `dialogTheme` property is used to customize the modal's appearance.

// The application flow is as follows:
// 1. The user presses the button to show the modal.
// 2. The `showModal` method is called to display the modal.
// 3. The modal is created with a custom design using the `Modal` class.
// 4. The modal is displayed on top of the home screen.
// 5. The user interacts with the modal.
// 6. The modal is dismissed when the user is done interacting with it.

<-- END_MAIN -->
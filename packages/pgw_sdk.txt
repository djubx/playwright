```dart
import 'package:flutter/material.dart';
import 'package:pgw_sdk/pgw_sdk.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  PGWSDK _pgwSdk;
  Transaction _transaction;

  @override
  void initState() {
    super.initState();
    _pgwSdk = PGWSDK(
      gateway: 'paypal',
      clientId: 'your_client_id',
      clientSecret: 'your_client_secret',
    );
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('RealFlutter'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Text(
                'Process Transaction',
                style: TextStyle(fontSize: 24),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  _transaction = _pgwSdk.createTransaction(
                    amount: 10.99,
                    currency: 'USD',
                    paymentMethod: 'credit_card',
                  );
                  _pgwSdk.processTransaction(_transaction).then((result) {
                    if (result.success) {
                      print('Transaction processed successfully!');
                    } else {
                      print('Error processing transaction: ${result.error}');
                    }
                  });
                },
                child: Text('Process Transaction'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user clicks the "Process Transaction" button.
// 2. The `_pgwSdk` instance creates a new `Transaction` object with the specified amount, currency, and payment method.
// 3. The `_pgwSdk` instance processes the transaction using the `processTransaction` method.
// 4. The `processTransaction` method sends a request to the payment gateway to process the transaction.
// 5. The payment gateway processes the transaction and returns a response to the `_pgwSdk` instance.
// 6. The `_pgwSdk` instance receives the response and checks if the transaction was successful.
// 7. If the transaction was successful, the `_pgwSdk` instance prints a success message to the console.
// 8. If the transaction failed, the `_pgwSdk` instance prints an error message to the console.

// In summary, the code flows as follows:
// User clicks button -> Create transaction object -> Process transaction -> Send request to payment gateway -> Receive response -> Check if transaction was successful -> Print success or error message.

<-- END_MAIN -->
```
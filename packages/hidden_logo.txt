<-- START_DESCRIPTION -->

# Hidden Logo Flutter Package
================================

The `hidden_logo` Flutter package is a utility library that allows developers to easily hide and show their app's logo in the app bar. This package is useful when you want to create a seamless and immersive experience for your users.

### Features

*   Hide and show the app logo in the app bar
*   Customizable animation duration
*   Supports both Android and iOS platforms

### When to Use

You can use this package in various scenarios, such as:

*   Creating a full-screen experience for your users
*   Hiding the app logo when scrolling down a list
*   Showing the app logo when the user navigates to a specific screen

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Hidden Logo Package
=====================================================

### Step 1: Add the Package to Your Pubspec.yaml File

To use the `hidden_logo` package, you need to add it to your `pubspec.yaml` file. Open the file and add the following line under the `dependencies` section:

```yml
dependencies:
  flutter:
    sdk: flutter
  hidden_logo: ^1.0.0
```

Then, run `flutter pub get` in your terminal to get the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:hidden_logo/hidden_logo.dart';
```

### Step 3: Create a HiddenLogoWidget

Create a `HiddenLogoWidget` and pass the `logo` property to it. The `logo` property can be any widget that you want to use as your app's logo.

```dart
HiddenLogoWidget(
  logo: Image.asset('assets/logo.png'),
)
```

### Step 4: Animate the Logo

To animate the logo, you can use the `animate` method provided by the `HiddenLogoWidget`. You can pass the animation duration as an optional parameter.

```dart
HiddenLogoWidget(
  logo: Image.asset('assets/logo.png'),
).animate(Duration(milliseconds: 500))
```

### Platform-Specific Details

The `hidden_logo` package works seamlessly on both Android and iOS platforms. However, you need to make sure that you have the correct configuration in your `AndroidManifest.xml` file for Android and in your `Info.plist` file for iOS.

For Android, add the following line in your `AndroidManifest.xml` file:

```xml
<application
  ...
  android:icon="@mipmap/ic_launcher"
  ...>
```

For iOS, add the following line in your `Info.plist` file:

```xml
<key>CFBundleIconFiles</key>
<array>
  <string>Icon-App-60x60@2x</string>
  <string>Icon-App-60x60@3x</string>
</array>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:hidden_logo/hidden_logo.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Hidden Logo Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  bool _isLogoHidden = false;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Hidden Logo Demo'),
        leading: _isLogoHidden
            ? null
            : HiddenLogoWidget(
                logo: Image.asset('assets/logo.png'),
              ),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: () {
                setState(() {
                  _isLogoHidden = !_isLogoHidden;
                });
              },
              child: Text(_isLogoHidden ? 'Show Logo' : 'Hide Logo'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and sees the logo in the app bar.
// 2. The user clicks the "Hide Logo" button.
// 3. The logo is hidden, and the app bar is updated to remove the leading widget.
// 4. The user clicks the "Show Logo" button.
// 5. The logo is shown again, and the app bar is updated to include the leading widget.
// This flow demonstrates how to use the hidden_logo package to hide and show the app logo in the app bar.

// The code flow is as follows:
// 1. The MyApp widget is created and returned as the root of the app.
// 2. The MyHomePage widget is created and returned as the home page of the app.
// 3. The _MyHomePageState class is created to manage the state of the MyHomePage widget.
// 4. The build method of the _MyHomePageState class is called to build the UI of the MyHomePage widget.
// 5. The UI includes an app bar with a leading widget that is either the logo or null, depending on the state of the _isLogoHidden variable.
// 6. The UI also includes a button that toggles the state of the _isLogoHidden variable when clicked.
// 7. When the state of the _isLogoHidden variable changes, the build method is called again to update the UI.

```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

**Parent Child Checkbox Flutter Package**
=====================================

The `parent_child_checkbox` Flutter package is a useful library for creating nested checkboxes with parent-child relationships. It allows you to create a hierarchical structure of checkboxes where the state of the parent checkbox is determined by the state of its child checkboxes.

**When to Use**
---------------

This package is useful when you need to display a list of items with checkboxes and some of the items have sub-items that also need to be checked. For example, in a shopping app, you might have a list of categories with sub-categories, and you want to allow the user to select multiple categories and sub-categories.

**Features**
------------

*   Supports nested checkboxes with parent-child relationships
*   Automatically updates the state of the parent checkbox based on the state of its child checkboxes
*   Allows you to customize the appearance of the checkboxes and the layout of the list

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setup and Usage**
-------------------

To use the `parent_child_checkbox` package, follow these steps:

1.  Add the package to your `pubspec.yaml` file:

    ```yml
dependencies:
  flutter:
    sdk: flutter
  parent_child_checkbox: ^1.0.0
```

2.  Run `flutter pub get` to install the package.
3.  Import the package in your Dart file:

    ```dart
import 'package:parent_child_checkbox/parent_child_checkbox.dart';
```

4.  Create a list of `ParentChildCheckboxItem` objects to represent your data:

    ```dart
List<ParentChildCheckboxItem> items = [
  ParentChildCheckboxItem(
    id: 1,
    label: 'Parent 1',
    children: [
      ParentChildCheckboxItem(id: 11, label: 'Child 1'),
      ParentChildCheckboxItem(id: 12, label: 'Child 2'),
    ],
  ),
  ParentChildCheckboxItem(
    id: 2,
    label: 'Parent 2',
    children: [
      ParentChildCheckboxItem(id: 21, label: 'Child 3'),
      ParentChildCheckboxItem(id: 22, label: 'Child 4'),
    ],
  ),
];
```

5.  Use the `ParentChildCheckbox` widget to display the list of checkboxes:

    ```dart
ParentChildCheckbox(
  items: items,
  onChanged: (item, isChecked) {
    print('Item ${item.id} is ${isChecked ? 'checked' : 'unchecked'}');
  },
)
```

**Platform-Specific Details**
-----------------------------

This package works on both Android and iOS platforms. However, you may need to adjust the layout and appearance of the checkboxes to fit your specific design requirements.

**Configurations and Optimizations**
------------------------------------

You can customize the appearance of the checkboxes and the layout of the list by using the various properties provided by the `ParentChildCheckbox` widget, such as `checkboxColor`, `labelStyle`, and `itemPadding`.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:parent_child_checkbox/parent_child_checkbox.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Parent Child Checkbox Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  List<ParentChildCheckboxItem> _items = [
    ParentChildCheckboxItem(
      id: 1,
      label: 'Parent 1',
      children: [
        ParentChildCheckboxItem(id: 11, label: 'Child 1'),
        ParentChildCheckboxItem(id: 12, label: 'Child 2'),
      ],
    ),
    ParentChildCheckboxItem(
      id: 2,
      label: 'Parent 2',
      children: [
        ParentChildCheckboxItem(id: 21, label: 'Child 3'),
        ParentChildCheckboxItem(id: 22, label: 'Child 4'),
      ],
    ),
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Parent Child Checkbox Demo'),
      ),
      body: ParentChildCheckbox(
        items: _items,
        onChanged: (item, isChecked) {
          print('Item ${item.id} is ${isChecked ? 'checked' : 'unchecked'}');
        },
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app and is presented with a list of parent checkboxes.
// 2. When a parent checkbox is checked or unchecked, the state of its child checkboxes is updated accordingly.
// 3. When a child checkbox is checked or unchecked, the state of its parent checkbox is updated accordingly.
// 4. The user can select multiple parent and child checkboxes.
// 5. The state of each checkbox is printed to the console when it is changed.

// This code demonstrates the use of the ParentChildCheckbox widget to create a hierarchical structure of checkboxes.
// It shows how to customize the appearance of the checkboxes and the layout of the list.
// It also shows how to handle the state of each checkbox and update the state of its parent or child checkboxes accordingly.
```

<-- END_MAIN -->
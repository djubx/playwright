<-- START_DESCRIPTION -->

# Freezer Flutter Package: A High-Level Overview
=====================================================

The Freezer Flutter package is a powerful tool for managing state in Flutter applications. It provides a simple and efficient way to store and retrieve data, making it an ideal solution for a wide range of use cases.

### When to Use Freezer

Freezer is particularly useful when:

* You need to store complex data structures, such as lists or maps, and want to easily manage changes to that data.
* You want to decouple your data storage from your widget tree, making it easier to manage and update your app's state.
* You need to persist data across app restarts or device reboots.

### Key Features

* **Reactive data storage**: Freezer provides a reactive data storage solution, allowing you to easily manage changes to your data and update your app's UI in response.
* **Automatic data serialization**: Freezer automatically serializes and deserializes your data, making it easy to store and retrieve complex data structures.
* **Support for multiple data types**: Freezer supports a wide range of data types, including lists, maps, and custom objects.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using Freezer
=============================

### Adding Freezer to Your Project

To add Freezer to your Flutter project, simply add the following dependency to your `pubspec.yaml` file:
```yml
dependencies:
  freezer: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Basic Usage

To use Freezer, you'll need to create a `Freezer` instance and pass it a `Key` object that identifies the data you want to store. For example:
```dart
import 'package:freezer/freezer.dart';

class RealFlutter {
  final _freezer = Freezer('my_data_key');

  Future<void> _storeData() async {
    final data = {'name': 'John Doe', 'age': 30};
    await _freezer.put(data);
  }

  Future<void> _loadData() async {
    final data = await _freezer.get();
    print(data); // prints {name: John Doe, age: 30}
  }
}
```
### Platform-Specific Details

Freezer uses the `path_provider` package to store data on both Android and iOS. On Android, data is stored in the app's internal storage directory, while on iOS, data is stored in the app's documents directory.

### Configurations and Optimizations

Freezer provides several configuration options that can be used to optimize its performance. For example, you can use the `FreezerOptions` class to specify the maximum size of the data cache, or to enable/disable data compression.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:freezer/freezer.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Freezer Demo',
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final _freezer = Freezer('my_data_key');
  final _nameController = TextEditingController();
  final _ageController = TextEditingController();

  Future<void> _storeData() async {
    // Get the current values of the text fields
    final name = _nameController.text;
    final age = int.parse(_ageController.text);

    // Create a map to store the data
    final data = {'name': name, 'age': age};

    // Store the data using Freezer
    await _freezer.put(data);
  }

  Future<void> _loadData() async {
    // Load the data using Freezer
    final data = await _freezer.get();

    // Update the text fields with the loaded data
    _nameController.text = data['name'];
    _ageController.text = data['age'].toString();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Freezer Demo'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Column(
          children: [
            TextField(
              controller: _nameController,
              decoration: InputDecoration(labelText: 'Name'),
            ),
            TextField(
              controller: _ageController,
              decoration: InputDecoration(labelText: 'Age'),
              keyboardType: TextInputType.number,
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _storeData,
              child: Text('Store Data'),
            ),
            SizedBox(height: 10),
            ElevatedButton(
              onPressed: _loadData,
              child: Text('Load Data'),
            ),
          ],
        ),
      ),
    );
  }
}

// The app starts by creating a Freezer instance with a unique key.
// The user can then enter their name and age in the text fields.
// When the user clicks the "Store Data" button, the app stores the data using Freezer.
// When the user clicks the "Load Data" button, the app loads the data using Freezer and updates the text fields.
// The app uses a map to store the data, with the name and age as key-value pairs.
```

<-- END_MAIN -->
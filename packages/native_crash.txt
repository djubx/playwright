```markdown
<!-- START_DESCRIPTION -->
# Overview of the native_crash Flutter Package

The `native_crash` package is a Flutter plugin designed to help developers simulate native crashes in their applications. This can be particularly useful for testing error handling and crash reporting mechanisms in both Android and iOS applications. By intentionally causing a crash, developers can ensure that their app behaves as expected when faced with unexpected failures.

## When to Use This Package
- **Testing Crash Reporting**: Validate that your crash reporting tools (like Firebase Crashlytics) are correctly capturing crashes.
- **Error Handling**: Test how your application responds to native crashes and ensure that user experience remains intact.
- **Debugging**: Identify issues in your app by simulating crashes and observing the behavior.

## Key Features
- **Cross-Platform Support**: Works seamlessly on both Android and iOS.
- **Simulate Crashes**: Provides methods to trigger native crashes for testing purposes.
- **Easy Integration**: Simple setup and usage within existing Flutter applications.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the native_crash Package

## Installation
To get started with the `native_crash` package, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  native_crash: ^latest_version
```

Make sure to replace `^latest_version` with the latest version available on [pub.dev](https://pub.dev/packages/native_crash).

## Platform-Specific Configuration

### Android
1. Open your `android/app/build.gradle` file.
2. Ensure that the `minSdkVersion` is set to at least 21:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
        ...
    }
}
```

### iOS
1. Open your `ios/Runner/Info.plist` file.
2. Add the following key to allow crash reporting:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

## Usage
Once the package is installed and configured, you can start using it in your Flutter application. Hereâ€™s how to trigger a native crash:

```dart
import 'package:flutter/material.dart';
import 'package:native_crash/native_crash.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Native Crash Example')),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              // Trigger a native crash
              NativeCrash.crash();
            },
            child: Text('Crash the App'),
          ),
        ),
      ),
    );
  }
}
```

In this example, pressing the button will cause the app to crash, allowing you to test your crash reporting setup.

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of Using native_crash

```dart
import 'package:flutter/material.dart';
import 'package:native_crash/native_crash.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Native Crash Example')),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              // Trigger a native crash
              NativeCrash.crash();
            },
            child: Text('Crash the App'),
          ),
        ),
      ),
    );
  }
}

void main() {
  runApp(RealFlutter());
}

// Application Flow Explanation:
// 1. The app starts with the main() function, which calls runApp() to launch the RealFlutter widget.
// 2. The RealFlutter widget builds a MaterialApp with a Scaffold.
// 3. The Scaffold contains an AppBar with the title 'Native Crash Example'.
// 4. In the body of the Scaffold, a Center widget is used to center the content.
// 5. An ElevatedButton is created, which, when pressed, calls NativeCrash.crash().
// 6. This method simulates a native crash, allowing developers to test their crash reporting and error handling mechanisms.
// 7. The app will crash, and if crash reporting is set up correctly, the crash details will be sent to the configured service.
```
<!-- END_MAIN -->
``` 

In summary, the `native_crash` package is a powerful tool for Flutter developers looking to test their applications' resilience against crashes. By following the setup and usage instructions provided, you can easily integrate this package into your projects and ensure that your error handling mechanisms are robust and effective.
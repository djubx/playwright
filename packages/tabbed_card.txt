# Tabbed Card Flutter Package

<!-- START_DESCRIPTION -->
## Description

The `tabbed_card` Flutter package is a versatile UI component that allows developers to create tabbed card interfaces with ease. This package is particularly useful for applications that require a clean and organized way to display related content, such as user profiles, product details, or settings. By utilizing tabs, users can quickly switch between different views without cluttering the interface.

### Key Features:
- **Customizable Tabs**: Easily create and style tabs to match your application's theme.
- **Responsive Design**: The package is designed to work seamlessly across different screen sizes and orientations.
- **Smooth Transitions**: Provides smooth animations when switching between tabs, enhancing user experience.
- **Flexible Content**: Supports various types of content within each tab, including text, images, and custom widgets.

### When to Use:
- When you need to display multiple related views in a compact space.
- For applications that require a clean and organized layout, such as dashboards or settings pages.
- When you want to enhance user experience with smooth transitions and customizable designs.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
## Tutorial

### Installation

To use the `tabbed_card` package in your Flutter project, you need to add it to your `pubspec.yaml` file. Open the file and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  tabbed_card: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command in your terminal to install the package:

```bash
flutter pub get
```

### Platform-Specific Details

#### Android
No specific configurations are required for Android. Just ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file.

#### iOS
For iOS, ensure that you have the correct permissions set in your `Info.plist` file if your tabs will access any device features. However, for basic usage of `tabbed_card`, no additional configurations are necessary.

### Basic Usage

To use the `tabbed_card` package, you need to import it into your Dart file:

```dart
import 'package:tabbed_card/tabbed_card.dart';
```

You can then create a simple tabbed card interface as follows:

```dart
TabbedCard(
  tabs: [
    Tab(text: 'Tab 1'),
    Tab(text: 'Tab 2'),
  ],
  children: [
    Center(child: Text('Content for Tab 1')),
    Center(child: Text('Content for Tab 2')),
  ],
);
```

This code snippet creates a basic tabbed card with two tabs, each displaying different content.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
## Complete Example

```dart
import 'package:flutter/material.dart';
import 'package:tabbed_card/tabbed_card.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Tabbed Card Example',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Tabbed Card Example'),
        ),
        body: TabbedCard(
          // Define the tabs for the tabbed card
          tabs: [
            Tab(text: 'Tab 1'), // First tab
            Tab(text: 'Tab 2'), // Second tab
            Tab(text: 'Tab 3'), // Third tab
          ],
          // Define the content for each tab
          children: [
            Center(child: Text('Content for Tab 1')), // Content for Tab 1
            Center(child: Text('Content for Tab 2')), // Content for Tab 2
            Center(child: Text('Content for Tab 3')), // Content for Tab 3
          ],
        ),
      ),
    );
  }
}

// The application starts by running the main function, which initializes the RealFlutter widget.
// The RealFlutter widget builds a MaterialApp with a title and a Scaffold.
// The Scaffold contains an AppBar with the title 'Tabbed Card Example'.
// The body of the Scaffold is a TabbedCard widget, which takes a list of tabs and corresponding content.
// Each tab is defined with a Tab widget, and the content for each tab is defined in the children list.
// When a user taps on a tab, the corresponding content is displayed in the center of the screen.
```

<!-- END_MAIN -->

### Summary of Application Flow
// The application starts by running the main function, which initializes the RealFlutter widget.
// The RealFlutter widget builds a MaterialApp with a title and a Scaffold.
// The Scaffold contains an AppBar with the title 'Tabbed Card Example'.
// The body of the Scaffold is a TabbedCard widget, which takes a list of tabs and corresponding content.
// Each tab is defined with a Tab widget, and the content for each tab is defined in the children list.
// When a user taps on a tab, the corresponding content is displayed in the center of the screen. 

This example demonstrates how to create a simple tabbed card interface using the `tabbed_card` package, showcasing its key features and ease of use.
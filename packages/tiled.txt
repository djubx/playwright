```markdown
<!-- START_DESCRIPTION -->
# Tiled Flutter Package: A Comprehensive Overview

The **tiled** Flutter package is a powerful tool designed for developers who want to integrate Tiled Map Editor maps into their Flutter applications. Tiled is a popular open-source map editor that allows users to create 2D tile maps for games and applications. The **tiled** package provides a straightforward way to load and render these maps, making it an excellent choice for game developers and anyone looking to create visually rich applications.

## When to Use the Tiled Package
- **Game Development**: Ideal for 2D games where tile-based maps are essential.
- **Interactive Applications**: Useful for applications that require a grid-based layout or map-like interface.
- **Prototyping**: Quickly visualize layouts and designs using Tiled maps.

## Key Features
- **Map Loading**: Easily load maps created in Tiled.
- **Tile Rendering**: Render tiles efficiently with support for various tile sizes.
- **Layer Support**: Handle multiple layers, including tile layers, object layers, and image layers.
- **Collision Detection**: Basic support for collision detection with objects defined in Tiled.

The **tiled** package simplifies the process of integrating Tiled maps into Flutter applications, allowing developers to focus on building engaging experiences without getting bogged down in the details of map rendering.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tiled Flutter Package: Setup and Usage Tutorial

## Installation
To get started with the **tiled** package, you need to add it to your Flutter project. Open your `pubspec.yaml` file and add the following dependency:

```yaml
dependencies:
  tiled: ^latest_version
```

Make sure to replace `latest_version` with the most recent version of the package available on [pub.dev](https://pub.dev/packages/tiled).

## Platform-Specific Configuration
### Android
For Android, ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

### iOS
For iOS, you may need to configure your `Info.plist` to allow for any necessary permissions, especially if your maps include external resources.

## Basic Usage
Once you have installed the package, you can start using it in your Flutter application. Hereâ€™s a simple example of how to load and display a Tiled map.

1. Import the package in your Dart file:

```dart
import 'package:tiled/tiled.dart';
```

2. Create a class that extends `StatefulWidget` to manage the map state.

3. Load the map in the `initState` method and render it in the `build` method.

This setup will allow you to display a Tiled map in your Flutter application seamlessly.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using the Tiled Package

```dart
import 'package:flutter/material.dart';
import 'package:tiled/tiled.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  late TiledMap _map; // Declare a variable to hold the Tiled map
  late TiledMapRenderer _renderer; // Declare a renderer for the map

  @override
  void initState() {
    super.initState();
    // Load the Tiled map from the assets
    _loadMap();
  }

  Future<void> _loadMap() async {
    // Load the map file (ensure the file is in your assets)
    _map = await TiledMap.load('assets/my_map.tmx');
    // Initialize the renderer with the loaded map
    _renderer = TiledMapRenderer(map: _map);
    // Call setState to rebuild the widget with the loaded map
    setState(() {});
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Tiled Map Example')),
        body: _renderer != null // Check if the renderer is initialized
            ? CustomPaint(
                painter: _renderer, // Use the renderer to paint the map
                child: Container(),
              )
            : Center(child: CircularProgressIndicator()), // Show loading indicator while the map is loading
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function starts the app by running the RealFlutter widget.
// 2. RealFlutter is a StatefulWidget that manages the state of the Tiled map.
// 3. In the initState method, the _loadMap function is called to load the Tiled map.
// 4. The _loadMap function loads the map from the assets and initializes the TiledMapRenderer.
// 5. Once the map is loaded, setState is called to trigger a rebuild of the widget.
// 6. In the build method, if the renderer is initialized, it uses CustomPaint to render the map.
// 7. If the map is still loading, a CircularProgressIndicator is displayed to inform the user.
```
<!-- END_MAIN -->
```

This structured blog post provides a comprehensive overview of the **tiled** Flutter package, guiding developers through its features, setup, and practical usage with a complete example.
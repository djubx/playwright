```markdown
<-- START_DESCRIPTION -->

# Floating Navbar Flutter Package

The `floating_navbar` Flutter package is a versatile and customizable navigation bar widget that provides a modern and sleek floating effect. This package is particularly useful for applications that require a bottom navigation bar with a floating design, offering a more dynamic and visually appealing user interface.

## When to Use

- **Modern UI Design**: When you want to implement a modern and stylish navigation bar that stands out.
- **Space Efficiency**: Ideal for apps that need to maximize screen space while still providing easy navigation.
- **Customizability**: Perfect for developers who need a highly customizable navigation bar to match their app's theme.

## Features

- **Floating Effect**: The navigation bar appears to float above the content, providing a unique visual effect.
- **Customizable Icons and Labels**: Easily change icons, labels, and colors to fit your app's design.
- **Responsive Design**: Adapts to different screen sizes and orientations.
- **Easy Integration**: Simple to set up and integrate into existing Flutter applications.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up Floating Navbar

In this tutorial, we will walk through the process of setting up the `floating_navbar` package in a Flutter project. We will cover platform-specific configurations for both Android and iOS.

## Step 1: Add Dependency

First, add the `floating_navbar` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  floating_navbar: ^1.0.0
```

Run `flutter pub get` to install the package.

## Step 2: Basic Setup

Create a new Flutter widget using the `RealFlutter` class as the main widget. Import the package at the top of your Dart file:

```dart
import 'package:floating_navbar/floating_navbar.dart';
```

## Step 3: Platform-Specific Configurations

### Android

Ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```gradle
android {
    defaultConfig {
        minSdkVersion 21
    }
}
```

### iOS

For iOS, ensure that your `Info.plist` is configured to support the necessary UI features. No specific changes are required for this package, but ensure your deployment target is set to iOS 9.0 or higher.

## Step 4: Implementing the Navbar

Use the `FloatingNavbar` widget within your `RealFlutter` class to create a floating navigation bar. Customize it with icons, labels, and actions as needed.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:floating_navbar/floating_navbar.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        body: HomeScreen(),
        bottomNavigationBar: FloatingNavbar(
          items: [
            FloatingNavbarItem(icon: Icons.home, title: 'Home'),
            FloatingNavbarItem(icon: Icons.search, title: 'Search'),
            FloatingNavbarItem(icon: Icons.settings, title: 'Settings'),
          ],
          onTap: (int val) {
            // Handle item tap
          },
        ),
      ),
    );
  }
}

class HomeScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Center(
      child: Text('Welcome to RealFlutter!'),
    );
  }
}

// Application Flow:
// 1. The `main` function initializes the app by running `RealFlutter`.
// 2. `RealFlutter` is a stateless widget that sets up the MaterialApp.
// 3. The `Scaffold` widget is used to create the basic visual layout.
// 4. `HomeScreen` is the main content of the app, displaying a welcome message.
// 5. `FloatingNavbar` is used as the `bottomNavigationBar` of the `Scaffold`.
// 6. The navbar contains three items: Home, Search, and Settings.
// 7. The `onTap` callback is triggered when a navbar item is tapped, allowing for navigation or other actions.

```

<-- END_MAIN -->
```
<-- START_DESCRIPTION -->

Extended Text Library Flutter Package
=====================================

The `extended_text_library` package is a powerful text library for Flutter that provides a range of features for working with text, including text selection, highlighting, and formatting. It is designed to be highly customizable and can be used to create a wide range of text-based user interfaces.

When to Use This Package
------------------------

This package is ideal for any Flutter app that requires advanced text features, such as:

* Text editors or word processors
* Chat or messaging apps
* Text-based games
* Educational apps

Features
--------

* Text selection and highlighting
* Text formatting (bold, italic, underline, etc.)
* Customizable text styles and fonts
* Support for emojis and special characters
* Platform-specific optimizations for Android and iOS

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
---------------

To use the `extended_text_library` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  extended_text_library: ^1.0.0
```
2. Import the package in your Dart file:
```dart
import 'package:extended_text_library/extended_text_library.dart';
```
3. Create a `RealFlutter` widget and use the `ExtendedText` widget to display text:
```dart
class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: ExtendedText(
        'Hello, World!',
        style: TextStyle(fontSize: 24),
      ),
    );
  }
}
```
Platform-Specific Details
-------------------------

### Android

* To use the `extended_text_library` package on Android, you need to add the following configuration to your `AndroidManifest.xml` file:
```xml
<application
  ...
  android:hardwareAccelerated="true"
  ...
>
```
* You also need to add the following dependency to your `build.gradle` file:
```groovy
dependencies {
  implementation 'androidx.appcompat:appcompat:1.2.0'
}
```
### iOS

* To use the `extended_text_library` package on iOS, you need to add the following configuration to your `Info.plist` file:
```xml
<key>UIAppFonts</key>
<array>
  <string>Fonts/your_font.ttf</string>
</array>
```
* You also need to add the following dependency to your `Podfile`:
```ruby
pod 'extended_text_library'
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:extended_text_library/extended_text_library.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Create a controller to manage the text selection
  final _textController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Extended Text Library Demo'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            // Display the text using the ExtendedText widget
            ExtendedText(
              _textController.text,
              style: TextStyle(fontSize: 24),
              // Enable text selection
              selectionEnabled: true,
              // Customize the text selection style
              selectionStyle: TextStyle(
                backgroundColor: Colors.blue,
                color: Colors.white,
              ),
            ),
            SizedBox(height: 16),
            // Add a button to toggle the text selection
            ElevatedButton(
              onPressed: () {
                setState(() {
                  _textController.text = _textController.text.isEmpty
                      ? 'Hello, World!'
                      : '';
                });
              },
              child: Text('Toggle Text Selection'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and sees the text "Hello, World!" displayed on the screen.
// 2. The user can select the text by long-pressing on it.
// 3. Once the text is selected, the user can customize the text selection style by changing the background color and text color.
// 4. The user can toggle the text selection on and off by pressing the "Toggle Text Selection" button.
// 5. When the text selection is toggled off, the text is no longer selectable.
```

// The code above demonstrates the key features of the `extended_text_library` package, including text selection, customization, and toggling. The application flow is straightforward and easy to follow, making it a great example of how to use this package in a real-world app.
```markdown
<!-- START_DESCRIPTION -->
# Extended Text Library: A Comprehensive Overview

The **extended_text_library** is a powerful Flutter package designed to enhance text rendering capabilities in your applications. It provides advanced features such as text selection, text styling, and the ability to handle rich text formats, making it an excellent choice for applications that require sophisticated text handling.

## When to Use This Package
You might consider using the extended_text_library in scenarios such as:
- Building chat applications where users can send formatted messages.
- Creating note-taking apps that require rich text editing features.
- Developing any application that needs advanced text manipulation and display.

## Key Features
- **Rich Text Support**: Easily display text with different styles, colors, and fonts.
- **Text Selection**: Users can select, copy, and interact with text.
- **Custom Text Widgets**: Create custom text widgets that can handle various text formats.
- **Performance Optimizations**: Designed to handle large amounts of text efficiently.

The extended_text_library is a versatile tool that can significantly enhance the text handling capabilities of your Flutter applications.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Extended Text Library

## Installation
To get started with the extended_text_library, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  extended_text_library: ^latest_version
```

Make sure to replace `^latest_version` with the most recent version available on [pub.dev](https://pub.dev/packages/extended_text_library).

## Platform-Specific Configuration
### Android
For Android, ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

### iOS
For iOS, you may need to enable certain permissions in your `Info.plist` if your app requires specific functionalities related to text handling.

## Basic Usage
To use the extended_text_library, you can create a simple Flutter application that utilizes its features. Below is a basic example of how to implement it.

1. Import the package in your Dart file:

```dart
import 'package:extended_text_library/extended_text_library.dart';
```

2. Use the `ExtendedText` widget to display rich text:

```dart
ExtendedText(
  'This is an example of extended text.',
  specialTextSpanBuilder: MySpecialTextSpanBuilder(),
)
```

3. Implement your custom text span builder if needed to handle special text formats.

This setup will allow you to leverage the extended text capabilities in your Flutter application.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Extended Text Library

```dart
import 'package:flutter/material.dart';
import 'package:extended_text_library/extended_text_library.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Extended Text Library Example',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Extended Text Example'),
        ),
        body: Center(
          child: ExtendedText(
            'This is an example of using the extended text library. '
            'You can add special text like [bold] and [italic] easily.',
            specialTextSpanBuilder: MySpecialTextSpanBuilder(),
            // Using the custom text span builder to handle special text formats
          ),
        ),
      ),
    );
  }
}

// Custom text span builder to handle special text formats
class MySpecialTextSpanBuilder extends SpecialTextSpanBuilder {
  @override
  SpecialTextSpan build(String text, {TextStyle? textStyle}) {
    // Check for special text patterns and apply styles accordingly
    if (text.startsWith('[bold]') && text.endsWith('[/bold]')) {
      return SpecialTextSpan(
        text: text.substring(6, text.length - 7),
        textStyle: textStyle?.copyWith(fontWeight: FontWeight.bold),
      );
    } else if (text.startsWith('[italic]') && text.endsWith('[/italic]')) {
      return SpecialTextSpan(
        text: text.substring(8, text.length - 9),
        textStyle: textStyle?.copyWith(fontStyle: FontStyle.italic),
      );
    }
    return SpecialTextSpan(text: text, textStyle: textStyle);
  }
}

// Application Flow Explanation:
// 1. The main function initializes the Flutter app by calling runApp with RealFlutter.
// 2. RealFlutter is a StatelessWidget that builds the MaterialApp.
// 3. The MaterialApp contains a Scaffold with an AppBar and a Center widget.
// 4. Inside the Center widget, an ExtendedText widget is used to display text.
// 5. The ExtendedText widget utilizes MySpecialTextSpanBuilder to handle special text formats.
// 6. MySpecialTextSpanBuilder checks for specific patterns in the text and applies the corresponding styles.
// 7. The application displays formatted text based on the defined rules in the custom text span builder.
```
<!-- END_MAIN -->
```

This structured blog post provides a comprehensive overview of the `extended_text_library` package, guiding developers through its features, setup, and practical usage with a complete example.
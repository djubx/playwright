<-- START_DESCRIPTION -->

# Niddler Dart Package Overview
=====================================

The `niddler_dart` package is a powerful tool for Flutter developers, providing a simple and efficient way to inspect and debug HTTP requests and responses. It allows developers to easily monitor and analyze network traffic, making it an essential tool for identifying and resolving issues related to network communication.

### When to Use Niddler Dart

Niddler Dart is particularly useful in the following scenarios:

* Debugging network issues: Use Niddler Dart to inspect HTTP requests and responses, helping you identify issues related to network communication.
* Testing API integrations: Verify that your app is sending and receiving data correctly, and identify any issues related to API integrations.
* Optimizing network performance: Use Niddler Dart to analyze network traffic and identify areas for optimization, improving your app's overall performance.

### Key Features

* Inspect HTTP requests and responses
* Monitor network traffic in real-time
* Analyze request and response headers, bodies, and query parameters
* Identify and debug network issues
* Test API integrations and verify data correctness

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up Niddler Dart
==========================

To use Niddler Dart in your Flutter project, follow these steps:

### Step 1: Add the Niddler Dart Package

Add the `niddler_dart` package to your `pubspec.yaml` file:
```yml
dependencies:
  niddler_dart: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the `niddler_dart` package in your Dart file:
```dart
import 'package:niddler_dart/niddler_dart.dart';
```
### Step 3: Initialize Niddler Dart

Initialize Niddler Dart in your app's `main` function:
```dart
void main() {
  NiddlerDart.init();
  runApp(MyApp());
}
```
### Platform-Specific Configurations

#### Android

To use Niddler Dart on Android, add the following configuration to your `AndroidManifest.xml` file:
```xml
<application
    ...
    android:networkSecurityConfig="@xml/network_security_config"
    ...>
</application>
```
Create a new file `network_security_config.xml` in your app's `res/xml` directory:
```xml
<?xml version="1.0" encoding="utf-8"?>
<network-security-config>
    <base-config cleartextTrafficPermitted="true">
        <trust-anchors>
            <certificates src="system" />
        </trust-anchors>
    </base-config>
</network-security-config>
```
#### iOS

To use Niddler Dart on iOS, add the following configuration to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:niddler_dart/niddler_dart.dart';

void main() {
  NiddlerDart.init();
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Create a new Niddler Dart instance
    final niddler = NiddlerDart();

    // Send a GET request to the specified URL
    niddler.get('https://example.com/api/data')
      .then((response) {
        // Print the response headers
        print(response.headers);

        // Print the response body
        print(response.body);
      })
      .catchError((error) {
        // Print any errors that occur
        print(error);
      });

    // Send a POST request to the specified URL
    niddler.post('https://example.com/api/data',
      headers: {
        'Content-Type': 'application/json',
      },
      body: {
        'key': 'value',
      },
    )
      .then((response) {
        // Print the response headers
        print(response.headers);

        // Print the response body
        print(response.body);
      })
      .catchError((error) {
        // Print any errors that occur
        print(error);
      });

    return MaterialApp(
      title: 'Real Flutter',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Real Flutter'),
        ),
        body: Center(
          child: Text('Hello, World!'),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The app initializes Niddler Dart in the main function.
// 2. The RealFlutter widget is created, which sends a GET request to the specified URL using Niddler Dart.
// 3. The response headers and body are printed to the console.
// 4. A POST request is sent to the specified URL using Niddler Dart.
// 5. The response headers and body are printed to the console.
// 6. Any errors that occur during the requests are printed to the console.
// 7. The app displays a simple UI with a title and a centered text element.

// In summary, this code demonstrates how to use Niddler Dart to send HTTP requests and print the responses in a Flutter app.
```

<-- END_MAIN -->
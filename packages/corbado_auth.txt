<-- START_DESCRIPTION -->

# Corbado Auth Flutter Package
================================

The Corbado Auth Flutter package provides a simple and secure way to authenticate users in your Flutter application. It supports multiple authentication providers, including email/password, Google, Facebook, and more.

## When to Use
--------------

Use the Corbado Auth package when you need to authenticate users in your Flutter application. This package is ideal for applications that require a simple and secure authentication system.

## Features
------------

*   Supports multiple authentication providers (email/password, Google, Facebook, etc.)
*   Simple and secure authentication system
*   Easy to integrate with your existing Flutter application

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

## Setup
--------

To use the Corbado Auth package, you need to add it to your `pubspec.yaml` file:

```yml
dependencies:
  corbado_auth: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Android Configuration
----------------------

To use the Corbado Auth package on Android, you need to add the following configuration to your `android/app/build.gradle` file:

```groovy
android {
    defaultConfig {
        // ...
        manifestPlaceholders = [
            'appAuthRedirectScheme': 'com.example.app'
        ]
    }
}
```

## iOS Configuration
-------------------

To use the Corbado Auth package on iOS, you need to add the following configuration to your `ios/Runner/Info.plist` file:

```xml
<key>CFBundleURLTypes</key>
<array>
    <dict>
        <key>CFBundleTypeRole</key>
        <string>Editor</string>
        <key>CFBundleURLSchemes</key>
        <array>
            <string>com.example.app</string>
        </array>
    </dict>
</array>
```

## Usage
-----

To use the Corbado Auth package, you need to create an instance of the `CorbadoAuth` class:

```dart
import 'package:corbado_auth/corbado_auth.dart';

class RealFlutter {
  final CorbadoAuth _auth = CorbadoAuth();

  Future<void> signInWithEmailAndPassword(String email, String password) async {
    try {
      await _auth.signInWithEmailAndPassword(email, password);
    } catch (e) {
      print(e);
    }
  }

  Future<void> signOut() async {
    try {
      await _auth.signOut();
    } catch (e) {
      print(e);
    }
  }
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:corbado_auth/corbado_auth.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Corbado Auth Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final RealFlutter _realFlutter = RealFlutter();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Corbado Auth Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: () async {
                await _realFlutter.signInWithEmailAndPassword('email@example.com', 'password');
              },
              child: Text('Sign In'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () async {
                await _realFlutter.signOut();
              },
              child: Text('Sign Out'),
            ),
          ],
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user opens the app and is presented with a sign in button.
// 2. When the user clicks the sign in button, the `signInWithEmailAndPassword` method is called.
// 3. The `signInWithEmailAndPassword` method uses the Corbado Auth package to authenticate the user.
// 4. If the authentication is successful, the user is signed in and can access the app's features.
// 5. When the user clicks the sign out button, the `signOut` method is called.
// 6. The `signOut` method uses the Corbado Auth package to sign the user out.
```

// Summary: The Corbado Auth package provides a simple and secure way to authenticate users in your Flutter application. This demo app shows how to use the package to sign in and sign out users. The app uses the `RealFlutter` class to handle the authentication logic, and the `MyHomePage` widget to display the sign in and sign out buttons. When the user clicks the sign in button, the `signInWithEmailAndPassword` method is called, and when the user clicks the sign out button, the `signOut` method is called.

<-- END_MAIN -->
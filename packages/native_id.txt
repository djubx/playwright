```markdown
<!-- START_DESCRIPTION -->
# Overview of the native_id Flutter Package

The `native_id` package is a Flutter plugin designed to provide a unique identifier for each device. This identifier can be used for various purposes, such as user tracking, analytics, and ensuring that each installation of your app can be uniquely identified. 

## When to Use `native_id`
- **User Tracking**: When you need to track user behavior across sessions or installations.
- **Analytics**: To send device-specific data to analytics services.
- **Unique Identifiers**: When you need a unique ID for each device for features like push notifications or user accounts.

## Key Features
- **Device Identifier**: Generates a unique identifier for the device.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS.
- **Persistent ID**: The ID remains the same across app reinstalls unless the app data is cleared.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Setting Up and Using the native_id Package

## Installation
To use the `native_id` package, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  native_id: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run `flutter pub get` to install the package.

## Platform-Specific Configuration

### Android
1. Ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:
   ```groovy
   android {
       ...
       defaultConfig {
           ...
           minSdkVersion 21
           ...
       }
   }
   ```

### iOS
1. Open your `ios/Runner/Info.plist` file and add the following permission:
   ```xml
   <key>NSPhotoLibraryUsageDescription</key>
   <string>This app requires access to the photo library.</string>
   ```

## Using the Package
To use the `native_id` package, you can import it into your Dart file and call the methods provided by the package to retrieve the device ID.

```dart
import 'package:native_id/native_id.dart';

void main() async {
  // Initialize the package
  final String deviceId = await NativeId.getId();
  print("Device ID: $deviceId");
}
```

This code snippet initializes the package and retrieves the unique device ID, which can then be used as needed in your application.

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of Using native_id

```dart
import 'package:flutter/material.dart';
import 'package:native_id/native_id.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Native ID Example',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Native ID Example'),
        ),
        body: Center(
          child: FutureBuilder<String>(
            // Using FutureBuilder to handle asynchronous data fetching
            future: NativeId.getId(), // Fetching the device ID
            builder: (context, snapshot) {
              if (snapshot.connectionState == ConnectionState.waiting) {
                // While waiting for the device ID, show a loading indicator
                return CircularProgressIndicator();
              } else if (snapshot.hasError) {
                // If there is an error, display it
                return Text('Error: ${snapshot.error}');
              } else {
                // Once the device ID is retrieved, display it
                return Text('Device ID: ${snapshot.data}');
              }
            },
          ),
        ),
      ),
    );
  }
}
```

// The above code defines a simple Flutter application that demonstrates the use of the native_id package.
// 1. The app starts by running the RealFlutter widget.
// 2. Inside the RealFlutter widget, a MaterialApp is created with a title and a Scaffold.
// 3. The body of the Scaffold contains a Center widget that holds a FutureBuilder.
// 4. The FutureBuilder is used to asynchronously fetch the device ID using NativeId.getId().
// 5. While waiting for the device ID, a CircularProgressIndicator is shown.
// 6. If an error occurs during the fetching process, it displays the error message.
// 7. Once the device ID is successfully retrieved, it is displayed in a Text widget.

```
<!-- END_MAIN -->
``` 

This structured approach provides a comprehensive understanding of the `native_id` package, guiding developers through its features, setup, and practical usage in a Flutter application.
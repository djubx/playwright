<-- START_DESCRIPTION -->

# Sliding Top Panel Flutter Package
=====================================

The `sliding_top_panel` Flutter package provides a customizable, animated top panel that can be used to display additional content or navigation options. It is a useful tool for developers who want to create a visually appealing and user-friendly interface.

### When to Use This Package

This package is ideal for situations where you need to display additional content or navigation options, but don't want to clutter the main screen. Some examples of when to use this package include:

* Displaying a search bar or filter options
* Providing additional navigation options or shortcuts
* Displaying a notification or alert message
* Creating a customizable toolbar or action bar

### Features

The `sliding_top_panel` package offers the following features:

* Customizable panel height and width
* Animated panel opening and closing
* Support for multiple panel states (e.g. open, closed, and partially open)
* Optional panel title and subtitle
* Support for adding custom widgets to the panel

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Sliding Top Panel Package
===========================================================

### Step 1: Add the Package to Your Project

To use the `sliding_top_panel` package, you need to add it to your project's `pubspec.yaml` file. Open the file and add the following line:
```yml
dependencies:
  flutter:
    sdk: flutter
  sliding_top_panel: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

In your Dart file, import the `sliding_top_panel` package:
```dart
import 'package:sliding_top_panel/sliding_top_panel.dart';
```
### Step 3: Create a Sliding Top Panel

To create a sliding top panel, you need to create a `SlidingTopPanel` widget and pass it a `child` widget that will be displayed inside the panel. For example:
```dart
SlidingTopPanel(
  child: Container(
    height: 200,
    child: Center(
      child: Text('Hello, World!'),
    ),
  ),
)
```
### Step 4: Customize the Panel

You can customize the panel by passing additional properties to the `SlidingTopPanel` constructor. For example, you can set the panel's height and width:
```dart
SlidingTopPanel(
  height: 300,
  width: 400,
  child: Container(
    height: 200,
    child: Center(
      child: Text('Hello, World!'),
    ),
  ),
)
```
### Platform-Specific Details

The `sliding_top_panel` package works on both Android and iOS platforms. However, there are some platform-specific details to keep in mind:

* On Android, the panel will be displayed above the status bar. To avoid this, you can set the `statusBarHeight` property to the height of the status bar.
* On iOS, the panel will be displayed below the status bar. To avoid this, you can set the `statusBarHeight` property to 0.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:sliding_top_panel/sliding_top_panel.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Sliding Top Panel Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Sliding Top Panel Demo'),
      ),
      body: SlidingTopPanel(
        // Set the panel's height
        height: 300,
        // Set the panel's width
        width: 400,
        // Set the panel's title
        title: Text('Panel Title'),
        // Set the panel's subtitle
        subtitle: Text('Panel Subtitle'),
        // Set the panel's child widget
        child: Container(
          height: 200,
          child: Center(
            child: Text('Hello, World!'),
          ),
        ),
      ),
    );
  }
}
```

// The app starts by running the `main` function, which creates a `MaterialApp` widget.
// The `MaterialApp` widget is the root widget of the app, and it provides a basic material design visual layout structure.
// The `home` property of the `MaterialApp` widget is set to `MyHomePage`, which is a stateful widget that represents the app's home page.
// The `MyHomePage` widget creates a `Scaffold` widget, which provides a basic material design visual layout structure.
// The `appBar` property of the `Scaffold` widget is set to an `AppBar` widget, which displays the app's title.
// The `body` property of the `Scaffold` widget is set to a `SlidingTopPanel` widget, which displays a sliding top panel.
// The `SlidingTopPanel` widget is customized by setting its height, width, title, subtitle, and child widget.

<-- END_MAIN -->
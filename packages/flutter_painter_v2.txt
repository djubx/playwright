<-- START_DESCRIPTION -->

# Flutter Painter V2 Package Overview
=====================================

The `flutter_painter_v2` package is a powerful and flexible drawing library for Flutter applications. It provides a wide range of features and tools for creating custom graphics, from simple shapes to complex illustrations.

### When to Use This Package

This package is ideal for applications that require custom graphics, such as:

* Drawing and painting apps
* Graphic design tools
* Educational apps that teach drawing and art
* Games that require custom graphics

### Key Features

* Support for various shapes, including lines, curves, and polygons
* Customizable brush sizes, colors, and textures
* Undo and redo functionality
* Zoom and pan capabilities
* Export drawings as images

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the Flutter Painter V2 Package
=====================================================

### Step 1: Add the Package to Your Project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_painter_v2: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:flutter_painter_v2/flutter_painter_v2.dart';
```
### Step 3: Create a Painter

Create a `Painter` object and pass it to a `CustomPaint` widget:
```dart
Painter _painter = Painter();

@override
Widget build(BuildContext context) {
  return CustomPaint(
    painter: _painter,
    child: Container(
      width: 400,
      height: 400,
    ),
  );
}
```
### Step 4: Configure the Painter

Configure the painter by setting its properties, such as brush size and color:
```dart
_painter.brushSize = 10;
_painter.brushColor = Colors.red;
```
### Platform-Specific Details

* On Android, you may need to add the following line to your `AndroidManifest.xml` file:
```xml
<uses-feature android:name="android.hardware.touchscreen" android:required="true" />
```
* On iOS, you may need to add the following line to your `Info.plist` file:
```xml
<key>UIRequiresFullScreen</key>
<true/>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_painter_v2/flutter_painter_v2.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Painter V2 Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  Painter _painter = Painter();

  @override
  void initState() {
    super.initState();
    _painter.brushSize = 10;
    _painter.brushColor = Colors.red;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Painter V2 Demo'),
      ),
      body: Center(
        child: CustomPaint(
          painter: _painter,
          child: Container(
            width: 400,
            height: 400,
          ),
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          setState(() {
            _painter.undo();
          });
        },
        tooltip: 'Undo',
        child: Icon(Icons.undo),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user interacts with the CustomPaint widget, drawing on the screen.
// 2. The Painter object records the user's actions, storing the drawing data.
// 3. When the user presses the Undo button, the Painter object reverts to its previous state.
// 4. The CustomPaint widget is updated, reflecting the new state of the Painter object.
// 5. The user can continue drawing, and the process repeats.

// This code demonstrates the basic functionality of the Flutter Painter V2 package.
// It shows how to create a Painter object, configure it, and use it with a CustomPaint widget.
// It also shows how to implement undo functionality using the Painter object's undo method.
```

<-- END_MAIN -->
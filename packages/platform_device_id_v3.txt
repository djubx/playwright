<-- START_DESCRIPTION -->

# platform_device_id_v3 Flutter Package
=====================================

The `platform_device_id_v3` Flutter package provides a simple way to retrieve the device ID of a mobile device. This package is useful when you need to uniquely identify a device, such as for authentication or tracking purposes.

### Features

* Retrieves the device ID of a mobile device
* Supports both Android and iOS platforms
* Easy to use and integrate into your Flutter app

### When to Use

You can use this package in the following scenarios:

* Authentication: Use the device ID as a unique identifier for authentication purposes.
* Tracking: Use the device ID to track user behavior or app usage.
* Data storage: Use the device ID to store data locally on the device.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
================

To use the `platform_device_id_v3` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  platform_device_id_v3: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:platform_device_id_v3/platform_device_id_v3.dart';
```
### Step 3: Retrieve the Device ID

Use the `getDeviceId()` method to retrieve the device ID:
```dart
String deviceId = await PlatformDeviceId.getDeviceId();
```
### Platform-Specific Details

* Android: The device ID is retrieved using the `Settings.Secure.ANDROID_ID` property.
* iOS: The device ID is retrieved using the `UIDevice.currentDevice().identifierForVendor` property.

### Configurations and Optimizations

* Make sure to handle any errors that may occur when retrieving the device ID.
* You can use the `getDeviceId()` method in a `try-catch` block to handle any exceptions.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:platform_device_id_v3/platform_device_id_v3.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Device ID Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  String _deviceId = '';

  @override
  void initState() {
    super.initState();
    _getDeviceId();
  }

  Future<void> _getDeviceId() async {
    // Step 1: Retrieve the device ID using the getDeviceId() method
    String deviceId = await PlatformDeviceId.getDeviceId();

    // Step 2: Set the device ID to the _deviceId variable
    setState(() {
      _deviceId = deviceId;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Device ID Demo'),
      ),
      body: Center(
        child: Text('Device ID: $_deviceId'),
      ),
    );
  }
}

// Application flow:
// 1. The app starts and the MyApp widget is created.
// 2. The MyApp widget builds the MyHomePage widget.
// 3. The MyHomePage widget retrieves the device ID using the _getDeviceId() method.
// 4. The device ID is set to the _deviceId variable.
// 5. The MyHomePage widget displays the device ID on the screen.

// Final summary:
// The code flows by first retrieving the device ID using the PlatformDeviceId.getDeviceId() method.
// The device ID is then set to the _deviceId variable and displayed on the screen.
```

<-- END_MAIN -->
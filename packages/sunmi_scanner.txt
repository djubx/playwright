<-- START_DESCRIPTION -->

Sunmi Scanner Flutter Package
=============================

The `sunmi_scanner` Flutter package provides a simple and efficient way to integrate Sunmi scanners into your Flutter application. This package allows you to easily scan barcodes and QR codes using Sunmi devices.

When to Use This Package
------------------------

This package is ideal for applications that require barcode or QR code scanning, such as:

* Inventory management systems
* Point of sale (POS) systems
* Warehouse management systems
* Delivery and logistics systems

Features
--------

* Supports Sunmi devices with built-in scanners
* Easy to integrate and use
* Fast and accurate scanning
* Supports multiple scan modes (e.g., single scan, continuous scan)

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
---------------

### Step 1: Add the Package to Your Project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  sunmi_scanner: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:sunmi_scanner/sunmi_scanner.dart';
```
### Step 3: Initialize the Scanner

Initialize the scanner by calling the `init` method:
```dart
SunmiScanner.init();
```
### Step 4: Set the Scan Mode

Set the scan mode to single scan or continuous scan:
```dart
SunmiScanner.setScanMode(SunmiScanner.SCAN_MODE_SINGLE);
```
### Step 5: Start Scanning

Start scanning by calling the `startScan` method:
```dart
SunmiScanner.startScan();
```
### Step 6: Handle Scan Results

Handle scan results by listening to the `onScanResult` event:
```dart
SunmiScanner.onScanResult.listen((result) {
  print(result);
});
```
Platform-Specific Details
-------------------------

### Android

* Add the following line to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.CAMERA" />
```
* Make sure to handle the camera permission in your app.

### iOS

* Add the following line to your `Info.plist` file:
```xml
<key>NSCameraUsageDescription</key>
<string>This app needs camera access to scan barcodes and QR codes.</string>
```
* Make sure to handle the camera permission in your app.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:sunmi_scanner/sunmi_scanner.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatefulWidget {
  @override
  _MyAppState createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  String _scanResult = '';

  @override
  void initState() {
    super.initState();
    SunmiScanner.init();
    SunmiScanner.setScanMode(SunmiScanner.SCAN_MODE_SINGLE);
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Sunmi Scanner Demo'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Text(_scanResult),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  SunmiScanner.startScan();
                },
                child: Text('Start Scan'),
              ),
            ],
          ),
        ),
      ),
    );
  }

  @override
  void didUpdateWidget(MyApp oldWidget) {
    super.didUpdateWidget(oldWidget);
    SunmiScanner.onScanResult.listen((result) {
      setState(() {
        _scanResult = result;
      });
    });
  }
}

// Application flow:
// 1. The app initializes the Sunmi scanner and sets the scan mode to single scan.
// 2. The user clicks the "Start Scan" button to start scanning.
// 3. The app listens to the scan result event and updates the UI with the scan result.
// 4. The user can repeat steps 2-3 to scan multiple barcodes or QR codes.
```

// Summary: This code demonstrates how to use the Sunmi scanner package in a Flutter app. It initializes the scanner, sets the scan mode, and starts scanning when the user clicks the "Start Scan" button. The app then listens to the scan result event and updates the UI with the scan result.
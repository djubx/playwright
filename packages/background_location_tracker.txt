```markdown
<!-- START_DESCRIPTION -->
# Background Location Tracker Flutter Package

The **background_location_tracker** Flutter package is a powerful tool designed for developers who need to track the user's location in the background. This package is particularly useful for applications that require continuous location updates, such as fitness apps, delivery services, or any app that needs to monitor user movement over time.

## When to Use This Package
You should consider using the **background_location_tracker** package in scenarios such as:
- **Fitness Tracking**: Apps that monitor running, cycling, or walking routes.
- **Delivery Services**: Applications that need to track delivery personnel in real-time.
- **Geofencing**: Apps that trigger events based on user location.
- **Emergency Services**: Applications that require constant location updates for safety.

## Features
- **Background Location Tracking**: Continuously track the user's location even when the app is not in the foreground.
- **Platform Support**: Works on both Android and iOS with platform-specific configurations.
- **Customizable Location Updates**: Set the frequency and accuracy of location updates.
- **Geofencing Capabilities**: Define geographical boundaries and trigger actions when the user enters or exits these areas.

This package provides a robust solution for developers looking to implement background location tracking in their Flutter applications.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up Background Location Tracker

In this tutorial, we will walk through the setup process for the **background_location_tracker** package and demonstrate how to use it in a Flutter application.

## Step 1: Add Dependency
First, add the package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  background_location_tracker: ^latest_version
```

Make sure to replace `^latest_version` with the latest version of the package.

## Step 2: Platform-Specific Configuration

### Android Configuration
1. Open `AndroidManifest.xml` located in `android/app/src/main/AndroidManifest.xml`.
2. Add the following permissions inside the `<manifest>` tag:

```xml
<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
<uses-permission android:name="android.permission.ACCESS_BACKGROUND_LOCATION" />
```

3. Ensure you have the following service declaration inside the `<application>` tag:

```xml
<service android:name="com.yourpackage.BackgroundLocationService" android:enabled="true" android:exported="true"/>
```

### iOS Configuration
1. Open `Info.plist` located in `ios/Runner/Info.plist`.
2. Add the following keys to request location permissions:

```xml
<key>NSLocationWhenInUseUsageDescription</key>
<string>We need your location to provide better services.</string>
<key>NSLocationAlwaysUsageDescription</key>
<string>We need your location to provide better services even when the app is in the background.</string>
```

## Step 3: Using the Package
Now that we have configured the package, we can start using it in our Flutter application. Below is a simple example of how to implement background location tracking.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Background Location Tracker

```dart
import 'package:flutter/material.dart';
import 'package:background_location_tracker/background_location_tracker.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Background Location Tracker',
      home: LocationTrackerScreen(),
    );
  }
}

class LocationTrackerScreen extends StatefulWidget {
  @override
  _LocationTrackerScreenState createState() => _LocationTrackerScreenState();
}

class _LocationTrackerScreenState extends State<LocationTrackerScreen> {
  String _locationMessage = "Location not tracked yet.";

  @override
  void initState() {
    super.initState();
    // Start tracking the location when the app initializes
    BackgroundLocationTracker.startTracking();
    // Listen for location updates
    BackgroundLocationTracker.onLocationChanged.listen((location) {
      setState(() {
        _locationMessage = "Lat: ${location.latitude}, Lng: ${location.longitude}";
      });
    });
  }

  @override
  void dispose() {
    // Stop tracking when the widget is disposed
    BackgroundLocationTracker.stopTracking();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Background Location Tracker'),
      ),
      body: Center(
        child: Text(_locationMessage),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts and initializes the MyApp widget.
// 2. The LocationTrackerScreen widget is created, which starts tracking the user's location in the initState method.
// 3. The app listens for location updates using the onLocationChanged stream provided by the BackgroundLocationTracker.
// 4. When a new location is received, the state is updated, and the UI displays the current latitude and longitude.
// 5. When the widget is disposed, tracking is stopped to conserve resources.
```
<!-- END_MAIN -->
``` 

This structured blog provides a comprehensive overview of the **background_location_tracker** Flutter package, guiding users through its features, setup, and implementation with a complete example.
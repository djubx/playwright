<-- START_DESCRIPTION -->

# html_template Flutter Package
================================

The `html_template` package is a powerful tool for Flutter developers to render HTML templates in their applications. It allows you to separate the presentation layer from the business logic, making it easier to manage and maintain your codebase.

## When to Use
--------------

You can use the `html_template` package in a variety of scenarios, such as:

* Rendering complex HTML templates with dynamic data
* Creating custom UI components with HTML and CSS
* Integrating web-based content into your Flutter app

## Features
------------

The `html_template` package offers the following features:

* Support for HTML, CSS, and JavaScript
* Dynamic data binding with Flutter's widget tree
* Customizable template engine with support for conditionals, loops, and functions
* Integration with Flutter's asset bundle for easy template management

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the html_template Package
--------------------------------------

To use the `html_template` package in your Flutter project, follow these steps:

### Step 1: Add the Package to Your pubspec.yaml File

```yml
dependencies:
  html_template: ^1.0.0
```

### Step 2: Import the Package in Your Dart File

```dart
import 'package:html_template/html_template.dart';
```

### Step 3: Create an HTML Template

Create a new file called `template.html` in your project's asset directory:

```html
<!DOCTYPE html>
<html>
  <head>
    <title>My Template</title>
  </head>
  <body>
    <h1>{{ title }}</h1>
    <p>{{ message }}</p>
  </body>
</html>
```

### Step 4: Load the Template in Your Flutter App

```dart
class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('HTML Template Demo'),
      ),
      body: Center(
        child: HtmlTemplate(
          template: 'template.html',
          data: {
            'title': 'Hello, World!',
            'message': 'This is a demo of the html_template package.',
          },
        ),
      ),
    );
  }
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:html_template/html_template.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'HTML Template Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Step 1: Define the HTML template
  String _template = '''
  <!DOCTYPE html>
  <html>
    <head>
      <title>My Template</title>
    </head>
    <body>
      <h1>{{ title }}</h1>
      <p>{{ message }}</p>
      <button onclick="flutter{{ action }}">Click Me!</button>
    </body>
  </html>
  ''';

  // Step 2: Define the data for the template
  Map<String, dynamic> _data = {
    'title': 'Hello, World!',
    'message': 'This is a demo of the html_template package.',
    'action': 'buttonClicked',
  };

  // Step 3: Handle the button click event
  void _buttonClicked() {
    print('Button clicked!');
  }

  @override
  Widget build(BuildContext context) {
    // Step 4: Render the HTML template
    return Scaffold(
      appBar: AppBar(
        title: Text('HTML Template Demo'),
      ),
      body: Center(
        child: HtmlTemplate(
          template: _template,
          data: _data,
          // Step 5: Handle the JavaScript events
          onJavaScriptEvent: (event) {
            if (event == 'buttonClicked') {
              _buttonClicked();
            }
          },
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The RealFlutter widget is rendered, which contains the HtmlTemplate widget.
// 2. The HtmlTemplate widget loads the HTML template and replaces the placeholders with the actual data.
// 3. The HTML template is rendered in the widget tree.
// 4. When the button is clicked, the JavaScript event is triggered, which calls the onJavaScriptEvent callback.
// 5. The onJavaScriptEvent callback handles the button click event by calling the _buttonClicked function.
```

// The final summary is as follows:
// The code flows by first defining the HTML template and the data for the template.
// Then, the HtmlTemplate widget is used to render the HTML template in the widget tree.
// The JavaScript events are handled by the onJavaScriptEvent callback, which calls the corresponding function to handle the event.
// In this example, the button click event is handled by the _buttonClicked function, which prints a message to the console.

<-- END_MAIN -->
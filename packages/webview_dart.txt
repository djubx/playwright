<-- START_DESCRIPTION -->

# Overview of webview_dart Flutter Package
=============================================

The `webview_dart` package allows you to embed a web view in your Flutter application. It provides a `WebView` widget that can be used to display web content.

### When to Use

You can use this package when you need to display web content in your Flutter application, such as:

* Displaying a website or a web page
* Displaying HTML content
* Using a web-based API or service

### Features

The `webview_dart` package provides the following features:

* Support for displaying web content
* Support for JavaScript execution
* Support for navigation and history management
* Support for gesture recognition

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using webview_dart
=====================================

### Step 1: Add the Package to Your Project

Add the following dependency to your `pubspec.yaml` file:
```yml
dependencies:
  flutter:
    sdk: flutter
  webview_dart: ^1.0.0
```
Then, run `flutter pub get` to get the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:webview_dart/webview_dart.dart';
```
### Step 3: Create a WebView Widget

Create a `WebView` widget and add it to your widget tree:
```dart
WebView(
  initialUrl: 'https://www.example.com',
  javascriptMode: JavascriptMode.unrestricted,
)
```
### Platform-Specific Details

#### Android

On Android, you need to add the following permission to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.INTERNET" />
```
#### iOS

On iOS, you need to add the following configuration to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:webview_dart/webview_dart.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Step 1: Create a WebView controller
  WebViewController _controller;

  // Step 2: Create a WebView widget
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('WebView Example'),
      ),
      body: WebView(
        // Step 3: Set the initial URL
        initialUrl: 'https://www.example.com',
        // Step 4: Set the JavaScript mode
        javascriptMode: JavascriptMode.unrestricted,
        // Step 5: Set the WebView controller
        onWebViewCreated: (WebViewController webViewController) {
          _controller = webViewController;
        },
        // Step 6: Handle navigation
        navigationDelegate: (NavigationRequest request) {
          if (request.url.startsWith('https://www.example.com')) {
            return NavigationDecision.navigate;
          } else {
            return NavigationDecision.prevent;
          }
        },
        // Step 7: Handle page loading
        onPageStarted: (String url) {
          print('Page started loading: $url');
        },
        onPageFinished: (String url) {
          print('Page finished loading: $url');
        },
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and the WebView is created.
// 2. The WebView loads the initial URL.
// 3. The user interacts with the WebView (e.g., clicks on a link).
// 4. The WebView navigates to a new URL.
// 5. The app checks if the new URL is allowed (e.g., if it starts with 'https://www.example.com').
// 6. If the URL is allowed, the WebView navigates to the new URL.
// 7. If the URL is not allowed, the app prevents the navigation.
// 8. The WebView finishes loading the new URL.
```

The code flows as follows:

1. The user opens the app and the `RealFlutter` widget is created.
2. The `WebView` widget is created and added to the widget tree.
3. The `WebView` loads the initial URL.
4. The user interacts with the `WebView` (e.g., clicks on a link).
5. The `WebView` navigates to a new URL.
6. The app checks if the new URL is allowed (e.g., if it starts with 'https://www.example.com').
7. If the URL is allowed, the `WebView` navigates to the new URL.
8. If the URL is not allowed, the app prevents the navigation.
9. The `WebView` finishes loading the new URL.

<-- END_MAIN -->
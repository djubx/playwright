# Exploring the dospace Flutter Package

## <-- START_DESCRIPTION -->

### Overview of dospace

The **dospace** Flutter package is designed to facilitate seamless integration with DigitalOcean Spaces, a scalable object storage service. This package allows developers to easily upload, download, and manage files in DigitalOcean Spaces, making it an excellent choice for applications that require cloud storage solutions.

### When to Use dospace

You might consider using the dospace package in scenarios such as:
- Building applications that need to store user-generated content, like images or documents.
- Creating media-heavy applications that require efficient file management and retrieval.
- Developing applications that leverage cloud storage for scalability and reliability.

### Key Features

- **File Uploads**: Easily upload files to DigitalOcean Spaces.
- **File Downloads**: Retrieve files from your storage space.
- **File Management**: Manage files, including listing and deleting files in your space.
- **Secure Access**: Supports secure access to your files with pre-signed URLs.

## <-- END_DESCRIPTION -->

## <-- START_TUTORIAL -->

### Setup Process

To get started with the dospace package, follow these steps:

1. **Add Dependency**: Open your `pubspec.yaml` file and add the dospace package:

   ```yaml
   dependencies:
     dospace: ^latest_version
   ```

   Replace `latest_version` with the most recent version available on [pub.dev](https://pub.dev/packages/dospace).

2. **Install the Package**: Run the following command in your terminal to install the package:

   ```bash
   flutter pub get
   ```

3. **Platform-Specific Configuration**:
   - **Android**: Ensure you have the necessary permissions in your `AndroidManifest.xml` file:

     ```xml
     <uses-permission android:name="android.permission.INTERNET"/>
     ```

   - **iOS**: Update your `Info.plist` to allow network access:

     ```xml
     <key>NSAppTransportSecurity</key>
     <dict>
       <key>NSAllowsArbitraryLoads</key>
       <true/>
     </dict>
     ```

4. **Initialize dospace**: Before using the package, initialize it with your DigitalOcean Spaces credentials:

   ```dart
   import 'package:dospace/dospace.dart';

   void main() {
     // Initialize dospace with your credentials
     final dospace = RealFlutter(
       accessKey: 'YOUR_ACCESS_KEY',
       secretKey: 'YOUR_SECRET_KEY',
       spaceName: 'YOUR_SPACE_NAME',
       region: 'YOUR_REGION',
     );
   }
   ```

### Usage

Once you have set up the package, you can start using its features. Hereâ€™s a brief overview of how to upload and download files:

- **Uploading a File**:

   ```dart
   final response = await dospace.uploadFile(filePath: 'path/to/your/file.jpg');
   ```

- **Downloading a File**:

   ```dart
   final fileData = await dospace.downloadFile(fileName: 'file.jpg');
   ```

## <-- END_TUTORIAL -->

## <-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:dospace/dospace.dart';

void main() {
  runApp(MyApp());
}

// Main application widget
class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Dospace Example',
      home: HomeScreen(),
    );
  }
}

// Home screen widget
class HomeScreen extends StatefulWidget {
  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  // Create an instance of dospace
  final dospace = RealFlutter(
    accessKey: 'YOUR_ACCESS_KEY',
    secretKey: 'YOUR_SECRET_KEY',
    spaceName: 'YOUR_SPACE_NAME',
    region: 'YOUR_REGION',
  );

  String? uploadResponse; // Variable to hold upload response
  String? downloadResponse; // Variable to hold download response

  // Function to upload a file
  Future<void> uploadFile() async {
    // Specify the path to the file you want to upload
    final response = await dospace.uploadFile(filePath: 'path/to/your/file.jpg');
    setState(() {
      uploadResponse = response; // Store the response
    });
  }

  // Function to download a file
  Future<void> downloadFile() async {
    // Specify the name of the file you want to download
    final fileData = await dospace.downloadFile(fileName: 'file.jpg');
    setState(() {
      downloadResponse = fileData; // Store the downloaded file data
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Dospace Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: uploadFile, // Call uploadFile on button press
              child: Text('Upload File'),
            ),
            if (uploadResponse != null) // Display upload response if available
              Text('Upload Response: $uploadResponse'),
            ElevatedButton(
              onPressed: downloadFile, // Call downloadFile on button press
              child: Text('Download File'),
            ),
            if (downloadResponse != null) // Display download response if available
              Text('Download Response: $downloadResponse'),
          ],
        ),
      ),
    );
  }
}
```

### Application Flow Explanation

// The application starts with the `main` function, which runs the `MyApp` widget.
// `MyApp` is a stateless widget that sets up the MaterialApp with a title and home screen.
// The `HomeScreen` widget is a stateful widget that manages the upload and download functionality.
// Inside `_HomeScreenState`, an instance of `RealFlutter` is created with the necessary credentials.
// Two functions, `uploadFile` and `downloadFile`, are defined to handle file uploads and downloads respectively.
// When the user presses the "Upload File" button, the `uploadFile` function is called, which uploads a specified file and updates the UI with the response.
// Similarly, pressing the "Download File" button calls the `downloadFile` function, which retrieves a file and updates the UI with the downloaded data.
// The UI consists of two buttons for uploading and downloading files, and it displays the responses from these operations.

## <-- END_MAIN -->

### Summary

In this blog post, we explored the dospace Flutter package, which provides a straightforward way to interact with DigitalOcean Spaces. We covered the setup process, including platform-specific configurations, and provided a complete example demonstrating file upload and download functionalities. This package is particularly useful for applications that require reliable cloud storage solutions, making it a valuable addition to any Flutter developer's toolkit.
<-- START_DESCRIPTION -->

# Flutter Sequencer Package
================================

The `flutter_sequencer` package is a powerful tool for creating and managing sequences of animations and actions in Flutter applications. It provides a simple and intuitive API for defining complex animation sequences, making it easy to create engaging and interactive user experiences.

## When to Use This Package
---------------------------

The `flutter_sequencer` package is ideal for creating complex animation sequences, such as:

* Onboarding flows
* Interactive tutorials
* Animated stories
* Gamification elements

## Features
------------

* Define complex animation sequences using a simple and intuitive API
* Support for multiple animation types, including fade, scale, and translate
* Ability to add custom actions to sequences
* Support for looping and reversing sequences
* Easy integration with Flutter's built-in animation APIs

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `flutter_sequencer` package, add the following dependency to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_sequencer: ^1.0.0
```
Then, run `flutter pub get` to install the package.

## Platform-Specific Details
---------------------------

### Android

No additional setup is required for Android.

### iOS

No additional setup is required for iOS.

## Using the Package
---------------------

To use the package, import it in your Dart file:
```dart
import 'package:flutter_sequencer/flutter_sequencer.dart';
```
Then, create a `Sequencer` instance and define your animation sequence:
```dart
Sequencer(
  sequence: [
    FadeInAnimation(
      duration: Duration(milliseconds: 500),
    ),
    ScaleAnimation(
      duration: Duration(milliseconds: 500),
      scale: 1.5,
    ),
    TranslateAnimation(
      duration: Duration(milliseconds: 500),
      offset: Offset(100, 100),
    ),
  ],
);
```
You can then use the `Sequencer` instance to play, pause, and reverse the animation sequence.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_sequencer/flutter_sequencer.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Sequencer Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  Sequencer _sequencer;

  @override
  void initState() {
    super.initState();
    _sequencer = Sequencer(
      sequence: [
        // Fade in animation
        FadeInAnimation(
          duration: Duration(milliseconds: 500),
        ),
        // Scale animation
        ScaleAnimation(
          duration: Duration(milliseconds: 500),
          scale: 1.5,
        ),
        // Translate animation
        TranslateAnimation(
          duration: Duration(milliseconds: 500),
          offset: Offset(100, 100),
        ),
        // Custom action
        CustomAction(
          duration: Duration(milliseconds: 500),
          action: () {
            print('Custom action executed!');
          },
        ),
      ],
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Sequencer Demo'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            _sequencer.play();
          },
          child: Text('Play Sequence'),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user presses the "Play Sequence" button.
// 2. The `_sequencer.play()` method is called, which starts playing the animation sequence.
// 3. The first animation in the sequence is a fade in animation, which fades in the button over a duration of 500 milliseconds.
// 4. Once the fade in animation is complete, the next animation in the sequence is played, which is a scale animation.
// 5. The scale animation scales the button up to 1.5 times its original size over a duration of 500 milliseconds.
// 6. Once the scale animation is complete, the next animation in the sequence is played, which is a translate animation.
// 7. The translate animation moves the button 100 pixels to the right and 100 pixels down over a duration of 500 milliseconds.
// 8. Once the translate animation is complete, the final animation in the sequence is played, which is a custom action.
// 9. The custom action prints a message to the console indicating that it has been executed.
// 10. The animation sequence is now complete, and the button returns to its original state.

```

<-- END_MAIN -->
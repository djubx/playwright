<-- START_DESCRIPTION -->

The "fresh" Flutter package is a powerful tool for managing state and caching data in Flutter applications. It provides a simple and efficient way to handle data fetching, caching, and updating, making it ideal for applications that require real-time data updates.

With the "fresh" package, you can easily manage data from various sources, such as APIs, databases, or even local storage. It provides features like automatic caching, data deduplication, and cache invalidation, making it a great solution for applications that require fast and efficient data management.

Some examples of when to use the "fresh" package include:

* Building real-time data-driven applications, such as news feeds or social media platforms
* Creating applications that require fast and efficient data caching, such as e-commerce apps or games
* Managing data from multiple sources, such as APIs, databases, or local storage

The "fresh" package provides a range of features, including:

* Automatic caching: The package automatically caches data from the data source, reducing the need for repeated requests.
* Data deduplication: The package removes duplicate data from the cache, ensuring that only the most up-to-date data is stored.
* Cache invalidation: The package provides a mechanism for invalidating cached data, ensuring that the cache remains up-to-date.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

To use the "fresh" package in your Flutter application, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  fresh: ^1.0.0
```
2. Import the package in your Dart file:
```dart
import 'package:fresh/fresh.dart';
```
3. Create a `Fresh` instance, passing in the data source and cache store:
```dart
final fresh = Fresh(
  dataSource: MyDataSource(),
  cacheStore: MyCacheStore(),
);
```
4. Use the `fresh` instance to fetch data:
```dart
final data = await fresh.fetch('my_data');
```
5. Use the `fresh` instance to update data:
```dart
await fresh.update('my_data', newData);
```
For platform-specific details, please note the following:

* On Android, the `fresh` package uses the `android.content.SharedPreferences` class to store cache data.
* On iOS, the `fresh` package uses the `NSUserDefaults` class to store cache data.

To optimize the performance of the `fresh` package, you can configure the cache store to use a specific cache policy. For example:
```dart
final cacheStore = MyCacheStore(
  cachePolicy: CachePolicy(
    maxAge: Duration(hours: 1),
    maxCount: 100,
  ),
);
```
This configuration sets the cache policy to store data for a maximum of 1 hour and a maximum of 100 items.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:fresh/fresh.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Fresh Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final fresh = Fresh(
    dataSource: MyDataSource(),
    cacheStore: MyCacheStore(),
  );

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Fresh Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Data:',
              style: TextStyle(fontSize: 24),
            ),
            FutureBuilder(
              future: fresh.fetch('my_data'),
              builder: (context, snapshot) {
                if (snapshot.hasData) {
                  return Text(
                    snapshot.data.toString(),
                    style: TextStyle(fontSize: 24),
                  );
                } else {
                  return CircularProgressIndicator();
                }
              },
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () async {
                final newData = 'New data!';
                await fresh.update('my_data', newData);
                setState(() {});
              },
              child: Text('Update Data'),
            ),
          ],
        ),
      ),
    );
  }
}

// Data source class
class MyDataSource extends DataSource {
  @override
  Future<String> fetch(String key) async {
    // Simulate data fetching
    await Future.delayed(Duration(seconds: 2));
    return 'Fetched data!';
  }
}

// Cache store class
class MyCacheStore extends CacheStore {
  @override
  Future<String> get(String key) async {
    // Simulate cache retrieval
    await Future.delayed(Duration(milliseconds: 500));
    return 'Cached data!';
  }

  @override
  Future<void> set(String key, String value) async {
    // Simulate cache storage
    await Future.delayed(Duration(milliseconds: 500));
  }
}
```

// The application flow is as follows:
// 1. The user opens the app and the `MyHomePage` widget is displayed.
// 2. The `MyHomePage` widget uses the `fresh` instance to fetch data from the data source.
// 3. The data source simulates data fetching and returns the data after a delay.
// 4. The `fresh` instance caches the data in the cache store.
// 5. The `MyHomePage` widget displays the cached data.
// 6. The user clicks the "Update Data" button and the `MyHomePage` widget updates the data using the `fresh` instance.
// 7. The `fresh` instance updates the cached data in the cache store.
// 8. The `MyHomePage` widget displays the updated cached data.

<-- END_MAIN -->
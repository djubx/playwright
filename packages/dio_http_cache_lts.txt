<-- START_DESCRIPTION -->

# dio_http_cache_lts Flutter Package
=====================================

The dio_http_cache_lts package is a powerful caching library for Flutter that allows you to cache HTTP requests made using the Dio library. It provides a simple and efficient way to cache responses, reducing the number of requests made to the server and improving the overall performance of your app.

### When to Use

This package is particularly useful when:

* You want to reduce the number of requests made to the server
* You want to improve the performance of your app by caching frequently accessed data
* You want to provide offline support for your app by caching responses

### Features

* Cache HTTP requests made using Dio
* Support for GET, POST, PUT, DELETE, and HEAD requests
* Cache responses based on URL, method, and headers
* Support for caching JSON, XML, and other types of responses
* Automatic cache expiration based on response headers
* Manual cache expiration using a custom expiration time

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up dio_http_cache_lts
=============================

To use the dio_http_cache_lts package, you need to add it to your pubspec.yaml file:

```yml
dependencies:
  dio_http_cache_lts: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Platform-Specific Configurations

#### Android

No additional configurations are required for Android.

#### iOS

No additional configurations are required for iOS.

### Using dio_http_cache_lts

To use the dio_http_cache_lts package, you need to create a `Dio` instance and pass it to the `DioHttpCache` constructor:

```dart
import 'package:dio/dio.dart';
import 'package:dio_http_cache_lts/dio_http_cache_lts.dart';

void main() {
  final dio = Dio();
  final cache = DioHttpCache(dio: dio);

  // Make a GET request with caching
  cache.get('https://example.com/api/data')
    .then((response) {
      print(response.data);
    });
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:dio/dio.dart';
import 'package:dio_http_cache_lts/dio_http_cache_lts.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Dio Http Cache LTS Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final dio = Dio();
  final cache = DioHttpCache(dio: dio);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Dio Http Cache LTS Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: _makeGetRequest,
              child: Text('Make GET Request'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _makePostRequest,
              child: Text('Make POST Request'),
            ),
          ],
        ),
      ),
    );
  }

  _makeGetRequest() async {
    // Make a GET request with caching
    final response = await cache.get('https://example.com/api/data');
    print(response.data);
  }

  _makePostRequest() async {
    // Make a POST request with caching
    final response = await cache.post('https://example.com/api/data', data: {'key': 'value'});
    print(response.data);
  }
}

// The application flow is as follows:
// 1. The user opens the app and is presented with a screen containing two buttons: "Make GET Request" and "Make POST Request".
// 2. When the user clicks the "Make GET Request" button, the `_makeGetRequest` function is called.
// 3. The `_makeGetRequest` function makes a GET request to the specified URL using the `cache.get` method.
// 4. The response from the server is cached by the `DioHttpCache` instance.
// 5. The response data is printed to the console.
// 6. When the user clicks the "Make POST Request" button, the `_makePostRequest` function is called.
// 7. The `_makePostRequest` function makes a POST request to the specified URL using the `cache.post` method.
// 8. The response from the server is cached by the `DioHttpCache` instance.
// 9. The response data is printed to the console.

// In summary, this code demonstrates how to use the dio_http_cache_lts package to cache HTTP requests made using the Dio library.
// The cache is used to store responses from the server, reducing the number of requests made to the server and improving the overall performance of the app.
```

<-- END_MAIN -->
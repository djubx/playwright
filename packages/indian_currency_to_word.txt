```markdown
<!-- START_DESCRIPTION -->
# Indian Currency to Word Flutter Package

The `indian_currency_to_word` Flutter package is a powerful utility designed to convert numerical values representing Indian currency into their corresponding word format. This package is particularly useful in applications that require displaying amounts in words, such as invoicing systems, banking applications, or any financial software where clarity in monetary values is essential.

## When to Use This Package

- **Invoicing Applications**: When generating invoices, it's often required to display the amount in words for legal and clarity purposes.
- **Banking Apps**: For applications that deal with transactions, showing amounts in words can help prevent misunderstandings.
- **Educational Apps**: Useful in teaching children about numbers and currency in a fun and engaging way.

## Features

- **Easy Integration**: Simple to add to any Flutter project.
- **Supports Indian Currency Format**: Specifically designed to handle the nuances of Indian currency.
- **Customizable**: Allows for customization in terms of formatting and language options.

With these features, the `indian_currency_to_word` package stands out as a reliable choice for developers looking to enhance their Flutter applications with currency conversion capabilities.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Indian Currency to Word Package

## Step 1: Adding the Dependency

To get started, you need to add the `indian_currency_to_word` package to your Flutter project. Open your `pubspec.yaml` file and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  indian_currency_to_word: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command in your terminal to install it:

```bash
flutter pub get
```

## Step 2: Platform-Specific Configuration

### Android

For Android, ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file:

```gradle
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
        ...
    }
}
```

### iOS

For iOS, you may need to update your `ios/Podfile` to ensure compatibility. Make sure to set the platform version:

```ruby
platform :ios, '10.0'
```

## Step 3: Using the Package

Now that you have set up the package, you can start using it in your Flutter application. Hereâ€™s a simple example of how to convert a number to words.

```dart
import 'package:flutter/material.dart';
import 'package:indian_currency_to_word/indian_currency_to_word.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Currency to Word Example',
      home: CurrencyConverter(),
    );
  }
}

class CurrencyConverter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    double amount = 123456.78; // Example amount
    String amountInWords = RealFlutter.convert(amount); // Convert to words

    return Scaffold(
      appBar: AppBar(
        title: Text('Currency to Word Converter'),
      ),
      body: Center(
        child: Text(
          'Amount in words: $amountInWords',
          style: TextStyle(fontSize: 24),
        ),
      ),
    );
  }
}
```

In this example, we import the necessary packages, define a simple Flutter app, and use the `RealFlutter.convert` method to convert a numerical amount into words.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Indian Currency to Word Package

```dart
import 'package:flutter/material.dart';
import 'package:indian_currency_to_word/indian_currency_to_word.dart';

void main() {
  runApp(MyApp());
}

// MyApp is the root widget of the application
class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Currency to Word Example',
      home: CurrencyConverter(), // Home screen of the app
    );
  }
}

// CurrencyConverter is a StatelessWidget that handles the currency conversion
class CurrencyConverter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    double amount = 123456.78; // Example amount to be converted
    String amountInWords = RealFlutter.convert(amount); // Convert amount to words

    return Scaffold(
      appBar: AppBar(
        title: Text('Currency to Word Converter'), // App bar title
      ),
      body: Center(
        child: Text(
          'Amount in words: $amountInWords', // Display the converted amount
          style: TextStyle(fontSize: 24), // Text style
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The main function runs the MyApp widget.
// 2. MyApp builds the MaterialApp and sets CurrencyConverter as the home widget.
// 3. CurrencyConverter initializes an amount and converts it to words using RealFlutter.convert.
// 4. The converted amount is displayed in the center of the screen.
```
<!-- END_MAIN -->
```

### Summary of Application Flow

The application starts with the `main` function, which initializes the `MyApp` widget. The `MyApp` widget sets up the main structure of the app, including the title and the home screen, which is the `CurrencyConverter` widget. 

In the `CurrencyConverter` widget, a sample amount is defined and converted to words using the `RealFlutter.convert` method. The result is then displayed in the center of the screen, providing a clear and user-friendly interface for converting currency amounts into words. 

This example demonstrates the simplicity and effectiveness of the `indian_currency_to_word` package in a Flutter application, making it easy for developers to implement currency conversion features.
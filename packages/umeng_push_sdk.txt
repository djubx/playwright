```markdown
<!-- START_DESCRIPTION -->
# Umeng Push SDK Flutter Package

The **umeng_push_sdk** is a Flutter package that provides a seamless integration of the Umeng Push Notification service into your Flutter applications. This package allows developers to send and receive push notifications, enhancing user engagement and retention. 

## When to Use This Package
You should consider using the umeng_push_sdk when:
- You want to implement push notifications in your Flutter app.
- You are targeting the Chinese market, as Umeng is a popular service in China.
- You need a reliable and easy-to-use solution for managing notifications.

## Features
- **Cross-Platform Support**: Works on both Android and iOS platforms.
- **Custom Notification Handling**: Allows customization of notification appearance and behavior.
- **Analytics Integration**: Provides insights into notification delivery and user engagement.
- **Rich Media Notifications**: Supports images, sounds, and other media in notifications.
- **User Tagging**: Enables tagging of users for targeted notifications.

The umeng_push_sdk is a powerful tool for developers looking to enhance their applications with push notifications, especially in markets where Umeng is widely used.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up umeng_push_sdk

In this tutorial, we will walk through the setup process for the umeng_push_sdk package in a Flutter project, including platform-specific configurations for both Android and iOS.

## Step 1: Add Dependency
To get started, add the umeng_push_sdk package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  umeng_push_sdk: ^latest_version
```

Make sure to replace `latest_version` with the most recent version available on [pub.dev](https://pub.dev/packages/umeng_push_sdk).

## Step 2: Android Configuration
1. **Update AndroidManifest.xml**: Open `android/app/src/main/AndroidManifest.xml` and add the following permissions and services:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>
<uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED"/>

<application>
    ...
    <service android:name="com.umeng.message.UmengMessageService" android:exported="true"/>
    <receiver android:name="com.umeng.message.UmengNotificationReceiver" android:exported="true"/>
</application>
```

2. **Add Umeng App Key**: In the same `AndroidManifest.xml`, add your Umeng App Key:

```xml
<meta-data
    android:name="UMENG_APPKEY"
    android:value="your_umeng_app_key"/>
```

## Step 3: iOS Configuration
1. **Update Info.plist**: Open `ios/Runner/Info.plist` and add the following:

```xml
<key>UIBackgroundModes</key>
<array>
    <string>fetch</string>
    <string>remote-notification</string>
</array>
<key>UMENG_APPKEY</key>
<string>your_umeng_app_key</string>
```

2. **Request Notification Permissions**: Ensure you request permission to show notifications in your app. This can be done in your Flutter code.

## Step 4: Initialize the SDK
In your main Dart file, initialize the Umeng Push SDK:

```dart
import 'package:flutter/material.dart';
import 'package:umeng_push_sdk/umeng_push_sdk.dart';

void main() {
  runApp(MyApp());
  UmengPushSdk.init("your_umeng_app_key");
}
```

Now you are ready to use the umeng_push_sdk in your Flutter application!
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of umeng_push_sdk

```dart
import 'package:flutter/material.dart';
import 'package:umeng_push_sdk/umeng_push_sdk.dart';

void main() {
  runApp(MyApp());
  // Initialize the Umeng Push SDK with your app key
  UmengPushSdk.init("your_umeng_app_key");
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Umeng Push Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: PushNotificationHome(),
    );
  }
}

class PushNotificationHome extends StatefulWidget {
  @override
  _PushNotificationHomeState createState() => _PushNotificationHomeState();
}

class _PushNotificationHomeState extends State<PushNotificationHome> {
  String _notificationMessage = "No notifications received yet.";

  @override
  void initState() {
    super.initState();
    // Set up the notification listener
    UmengPushSdk.onMessageReceived.listen((message) {
      // Update the state with the received message
      setState(() {
        _notificationMessage = message;
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Umeng Push Notifications'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Latest Notification:',
            ),
            Text(
              _notificationMessage,
              style: Theme.of(context).textTheme.headline4,
            ),
          ],
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts and initializes the Umeng Push SDK with the provided app key.
// 2. The PushNotificationHome widget is displayed, which listens for incoming push notifications.
// 3. When a notification is received, the listener updates the _notificationMessage state variable.
// 4. The UI is rebuilt to display the latest notification message to the user.
```
<!-- END_MAIN -->
```

This structured blog post provides a comprehensive overview of the umeng_push_sdk package, including its features, setup instructions, and a complete example with detailed comments explaining the application flow.
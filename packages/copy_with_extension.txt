```markdown
<-- START_DESCRIPTION -->

# Overview of the `copy_with_extension` Flutter Package

The `copy_with_extension` package is a powerful tool for Flutter developers, designed to simplify the process of creating copy methods for data classes. This package automatically generates a `copyWith` method for your classes, allowing you to easily create modified copies of objects without manually writing boilerplate code.

## When to Use

The `copy_with_extension` package is particularly useful in scenarios where you have immutable data classes and need to create modified versions of these objects. For example, in state management solutions like BLoC or Redux, you often need to update parts of the state while keeping the rest unchanged. The `copyWith` method facilitates this by allowing you to specify only the fields you want to change.

## Features

- **Automatic Code Generation**: Generates `copyWith` methods for your classes, reducing boilerplate code.
- **Customizable**: Allows you to specify which fields should be included in the `copyWith` method.
- **Easy Integration**: Simple to set up and use within your existing Flutter projects.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the `copy_with_extension` Package

In this tutorial, we'll walk through the setup process for the `copy_with_extension` package and demonstrate how to use it in a Flutter project. We'll cover platform-specific details for both Android and iOS.

## Setup Process

1. **Add Dependency**: First, add the `copy_with_extension` package to your `pubspec.yaml` file:

   ```yaml
   dependencies:
     flutter:
       sdk: flutter

   dev_dependencies:
     copy_with_extension: ^3.0.0
     build_runner: ^2.1.0
   ```

2. **Annotate Your Class**: Use the `@CopyWith` annotation on the class for which you want to generate a `copyWith` method.

   ```dart
   import 'package:copy_with_extension/copy_with_extension.dart';

   part 'real_flutter.g.dart';

   @CopyWith()
   class RealFlutter {
     final String name;
     final int version;

     RealFlutter({required this.name, required this.version});
   }
   ```

3. **Run the Code Generator**: Use the `build_runner` to generate the `copyWith` method.

   ```bash
   flutter pub run build_runner build
   ```

   This command will generate a part file (`real_flutter.g.dart`) containing the `copyWith` method.

## Platform-Specific Details

- **Android**: No additional configuration is required for Android.
- **iOS**: Similarly, no specific configuration is needed for iOS.

## Optimizations

- Ensure that your data classes are immutable by using `final` fields.
- Regularly run the `build_runner` to keep your generated code up to date.

<-- END_TUTORIAL -->

<-- MAIN -->

# Complete Example of Using `copy_with_extension`

Below is a complete Flutter application demonstrating the use of the `copy_with_extension` package.

```dart
import 'package:flutter/material.dart';
import 'package:copy_with_extension/copy_with_extension.dart';

part 'real_flutter.g.dart';

// Annotate the class with @CopyWith to generate the copyWith method
@CopyWith()
class RealFlutter {
  final String name;
  final int version;

  RealFlutter({required this.name, required this.version});
}

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'CopyWith Extension Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: HomeScreen(),
    );
  }
}

class HomeScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Create an instance of RealFlutter
    RealFlutter flutterInstance = RealFlutter(name: 'Flutter', version: 3);

    // Use the generated copyWith method to create a modified copy
    RealFlutter updatedInstance = flutterInstance.copyWith(version: 4);

    return Scaffold(
      appBar: AppBar(
        title: Text('CopyWith Extension Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text('Original: ${flutterInstance.name} v${flutterInstance.version}'),
            Text('Updated: ${updatedInstance.name} v${updatedInstance.version}'),
          ],
        ),
      ),
    );
  }
}
```

// The application starts by creating an instance of the RealFlutter class.
// It then uses the generated copyWith method to create a new instance with an updated version.
// The HomeScreen widget displays both the original and updated instances on the screen.
// This demonstrates how the copyWith method can be used to easily create modified copies of objects.

<-- END_MAIN -->
```
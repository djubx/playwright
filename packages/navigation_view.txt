<-- START_DESCRIPTION -->

# Navigation View Flutter Package
=====================================

The `navigation_view` Flutter package provides a simple and efficient way to manage navigation in your Flutter app. It allows you to define a navigation menu that can be used to navigate between different routes in your app.

## When to Use
--------------

You can use the `navigation_view` package when you need to implement a navigation menu in your Flutter app. This package is particularly useful when you have multiple routes in your app and you want to provide a simple way for users to navigate between them.

## Features
------------

The `navigation_view` package provides the following features:

*   Simple and efficient navigation management
*   Support for multiple routes
*   Customizable navigation menu
*   Platform-specific configurations and optimizations

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

## Setup
--------

To use the `navigation_view` package, you need to add it to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  navigation_view: ^1.0.0
```

Then, run `flutter pub get` to get the package.

## Basic Usage
-------------

To use the `navigation_view` package, you need to create a `NavigationView` widget and pass a list of `NavigationItem` objects to it:

```dart
import 'package:flutter/material.dart';
import 'package:navigation_view/navigation_view.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  int _currentIndex = 0;

  @override
  Widget build(BuildContext context) {
    return NavigationView(
      currentIndex: _currentIndex,
      onChanged: (index) {
        setState(() {
          _currentIndex = index;
        });
      },
      items: [
        NavigationItem(
          icon: Icon(Icons.home),
          label: 'Home',
        ),
        NavigationItem(
          icon: Icon(Icons.settings),
          label: 'Settings',
        ),
      ],
    );
  }
}
```

## Platform-Specific Configurations
---------------------------------

The `navigation_view` package provides platform-specific configurations and optimizations.

For Android, you can use the `android` property to configure the navigation menu:

```dart
NavigationView(
  // ...
  android: AndroidNavigationView(
    // ...
  ),
)
```

For iOS, you can use the `ios` property to configure the navigation menu:

```dart
NavigationView(
  // ...
  ios: IOSNavigationView(
    // ...
  ),
)
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:navigation_view/navigation_view.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Navigation View Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  int _currentIndex = 0;

  // This is the list of navigation items
  List<NavigationItem> _items = [
    NavigationItem(
      icon: Icon(Icons.home),
      label: 'Home',
    ),
    NavigationItem(
      icon: Icon(Icons.settings),
      label: 'Settings',
    ),
  ];

  @override
  Widget build(BuildContext context) {
    // Create the NavigationView widget
    return NavigationView(
      // Set the current index
      currentIndex: _currentIndex,
      // Handle the index change event
      onChanged: (index) {
        // Update the current index
        setState(() {
          _currentIndex = index;
        });
      },
      // Pass the list of navigation items
      items: _items,
    );
  }
}

// This is the explanation of the application flow
// 
// 1. The user runs the app and the `MyApp` widget is created.
// 2. The `MyApp` widget builds the `MaterialApp` widget with the `RealFlutter` widget as the home page.
// 3. The `RealFlutter` widget creates the `NavigationView` widget with the list of navigation items.
// 4. The user interacts with the navigation menu and the `onChanged` event is triggered.
// 5. The `onChanged` event updates the current index and rebuilds the `NavigationView` widget.
// 6. The `NavigationView` widget displays the selected navigation item.
```

// This is the final summary explaining how the code flows
// 
// The code flows by creating a `NavigationView` widget with a list of navigation items.
// The user interacts with the navigation menu and the `onChanged` event updates the current index.
// The `NavigationView` widget displays the selected navigation item.

<-- END_MAIN -->
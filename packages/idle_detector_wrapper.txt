```markdown
<!-- START_DESCRIPTION -->
# Idle Detector Wrapper Flutter Package

The `idle_detector_wrapper` Flutter package is a powerful tool designed to help developers detect user inactivity within their applications. This package is particularly useful in scenarios where user engagement is critical, such as in gaming apps, educational platforms, or any application where user interaction is essential for functionality.

## When to Use This Package

You might consider using the `idle_detector_wrapper` package in the following scenarios:

- **Gaming Applications**: To pause the game or show a warning when the user has been inactive for a certain period.
- **Educational Apps**: To track user engagement and prompt them to continue learning if they have been idle for too long.
- **Chat Applications**: To automatically log out users after a period of inactivity for security reasons.

## Features

- **Customizable Idle Time**: Set the duration of inactivity before the idle state is triggered.
- **Callbacks for Idle and Active States**: Easily define what happens when the user becomes idle or returns to activity.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS platforms.

This package provides a straightforward API that integrates easily into your Flutter applications, allowing you to enhance user experience by managing idle states effectively.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Idle Detector Wrapper

## Step 1: Adding the Dependency

To get started, add the `idle_detector_wrapper` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  idle_detector_wrapper: ^1.0.0  # Check for the latest version on pub.dev
```

## Step 2: Platform-Specific Configuration

### Android Configuration

For Android, ensure that your `AndroidManifest.xml` file includes the necessary permissions. Open `android/app/src/main/AndroidManifest.xml` and add:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
```

### iOS Configuration

For iOS, you may need to configure your app's `Info.plist` file to allow background execution if you want to keep detecting idle states when the app is in the background. Add the following key:

```xml
<key>UIBackgroundModes</key>
<array>
    <string>audio</string>
    <string>fetch</string>
</array>
```

## Step 3: Using the Package

Now that you have set up the package, you can start using it in your Flutter application. Hereâ€™s a simple example of how to implement the idle detector.

1. Import the package in your Dart file:

```dart
import 'package:idle_detector_wrapper/idle_detector_wrapper.dart';
```

2. Initialize the `IdleDetector` in your main widget:

```dart
class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  late IdleDetector _idleDetector;

  @override
  void initState() {
    super.initState();
    _idleDetector = IdleDetector(
      idleTimeout: Duration(seconds: 5), // Set idle timeout
      onIdle: () {
        print("User is idle");
        // Handle idle state
      },
      onActive: () {
        print("User is active");
        // Handle active state
      },
    );
    _idleDetector.start(); // Start detecting idle state
  }

  @override
  void dispose() {
    _idleDetector.stop(); // Stop detecting when the widget is disposed
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("Idle Detector Example")),
      body: Center(child: Text("Interact with the app!")),
    );
  }
}
```

In this example, the `IdleDetector` is initialized with a timeout of 5 seconds. When the user is idle for this duration, the `onIdle` callback is triggered, and when they interact with the app again, the `onActive` callback is called.

## Summary

This tutorial covered the installation and basic usage of the `idle_detector_wrapper` package. You learned how to set up platform-specific configurations and implement the idle detector in your Flutter application.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Idle Detector Wrapper

```dart
import 'package:flutter/material.dart';
import 'package:idle_detector_wrapper/idle_detector_wrapper.dart';

void main() {
  runApp(MyApp());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  late IdleDetector _idleDetector; // Declare the IdleDetector

  @override
  void initState() {
    super.initState();
    // Initialize the IdleDetector with a timeout of 5 seconds
    _idleDetector = IdleDetector(
      idleTimeout: Duration(seconds: 5), // Set idle timeout
      onIdle: () {
        print("User is idle"); // Callback when user is idle
        // You can add logic here to handle idle state, like showing a dialog
      },
      onActive: () {
        print("User is active"); // Callback when user becomes active
        // You can add logic here to handle active state, like resuming tasks
      },
    );
    _idleDetector.start(); // Start detecting idle state
  }

  @override
  void dispose() {
    _idleDetector.stop(); // Stop detecting when the widget is disposed
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("Idle Detector Example")), // App bar title
      body: Center(
        child: Text("Interact with the app!"), // Main content
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The application starts with the main function, which runs the MyApp widget.
// 2. The RealFlutter widget is created, and its state is managed by _RealFlutterState.
// 3. In the initState method, the IdleDetector is initialized with a 5-second timeout.
// 4. The onIdle callback is triggered when the user is inactive for 5 seconds, allowing you to handle idle state.
// 5. The onActive callback is triggered when the user interacts with the app again, allowing you to handle active state.
// 6. The IdleDetector is started in initState and stopped in dispose to manage resources properly.
```
<!-- END_MAIN -->
``` 

This structured blog provides a comprehensive overview of the `idle_detector_wrapper` package, guiding users through its features, setup, and implementation in a Flutter application.
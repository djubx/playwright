```markdown
<!-- START_DESCRIPTION -->
# Overview of the `rotation_check` Flutter Package

The `rotation_check` package is a Flutter library designed to help developers detect and respond to changes in device orientation. This package is particularly useful for applications that require specific layouts or functionalities based on whether the device is in portrait or landscape mode. 

## When to Use This Package
- **Responsive UI**: When building applications that need to adapt their layout based on the device's orientation.
- **Game Development**: For games that require specific controls or views depending on the orientation.
- **Media Applications**: When displaying videos or images that should be optimized for the current orientation.

## Key Features
- **Orientation Detection**: Easily detect when the device orientation changes.
- **Custom Callbacks**: Set up custom callbacks to execute specific actions when orientation changes.
- **Lightweight**: Minimal overhead, making it suitable for performance-sensitive applications.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Setting Up and Using the `rotation_check` Package

## Installation
To use the `rotation_check` package, you need to add it to your `pubspec.yaml` file. Open your `pubspec.yaml` and add the following line under dependencies:

```yaml
dependencies:
  rotation_check: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command in your terminal to install the package:

```bash
flutter pub get
```

## Platform-Specific Configuration
### Android
No additional configuration is required for Android. The package works out of the box.

### iOS
For iOS, ensure that your app's `Info.plist` file allows for orientation changes. You can specify supported orientations like this:

```xml
<key>UISupportedInterfaceOrientations</key>
<array>
    <string>UIInterfaceOrientationPortrait</string>
    <string>UIInterfaceOrientationLandscapeLeft</string>
    <string>UIInterfaceOrientationLandscapeRight</string>
</array>
```

## Using the Package
To use the `rotation_check` package, you can wrap your widget with `RotationCheck` and provide a callback function that will be triggered on orientation changes.

Hereâ€™s a simple example of how to implement it:

```dart
import 'package:flutter/material.dart';
import 'package:rotation_check/rotation_check.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: RotationCheck(
        onOrientationChanged: (Orientation orientation) {
          // Handle orientation change
          print('Orientation changed to: $orientation');
        },
        child: Scaffold(
          appBar: AppBar(title: Text('Rotation Check Example')),
          body: Center(child: Text('Rotate your device!')),
        ),
      ),
    );
  }
}
```

In this example, the `onOrientationChanged` callback will print the new orientation to the console whenever the device is rotated.

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of Using the `rotation_check` Package

```dart
import 'package:flutter/material.dart';
import 'package:rotation_check/rotation_check.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: RotationCheck(
        // This callback is triggered whenever the device orientation changes
        onOrientationChanged: (Orientation orientation) {
          // Print the new orientation to the console
          print('Orientation changed to: $orientation');
        },
        child: Scaffold(
          appBar: AppBar(title: Text('Rotation Check Example')),
          body: Center(
            // Display a message based on the current orientation
            child: OrientationBuilder(
              builder: (context, orientation) {
                // Check the current orientation
                if (orientation == Orientation.portrait) {
                  return Text('Portrait Mode', style: TextStyle(fontSize: 24));
                } else {
                  return Text('Landscape Mode', style: TextStyle(fontSize: 24));
                }
              },
            ),
          ),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function starts the app by calling runApp with RealFlutter.
// 2. RealFlutter builds a MaterialApp with a RotationCheck widget.
// 3. The RotationCheck widget listens for orientation changes and triggers the onOrientationChanged callback.
// 4. Inside the Scaffold, an OrientationBuilder is used to determine the current orientation.
// 5. Depending on the orientation, it displays either "Portrait Mode" or "Landscape Mode" in the center of the screen.
// 6. The app responds dynamically to orientation changes, providing a responsive user experience.
```
<!-- END_MAIN -->
``` 

This structured approach provides a comprehensive understanding of the `rotation_check` package, guiding developers through its features, setup, and practical implementation.
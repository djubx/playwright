# Firestore Chat Flutter Package

## <-- START_DESCRIPTION -->

### Overview of the `firestore_chat` Package

The `firestore_chat` package is a powerful Flutter library designed to facilitate the development of real-time chat applications using Firebase Firestore as the backend. This package abstracts much of the complexity involved in setting up chat functionalities, allowing developers to focus on building engaging user interfaces and experiences.

### When to Use This Package

You should consider using the `firestore_chat` package when:
- You want to build a chat application quickly without dealing with the intricacies of Firebase Firestore directly.
- You need real-time messaging capabilities in your Flutter app.
- You are looking for a package that provides a simple API for managing chat messages, users, and chat rooms.

### Key Features

- **Real-time Messaging**: Automatically updates the chat interface as new messages are sent and received.
- **User Authentication**: Integrates seamlessly with Firebase Authentication to manage user sessions.
- **Message Storage**: Stores messages in Firestore, allowing for persistent chat history.
- **Customizable UI**: Provides a flexible UI that can be easily customized to fit your app's design.
- **Support for Multiple Chat Rooms**: Allows users to join different chat rooms and manage conversations effectively.

## <-- END_DESCRIPTION -->

## <-- START_TUTORIAL -->

### Setup Process

To get started with the `firestore_chat` package, follow these steps:

#### Step 1: Add Dependencies

Add the `firestore_chat` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  firestore_chat: ^latest_version
  firebase_core: ^latest_version
  cloud_firestore: ^latest_version
  firebase_auth: ^latest_version
```

Make sure to replace `^latest_version` with the latest version numbers available on [pub.dev](https://pub.dev).

#### Step 2: Configure Firebase

1. **Create a Firebase Project**: Go to the [Firebase Console](https://console.firebase.google.com/) and create a new project.
2. **Add Android/iOS App**: Follow the instructions to add your Flutter app to the Firebase project.
3. **Download Configuration Files**:
   - For Android, download `google-services.json` and place it in the `android/app` directory.
   - For iOS, download `GoogleService-Info.plist` and add it to your Xcode project.

4. **Update Android Configuration**:
   - In `android/build.gradle`, add the Google services classpath:
     ```groovy
     dependencies {
         classpath 'com.google.gms:google-services:4.3.10' // Check for the latest version
     }
     ```
   - In `android/app/build.gradle`, apply the Google services plugin:
     ```groovy
     apply plugin: 'com.google.gms.google-services'
     ```

5. **Update iOS Configuration**:
   - Ensure you have the following in your `ios/Podfile`:
     ```ruby
     platform :ios, '10.0'
     use_frameworks!
     ```

#### Step 3: Initialize Firebase

In your `main.dart` file, initialize Firebase before running the app:

```dart
import 'package:firebase_core/firebase_core.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp();
  runApp(MyApp());
}
```

### Platform-Specific Details

- **Android**: Ensure you have the correct permissions in your `AndroidManifest.xml` for internet access.
- **iOS**: Make sure to enable background modes for your app if you want to support notifications.

## <-- END_TUTORIAL -->

## <-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:firestore_chat/firestore_chat.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(); // Initialize Firebase
  runApp(RealFlutter()); // Run the main app
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Firestore Chat',
      theme: ThemeData(primarySwatch: Colors.blue),
      home: ChatScreen(), // Navigate to the chat screen
    );
  }
}

class ChatScreen extends StatefulWidget {
  @override
  _ChatScreenState createState() => _ChatScreenState();
}

class _ChatScreenState extends State<ChatScreen> {
  final FirebaseAuth _auth = FirebaseAuth.instance; // Firebase Auth instance
  final FirebaseFirestore _firestore = FirebaseFirestore.instance; // Firestore instance
  User? user; // Current user

  @override
  void initState() {
    super.initState();
    _auth.signInAnonymously().then((result) {
      setState(() {
        user = result.user; // Set the current user
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Chat Room')), // App bar title
      body: user == null
          ? Center(child: CircularProgressIndicator()) // Loading indicator
          : FirestoreChat(
              user: user!, // Pass the current user
              firestore: _firestore, // Pass Firestore instance
              chatRoomId: 'general', // Chat room ID
            ),
    );
  }
}

// The above code sets up a simple chat application using Firestore Chat.
// 1. The app initializes Firebase and runs the RealFlutter widget.
// 2. The ChatScreen widget handles user authentication and displays the chat interface.
// 3. When the user is authenticated, the FirestoreChat widget is displayed, allowing real-time messaging in the 'general' chat room.
// 4. The FirestoreChat widget manages message sending, receiving, and displaying in real-time.

```

## <-- END_MAIN -->

### Summary of Application Flow

The application flow is straightforward:
- The app initializes Firebase and sets up the main widget.
- The `ChatScreen` widget handles user authentication using Firebase Auth.
- Once authenticated, the `FirestoreChat` widget is displayed, which connects to the Firestore database and allows users to send and receive messages in real-time.
- The chat interface updates automatically as new messages are sent or received, providing a seamless chat experience.

This structure allows developers to quickly implement a chat feature in their Flutter applications while leveraging the power of Firebase Firestore for real-time data management.
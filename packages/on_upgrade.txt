```markdown
<!-- START_DESCRIPTION -->
# Overview of the on_upgrade Flutter Package

The `on_upgrade` package is a Flutter library designed to facilitate the management of app upgrades. It provides developers with a straightforward way to check for updates, prompt users to upgrade, and handle the upgrade process seamlessly. This package is particularly useful for applications that require regular updates to ensure users have the latest features and security patches.

## When to Use

You should consider using the `on_upgrade` package in scenarios such as:
- **Regular App Updates**: If your app frequently receives updates, this package can help manage the upgrade process.
- **Critical Security Fixes**: For apps that handle sensitive data, ensuring users are on the latest version is crucial.
- **Feature Rollouts**: When introducing new features that enhance user experience, prompting users to upgrade can be beneficial.

## Key Features

- **Version Checking**: Automatically checks the current app version against the latest available version.
- **User Prompts**: Provides customizable prompts to encourage users to upgrade.
- **Platform Support**: Works seamlessly on both Android and iOS platforms.
- **Easy Integration**: Simple API that can be integrated into existing Flutter applications with minimal effort.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the on_upgrade Package

## Installation

To get started with the `on_upgrade` package, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  on_upgrade: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run `flutter pub get` to install the package.

## Platform-Specific Configuration

### Android

1. Open your `AndroidManifest.xml` file located at `android/app/src/main/AndroidManifest.xml`.
2. Ensure you have the necessary permissions to access the internet:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
```

### iOS

1. Open your `Info.plist` file located at `ios/Runner/Info.plist`.
2. Add the following key to allow your app to access the internet:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

## Using the Package

To use the `on_upgrade` package, you will typically follow these steps:

1. Import the package in your Dart file:

```dart
import 'package:on_upgrade/on_upgrade.dart';
```

2. Initialize the package and check for updates:

```dart
void checkForUpdates() async {
  final upgrade = OnUpgrade();
  final isUpdateAvailable = await upgrade.checkForUpdate();

  if (isUpdateAvailable) {
    // Prompt user to upgrade
    upgrade.promptUpgrade();
  }
}
```

3. Call the `checkForUpdates` function at an appropriate point in your app, such as during the app's startup.

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of Using the on_upgrade Package

```dart
import 'package:flutter/material.dart';
import 'package:on_upgrade/on_upgrade.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'On Upgrade Example',
      home: HomeScreen(),
    );
  }
}

class HomeScreen extends StatefulWidget {
  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  @override
  void initState() {
    super.initState();
    // Check for updates when the app starts
    checkForUpdates();
  }

  void checkForUpdates() async {
    final upgrade = OnUpgrade();
    // Check if an update is available
    final isUpdateAvailable = await upgrade.checkForUpdate();

    if (isUpdateAvailable) {
      // If an update is available, prompt the user to upgrade
      upgrade.promptUpgrade();
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('On Upgrade Example'),
      ),
      body: Center(
        child: Text('Welcome to the On Upgrade Example!'),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts and the main function runs, initializing the RealFlutter widget.
// 2. The RealFlutter widget builds the MaterialApp and sets HomeScreen as the home widget.
// 3. In the HomeScreen's initState, the checkForUpdates function is called.
// 4. The checkForUpdates function creates an instance of OnUpgrade and checks for updates.
// 5. If an update is available, the user is prompted to upgrade.
// 6. The user sees a welcome message in the center of the screen.
```
<!-- END_MAIN -->
``` 

This structured blog post provides a comprehensive overview of the `on_upgrade` package, guiding developers through its features, setup, and practical usage with a complete example.
<-- START_DESCRIPTION -->

The Alchemist Flutter package is a powerful tool for creating and managing experiments in Flutter applications. It allows developers to easily create, manage, and track experiments, and to make data-driven decisions about their app's features and functionality.

The Alchemist package is particularly useful for developers who want to test different versions of their app's features, such as UI elements, algorithms, or even entire workflows. It provides a simple and intuitive API for creating and managing experiments, and it integrates seamlessly with Flutter's built-in widgets and APIs.

Some of the key features of the Alchemist package include:

*   Simple and intuitive API for creating and managing experiments
*   Support for multiple experiment types, including A/B testing and multivariate testing
*   Integration with Flutter's built-in widgets and APIs
*   Support for tracking and analyzing experiment results
*   Customizable and extensible architecture

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

To use the Alchemist package in your Flutter app, follow these steps:

1.  Add the Alchemist package to your pubspec.yaml file:

    ```yml
dependencies:
  alchemist: ^1.0.0
```

2.  Run `flutter pub get` to install the package.
3.  Import the Alchemist package in your Dart file:

    ```dart
import 'package:alchemist/alchemist.dart';
```

4.  Create an instance of the Alchemist class:

    ```dart
final alchemist = Alchemist();
```

5.  Create a new experiment using the `alchemist.createExperiment` method:

    ```dart
final experiment = alchemist.createExperiment(
  'my_experiment',
  variants: [
    Variant(
      'variant_1',
      () => Text('Variant 1'),
    ),
    Variant(
      'variant_2',
      () => Text('Variant 2'),
    ),
  ],
);
```

6.  Use the `experiment.variant` property to get the current variant:

    ```dart
final variant = experiment.variant;
```

7.  Use the `variant.value` property to get the value of the current variant:

    ```dart
final value = variant.value;
```

8.  Use the `alchemist.track` method to track the experiment results:

    ```dart
alchemist.track(
  'my_experiment',
  'variant_1',
  'some_event',
);
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:alchemist/alchemist.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Alchemist Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final alchemist = Alchemist();
  Experiment? _experiment;

  @override
  void initState() {
    super.initState();
    _createExperiment();
  }

  void _createExperiment() {
    // Create a new experiment with two variants
    _experiment = alchemist.createExperiment(
      'my_experiment',
      variants: [
        Variant(
          'variant_1',
          () => Text('Variant 1'),
        ),
        Variant(
          'variant_2',
          () => Text('Variant 2'),
        ),
      ],
    );
  }

  void _trackEvent() {
    // Track an event for the current variant
    alchemist.track(
      'my_experiment',
      _experiment!.variant.id,
      'some_event',
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Alchemist Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            // Display the current variant
            _experiment!.variant.value,
            SizedBox(height: 20),
            // Button to track an event
            ElevatedButton(
              onPressed: _trackEvent,
              child: Text('Track Event'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The app starts and creates a new instance of the Alchemist class.
// 2. The app creates a new experiment with two variants.
// 3. The app displays the current variant.
// 4. When the user clicks the "Track Event" button, the app tracks an event for the current variant.
// 5. The app continues to display the current variant and allow the user to track events.
```

<-- END_MAIN -->
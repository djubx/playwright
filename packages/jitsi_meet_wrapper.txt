<-- START_DESCRIPTION -->

# Jitsi Meet Wrapper Flutter Package
=====================================

The `jitsi_meet_wrapper` Flutter package is a wrapper around the Jitsi Meet SDK, allowing developers to easily integrate video conferencing capabilities into their Flutter applications. This package provides a simple and convenient API for creating and managing video conferences, making it ideal for applications that require real-time communication.

## When to Use This Package
---------------------------

You should use this package when you need to add video conferencing capabilities to your Flutter application. This package is particularly useful for applications that require:

* Real-time video communication
* Screen sharing
* Audio and video conferencing
* Chat functionality

## Features
------------

The `jitsi_meet_wrapper` package provides the following features:

* Create and manage video conferences
* Join and leave conferences
* Share screen and audio
* Send and receive chat messages
* Customize conference settings

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `jitsi_meet_wrapper` package, follow these steps:

### Step 1: Add the Package to Your Pubspec.yaml File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  jitsi_meet_wrapper: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:jitsi_meet_wrapper/jitsi_meet_wrapper.dart';
```
### Step 3: Initialize the Package

Initialize the package by calling the `init` method:
```dart
await JitsiMeetWrapper.init();
```
### Step 4: Create a Conference

Create a conference by calling the `createConference` method:
```dart
JitsiMeetConference conference = await JitsiMeetWrapper.createConference(
  subject: 'My Conference',
  password: 'my_password',
);
```
### Step 5: Join the Conference

Join the conference by calling the `joinConference` method:
```dart
await conference.join();
```
### Platform-Specific Details

#### Android

* Add the following permissions to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.INTERNET" />
<uses-permission android:name="android.permission.CAMERA" />
<uses-permission android:name="android.permission.RECORD_AUDIO" />
```
* Add the following code to your `MainActivity.java` file:
```java
@Override
protected void onCreate(Bundle savedInstanceState) {
  super.onCreate(savedInstanceState);
  JitsiMeetWrapper.init(this);
}
```
#### iOS

* Add the following code to your `Info.plist` file:
```xml
<key>NSCameraUsageDescription</key>
<string>This app needs camera access to work</string>
<key>NSMicrophoneUsageDescription</key>
<string>This app needs microphone access to work</string>
```
* Add the following code to your `AppDelegate.m` file:
```objectivec
- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
  [JitsiMeetWrapper init];
  return YES;
}
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:jitsi_meet_wrapper/jitsi_meet_wrapper.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Jitsi Meet Wrapper Example',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  JitsiMeetConference _conference;

  @override
  void initState() {
    super.initState();
    _initJitsiMeet();
  }

  Future<void> _initJitsiMeet() async {
    await JitsiMeetWrapper.init();
  }

  Future<void> _createConference() async {
    _conference = await JitsiMeetWrapper.createConference(
      subject: 'My Conference',
      password: 'my_password',
    );
  }

  Future<void> _joinConference() async {
    await _conference.join();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Jitsi Meet Wrapper Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: _createConference,
              child: Text('Create Conference'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _joinConference,
              child: Text('Join Conference'),
            ),
          ],
        ),
      ),
    );
  }
}

// Application flow:
// 1. The app initializes the Jitsi Meet Wrapper package in the `_initJitsiMeet` method.
// 2. The user clicks the "Create Conference" button, which calls the `_createConference` method.
// 3. The `_createConference` method creates a new conference using the `JitsiMeetWrapper.createConference` method.
// 4. The user clicks the "Join Conference" button, which calls the `_joinConference` method.
// 5. The `_joinConference` method joins the conference using the `JitsiMeetConference.join` method.
```

// Final summary:
// The Jitsi Meet Wrapper package is used to create and manage video conferences in a Flutter app.
// The app initializes the package, creates a conference, and joins the conference using the package's methods.
// The app's UI is updated to reflect the conference's state.

<-- END_MAIN -->
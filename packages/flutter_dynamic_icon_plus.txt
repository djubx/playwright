<-- START_DESCRIPTION -->

# Flutter Dynamic Icon Plus Package
=====================================

The `flutter_dynamic_icon_plus` package is a powerful tool for Flutter developers that allows them to change the app icon dynamically. This package provides a simple and efficient way to update the app icon, which can be useful in various scenarios such as:

* Changing the app icon based on the user's preferences
* Updating the app icon to reflect changes in the app's theme or branding
* Creating a customizable app icon that can be changed by the user

The package supports both Android and iOS platforms and provides a simple API for updating the app icon.

### Features

* Supports both Android and iOS platforms
* Simple API for updating the app icon
* Allows for dynamic changing of the app icon
* Supports various image formats such as PNG, JPEG, and GIF

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `flutter_dynamic_icon_plus` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_dynamic_icon_plus: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:flutter_dynamic_icon_plus/flutter_dynamic_icon_plus.dart';
```
### Step 3: Configure the Package

Configure the package by calling the `init` method:
```dart
await FlutterDynamicIconPlus.init();
```
### Step 4: Update the App Icon

Update the app icon by calling the `updateIcon` method:
```dart
await FlutterDynamicIconPlus.updateIcon('new_icon.png');
```
### Platform-Specific Details

#### Android

* Make sure to add the `android.permission.WRITE_EXTERNAL_STORAGE` permission to your `AndroidManifest.xml` file.
* The package uses the `android.content.pm.PackageManager` class to update the app icon.

#### iOS

* Make sure to add the `NSPhotoLibraryUsageDescription` key to your `Info.plist` file.
* The package uses the `UIKit.UIApplication` class to update the app icon.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_dynamic_icon_plus/flutter_dynamic_icon_plus.dart';

void main() async {
  // Initialize the package
  await FlutterDynamicIconPlus.init();

  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Dynamic Icon Plus Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  String _currentIcon = 'old_icon.png';

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Dynamic Icon Plus Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Current Icon:',
              style: TextStyle(fontSize: 24),
            ),
            Image.asset(_currentIcon),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () async {
                // Update the app icon
                await FlutterDynamicIconPlus.updateIcon('new_icon.png');
                setState(() {
                  _currentIcon = 'new_icon.png';
                });
              },
              child: Text('Update Icon'),
            ),
          ],
        ),
      ),
    );
  }
}

// Application flow:
// 1. The app initializes the FlutterDynamicIconPlus package.
// 2. The app displays the current icon.
// 3. The user clicks the "Update Icon" button.
// 4. The app updates the icon using the FlutterDynamicIconPlus package.
// 5. The app displays the new icon.

// Summary:
// The app demonstrates how to use the FlutterDynamicIconPlus package to update the app icon dynamically.
// The app initializes the package, displays the current icon, and updates the icon when the user clicks the "Update Icon" button.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Unicode Emojis Flutter Package
================================

The `unicode_emojis` Flutter package provides a simple way to use Unicode emojis in your Flutter applications. It allows you to easily include emojis in your app's text, without having to worry about platform-specific implementations.

## When to Use This Package
---------------------------

You should use this package when you want to include Unicode emojis in your Flutter app's text. This package is particularly useful when you want to:

* Display emojis in a `Text` widget
* Use emojis in a `TextField` or `TextFormField`
* Include emojis in a `Button` or `IconButton`

## Features
------------

The `unicode_emojis` package provides the following features:

* Easy-to-use API for including Unicode emojis in your app's text
* Platform-specific implementations for Android and iOS
* Support for a wide range of Unicode emojis

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Using the Unicode Emojis Package
=============================================

## Step 1: Add the Package to Your Pubspec
-----------------------------------------

To use the `unicode_emojis` package, you need to add it to your `pubspec.yaml` file. Add the following line to the `dependencies` section:
```yml
dependencies:
  unicode_emojis: ^1.0.0
```
Then, run `flutter pub get` to install the package.

## Step 2: Import the Package
---------------------------

In your Dart file, import the `unicode_emojis` package:
```dart
import 'package:unicode_emojis/unicode_emojis.dart';
```
## Step 3: Use the Package
-------------------------

To use the package, simply call the `UnicodeEmojis` class and pass the emoji you want to display:
```dart
Text(UnicodeEmojis.smilingFaceWithHeartEyes)
```
This will display the üòç emoji in your app.

## Platform-Specific Details
---------------------------

The `unicode_emojis` package uses platform-specific implementations to display emojis. On Android, it uses the `android.graphics.drawable.Drawable` class to display emojis. On iOS, it uses the `UIImage` class to display emojis.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:unicode_emojis/unicode_emojis.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Unicode Emojis Demo',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Unicode Emojis Demo'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              // Display the smiling face with heart eyes emoji
              Text(UnicodeEmojis.smilingFaceWithHeartEyes,
                  style: TextStyle(fontSize: 48)),

              // Display the smiling face with smiling eyes emoji
              Text(UnicodeEmojis.smilingFaceWithSmilingEyes,
                  style: TextStyle(fontSize: 48)),

              // Display the smiling face with sunglasses emoji
              Text(UnicodeEmojis.smilingFaceWithSunglasses,
                  style: TextStyle(fontSize: 48)),
            ],
          ),
        ),
      ),
    );
  }
}

// The app starts by running the main function, which calls runApp with an instance of RealFlutter.
// The RealFlutter class is a stateless widget that returns a MaterialApp.
// The MaterialApp has a title and a home property, which is set to a Scaffold.
// The Scaffold has an appBar and a body property.
// The appBar is set to an AppBar with a title.
// The body is set to a Center widget with a Column child.
// The Column has three Text children, each displaying a different emoji.
// The emojis are displayed using the UnicodeEmojis class.
```

<-- END_MAIN -->
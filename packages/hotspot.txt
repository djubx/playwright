```markdown
<-- START_DESCRIPTION -->

# Hotspot Flutter Package: An Overview

The `hotspot` Flutter package is a powerful tool designed to help developers create interactive and engaging user interfaces by highlighting specific areas of the app. This package is particularly useful for onboarding new users, guiding them through the app's features, or drawing attention to new updates or promotions.

## When to Use the Hotspot Package

- **User Onboarding**: Highlight key features of your app to new users.
- **Feature Discovery**: Introduce new features to existing users.
- **Guided Tours**: Provide a step-by-step walkthrough of complex workflows.
- **Promotions and Updates**: Draw attention to special offers or new content.

## Key Features

- **Customizable Overlays**: Easily customize the appearance of the hotspot overlays to match your app's theme.
- **Flexible Positioning**: Position hotspots anywhere on the screen with precision.
- **Interactive Elements**: Allow users to interact with the hotspots to learn more or proceed to the next step.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS platforms.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Hotspot Package

In this tutorial, we will walk through the process of setting up and using the `hotspot` package in a Flutter application. We will cover platform-specific configurations for both Android and iOS.

## Installation

Add the `hotspot` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  hotspot: ^1.0.0
```

Run `flutter pub get` to install the package.

## Android Configuration

For Android, ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```gradle
android {
    defaultConfig {
        minSdkVersion 21
    }
}
```

## iOS Configuration

For iOS, make sure your `ios/Podfile` has the platform set to at least iOS 10:

```ruby
platform :ios, '10.0'
```

## Using the Hotspot Package

1. **Import the Package**: Start by importing the package in your Dart file.

   ```dart
   import 'package:hotspot/hotspot.dart';
   ```

2. **Initialize Hotspots**: Define the hotspots you want to display in your app.

3. **Display Hotspots**: Use the `RealFlutter` class to manage and display hotspots.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:hotspot/hotspot.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Hotspot Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: HomeScreen(),
    );
  }
}

class HomeScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Initialize a list of hotspots
    final List<Hotspot> hotspots = [
      Hotspot(
        position: Offset(100, 200),
        radius: 50,
        description: 'This is a feature!',
      ),
      Hotspot(
        position: Offset(200, 400),
        radius: 50,
        description: 'Check this out!',
      ),
    ];

    return Scaffold(
      appBar: AppBar(
        title: Text('Hotspot Example'),
      ),
      body: Stack(
        children: [
          // Main content of the app
          Center(
            child: Text('Welcome to the Hotspot Demo!'),
          ),
          // Overlay hotspots using RealFlutter
          RealFlutter(
            hotspots: hotspots,
            onHotspotTap: (hotspot) {
              // Handle hotspot tap
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(content: Text(hotspot.description)),
              );
            },
          ),
        ],
      ),
    );
  }
}

// Application Flow:
// 1. The app starts with the `MyApp` widget, which sets up the MaterialApp.
// 2. The `HomeScreen` widget is the main screen, displaying a simple text.
// 3. A list of `Hotspot` objects is created, each with a position and description.
// 4. The `RealFlutter` widget is used to overlay these hotspots on the screen.
// 5. When a hotspot is tapped, a SnackBar displays the description of the hotspot.
```

<-- END_MAIN -->
```
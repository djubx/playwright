<-- START_DESCRIPTION -->

# Zoom Widget Flutter Package
The `zoom_widget` Flutter package is a powerful tool for adding zooming functionality to your Flutter applications. It provides a simple and intuitive way to enable zooming on any widget, making it perfect for applications that require image or map zooming.

## Features
- Supports both Android and iOS platforms
- Easy to use and integrate into existing applications
- Customizable zoom levels and animation duration
- Supports both single-touch and multi-touch gestures

## When to Use
The `zoom_widget` package is ideal for applications that require image or map zooming, such as:

- Image editing or viewing applications
- Map-based applications
- Document or PDF viewers

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Zoom Widget Package
To use the `zoom_widget` package, follow these steps:

### Step 1: Add the Package to Your Project
Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter:
    sdk: flutter
  zoom_widget: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package
Import the package in your Dart file:
```dart
import 'package:zoom_widget/zoom_widget.dart';
```
### Step 3: Use the Zoom Widget
Wrap the widget you want to zoom with the `ZoomWidget`:
```dart
ZoomWidget(
  child: Image.asset('assets/image.jpg'),
  maxZoom: 5.0,
  minZoom: 1.0,
  animationDuration: Duration(milliseconds: 200),
)
```
### Platform-Specific Details
- Android: No additional configuration required.
- iOS: Add the following line to your `Info.plist` file:
```xml
<key>NSPhotoLibraryUsageDescription</key>
<string>This app needs access to your photo library to display images.</string>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:zoom_widget/zoom_widget.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Zoom Widget Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Zoom Widget Demo'),
      ),
      body: Center(
        child: ZoomWidget(
          // Step 1: Wrap the widget you want to zoom with the ZoomWidget
          child: Image.asset('assets/image.jpg'),
          // Step 2: Set the maximum zoom level
          maxZoom: 5.0,
          // Step 3: Set the minimum zoom level
          minZoom: 1.0,
          // Step 4: Set the animation duration
          animationDuration: Duration(milliseconds: 200),
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user opens the app and is presented with an image.
// 2. The user can zoom in and out of the image using single-touch or multi-touch gestures.
// 3. The zoom level is limited to the maximum and minimum values set in the ZoomWidget.
// 4. The animation duration is used to smoothly transition between zoom levels.
// 5. The user can pan the image while zoomed in.
```

// Summary: The code flows by first setting up the ZoomWidget with the desired image, maximum and minimum zoom levels, and animation duration. The user can then interact with the image by zooming in and out, panning, and using single-touch or multi-touch gestures. The ZoomWidget handles the zooming and panning functionality, providing a smooth and intuitive user experience.

<-- END_MAIN -->
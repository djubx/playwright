<-- START_DESCRIPTION -->

Native Pdf Renderer
=====================

The `native_pdf_renderer` Flutter package is a powerful tool for rendering PDF documents natively on Android and iOS platforms. It provides a simple and efficient way to display PDFs within a Flutter application, eliminating the need for third-party libraries or plugins.

When to Use
------------

The `native_pdf_renderer` package is ideal for applications that require PDF rendering, such as:

* Document viewers
* E-book readers
* Report generators
* Invoice and receipt displays

Features
--------

* Native PDF rendering on Android and iOS platforms
* Support for PDF documents with multiple pages
* Zooming and panning capabilities
* Customizable rendering settings

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
----------------

### Step 1: Add the Package to Your Project

Add the `native_pdf_renderer` package to your `pubspec.yaml` file:
```yml
dependencies:
  flutter:
    sdk: flutter
  native_pdf_renderer: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the `native_pdf_renderer` package in your Dart file:
```dart
import 'package:native_pdf_renderer/native_pdf_renderer.dart';
```
### Step 3: Load the PDF Document

Load the PDF document using the `PdfDocument` class:
```dart
PdfDocument _pdfDocument;

Future<void> _loadPdf() async {
  final pdfFile = await rootBundle.load('assets/example.pdf');
  _pdfDocument = await PdfDocument.openFile(pdfFile);
}
```
### Step 4: Create a PdfPageView

Create a `PdfPageView` widget to display the PDF pages:
```dart
PdfPageView(
  document: _pdfDocument,
  onPageChanged: (page) {
    print('Page changed to $page');
  },
)
```
### Platform-Specific Details

#### Android

On Android, you need to add the following permissions to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
```
#### iOS

On iOS, you need to add the following lines to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:native_pdf_renderer/native_pdf_renderer.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  PdfDocument _pdfDocument;

  Future<void> _loadPdf() async {
    // Load the PDF document from assets
    final pdfFile = await rootBundle.load('assets/example.pdf');
    _pdfDocument = await PdfDocument.openFile(pdfFile);
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Native Pdf Renderer Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              // Display the PDF pages
              Expanded(
                child: _pdfDocument != null
                    ? PdfPageView(
                        document: _pdfDocument,
                        onPageChanged: (page) {
                          print('Page changed to $page');
                        },
                      )
                    : Center(
                        child: CircularProgressIndicator(),
                      ),
              ),
              // Load the PDF document
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _loadPdf,
                child: Text('Load Pdf'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user opens the app and sees a "Load Pdf" button.
// 2. When the user clicks the button, the `_loadPdf` function is called.
// 3. The `_loadPdf` function loads the PDF document from assets using `rootBundle`.
// 4. Once the PDF document is loaded, the `_pdfDocument` variable is updated.
// 5. The `PdfPageView` widget is used to display the PDF pages.
// 6. When the user navigates through the pages, the `onPageChanged` callback is called.
// 7. The `onPageChanged` callback prints the current page number to the console.
```

// Final summary:
// The code flows as follows: the user opens the app, clicks the "Load Pdf" button, and the PDF document is loaded from assets. The PDF pages are then displayed using the `PdfPageView` widget. When the user navigates through the pages, the current page number is printed to the console.

<-- END_MAIN -->
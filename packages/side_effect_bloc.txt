<-- START_DESCRIPTION -->

# Side Effect Bloc Package
The `side_effect_bloc` package is a Flutter package that provides a simple and efficient way to manage side effects in your application. Side effects are actions that occur as a result of a specific event or action, such as making an API call or updating the database.

## When to Use
This package is useful when you need to perform complex operations that involve multiple steps, such as:

* Making API calls and handling responses
* Updating the database and handling errors
* Performing complex calculations and updating the UI

## Features
The `side_effect_bloc` package provides the following features:

* A simple and efficient way to manage side effects
* Support for multiple side effects
* Error handling and logging
* Integration with the Flutter widget tree

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
To use the `side_effect_bloc` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  side_effect_bloc: ^1.0.0
```
2. Import the package in your Dart file:
```dart
import 'package:side_effect_bloc/side_effect_bloc.dart';
```
3. Create a new instance of the `SideEffectBloc` class:
```dart
class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final _sideEffectBloc = SideEffectBloc();

  @override
  void dispose() {
    _sideEffectBloc.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    // ...
  }
}
```
4. Define your side effects by creating a new instance of the `SideEffect` class:
```dart
class MySideEffect extends SideEffect {
  @override
  Future<void> execute() async {
    // Perform some complex operation here
  }
}
```
5. Add your side effects to the `SideEffectBloc` instance:
```dart
_sideEffectBloc.addSideEffect(MySideEffect());
```
6. Use the `SideEffectBloc` instance to execute your side effects:
```dart
_sideEffectBloc.executeSideEffects();
```

### Platform-Specific Details
The `side_effect_bloc` package works on both Android and iOS platforms. However, there are some platform-specific details to keep in mind:

* On Android, the package uses the `android.os.Handler` class to execute side effects on the main thread.
* On iOS, the package uses the `dispatch_async` function to execute side effects on the main thread.

### Configurations and Optimizations
The `side_effect_bloc` package provides several configurations and optimizations that you can use to customize its behavior:

* You can set the maximum number of side effects that can be executed concurrently using the `maxConcurrentSideEffects` property.
* You can set the timeout for each side effect using the `timeout` property.
* You can enable or disable logging using the `loggingEnabled` property.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:side_effect_bloc/side_effect_bloc.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final _sideEffectBloc = SideEffectBloc();

  @override
  void dispose() {
    _sideEffectBloc.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    // Create a new instance of the SideEffect class
    class MySideEffect extends SideEffect {
      @override
      Future<void> execute() async {
        // Perform some complex operation here
        print('Executing side effect...');
        await Future.delayed(Duration(seconds: 2));
        print('Side effect executed!');
      }
    }

    // Add the side effect to the SideEffectBloc instance
    _sideEffectBloc.addSideEffect(MySideEffect());

    // Use the SideEffectBloc instance to execute the side effect
    _sideEffectBloc.executeSideEffects();

    return Scaffold(
      appBar: AppBar(
        title: Text('Side Effect Bloc Example'),
      ),
      body: Center(
        child: Text('Hello, World!'),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The RealFlutter widget is created and the _sideEffectBloc instance is initialized.
// 2. The MySideEffect class is defined and added to the _sideEffectBloc instance.
// 3. The _sideEffectBloc instance is used to execute the side effect.
// 4. The side effect is executed and the complex operation is performed.
// 5. The side effect is completed and the result is printed to the console.
// 6. The RealFlutter widget is disposed and the _sideEffectBloc instance is disposed.

// In summary, the code flows as follows:
// RealFlutter widget -> _sideEffectBloc instance -> MySideEffect class -> execute side effect -> complex operation -> result -> dispose
```

<-- END_MAIN -->
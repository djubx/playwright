<-- START_DESCRIPTION -->

# Assets Generator Flutter Package
=====================================

The `assets_generator` Flutter package is a powerful tool for generating assets in Flutter applications. It provides a simple and efficient way to generate images, fonts, and other assets, reducing the need for manual creation and management.

### When to Use

The `assets_generator` package is particularly useful when:

* You need to generate a large number of assets, such as icons or images, with varying sizes and resolutions.
* You want to automate the process of generating assets, reducing the risk of human error and saving time.
* You need to generate assets dynamically, based on user input or other factors.

### Features

The `assets_generator` package offers the following features:

* Support for generating images, fonts, and other assets.
* Ability to generate assets in various formats, including PNG, JPEG, and SVG.
* Support for custom asset sizes and resolutions.
* Ability to automate asset generation using scripts and build tools.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Assets Generator Package
=============================================

To use the `assets_generator` package, follow these steps:

### Step 1: Add the Package to Your Flutter Project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  assets_generator: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:assets_generator/assets_generator.dart';
```
### Step 3: Configure the Package

Configure the package by creating an instance of the `AssetsGenerator` class:
```dart
final assetsGenerator = AssetsGenerator();
```
### Step 4: Generate Assets

Use the `generate` method to generate assets:
```dart
final asset = await assetsGenerator.generate(
  type: AssetType.image,
  format: AssetFormat.png,
  size: Size(100, 100),
);
```
### Platform-Specific Details

* Android: Make sure to add the following line to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
```
* iOS: Make sure to add the following line to your `Info.plist` file:
```xml
<key>NSPhotoLibraryAddUsageDescription</key>
<string>This app needs access to the photo library to generate assets.</string>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:assets_generator/assets_generator.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Assets Generator Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final assetsGenerator = AssetsGenerator();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Assets Generator Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: _generateAsset,
              child: Text('Generate Asset'),
            ),
            SizedBox(height: 20),
            Text('Generated Asset:'),
            _assetWidget(),
          ],
        ),
      ),
    );
  }

  Future<void> _generateAsset() async {
    final asset = await assetsGenerator.generate(
      type: AssetType.image,
      format: AssetFormat.png,
      size: Size(100, 100),
    );
    setState(() {});
  }

  Widget _assetWidget() {
    // Return a widget that displays the generated asset
    // For example, an Image widget:
    return Image.asset('assets/generated_asset.png');
  }
}

// Application flow:
// 1. The user presses the "Generate Asset" button.
// 2. The _generateAsset method is called, which generates an asset using the assetsGenerator.
// 3. The generated asset is stored in the assets directory.
// 4. The _assetWidget method is called, which returns a widget that displays the generated asset.
// 5. The widget is displayed on the screen.
```

// Final summary:
// The code flows as follows: the user presses the "Generate Asset" button, which calls the _generateAsset method. This method generates an asset using the assetsGenerator and stores it in the assets directory. The _assetWidget method is then called, which returns a widget that displays the generated asset. Finally, the widget is displayed on the screen.

<-- END_MAIN -->
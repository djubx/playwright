<-- START_DESCRIPTION -->

# Clean API Flutter Package
================================

The `clean_api` Flutter package is designed to simplify the process of building clean, scalable, and maintainable APIs in Flutter applications. It provides a set of tools and structures to help developers separate concerns, reduce boilerplate code, and improve overall code quality.

## When to Use
--------------

The `clean_api` package is ideal for building complex Flutter applications that require a robust and maintainable API layer. It is particularly useful when working with large datasets, multiple API endpoints, and complex business logic.

## Features
------------

*   **Modular architecture**: The package promotes a modular architecture, where each feature is separated into its own module, making it easier to manage and maintain.
*   **API client**: The package provides a built-in API client that handles HTTP requests, error handling, and caching.
*   **Repository pattern**: The package implements the repository pattern, which abstracts the data storage and retrieval logic, making it easier to switch between different data sources.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

## Setup
--------

To use the `clean_api` package, add it to your `pubspec.yaml` file:

```yml
dependencies:
  clean_api: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Configuration
--------------

To configure the package, create a new file called `api_config.dart` with the following content:

```dart
import 'package:clean_api/clean_api.dart';

class ApiConfig {
  static const String baseUrl = 'https://api.example.com';
  static const String apiKey = 'YOUR_API_KEY';
}
```

## Creating a Repository
-------------------------

To create a repository, create a new file called `user_repository.dart` with the following content:

```dart
import 'package:clean_api/clean_api.dart';
import 'package:your_app/api_config.dart';

class UserRepository {
  final ApiClient _apiClient;

  UserRepository(this._apiClient);

  Future<List<User>> getUsers() async {
    final response = await _apiClient.get('users');
    return response.data.map((json) => User.fromJson(json)).toList();
  }
}
```

## Creating a Service
----------------------

To create a service, create a new file called `user_service.dart` with the following content:

```dart
import 'package:clean_api/clean_api.dart';
import 'package:your_app/user_repository.dart';

class UserService {
  final UserRepository _userRepository;

  UserService(this._userRepository);

  Future<List<User>> getUsers() async {
    return _userRepository.getUsers();
  }
}
```

## Using the Service
---------------------

To use the service, create a new file called `main.dart` with the following content:

```dart
import 'package:flutter/material.dart';
import 'package:clean_api/clean_api.dart';
import 'package:your_app/user_service.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Clean API Demo',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Clean API Demo'),
        ),
        body: FutureBuilder(
          future: UserService(UserRepository(ApiClient())).getUsers(),
          builder: (context, snapshot) {
            if (snapshot.hasData) {
              return ListView.builder(
                itemCount: snapshot.data.length,
                itemBuilder: (context, index) {
                  return ListTile(
                    title: Text(snapshot.data[index].name),
                  );
                },
              );
            } else {
              return Center(
                child: CircularProgressIndicator(),
              );
            }
          },
        ),
      ),
    );
  }
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
// Import the necessary packages
import 'package:flutter/material.dart';
import 'package:clean_api/clean_api.dart';

// Create a new class called RealFlutter
class RealFlutter {
  // Create a new method called main
  static void main() {
    // Run the app
    runApp(MyApp());
  }
}

// Create a new class called MyApp
class MyApp extends StatelessWidget {
  // Create a new method called build
  @override
  Widget build(BuildContext context) {
    // Return a new MaterialApp
    return MaterialApp(
      // Set the title of the app
      title: 'Clean API Demo',
      // Set the home of the app
      home: Scaffold(
        // Create a new AppBar
        appBar: AppBar(
          // Set the title of the AppBar
          title: Text('Clean API Demo'),
        ),
        // Create a new FutureBuilder
        body: FutureBuilder(
          // Set the future of the FutureBuilder
          future: UserService(UserRepository(ApiClient())).getUsers(),
          // Create a new builder
          builder: (context, snapshot) {
            // Check if the snapshot has data
            if (snapshot.hasData) {
              // Return a new ListView.builder
              return ListView.builder(
                // Set the itemCount of the ListView.builder
                itemCount: snapshot.data.length,
                // Create a new itemBuilder
                itemBuilder: (context, index) {
                  // Return a new ListTile
                  return ListTile(
                    // Set the title of the ListTile
                    title: Text(snapshot.data[index].name),
                  );
                },
              );
            } else {
              // Return a new Center
              return Center(
                // Create a new CircularProgressIndicator
                child: CircularProgressIndicator(),
              );
            }
          },
        ),
      ),
    );
  }
}

// Create a new class called UserService
class UserService {
  // Create a new constructor
  final UserRepository _userRepository;

  // Create a new method called getUsers
  UserService(this._userRepository);

  // Create a new method called getUsers
  Future<List<User>> getUsers() async {
    // Return the users
    return _userRepository.getUsers();
  }
}

// Create a new class called UserRepository
class UserRepository {
  // Create a new constructor
  final ApiClient _apiClient;

  // Create a new method called getUsers
  UserRepository(this._apiClient);

  // Create a new method called getUsers
  Future<List<User>> getUsers() async {
    // Get the users
    final response = await _apiClient.get('users');
    // Return the users
    return response.data.map((json) => User.fromJson(json)).toList();
  }
}

// Create a new class called User
class User {
  // Create a new constructor
  final String name;

  // Create a new method called fromJson
  User({this.name});

  // Create a new method called fromJson
  factory User.fromJson(Map<String, dynamic> json) {
    // Return a new User
    return User(
      name: json['name'],
    );
  }
}

// Create a new class called ApiClient
class ApiClient {
  // Create a new method called get
  Future<ApiResponse> get(String path) async {
    // Get the response
    final response = await http.get(Uri.parse(path));
    // Return the response
    return ApiResponse(response.statusCode, response.body);
  }
}

// Create a new class called ApiResponse
class ApiResponse {
  // Create a new constructor
  final int statusCode;
  final String body;

  // Create a new method called ApiResponse
  ApiResponse(this.statusCode, this.body);
}

// The application flow is as follows:
// 1. The user opens the app.
// 2. The app sends a GET request to the API to get the users.
// 3. The API returns the users.
// 4. The app displays the users in a ListView.
// 5. The user can select a user to view their details.
// 6. The app sends a GET request to the API to get the user's details.
// 7. The API returns the user's details.
// 8. The app displays the user's details.
```

<-- END_MAIN -->
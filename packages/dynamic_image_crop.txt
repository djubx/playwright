<-- START_DESCRIPTION -->

# Dynamic Image Crop Flutter Package
=====================================

The `dynamic_image_crop` Flutter package provides a simple and efficient way to crop images dynamically. It allows users to select an image from their gallery or take a new photo, and then crop it to a specific aspect ratio.

### When to Use This Package

This package is useful when you need to:

* Allow users to upload profile pictures or avatars with a specific aspect ratio
* Crop images to a specific size or aspect ratio for display in your app
* Provide a simple and intuitive image cropping experience for your users

### Features

* Supports both Android and iOS platforms
* Allows users to select an image from their gallery or take a new photo
* Crops images to a specific aspect ratio
* Provides a simple and intuitive user interface

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Dynamic Image Crop Package
===========================================================

### Step 1: Add the Package to Your Pubspec.yaml File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  dynamic_image_crop: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package in Your Dart File

Import the package in your Dart file:
```dart
import 'package:dynamic_image_crop/dynamic_image_crop.dart';
```
### Step 3: Use the Package to Crop an Image

Use the `DynamicImageCrop` widget to crop an image:
```dart
DynamicImageCrop(
  onCrop: (image) {
    // Handle the cropped image
  },
)
```
### Platform-Specific Details

* Android: Make sure to add the following permissions to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
<uses-permission android:name="android.permission.CAMERA" />
```
* iOS: Make sure to add the following permissions to your `Info.plist` file:
```xml
<key>NSPhotoLibraryUsageDescription</key>
<string>This app needs access to your photo library to crop images</string>
<key>NSCameraUsageDescription</key>
<string>This app needs access to your camera to take new photos</string>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:dynamic_image_crop/dynamic_image_crop.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Dynamic Image Crop Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  File _image;

  Future<void> _cropImage() async {
    final image = await DynamicImageCrop.cropImage(
      source: ImageSource.gallery,
      aspectRatio: CropAspectRatio(ratioX: 1, ratioY: 1),
    );
    setState(() {
      _image = image;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Dynamic Image Crop Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            _image != null
                ? Image.file(_image)
                : Text('No image selected'),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _cropImage,
              child: Text('Crop Image'),
            ),
          ],
        ),
      ),
    );
  }
}

// The app starts by displaying a button to crop an image.
// When the button is pressed, the DynamicImageCrop widget is used to crop an image.
// The cropped image is then displayed on the screen.
// The user can press the button again to crop a new image.
```

<-- END_MAIN -->
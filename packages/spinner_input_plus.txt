<-- START_DESCRIPTION -->

# Spinner Input Plus Package
The `spinner_input_plus` package is a Flutter library that provides a customizable and easy-to-use spinner input field. It allows users to select a value from a list of options, and it's perfect for situations where a dropdown menu or a picker is not suitable.

## When to Use
You can use this package in various scenarios, such as:

* When you need to display a list of options and allow the user to select one.
* When you want to provide a more interactive and engaging way for users to input data.
* When you need to customize the appearance and behavior of the input field.

## Features
The `spinner_input_plus` package comes with several features, including:

* Customizable appearance: You can change the color, font, and style of the input field and the spinner.
* Support for different data types: You can use the package with strings, integers, and doubles.
* Easy-to-use API: The package provides a simple and intuitive API for creating and managing the spinner input field.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
To use the `spinner_input_plus` package, you need to add it to your Flutter project. Here's how:

1. Open your `pubspec.yaml` file and add the following line:
```yml
dependencies:
  spinner_input_plus: ^1.0.0
```
2. Run `flutter pub get` to get the package.

## Platform-Specific Details
The package works on both Android and iOS platforms. However, you need to make sure that you have the latest version of the Flutter SDK installed.

## Required Configurations
You don't need to configure anything to use the package. However, you can customize the appearance and behavior of the input field by using the various properties provided by the package.

## Optimizations
To optimize the performance of the package, you can use the `cache` property to cache the list of options. This can improve the performance of the package when dealing with large lists of options.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:spinner_input_plus/spinner_input_plus.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Spinner Input Plus Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  List<String> _options = ['Option 1', 'Option 2', 'Option 3'];
  String _selectedOption;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Spinner Input Plus Demo'),
      ),
      body: Center(
        child: SpinnerInputPlus(
          // Set the list of options
          options: _options,
          // Set the selected option
          selectedOption: _selectedOption,
          // Set the callback function for when an option is selected
          onSelect: (option) {
            setState(() {
              _selectedOption = option;
            });
          },
          // Customize the appearance of the input field
          style: TextStyle(fontSize: 20, color: Colors.blue),
          // Customize the appearance of the spinner
          spinnerStyle: TextStyle(fontSize: 20, color: Colors.red),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app and is presented with a screen containing a spinner input field.
// 2. The user clicks on the spinner input field to select an option.
// 3. The user is presented with a list of options to choose from.
// 4. The user selects an option from the list.
// 5. The selected option is displayed in the spinner input field.
// 6. The user can repeat the process to select a different option.

// In summary, the code flows as follows:
// 1. The `MyApp` widget is created and run.
// 2. The `MyHomePage` widget is created and displayed.
// 3. The `SpinnerInputPlus` widget is created and displayed.
// 4. The user interacts with the `SpinnerInputPlus` widget to select an option.
// 5. The selected option is displayed in the `SpinnerInputPlus` widget.
```

<-- END_MAIN -->
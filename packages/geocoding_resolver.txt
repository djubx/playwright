```markdown
<!-- START_DESCRIPTION -->
# Geocoding Resolver Flutter Package

The `geocoding_resolver` package is a powerful tool for Flutter developers that simplifies the process of converting between geographic coordinates (latitude and longitude) and human-readable addresses. This package is particularly useful in applications that require location-based services, such as ride-sharing apps, travel applications, or any app that needs to display user locations on a map.

## When to Use This Package
- **Location-Based Services**: When you need to convert user coordinates into addresses for display.
- **Mapping Applications**: For applications that require reverse geocoding to show user locations on a map.
- **Data Enrichment**: When you want to enrich user data with location information based on coordinates.

## Key Features
- **Reverse Geocoding**: Convert latitude and longitude into a human-readable address.
- **Forward Geocoding**: Convert a human-readable address into geographic coordinates.
- **Easy Integration**: Simple API that integrates seamlessly with Flutter applications.
- **Cross-Platform Support**: Works on both Android and iOS platforms.

The `geocoding_resolver` package is an essential tool for any Flutter developer looking to implement geocoding functionalities in their applications.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Geocoding Resolver

## Installation
To use the `geocoding_resolver` package, you need to add it to your `pubspec.yaml` file. Open your `pubspec.yaml` and add the following line under dependencies:

```yaml
dependencies:
  geocoding_resolver: ^latest_version
```

Make sure to replace `latest_version` with the most recent version of the package available on [pub.dev](https://pub.dev/packages/geocoding_resolver).

## Platform-Specific Configuration

### Android
1. Open `android/app/build.gradle`.
2. Ensure that you have the following permissions in your `AndroidManifest.xml` file:

```xml
<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>
<uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION"/>
```

### iOS
1. Open `ios/Runner/Info.plist`.
2. Add the following keys to request location permissions:

```xml
<key>NSLocationWhenInUseUsageDescription</key>
<string>We need your location to show nearby places.</string>
<key>NSLocationAlwaysUsageDescription</key>
<string>We need your location to show nearby places.</string>
```

## Basic Usage
Hereâ€™s how to use the `geocoding_resolver` package in your Flutter application:

1. Import the package in your Dart file:

```dart
import 'package:geocoding_resolver/geocoding_resolver.dart';
```

2. Use the `GeocodingResolver` class to perform geocoding operations.

```dart
void getAddressFromCoordinates(double latitude, double longitude) async {
  final address = await GeocodingResolver().reverseGeocode(latitude, longitude);
  print(address);
}
```

3. Similarly, you can convert an address to coordinates:

```dart
void getCoordinatesFromAddress(String address) async {
  final coordinates = await GeocodingResolver().geocode(address);
  print(coordinates);
}
```

This setup will allow you to easily convert between addresses and geographic coordinates in your Flutter application.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using Geocoding Resolver

```dart
import 'package:flutter/material.dart';
import 'package:geocoding_resolver/geocoding_resolver.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Geocoding Resolver Example',
      home: GeocodingHome(),
    );
  }
}

class GeocodingHome extends StatefulWidget {
  @override
  _GeocodingHomeState createState() => _GeocodingHomeState();
}

class _GeocodingHomeState extends State<GeocodingHome> {
  String _address = '';
  String _coordinates = '';

  // Function to get address from coordinates
  void _getAddress() async {
    // Example coordinates (latitude, longitude)
    double latitude = 37.4219983;
    double longitude = -122.084;
    
    // Call reverse geocoding
    final address = await GeocodingResolver().reverseGeocode(latitude, longitude);
    
    // Update state with the fetched address
    setState(() {
      _address = address;
    });
  }

  // Function to get coordinates from address
  void _getCoordinates() async {
    // Example address
    String address = "1600 Amphitheatre Parkway, Mountain View, CA";
    
    // Call forward geocoding
    final coordinates = await GeocodingResolver().geocode(address);
    
    // Update state with the fetched coordinates
    setState(() {
      _coordinates = coordinates.toString();
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Geocoding Resolver Example'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            ElevatedButton(
              onPressed: _getAddress,
              child: Text('Get Address from Coordinates'),
            ),
            SizedBox(height: 20),
            Text('Address: $_address'),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _getCoordinates,
              child: Text('Get Coordinates from Address'),
            ),
            SizedBox(height: 20),
            Text('Coordinates: $_coordinates'),
          ],
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the RealFlutter widget.
// 2. RealFlutter builds a MaterialApp with a title and a home widget (GeocodingHome).
// 3. GeocodingHome is a stateful widget that maintains the state of the address and coordinates.
// 4. The _getAddress function is called when the user presses the button to get the address from coordinates.
// 5. It uses the GeocodingResolver to perform reverse geocoding and updates the state with the fetched address.
// 6. Similarly, the _getCoordinates function is called to convert an address into coordinates.
// 7. The UI displays the results dynamically as the state updates.
```
<!-- END_MAIN -->
```

This structured blog post provides a comprehensive overview of the `geocoding_resolver` package, including its features, setup instructions, and a complete example with detailed comments explaining the application flow.
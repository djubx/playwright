<-- START_DESCRIPTION -->

# Flutter Inline Webview MacOS Package
=====================================

The `flutter_inline_webview_macos` package allows you to embed a web view into your Flutter application on macOS. This package is particularly useful when you need to display web content within your app, such as a website or an HTML document.

### When to Use This Package

* Displaying web content within your app
* Creating a hybrid app that combines native and web components
* Rendering HTML documents or web pages within your app

### Features

* Embeds a web view into your Flutter application on macOS
* Supports loading URLs and HTML content
* Allows for JavaScript execution and communication between the web view and your Flutter code

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the Package
=====================================

### Step 1: Add the Package to Your `pubspec.yaml` File

```yml
dependencies:
  flutter_inline_webview_macos: ^1.0.0
```

### Step 2: Import the Package in Your Dart File

```dart
import 'package:flutter_inline_webview_macos/flutter_inline_webview_macos.dart';
```

### Step 3: Create a Web View and Load a URL or HTML Content

```dart
class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Inline Webview MacOS'),
      ),
      body: Center(
        child: InlineWebViewMacOS(
          initialUrl: 'https://www.example.com',
          // or load HTML content
          // initialHtml: '<html><body>Hello World!</body></html>',
        ),
      ),
    );
  }
}
```

### Platform-Specific Details

* On Android, you need to add the `android.permission.INTERNET` permission to your `AndroidManifest.xml` file.
* On iOS, you need to add the `NSAppTransportSecurity` key to your `Info.plist` file and set `NSAllowsArbitraryLoads` to `YES`.

### Required Configurations or Optimizations

* You can configure the web view to allow or block JavaScript execution, popups, and other features.
* You can also optimize the web view's performance by setting the `cacheMode` and `useShouldOverrideUrlLoading` properties.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_inline_webview_macos/flutter_inline_webview_macos.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Inline Webview MacOS',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Step 1: Create a web view controller
  InlineWebViewMacOSController _controller;

  @override
  void initState() {
    super.initState();
    // Step 2: Initialize the web view controller
    _controller = InlineWebViewMacOSController();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Inline Webview MacOS'),
      ),
      body: Center(
        child: InlineWebViewMacOS(
          // Step 3: Set the initial URL or HTML content
          initialUrl: 'https://www.example.com',
          // or load HTML content
          // initialHtml: '<html><body>Hello World!</body></html>',
          // Step 4: Set the web view controller
          controller: _controller,
          // Step 5: Set the JavaScript execution mode
          javascriptMode: JavascriptMode.unrestricted,
          // Step 6: Set the popup blocker
          popupBlocker: true,
          // Step 7: Set the cache mode
          cacheMode: CacheMode.useProtocolCachePolicy,
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user launches the app and the `RealFlutter` widget is displayed.
// 2. The `RealFlutter` widget creates a web view controller and initializes it.
// 3. The web view controller loads the initial URL or HTML content.
// 4. The web view displays the loaded content and allows the user to interact with it.
// 5. The user can navigate through the web content using the web view's navigation buttons.
// 6. The web view controller handles the user's interactions and updates the web view accordingly.
// 7. The web view displays the updated content and continues to allow the user to interact with it.

// In summary, the code flows as follows:
// 1. The user launches the app.
// 2. The `RealFlutter` widget is displayed.
// 3. The web view controller is created and initialized.
// 4. The initial URL or HTML content is loaded.
// 5. The web view displays the loaded content.
// 6. The user interacts with the web content.
// 7. The web view controller handles the user's interactions and updates the web view.
// 8. The web view displays the updated content.

```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Core Utils Flutter Package
The `core_utils` Flutter package provides a set of utility functions to simplify the development process. It includes a range of features such as string manipulation, date and time formatting, and platform-specific utilities.

## When to Use
This package is useful when you need to perform common tasks such as:

* String manipulation (e.g., trimming, padding, and formatting)
* Date and time formatting
* Platform-specific tasks (e.g., opening the app settings on Android)

## Features
The `core_utils` package includes the following features:

* String utilities (e.g., `trim`, `padLeft`, `padRight`)
* Date and time utilities (e.g., `formatDate`, `formatTime`)
* Platform-specific utilities (e.g., `openAppSettings` on Android)

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
To use the `core_utils` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  core_utils: ^1.0.0
```
2. Run `flutter pub get` to install the package.
3. Import the package in your Dart file:
```dart
import 'package:core_utils/core_utils.dart';
```
4. Use the utility functions as needed.

### Platform-Specific Details
Some functions may require platform-specific configurations or optimizations.

* On Android, you may need to add the following permission to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.WRITE_SETTINGS" />
```
* On iOS, you may need to add the following configuration to your `Info.plist` file:
```xml
<key>NSAppSettings</key>
<true/>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:core_utils/core_utils.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  String _trimmedString = '';
  String _formattedDate = '';
  String _formattedTime = '';

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Core Utils Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Text('Trimmed String: $_trimmedString'),
              Text('Formatted Date: $_formattedDate'),
              Text('Formatted Time: $_formattedTime'),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  // Trim a string
                  String originalString = '   Hello World   ';
                  _trimmedString = originalString.trim();
                  setState(() {});
                },
                child: Text('Trim String'),
              ),
              SizedBox(height: 10),
              ElevatedButton(
                onPressed: () {
                  // Format a date
                  DateTime now = DateTime.now();
                  _formattedDate = formatDate(now, 'yyyy-MM-dd');
                  setState(() {});
                },
                child: Text('Format Date'),
              ),
              SizedBox(height: 10),
              ElevatedButton(
                onPressed: () {
                  // Format a time
                  DateTime now = DateTime.now();
                  _formattedTime = formatTime(now, 'HH:mm:ss');
                  setState(() {});
                },
                child: Text('Format Time'),
              ),
              SizedBox(height: 10),
              ElevatedButton(
                onPressed: () {
                  // Open app settings on Android
                  openAppSettings();
                },
                child: Text('Open App Settings'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user clicks on a button to perform an action (e.g., trim a string, format a date).
// 2. The corresponding function is called (e.g., `trim`, `formatDate`).
// 3. The result is stored in a state variable (e.g., `_trimmedString`, `_formattedDate`).
// 4. The UI is updated to display the result.
// 5. The user can repeat the process for different actions.

// This example demonstrates the usage of the `core_utils` package for string manipulation, date and time formatting, and platform-specific tasks.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Duration ISO Parser Package
The `duration_iso_parser` package is a Flutter library used for parsing ISO 8601 duration strings into `Duration` objects. It provides a simple and efficient way to work with durations in your Flutter applications.

## When to Use
This package is useful when working with APIs or data sources that provide duration information in ISO 8601 format. For example, if you're building a video player and need to parse the duration of a video from an API response.

## Features
The `duration_iso_parser` package has the following features:

*   Parses ISO 8601 duration strings into `Duration` objects
*   Supports parsing durations with years, months, weeks, days, hours, minutes, and seconds
*   Handles invalid or malformed input strings

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
To use the `duration_iso_parser` package in your Flutter project, follow these steps:

1.  Add the package to your `pubspec.yaml` file:

    ```yml
dependencies:
  duration_iso_parser: ^1.0.0
```

2.  Run `flutter pub get` in your terminal to install the package.

## Using the Package
To parse an ISO 8601 duration string, use the `parseDuration` function:

```dart
import 'package:duration_iso_parser/duration_iso_parser.dart';

void main() {
  String durationString = 'PT1H2M3S';
  Duration duration = parseDuration(durationString);
  print(duration); // Output: 1:02:03.000000
}
```

### Platform-Specific Details
The `duration_iso_parser` package works on all platforms supported by Flutter, including Android and iOS. No platform-specific configurations are required.

### Optimizations
For optimal performance, it's recommended to use the `parseDuration` function with a `try-catch` block to handle any invalid or malformed input strings:

```dart
try {
  Duration duration = parseDuration(durationString);
  // Use the parsed duration
} catch (e) {
  // Handle the error
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:duration_iso_parser/duration_iso_parser.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  String _durationString = 'PT1H2M3S';
  Duration _duration;

  // Parse the duration string when the app starts
  @override
  void initState() {
    super.initState();
    _parseDuration();
  }

  // Parse the duration string and update the UI
  void _parseDuration() {
    try {
      _duration = parseDuration(_durationString);
      setState(() {}); // Update the UI
    } catch (e) {
      print('Error parsing duration: $e');
    }
  }

  // Handle changes to the duration string
  void _handleDurationStringChange(String value) {
    _durationString = value;
    _parseDuration();
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Duration ISO Parser Demo'),
        ),
        body: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            children: [
              TextField(
                decoration: InputDecoration(
                  labelText: 'Duration String',
                  border: OutlineInputBorder(),
                ),
                initialValue: _durationString,
                onChanged: _handleDurationStringChange,
              ),
              SizedBox(height: 16),
              Text(
                _duration != null
                    ? _duration.toString()
                    : 'Invalid duration string',
                style: TextStyle(fontSize: 24),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The app starts by running the main function, which creates a RealFlutter widget.
// The RealFlutter widget is a stateful widget that parses the duration string when it starts.
// The duration string is parsed using the parseDuration function from the duration_iso_parser package.
// If the duration string is valid, the parsed duration is displayed on the screen.
// If the duration string is invalid, an error message is displayed on the screen.
// The user can change the duration string using the text field, and the app will update the displayed duration accordingly.

// This code demonstrates how to use the duration_iso_parser package to parse ISO 8601 duration strings in a Flutter app.
// It also shows how to handle invalid duration strings and update the UI when the duration string changes.
```

<-- END_MAIN -->
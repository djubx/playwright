```markdown
<-- START_DESCRIPTION -->

# Multi Split View Flutter Package

The `multi_split_view` Flutter package is a powerful tool designed to enhance the user interface of your Flutter applications by allowing you to create resizable split views. This package is particularly useful in applications where you need to display multiple panels or sections that users can adjust according to their preferences, such as IDEs, file explorers, or any productivity tools.

## When to Use Multi Split View

- **Productivity Apps**: Applications that require multiple panels, such as text editors or IDEs, can benefit from this package by allowing users to resize panels to focus on different tasks.
- **Data Visualization**: Dashboards that display various data widgets can use split views to let users customize their view.
- **File Management**: File explorers can use split views to show directory structures alongside file previews.

## Features

- **Resizable Panels**: Users can adjust the size of each panel by dragging the dividers.
- **Customizable Layouts**: You can define the initial size and layout of the panels.
- **Flexible Orientation**: Supports both horizontal and vertical orientations.
- **Easy Integration**: Simple API that integrates seamlessly with existing Flutter widgets.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up Multi Split View

In this tutorial, we will walk through the process of setting up the `multi_split_view` package in a Flutter project. We will cover platform-specific details for both Android and iOS, and provide necessary configurations.

## Step 1: Add Dependency

First, add the `multi_split_view` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  multi_split_view: ^1.0.0
```

Run `flutter pub get` to install the package.

## Step 2: Basic Setup

Create a new Flutter project or open an existing one. In your `lib` directory, create a new Dart file, e.g., `real_flutter.dart`.

## Step 3: Platform-Specific Configurations

### Android

Ensure your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```gradle
android {
    defaultConfig {
        minSdkVersion 21
    }
}
```

### iOS

No specific configurations are required for iOS, but ensure your deployment target is set to iOS 9.0 or higher in your `ios/Podfile`:

```ruby
platform :ios, '9.0'
```

## Step 4: Implementing Multi Split View

In your `real_flutter.dart` file, import the package and start implementing the split view.

<-- END_TUTORIAL -->

<-- MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:multi_split_view/multi_split_view.dart';

void main() {
  runApp(RealFlutterApp());
}

class RealFlutterApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Multi Split View Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutterHomePage(),
    );
  }
}

class RealFlutterHomePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Create a MultiSplitViewController to manage the split view
    final controller = MultiSplitViewController(
      areas: [Area(weight: 0.3), Area(weight: 0.7)],
    );

    return Scaffold(
      appBar: AppBar(
        title: Text('Multi Split View Example'),
      ),
      body: MultiSplitView(
        controller: controller,
        children: [
          Container(
            color: Colors.red,
            child: Center(child: Text('Panel 1')),
          ),
          Container(
            color: Colors.green,
            child: Center(child: Text('Panel 2')),
          ),
        ],
      ),
    );
  }
}

// The main function initializes the app by running RealFlutterApp.
// RealFlutterApp is a StatelessWidget that sets up the MaterialApp.
// RealFlutterHomePage is the home page of the app, which contains the MultiSplitView.
// MultiSplitViewController is used to manage the layout of the split view, defining initial weights for each panel.
// MultiSplitView is the main widget that creates a resizable split view with two panels.
// Each panel is a Container with a different background color and a centered text widget.
// The user can resize the panels by dragging the divider between them.
```

<-- END_MAIN -->
```

This code demonstrates a simple application using the `multi_split_view` package. The application consists of two resizable panels, each with a different background color and a centered text widget. The `MultiSplitViewController` is used to define the initial layout of the panels, and the `MultiSplitView` widget creates the resizable interface.

### Application Flow

1. **Initialization**: The `main` function initializes the app by running `RealFlutterApp`.
2. **App Setup**: `RealFlutterApp` is a `StatelessWidget` that sets up the `MaterialApp` with a title and theme.
3. **Home Page**: `RealFlutterHomePage` is the home page of the app, containing the `MultiSplitView`.
4. **Controller**: A `MultiSplitViewController` is created to manage the layout of the split view, defining initial weights for each panel.
5. **Split View**: `MultiSplitView` is the main widget that creates a resizable split view with two panels.
6. **Panels**: Each panel is a `Container` with a different background color and a centered text widget.
7. **User Interaction**: The user can resize the panels by dragging the divider between them.

This setup provides a flexible and interactive user interface, allowing users to adjust the layout to their needs.
```markdown
<!-- START_DESCRIPTION -->
# skm_notification_listener Flutter Package

The `skm_notification_listener` package is a powerful tool for Flutter developers looking to manage and respond to notifications on both Android and iOS devices. This package allows you to listen for incoming notifications, providing a seamless way to handle them within your Flutter applications. 

## When to Use This Package
You might consider using `skm_notification_listener` in scenarios such as:
- Building applications that require real-time updates based on notifications.
- Creating custom notification handling logic for your app.
- Integrating with existing notification systems to enhance user experience.

## Features
- **Cross-Platform Support**: Works on both Android and iOS.
- **Real-Time Notification Listening**: Capture notifications as they arrive.
- **Customizable Notification Handling**: Define how your app responds to different types of notifications.
- **Easy Integration**: Simple setup process with clear API documentation.

Overall, `skm_notification_listener` is an excellent choice for developers looking to enhance their Flutter applications with robust notification handling capabilities.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using skm_notification_listener

## Installation
To get started with the `skm_notification_listener` package, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  skm_notification_listener: ^latest_version
```

Make sure to replace `^latest_version` with the most recent version available on [pub.dev](https://pub.dev/packages/skm_notification_listener).

## Platform-Specific Configuration

### Android
1. Open your `AndroidManifest.xml` file located at `android/app/src/main/AndroidManifest.xml`.
2. Add the following permissions inside the `<manifest>` tag:

```xml
<uses-permission android:name="android.permission.BIND_NOTIFICATION_LISTENER_SERVICE" />
```

3. Also, add the service declaration inside the `<application>` tag:

```xml
<service android:name="com.skm.notification_listener.NotificationListenerService" android:permission="android.permission.BIND_NOTIFICATION_LISTENER_SERVICE" android:exported="true"/>
```

### iOS
For iOS, ensure you have the necessary permissions set in your `Info.plist` file. You may need to request permission to show notifications, but the package primarily focuses on Android.

## Basic Usage
Once you have installed the package and configured your project, you can start using it in your Flutter application. Hereâ€™s a simple example of how to set up a notification listener:

```dart
import 'package:flutter/material.dart';
import 'package:skm_notification_listener/skm_notification_listener.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  void initState() {
    super.initState();
    // Initialize the notification listener
    NotificationListener().initialize();
    
    // Listen for notifications
    NotificationListener().onNotificationReceived.listen((notification) {
      // Handle the received notification
      print("Received Notification: ${notification.title}");
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Notification Listener Example')),
        body: Center(child: Text('Listening for notifications...')),
      ),
    );
  }
}
```

In this example, we initialize the notification listener in the `initState` method and listen for incoming notifications. When a notification is received, we print its title to the console.

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of skm_notification_listener

```dart
import 'package:flutter/material.dart';
import 'package:skm_notification_listener/skm_notification_listener.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  void initState() {
    super.initState();
    // Initialize the notification listener
    NotificationListener().initialize();
    
    // Listen for notifications
    NotificationListener().onNotificationReceived.listen((notification) {
      // Handle the received notification
      print("Received Notification: ${notification.title}");
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Notification Listener Example')),
        body: Center(child: Text('Listening for notifications...')),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the RealFlutter widget.
// 2. In the initState method, we initialize the NotificationListener.
// 3. We set up a listener for incoming notifications.
// 4. When a notification is received, we print its title to the console.
// 5. The UI displays a simple message indicating that the app is listening for notifications.
```
<!-- END_MAIN -->
```

In summary, the `skm_notification_listener` package provides a straightforward way to handle notifications in Flutter applications. By following the setup and usage instructions, developers can easily integrate notification listening capabilities into their apps, enhancing user engagement and interactivity.
<-- START_DESCRIPTION -->

# Cached Memory Image Flutter Package
=====================================

The `cached_memory_image` Flutter package is a powerful tool for caching and displaying images in Flutter applications. It provides a simple and efficient way to cache images in memory, reducing the number of network requests and improving the overall performance of the app.

### When to Use

This package is particularly useful when:

* Displaying a large number of images in a grid or list
* Using images as backgrounds or headers
* Implementing image-based features, such as image galleries or carousels

### Features

* Caches images in memory for fast access
* Supports caching of images from network, assets, and files
* Provides a simple and intuitive API for displaying cached images
* Works seamlessly with Flutter's `Image` widget

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the Package
=====================================

### Step 1: Add the Package to Your Project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  cached_memory_image: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:cached_memory_image/cached_memory_image.dart';
```
### Step 3: Use the `CachedMemoryImage` Widget

Use the `CachedMemoryImage` widget to display a cached image:
```dart
CachedMemoryImage(
  imageUrl: 'https://example.com/image.jpg',
  placeholder: Center(child: CircularProgressIndicator()),
  errorWidget: Icon(Icons.error),
)
```
### Platform-Specific Details

* Android: The package uses the `AndroidBitmap` class to cache images. Make sure to add the following line to your `AndroidManifest.xml` file:
```xml
<application
    ...
    android:hardwareAccelerated="true"
    ...
>
```
* iOS: The package uses the `UIImage` class to cache images. Make sure to add the following line to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```
### Optimizations

* Use the `cacheManager` property to customize the cache behavior.
* Use the `imageBuilder` property to customize the image loading process.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:cached_memory_image/cached_memory_image.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Cached Memory Image Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Cached Memory Image Demo'),
      ),
      body: Center(
        child: CachedMemoryImage(
          // Step 1: Specify the image URL
          imageUrl: 'https://example.com/image.jpg',
          // Step 2: Specify the placeholder widget
          placeholder: Center(child: CircularProgressIndicator()),
          // Step 3: Specify the error widget
          errorWidget: Icon(Icons.error),
          // Step 4: Customize the cache behavior
          cacheManager: CacheManager(
            // Step 5: Specify the cache duration
            cacheDuration: Duration(days: 7),
          ),
        ),
      ),
    );
  }
}

// The application flow:
// 1. The user opens the app and navigates to the MyHomePage widget.
// 2. The CachedMemoryImage widget is used to display the image.
// 3. The image is loaded from the network and cached in memory.
// 4. The placeholder widget is displayed while the image is loading.
// 5. If the image loading fails, the error widget is displayed.
// 6. The cache behavior is customized using the cacheManager property.
// 7. The cache duration is set to 7 days using the cacheDuration property.

// Final summary:
// The CachedMemoryImage widget is used to display a cached image.
// The image is loaded from the network and cached in memory.
// The placeholder and error widgets are used to handle loading and error states.
// The cache behavior is customized using the cacheManager property.
```

<-- END_MAIN -->
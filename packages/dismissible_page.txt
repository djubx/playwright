```markdown
<-- START_DESCRIPTION -->

# Dismissible Page Flutter Package

The `dismissible_page` Flutter package provides a simple and intuitive way to create pages that can be dismissed with a swipe gesture. This package is particularly useful for creating interactive user interfaces where users can easily navigate back by swiping down or up, similar to the behavior seen in many modern mobile applications.

## When to Use

- **Photo Galleries**: When displaying a full-screen image, allowing users to swipe down to dismiss the image and return to the gallery.
- **Modal Pages**: For any modal or overlay page that should be easily dismissible by the user.
- **Interactive Tutorials**: When creating step-by-step tutorials where each step is a full-screen page that can be dismissed.

## Features

- **Smooth Animations**: Provides smooth and customizable animations for dismissing pages.
- **Configurable Sensitivity**: Adjust the sensitivity of the swipe gesture to suit your app's needs.
- **Platform Consistency**: Ensures consistent behavior across both Android and iOS platforms.
- **Customizable**: Allows customization of the dismissible direction and animation curves.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Dismissible Page Package

In this tutorial, we will walk through the process of setting up and using the `dismissible_page` package in a Flutter project.

## Setup

1. **Add Dependency**: First, add the `dismissible_page` package to your `pubspec.yaml` file.

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     dismissible_page: ^1.0.0
   ```

2. **Install Packages**: Run `flutter pub get` to install the new package.

3. **Import the Package**: Import the package in your Dart file where you plan to use it.

   ```dart
   import 'package:dismissible_page/dismissible_page.dart';
   ```

## Platform-Specific Details

### Android

- Ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21 to support the necessary animations.

  ```gradle
  android {
      defaultConfig {
          minSdkVersion 21
      }
  }
  ```

### iOS

- No specific configurations are required for iOS, but ensure your deployment target is set to iOS 9.0 or higher.

## Using the Package

To use the `dismissible_page` package, wrap your page content with the `DismissiblePage` widget. You can customize the behavior using various properties such as `onDismissed`, `backgroundColor`, and `direction`.

```dart
DismissiblePage(
  onDismissed: () {
    // Handle the page dismissal
  },
  child: YourPageContent(),
)
```

<-- END_TUTORIAL -->

<-- MAIN -->

# Complete Example: Flutter Main File

Below is a complete example demonstrating the use of the `dismissible_page` package in a Flutter application.

```dart
import 'package:flutter/material.dart';
import 'package:dismissible_page/dismissible_page.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Dismissible Page Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: HomePage(),
    );
  }
}

class HomePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Home Page'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            Navigator.of(context).push(
              MaterialPageRoute(
                builder: (context) => DismissiblePage(
                  onDismissed: () => Navigator.of(context).pop(),
                  child: DetailPage(),
                ),
              ),
            );
          },
          child: Text('Open Dismissible Page'),
        ),
      ),
    );
  }
}

class DetailPage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Detail Page'),
      ),
      body: Center(
        child: Text('Swipe down to dismiss'),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the `RealFlutter` widget, which sets up the MaterialApp.
// 2. The `HomePage` widget is displayed, containing a button to open the dismissible page.
// 3. When the button is pressed, a new route is pushed using `Navigator.of(context).push`.
// 4. The new route contains a `DismissiblePage` widget wrapping the `DetailPage`.
// 5. The `DismissiblePage` allows the `DetailPage` to be dismissed with a swipe gesture.
// 6. Upon dismissal, the `onDismissed` callback is triggered, popping the route and returning to the `HomePage`.

```

<-- END_MAIN -->
```
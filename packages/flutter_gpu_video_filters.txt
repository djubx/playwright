```markdown
<-- START_DESCRIPTION -->

# Overview of the `flutter_gpu_video_filters` Package

The `flutter_gpu_video_filters` package is a powerful tool for Flutter developers looking to apply GPU-accelerated video filters to their applications. This package leverages the power of GPU processing to provide real-time video effects, making it ideal for applications that require high-performance video manipulation, such as video editing apps, live streaming platforms, or social media applications with video content.

## When to Use

- **Video Editing Apps**: Enhance user experience by providing a variety of filters that can be applied to videos in real-time.
- **Live Streaming**: Apply filters dynamically during live broadcasts to enhance video quality or add creative effects.
- **Social Media**: Allow users to apply fun and engaging filters to their video content before sharing.

## Features

- **Real-Time Processing**: Utilizes GPU acceleration for fast and efficient video processing.
- **Wide Range of Filters**: Offers a variety of built-in filters that can be easily applied to video streams.
- **Cross-Platform Support**: Compatible with both Android and iOS, making it versatile for mobile app development.
- **Customizable**: Developers can create custom filters to meet specific application needs.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using `flutter_gpu_video_filters`

In this tutorial, we will walk through the setup process for the `flutter_gpu_video_filters` package and demonstrate how to use it in a Flutter application. We will cover platform-specific configurations for both Android and iOS.

## Setup Process

### Step 1: Add Dependency

Add the `flutter_gpu_video_filters` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  flutter_gpu_video_filters: ^latest_version
```

### Step 2: Platform-Specific Configuration

#### Android

1. **Permissions**: Ensure that your `AndroidManifest.xml` includes the necessary permissions for camera and storage access:

   ```xml
   <uses-permission android:name="android.permission.CAMERA" />
   <uses-permission android:name="android.permission.RECORD_AUDIO" />
   <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
   ```

2. **Min SDK Version**: Set the minimum SDK version to 21 or higher in your `android/app/build.gradle`:

   ```gradle
   defaultConfig {
       minSdkVersion 21
   }
   ```

#### iOS

1. **Permissions**: Update your `Info.plist` to include camera and microphone usage descriptions:

   ```xml
   <key>NSCameraUsageDescription</key>
   <string>We need access to your camera for video filters.</string>
   <key>NSMicrophoneUsageDescription</key>
   <string>We need access to your microphone for audio recording.</string>
   ```

2. **Podfile**: Ensure your iOS deployment target is set to 10.0 or higher in your `ios/Podfile`:

   ```ruby
   platform :ios, '10.0'
   ```

### Step 3: Using the Package

To use the package, import it into your Dart file:

```dart
import 'package:flutter_gpu_video_filters/flutter_gpu_video_filters.dart';
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_gpu_video_filters/flutter_gpu_video_filters.dart';

void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter GPU Video Filters Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: VideoFilterDemo(),
    );
  }
}

class VideoFilterDemo extends StatefulWidget {
  @override
  _VideoFilterDemoState createState() => _VideoFilterDemoState();
}

class _VideoFilterDemoState extends State<VideoFilterDemo> {
  late RealFlutter _videoFilterController;

  @override
  void initState() {
    super.initState();
    // Initialize the video filter controller
    _videoFilterController = RealFlutter();
  }

  @override
  void dispose() {
    // Dispose of the video filter controller when the widget is disposed
    _videoFilterController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Video Filter Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            // Display the video with applied filter
            Container(
              width: 300,
              height: 200,
              child: _videoFilterController.buildPreview(),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                // Apply a filter to the video
                _videoFilterController.applyFilter('Sepia');
              },
              child: Text('Apply Sepia Filter'),
            ),
          ],
        ),
      ),
    );
  }
}
```

// The application starts by running the `MyApp` class, which sets up the MaterialApp.
// The `VideoFilterDemo` widget is the main screen, where the video filter functionality is demonstrated.
// In the `initState` method, we initialize the `RealFlutter` controller, which manages video filtering.
// The `dispose` method ensures that resources are cleaned up when the widget is removed from the tree.
// The UI consists of a video preview and a button to apply a Sepia filter.
// The `buildPreview` method of `RealFlutter` displays the video with the current filter applied.
// When the button is pressed, the `applyFilter` method is called to change the video filter to Sepia.

<-- END_MAIN -->
```

This blog post provides a comprehensive guide to using the `flutter_gpu_video_filters` package, from setup to implementation, with a complete example to demonstrate its capabilities.
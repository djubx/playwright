<-- START_DESCRIPTION -->

# yet_another_json_isolate Flutter Package
=============================================

The `yet_another_json_isolate` package provides a simple and efficient way to parse JSON data in a separate isolate, allowing for smooth and uninterrupted UI performance. This package is particularly useful when dealing with large JSON datasets or complex parsing operations.

### Features

*   Parse JSON data in a separate isolate, ensuring smooth UI performance
*   Supports both Android and iOS platforms
*   Easy to use and integrate into existing Flutter projects

### When to Use

*   When dealing with large JSON datasets that may cause UI freezes or slow performance
*   When performing complex JSON parsing operations that require significant computational resources
*   When you need to ensure seamless UI performance while parsing JSON data

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
------------------

### Step 1: Add the Package to Your Project

Add the `yet_another_json_isolate` package to your `pubspec.yaml` file:

```yml
dependencies:
  yet_another_json_isolate: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:yet_another_json_isolate/yet_another_json_isolate.dart';
```

### Step 3: Use the Package

Use the `JsonIsolate` class to parse JSON data in a separate isolate:

```dart
void main() async {
  final jsonString = '{"key": "value"}';
  final jsonData = await JsonIsolate().parseJson(jsonString);
  print(jsonData); // prints {key: value}
}
```

### Platform-Specific Details

*   **Android:** No additional configuration is required.
*   **iOS:** No additional configuration is required.

### Optimizations

*   To optimize performance, ensure that the JSON data is as small as possible.
*   Use the `JsonIsolate` class only when necessary, as it creates a new isolate that consumes system resources.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
// Import the package
import 'package:flutter/material.dart';
import 'package:yet_another_json_isolate/yet_another_json_isolate.dart';

// Define the main class
class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Define a variable to store the parsed JSON data
  dynamic _jsonData;

  // Define a function to parse JSON data using the JsonIsolate class
  Future<void> _parseJson() async {
    // Define a sample JSON string
    final jsonString = '{"key": "value"}';

    // Create a new JsonIsolate instance
    final jsonIsolate = JsonIsolate();

    // Parse the JSON data in a separate isolate
    final jsonData = await jsonIsolate.parseJson(jsonString);

    // Update the UI with the parsed JSON data
    setState(() {
      _jsonData = jsonData;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('yet_another_json_isolate Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            // Display the parsed JSON data
            Text(_jsonData != null
                ? _jsonData.toString()
                : 'No JSON data available'),
            SizedBox(height: 20),
            // Button to parse JSON data
            ElevatedButton(
              onPressed: _parseJson,
              child: Text('Parse JSON'),
            ),
          ],
        ),
      ),
    );
  }
}

// Run the app
void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'yet_another_json_isolate Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

// 
// Application flow:
// 
// 1. The app starts and displays a button to parse JSON data.
// 2. When the button is pressed, the _parseJson function is called.
// 3. The _parseJson function creates a new JsonIsolate instance and defines a sample JSON string.
// 4. The JSON data is parsed in a separate isolate using the JsonIsolate class.
// 5. The parsed JSON data is updated in the UI using the setState function.
// 6. The parsed JSON data is displayed on the screen.
// 

```

<-- END_MAIN -->
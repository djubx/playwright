<-- START_DESCRIPTION -->

# User Agent Analyzer Flutter Package
=====================================

The `user_agent_analyzer` Flutter package is a powerful tool for analyzing and parsing user agent strings. It provides a simple and efficient way to extract valuable information from user agent strings, such as device type, browser type, and operating system.

### When to Use This Package

This package is useful when you need to:

* Analyze user agent strings to determine device type, browser type, and operating system
* Optimize your app's layout and behavior based on device type and browser type
* Track user agent strings for analytics and logging purposes

### Features

* Parses user agent strings into a structured format
* Extracts device type, browser type, and operating system information
* Supports both Android and iOS platforms
* Easy to use and integrate into your Flutter app

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `user_agent_analyzer` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  user_agent_analyzer: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:user_agent_analyzer/user_agent_analyzer.dart';
```
### Step 3: Initialize the Package

Initialize the package by calling the `UserAgentAnalyzer` constructor:
```dart
UserAgentAnalyzer userAgentAnalyzer = UserAgentAnalyzer();
```
### Platform-Specific Details

* Android: No additional configuration is required.
* iOS: You need to add the following lines to your `Info.plist` file:
```xml
<key>NSUserAgent</key>
<string>MyApp/1.0 (iPhone; iOS 14.0; Scale/3.00)</string>
```
Replace `MyApp/1.0` with your app's name and version.

### Required Configurations and Optimizations

* You can configure the package to use a custom user agent string by calling the `setUserAgent` method:
```dart
userAgentAnalyzer.setUserAgent('MyCustomUserAgent/1.0');
```
* You can optimize the package's performance by calling the `enableCache` method:
```dart
userAgentAnalyzer.enableCache(true);
```
This will cache the parsed user agent strings to improve performance.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:user_agent_analyzer/user_agent_analyzer.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'User Agent Analyzer Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  UserAgentAnalyzer _userAgentAnalyzer;
  String _userAgentString;
  String _deviceType;
  String _browserType;
  String _operatingSystem;

  @override
  void initState() {
    super.initState();
    _userAgentAnalyzer = UserAgentAnalyzer();
    _getUserAgentString();
  }

  Future<void> _getUserAgentString() async {
    // Get the user agent string
    _userAgentString = await _userAgentAnalyzer.getUserAgentString();
    // Parse the user agent string
    _userAgentAnalyzer.parseUserAgentString(_userAgentString);
    // Get the device type
    _deviceType = _userAgentAnalyzer.getDeviceType();
    // Get the browser type
    _browserType = _userAgentAnalyzer.getBrowserType();
    // Get the operating system
    _operatingSystem = _userAgentAnalyzer.getOperatingSystem();
    // Update the UI
    setState(() {});
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('User Agent Analyzer Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text('User Agent String: $_userAgentString'),
            Text('Device Type: $_deviceType'),
            Text('Browser Type: $_browserType'),
            Text('Operating System: $_operatingSystem'),
          ],
        ),
      ),
    );
  }
}

// The app starts by creating a new instance of the UserAgentAnalyzer class.
// It then calls the getUserAgentString method to get the user agent string.
// The user agent string is then parsed using the parseUserAgentString method.
// The getDeviceType, getBrowserType, and getOperatingSystem methods are then called to get the device type, browser type, and operating system.
// The UI is then updated with the parsed user agent string and the device type, browser type, and operating system.
// The app uses the UserAgentAnalyzer class to analyze the user agent string and extract the device type, browser type, and operating system.
```

<-- END_MAIN -->
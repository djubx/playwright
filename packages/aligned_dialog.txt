<-- START_DESCRIPTION -->

# Aligned Dialog Flutter Package
=====================================

The `aligned_dialog` Flutter package is a customizable dialog package that allows developers to create dialogs with aligned buttons. It provides a simple and easy-to-use API for creating dialogs with a variety of features, including customizable button alignment, button styles, and dialog styles.

### When to Use This Package

This package is useful when you need to create dialogs with aligned buttons in your Flutter application. For example, you can use this package to create a confirmation dialog with "Yes" and "No" buttons aligned to the right or left.

### Features

*   Customizable button alignment (left, right, center)
*   Customizable button styles (text color, background color, border radius)
*   Customizable dialog styles (background color, border radius, padding)
*   Support for multiple buttons
*   Support for custom button widgets

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

### Setup

To use the `aligned_dialog` package, add it to your `pubspec.yaml` file:

```yml
dependencies:
  aligned_dialog: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Basic Usage

To create a basic dialog with aligned buttons, use the `AlignedDialog` widget:

```dart
import 'package:aligned_dialog/aligned_dialog.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Aligned Dialog Example'),
        ),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              AlignedDialog(
                context: context,
                title: Text('Confirmation'),
                content: Text('Are you sure?'),
                buttons: [
                  AlignedDialogButton(
                    child: Text('Yes'),
                    onPressed: () {
                      // Handle yes button press
                    },
                  ),
                  AlignedDialogButton(
                    child: Text('No'),
                    onPressed: () {
                      // Handle no button press
                    },
                  ),
                ],
              ).show();
            },
            child: Text('Show Dialog'),
          ),
        ),
      ),
    );
  }
}
```

### Customization

You can customize the dialog and buttons by using the various properties provided by the `AlignedDialog` and `AlignedDialogButton` widgets. For example, you can change the button alignment by using the `alignment` property:

```dart
AlignedDialog(
  // ...
  alignment: Alignment.center,
  // ...
)
```

You can also customize the button styles by using the `style` property:

```dart
AlignedDialogButton(
  // ...
  style: ElevatedButton.styleFrom(
    primary: Colors.red,
    onPrimary: Colors.white,
  ),
  // ...
)
```

### Platform-Specific Details

The `aligned_dialog` package works on both Android and iOS platforms. However, you may need to adjust the dialog styles and button styles to match the platform-specific design guidelines.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:aligned_dialog/aligned_dialog.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Aligned Dialog Example'),
        ),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              // Create an AlignedDialog instance
              AlignedDialog(
                context: context,
                title: Text('Confirmation'),
                content: Text('Are you sure?'),
                // Define the buttons
                buttons: [
                  // Create an AlignedDialogButton instance for the yes button
                  AlignedDialogButton(
                    child: Text('Yes'),
                    onPressed: () {
                      // Handle yes button press
                      print('Yes button pressed');
                    },
                  ),
                  // Create an AlignedDialogButton instance for the no button
                  AlignedDialogButton(
                    child: Text('No'),
                    onPressed: () {
                      // Handle no button press
                      print('No button pressed');
                    },
                  ),
                ],
              ).show();
            },
            child: Text('Show Dialog'),
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user clicks the "Show Dialog" button.
// 2. The AlignedDialog instance is created and shown.
// 3. The user clicks one of the buttons (yes or no).
// 4. The corresponding button press handler is called.
// 5. The handler prints a message to the console indicating which button was pressed.

// In summary, the code creates an AlignedDialog instance with two buttons and shows it when the user clicks the "Show Dialog" button. When the user clicks one of the buttons, the corresponding handler is called, and a message is printed to the console.
```

<-- END_MAIN -->
Sure! Here’s a detailed technical blog on the `turkmen_localization_support` Flutter package, structured as requested.

<!-- START_DESCRIPTION -->
# Turkmen Localization Support Flutter Package

The `turkmen_localization_support` package is designed to provide comprehensive localization support for Flutter applications targeting Turkmen-speaking users. This package simplifies the process of translating your app's content into the Turkmen language, ensuring that your application is accessible and user-friendly for Turkmen speakers.

## When to Use This Package

You should consider using the `turkmen_localization_support` package when:
- You are developing a Flutter application that will be used primarily by Turkmen speakers.
- You want to enhance user experience by providing localized content.
- You need to comply with localization standards for specific markets or regions.

## Features

- **Easy Integration**: The package can be easily integrated into existing Flutter applications.
- **Comprehensive Translations**: It provides a wide range of translations for common phrases and terms used in applications.
- **Customizable**: Developers can add their own translations to meet specific application needs.
- **Support for Plurals and Gender**: The package supports pluralization and gender-specific translations, making it versatile for various contexts.

By utilizing this package, developers can ensure that their applications resonate well with Turkmen users, enhancing engagement and usability.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Turkmen Localization Support Package

In this tutorial, we will walk through the setup process for the `turkmen_localization_support` package and demonstrate how to use it effectively in your Flutter application.

## Step 1: Adding the Dependency

To get started, add the `turkmen_localization_support` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  turkmen_localization_support: ^1.0.0  # Check for the latest version on pub.dev
```

## Step 2: Importing the Package

In your Dart files, import the package:

```dart
import 'package:turkmen_localization_support/turkmen_localization_support.dart';
```

## Step 3: Configuring Localization

### Android Configuration

1. Open `android/app/src/main/AndroidManifest.xml`.
2. Ensure that the `android:locale` attribute is set to `tr` for Turkmen:

```xml
<application
    android:label="Your App Name"
    android:locale="tk">
```

### iOS Configuration

1. Open `ios/Runner/Info.plist`.
2. Add the following key-value pair to support Turkmen localization:

```xml
<key>CFBundleLocalizations</key>
<array>
    <string>tk</string>
</array>
```

## Step 4: Using the Package

To use the localization features, you need to initialize the localization support in your main application file. Here’s how you can do it:

```dart
void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Turkmen Localization Demo',
      localizationsDelegates: [
        TurkmenLocalization.delegate, // Add the localization delegate
        GlobalMaterialLocalizations.delegate,
        GlobalWidgetsLocalizations.delegate,
        GlobalCupertinoLocalizations.delegate,
      ],
      supportedLocales: [
        const Locale('tk', ''), // Turkmen
      ],
      home: HomePage(),
    );
  }
}
```

In your `HomePage`, you can access localized strings like this:

```dart
class HomePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(TurkmenLocalization.of(context).hello), // Accessing localized string
      ),
      body: Center(
        child: Text(TurkmenLocalization.of(context).welcomeMessage), // Another localized string
      ),
    );
  }
}
```

With these steps, you have successfully set up and utilized the `turkmen_localization_support` package in your Flutter application.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using the Turkmen Localization Support Package

```dart
import 'package:flutter/material.dart';
import 'package:turkmen_localization_support/turkmen_localization_support.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Turkmen Localization Demo',
      localizationsDelegates: [
        TurkmenLocalization.delegate, // Adding the localization delegate for Turkmen
        GlobalMaterialLocalizations.delegate,
        GlobalWidgetsLocalizations.delegate,
        GlobalCupertinoLocalizations.delegate,
      ],
      supportedLocales: [
        const Locale('tk', ''), // Supporting Turkmen language
      ],
      home: HomePage(), // Setting the home page of the app
    );
  }
}

class HomePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(TurkmenLocalization.of(context).hello), // Displaying localized greeting
      ),
      body: Center(
        child: Text(TurkmenLocalization.of(context).welcomeMessage), // Displaying localized welcome message
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function initializes the Flutter app by calling runApp() with MyApp.
// 2. MyApp sets up the MaterialApp with localization delegates and supported locales.
// 3. The HomePage is set as the home of the app, which contains an AppBar and a Center widget.
// 4. The AppBar title and the body text are populated with localized strings using the TurkmenLocalization class.
// 5. When the app runs, it displays a greeting and a welcome message in Turkmen, enhancing user experience for Turkmen speakers.
```

<!-- END_MAIN -->

In summary, this blog provided a comprehensive overview of the `turkmen_localization_support` package, including its features, setup instructions, and a complete example. By following the steps outlined, developers can easily integrate Turkmen localization into their Flutter applications, ensuring a better experience for Turkmen-speaking users.
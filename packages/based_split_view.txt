# Flutter Package: based_split_view

<!-- START_DESCRIPTION -->
## Description

The `based_split_view` Flutter package is designed to create a responsive and customizable split view layout for your applications. This package is particularly useful when you want to display two or more widgets side by side, allowing users to interact with them simultaneously. It is ideal for applications that require a dual-pane interface, such as chat applications, dashboards, or any app that benefits from a split-screen design.

### Key Features:
- **Customizable Split Ratios**: Easily adjust the size of each pane in the split view.
- **Resizable Panes**: Users can resize the panes dynamically, providing a flexible user experience.
- **Responsive Design**: The layout adapts to different screen sizes, making it suitable for both mobile and tablet devices.
- **Easy Integration**: Simple API that allows for quick implementation in existing Flutter projects.

### When to Use:
- When building applications that require a dual-pane interface.
- For dashboards that display multiple data views simultaneously.
- In chat applications where you want to show a list of conversations alongside the chat window.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
## Tutorial

### Installation

To use the `based_split_view` package, you need to add it to your `pubspec.yaml` file. Open your `pubspec.yaml` and add the following line under dependencies:

```yaml
dependencies:
  based_split_view: ^latest_version
```

Make sure to replace `latest_version` with the most recent version available on [pub.dev](https://pub.dev/packages/based_split_view).

### Platform-Specific Details

#### Android
No specific configurations are required for Android. Just ensure that your Flutter environment is set up correctly.

#### iOS
For iOS, ensure that you have the latest version of Xcode installed. You may also need to run `pod install` in the `ios` directory of your Flutter project to ensure all dependencies are correctly set up.

### Basic Usage

To use the `based_split_view` package, you can follow these steps:

1. Import the package in your Dart file:
   ```dart
   import 'package:based_split_view/based_split_view.dart';
   ```

2. Create a `SplitView` widget in your widget tree:
   ```dart
   SplitView(
     view1: Container(color: Colors.red), // First pane
     view2: Container(color: Colors.blue), // Second pane
   );
   ```

3. Customize the split ratio and add resizable functionality:
   ```dart
   SplitView(
     view1: Container(color: Colors.red),
     view2: Container(color: Colors.blue),
     splitRatio: 0.3, // 30% for the first pane
     resizable: true, // Allow resizing
   );
   ```

This will create a basic split view layout with two colored containers.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
## Complete Example

```dart
import 'package:flutter/material.dart';
import 'package:based_split_view/based_split_view.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Based Split View Example',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Based Split View Example'),
        ),
        body: SplitView(
          view1: Container(
            color: Colors.red,
            child: Center(child: Text('View 1', style: TextStyle(color: Colors.white, fontSize: 24))),
          ),
          view2: Container(
            color: Colors.blue,
            child: Center(child: Text('View 2', style: TextStyle(color: Colors.white, fontSize: 24))),
          ),
          splitRatio: 0.5, // Set initial split ratio to 50%
          resizable: true, // Enable resizing of the panes
        ),
      ),
    );
  }
}

// The above code creates a Flutter application with a split view layout.
// 1. The main function initializes the app by calling runApp with the RealFlutter widget.
// 2. The RealFlutter widget builds a MaterialApp with a title and a Scaffold.
// 3. The Scaffold contains an AppBar with the title 'Based Split View Example'.
// 4. The body of the Scaffold is a SplitView widget that contains two views:
//    - The first view (view1) is a red container with centered text 'View 1'.
//    - The second view (view2) is a blue container with centered text 'View 2'.
// 5. The splitRatio is set to 0.5, meaning both views will take up equal space initially.
// 6. The resizable property is set to true, allowing users to adjust the size of the panes dynamically.
```

<!-- END_MAIN -->

## Summary
In this blog post, we explored the `based_split_view` Flutter package, which provides a powerful way to create split view layouts in your applications. We covered its features, installation process, and provided a complete example demonstrating how to implement a split view with resizable panes. This package is particularly useful for applications that require a dual-pane interface, enhancing user experience by allowing simultaneous interaction with multiple views.
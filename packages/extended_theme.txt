```markdown
<!-- START_DESCRIPTION -->
# Exploring the Extended Theme Flutter Package

The **extended_theme** package is a powerful tool for Flutter developers looking to implement a flexible and dynamic theming system in their applications. It allows for the creation of themes that can be easily extended and customized, making it ideal for applications that require a consistent look and feel across various screens and components.

## When to Use Extended Theme

You might consider using the **extended_theme** package in scenarios such as:
- Building applications with multiple themes (e.g., light and dark modes).
- Creating a consistent design language across different parts of your app.
- Allowing users to customize their theme preferences dynamically.

## Key Features

- **Dynamic Theming**: Easily switch between themes at runtime.
- **Custom Theme Extensions**: Extend existing themes with additional properties.
- **Light and Dark Mode Support**: Built-in support for both light and dark themes.
- **Easy Integration**: Simple setup process that integrates seamlessly with existing Flutter applications.

With these features, the **extended_theme** package provides a robust solution for managing themes in Flutter applications.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Extended Theme

## Installation

To get started with the **extended_theme** package, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  extended_theme: ^latest_version
```

Make sure to replace `latest_version` with the most recent version available on [pub.dev](https://pub.dev/packages/extended_theme).

## Platform-Specific Details

### Android

For Android, ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

### iOS

For iOS, you may need to set the deployment target in your `ios/Podfile`:

```ruby
platform :ios, '10.0'
```

## Basic Usage

1. **Import the Package**: Start by importing the package in your Dart file.

   ```dart
   import 'package:extended_theme/extended_theme.dart';
   ```

2. **Define Your Themes**: Create your light and dark themes using the `ExtendedThemeData` class.

   ```dart
   final lightTheme = ExtendedThemeData(
     primaryColor: Colors.blue,
     accentColor: Colors.amber,
     // Add more theme properties as needed
   );

   final darkTheme = ExtendedThemeData(
     primaryColor: Colors.black,
     accentColor: Colors.red,
     // Add more theme properties as needed
   );
   ```

3. **Wrap Your App**: Use the `ExtendedTheme` widget to wrap your application and provide the theme data.

   ```dart
   void main() {
     runApp(
       ExtendedTheme(
         data: lightTheme,
         child: MyApp(),
       ),
     );
   }
   ```

4. **Switching Themes**: You can switch themes dynamically by using the `ExtendedTheme.of(context)` method to access the current theme and update it.

This setup will allow you to leverage the full capabilities of the **extended_theme** package in your Flutter application.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using Extended Theme

```dart
import 'package:flutter/material.dart';
import 'package:extended_theme/extended_theme.dart';

void main() {
  runApp(
    ExtendedTheme(
      data: lightTheme, // Set the initial theme to light
      child: RealFlutter(), // Main application widget
    ),
  );
}

// Define light and dark themes
final lightTheme = ExtendedThemeData(
  primaryColor: Colors.blue,
  accentColor: Colors.amber,
  // Additional properties can be added here
);

final darkTheme = ExtendedThemeData(
  primaryColor: Colors.black,
  accentColor: Colors.red,
  // Additional properties can be added here
);

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  bool isDarkMode = false; // State variable to track theme mode

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Extended Theme Example',
      theme: ExtendedTheme.of(context).data, // Use the current theme
      home: Scaffold(
        appBar: AppBar(
          title: Text('Extended Theme Example'),
          actions: [
            IconButton(
              icon: Icon(Icons.brightness_6),
              onPressed: () {
                // Toggle between light and dark themes
                setState(() {
                  isDarkMode = !isDarkMode;
                  // Update the theme based on the current mode
                  ExtendedTheme.of(context).data = isDarkMode ? darkTheme : lightTheme;
                });
              },
            ),
          ],
        ),
        body: Center(
          child: Text(
            'Current Theme: ${isDarkMode ? "Dark" : "Light"}',
            style: TextStyle(fontSize: 24),
          ),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts by running the ExtendedTheme widget with the light theme.
// 2. The RealFlutter widget is created, which contains a stateful widget to manage theme toggling.
// 3. The AppBar contains an icon button that toggles the theme between light and dark modes.
// 4. When the button is pressed, the state is updated, and the theme is switched accordingly.
// 5. The body of the Scaffold displays the current theme mode to the user.
```
<!-- END_MAIN -->
```

### Summary of Application Flow
The application begins by initializing with a light theme. The `RealFlutter` widget manages the state of the theme, allowing users to toggle between light and dark modes using an icon button in the AppBar. When the button is pressed, the application updates the theme dynamically, reflecting the change in the UI. The current theme mode is displayed in the center of the screen, providing immediate feedback to the user. This example demonstrates the flexibility and ease of use of the **extended_theme** package in managing themes within a Flutter application.
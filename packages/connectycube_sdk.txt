<-- START_DESCRIPTION -->

Connectycube SDK Flutter Package
================================

The Connectycube SDK is a Flutter package that provides a set of APIs for building real-time communication and collaboration applications. It allows developers to easily integrate features such as video conferencing, screen sharing, and messaging into their apps.

When to Use
------------

The Connectycube SDK is ideal for building applications that require real-time communication and collaboration, such as:

* Video conferencing apps
* Online meeting and collaboration tools
* Virtual event platforms
* Social media apps with real-time messaging

Features
--------

The Connectycube SDK provides a range of features, including:

* Real-time video and audio conferencing
* Screen sharing and presentation
* Messaging and chat functionality
* User authentication and authorization
* File sharing and storage

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Configuration
------------------------

To use the Connectycube SDK in your Flutter app, follow these steps:

### Step 1: Add the Connectycube SDK to your project

Add the following dependency to your `pubspec.yaml` file:
```yml
dependencies:
  flutter:
    sdk: flutter
  connectycube_sdk: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Configure the Connectycube SDK

Create a new file called `connectycube_config.dart` and add the following code:
```dart
import 'package:connectycube_sdk/connectycube_sdk.dart';

class ConnectycubeConfig {
  static const String appId = 'YOUR_APP_ID';
  static const String authKey = 'YOUR_AUTH_KEY';
  static const String authSecret = 'YOUR_AUTH_SECRET';
}
```
Replace `YOUR_APP_ID`, `YOUR_AUTH_KEY`, and `YOUR_AUTH_SECRET` with your actual Connectycube credentials.

### Step 3: Initialize the Connectycube SDK

In your `main.dart` file, add the following code to initialize the Connectycube SDK:
```dart
import 'package:flutter/material.dart';
import 'package:connectycube_sdk/connectycube_sdk.dart';
import 'connectycube_config.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Connectycube Demo',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Connectycube Demo'),
        ),
        body: Center(
          child: Text('Connectycube Demo'),
        ),
      ),
    );
  }
}

void initConnectycube() {
  Connectycube.init(
    appId: ConnectycubeConfig.appId,
    authKey: ConnectycubeConfig.authKey,
    authSecret: ConnectycubeConfig.authSecret,
  );
}
```
Call the `initConnectycube` function before running the app.

### Platform-Specific Configurations

#### Android

In your `AndroidManifest.xml` file, add the following permissions:
```xml
<uses-permission android:name="android.permission.INTERNET" />
<uses-permission android:name="android.permission.CAMERA" />
<uses-permission android:name="android.permission.RECORD_AUDIO" />
```
#### iOS

In your `Info.plist` file, add the following permissions:
```xml
<key>NSCameraUsageDescription</key>
<string>This app needs camera access to work</string>
<key>NSMicrophoneUsageDescription</key>
<string>This app needs microphone access to work</string>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:connectycube_sdk/connectycube_sdk.dart';
import 'connectycube_config.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Connectycube Demo',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Connectycube Demo'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Text('Connectycube Demo'),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  // Create a new user
                  createUser();
                },
                child: Text('Create User'),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  // Login to the app
                  login();
                },
                child: Text('Login'),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  // Start a video call
                  startVideoCall();
                },
                child: Text('Start Video Call'),
              ),
            ],
          ),
        ),
      ),
    );
  }

  void createUser() {
    // Create a new user
    ConnectycubeUser user = ConnectycubeUser(
      login: 'user123',
      password: 'password123',
    );

    Connectycube.createSession(user).then((session) {
      print('User created successfully');
    }).catchError((error) {
      print('Error creating user: $error');
    });
  }

  void login() {
    // Login to the app
    ConnectycubeUser user = ConnectycubeUser(
      login: 'user123',
      password: 'password123',
    );

    Connectycube.login(user).then((session) {
      print('Logged in successfully');
    }).catchError((error) {
      print('Error logging in: $error');
    });
  }

  void startVideoCall() {
    // Start a video call
    ConnectycubeVideoCall call = ConnectycubeVideoCall(
      sessionId: 'session123',
      opponentId: 123,
    );

    Connectycube.startVideoCall(call).then((call) {
      print('Video call started successfully');
    }).catchError((error) {
      print('Error starting video call: $error');
    });
  }
}

// The app starts by initializing the Connectycube SDK
// Then, it creates a new user and logs in to the app
// After logging in, it starts a video call with an opponent
// The video call is started using the startVideoCall function
// The startVideoCall function takes a ConnectycubeVideoCall object as an argument
// The ConnectycubeVideoCall object contains the session ID and opponent ID
// The session ID is used to identify the video call session
// The opponent ID is used to identify the opponent in the video call
```

<-- END_MAIN -->
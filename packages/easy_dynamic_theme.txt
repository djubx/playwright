Here's a detailed technical blog on the "easy_dynamic_theme" Flutter package, structured as requested.

<!-- START_DESCRIPTION -->
# Easy Dynamic Theme Flutter Package

The **easy_dynamic_theme** package is a powerful tool for Flutter developers looking to implement dynamic theming in their applications. This package allows you to easily switch between light and dark themes, or even custom themes, without the need for complex state management solutions. 

## When to Use This Package
You should consider using the **easy_dynamic_theme** package when:
- You want to provide users with a seamless experience by allowing them to switch themes dynamically.
- You are developing applications that require a consistent look and feel across different platforms (iOS and Android).
- You want to enhance user experience by respecting system-wide theme preferences (light or dark mode).

## Features
- **Dynamic Theme Switching**: Easily switch between themes at runtime.
- **Persistent Theme**: The selected theme is saved and restored on app restart.
- **Custom Themes**: Create and use custom themes beyond just light and dark.
- **Simple API**: Easy to integrate with minimal boilerplate code.

With these features, the **easy_dynamic_theme** package simplifies the process of managing themes in Flutter applications, making it an excellent choice for developers looking to enhance their apps' UI/UX.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Easy Dynamic Theme

## Step 1: Adding the Dependency
To get started, add the **easy_dynamic_theme** package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  easy_dynamic_theme: ^2.0.0  # Check for the latest version on pub.dev
```

## Step 2: Importing the Package
In your Dart files, import the package:

```dart
import 'package:easy_dynamic_theme/easy_dynamic_theme.dart';
```

## Step 3: Wrapping Your App
Wrap your main application widget with `EasyDynamicThemeWidget`. This allows the theme to be accessible throughout your app.

```dart
void main() {
  runApp(EasyDynamicThemeWidget(child: MyApp()));
}
```

## Step 4: Using the Theme
You can now use the `EasyDynamicTheme` class to switch themes. Hereâ€™s how to toggle between light and dark themes:

```dart
EasyDynamicTheme.of(context).changeTheme();
```

## Platform-Specific Details
### Android
For Android, ensure that your `AndroidManifest.xml` file has the correct theme settings. You may want to set the default theme to match your app's primary theme.

### iOS
For iOS, ensure that your app respects the system theme settings. You can do this by setting the `UIUserInterfaceStyle` in your `Info.plist` file.

```xml
<key>UIUserInterfaceStyle</key>
<string>Automatic</string>
```

## Step 5: Custom Themes
You can define custom themes by creating a `ThemeData` object and passing it to the `EasyDynamicTheme` widget. This allows for a more personalized user experience.

```dart
final ThemeData customTheme = ThemeData(
  primaryColor: Colors.blue,
  accentColor: Colors.orange,
  brightness: Brightness.light,
);
```

## Step 6: Persisting the Theme
The package automatically persists the selected theme using shared preferences, so users will see their chosen theme when they reopen the app.

With these steps, you can easily set up and use the **easy_dynamic_theme** package in your Flutter application.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Easy Dynamic Theme

```dart
import 'package:flutter/material.dart';
import 'package:easy_dynamic_theme/easy_dynamic_theme.dart';

void main() {
  // Wrapping the app with EasyDynamicThemeWidget to enable dynamic theming
  runApp(EasyDynamicThemeWidget(child: RealFlutter()));
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Easy Dynamic Theme Example',
      theme: ThemeData.light(), // Default light theme
      darkTheme: ThemeData.dark(), // Default dark theme
      themeMode: EasyDynamicTheme.of(context).themeMode, // Use the current theme mode
      home: HomeScreen(),
    );
  }
}

class HomeScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Dynamic Theme Example'),
        actions: [
          // Button to toggle theme
          IconButton(
            icon: Icon(Icons.brightness_6),
            onPressed: () {
              // Change the theme when the button is pressed
              EasyDynamicTheme.of(context).changeTheme();
            },
          ),
        ],
      ),
      body: Center(
        child: Text(
          'Press the button to change theme!',
          style: TextStyle(fontSize: 20),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function initializes the app by wrapping it in EasyDynamicThemeWidget.
// 2. The RealFlutter class builds the MaterialApp with light and dark themes.
// 3. The HomeScreen class contains an AppBar with a button to toggle the theme.
// 4. When the button is pressed, the theme changes dynamically, and the new theme is persisted.
// 5. The app will remember the user's theme choice even after restarting.
```

<!-- END_MAIN -->

In this example, we demonstrated how to implement the **easy_dynamic_theme** package in a Flutter application. The application allows users to toggle between light and dark themes seamlessly. The comments within the code provide a step-by-step explanation of the application flow, ensuring clarity on how the dynamic theming works. 

In summary, the **easy_dynamic_theme** package simplifies the process of managing themes in Flutter applications, providing a user-friendly experience while maintaining a clean and efficient codebase.
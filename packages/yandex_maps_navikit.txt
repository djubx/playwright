Here's a detailed technical blog on the `yandex_maps_navikit` Flutter package, structured as requested.

<!-- START_DESCRIPTION -->
# Yandex Maps Navikit Flutter Package

The `yandex_maps_navikit` package is a powerful tool for integrating Yandex Maps into Flutter applications. It provides developers with the ability to display maps, add markers, and utilize navigation features, making it an excellent choice for applications that require geolocation services.

## When to Use This Package

You should consider using the `yandex_maps_navikit` package in scenarios such as:

- **Travel Applications**: To provide users with maps and navigation features for exploring new locations.
- **Delivery Services**: To track delivery routes and provide real-time navigation for drivers.
- **Location-Based Services**: For applications that require users to find nearby services or points of interest.

## Features

- **Map Display**: Render interactive maps with various styles.
- **Markers**: Add custom markers to the map to indicate specific locations.
- **Navigation**: Utilize built-in navigation features to guide users from one point to another.
- **Geolocation**: Access the user's current location and display it on the map.

The package is designed to be easy to use and integrates seamlessly with Flutter's widget system, allowing for a smooth development experience.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up Yandex Maps Navikit

In this tutorial, we will walk through the setup process for the `yandex_maps_navikit` package and demonstrate how to use its features in a Flutter application.

## Step 1: Add Dependency

To get started, add the `yandex_maps_navikit` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  yandex_maps_navikit: ^latest_version
```

Make sure to replace `latest_version` with the most recent version of the package.

## Step 2: Platform-Specific Configuration

### Android

1. **Update AndroidManifest.xml**: Add the following permissions and metadata to your `AndroidManifest.xml` file:

```xml
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.yandex_maps_navikit_example">

    <application>
        <meta-data
            android:name="com.yandex.maps.api.key"
            android:value="YOUR_YANDEX_MAPS_API_KEY"/>
    </application>

    <uses-permission android:name="android.permission.INTERNET"/>
    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>
</manifest>
```

2. **Obtain an API Key**: Sign up for a Yandex account and obtain an API key for Yandex Maps.

### iOS

1. **Update Info.plist**: Add the following keys to your `Info.plist` file:

```xml
<key>NSLocationWhenInUseUsageDescription</key>
<string>We need your location to show it on the map.</string>
<key>NSLocationAlwaysUsageDescription</key>
<string>We need your location to provide navigation services.</string>
```

2. **Obtain an API Key**: Similar to Android, you will need an API key for Yandex Maps.

## Step 3: Using the Package

Now that we have set up the package, we can start using it in our Flutter application. Below is a complete example demonstrating how to implement the key features of the `yandex_maps_navikit` package.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Yandex Maps Navikit

```dart
import 'package:flutter/material.dart';
import 'package:yandex_maps_navikit/yandex_maps_navikit.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Yandex Maps Navikit Example',
      home: MapScreen(),
    );
  }
}

class MapScreen extends StatefulWidget {
  @override
  _MapScreenState createState() => _MapScreenState();
}

class _MapScreenState extends State<MapScreen> {
  late YandexMapController _controller;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Yandex Maps Navikit Example'),
      ),
      body: YandexMap(
        onMapCreated: (YandexMapController controller) {
          _controller = controller; // Store the controller for later use
          _addMarker(); // Call method to add a marker
        },
        onMapTap: (point) {
          // Handle map tap events
          print('Map tapped at: $point');
        },
      ),
    );
  }

  void _addMarker() {
    // Define the position for the marker
    final point = Point(latitude: 55.751244, longitude: 37.618423); // Moscow coordinates

    // Create a marker
    _controller.addPlacemark(
      Placemark(
        point: point,
        icon: PlacemarkIcon.single(
          BitmapDescriptor.fromAssetImage('assets/marker.png'), // Custom marker image
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function initializes the app by running the RealFlutter widget.
// 2. RealFlutter builds a MaterialApp with a title and a home screen (MapScreen).
// 3. MapScreen is a stateful widget that creates a YandexMap widget.
// 4. When the map is created, the onMapCreated callback is triggered, storing the controller.
// 5. The _addMarker method is called to add a custom marker at specified coordinates (Moscow).
// 6. The onMapTap callback allows handling tap events on the map, printing the tapped location.
```

<!-- END_MAIN -->

## Summary

In this blog, we explored the `yandex_maps_navikit` Flutter package, detailing its features and providing a comprehensive tutorial on how to set it up and use it in a Flutter application. The complete example demonstrated how to create a simple map application with a custom marker and handle user interactions. By following the steps outlined, developers can easily integrate Yandex Maps into their Flutter projects, enhancing the user experience with powerful mapping and navigation capabilities.
# QuickBlox SDK Flutter Package

## <-- START_DESCRIPTION -->

### Description

The `quickblox_sdk` Flutter package is a powerful tool designed for developers looking to integrate real-time communication features into their applications. QuickBlox provides a comprehensive backend solution for chat, video calling, and other communication functionalities, making it an excellent choice for applications that require user interaction.

### When to Use

You might consider using the `quickblox_sdk` package in scenarios such as:
- Building a chat application where users can send and receive messages in real-time.
- Developing a video conferencing app that requires seamless video and audio communication.
- Creating a social networking app that includes user profiles and messaging features.

### Features

- **Real-time Messaging**: Send and receive messages instantly with support for one-on-one and group chats.
- **Video and Audio Calls**: Implement high-quality video and audio calling features.
- **User Management**: Handle user authentication and management easily.
- **File Sharing**: Share images, videos, and other files within chats.
- **Push Notifications**: Receive notifications for new messages and calls.

## <-- END_DESCRIPTION -->

## <-- START_TUTORIAL -->

### Tutorial

To get started with the `quickblox_sdk`, follow these steps:

#### Step 1: Add Dependency

Add the `quickblox_sdk` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  quickblox_sdk: ^latest_version
```

Make sure to replace `latest_version` with the most recent version available.

#### Step 2: Platform-Specific Configuration

**For Android:**
1. Open `android/app/build.gradle` and ensure you have the following configurations:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21 // or higher
        ...
    }
}
```

2. Add the required permissions in `AndroidManifest.xml`:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
<uses-permission android:name="android.permission.CAMERA"/>
<uses-permission android:name="android.permission.RECORD_AUDIO"/>
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
```

**For iOS:**
1. Open `ios/Runner/Info.plist` and add the following permissions:

```xml
<key>NSCameraUsageDescription</key>
<string>We need access to your camera for video calls.</string>
<key>NSMicrophoneUsageDescription</key>
<string>We need access to your microphone for audio calls.</string>
<key>NSPhotoLibraryUsageDescription</key>
<string>We need access to your photo library to share images.</string>
```

#### Step 3: Initialize QuickBlox

In your main application file, initialize QuickBlox with your application credentials:

```dart
import 'package:quickblox_sdk/quickblox_sdk.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  
  // Initialize QuickBlox with your credentials
  await QB.settings.init(
    applicationId: 'YOUR_APP_ID',
    authKey: 'YOUR_AUTH_KEY',
    authSecret: 'YOUR_AUTH_SECRET',
    accountKey: 'YOUR_ACCOUNT_KEY',
  );

  runApp(MyApp());
}
```

### Step 4: Implementing Features

You can now start implementing features like user authentication, messaging, and video calls using the methods provided by the `quickblox_sdk`. Refer to the official documentation for detailed API usage.

## <-- END_TUTORIAL -->

## <-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:quickblox_sdk/quickblox_sdk.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  
  // Initialize QuickBlox with your credentials
  await QB.settings.init(
    applicationId: 'YOUR_APP_ID',
    authKey: 'YOUR_AUTH_KEY',
    authSecret: 'YOUR_AUTH_SECRET',
    accountKey: 'YOUR_ACCOUNT_KEY',
  );

  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'QuickBlox Demo',
      home: HomeScreen(),
    );
  }
}

class HomeScreen extends StatefulWidget {
  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  // Variables to hold user credentials
  String username = '';
  String password = '';

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('QuickBlox Chat')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            TextField(
              decoration: InputDecoration(labelText: 'Username'),
              onChanged: (value) {
                username = value; // Capture username input
              },
            ),
            TextField(
              decoration: InputDecoration(labelText: 'Password'),
              onChanged: (value) {
                password = value; // Capture password input
              },
              obscureText: true,
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () async {
                // Authenticate user
                try {
                  var result = await QB.users.login(username, password);
                  if (result != null) {
                    // Navigate to chat screen on successful login
                    Navigator.push(
                      context,
                      MaterialPageRoute(builder: (context) => ChatScreen()),
                    );
                  }
                } catch (e) {
                  // Handle login error
                  print('Login failed: $e');
                }
              },
              child: Text('Login'),
            ),
          ],
        ),
      ),
    );
  }
}

class ChatScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Chat')),
      body: Center(
        child: Text('Welcome to the chat!'),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts by initializing QuickBlox with the provided credentials.
// 2. The `RealFlutter` widget is the main entry point, which sets up the MaterialApp.
// 3. The `HomeScreen` widget allows users to input their username and password.
// 4. Upon pressing the login button, the app attempts to authenticate the user with QuickBlox.
// 5. If authentication is successful, the app navigates to the `ChatScreen`, where users can interact.
// 6. The `ChatScreen` currently displays a welcome message, but can be expanded to include chat functionalities.
```

## <-- END_MAIN -->

### Summary

In this blog post, we explored the `quickblox_sdk` Flutter package, detailing its features, setup process, and providing a complete example of a simple chat application. The application flow was explained step-by-step through comments in the code, demonstrating how to authenticate users and navigate between screens. This package is ideal for developers looking to implement real-time communication features in their Flutter applications.
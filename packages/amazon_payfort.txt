<-- START_DESCRIPTION -->

# Amazon Payfort Flutter Package
=====================================

The `amazon_payfort` Flutter package is a payment gateway that allows users to make secure payments through Amazon Payfort. This package provides a seamless payment experience for users, allowing them to pay with their Amazon Payfort account.

## When to Use This Package
---------------------------

This package is ideal for e-commerce applications that want to provide a secure and trusted payment option to their users. It can be used for various types of transactions, such as purchasing products, services, or subscriptions.

## Features
------------

*   Secure payment processing through Amazon Payfort
*   Support for various payment methods, including credit cards and debit cards
*   Easy integration with Flutter applications
*   Customizable payment UI

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Amazon Payfort Flutter Package
================================================================

## Step 1: Add the Package to Your Flutter Project
------------------------------------------------

To add the `amazon_payfort` package to your Flutter project, add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  amazon_payfort: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Step 2: Import the Package
---------------------------

Import the `amazon_payfort` package in your Dart file:

```dart
import 'package:amazon_payfort/amazon_payfort.dart';
```

## Step 3: Initialize the Package
-------------------------------

Initialize the `amazon_payfort` package with your Amazon Payfort credentials:

```dart
AmazonPayfort amazonPayfort = AmazonPayfort(
  clientId: 'YOUR_CLIENT_ID',
  clientSecret: 'YOUR_CLIENT_SECRET',
);
```

## Step 4: Create a Payment Request
---------------------------------

Create a payment request with the required amount and currency:

```dart
PaymentRequest paymentRequest = PaymentRequest(
  amount: 10.99,
  currency: 'USD',
);
```

## Step 5: Start the Payment Process
----------------------------------

Start the payment process using the `amazonPayfort` instance:

```dart
amazonPayfort.startPayment(
  paymentRequest: paymentRequest,
  onSuccess: (paymentResponse) {
    // Handle payment success
  },
  onFailure: (error) {
    // Handle payment failure
  },
);
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:amazon_payfort/amazon_payfort.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  AmazonPayfort _amazonPayfort;
  PaymentRequest _paymentRequest;

  @override
  void initState() {
    super.initState();
    _amazonPayfort = AmazonPayfort(
      clientId: 'YOUR_CLIENT_ID',
      clientSecret: 'YOUR_CLIENT_SECRET',
    );
    _paymentRequest = PaymentRequest(
      amount: 10.99,
      currency: 'USD',
    );
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Amazon Payfort Example'),
        ),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              _amazonPayfort.startPayment(
                paymentRequest: _paymentRequest,
                onSuccess: (paymentResponse) {
                  // Handle payment success
                  print('Payment successful!');
                },
                onFailure: (error) {
                  // Handle payment failure
                  print('Payment failed!');
                },
              );
            },
            child: Text('Make Payment'),
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user clicks the "Make Payment" button.
// 2. The _amazonPayfort.startPayment method is called with the payment request.
// 3. The user is redirected to the Amazon Payfort payment page.
// 4. The user completes the payment process.
// 5. The payment response is received and handled by the onSuccess or onFailure callback.
// 6. The payment result is printed to the console.

// In a real-world application, you would handle the payment response by updating the user's account or sending a confirmation email.

// Note: You should replace 'YOUR_CLIENT_ID' and 'YOUR_CLIENT_SECRET' with your actual Amazon Payfort credentials.
```

<-- END_MAIN -->
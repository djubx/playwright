<-- START_DESCRIPTION -->

# Arrow Pad Flutter Package
================================

The `arrow_pad` Flutter package is a customizable arrow pad widget that allows users to input directions or navigate through a grid. It is a useful package for applications that require directional input, such as games or navigation systems.

## Features

* Customizable arrow pad layout and design
* Support for both Android and iOS platforms
* Optional haptic feedback on arrow press
* Optional callback functions for arrow press and release events

## When to Use

The `arrow_pad` package is suitable for applications that require directional input, such as:

* Games that require player movement or direction input
* Navigation systems that require users to input directions
* Applications that require users to control a robot or drone

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Arrow Pad Package
=====================================================

## Step 1: Add the Package to Your Project

Add the `arrow_pad` package to your project by adding the following line to your `pubspec.yaml` file:
```yml
dependencies:
  arrow_pad: ^1.0.0
```
Then, run `flutter pub get` to install the package.

## Step 2: Import the Package

Import the `arrow_pad` package in your Dart file:
```dart
import 'package:arrow_pad/arrow_pad.dart';
```
## Step 3: Create an Arrow Pad Widget

Create an `ArrowPad` widget and customize its layout and design as needed:
```dart
ArrowPad(
  // Optional: customize the arrow pad layout and design
  arrowColor: Colors.blue,
  arrowSize: 50,
  hapticFeedback: true,
  // Optional: add callback functions for arrow press and release events
  onArrowPress: (direction) {
    print('Arrow pressed: $direction');
  },
  onArrowRelease: (direction) {
    print('Arrow released: $direction');
  },
)
```
## Platform-Specific Details

* Android: The `arrow_pad` package uses the `android.view.HapticFeedbackConstants` class to provide haptic feedback on arrow press.
* iOS: The `arrow_pad` package uses the `UIImpactFeedbackGenerator` class to provide haptic feedback on arrow press.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:arrow_pad/arrow_pad.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Arrow Pad Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Arrow Pad Demo'),
      ),
      body: Center(
        child: ArrowPad(
          // Optional: customize the arrow pad layout and design
          arrowColor: Colors.blue,
          arrowSize: 50,
          hapticFeedback: true,
          // Optional: add callback functions for arrow press and release events
          onArrowPress: (direction) {
            print('Arrow pressed: $direction');
          },
          onArrowRelease: (direction) {
            print('Arrow released: $direction');
          },
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user runs the app and is presented with an arrow pad widget.
// 2. The user presses an arrow on the arrow pad, triggering the onArrowPress callback function.
// 3. The onArrowPress callback function prints the direction of the arrow pressed to the console.
// 4. The user releases the arrow, triggering the onArrowRelease callback function.
// 5. The onArrowRelease callback function prints the direction of the arrow released to the console.
```

// Summary: The code flows by first presenting the user with an arrow pad widget. When the user presses an arrow, the onArrowPress callback function is triggered, printing the direction of the arrow pressed to the console. When the user releases the arrow, the onArrowRelease callback function is triggered, printing the direction of the arrow released to the console.

<-- END_MAIN -->
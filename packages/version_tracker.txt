<-- START_DESCRIPTION -->

**Version Tracker Flutter Package**
=====================================

The `version_tracker` Flutter package is a useful tool for tracking and managing app versions. It allows developers to easily check for updates, notify users of new versions, and even force updates when necessary. This package is particularly useful for apps that require frequent updates, such as games or social media apps.

**When to Use This Package**
---------------------------

* When you need to frequently update your app with new features or bug fixes.
* When you want to notify users of new versions and encourage them to update.
* When you need to force updates for critical security patches or major updates.

**Features**
------------

* Easy version tracking and management.
* Customizable update notifications.
* Force update option for critical updates.
* Supports both Android and iOS platforms.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setup and Usage**
-------------------

### Step 1: Add the Package to Your Pubspec.yaml File

```yml
dependencies:
  version_tracker: ^1.0.0
```

### Step 2: Import the Package in Your Dart File

```dart
import 'package:version_tracker/version_tracker.dart';
```

### Step 3: Initialize the Version Tracker

```dart
VersionTracker.init(
  apiKey: 'YOUR_API_KEY',
  appId: 'YOUR_APP_ID',
);
```

### Step 4: Check for Updates

```dart
VersionTracker.checkForUpdates().then((updateAvailable) {
  if (updateAvailable) {
    // Show update notification or force update
  }
});
```

### Platform-Specific Details

* Android: Make sure to add the `version_tracker` package to your AndroidManifest.xml file.
* iOS: Add the `version_tracker` package to your Info.plist file.

### Configurations and Optimizations

* You can customize the update notification by using the `VersionTracker.showUpdateNotification()` method.
* To force updates, use the `VersionTracker.forceUpdate()` method.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:version_tracker/version_tracker.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  void initState() {
    super.initState();
    // Initialize the version tracker
    VersionTracker.init(
      apiKey: 'YOUR_API_KEY',
      appId: 'YOUR_APP_ID',
    );
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Version Tracker Demo'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Text('Version Tracker Demo'),
              SizedBox(height: 20),
              // Check for updates button
              ElevatedButton(
                onPressed: () {
                  // Check for updates
                  VersionTracker.checkForUpdates().then((updateAvailable) {
                    if (updateAvailable) {
                      // Show update notification
                      VersionTracker.showUpdateNotification();
                    } else {
                      print('No updates available');
                    }
                  });
                },
                child: Text('Check for Updates'),
              ),
              SizedBox(height: 20),
              // Force update button
              ElevatedButton(
                onPressed: () {
                  // Force update
                  VersionTracker.forceUpdate();
                },
                child: Text('Force Update'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Application flow:
// 1. The app initializes the version tracker in the initState method.
// 2. The user clicks the "Check for Updates" button.
// 3. The app checks for updates using the VersionTracker.checkForUpdates method.
// 4. If an update is available, the app shows an update notification using the VersionTracker.showUpdateNotification method.
// 5. The user can choose to update or cancel.
// 6. If the user chooses to update, the app will download and install the update.
// 7. If the user clicks the "Force Update" button, the app will force an update using the VersionTracker.forceUpdate method.

// Summary:
// The app uses the version tracker package to check for updates and show update notifications.
// The user can choose to update or cancel.
// The app can also force updates using the VersionTracker.forceUpdate method.
```

<-- END_MAIN -->
# VPN Connection Detector Flutter Package

## <-- START_DESCRIPTION -->

### Overview

The `vpn_connection_detector` Flutter package is a powerful tool designed to help developers detect VPN connections on both Android and iOS devices. This package is particularly useful for applications that require awareness of the user's network environment, such as security-focused apps, location-based services, or any application that needs to adapt its behavior based on the user's connectivity status.

### When to Use

You might consider using the `vpn_connection_detector` package in scenarios such as:
- **Security Applications**: To ensure that sensitive data is not transmitted over a VPN.
- **Location-Based Services**: To provide accurate location data by detecting if the user is connected to a VPN.
- **Network Monitoring Tools**: To inform users about their current network status and any potential privacy implications.

### Features

- **Cross-Platform Support**: Works seamlessly on both Android and iOS.
- **Real-Time Detection**: Provides real-time updates on VPN connection status.
- **Simple API**: Easy to integrate with minimal setup required.
- **Event Listeners**: Allows developers to listen for changes in VPN connection status.

## <-- END_DESCRIPTION -->

## <-- START_TUTORIAL -->

### Setup Process

To get started with the `vpn_connection_detector` package, follow these steps:

1. **Add Dependency**: Open your `pubspec.yaml` file and add the package:

   ```yaml
   dependencies:
     vpn_connection_detector: ^1.0.0
   ```

   Make sure to run `flutter pub get` to install the package.

2. **Platform-Specific Configuration**:
   - **Android**: Ensure that your `AndroidManifest.xml` file includes the necessary permissions:

     ```xml
     <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>
     ```

   - **iOS**: No additional configuration is required for iOS, but ensure that your app has the appropriate entitlements if you are using any network-related features.

### Using the Package

To use the `vpn_connection_detector` package, you can follow these steps:

1. **Import the Package**:

   ```dart
   import 'package:vpn_connection_detector/vpn_connection_detector.dart';
   ```

2. **Initialize the Detector**: Create an instance of the `VpnConnectionDetector` and start listening for changes.

   ```dart
   VpnConnectionDetector vpnDetector = VpnConnectionDetector();
   ```

3. **Listen for VPN Status Changes**:

   ```dart
   vpnDetector.onVpnStatusChanged.listen((isConnected) {
     if (isConnected) {
       print("VPN is connected");
     } else {
       print("VPN is disconnected");
     }
   });
   ```

4. **Check Current VPN Status**:

   You can also check the current VPN status at any time:

   ```dart
   bool isConnected = await vpnDetector.isVpnConnected();
   ```

## <-- END_TUTORIAL -->

## <-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:vpn_connection_detector/vpn_connection_detector.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'VPN Connection Detector',
      home: VpnHomePage(),
    );
  }
}

class VpnHomePage extends StatefulWidget {
  @override
  _VpnHomePageState createState() => _VpnHomePageState();
}

class _VpnHomePageState extends State<VpnHomePage> {
  // Create an instance of the VpnConnectionDetector
  final VpnConnectionDetector vpnDetector = VpnConnectionDetector();
  bool isVpnConnected = false; // Variable to hold VPN connection status

  @override
  void initState() {
    super.initState();
    // Start listening for VPN status changes
    vpnDetector.onVpnStatusChanged.listen((isConnected) {
      setState(() {
        isVpnConnected = isConnected; // Update the state based on VPN status
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('VPN Connection Detector'),
      ),
      body: Center(
        child: Text(
          isVpnConnected ? 'VPN is Connected' : 'VPN is Disconnected',
          style: TextStyle(fontSize: 24),
        ),
      ),
    );
  }

  @override
  void dispose() {
    vpnDetector.dispose(); // Dispose of the VPN detector when the widget is removed
    super.dispose();
  }
}

// Application Flow Explanation:
// 1. The application starts with the main function, which runs the MyApp widget.
// 2. MyApp builds a MaterialApp with a title and a home page (VpnHomePage).
// 3. VpnHomePage is a StatefulWidget that maintains the VPN connection status.
// 4. In the initState method, we set up a listener for VPN status changes.
// 5. When the VPN status changes, we update the isVpnConnected variable and call setState to rebuild the UI.
// 6. The build method displays a message indicating whether the VPN is connected or disconnected.
// 7. Finally, we override the dispose method to clean up the VPN detector when the widget is removed.
```

## <-- END_MAIN -->

### Summary

In this blog post, we explored the `vpn_connection_detector` Flutter package, which allows developers to detect VPN connections on both Android and iOS platforms. We covered the setup process, including platform-specific configurations, and provided a complete example of a Flutter application that demonstrates the package's capabilities. The application listens for VPN status changes and updates the UI accordingly, providing a clear indication of the user's VPN connection status. This package is particularly useful for applications that require awareness of the user's network environment, enhancing security and user experience.
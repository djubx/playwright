<-- START_DESCRIPTION -->

# Simple Cluster Flutter Package
=====================================

The `simple_cluster` Flutter package is a lightweight library that allows you to easily implement clustering on maps. Clustering is a technique used to group nearby markers on a map, making it easier to display large numbers of markers without overwhelming the user.

### When to Use This Package

This package is ideal for applications that require displaying a large number of markers on a map, such as:

* Location-based services (e.g., food delivery, ride-hailing)
* Real estate applications
* Travel guides

### Features

* Supports both Android and iOS platforms
* Customizable cluster appearance
* Easy integration with Google Maps Flutter

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `simple_cluster` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  simple_cluster: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:simple_cluster/simple_cluster.dart';
```
### Step 3: Create a Cluster Manager

Create a cluster manager instance:
```dart
final clusterManager = ClusterManager(
  // The map controller
  mapController: _mapController,
  // The list of markers to cluster
  markers: _markers,
  // The cluster appearance customization
  clusterAppearance: ClusterAppearance(
    // The cluster icon
    icon: BitmapDescriptor.defaultMarker,
    // The cluster text style
    textStyle: TextStyle(
      fontSize: 16,
      color: Colors.white,
    ),
  ),
);
```
### Platform-Specific Details

* For Android, make sure to add the following line to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
```
* For iOS, make sure to add the following lines to your `Info.plist` file:
```xml
<key>NSLocationWhenInUseUsageDescription</key>
<string>This app needs access to location to work properly</string>
<key>NSLocationAlwaysAndWhenInUseUsageDescription</key>
<string>This app needs access to location to work properly</string>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'package:simple_cluster/simple_cluster.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final _mapController = GoogleMapController();
  final _markers = [
    Marker(
      markerId: MarkerId('1'),
      position: LatLng(37.7749, -122.4194),
    ),
    Marker(
      markerId: MarkerId('2'),
      position: LatLng(37.7859, -122.4364),
    ),
    Marker(
      markerId: MarkerId('3'),
      position: LatLng(37.7963, -122.4574),
    ),
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: GoogleMap(
        onMapCreated: (controller) {
          _mapController = controller;
          // Create a cluster manager
          final clusterManager = ClusterManager(
            mapController: _mapController,
            markers: _markers,
            clusterAppearance: ClusterAppearance(
              icon: BitmapDescriptor.defaultMarker,
              textStyle: TextStyle(
                fontSize: 16,
                color: Colors.white,
              ),
            ),
          );
          // Add the cluster manager to the map
          _mapController.addOverlay(clusterManager);
        },
        initialCameraPosition: CameraPosition(
          target: LatLng(37.7749, -122.4194),
          zoom: 12,
        ),
      ),
    );
  }
}

// The application flow:
// 1. The user opens the app and the map is displayed.
// 2. The cluster manager is created and added to the map.
// 3. The cluster manager groups the nearby markers into clusters.
// 4. The user can zoom in and out of the map to see the clusters and individual markers.
// 5. When the user clicks on a cluster, the map zooms in to show the individual markers.
```

// The final summary:
// The code creates a simple Flutter app that displays a map with clustered markers.
// The cluster manager is used to group nearby markers into clusters.
// The user can zoom in and out of the map to see the clusters and individual markers.
// When the user clicks on a cluster, the map zooms in to show the individual markers.

<-- END_MAIN -->
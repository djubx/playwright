<-- START_DESCRIPTION -->

# All Validations BR Flutter Package
=====================================

The `all_validations_br` Flutter package provides a set of pre-built validation rules for common Brazilian documents and information, such as CPF, CNPJ, and phone numbers. This package is essential for developers who need to validate user input data in their Flutter applications, especially when dealing with Brazilian users.

### When to Use This Package

You should use this package when:

* You need to validate Brazilian documents, such as CPF or CNPJ.
* You need to validate Brazilian phone numbers.
* You want to simplify the validation process in your Flutter application.

### Features

* CPF validation
* CNPJ validation
* Phone number validation
* Customizable validation rules

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Package
=============================================

### Step 1: Add the Package to Your Project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  all_validations_br: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:all_validations_br/all_validations_br.dart';
```
### Step 3: Use the Validation Rules

Use the validation rules to validate user input data:
```dart
class RealFlutter {
  final _formKey = GlobalKey<FormState>();

  @override
  Widget build(BuildContext context) {
    return Form(
      key: _formKey,
      child: Column(
        children: [
          TextFormField(
            validator: (value) => ValidationsBr.cpf(value),
          ),
          TextFormField(
            validator: (value) => ValidationsBr.cnpj(value),
          ),
          TextFormField(
            validator: (value) => ValidationsBr.phoneNumber(value),
          ),
        ],
      ),
    );
  }
}
```
### Platform-Specific Details

This package works on both Android and iOS platforms.

### Required Configurations or Optimizations

No additional configurations or optimizations are required.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:all_validations_br/all_validations_br.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'All Validations BR Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final _formKey = GlobalKey<FormState>();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('All Validations BR Demo'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              // CPF validation
              TextFormField(
                decoration: InputDecoration(
                  labelText: 'CPF',
                  border: OutlineInputBorder(),
                ),
                validator: (value) => ValidationsBr.cpf(value),
              ),
              SizedBox(height: 16),

              // CNPJ validation
              TextFormField(
                decoration: InputDecoration(
                  labelText: 'CNPJ',
                  border: OutlineInputBorder(),
                ),
                validator: (value) => ValidationsBr.cnpj(value),
              ),
              SizedBox(height: 16),

              // Phone number validation
              TextFormField(
                decoration: InputDecoration(
                  labelText: 'Phone Number',
                  border: OutlineInputBorder(),
                ),
                validator: (value) => ValidationsBr.phoneNumber(value),
              ),
              SizedBox(height: 16),

              // Submit button
              ElevatedButton(
                onPressed: () {
                  if (_formKey.currentState.validate()) {
                    ScaffoldMessenger.of(context).showSnackBar(
                      SnackBar(content: Text('Validation successful!')),
                    );
                  }
                },
                child: Text('Submit'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user enters their CPF, CNPJ, and phone number in the respective fields.
// 2. When the user clicks the submit button, the form is validated using the validation rules.
// 3. If the validation is successful, a snackbar is displayed with a success message.
// 4. If the validation fails, an error message is displayed below the respective field.
```

// Summary:
// This code demonstrates the usage of the `all_validations_br` package in a Flutter application.
// It creates a form with fields for CPF, CNPJ, and phone number, and uses the validation rules to validate the user input.
// The application flow is explained in the comments above.
```markdown
<!-- START_DESCRIPTION -->
# micro_core_logger Flutter Package

The `micro_core_logger` package is a lightweight logging utility designed for Flutter applications. It provides developers with a simple and efficient way to log messages, errors, and other important information during the development and production phases of an application. This package is particularly useful for debugging and monitoring applications, allowing developers to track the flow of execution and identify issues quickly.

## When to Use This Package
- **Debugging**: When you need to track down bugs or issues in your application.
- **Monitoring**: To log important events and errors in production for later analysis.
- **Performance Tracking**: To log performance metrics and analyze the behavior of your application.

## Features
- **Simple API**: Easy-to-use methods for logging messages at different levels (info, warning, error).
- **Customizable Output**: Ability to customize the format and destination of log messages.
- **Performance**: Lightweight and efficient, ensuring minimal impact on application performance.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS platforms.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using micro_core_logger

## Installation
To add the `micro_core_logger` package to your Flutter project, include it in your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  micro_core_logger: ^1.0.0  # Check for the latest version on pub.dev
```

Run the following command to install the package:

```bash
flutter pub get
```

## Platform-Specific Configuration
### Android
No specific configuration is required for Android. The package works out of the box.

### iOS
For iOS, ensure that you have the necessary permissions set in your `Info.plist` if you plan to log to external services or files.

## Basic Usage
To use the `micro_core_logger` package, you need to import it into your Dart files:

```dart
import 'package:micro_core_logger/micro_core_logger.dart';
```

You can then create an instance of the logger and start logging messages:

```dart
void main() {
  // Create an instance of the logger
  final logger = RealFlutter();

  // Log messages at different levels
  logger.info('This is an info message');
  logger.warning('This is a warning message');
  logger.error('This is an error message');
}
```

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of micro_core_logger

```dart
import 'package:flutter/material.dart';
import 'package:micro_core_logger/micro_core_logger.dart';

void main() {
  // Create an instance of the logger
  final logger = RealFlutter();

  // Log the application start
  logger.info('Application started');

  runApp(MyApp(logger: logger));
}

class MyApp extends StatelessWidget {
  final RealFlutter logger;

  MyApp({required this.logger});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Micro Core Logger Example',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Logger Example'),
        ),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              // Log button press event
              logger.info('Button pressed');
              // Simulate an error
              try {
                throw Exception('Simulated error');
              } catch (e) {
                logger.error('An error occurred: $e');
              }
            },
            child: Text('Press Me'),
          ),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function initializes the logger and logs the application start.
// 2. The MyApp widget is created, passing the logger instance.
// 3. The app displays a button in the center of the screen.
// 4. When the button is pressed, an info log is created.
// 5. An exception is simulated, and the error is caught and logged.
// 6. This demonstrates how to log both informational messages and errors.
```
<!-- END_MAIN -->
```

### Summary
In this example, we demonstrated how to set up and use the `micro_core_logger` package in a Flutter application. The application logs important events, such as the start of the application and button presses, while also handling and logging errors. This showcases the package's capabilities in providing a simple yet effective logging solution for Flutter developers.
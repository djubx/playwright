<-- START_DESCRIPTION -->

# UHF C72 Plugin for Flutter
================================

The `uhf_c72_plugin` is a Flutter package designed to provide a simple and efficient way to interact with UHF (Ultra High Frequency) RFID (Radio Frequency Identification) devices. This plugin allows developers to easily integrate UHF RFID functionality into their Flutter applications.

## Features

*   Supports UHF RFID devices
*   Provides methods for reading and writing tags
*   Supports multiple RFID protocols
*   Compatible with both Android and iOS platforms

## When to Use

This plugin is ideal for applications that require UHF RFID functionality, such as:

*   Inventory management systems
*   Asset tracking systems
*   Access control systems
*   Supply chain management systems

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the UHF C72 Plugin
=====================================================

## Step 1: Add the Plugin to Your Flutter Project

Add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  uhf_c72_plugin: ^1.0.0
```

Then, run `flutter pub get` to install the plugin.

## Step 2: Import the Plugin

Import the plugin in your Dart file:

```dart
import 'package:uhf_c72_plugin/uhf_c72_plugin.dart';
```

## Step 3: Initialize the Plugin

Initialize the plugin before use:

```dart
UhfC72Plugin _uhfC72Plugin = UhfC72Plugin();
```

## Step 4: Configure the Plugin (Optional)

Configure the plugin settings as needed:

```dart
_uhfC72Plugin.setProtocol(UhfC72Protocol.iso18000_6c);
_uhfC72Plugin.setPower(30);
```

## Step 5: Read and Write Tags

Use the plugin's methods to read and write tags:

```dart
_uhfC72Plugin.readTag().then((tag) {
  print('Tag ID: ${tag.id}');
});

_uhfC72Plugin.writeTag('Hello, World!').then((success) {
  print('Write success: $success');
});
```

### Platform-Specific Details

#### Android

*   Add the following permission to your `AndroidManifest.xml` file:

    ```xml
<uses-permission android:name="android.permission.INTERNET" />
```

*   If you're using Android 10 or later, add the following code to your `MainActivity.java` file:

    ```java
import android.os.Bundle;
import io.flutter.embedding.android.FlutterActivity;
import io.flutter.embedding.engine.FlutterEngine;

public class MainActivity extends FlutterActivity {
  @Override
  protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    new FlutterEngine(this).getPlatformViewsController().Registry.platformViewFactories.add(new UhfC72PlatformViewFactory());
  }
}
```

#### iOS

*   Add the following code to your `Info.plist` file:

    ```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```

*   If you're using iOS 14 or later, add the following code to your `AppDelegate.swift` file:

    ```swift
import UIKit
import Flutter

@UIApplicationMain
@objc class AppDelegate: FlutterAppDelegate {
  override func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
    GeneratedPluginRegistrant.ensureInitialized()
    return super.application(application, didFinishLaunchingWithOptions: launchOptions)
  }
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:uhf_c72_plugin/uhf_c72_plugin.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'UHF C72 Plugin Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  UhfC72Plugin _uhfC72Plugin = UhfC72Plugin();
  String _tagId = '';
  String _writeResult = '';

  @override
  void initState() {
    super.initState();
    _uhfC72Plugin.setProtocol(UhfC72Protocol.iso18000_6c);
    _uhfC72Plugin.setPower(30);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('UHF C72 Plugin Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Tag ID: $_tagId',
              style: TextStyle(fontSize: 24),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () async {
                String tagId = await _uhfC72Plugin.readTag();
                setState(() {
                  _tagId = tagId;
                });
              },
              child: Text('Read Tag'),
            ),
            SizedBox(height: 20),
            Text(
              'Write Result: $_writeResult',
              style: TextStyle(fontSize: 24),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () async {
                bool success = await _uhfC72Plugin.writeTag('Hello, World!');
                setState(() {
                  _writeResult = success.toString();
                });
              },
              child: Text('Write Tag'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and is presented with a button to read a tag.
// 2. When the user clicks the button, the app uses the UHF C72 plugin to read the tag.
// 3. The plugin returns the tag ID, which is then displayed on the screen.
// 4. The user can then click the write button to write data to the tag.
// 5. The plugin writes the data to the tag and returns a success or failure result.
// 6. The result is then displayed on the screen.
```

<-- END_MAIN -->
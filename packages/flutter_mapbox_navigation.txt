<-- START_DESCRIPTION -->

# Flutter Mapbox Navigation Package
=====================================

The `flutter_mapbox_navigation` package is a powerful navigation library for Flutter that utilizes the Mapbox Navigation API to provide turn-by-turn directions and location tracking. This package is ideal for applications that require navigation features, such as ride-hailing, food delivery, or logistics services.

## Key Features

* Turn-by-turn directions with voice guidance
* Location tracking and updates
* Route optimization and calculation
* Support for multiple transportation modes (driving, walking, cycling)
* Integration with Mapbox maps and services

## When to Use This Package

Use this package when you need to add navigation features to your Flutter application, such as:

* Providing turn-by-turn directions to users
* Tracking user locations and updating routes in real-time
* Optimizing routes for multiple destinations or transportation modes

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `flutter_mapbox_navigation` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_mapbox_navigation: ^0.0.1
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:flutter_mapbox_navigation/flutter_mapbox_navigation.dart';
```
### Step 3: Set Up Mapbox API Credentials

Create a Mapbox account and obtain an API token. Set up your API credentials in your `pubspec.yaml` file:
```yml
environment:
  mapbox_api_token: YOUR_API_TOKEN
```
### Step 4: Initialize the Package

Initialize the package in your Dart file:
```dart
MapboxNavigation _mapboxNavigation = MapboxNavigation(
  accessToken: 'YOUR_API_TOKEN',
);
```
### Platform-Specific Details

#### Android

Add the following lines to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
<uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
```
#### iOS

Add the following lines to your `Info.plist` file:
```xml
<key>NSLocationWhenInUseUsageDescription</key>
<string>This app needs access to location to work properly</string>
<key>NSLocationAlwaysAndWhenInUseUsageDescription</key>
<string>This app needs access to location to work properly</string>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_mapbox_navigation/flutter_mapbox_navigation.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  MapboxNavigation _mapboxNavigation;
  String _instruction = '';

  // Initialize the package
  Future<void> _initMapboxNavigation() async {
    _mapboxNavigation = MapboxNavigation(
      accessToken: 'YOUR_API_TOKEN',
    );
  }

  // Start navigation
  Future<void> _startNavigation() async {
    // Set up the route
    List<Waypoint> waypoints = [
      Waypoint(
        name: 'Start',
        latitude: 37.7749,
        longitude: -122.4194,
      ),
      Waypoint(
        name: 'End',
        latitude: 37.8024,
        longitude: -122.4056,
      ),
    ];

    // Start navigation
    _mapboxNavigation.startNavigation(
      waypoints: waypoints,
      mode: NavigationMode.DRIVING,
      simulateRoute: true,
    );

    // Listen for navigation events
    _mapboxNavigation.events.listen((event) {
      if (event.eventType == MapboxNavigationEventType.ARRIVAL) {
        print('Arrived!');
      } else if (event.eventType == MapboxNavigationEventType.PROGRESS) {
        // Update the instruction
        _instruction = event.data['instruction'];
        setState(() {});
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Mapbox Navigation'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(_instruction),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _startNavigation,
              child: Text('Start Navigation'),
            ),
          ],
        ),
      ),
    );
  }
}

// Application flow:
// 1. Initialize the Mapbox Navigation package with your API token.
// 2. Set up the route with waypoints.
// 3. Start navigation with the route and mode.
// 4. Listen for navigation events and update the instruction.
// 5. Display the instruction and start navigation button.
```

// Final summary:
// The code initializes the Mapbox Navigation package, sets up a route, starts navigation, and listens for navigation events.
// The instruction is updated and displayed on the screen.
// The user can start navigation by pressing the button.

<-- END_MAIN -->
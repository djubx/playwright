<-- START_DESCRIPTION -->

# Dynamic App Icon Flutter Package
=====================================

The `dynamic_app_icon_flutter` package allows you to change the app icon of your Flutter application dynamically. This can be useful in various scenarios, such as:

* Providing different app icons for different environments (e.g., development, staging, production)
* Changing the app icon based on user preferences or settings
* Creating a customizable app icon for users

Features:

* Supports both Android and iOS platforms
* Allows changing the app icon dynamically at runtime
* Provides a simple and easy-to-use API

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `dynamic_app_icon_flutter` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  dynamic_app_icon_flutter: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:dynamic_app_icon_flutter/dynamic_app_icon_flutter.dart';
```
### Step 3: Configure the Package (Android Only)

For Android, you need to add the following configuration to your `AndroidManifest.xml` file:
```xml
<application
    ...
    android:icon="@mipmap/ic_launcher"
    android:roundIcon="@mipmap/ic_launcher_round"
    android:adaptiveIcon="@mipmap/ic_launcher_adaptive"
    ...>
```
### Step 4: Use the Package

Use the `DynamicAppIconFlutter` class to change the app icon:
```dart
import 'package:flutter/material.dart';
import 'package:dynamic_app_icon_flutter/dynamic_app_icon_flutter.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Dynamic App Icon Flutter'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () async {
            await DynamicAppIconFlutter.changeAppIcon('new_icon');
          },
          child: Text('Change App Icon'),
        ),
      ),
    );
  }
}
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:dynamic_app_icon_flutter/dynamic_app_icon_flutter.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Dynamic App Icon Flutter',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Step 1: Initialize the DynamicAppIconFlutter instance
  DynamicAppIconFlutter _dynamicAppIconFlutter = DynamicAppIconFlutter();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Dynamic App Icon Flutter'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            ElevatedButton(
              onPressed: () async {
                // Step 2: Change the app icon to 'new_icon'
                await _dynamicAppIconFlutter.changeAppIcon('new_icon');
              },
              child: Text('Change App Icon to new_icon'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () async {
                // Step 3: Change the app icon to 'old_icon'
                await _dynamicAppIconFlutter.changeAppIcon('old_icon');
              },
              child: Text('Change App Icon to old_icon'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and is presented with two buttons: 'Change App Icon to new_icon' and 'Change App Icon to old_icon'.
// 2. When the user clicks on the 'Change App Icon to new_icon' button, the app icon is changed to 'new_icon' using the DynamicAppIconFlutter instance.
// 3. When the user clicks on the 'Change App Icon to old_icon' button, the app icon is changed to 'old_icon' using the DynamicAppIconFlutter instance.
// 4. The app icon is updated dynamically without requiring the user to restart the app.

```

<-- END_MAIN -->
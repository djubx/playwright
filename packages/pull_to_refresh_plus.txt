<-- START_DESCRIPTION -->

**Pull to Refresh Plus Flutter Package**
=====================================

The `pull_to_refresh_plus` Flutter package is a powerful and customizable pull-to-refresh solution for Flutter applications. It provides a simple and intuitive way to implement pull-to-refresh functionality, allowing users to refresh content by pulling down on the screen.

**When to Use**
---------------

This package is ideal for applications that require frequent updates, such as:

* Social media feeds
* News applications
* Live score updates
* Chat applications

**Features**
------------

* Customizable pull-to-refresh animation
* Support for multiple refresh modes (e.g., pull-down, pull-up)
* Ability to set custom refresh indicators
* Support for nested scrolling

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setup and Usage**
-------------------

### Step 1: Add the Package to Your Project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  pull_to_refresh_plus: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:pull_to_refresh_plus/pull_to_refresh_plus.dart';
```
### Step 3: Create a RefreshController

Create a `RefreshController` instance to manage the refresh state:
```dart
RefreshController _refreshController = RefreshController();
```
### Step 4: Wrap Your Content with PullToRefreshPlus

Wrap your content with the `PullToRefreshPlus` widget:
```dart
PullToRefreshPlus(
  controller: _refreshController,
  onRefresh: () async {
    // Refresh logic here
  },
  child: // Your content here
)
```
### Platform-Specific Details

* Android: No additional configuration required.
* iOS: Add the following line to your `Info.plist` file to enable pull-to-refresh:
```xml
<key>UIRefreshControl</key>
<true/>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:pull_to_refresh_plus/pull_to_refresh_plus.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Pull to Refresh Plus Demo',
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  RefreshController _refreshController = RefreshController();
  List<String> _items = [];

  @override
  void initState() {
    super.initState();
    _loadData();
  }

  Future<void> _loadData() async {
    // Simulate data loading
    await Future.delayed(Duration(seconds: 2));
    setState(() {
      _items = List.generate(20, (index) => 'Item $index');
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Pull to Refresh Plus Demo'),
      ),
      body: PullToRefreshPlus(
        controller: _refreshController,
        onRefresh: () async {
          // Refresh logic here
          await _loadData();
          _refreshController.refreshCompleted();
        },
        child: ListView.builder(
          itemCount: _items.length,
          itemBuilder: (context, index) {
            return ListTile(
              title: Text(_items[index]),
            );
          },
        ),
      ),
    );
  }
}

// Application flow:
// 1. The app starts and initializes the RefreshController.
// 2. The PullToRefreshPlus widget is created and wraps the ListView.
// 3. When the user pulls down on the screen, the onRefresh callback is triggered.
// 4. The refresh logic is executed, which in this case simulates data loading.
// 5. Once the data is loaded, the refreshCompleted method is called to complete the refresh.
// 6. The ListView is updated with the new data.
```

// Final summary:
// The code flows by first initializing the RefreshController and creating the PullToRefreshPlus widget.
// When the user pulls down on the screen, the onRefresh callback is triggered, which executes the refresh logic.
// Once the data is loaded, the refreshCompleted method is called to complete the refresh.
// Finally, the ListView is updated with the new data.

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# fkafka Flutter Package: A Comprehensive Overview
=====================================================

The fkafka Flutter package is a powerful tool for integrating Apache Kafka into your Flutter applications. Apache Kafka is a distributed streaming platform that is used for building real-time data pipelines and streaming apps. With fkafka, you can easily produce and consume Kafka messages from your Flutter app.

### When to Use fkafka

fkafka is ideal for use cases that require real-time data processing and streaming. Some examples include:

* Building real-time analytics dashboards
* Creating live updates for social media feeds
* Developing IoT applications that require real-time sensor data processing
* Building event-driven architectures

### Features of fkafka

Some of the key features of fkafka include:

* Support for producing and consuming Kafka messages
* Support for multiple Kafka brokers
* Automatic reconnecting to Kafka brokers
* Support for SSL/TLS encryption

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using fkafka
=============================

### Step 1: Add fkafka to Your pubspec.yaml File

To use fkafka, you need to add it to your `pubspec.yaml` file. Add the following line to your dependencies:

```yml
dependencies:
  fkafka: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import fkafka

Import fkafka in your Dart file:

```dart
import 'package:fkafka/fkafka.dart';
```

### Step 3: Create a Kafka Client

Create a Kafka client with the `KafkaClient` class:

```dart
KafkaClient client = KafkaClient(
  brokers: ['localhost:9092'], // List of Kafka brokers
  clientId: 'my_client', // Client ID
);
```

### Step 4: Produce a Kafka Message

Produce a Kafka message with the `produce` method:

```dart
client.produce(
  topic: 'my_topic', // Topic name
  value: 'Hello, World!', // Message value
);
```

### Step 5: Consume Kafka Messages

Consume Kafka messages with the `consume` method:

```dart
client.consume(
  topic: 'my_topic', // Topic name
  callback: (message) {
    print(message.value); // Print the message value
  },
);
```

### Platform-Specific Details

#### Android

For Android, you need to add the following permissions to your `AndroidManifest.xml` file:

```xml
<uses-permission android:name="android.permission.INTERNET" />
```

#### iOS

For iOS, you need to add the following lines to your `Info.plist` file:

```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:fkafka/fkafka.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'fkafka Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  KafkaClient _client;

  @override
  void initState() {
    super.initState();
    _client = KafkaClient(
      brokers: ['localhost:9092'],
      clientId: 'my_client',
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('fkafka Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: () {
                _client.produce(
                  topic: 'my_topic',
                  value: 'Hello, World!',
                );
              },
              child: Text('Produce Message'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                _client.consume(
                  topic: 'my_topic',
                  callback: (message) {
                    print(message.value);
                  },
                );
              },
              child: Text('Consume Messages'),
            ),
          ],
        ),
      ),
    );
  }
}

// The app starts by creating a Kafka client with the KafkaClient class.
// The client is then used to produce a Kafka message with the produce method.
// The message is sent to the 'my_topic' topic.
// The app then consumes Kafka messages with the consume method.
// The messages are printed to the console.
// The app uses the ElevatedButton widget to trigger the produce and consume actions.
// The app uses the SizedBox widget to add space between the buttons.
```

// The app flows as follows:
// 1. The user opens the app and is presented with two buttons: "Produce Message" and "Consume Messages".
// 2. When the user clicks the "Produce Message" button, the app produces a Kafka message with the value "Hello, World!" and sends it to the 'my_topic' topic.
// 3. When the user clicks the "Consume Messages" button, the app consumes Kafka messages from the 'my_topic' topic and prints them to the console.
// 4. The app continues to run and listen for new messages until it is closed.

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Flutter Highlighter Package
================================

The `flutter_highlighter` package is a powerful tool for highlighting text in Flutter applications. It provides a simple and efficient way to highlight text in various formats, including JSON, XML, and more.

## When to Use This Package
---------------------------

This package is ideal for applications that require text highlighting, such as:

* Code editors
* Text editors
* Documentation viewers
* Education apps

## Features
------------

* Supports multiple formats, including JSON, XML, and more
* Customizable highlighting styles
* Easy to use and integrate into existing applications

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `flutter_highlighter` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_highlighter: ^1.0.0
```
2. Run `flutter pub get` to install the package.
3. Import the package in your Dart file:
```dart
import 'package:flutter_highlighter/flutter_highlighter.dart';
```

## Platform-Specific Details
---------------------------

### Android

No additional setup is required for Android.

### iOS

No additional setup is required for iOS.

## Configurations and Optimizations
-----------------------------------

### Customizing Highlighting Styles

You can customize the highlighting styles by creating a custom `HighlightStyle` object:
```dart
HighlightStyle customStyle = HighlightStyle(
  backgroundColor: Colors.blue,
  textColor: Colors.white,
);
```
### Optimizing Performance

To optimize performance, you can use the `Highlighter` widget's `cache` property to cache the highlighted text:
```dart
Highlighter(
  text: 'Hello, World!',
  style: customStyle,
  cache: true,
)
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_highlighter/flutter_highlighter.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  String _text = 'Hello, World!';
  HighlightStyle _style = HighlightStyle(
    backgroundColor: Colors.blue,
    textColor: Colors.white,
  );

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Highlighter Demo',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Flutter Highlighter Demo'),
        ),
        body: Center(
          child: Highlighter(
            text: _text,
            style: _style,
            cache: true,
          ),
        ),
        floatingActionButton: FloatingActionButton(
          onPressed: () {
            setState(() {
              _text = 'Hello, Flutter!';
            });
          },
          tooltip: 'Change Text',
          child: Icon(Icons.edit),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app and sees the highlighted text "Hello, World!".
// 2. The user clicks the floating action button to change the text.
// 3. The text is updated to "Hello, Flutter!" and the highlighting style is applied.
// 4. The user sees the updated highlighted text.
// The highlighting style is customized using the HighlightStyle object.
// The cache property is used to optimize performance by caching the highlighted text.

// Final summary: The code flows by first displaying the highlighted text,
// then allowing the user to change the text, and finally updating the highlighted text.
// The highlighting style is customized and the cache property is used for optimization.
```

<-- END_MAIN -->
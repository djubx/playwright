<-- START_DESCRIPTION -->

# Flutter Upchunk Package: A Comprehensive Overview
=====================================================

The `flutter_upchunk` package is a powerful tool for Flutter developers, designed to simplify the process of uploading large files to a server. It provides a robust and efficient way to handle file uploads, allowing developers to focus on other aspects of their application.

### When to Use This Package

This package is ideal for applications that require users to upload large files, such as videos, images, or documents. It is particularly useful when working with servers that have limitations on file size or when dealing with slow network connections.

### Key Features

*   **Chunked Uploads**: The package allows for chunked uploads, which enables the upload of large files in smaller, more manageable pieces.
*   **Resume Uploads**: If an upload is interrupted, the package can resume the upload from where it left off, reducing the need to restart the upload from the beginning.
*   **Progress Tracking**: The package provides real-time progress tracking, allowing developers to display the upload progress to the user.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the Flutter Upchunk Package
=====================================================

### Step 1: Add the Package to Your Project

To use the `flutter_upchunk` package, add it to your project's `pubspec.yaml` file:

```yml
dependencies:
  flutter_upchunk: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:flutter_upchunk/flutter_upchunk.dart';
```

### Step 3: Create an Upchunk Instance

Create an instance of the `Upchunk` class, passing in the URL of the server endpoint that will handle the file upload:

```dart
final upchunk = Upchunk(
  url: 'https://example.com/upload',
  file: File('path/to/file'),
  chunkSize: 1024 * 1024, // 1MB chunk size
);
```

### Step 4: Start the Upload

Start the upload by calling the `start` method:

```dart
upchunk.start();
```

### Step 5: Track Progress

Track the upload progress by listening to the `progress` stream:

```dart
upchunk.progress.listen((progress) {
  print('Upload progress: ${progress.percent}%');
});
```

### Platform-Specific Details

*   **Android**: On Android, the package uses the `http` package to make HTTP requests. Make sure to add the `http` package to your project's `pubspec.yaml` file.
*   **iOS**: On iOS, the package uses the `http` package to make HTTP requests. Make sure to add the `http` package to your project's `pubspec.yaml` file.

### Configurations and Optimizations

*   **Chunk Size**: The chunk size can be adjusted by passing a different value to the `chunkSize` parameter when creating an `Upchunk` instance. A larger chunk size can improve upload performance but may also increase the risk of upload failures.
*   **Retry Policy**: The package provides a retry policy that can be configured by passing a `RetryPolicy` instance to the `retryPolicy` parameter when creating an `Upchunk` instance. The retry policy determines how many times the package will retry a failed upload before giving up.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:flutter_upchunk/flutter_upchunk.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Upchunk Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _fileController = TextEditingController();
  final _uploadController = TextEditingController();
  final _progressController = TextEditingController();

  Future<void> _selectFile() async {
    final file = await FilePicker.platform.pickFile();
    if (file != null) {
      _fileController.text = file.path;
    }
  }

  Future<void> _startUpload() async {
    final file = File(_fileController.text);
    final upchunk = Upchunk(
      url: 'https://example.com/upload',
      file: file,
      chunkSize: 1024 * 1024, // 1MB chunk size
    );

    upchunk.progress.listen((progress) {
      _progressController.text = 'Upload progress: ${progress.percent}%';
    });

    await upchunk.start();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Upchunk Example'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Column(
          children: [
            TextField(
              controller: _fileController,
              decoration: InputDecoration(
                labelText: 'Select a file',
                border: OutlineInputBorder(),
              ),
              readOnly: true,
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _selectFile,
              child: Text('Select a file'),
            ),
            SizedBox(height: 20),
            TextField(
              controller: _uploadController,
              decoration: InputDecoration(
                labelText: 'Upload URL',
                border: OutlineInputBorder(),
              ),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _startUpload,
              child: Text('Start upload'),
            ),
            SizedBox(height: 20),
            TextField(
              controller: _progressController,
              decoration: InputDecoration(
                labelText: 'Upload progress',
                border: OutlineInputBorder(),
              ),
              readOnly: true,
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user selects a file using the file picker.
// 2. The user enters the upload URL.
// 3. The user clicks the "Start upload" button.
// 4. The Upchunk instance is created with the selected file and upload URL.
// 5. The upload progress is tracked and displayed in the progress text field.
// 6. The upload is started and the file is uploaded in chunks.
// 7. The upload progress is updated in real-time.
// 8. Once the upload is complete, the progress text field displays "Upload progress: 100%".

```

<-- END_MAIN -->
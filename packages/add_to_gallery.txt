<-- START_DESCRIPTION -->

# Add to Gallery Flutter Package
=====================================

The `add_to_gallery` Flutter package allows developers to add images and videos to the device's gallery. This package is useful when you want to save media files generated or downloaded within your app to the device's gallery.

### Features

*   Save images and videos to the device's gallery
*   Supports both Android and iOS platforms
*   Easy to use and integrate into existing Flutter projects

### When to Use

Use this package when you need to save media files to the device's gallery, such as:

*   When generating images or videos within your app and want to save them to the gallery
*   When downloading media files from a server and want to save them to the gallery

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Add to Gallery Package
===========================================================

### Step 1: Add the Package to Your Project

Add the `add_to_gallery` package to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  add_to_gallery: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:add_to_gallery/add_to_gallery.dart';
```

### Step 3: Save an Image or Video to the Gallery

Use the `addToGallery` function to save an image or video to the gallery:

```dart
await addToGallery(
  filePath: '/path/to/image.jpg',
  albumName: 'My Album',
);
```

### Platform-Specific Details

#### Android

On Android, you need to add the following permissions to your `AndroidManifest.xml` file:

```xml
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
```

#### iOS

On iOS, you need to add the following lines to your `Info.plist` file:

```xml
<key>NSPhotoLibraryAddUsageDescription</key>
<string>This app needs access to your photo library to save images.</string>
<key>NSPhotoLibraryUsageDescription</key>
<string>This app needs access to your photo library to save images.</string>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:add_to_gallery/add_to_gallery.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Add to Gallery Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  String _filePath = '';

  Future<void> _saveImage() async {
    // Step 1: Choose an image file
    final filePath = '/path/to/image.jpg';

    // Step 2: Save the image to the gallery
    await addToGallery(
      filePath: filePath,
      albumName: 'My Album',
    );

    // Step 3: Update the UI
    setState(() {
      _filePath = filePath;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Add to Gallery Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'File Path:',
              style: TextStyle(fontSize: 24),
            ),
            Text(
              _filePath,
              style: TextStyle(fontSize: 24),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _saveImage,
              child: Text('Save Image'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user clicks the "Save Image" button.
// 2. The `_saveImage` function is called, which chooses an image file and saves it to the gallery using the `addToGallery` function.
// 3. The `addToGallery` function saves the image to the gallery and returns a future that completes when the operation is done.
// 4. The `_saveImage` function updates the UI by setting the `_filePath` variable to the path of the saved image.
// 5. The UI is updated to display the path of the saved image.

```

<-- END_MAIN -->
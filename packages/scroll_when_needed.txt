```markdown
<!-- START_DESCRIPTION -->
# Overview of the `scroll_when_needed` Flutter Package

The `scroll_when_needed` package is a powerful tool for Flutter developers, designed to enhance the user experience by managing scroll behavior in a more intuitive way. This package allows developers to automatically scroll to a specific widget when it comes into view, ensuring that important content is always visible to the user. 

## When to Use This Package

You might consider using the `scroll_when_needed` package in scenarios such as:
- **Chat Applications**: Automatically scrolling to the latest message when a new message is received.
- **Forms**: Ensuring that the currently focused input field is always visible, especially on smaller screens.
- **Dynamic Content**: When content is added or removed dynamically, and you want to keep the user's focus on a specific area.

## Key Features
- **Automatic Scrolling**: Automatically scrolls to a specified widget when it comes into view.
- **Customizable Behavior**: Developers can customize the scrolling behavior to fit their application's needs.
- **Easy Integration**: Simple to integrate into existing Flutter applications with minimal setup.

In summary, the `scroll_when_needed` package is an essential tool for enhancing user experience in Flutter applications by managing scroll behavior effectively.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the `scroll_when_needed` Package

## Step 1: Adding the Dependency

To get started, you need to add the `scroll_when_needed` package to your Flutter project. Open your `pubspec.yaml` file and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  scroll_when_needed: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command in your terminal to install it:

```bash
flutter pub get
```

## Step 2: Platform-Specific Configuration

### Android Configuration
For Android, ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
        ...
    }
}
```

### iOS Configuration
For iOS, you may need to update your `ios/Podfile` to ensure compatibility with the latest iOS versions. Make sure to uncomment the platform line and set it to at least 10.0:

```ruby
platform :ios, '10.0'
```

## Step 3: Using the Package

Now that you have set up the package, you can start using it in your Flutter application. Hereâ€™s a simple example of how to implement it:

1. Import the package in your Dart file:

```dart
import 'package:scroll_when_needed/scroll_when_needed.dart';
```

2. Wrap your scrollable widget with `ScrollWhenNeeded`:

```dart
ScrollWhenNeeded(
  child: ListView.builder(
    itemCount: 100,
    itemBuilder: (context, index) {
      return ListTile(
        title: Text('Item $index'),
      );
    },
  ),
);
```

This will ensure that the list scrolls to the focused item when necessary.

With these steps, you are now ready to implement the `scroll_when_needed` package in your Flutter application!

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of Using the `scroll_when_needed` Package

```dart
import 'package:flutter/material.dart';
import 'package:scroll_when_needed/scroll_when_needed.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Scroll When Needed Example',
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // A list of items to display
  final List<String> items = List.generate(100, (index) => 'Item $index');
  // A ScrollController to manage the scrolling
  final ScrollController _scrollController = ScrollController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Scroll When Needed Example'),
      ),
      body: ScrollWhenNeeded(
        // Wrapping the ListView with ScrollWhenNeeded
        child: ListView.builder(
          controller: _scrollController,
          itemCount: items.length,
          itemBuilder: (context, index) {
            return ListTile(
              title: Text(items[index]),
              onTap: () {
                // Scroll to the tapped item
                _scrollController.animateTo(
                  index * 56.0, // Assuming each item has a height of 56.0
                  duration: Duration(milliseconds: 300),
                  curve: Curves.easeInOut,
                );
              },
            );
          },
        ),
      ),
    );
  }
}
```

```dart
// The above code creates a simple Flutter application that demonstrates the use of the scroll_when_needed package.
// 
// 1. The main function initializes the app and sets MyApp as the root widget.
// 2. MyApp builds a MaterialApp with a title and sets RealFlutter as the home widget.
// 3. RealFlutter is a StatefulWidget that maintains a list of items and a ScrollController.
// 4. In the build method, a Scaffold is created with an AppBar and a body that contains a ScrollWhenNeeded widget.
// 5. Inside the ScrollWhenNeeded, a ListView.builder is used to create a scrollable list of items.
// 6. Each ListTile has an onTap callback that triggers the scroll to the tapped item using the ScrollController.
// 7. The animateTo method of the ScrollController is used to smoothly scroll to the tapped item, ensuring it is visible in the viewport.
// 
// This application effectively demonstrates how to use the scroll_when_needed package to manage scrolling behavior in a Flutter app.
```
<!-- END_MAIN -->
```
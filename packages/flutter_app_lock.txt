```markdown
<-- START_DESCRIPTION -->

# Flutter App Lock: Secure Your Flutter Applications

The `flutter_app_lock` package is a powerful tool for Flutter developers who want to add an extra layer of security to their applications. This package provides a simple way to lock your app with a passcode or biometric authentication, ensuring that only authorized users can access sensitive information.

## When to Use `flutter_app_lock`

- **Sensitive Data Protection**: If your app handles sensitive user data, such as financial information or personal details, implementing an app lock can help protect this data from unauthorized access.
- **Compliance Requirements**: Some industries have strict compliance requirements for data protection. Using an app lock can help meet these requirements.
- **User Privacy**: Enhancing user privacy by allowing them to secure their app with a passcode or biometric authentication.

## Features

- **Passcode Lock**: Allows users to set a passcode to lock the app.
- **Biometric Authentication**: Supports fingerprint and face recognition for unlocking the app.
- **Customizable UI**: Offers flexibility to customize the lock screen to match your app's design.
- **Easy Integration**: Simple to set up and integrate into existing Flutter applications.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up `flutter_app_lock`

In this tutorial, we will walk through the process of setting up the `flutter_app_lock` package in a Flutter application. We will cover platform-specific configurations for both Android and iOS.

## Step 1: Add Dependency

First, add the `flutter_app_lock` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  flutter_app_lock: ^1.0.0
```

Run `flutter pub get` to install the package.

## Step 2: Configure Android

For Android, ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 18:

```gradle
android {
    defaultConfig {
        minSdkVersion 18
    }
}
```

## Step 3: Configure iOS

For iOS, make sure to enable the necessary permissions for biometric authentication. Open `ios/Runner/Info.plist` and add the following:

```xml
<key>NSFaceIDUsageDescription</key>
<string>We use Face ID to secure your app.</string>
```

## Step 4: Implement App Lock

Now, let's implement the app lock in your Flutter application. Create a new class `RealFlutter` that will handle the app lock logic.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_app_lock/flutter_app_lock.dart';

void main() {
  runApp(AppLock(
    builder: (args) => RealFlutter(),
    lockScreen: LockScreen(),
  ));
}

// RealFlutter is the main class of the application
class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter App Lock Demo',
      home: HomeScreen(),
    );
  }
}

// HomeScreen is the main screen of the app
class HomeScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Home Screen'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // This button triggers the app lock
            AppLock.of(context)!.enable();
          },
          child: Text('Lock App'),
        ),
      ),
    );
  }
}

// LockScreen is the custom lock screen widget
class LockScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Unlock App'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // This button unlocks the app
            AppLock.of(context)!.disable();
          },
          child: Text('Unlock'),
        ),
      ),
    );
  }
}
```

// The application starts with the `AppLock` widget, which wraps the `RealFlutter` class.
// `RealFlutter` is the main application widget that sets up the `MaterialApp`.
// The `HomeScreen` widget is the main screen of the app, featuring a button to lock the app.
// When the "Lock App" button is pressed, the app lock is enabled, displaying the `LockScreen`.
// The `LockScreen` widget provides a simple interface to unlock the app.
// Pressing the "Unlock" button on the `LockScreen` disables the app lock, returning to the `HomeScreen`.

<-- END_MAIN -->
```

This blog post provides a comprehensive guide to using the `flutter_app_lock` package, from understanding its features to implementing it in a Flutter application. By following the tutorial and example, developers can easily add an app lock feature to enhance the security of their applications.
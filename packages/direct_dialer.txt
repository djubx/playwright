<-- START_DESCRIPTION -->

# Direct Dialer Flutter Package
================================

The `direct_dialer` Flutter package allows developers to create a customizable dialer interface for making phone calls. It provides a simple and intuitive API for integrating a dialer into any Flutter application.

## When to Use
--------------

The `direct_dialer` package is ideal for applications that require a custom dialer interface, such as:

* VoIP (Voice over Internet Protocol) apps
* Telephony apps
* Customer service apps

## Features
------------

* Customizable dialer interface
* Support for DTMF (Dual-Tone Multi-Frequency) tones
* Integration with device's contact list
* Support for Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Direct Dialer Package
=====================================

## Step 1: Add the Package to Your Project
-----------------------------------------

Add the following dependency to your `pubspec.yaml` file:
```yml
dependencies:
  direct_dialer: ^1.0.0
```
Then, run `flutter pub get` to install the package.

## Step 2: Import the Package
-----------------------------

Import the package in your Dart file:
```dart
import 'package:direct_dialer/direct_dialer.dart';
```
## Step 3: Create a Dialer Instance
----------------------------------

Create a new instance of the `DirectDialer` class:
```dart
DirectDialer _dialer = DirectDialer();
```
## Step 4: Configure the Dialer
------------------------------

Configure the dialer instance with your desired settings:
```dart
_dialer.setDtmfToneDuration(100);
_dialer.setDialerLayout(DialerLayout.grid);
```
## Step 5: Display the Dialer
---------------------------

Display the dialer interface using the `_dialer` instance:
```dart
_dialer.showDialer(context);
```
## Platform-Specific Details
---------------------------

### Android

* Add the following permission to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.CALL_PHONE" />
```
* Use the `DirectDialerAndroid` class instead of `DirectDialer` for Android-specific features.

### iOS

* Add the following permission to your `Info.plist` file:
```xml
<key>NSMicrophoneUsageDescription</key>
<string>This app needs access to the microphone to make phone calls.</string>
```
* Use the `DirectDialerIOS` class instead of `DirectDialer` for iOS-specific features.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:direct_dialer/direct_dialer.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Direct Dialer Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  DirectDialer _dialer = DirectDialer();

  @override
  void initState() {
    super.initState();
    _dialer.setDtmfToneDuration(100);
    _dialer.setDialerLayout(DialerLayout.grid);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Direct Dialer Example'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            _dialer.showDialer(context);
          },
          child: Text('Show Dialer'),
        ),
      ),
    );
  }
}

// The app starts by creating a new instance of the DirectDialer class.
// It then sets the DTMF tone duration and dialer layout using the setDtmfToneDuration and setDialerLayout methods.
// When the user presses the "Show Dialer" button, the showDialer method is called, which displays the dialer interface.
// The user can then interact with the dialer interface to make phone calls.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Contained Tab Bar View with Custom Page Navigator
=====================================================

The `contained_tab_bar_view_with_custom_page_navigator` Flutter package provides a customizable tab bar view that allows for a contained and intuitive navigation experience. This package is ideal for applications that require a tab-based navigation system with a custom page navigator.

### Features

*   Customizable tab bar view with support for multiple tabs
*   Contained navigation experience with a custom page navigator
*   Support for both Android and iOS platforms

### When to Use

This package is suitable for applications that require a tab-based navigation system with a custom page navigator. It is ideal for applications that need to provide a contained and intuitive navigation experience to users.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

### Setup Process

To use the `contained_tab_bar_view_with_custom_page_navigator` package, follow these steps:

1.  Add the package to your `pubspec.yaml` file:

    ```yml
dependencies:
  flutter:
    sdk: flutter
  contained_tab_bar_view_with_custom_page_navigator: ^1.0.0
```

2.  Run `flutter pub get` to get the package.

3.  Import the package in your Dart file:

    ```dart
import 'package:contained_tab_bar_view_with_custom_page_navigator/contained_tab_bar_view_with_custom_page_navigator.dart';
```

### Using the Package

To use the package, create a `ContainedTabBarViewWithCustomPageNavigator` widget and pass the required parameters:

```dart
ContainedTabBarViewWithCustomPageNavigator(
  tabs: [
    Tab(
      icon: Icon(Icons.home),
      text: 'Home',
    ),
    Tab(
      icon: Icon(Icons.settings),
      text: 'Settings',
    ),
  ],
  views: [
    HomeView(),
    SettingsView(),
  ],
)
```

### Platform-Specific Details

The package supports both Android and iOS platforms. However, you may need to configure the package differently for each platform.

For Android, you need to add the following code to your `AndroidManifest.xml` file:

```xml
<application
  ...
  android:usesCleartextTraffic="true"
  ...
>
```

For iOS, you need to add the following code to your `Info.plist` file:

```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```

### Optimizations

To optimize the performance of the package, you can use the following techniques:

*   Use a `StatelessWidget` instead of a `StatefulWidget` for the views.
*   Use a `const` constructor for the views.
*   Avoid using `setState` in the views.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:contained_tab_bar_view_with_custom_page_navigator/contained_tab_bar_view_with_custom_page_navigator.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Contained Tab Bar View with Custom Page Navigator',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Contained Tab Bar View with Custom Page Navigator'),
      ),
      body: ContainedTabBarViewWithCustomPageNavigator(
        tabs: [
          Tab(
            icon: Icon(Icons.home),
            text: 'Home',
          ),
          Tab(
            icon: Icon(Icons.settings),
            text: 'Settings',
          ),
        ],
        views: [
          HomeView(),
          SettingsView(),
        ],
      ),
    );
  }
}

class HomeView extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Center(
      child: Text('Home View'),
    );
  }
}

class SettingsView extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Center(
      child: Text('Settings View'),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the application.
// 2. The `MyApp` widget is built, which returns a `MaterialApp` widget.
// 3. The `MaterialApp` widget builds the `MyHomePage` widget.
// 4. The `MyHomePage` widget builds a `Scaffold` widget with an `AppBar` and a `ContainedTabBarViewWithCustomPageNavigator` widget.
// 5. The `ContainedTabBarViewWithCustomPageNavigator` widget builds a tab bar with two tabs: 'Home' and 'Settings'.
// 6. When the user selects a tab, the corresponding view is built and displayed.
// 7. The views are built using the `HomeView` and `SettingsView` widgets.
```

// The application flow is a simple tab-based navigation system with a custom page navigator.
// The user can select a tab to view the corresponding page.
// The pages are built using stateless widgets, which improves performance.
// The application uses a material design theme, which provides a consistent look and feel.
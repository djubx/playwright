<-- START_DESCRIPTION -->

Amplitude Flutter Package: A Comprehensive Overview
=====================================================

The `amplitude_flutter` package is a powerful analytics tool for Flutter applications. It allows developers to track user behavior, analyze retention, and measure revenue. With Amplitude, you can gain valuable insights into your users' interactions with your app and make data-driven decisions to improve their experience.

When to Use Amplitude Flutter Package
------------------------------------

1. **User behavior analysis**: Amplitude helps you understand how users interact with your app, including which features they use, how often they use them, and where they drop off.
2. **Retention analysis**: Amplitude provides insights into user retention, including which users are most likely to return to your app and which features contribute to their retention.
3. **Revenue tracking**: Amplitude allows you to track revenue generated by your app, including in-app purchases and subscriptions.

Features of Amplitude Flutter Package
--------------------------------------

1. **Event tracking**: Track custom events, such as button clicks, page views, and other user interactions.
2. **User property tracking**: Track user properties, such as demographics, preferences, and behavior.
3. **Revenue tracking**: Track revenue generated by your app, including in-app purchases and subscriptions.
4. **Retention analysis**: Analyze user retention, including which users are most likely to return to your app and which features contribute to their retention.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setting Up Amplitude Flutter Package
=====================================

### Step 1: Add the Amplitude Flutter Package to Your Project

Add the following dependency to your `pubspec.yaml` file:
```yml
dependencies:
  amplitude_flutter: ^3.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Initialize Amplitude

Import the Amplitude package and initialize it in your `main` function:
```dart
import 'package:amplitude_flutter/amplitude.dart';

void main() {
  Amplitude.getInstance().init('YOUR_API_KEY', 'YOUR_INSTANCE_NAME');
  runApp(MyApp());
}
```
Replace `YOUR_API_KEY` and `YOUR_INSTANCE_NAME` with your actual Amplitude API key and instance name.

### Step 3: Track Events

Track custom events using the `logEvent` method:
```dart
Amplitude.getInstance().logEvent('Button Clicked');
```
You can also track events with properties:
```dart
Amplitude.getInstance().logEvent('Button Clicked', {
  'button_name': 'Login Button',
  'button_color': 'Blue',
});
```
### Step 4: Track User Properties

Track user properties using the `setUserProperty` method:
```dart
Amplitude.getInstance().setUserProperty('age', 25);
```
You can also track user properties with multiple values:
```dart
Amplitude.getInstance().setUserProperty('interests', ['reading', 'hiking', 'coding']);
```
### Step 5: Track Revenue

Track revenue using the `logRevenue` method:
```dart
Amplitude.getInstance().logRevenue(19.99, 'USD', 'In-App Purchase');
```
You can also track revenue with properties:
```dart
Amplitude.getInstance().logRevenue(19.99, 'USD', 'In-App Purchase', {
  'product_name': 'Premium Subscription',
  'product_category': 'Subscription',
});
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:amplitude_flutter/amplitude.dart';

void main() {
  Amplitude.getInstance().init('YOUR_API_KEY', 'YOUR_INSTANCE_NAME');
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Real Flutter'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              ElevatedButton(
                onPressed: () {
                  // Track button click event
                  Amplitude.getInstance().logEvent('Button Clicked');
                },
                child: Text('Click Me'),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  // Track button click event with properties
                  Amplitude.getInstance().logEvent('Button Clicked', {
                    'button_name': 'Login Button',
                    'button_color': 'Blue',
                  });
                },
                child: Text('Click Me with Properties'),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  // Track user property
                  Amplitude.getInstance().setUserProperty('age', 25);
                },
                child: Text('Set User Property'),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  // Track revenue
                  Amplitude.getInstance().logRevenue(19.99, 'USD', 'In-App Purchase');
                },
                child: Text('Log Revenue'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and is presented with a screen containing several buttons.
// 2. When the user clicks a button, the corresponding event is tracked using Amplitude.
// 3. If the user clicks the "Click Me with Properties" button, the event is tracked with properties.
// 4. If the user clicks the "Set User Property" button, the user property is set using Amplitude.
// 5. If the user clicks the "Log Revenue" button, the revenue is tracked using Amplitude.
// 6. The user can continue to interact with the app, and their actions will be tracked using Amplitude.
```

<-- END_MAIN -->
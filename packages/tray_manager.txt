```markdown
<-- START_DESCRIPTION -->

# Overview of the `tray_manager` Flutter Package

The `tray_manager` package is a powerful tool for Flutter developers looking to integrate system tray functionality into their desktop applications. This package allows applications to interact with the system tray, providing features such as displaying icons, handling click events, and showing context menus. It is particularly useful for applications that need to run in the background or provide quick access to certain features without opening the full application window.

## When to Use `tray_manager`

- **Background Applications**: Ideal for apps that need to run in the background and provide quick access to features.
- **Quick Access**: Useful for applications that require frequent user interaction without opening the main window.
- **System Monitoring Tools**: Perfect for tools that monitor system resources and need to alert users via the tray.

## Key Features

- **Cross-Platform Support**: Works on Windows, macOS, and Linux.
- **Customizable Tray Icons**: Allows setting custom icons for the tray.
- **Context Menus**: Supports adding context menus to the tray icon.
- **Event Handling**: Provides event listeners for tray icon interactions.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using `tray_manager` in Flutter

In this section, we'll walk through the setup process for the `tray_manager` package and demonstrate how to use it in a Flutter application. We'll cover platform-specific details for Android and iOS, although the primary focus is on desktop platforms.

## Installation

Add the `tray_manager` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  tray_manager: ^0.1.0
```

Run `flutter pub get` to install the package.

## Platform-Specific Setup

### Windows, macOS, and Linux

No additional setup is required for these platforms. The `tray_manager` package is designed to work seamlessly on desktop environments.

### Android and iOS

While `tray_manager` is primarily for desktop applications, if you plan to use it in a mobile context (e.g., for development purposes), ensure your app is configured to support desktop platforms.

## Basic Usage

1. **Initialize the Tray Manager**: Initialize the tray manager in your main application file.
2. **Set Tray Icon**: Use a custom icon for the tray.
3. **Add Context Menu**: Define and add a context menu to the tray icon.
4. **Handle Events**: Set up event listeners for tray interactions.

<-- END_TUTORIAL -->

<-- MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:tray_manager/tray_manager.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Tray Manager Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> with TrayListener {
  @override
  void initState() {
    super.initState();
    _initTray();
  }

  Future<void> _initTray() async {
    // Initialize the tray manager
    await trayManager.setIcon('assets/tray_icon.png'); // Set the tray icon
    await trayManager.setContextMenu([
      MenuItem(key: 'show', label: 'Show App'),
      MenuItem(key: 'exit', label: 'Exit'),
    ]); // Set the context menu

    trayManager.addListener(this); // Add event listener
  }

  @override
  void dispose() {
    trayManager.removeListener(this); // Remove event listener
    super.dispose();
  }

  @override
  void onTrayIconMouseDown() {
    // Handle tray icon click
    print('Tray icon clicked');
  }

  @override
  void onTrayMenuItemClick(MenuItem menuItem) {
    // Handle context menu item click
    switch (menuItem.key) {
      case 'show':
        // Logic to show the application window
        print('Show App clicked');
        break;
      case 'exit':
        // Logic to exit the application
        print('Exit clicked');
        break;
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Tray Manager Demo'),
      ),
      body: Center(
        child: Text('Tray Manager Example'),
      ),
    );
  }
}

// Application Flow:
// 1. The application initializes and runs the MyApp widget.
// 2. MyApp builds a MaterialApp with a home page of MyHomePage.
// 3. MyHomePageState initializes the tray manager in initState.
// 4. The tray icon and context menu are set up in _initTray.
// 5. Event listeners are added to handle tray icon clicks and menu item selections.
// 6. When the tray icon is clicked, onTrayIconMouseDown is triggered.
// 7. When a context menu item is clicked, onTrayMenuItemClick is triggered, executing the corresponding logic.
```

<-- END_MAIN -->
```markdown
In this example, we demonstrated how to integrate the `tray_manager` package into a Flutter application. The application initializes the tray manager, sets a custom tray icon, and adds a context menu with options to show the app or exit. Event listeners handle interactions with the tray icon and menu items, providing a seamless user experience for desktop applications.

By following this guide, you can effectively utilize the `tray_manager` package to enhance your Flutter desktop applications with system tray functionality.
```
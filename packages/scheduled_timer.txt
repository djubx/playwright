<-- START_DESCRIPTION -->

# Scheduled Timer Flutter Package
=====================================

The `scheduled_timer` Flutter package allows you to schedule tasks to run at specific times or intervals. This package is useful when you need to perform tasks at specific times, such as sending notifications, updating data, or performing maintenance tasks.

### Features

*   Schedule tasks to run at specific times or intervals
*   Supports both one-time and recurring tasks
*   Works on both Android and iOS platforms

### When to Use

*   Sending notifications at specific times
*   Updating data at regular intervals
*   Performing maintenance tasks, such as cleaning up data or updating settings

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

### Setup

To use the `scheduled_timer` package, you need to add it to your `pubspec.yaml` file:

```yml
dependencies:
  scheduled_timer: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Platform-Specific Configurations

#### Android

On Android, you need to add the following configuration to your `AndroidManifest.xml` file:

```xml
<uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED" />
```

This permission allows the app to receive the `BOOT_COMPLETED` broadcast, which is necessary for scheduling tasks.

#### iOS

On iOS, you need to add the following configuration to your `Info.plist` file:

```xml
<key>UIBackgroundModes</key>
<array>
    <string>processing</string>
</array>
```

This configuration allows the app to run in the background and perform tasks.

### Using the Package

To use the package, you need to import it and create an instance of the `ScheduledTimer` class:

```dart
import 'package:scheduled_timer/scheduled_timer.dart';

class RealFlutter {
  final ScheduledTimer _timer;

  RealFlutter(this._timer);

  void scheduleTask() {
    _timer.scheduleTask(
      task: () {
        print('Task executed!');
      },
      time: DateTime.now().add(Duration(seconds: 10)),
    );
  }
}
```

In this example, we create an instance of the `ScheduledTimer` class and schedule a task to run 10 seconds from now.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:scheduled_timer/scheduled_timer.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Scheduled Timer Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final ScheduledTimer _timer = ScheduledTimer();
  final RealFlutter _realFlutter = RealFlutter(ScheduledTimer());

  void _scheduleTask() {
    _realFlutter.scheduleTask();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Scheduled Timer Demo'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: _scheduleTask,
          child: Text('Schedule Task'),
        ),
      ),
    );
  }
}

class RealFlutter {
  final ScheduledTimer _timer;

  RealFlutter(this._timer);

  void scheduleTask() {
    // Schedule a task to run 10 seconds from now
    _timer.scheduleTask(
      task: () {
        print('Task executed!');
      },
      time: DateTime.now().add(Duration(seconds: 10)),
    );
  }
}

// Application flow:
// 1. The user clicks the "Schedule Task" button.
// 2. The _scheduleTask function is called, which calls the scheduleTask function of the RealFlutter class.
// 3. The scheduleTask function schedules a task to run 10 seconds from now using the ScheduledTimer class.
// 4. After 10 seconds, the task is executed and prints "Task executed!" to the console.
```

// Final summary: The code flows by first creating an instance of the `ScheduledTimer` class and the `RealFlutter` class. When the user clicks the "Schedule Task" button, the `scheduleTask` function is called, which schedules a task to run 10 seconds from now. After 10 seconds, the task is executed and prints "Task executed!" to the console.

<-- END_MAIN -->
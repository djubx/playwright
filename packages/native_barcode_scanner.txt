<-- START_DESCRIPTION -->

Native Barcode Scanner
======================

The `native_barcode_scanner` Flutter package provides a simple and efficient way to scan barcodes using the device's camera. This package is ideal for applications that require barcode scanning, such as inventory management, point-of-sale systems, and more.

Features
--------

*   Supports multiple barcode formats, including QR Code, Code 128, EAN-13, and more
*   Automatic barcode detection and decoding
*   Customizable scanner UI and settings
*   Works on both Android and iOS platforms

When to Use
------------

Use the `native_barcode_scanner` package when you need to integrate barcode scanning functionality into your Flutter application. This package is suitable for a wide range of use cases, including:

*   Inventory management: Scan barcodes to track inventory levels, manage stock, and optimize logistics.
*   Point-of-sale systems: Scan barcodes to process transactions, manage orders, and improve customer experience.
*   Healthcare: Scan barcodes to track patient information, manage medical records, and optimize hospital operations.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
----------------

To use the `native_barcode_scanner` package, follow these steps:

### Step 1: Add the Package to Your Project

Add the `native_barcode_scanner` package to your `pubspec.yaml` file:
```yml
dependencies:
  flutter:
    sdk: flutter
  native_barcode_scanner: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the `native_barcode_scanner` package in your Dart file:
```dart
import 'package:native_barcode_scanner/native_barcode_scanner.dart';
```
### Step 3: Create a Scanner Widget

Create a `ScannerWidget` to display the scanner UI:
```dart
ScannerWidget(
  onScan: (barcode) {
    // Handle the scanned barcode
  },
)
```
### Step 4: Configure the Scanner

Configure the scanner settings, such as the barcode formats to support:
```dart
ScannerWidget(
  onScan: (barcode) {
    // Handle the scanned barcode
  },
  settings: ScannerSettings(
    formats: [
      BarcodeFormat.qrCode,
      BarcodeFormat.code128,
    ],
  ),
)
```
### Platform-Specific Details

#### Android

On Android, you need to add the following permissions to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.CAMERA" />
<uses-permission android:name="android.permission.FLASHLIGHT" />
```
#### iOS

On iOS, you need to add the following permissions to your `Info.plist` file:
```xml
<key>NSCameraUsageDescription</key>
<string>Can I use the camera please?</string>
<key>NSPhotoLibraryUsageDescription</key>
<string>Can I use the photo library please?</string>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:native_barcode_scanner/native_barcode_scanner.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Barcode Scanner Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  String _scannedBarcode = '';

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Barcode Scanner Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ScannerWidget(
              onScan: (barcode) {
                // Handle the scanned barcode
                setState(() {
                  _scannedBarcode = barcode;
                });
              },
              settings: ScannerSettings(
                formats: [
                  BarcodeFormat.qrCode,
                  BarcodeFormat.code128,
                ],
              ),
            ),
            Text(
              _scannedBarcode,
              style: TextStyle(fontSize: 24),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and is presented with a scanner UI.
// 2. The user scans a barcode using the device's camera.
// 3. The scanner widget detects the barcode and decodes it.
// 4. The decoded barcode is passed to the `onScan` callback.
// 5. The `onScan` callback updates the app's state with the scanned barcode.
// 6. The app displays the scanned barcode to the user.

// This code demonstrates the basic usage of the `native_barcode_scanner` package.
// You can customize the scanner UI and settings to suit your specific use case.
```

<-- END_MAIN -->
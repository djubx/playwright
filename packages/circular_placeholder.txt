# Circular Placeholder Flutter Package

<!-- START_DESCRIPTION -->
## Description

The `circular_placeholder` package is a Flutter library designed to provide a customizable circular loading placeholder for images and other widgets. This package is particularly useful when you want to enhance the user experience by displaying a loading indicator while content is being fetched or processed. 

### When to Use

You might consider using `circular_placeholder` in scenarios such as:
- Loading images from a network source.
- Displaying content that takes time to load, such as data from an API.
- Enhancing the visual appeal of your application with smooth loading animations.

### Features

- **Customizable Circular Placeholder**: Easily customize the size, color, and shape of the placeholder.
- **Animation Support**: Provides built-in animations to make the loading experience more engaging.
- **Error Handling**: Allows you to display an error widget if the content fails to load.
- **Flexible Usage**: Can be used with various types of widgets, not just images.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
## Tutorial

### Installation

To use the `circular_placeholder` package, you need to add it to your `pubspec.yaml` file. Open your `pubspec.yaml` and add the following line under dependencies:

```yaml
dependencies:
  circular_placeholder: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command in your terminal to install the package:

```bash
flutter pub get
```

### Platform-Specific Details

#### Android

For Android, ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file:

```gradle
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
        ...
    }
}
```

#### iOS

For iOS, you may need to ensure that your deployment target is set to at least 10.0 in your `ios/Podfile`:

```ruby
platform :ios, '10.0'
```

### Basic Usage

To use the `circular_placeholder`, you can wrap your image or widget with the `CircularPlaceholder` widget. Hereâ€™s a simple example:

```dart
import 'package:flutter/material.dart';
import 'package:circular_placeholder/circular_placeholder.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Circular Placeholder Example')),
      body: Center(
        child: CircularPlaceholder(
          size: 100.0, // Size of the circular placeholder
          color: Colors.blue, // Color of the placeholder
          child: Image.network(
            'https://example.com/image.jpg', // Image URL
            fit: BoxFit.cover,
          ),
        ),
      ),
    );
  }
}
```

This example demonstrates how to use the `CircularPlaceholder` widget to display a circular loading indicator while the image is being fetched.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
## Complete Example

```dart
import 'package:flutter/material.dart';
import 'package:circular_placeholder/circular_placeholder.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Circular Placeholder Demo',
      theme: ThemeData(primarySwatch: Colors.blue),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Circular Placeholder Example')),
      body: Center(
        child: CircularPlaceholder(
          size: 100.0, // Set the size of the circular placeholder
          color: Colors.blue, // Set the color of the placeholder
          child: Image.network(
            'https://example.com/image.jpg', // URL of the image to load
            fit: BoxFit.cover, // Fit the image within the circular placeholder
            loadingBuilder: (context, child, loadingProgress) {
              // Show the circular placeholder while the image is loading
              if (loadingProgress == null) return child; // Image loaded
              return CircularPlaceholder(
                size: 100.0, // Size of the placeholder
                color: Colors.blue, // Color of the placeholder
              );
            },
            errorBuilder: (context, error, stackTrace) {
              // Show an error widget if the image fails to load
              return Icon(Icons.error, color: Colors.red, size: 50);
            },
          ),
        ),
      ),
    );
  }
}

// The application starts with the main function, which runs the MyApp widget.
// MyApp sets up the MaterialApp with a title and theme, and specifies RealFlutter as the home widget.
// In RealFlutter, we create a Scaffold with an AppBar and a Center widget.
// Inside the Center, we use CircularPlaceholder to show a loading indicator while the image is being fetched.
// The Image.network widget is used to load an image from a URL.
// The loadingBuilder is used to display the CircularPlaceholder while the image is loading.
// If the image fails to load, the errorBuilder displays an error icon.
```

<!-- END_MAIN -->

## Summary

In this blog post, we explored the `circular_placeholder` Flutter package, which provides a customizable circular loading placeholder for images and other widgets. We walked through the installation process, platform-specific configurations, and provided a complete example demonstrating its usage. The application flow was explained step-by-step through comments in the code, making it easy to understand how to implement this package in your Flutter projects. 

The `circular_placeholder` package is a great choice for enhancing user experience during content loading, and its flexibility allows for various use cases in Flutter applications.
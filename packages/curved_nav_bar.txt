<-- START_DESCRIPTION -->

# Curved Navigation Bar in Flutter
=====================================

The `curved_nav_bar` package is a popular Flutter package that allows developers to create a beautiful, curved navigation bar for their mobile applications. This package is highly customizable and provides a sleek, modern look to the traditional navigation bar.

### When to Use This Package

This package is ideal for applications that require a modern, visually appealing navigation system. It is perfect for applications with a small number of navigation items, as the curved design can accommodate up to 5 items.

### Features

*   Highly customizable: The package allows developers to customize the color, size, and shape of the navigation bar.
*   Sleek, modern design: The curved design provides a modern look to the traditional navigation bar.
*   Easy to use: The package is easy to integrate and use, even for beginners.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Curved Navigation Bar Package
=============================================================

### Step 1: Add the Package to Your Project

To use the `curved_nav_bar` package, you need to add it to your project. Open your `pubspec.yaml` file and add the following line under the `dependencies` section:

```yml
dependencies:
  flutter:
    sdk: flutter
  curved_navigation_bar: ^1.0.1
```

Then, run `flutter pub get` in your terminal to get the package.

### Step 2: Import the Package

To use the package, you need to import it into your Dart file. Add the following line at the top of your file:

```dart
import 'package:curved_navigation_bar/curved_navigation_bar.dart';
```

### Step 3: Create the Navigation Bar

To create the navigation bar, you need to use the `CurvedNavigationBar` widget. Here is a basic example:

```dart
CurvedNavigationBar(
  backgroundColor: Colors.blueAccent,
  items: <Widget>[
    Icon(Icons.add, size: 30),
    Icon(Icons.list, size: 30),
    Icon(Icons.compare_arrows, size: 30),
  ],
  onTap: (index) {
    // Handle the tap event
  },
)
```

### Platform-Specific Details

The `curved_nav_bar` package works on both Android and iOS platforms. However, you may need to adjust the size and shape of the navigation bar to fit the specific platform.

### Required Configurations or Optimizations

To optimize the performance of the navigation bar, you can adjust the `animationCurve` and `animationDuration` properties. For example:

```dart
CurvedNavigationBar(
  animationCurve: Curves.easeInOut,
  animationDuration: Duration(milliseconds: 600),
  // Other properties...
)
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:curved_navigation_bar/curved_navigation_bar.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Curved Navigation Bar Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  int _currentIndex = 0;

  @override
  Widget build(BuildContext context) {
    // Create a list of widgets to display on each tab
    List<Widget> _tabs = [
      Center(child: Text('Tab 1')),
      Center(child: Text('Tab 2')),
      Center(child: Text('Tab 3')),
    ];

    // Create the CurvedNavigationBar
    CurvedNavigationBar _navigationBar = CurvedNavigationBar(
      // Set the background color of the navigation bar
      backgroundColor: Colors.blueAccent,
      // Set the items to display on the navigation bar
      items: <Widget>[
        Icon(Icons.add, size: 30),
        Icon(Icons.list, size: 30),
        Icon(Icons.compare_arrows, size: 30),
      ],
      // Handle the tap event
      onTap: (index) {
        setState(() {
          _currentIndex = index;
        });
      },
    );

    // Create the Scaffold
    return Scaffold(
      // Set the body of the Scaffold to the current tab
      body: _tabs[_currentIndex],
      // Set the bottom navigation bar
      bottomNavigationBar: _navigationBar,
    );
  }
}

// The application flow is as follows:
// 1. The user taps on an item on the CurvedNavigationBar.
// 2. The onTap event is triggered, which updates the _currentIndex variable.
// 3. The setState method is called to rebuild the widget tree.
// 4. The body of the Scaffold is updated to display the current tab.
// 5. The CurvedNavigationBar is updated to highlight the current item.

// This code creates a simple demo of the Curved Navigation Bar package.
// It displays a navigation bar with three items and updates the body of the Scaffold to display the current tab.
```

<-- END_MAIN -->
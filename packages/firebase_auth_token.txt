<-- START_DESCRIPTION -->

# Firebase Auth Token Flutter Package
=====================================

The `firebase_auth_token` package provides a simple way to manage Firebase Authentication tokens in Flutter applications. It allows you to handle token refreshes, revocations, and validation, making it easier to secure your app with Firebase Authentication.

## When to Use This Package
---------------------------

You should use this package when:

* You need to manage Firebase Authentication tokens in your Flutter app.
* You want to handle token refreshes and revocations automatically.
* You need to validate tokens before making requests to your backend server.

## Features
------------

* Automatic token refreshes and revocations.
* Token validation using Firebase Authentication's built-in validation mechanisms.
* Support for multiple authentication providers (e.g., Google, Facebook, Email/Password).

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `firebase_auth_token` package, follow these steps:

### Step 1: Add the Package to Your `pubspec.yaml` File

```yml
dependencies:
  flutter:
    sdk: flutter
  firebase_auth_token: ^1.0.0
```

### Step 2: Import the Package in Your Dart File

```dart
import 'package:firebase_auth_token/firebase_auth_token.dart';
```

### Step 3: Initialize the Firebase Authentication Instance

```dart
final FirebaseAuth _auth = FirebaseAuth.instance;
```

### Step 4: Configure the Package (Optional)

You can configure the package to use a custom token refresh threshold or to disable automatic token refreshes.

```dart
FirebaseAuthToken.config(
  refreshThreshold: Duration(minutes: 15),
  autoRefresh: false,
);
```

### Platform-Specific Details

* On Android, make sure to add the `com.google.firebase:firebase-auth` dependency to your `build.gradle` file.
* On iOS, make sure to add the `Firebase/Auth` pod to your `Podfile`.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:firebase_auth_token/firebase_auth_token.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final FirebaseAuth _auth = FirebaseAuth.instance;
  String _token;

  @override
  void initState() {
    super.initState();
    _getToken();
  }

  Future<void> _getToken() async {
    // Get the current token
    final token = await FirebaseAuthToken.getToken();
    setState(() {
      _token = token;
    });
  }

  Future<void> _refreshToken() async {
    // Refresh the token
    final token = await FirebaseAuthToken.refreshToken();
    setState(() {
      _token = token;
    });
  }

  Future<void> _revokeToken() async {
    // Revoke the token
    await FirebaseAuthToken.revokeToken();
    setState(() {
      _token = null;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Firebase Auth Token Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(_token != null ? _token : 'No token available'),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _refreshToken,
              child: Text('Refresh Token'),
            ),
            SizedBox(height: 10),
            ElevatedButton(
              onPressed: _revokeToken,
              child: Text('Revoke Token'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app, and the `initState` method is called.
// 2. The `initState` method calls the `_getToken` method to get the current token.
// 3. The `_getToken` method uses the `FirebaseAuthToken.getToken` method to get the current token.
// 4. The token is then displayed on the screen.
// 5. When the user presses the 'Refresh Token' button, the `_refreshToken` method is called.
// 6. The `_refreshToken` method uses the `FirebaseAuthToken.refreshToken` method to refresh the token.
// 7. The new token is then displayed on the screen.
// 8. When the user presses the 'Revoke Token' button, the `_revokeToken` method is called.
// 9. The `_revokeToken` method uses the `FirebaseAuthToken.revokeToken` method to revoke the token.
// 10. The token is then removed from the screen.

```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Flutter Image Utilities Package
=====================================

The `flutter_image_utilities` package is a powerful tool for Flutter developers to manipulate and process images. It provides a wide range of features, including image filtering, resizing, cropping, and more. This package is ideal for applications that require image processing, such as social media apps, photo editing apps, and e-commerce apps.

### Key Features

* Image filtering: Apply various filters to images, such as blur, grayscale, and sepia.
* Image resizing: Resize images to specific dimensions or aspect ratios.
* Image cropping: Crop images to specific dimensions or aspect ratios.
* Image compression: Compress images to reduce file size.

### When to Use

* When you need to process images in your Flutter application.
* When you want to apply filters or effects to images.
* When you need to resize or crop images.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `flutter_image_utilities` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_image_utilities: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:flutter_image_utilities/flutter_image_utilities.dart';
```
### Step 3: Configure the Package (Optional)

You can configure the package to use a specific image processing engine. For example, to use the Android-specific engine, add the following line to your `AndroidManifest.xml` file:
```xml
<application>
  ...
  <meta-data
    android:name="flutter_image_utilities.engine"
    android:value="android" />
</application>
```
Similarly, to use the iOS-specific engine, add the following line to your `Info.plist` file:
```xml
<key>FlutterImageUtilitiesEngine</key>
<string>ios</string>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_image_utilities/flutter_image_utilities.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Image Utilities Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  File _imageFile;

  Future<void> _selectImage() async {
    final File imageFile = await ImagePicker.pickImage(source: ImageSource.gallery);
    setState(() {
      _imageFile = imageFile;
    });
  }

  Future<void> _applyFilter() async {
    if (_imageFile != null) {
      final File filteredImageFile = await FlutterImageUtilities.applyFilter(
        _imageFile,
        FilterType.sepia,
      );
      setState(() {
        _imageFile = filteredImageFile;
      });
    }
  }

  Future<void> _resizeImage() async {
    if (_imageFile != null) {
      final File resizedImageFile = await FlutterImageUtilities.resizeImage(
        _imageFile,
        width: 800,
        height: 600,
      );
      setState(() {
        _imageFile = resizedImageFile;
      });
    }
  }

  Future<void> _cropImage() async {
    if (_imageFile != null) {
      final File croppedImageFile = await FlutterImageUtilities.cropImage(
        _imageFile,
        width: 400,
        height: 300,
      );
      setState(() {
        _imageFile = croppedImageFile;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Image Utilities Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            if (_imageFile != null)
              Image.file(_imageFile)
            else
              Text('No image selected'),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _selectImage,
              child: Text('Select Image'),
            ),
            SizedBox(height: 10),
            ElevatedButton(
              onPressed: _applyFilter,
              child: Text('Apply Sepia Filter'),
            ),
            SizedBox(height: 10),
            ElevatedButton(
              onPressed: _resizeImage,
              child: Text('Resize Image'),
            ),
            SizedBox(height: 10),
            ElevatedButton(
              onPressed: _cropImage,
              child: Text('Crop Image'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user selects an image using the `ImagePicker` package.
// 2. The selected image is displayed on the screen.
// 3. The user can apply a sepia filter to the image by pressing the "Apply Sepia Filter" button.
// 4. The user can resize the image by pressing the "Resize Image" button.
// 5. The user can crop the image by pressing the "Crop Image" button.
// 6. The resulting image is displayed on the screen after each operation.

// The `FlutterImageUtilities` package is used to perform the image operations.
// The package provides a simple and easy-to-use API for applying filters, resizing, and cropping images.

// The application demonstrates the basic usage of the `FlutterImageUtilities` package.
// It shows how to select an image, apply a filter, resize, and crop the image using the package.

// The code is well-structured and easy to follow.
// It uses the `ElevatedButton` widget to create buttons for each operation.
// It uses the `Image.file` widget to display the selected image.
// It uses the `SizedBox` widget to add spacing between the buttons.

// Overall, the application provides a simple and intuitive way to demonstrate the usage of the `FlutterImageUtilities` package.
```

<-- END_MAIN -->
# Flutter Package: Fluent

<!-- START_DESCRIPTION -->
## Description

The **Fluent** package is a powerful Flutter library designed to bring the Fluent Design System to your Flutter applications. Developed by Microsoft, Fluent Design emphasizes light, depth, motion, material, and scale, providing a modern and cohesive user experience across platforms. This package is particularly useful for developers looking to create applications that align with the Windows ecosystem or want to implement a sleek, modern UI.

### When to Use Fluent

- **Windows Applications**: If you are developing applications targeting Windows, Fluent provides a native look and feel.
- **Cross-Platform Consistency**: For apps that need to maintain a consistent design across different platforms while still adhering to the principles of Fluent Design.
- **Modern UI**: When you want to implement a modern, visually appealing UI that leverages motion and depth.

### Key Features

- **Custom Widgets**: A variety of widgets that follow Fluent Design principles, including buttons, sliders, and dialogs.
- **Responsive Design**: Widgets that adapt to different screen sizes and orientations.
- **Animations**: Built-in support for animations that enhance user interaction.
- **Theming**: Easy theming options to customize the look and feel of your application.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
## Tutorial

### Installation

To get started with the Fluent package, you need to add it to your `pubspec.yaml` file. Open your Flutter project and add the following dependency:

```yaml
dependencies:
  fluent: ^latest_version
```

Make sure to replace `latest_version` with the most recent version available on [pub.dev](https://pub.dev/packages/fluent).

### Platform-Specific Configuration

#### Android

1. Ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file:

   ```groovy
   android {
       ...
       defaultConfig {
           ...
           minSdkVersion 21
           ...
       }
   }
   ```

2. Add any necessary permissions or configurations based on the widgets you plan to use.

#### iOS

1. Open your `ios/Runner/Info.plist` file and ensure you have the necessary configurations for your app.

2. If you are using any specific features that require permissions, make sure to add them here.

### Basic Usage

To use the Fluent package, you need to import it into your Dart files:

```dart
import 'package:fluent/fluent.dart';
```

You can then start using Fluent widgets in your application. For example, to create a simple button:

```dart
FluentButton(
  onPressed: () {
    // Handle button press
  },
  child: Text('Click Me'),
);
```

This button will automatically adopt the Fluent Design style.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
## Complete Example

Here is a complete example of a Flutter application using the Fluent package. This example demonstrates a simple app with a button that shows a dialog when pressed.

```dart
import 'package:flutter/material.dart'; // Import Flutter material package
import 'package:fluent/fluent.dart'; // Import Fluent package

void main() {
  runApp(RealFlutter()); // Run the RealFlutter app
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return FluentApp( // Use FluentApp to apply Fluent design
      title: 'Fluent Example',
      theme: FluentThemeData( // Define the theme for the app
        brightness: Brightness.light,
      ),
      home: HomePage(), // Set the home page of the app
    );
  }
}

class HomePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return ScaffoldPage( // Use ScaffoldPage for the main layout
      header: PageHeader( // Create a header for the page
        title: Text('Fluent Design Example'),
      ),
      content: Center( // Center the content in the page
        child: FluentButton( // Create a Fluent button
          onPressed: () {
            // Show a dialog when the button is pressed
            showDialog(
              context: context,
              builder: (context) {
                return ContentDialog( // Create a content dialog
                  title: Text('Hello!'), // Set the title of the dialog
                  content: Text('This is a Fluent Design dialog.'), // Set the content of the dialog
                  actions: [ // Define actions for the dialog
                    Button(
                      child: Text('Close'), // Button to close the dialog
                      onPressed: () {
                        Navigator.of(context).pop(); // Close the dialog
                      },
                    ),
                  ],
                );
              },
            );
          },
          child: Text('Show Dialog'), // Text displayed on the button
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function runs the RealFlutter app.
// 2. RealFlutter is a StatelessWidget that sets up the FluentApp with a light theme.
// 3. The HomePage widget is defined as the home of the app.
// 4. Inside HomePage, a ScaffoldPage is created with a header and a centered button.
// 5. When the button is pressed, a ContentDialog is shown with a title and content.
// 6. The dialog has a close button that dismisses the dialog when pressed.
```

<!-- END_MAIN -->

## Summary

In this example, we created a simple Flutter application using the Fluent package. The app features a button that, when pressed, displays a dialog. The use of `FluentApp` and `FluentButton` ensures that the application adheres to the Fluent Design principles, providing a modern and cohesive user experience. This example serves as a foundation for building more complex applications using the Fluent package, allowing developers to leverage its features for creating visually appealing UIs.
<-- START_DESCRIPTION -->

Easy Radio Flutter Package
==========================

The `easy_radio` Flutter package provides a simple and efficient way to play radio streams in Flutter applications. It supports both Android and iOS platforms, making it a versatile choice for developers.

When to Use
------------

The `easy_radio` package is ideal for applications that require radio streaming, such as:

* Online radio stations
* Music streaming apps
* Podcast players

Features
--------

* Supports Android and iOS platforms
* Plays radio streams in various formats (e.g., MP3, AAC, etc.)
* Provides a simple and intuitive API for controlling playback
* Includes features like play, pause, stop, and seek

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
----------------

### Step 1: Add the Package to Your Project

Add the `easy_radio` package to your `pubspec.yaml` file:
```yml
dependencies:
  easy_radio: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the `easy_radio` package in your Dart file:
```dart
import 'package:easy_radio/easy_radio.dart';
```
### Step 3: Create an Instance of the Radio Player

Create an instance of the `RadioPlayer` class:
```dart
RadioPlayer _radioPlayer = RadioPlayer();
```
### Step 4: Set the Radio Stream URL

Set the URL of the radio stream you want to play:
```dart
_radioPlayer.setUrl('https://example.com/radio_stream.mp3');
```
### Step 5: Play the Radio Stream

Play the radio stream:
```dart
_radioPlayer.play();
```
### Platform-Specific Details

* Android: Make sure to add the `android.permission.INTERNET` permission to your `AndroidManifest.xml` file.
* iOS: Add the `NSAppTransportSecurity` key to your `Info.plist` file to allow HTTP requests.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:easy_radio/easy_radio.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  RadioPlayer _radioPlayer = RadioPlayer();
  bool _isPlaying = false;

  @override
  void initState() {
    super.initState();
    _radioPlayer.setUrl('https://example.com/radio_stream.mp3');
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Easy Radio Demo',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Easy Radio Demo'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              ElevatedButton(
                onPressed: () {
                  if (!_isPlaying) {
                    _radioPlayer.play();
                    setState(() {
                      _isPlaying = true;
                    });
                  } else {
                    _radioPlayer.pause();
                    setState(() {
                      _isPlaying = false;
                    });
                  }
                },
                child: Text(_isPlaying ? 'Pause' : 'Play'),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  _radioPlayer.stop();
                  setState(() {
                    _isPlaying = false;
                  });
                },
                child: Text('Stop'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Application flow:
// 1. The app starts and creates an instance of the RadioPlayer class.
// 2. The app sets the URL of the radio stream to play.
// 3. When the user presses the Play button, the app plays the radio stream.
// 4. When the user presses the Pause button, the app pauses the radio stream.
// 5. When the user presses the Stop button, the app stops the radio stream.
// 6. The app updates the UI to reflect the current playback state.

// Summary:
// The code creates a simple radio player app that plays a radio stream using the easy_radio package.
// The app has three buttons: Play, Pause, and Stop.
// The app updates the UI to reflect the current playback state.
```

<-- END_MAIN -->
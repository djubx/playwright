<-- START_DESCRIPTION -->

# Internet Connectivity Checker Flutter Package
=============================================

The `internet_connectivity_checker` Flutter package is a utility library that allows developers to check the internet connectivity status of a device. This package is useful in scenarios where an app needs to perform network requests or sync data with a remote server.

### When to Use This Package

*   When building an app that requires a stable internet connection to function properly.
*   To handle network-related errors and provide a better user experience.
*   To implement offline support or caching mechanisms.

### Features

*   Checks internet connectivity status (connected or disconnected).
*   Supports both Android and iOS platforms.
*   Provides a simple and easy-to-use API.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Package
=============================================

### Step 1: Add the Package to Your Project

Add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  internet_connectivity_checker: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:internet_connectivity_checker/internet_connectivity_checker.dart';
```

### Step 3: Check Internet Connectivity

Use the `InternetConnectivityChecker` class to check the internet connectivity status:

```dart
bool isConnected = await InternetConnectivityChecker.isConnected;
```

### Platform-Specific Details

*   **Android:** The package uses the `ConnectivityManager` class to check internet connectivity.
*   **iOS:** The package uses the `SCNetworkReachability` class to check internet connectivity.

### Required Configurations or Optimizations

*   Make sure to add the necessary permissions to your `AndroidManifest.xml` file:

    ```xml
<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:internet_connectivity_checker/internet_connectivity_checker.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Internet Connectivity Checker Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  bool _isConnected = false;

  @override
  void initState() {
    super.initState();
    _checkInternetConnectivity();
  }

  Future<void> _checkInternetConnectivity() async {
    // Check internet connectivity status
    bool isConnected = await InternetConnectivityChecker.isConnected;

    // Update the UI with the connectivity status
    setState(() {
      _isConnected = isConnected;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Internet Connectivity Checker Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              _isConnected ? 'Connected to the internet' : 'No internet connection',
              style: TextStyle(fontSize: 24),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _checkInternetConnectivity,
              child: Text('Check Internet Connectivity'),
            ),
          ],
        ),
      ),
    );
  }
}

// Application flow:
// 1. The app starts and the `MyHomePage` widget is displayed.
// 2. The `_checkInternetConnectivity` function is called in the `initState` method to check the internet connectivity status.
// 3. The `InternetConnectivityChecker` class is used to check the internet connectivity status.
// 4. The UI is updated with the connectivity status.
// 5. The user can press the "Check Internet Connectivity" button to recheck the internet connectivity status.

// Summary: The code flows by first checking the internet connectivity status when the app starts, and then allowing the user to recheck the status by pressing a button. The UI is updated with the connectivity status.
```

<-- END_MAIN -->
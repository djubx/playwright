<-- START_DESCRIPTION -->

# Convert Widget to Image Flutter Package
=============================================

The `convert_widget_to_image` Flutter package allows you to convert any widget into an image. This package is useful when you need to share a screenshot of a specific part of your app or save it to the device's gallery.

### Features

* Convert any widget into an image
* Supports both Android and iOS platforms
* Allows you to specify the image format (PNG or JPEG)
* Can be used to share screenshots or save them to the device's gallery

### When to Use This Package

* When you need to share a screenshot of a specific part of your app
* When you need to save a screenshot to the device's gallery
* When you need to generate an image from a widget programmatically

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Using the Convert Widget to Image Flutter Package
===========================================================

### Step 1: Add the Package to Your Pubspec.yaml File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  convert_widget_to_image: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:convert_widget_to_image/convert_widget_to_image.dart';
```
### Step 3: Use the Package

To convert a widget to an image, use the `ConvertWidgetToImage` class:
```dart
class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Convert Widget to Image'),
      ),
      body: Center(
        child: ConvertWidgetToImage(
          child: Text('Hello, World!'),
          format: ImageFormat.png,
          onPressed: (image) {
            // Do something with the image
          },
        ),
      ),
    );
  }
}
```
### Platform-Specific Details

* Android: Make sure to add the `android.permission.WRITE_EXTERNAL_STORAGE` permission to your `AndroidManifest.xml` file.
* iOS: Make sure to add the `NSPhotoLibraryAddUsageDescription` key to your `Info.plist` file.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:convert_widget_to_image/convert_widget_to_image.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Convert Widget to Image Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    // Create a Scaffold with an AppBar and a Centered child
    return Scaffold(
      appBar: AppBar(
        title: Text('Convert Widget to Image Demo'),
      ),
      body: Center(
        // Use the ConvertWidgetToImage class to convert the child to an image
        child: ConvertWidgetToImage(
          // The child to be converted to an image
          child: Text('Hello, World!'),
          // The format of the image (PNG or JPEG)
          format: ImageFormat.png,
          // The callback function when the image is pressed
          onPressed: (image) {
            // Do something with the image
            print('Image pressed!');
          },
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app and is presented with a Scaffold containing an AppBar and a Centered child.
// 2. The child is a ConvertWidgetToImage widget, which converts the child to an image.
// 3. When the image is pressed, the onPressed callback function is called.
// 4. In this example, the onPressed function simply prints a message to the console.
// 5. The image can be shared or saved to the device's gallery using the ConvertWidgetToImage class.

// Final summary: This code demonstrates the use of the ConvertWidgetToImage class to convert a widget to an image.
// The image can be shared or saved to the device's gallery using the ConvertWidgetToImage class.
```

<-- END_MAIN -->
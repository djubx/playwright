```markdown
<-- START_DESCRIPTION -->

# Super Context Menu Flutter Package

The `super_context_menu` Flutter package is a powerful tool designed to enhance user interaction by providing customizable context menus in your Flutter applications. This package allows developers to create context menus that are not only visually appealing but also highly functional, offering a wide range of customization options to fit the specific needs of any application.

## When to Use

The `super_context_menu` package is ideal for applications that require advanced user interaction features. It is particularly useful in scenarios where users need to perform actions on specific items within a list or grid, such as editing, deleting, or sharing content. This package can be used in:

- File management apps where users need to perform actions on files.
- Social media apps for interacting with posts or comments.
- E-commerce apps for managing items in a shopping cart.

## Features

- **Customizable Appearance**: Tailor the look and feel of the context menu to match your app's theme.
- **Flexible Positioning**: Display the menu at any position relative to the triggering widget.
- **Rich Action Support**: Include icons, text, and even custom widgets in menu items.
- **Platform Adaptation**: Automatically adapts to platform-specific design guidelines for Android and iOS.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using Super Context Menu

In this tutorial, we will walk through the process of setting up the `super_context_menu` package in a Flutter project and demonstrate how to use it effectively.

## Setup Process

### Step 1: Add Dependency

First, add the `super_context_menu` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  super_context_menu: ^1.0.0
```

Run `flutter pub get` to install the package.

### Step 2: Import the Package

In your Dart file, import the package:

```dart
import 'package:super_context_menu/super_context_menu.dart';
```

### Step 3: Platform-Specific Configuration

#### Android

Ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```gradle
android {
    defaultConfig {
        minSdkVersion 21
    }
}
```

#### iOS

No additional configuration is required for iOS, but ensure your deployment target is set to iOS 9.0 or higher in your `ios/Podfile`:

```ruby
platform :ios, '9.0'
```

## Using the Package

To use the `super_context_menu`, wrap the widget you want to trigger the menu with `SuperContextMenu` and define the menu items:

```dart
SuperContextMenu(
  child: RealFlutter(
    // Your widget here
  ),
  items: [
    ContextMenuItem(
      icon: Icons.edit,
      label: 'Edit',
      onTap: () {
        // Handle edit action
      },
    ),
    ContextMenuItem(
      icon: Icons.delete,
      label: 'Delete',
      onTap: () {
        // Handle delete action
      },
    ),
  ],
);
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

# Complete Example: Flutter Main File

Below is a complete example demonstrating the use of the `super_context_menu` package in a Flutter application.

```dart
import 'package:flutter/material.dart';
import 'package:super_context_menu/super_context_menu.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Super Context Menu Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: HomePage(),
    );
  }
}

class HomePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Super Context Menu Example'),
      ),
      body: Center(
        child: SuperContextMenu(
          child: RealFlutter(
            // This is the widget that will trigger the context menu
            child: Icon(Icons.touch_app, size: 100),
          ),
          items: [
            ContextMenuItem(
              icon: Icons.edit,
              label: 'Edit',
              onTap: () {
                // Handle edit action
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text('Edit action selected')),
                );
              },
            ),
            ContextMenuItem(
              icon: Icons.delete,
              label: 'Delete',
              onTap: () {
                // Handle delete action
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text('Delete action selected')),
                );
              },
            ),
            ContextMenuItem(
              icon: Icons.share,
              label: 'Share',
              onTap: () {
                // Handle share action
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text('Share action selected')),
                );
              },
            ),
          ],
        ),
      ),
    );
  }
}
```

// The application starts by running the `MyApp` class, which sets up the MaterialApp.
// The `HomePage` widget is the main screen, displaying an AppBar and a centered icon.
// The `SuperContextMenu` wraps the `RealFlutter` widget, which is an icon in this case.
// When the icon is long-pressed, the context menu appears with options to Edit, Delete, or Share.
// Each menu item has an associated action that shows a SnackBar with a message indicating the selected action.

<-- END_MAIN -->
```
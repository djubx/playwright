```markdown
<!-- START_DESCRIPTION -->
# Overview of the app_install_events Flutter Package

The `app_install_events` Flutter package is designed to help developers track app installation events on both Android and iOS platforms. This package is particularly useful for analytics, user engagement, and marketing purposes, allowing developers to understand how users are interacting with their app from the moment it is installed.

## When to Use This Package
- **Analytics Tracking**: If you want to track how many users install your app and when they do it.
- **User Engagement**: To analyze user behavior right from the installation phase.
- **Marketing Campaigns**: To measure the effectiveness of marketing campaigns by tracking installations.

## Key Features
- **Cross-Platform Support**: Works seamlessly on both Android and iOS.
- **Event Tracking**: Captures installation events and provides detailed logs.
- **Easy Integration**: Simple API that can be integrated into existing Flutter applications.

Overall, the `app_install_events` package is a powerful tool for developers looking to gain insights into app installations and user engagement.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using app_install_events

## Installation
To add the `app_install_events` package to your Flutter project, include it in your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  app_install_events: ^1.0.0  # Check for the latest version on pub.dev
```

Run `flutter pub get` to install the package.

## Platform-Specific Configuration

### Android
1. Open your `AndroidManifest.xml` file located at `android/app/src/main/AndroidManifest.xml`.
2. Add the following permissions inside the `<manifest>` tag:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
```

### iOS
1. Open your `Info.plist` file located at `ios/Runner/Info.plist`.
2. Add the following key-value pair to allow network access:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

## Basic Usage
To start using the package, you need to import it into your Dart file:

```dart
import 'package:app_install_events/app_install_events.dart';
```

You can then initialize the package and start tracking installation events:

```dart
void main() {
  runApp(MyApp());
  AppInstallEvents.initialize(); // Initialize the package
}
```

This setup will allow you to start capturing installation events as soon as the app is launched.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using app_install_events

```dart
import 'package:flutter/material.dart';
import 'package:app_install_events/app_install_events.dart';

void main() {
  runApp(RealFlutter()); // Start the Flutter app
  AppInstallEvents.initialize(); // Initialize the app_install_events package
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'App Install Events Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: HomeScreen(),
    );
  }
}

class HomeScreen extends StatefulWidget {
  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  String _installEventMessage = "Waiting for install event..."; // Message to display

  @override
  void initState() {
    super.initState();
    _trackInstallEvent(); // Start tracking install events
  }

  void _trackInstallEvent() async {
    // Listen for installation events
    AppInstallEvents.onInstallEvent.listen((event) {
      setState(() {
        _installEventMessage = "App Installed: ${event.timestamp}"; // Update message with event timestamp
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('App Install Events'),
      ),
      body: Center(
        child: Text(
          _installEventMessage, // Display the install event message
          style: TextStyle(fontSize: 20),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the RealFlutter widget.
// 2. Inside RealFlutter, a MaterialApp is created with a title and theme.
// 3. The HomeScreen widget is set as the home of the MaterialApp.
// 4. In the HomeScreen's initState method, the _trackInstallEvent method is called.
// 5. The _trackInstallEvent method listens for installation events using the AppInstallEvents.onInstallEvent stream.
// 6. When an install event is detected, the message is updated with the event's timestamp.
// 7. The updated message is displayed in the center of the screen.
```
<!-- END_MAIN -->
```

This structured blog post provides a comprehensive overview of the `app_install_events` Flutter package, guiding developers through its features, setup, and practical usage with a complete example.
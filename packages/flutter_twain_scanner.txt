<-- START_DESCRIPTION -->

# Flutter Twain Scanner Package
================================

The `flutter_twain_scanner` package is a powerful tool for integrating document scanning capabilities into your Flutter applications. It provides a simple and efficient way to scan documents using TWAIN-compatible scanners.

## When to Use This Package
---------------------------

This package is ideal for applications that require document scanning, such as:

* Document management systems
* Medical record scanning
* Financial document scanning
* ID card scanning

## Features
------------

* Supports TWAIN-compatible scanners
* Cross-platform compatibility (Android and iOS)
* Simple and efficient API
* Customizable scanning settings

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `flutter_twain_scanner` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_twain_scanner: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:flutter_twain_scanner/flutter_twain_scanner.dart';
```
### Step 3: Initialize the Scanner

Initialize the scanner by calling the `initScanner` method:
```dart
await FlutterTwainScanner.initScanner();
```
### Step 4: Set Scanning Settings (Optional)

You can customize the scanning settings by calling the `setScanningSettings` method:
```dart
await FlutterTwainScanner.setScanningSettings(
  resolution: 300,
  pixelType: PixelType.RGB,
);
```
### Step 5: Start Scanning

Start scanning by calling the `startScanning` method:
```dart
await FlutterTwainScanner.startScanning();
```
### Step 6: Get Scanned Image

Get the scanned image by calling the `getScannedImage` method:
```dart
Uint8List scannedImage = await FlutterTwainScanner.getScannedImage();
```
### Platform-Specific Details

* Android: Make sure to add the `android.permission.CAMERA` permission to your `AndroidManifest.xml` file.
* iOS: Make sure to add the `NSCameraUsageDescription` key to your `Info.plist` file.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_twain_scanner/flutter_twain_scanner.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Twain Scanner Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  Uint8List _scannedImage;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Twain Scanner Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            _scannedImage != null
                ? Image.memory(_scannedImage)
                : Text('No scanned image'),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _scanDocument,
              child: Text('Scan Document'),
            ),
          ],
        ),
      ),
    );
  }

  Future<void> _scanDocument() async {
    // Initialize the scanner
    await FlutterTwainScanner.initScanner();

    // Set scanning settings (optional)
    await FlutterTwainScanner.setScanningSettings(
      resolution: 300,
      pixelType: PixelType.RGB,
    );

    // Start scanning
    await FlutterTwainScanner.startScanning();

    // Get scanned image
    Uint8List scannedImage = await FlutterTwainScanner.getScannedImage();

    // Update the UI with the scanned image
    setState(() {
      _scannedImage = scannedImage;
    });
  }
}

// The application flow is as follows:
// 1. The user clicks the "Scan Document" button.
// 2. The `_scanDocument` function is called, which initializes the scanner.
// 3. The scanning settings are set (optional).
// 4. The scanning process is started.
// 5. The scanned image is retrieved.
// 6. The UI is updated with the scanned image.

// The Flutter Twain Scanner package provides a simple and efficient way to integrate document scanning capabilities into your Flutter applications.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Queen Validators Flutter Package
=====================================

The `queen_validators` package is a powerful validation tool for Flutter applications. It provides a simple and efficient way to validate user input, ensuring that data is correct and consistent before it is processed or stored.

### When to Use

The `queen_validators` package is ideal for any Flutter application that requires user input, such as:

* Login and registration forms
* Data entry forms
* Survey and questionnaire apps
* E-commerce apps with checkout forms

### Features

The `queen_validators` package offers a range of features, including:

* Pre-built validators for common data types (e.g., email, password, phone number)
* Customizable validation rules
* Support for asynchronous validation
* Integration with Flutter's built-in `TextFormField` widget

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up Queen Validators
=============================

To use the `queen_validators` package in your Flutter application, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  queen_validators: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the `queen_validators` package in your Dart file:
```dart
import 'package:queen_validators/queen_validators.dart';
```
### Step 3: Create a Validator

Create a validator using the `Validator` class:
```dart
final validator = Validator(
  rules: [
    RequiredRule(),
    EmailRule(),
  ],
);
```
### Step 4: Use the Validator with a TextFormField

Use the validator with a `TextFormField` widget:
```dart
TextFormField(
  validator: validator,
  decoration: InputDecoration(
    labelText: 'Email',
  ),
)
```
### Platform-Specific Details

The `queen_validators` package works on both Android and iOS platforms. However, you may need to configure your app's keyboard settings to ensure that the validator works correctly.

On Android, you can configure the keyboard settings in your app's `AndroidManifest.xml` file:
```xml
<activity
  ...
  android:windowSoftInputMode="adjustResize"
  ...
>
```
On iOS, you can configure the keyboard settings in your app's `Info.plist` file:
```xml
<key>UIKeyboardType</key>
<string>UIKeyboardTypeEmailAddress</string>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:queen_validators/queen_validators.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Queen Validators Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _formKey = GlobalKey<FormState>();
  final _emailController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Queen Validators Demo'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              TextFormField(
                controller: _emailController,
                validator: Validator(
                  rules: [
                    RequiredRule(),
                    EmailRule(),
                  ],
                ),
                decoration: InputDecoration(
                  labelText: 'Email',
                ),
              ),
              SizedBox(height: 16),
              ElevatedButton(
                onPressed: () {
                  if (_formKey.currentState!.validate()) {
                    print('Email is valid');
                  } else {
                    print('Email is not valid');
                  }
                },
                child: Text('Validate Email'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
```

// This code demonstrates the use of the Queen Validators package in a Flutter app.
// The app has a single text field for entering an email address, and a button to validate the email.
// When the button is pressed, the app checks if the email is valid using the Queen Validators package.
// If the email is valid, the app prints a success message to the console.
// If the email is not valid, the app prints an error message to the console.
// The Queen Validators package is used to define a validator for the email text field.
// The validator checks if the email is required and if it matches the email pattern.
// The app uses a form key to validate the form when the button is pressed.

<-- END_MAIN -->
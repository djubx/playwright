<-- START_DESCRIPTION -->

Scanner Overlay Flutter Package
================================

The `scanner_overlay` Flutter package provides a customizable overlay for camera-based scanners. It allows developers to create a user-friendly interface for scanning documents, QR codes, and other types of codes. The package is highly customizable, making it suitable for various use cases.

When to Use This Package
------------------------

*   Creating a document scanner app
*   Building a QR code scanner
*   Implementing a barcode scanner
*   Any other camera-based scanning application

Features
--------

*   Customizable overlay
*   Support for various aspect ratios
*   Dynamic resizing of the overlay
*   Compatible with popular camera packages

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
---------------

### Step 1: Add the Package to Your Project

Add the `scanner_overlay` package to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  scanner_overlay: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:scanner_overlay/scanner_overlay.dart';
```

### Step 3: Create a CameraController

Create a `CameraController` instance to manage the camera:

```dart
CameraController _cameraController = CameraController(
  cameraDescription: CameraDescription(
    name: 'Camera 0',
    lensDirection: CameraLensDirection.back,
  ),
);
```

### Step 4: Initialize the ScannerOverlay

Create a `ScannerOverlay` instance and pass the `CameraController` instance to it:

```dart
ScannerOverlay _scannerOverlay = ScannerOverlay(
  cameraController: _cameraController,
  aspectRatio: 1.0,
  overlayColor: Colors.red,
  borderColor: Colors.blue,
);
```

### Step 5: Display the ScannerOverlay

Add the `ScannerOverlay` instance to your widget tree:

```dart
@override
Widget build(BuildContext context) {
  return Scaffold(
    body: Stack(
      children: [
        _scannerOverlay,
      ],
    ),
  );
}
```

Platform-Specific Details
-------------------------

### Android

*   Make sure to add the necessary camera permissions to your `AndroidManifest.xml` file:

    ```xml
<uses-permission android:name="android.permission.CAMERA" />
```

*   If you're targeting Android 10 or later, you need to add the `android:requestLegacyExternalStorage` attribute to your `application` tag:

    ```xml
<application
    ...
    android:requestLegacyExternalStorage="true">
```

### iOS

*   Add the necessary camera permissions to your `Info.plist` file:

    ```xml
<key>NSCameraUsageDescription</key>
<string>This app needs camera access to scan documents.</string>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:scanner_overlay/scanner_overlay.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Scanner Overlay Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Create a CameraController instance
  CameraController _cameraController = CameraController(
    cameraDescription: CameraDescription(
      name: 'Camera 0',
      lensDirection: CameraLensDirection.back,
    ),
  );

  // Create a ScannerOverlay instance
  ScannerOverlay _scannerOverlay;

  @override
  void initState() {
    super.initState();

    // Initialize the ScannerOverlay instance
    _scannerOverlay = ScannerOverlay(
      cameraController: _cameraController,
      aspectRatio: 1.0,
      overlayColor: Colors.red,
      borderColor: Colors.blue,
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Scanner Overlay Demo'),
      ),
      body: Stack(
        children: [
          // Display the ScannerOverlay instance
          _scannerOverlay,
        ],
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and is presented with a screen displaying the ScannerOverlay instance.
// 2. The ScannerOverlay instance is created and initialized in the _RealFlutterState class.
// 3. The ScannerOverlay instance is displayed on top of the camera preview.
// 4. The user can then use the ScannerOverlay instance to scan documents or other types of codes.
// 5. The scanned data is then processed and displayed to the user.

// Summary: This code creates a basic Flutter app that displays a ScannerOverlay instance on top of a camera preview.
// The ScannerOverlay instance is used to scan documents or other types of codes, and the scanned data is then processed and displayed to the user.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

**Async Preferences Flutter Package**
=====================================

The `async_preferences` package is a Flutter plugin that allows you to store and retrieve data asynchronously. It provides a simple and efficient way to store small amounts of data, such as user preferences, settings, or cached data.

**When to Use**
---------------

You should use `async_preferences` when you need to store small amounts of data that don't require a full-fledged database. It's perfect for storing user preferences, such as theme settings, font sizes, or other app-specific settings.

**Features**
------------

* Asynchronous data storage and retrieval
* Simple and easy-to-use API
* Supports storing and retrieving strings, integers, booleans, and doubles
* Works on both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setup and Usage**
-------------------

### Step 1: Add the Package to Your Pubspec

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  async_preferences: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:async_preferences/async_preferences.dart';
```
### Step 3: Initialize the Package

Initialize the package in your `main` function:
```dart
void main() async {
  await AsyncPreferences.init();
  runApp(MyApp());
}
```
### Step 4: Store and Retrieve Data

Use the `AsyncPreferences` class to store and retrieve data:
```dart
class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Async Preferences Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text('Stored Value: ${AsyncPreferences.getString('key')}'),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () async {
                await AsyncPreferences.setString('key', 'Hello, World!');
                setState(() {});
              },
              child: Text('Store Value'),
            ),
          ],
        ),
      ),
    );
  }
}
```
### Platform-Specific Details

* On Android, the data is stored in the app's internal storage directory.
* On iOS, the data is stored in the app's documents directory.

### Configurations and Optimizations

* You can configure the package to use a custom storage directory by passing a `storageDirectory` parameter to the `init` method.
* You can optimize the package's performance by using the `AsyncPreferences.get` method to retrieve multiple values at once.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:async_preferences/async_preferences.dart';

void main() async {
  await AsyncPreferences.init();
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Async Preferences Example',
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  String _storedValue = '';

  @override
  void initState() {
    super.initState();
    _loadStoredValue();
  }

  Future<void> _loadStoredValue() async {
    final storedValue = await AsyncPreferences.getString('key');
    setState(() {
      _storedValue = storedValue ?? '';
    });
  }

  Future<void> _storeValue() async {
    await AsyncPreferences.setString('key', 'Hello, World!');
    _loadStoredValue();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Async Preferences Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text('Stored Value: $_storedValue'),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _storeValue,
              child: Text('Store Value'),
            ),
          ],
        ),
      ),
    );
  }
}

// The app starts by initializing the AsyncPreferences package in the main function.
// The RealFlutter widget is then displayed, which shows the stored value and a button to store a new value.
// When the button is pressed, the _storeValue function is called, which stores the new value and then loads the stored value again to update the display.
// The _loadStoredValue function is called in the initState method to load the stored value when the widget is first displayed.
// The stored value is displayed in the Text widget, and the button is used to store a new value.
```

<-- END_MAIN -->
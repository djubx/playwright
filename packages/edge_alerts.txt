# Edge Alerts Flutter Package

<!-- START_DESCRIPTION -->
## Description

The `edge_alerts` package is a Flutter library designed to provide customizable alert dialogs that can be displayed at the edges of the screen. This package is particularly useful for applications that require non-intrusive notifications or alerts, allowing users to receive important information without disrupting their current workflow. 

### When to Use

You might consider using `edge_alerts` in scenarios such as:
- Displaying temporary notifications (e.g., success messages, warnings, or errors) that do not require user interaction.
- Providing feedback after user actions, such as form submissions or data updates.
- Enhancing user experience by keeping alerts subtle and less disruptive.

### Features

- **Customizable Positioning**: Alerts can be displayed at the top or bottom of the screen.
- **Animation Support**: Smooth animations for showing and hiding alerts.
- **Custom Styling**: Ability to customize colors, text styles, and durations.
- **Dismissible Alerts**: Alerts can be automatically dismissed after a specified duration or manually by the user.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
## Tutorial

### Installation

To use the `edge_alerts` package, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  edge_alerts: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run `flutter pub get` to install the package.

### Platform-Specific Configuration

#### Android

No specific configuration is required for Android. Just ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

#### iOS

For iOS, ensure that your deployment target is set to at least 10.0 in your `ios/Podfile`:

```ruby
platform :ios, '10.0'
```

### Usage

To use the `edge_alerts` package, you can follow these steps:

1. Import the package in your Dart file:

```dart
import 'package:edge_alerts/edge_alerts.dart';
```

2. Call the `EdgeAlert.show()` method to display an alert. You can customize the alert's position, duration, and style.

Example:

```dart
EdgeAlert.show(context,
    title: "Success",
    description: "Your data has been saved successfully.",
    backgroundColor: Colors.green,
    duration: 3);
```

This will display a green alert at the top of the screen for 3 seconds.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
## Complete Example

```dart
import 'package:flutter/material.dart';
import 'package:edge_alerts/edge_alerts.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Edge Alerts Example',
      home: HomeScreen(),
    );
  }
}

class HomeScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Edge Alerts Demo'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Show a success alert when the button is pressed
            EdgeAlert.show(context,
                title: "Success",
                description: "Your action was successful!",
                backgroundColor: Colors.green,
                duration: 3);
          },
          child: Text('Show Alert'),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function initializes the app by calling runApp() with the RealFlutter widget.
// 2. RealFlutter is a StatelessWidget that builds a MaterialApp with a title and a home screen.
// 3. HomeScreen is a StatelessWidget that contains a Scaffold with an AppBar and a Center widget.
// 4. Inside the Center widget, there is an ElevatedButton.
// 5. When the button is pressed, the EdgeAlert.show() method is called to display a success alert.
// 6. The alert appears at the top of the screen with a green background for 3 seconds, providing feedback to the user.
```

<!-- END_MAIN -->

## Summary

In this blog post, we explored the `edge_alerts` Flutter package, which allows developers to create non-intrusive alerts at the edges of the screen. We covered the installation process, platform-specific configurations, and provided a complete example demonstrating how to implement the package in a Flutter application. The example showcased how to display a success alert when a button is pressed, enhancing user experience by providing immediate feedback. The `edge_alerts` package is a great choice for developers looking to implement subtle notifications in their applications.
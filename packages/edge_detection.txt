<-- START_DESCRIPTION -->

Edge Detection Flutter Package
==============================

The edge_detection Flutter package is a powerful tool for detecting edges in images. It provides a simple and efficient way to identify the boundaries of objects within an image, making it a valuable asset for a wide range of applications, from image processing and computer vision to robotics and surveillance.

When to Use This Package
------------------------

The edge_detection package is particularly useful in scenarios where you need to:

* Detect the boundaries of objects in an image
* Identify the shape and structure of objects
* Enhance the visibility of edges in low-contrast images
* Perform image segmentation and object recognition

Features
--------

The edge_detection package offers the following key features:

* Support for various edge detection algorithms, including Sobel, Canny, and Laplacian of Gaussian (LoG)
* Adjustable parameters for fine-tuning edge detection results
* Support for both grayscale and color images
* Efficient and optimized implementation for fast processing times

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
---------------

To use the edge_detection package in your Flutter project, follow these steps:

### Step 1: Add the Package to Your Project

Add the edge_detection package to your project by adding the following line to your `pubspec.yaml` file:
```yml
dependencies:
  edge_detection: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the edge_detection package in your Dart file:
```dart
import 'package:edge_detection/edge_detection.dart';
```
### Step 3: Load an Image

Load an image using the `Image` class:
```dart
import 'dart:ui' as ui;

ui.Image image = await loadAssetImage('assets/image.jpg');
```
### Step 4: Detect Edges

Detect edges in the image using the `EdgeDetection` class:
```dart
EdgeDetection edgeDetection = EdgeDetection(
  image: image,
  algorithm: EdgeDetectionAlgorithm.sobel,
  threshold: 0.5,
);

ui.Image edgeImage = await edgeDetection.detectEdges();
```
### Platform-Specific Details

* Android: Make sure to add the necessary permissions to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
```
* iOS: Make sure to add the necessary permissions to your `Info.plist` file:
```xml
<key>NSPhotoLibraryUsageDescription</key>
<string>This app needs access to your photo library to load images.</string>
```
### Optimizations

For optimal performance, consider the following:

* Use a smaller image size to reduce processing time.
* Adjust the threshold value to fine-tune edge detection results.
* Use a more efficient edge detection algorithm, such as Sobel or Canny.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:edge_detection/edge_detection.dart';
import 'dart:ui' as ui;

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Edge Detection Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  ui.Image _image;
  ui.Image _edgeImage;

  Future<void> _loadImage() async {
    // Load an image from assets
    _image = await loadAssetImage('assets/image.jpg');
    setState(() {});
  }

  Future<void> _detectEdges() async {
    // Detect edges in the image
    EdgeDetection edgeDetection = EdgeDetection(
      image: _image,
      algorithm: EdgeDetectionAlgorithm.sobel,
      threshold: 0.5,
    );
    _edgeImage = await edgeDetection.detectEdges();
    setState(() {});
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Edge Detection Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            if (_image != null)
              Image(
                image: _image,
                width: 200,
                height: 200,
              ),
            SizedBox(height: 20),
            if (_edgeImage != null)
              Image(
                image: _edgeImage,
                width: 200,
                height: 200,
              ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _loadImage,
              child: Text('Load Image'),
            ),
            SizedBox(height: 10),
            ElevatedButton(
              onPressed: _detectEdges,
              child: Text('Detect Edges'),
            ),
          ],
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user loads an image by pressing the "Load Image" button.
// 2. The image is displayed on the screen.
// 3. The user presses the "Detect Edges" button to detect edges in the image.
// 4. The edge detection algorithm is applied to the image, and the resulting edge image is displayed on the screen.
// 5. The user can adjust the threshold value to fine-tune edge detection results.
// 6. The user can load a new image and repeat the process.

```

<-- END_MAIN -->
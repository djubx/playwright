<-- START_DESCRIPTION -->

# Flare Flutter Package: A High-Level Overview
=====================================================

The `flare_flutter` package is a powerful animation library for Flutter that allows developers to create complex animations with ease. It provides a simple and intuitive API for creating animations, making it a great choice for developers of all skill levels.

### When to Use Flare Flutter

Flare Flutter is perfect for creating complex animations, such as:

* Character animations
* UI animations
* Interactive animations
* Games

### Features

Some of the key features of Flare Flutter include:

* Support for complex animations with multiple layers and timelines
* Easy-to-use API for creating animations
* Support for interactive animations
* Optimized for performance

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up Flare Flutter
==========================

To get started with Flare Flutter, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flare_flutter: ^2.0.1
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:flare_flutter/flare.dart';
import 'package:flare_flutter/flare_actor.dart';
import 'package:flare_flutter/flare_controller.dart';
```
### Step 3: Create a Flare Actor

Create a Flare actor using the `FlareActor` widget:
```dart
FlareActor(
  'assets/animation.flr',
  animation: 'animation',
  fit: BoxFit.contain,
)
```
Replace `'assets/animation.flr'` with the path to your Flare animation file.

### Platform-Specific Details

#### Android

To use Flare Flutter on Android, you need to add the following line to your `AndroidManifest.xml` file:
```xml
<application
  ...
  android:hardwareAccelerated="true"
  ...
>
```
This enables hardware acceleration for your app.

#### iOS

To use Flare Flutter on iOS, you need to add the following line to your `Info.plist` file:
```xml
<key>UIRequiresFullScreen</key>
<true/>
```
This enables full-screen mode for your app.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flare_flutter/flare.dart';
import 'package:flare_flutter/flare_actor.dart';
import 'package:flare_flutter/flare_controller.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Create a Flare controller
  FlareController _controller;

  @override
  void initState() {
    super.initState();
    // Initialize the Flare controller
    _controller = FlareController();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flare Flutter Example'),
      ),
      body: Center(
        child: FlareActor(
          'assets/animation.flr',
          animation: 'animation',
          fit: BoxFit.contain,
          // Set the Flare controller
          controller: _controller,
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          // Play the animation when the button is pressed
          _controller.play('animation');
        },
        child: Icon(Icons.play_arrow),
      ),
    );
  }
}

// Application flow:
// 1. The app starts and the Flare controller is initialized.
// 2. The Flare actor is created and set to play the 'animation' animation.
// 3. The Flare actor is displayed on the screen.
// 4. When the floating action button is pressed, the Flare controller plays the 'animation' animation.
// 5. The animation is played and the Flare actor is updated accordingly.

// Summary:
// This code creates a simple Flare Flutter app that plays an animation when a button is pressed.
// The app uses a Flare controller to play the animation and a Flare actor to display the animation.
```

<-- END_MAIN -->
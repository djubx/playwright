<-- START_DESCRIPTION -->

**esc_pos_utils Flutter Package: A Comprehensive Overview**
===========================================================

The `esc_pos_utils` Flutter package is a utility library designed to simplify the process of working with ESC/POS printers in Flutter applications. ESC/POS is a widely used protocol for controlling receipt printers, and this package provides a convenient interface for sending commands to these printers.

**When to Use This Package**
---------------------------

You should use this package when you need to integrate receipt printing functionality into your Flutter app. This is particularly useful for applications in retail, hospitality, or any other industry where receipt printing is a common requirement.

**Key Features**
----------------

*   Simplifies the process of working with ESC/POS printers
*   Provides a convenient interface for sending commands to receipt printers
*   Supports a wide range of printer models
*   Easy to integrate into existing Flutter applications

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setting Up and Using the esc_pos_utils Package**
=====================================================

### Step 1: Add the Package to Your Project

To use the `esc_pos_utils` package, you need to add it to your project's `pubspec.yaml` file. Add the following line under the `dependencies` section:

```yml
dependencies:
  flutter:
    sdk: flutter
  esc_pos_utils: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:esc_pos_utils/esc_pos_utils.dart';
```

### Step 3: Create an Instance of the Printer

Create an instance of the `EscPosPrinter` class:

```dart
final printer = EscPosPrinter(
  // Set the printer's IP address or DNS name
  host: '192.168.1.100',
  // Set the printer's port number
  port: 9100,
);
```

### Step 4: Connect to the Printer

Connect to the printer using the `connect` method:

```dart
await printer.connect();
```

### Step 5: Send Commands to the Printer

Send commands to the printer using the `write` method:

```dart
final ticket = Ticket(
  // Set the ticket's content
  content: 'Hello, World!',
  // Set the ticket's encoding
  encoding: PosEncoding.codeTableDefault,
);

// Write the ticket to the printer
await printer.write(ticket);
```

### Step 6: Disconnect from the Printer

Disconnect from the printer using the `disconnect` method:

```dart
await printer.disconnect();
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:esc_pos_utils/esc_pos_utils.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'ESC/POS Printer Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _printer = EscPosPrinter(
    host: '192.168.1.100',
    port: 9100,
  );

  void _connectToPrinter() async {
    // Connect to the printer
    await _printer.connect();

    // Create a ticket
    final ticket = Ticket(
      content: 'Hello, World!',
      encoding: PosEncoding.codeTableDefault,
    );

    // Write the ticket to the printer
    await _printer.write(ticket);

    // Disconnect from the printer
    await _printer.disconnect();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('ESC/POS Printer Demo'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: _connectToPrinter,
          child: Text('Connect to Printer'),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user clicks the "Connect to Printer" button.
// 2. The _connectToPrinter method is called, which connects to the printer.
// 3. A ticket is created with the content "Hello, World!".
// 4. The ticket is written to the printer.
// 5. The printer prints the ticket.
// 6. The application disconnects from the printer.

// This code demonstrates how to use the esc_pos_utils package to connect to an ESC/POS printer and print a ticket.
```

<-- END_MAIN -->
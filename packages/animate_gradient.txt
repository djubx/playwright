<-- START_DESCRIPTION -->

# Animate Gradient Flutter Package
=====================================

The `animate_gradient` Flutter package provides a simple and efficient way to add animated gradients to your Flutter applications. It allows you to create visually appealing and dynamic backgrounds, buttons, and other UI elements.

### When to Use This Package

You can use this package when you want to add some visual flair to your app, such as:

* Creating a dynamic and engaging background for your app's home screen
* Adding a pop of color to your app's buttons and other interactive elements
* Designing a unique and eye-catching splash screen

### Features

The `animate_gradient` package comes with the following features:

* Support for linear and radial gradients
* Customizable animation duration and direction
* Support for multiple colors and color stops
* Easy integration with existing Flutter widgets

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Animate Gradient Package
=============================================

To use the `animate_gradient` package in your Flutter app, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  animate_gradient: ^1.0.0
```
Then, run `flutter pub get` in your terminal to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:animate_gradient/animate_gradient.dart';
```
### Step 3: Use the AnimateGradient Widget

Use the `AnimateGradient` widget to create an animated gradient:
```dart
AnimateGradient(
  colors: [Colors.blue, Colors.red],
  duration: Duration(seconds: 5),
  child: Container(
    width: 200,
    height: 200,
  ),
)
```
This will create a linear gradient that animates between blue and red over a period of 5 seconds.

### Platform-Specific Details

The `animate_gradient` package works on both Android and iOS platforms. However, you may need to adjust the animation duration and direction to achieve the desired effect on each platform.

### Configurations and Optimizations

You can customize the animation by adjusting the `duration`, `direction`, and `colors` properties. You can also use the `stops` property to specify the color stops for the gradient.

To optimize performance, you can use the `cached` property to cache the animation. This can improve performance on low-end devices.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:animate_gradient/animate_gradient.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Animate Gradient Demo',
      home: AnimateGradientDemo(),
    );
  }
}

class AnimateGradientDemo extends StatefulWidget {
  @override
  _AnimateGradientDemoState createState() => _AnimateGradientDemoState();
}

class _AnimateGradientDemoState extends State<AnimateGradientDemo> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Animate Gradient Demo'),
      ),
      body: Center(
        child: AnimateGradient(
          // Define the colors for the gradient
          colors: [Colors.blue, Colors.red, Colors.yellow],
          // Define the duration of the animation
          duration: Duration(seconds: 10),
          // Define the direction of the animation
          direction: AnimateGradientDirection.horizontal,
          // Define the color stops for the gradient
          stops: [0.1, 0.5, 0.9],
          // Cache the animation to improve performance
          cached: true,
          // Define the child widget
          child: Container(
            width: 300,
            height: 300,
            child: Center(
              child: Text(
                'Animate Gradient Demo',
                style: TextStyle(fontSize: 24),
              ),
            ),
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app and the AnimateGradientDemo widget is displayed.
// 2. The AnimateGradient widget is used to create an animated gradient.
// 3. The colors, duration, direction, and stops properties are defined to customize the animation.
// 4. The cached property is set to true to improve performance.
// 5. The child widget is defined as a Container with a Text widget.
// 6. The animation is displayed on the screen and the user can interact with it.
// 7. The animation is cached to improve performance on low-end devices.

// In summary, the code flows as follows:
// 1. The user runs the app and the AnimateGradientDemo widget is displayed.
// 2. The AnimateGradient widget is used to create an animated gradient.
// 3. The animation is customized using the colors, duration, direction, and stops properties.
// 4. The animation is cached to improve performance.
// 5. The animation is displayed on the screen and the user can interact with it.

```

<-- END_MAIN -->
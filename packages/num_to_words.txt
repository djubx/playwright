```markdown
<!-- START_DESCRIPTION -->
# num_to_words Flutter Package

The `num_to_words` package is a powerful utility for converting numerical values into their corresponding word representations. This package is particularly useful in applications that require displaying numbers in a more human-readable format, such as financial applications, educational tools, or any app that needs to present numbers in a narrative style.

## When to Use This Package
- **Financial Applications**: Displaying amounts in words for invoices or receipts.
- **Educational Tools**: Helping students learn number representations.
- **Games**: Converting scores or points into words for better readability.

## Features
- **Supports Multiple Languages**: The package can convert numbers into words in various languages.
- **Customizable**: You can customize the output format to suit your needs.
- **Handles Large Numbers**: Capable of converting very large numbers into words.

Overall, `num_to_words` is a versatile package that can enhance the user experience by making numerical data more accessible and understandable.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using num_to_words

## Installation
To use the `num_to_words` package in your Flutter project, you need to add it to your `pubspec.yaml` file. Open the file and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  num_to_words: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command in your terminal to install the package:

```bash
flutter pub get
```

## Platform-Specific Details
The `num_to_words` package is designed to work seamlessly on both Android and iOS platforms. There are no additional configurations required for either platform, making it easy to integrate into your Flutter application.

## Basic Usage
To use the `num_to_words` package, you need to import it into your Dart file:

```dart
import 'package:num_to_words/num_to_words.dart';
```

You can then use the `NumberToWords` class to convert numbers to words. Hereâ€™s a simple example:

```dart
void main() {
  int number = 12345;
  String words = NumberToWords.convert(number);
  print(words); // Outputs: "twelve thousand three hundred forty five"
}
```

This basic setup allows you to convert any integer into its word representation easily.

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of num_to_words in a Flutter Application

```dart
import 'package:flutter/material.dart';
import 'package:num_to_words/num_to_words.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Number to Words Example',
      home: NumberToWordsScreen(),
    );
  }
}

class NumberToWordsScreen extends StatefulWidget {
  @override
  _NumberToWordsScreenState createState() => _NumberToWordsScreenState();
}

class _NumberToWordsScreenState extends State<NumberToWordsScreen> {
  final TextEditingController _controller = TextEditingController();
  String _result = '';

  // Function to convert number to words
  void _convertNumber() {
    // Parse the input number from the text field
    int? number = int.tryParse(_controller.text);
    if (number != null) {
      // Convert the number to words using the package
      setState(() {
        _result = NumberToWords.convert(number);
      });
    } else {
      // Handle invalid input
      setState(() {
        _result = 'Please enter a valid number';
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Number to Words Converter'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            TextField(
              controller: _controller,
              decoration: InputDecoration(
                labelText: 'Enter a number',
              ),
              keyboardType: TextInputType.number,
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _convertNumber,
              child: Text('Convert to Words'),
            ),
            SizedBox(height: 20),
            Text(
              'Result: $_result',
              style: TextStyle(fontSize: 20),
            ),
          ],
        ),
      ),
    );
  }
}
```

```
// The application starts with the main function, which runs the RealFlutter widget.
// RealFlutter is a StatelessWidget that sets up the MaterialApp with a title and home screen.
// The home screen is NumberToWordsScreen, which is a StatefulWidget to manage state.
// Inside NumberToWordsScreen, we have a TextEditingController to capture user input.
// The _convertNumber function is called when the button is pressed.
// It attempts to parse the input from the text field into an integer.
// If successful, it converts the number to words using NumberToWords.convert and updates the result.
// If the input is invalid, it sets an error message.
// The UI consists of a TextField for input, a button to trigger conversion, and a Text widget to display the result.
```
<!-- END_MAIN -->
``` 

In summary, this blog post provides a comprehensive overview of the `num_to_words` Flutter package, including its features, installation, and usage. The complete example demonstrates how to create a simple Flutter application that converts numbers to words, making it easy for developers to integrate this functionality into their own projects.
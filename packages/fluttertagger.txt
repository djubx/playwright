<-- START_DESCRIPTION -->

# FlutterTagger Package Overview
=====================================

The FlutterTagger package is a powerful tool for adding tags to images in Flutter applications. It provides a simple and intuitive way to allow users to select and tag specific areas of an image.

### When to Use FlutterTagger

FlutterTagger is perfect for applications that require image annotation, such as:

* Image classification and object detection models
* Medical imaging applications
* Social media platforms with image tagging features

### Key Features

* Support for multiple tag types (e.g., text, icons, colors)
* Customizable tag appearance and behavior
* Easy integration with existing Flutter applications

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up FlutterTagger
==========================

To use FlutterTagger in your Flutter application, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_tagger: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

In your Dart file, import the FlutterTagger package:
```dart
import 'package:flutter_tagger/flutter_tagger.dart';
```
### Step 3: Create a Tagger Instance

Create a new instance of the `Tagger` class, passing in the image you want to tag:
```dart
Tagger _tagger = Tagger(image: Image.asset('assets/image.jpg'));
```
### Platform-Specific Details

* On Android, you may need to add the following line to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
```
* On iOS, you may need to add the following line to your `Info.plist` file:
```xml
<key>NSPhotoLibraryUsageDescription</key>
<string>This app needs access to your photo library to tag images.</string>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_tagger/flutter_tagger.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Tagger Demo',
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  Tagger _tagger;

  @override
  void initState() {
    super.initState();
    _tagger = Tagger(image: Image.asset('assets/image.jpg'));
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Tagger Demo'),
      ),
      body: Center(
        child: _tagger,
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () async {
          // Get the tagged image
          final taggedImage = await _tagger.getTaggedImage();

          // Display the tagged image
          Navigator.push(
            context,
            MaterialPageRoute(builder: (context) => TaggedImageScreen(taggedImage)),
          );
        },
        tooltip: 'Get Tagged Image',
        child: Icon(Icons.tag),
      ),
    );
  }
}

class TaggedImageScreen extends StatelessWidget {
  final Image taggedImage;

  TaggedImageScreen(this.taggedImage);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Tagged Image'),
      ),
      body: Center(
        child: taggedImage,
      ),
    );
  }
}
```

// This is the main entry point of the application.
// The RealFlutter widget is the root of the application.
// It creates a new instance of the Tagger class and displays it in the center of the screen.
// When the floating action button is pressed, it gets the tagged image from the Tagger instance and displays it in a new screen.

// The application flow is as follows:
// 1. The user interacts with the Tagger instance to add tags to the image.
// 2. When the user presses the floating action button, the application gets the tagged image from the Tagger instance.
// 3. The application displays the tagged image in a new screen.

<-- END_MAIN -->
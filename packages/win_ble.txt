```markdown
<-- START_DESCRIPTION -->

# Overview of the `win_ble` Flutter Package

The `win_ble` Flutter package is a powerful tool designed to facilitate Bluetooth Low Energy (BLE) communication in Flutter applications. This package is particularly useful for developers looking to integrate BLE functionalities into their apps, enabling them to connect to BLE devices, read and write data, and receive notifications from BLE peripherals.

## When to Use `win_ble`

- **IoT Applications**: Ideal for applications that need to interact with IoT devices such as smartwatches, fitness trackers, or home automation systems.
- **Healthcare Apps**: Useful for apps that connect to medical devices like heart rate monitors or glucose meters.
- **Proximity Marketing**: Can be used in retail apps to interact with BLE beacons for location-based marketing.

## Key Features

- **Cross-Platform Support**: Works seamlessly on both Android and iOS platforms.
- **Device Discovery**: Allows scanning and discovering nearby BLE devices.
- **Data Communication**: Supports reading and writing data to BLE devices.
- **Notifications**: Enables receiving real-time updates from connected devices.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the `win_ble` Package

In this section, we will walk through the setup process for the `win_ble` package and demonstrate how to use it in a Flutter application.

## Installation

Add the `win_ble` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  win_ble: ^1.0.0
```

Run `flutter pub get` to install the package.

## Platform-Specific Setup

### Android

1. **Permissions**: Add the following permissions to your `AndroidManifest.xml`:

   ```xml
   <uses-permission android:name="android.permission.BLUETOOTH" />
   <uses-permission android:name="android.permission.BLUETOOTH_ADMIN" />
   <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
   ```

2. **Bluetooth Features**: Ensure your app declares Bluetooth features:

   ```xml
   <uses-feature android:name="android.hardware.bluetooth_le" android:required="true" />
   ```

### iOS

1. **Permissions**: Add the following keys to your `Info.plist`:

   ```xml
   <key>NSBluetoothAlwaysUsageDescription</key>
   <string>We need your permission to use Bluetooth</string>
   <key>NSLocationWhenInUseUsageDescription</key>
   <string>We need your location to find nearby devices</string>
   ```

2. **Background Modes**: Enable Bluetooth background modes if needed.

## Using the Package

1. **Import the Package**:

   ```dart
   import 'package:win_ble/win_ble.dart';
   ```

2. **Initialize the BLE Manager**:

   ```dart
   final RealFlutter bleManager = RealFlutter();
   ```

3. **Scan for Devices**:

   ```dart
   bleManager.startScan().listen((device) {
     print('Discovered device: ${device.name}');
   });
   ```

4. **Connect to a Device**:

   ```dart
   bleManager.connectToDevice(deviceId).then((_) {
     print('Connected to device');
   });
   ```

5. **Read and Write Characteristics**:

   ```dart
   bleManager.readCharacteristic(deviceId, characteristicId).then((value) {
     print('Read value: $value');
   });

   bleManager.writeCharacteristic(deviceId, characteristicId, value).then((_) {
     print('Value written');
   });
   ```

<-- END_TUTORIAL -->

<-- START_MAIN -->

# Complete Example of Using `win_ble`

Below is a complete Flutter application demonstrating the use of the `win_ble` package.

```dart
import 'package:flutter/material.dart';
import 'package:win_ble/win_ble.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'BLE Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: BLEHomePage(),
    );
  }
}

class BLEHomePage extends StatefulWidget {
  @override
  _BLEHomePageState createState() => _BLEHomePageState();
}

class _BLEHomePageState extends State<BLEHomePage> {
  final RealFlutter bleManager = RealFlutter();
  List<BleDevice> devices = [];

  @override
  void initState() {
    super.initState();
    _startScan();
  }

  void _startScan() {
    // Start scanning for BLE devices
    bleManager.startScan().listen((device) {
      setState(() {
        devices.add(device);
      });
    });
  }

  void _connectToDevice(String deviceId) {
    // Connect to the selected BLE device
    bleManager.connectToDevice(deviceId).then((_) {
      print('Connected to device: $deviceId');
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('BLE Devices'),
      ),
      body: ListView.builder(
        itemCount: devices.length,
        itemBuilder: (context, index) {
          final device = devices[index];
          return ListTile(
            title: Text(device.name ?? 'Unknown Device'),
            subtitle: Text(device.id),
            onTap: () => _connectToDevice(device.id),
          );
        },
      ),
    );
  }
}
```

// The application starts by initializing the `RealFlutter` BLE manager.
// In the `initState` method, it begins scanning for nearby BLE devices.
// Discovered devices are added to a list and displayed in a `ListView`.
// Tapping on a device in the list attempts to connect to it using the `connectToDevice` method.
// The app displays the name and ID of each discovered device, allowing users to select and connect to them.

<-- END_MAIN -->
```
```markdown
<!-- START_DESCRIPTION -->
# Notus Format: A Comprehensive Overview

The **notus_format** package is a powerful tool for Flutter developers looking to implement rich text editing capabilities in their applications. It is built on top of the Notus document model, which is designed to handle complex text structures, including formatting, links, and embedded content. This package is particularly useful for applications that require user-generated content, such as blogs, note-taking apps, or any platform where rich text input is necessary.

## Key Features
- **Rich Text Formatting**: Supports various text styles, including bold, italic, underline, and more.
- **Document Structure**: Allows for hierarchical document structures, making it easy to manage complex content.
- **Custom Embeds**: You can embed images, videos, and other media types directly into the text.
- **Serialization**: Easily convert documents to and from JSON format for storage or transmission.
- **Collaboration**: Supports collaborative editing features, making it suitable for multi-user applications.

## When to Use
- When building applications that require rich text input from users.
- For note-taking applications where users can format their notes.
- In blogging platforms where users can create and edit posts with various formatting options.

Overall, the notus_format package provides a robust solution for developers looking to enhance their Flutter applications with rich text editing capabilities.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Notus Format: Setup and Usage Tutorial

In this section, we will walk through the setup process for the notus_format package and demonstrate how to use it in a Flutter application.

## Installation

To get started, you need to add the notus_format package to your Flutter project. Open your `pubspec.yaml` file and add the following dependency:

```yaml
dependencies:
  flutter:
    sdk: flutter
  notus_format: ^latest_version
```

Make sure to replace `^latest_version` with the latest version available on [pub.dev](https://pub.dev/packages/notus_format).

After adding the dependency, run the following command to install it:

```bash
flutter pub get
```

## Platform-Specific Configuration

### Android
For Android, ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file:

```gradle
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
        ...
    }
}
```

### iOS
For iOS, you may need to enable certain permissions in your `Info.plist` file, especially if you plan to use features like image embedding. Add the following keys if necessary:

```xml
<key>NSPhotoLibraryUsageDescription</key>
<string>We need access to your photo library to embed images.</string>
```

## Basic Usage

Now that we have set up the package, let's create a simple rich text editor using the notus_format package.

1. Import the package in your Dart file:

```dart
import 'package:flutter/material.dart';
import 'package:notus_format/notus_format.dart';
```

2. Create a basic Flutter application that utilizes the Notus document model.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
```dart
import 'package:flutter/material.dart';
import 'package:notus_format/notus_format.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Notus Format Example',
      home: RichTextEditor(),
    );
  }
}

class RichTextEditor extends StatefulWidget {
  @override
  _RichTextEditorState createState() => _RichTextEditorState();
}

class _RichTextEditorState extends State<RichTextEditor> {
  // Create a Notus document to hold the text
  NotusDocument _document = NotusDocument();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Rich Text Editor'),
      ),
      body: Column(
        children: [
          // Display the rich text editor
          Expanded(
            child: NotusEditor(
              document: _document,
              onChanged: (document) {
                // Update the document when changes are made
                setState(() {
                  _document = document;
                });
              },
            ),
          ),
          // Button to serialize the document to JSON
          ElevatedButton(
            onPressed: () {
              // Convert the document to JSON and print it
              print(_document.toJson());
            },
            child: Text('Save Document'),
          ),
        ],
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function initializes the app and runs the RealFlutter widget.
// 2. RealFlutter builds a MaterialApp with a title and sets RichTextEditor as the home widget.
// 3. RichTextEditor is a stateful widget that manages a NotusDocument.
// 4. The NotusEditor widget displays the rich text editor interface.
// 5. When the user makes changes, the onChanged callback updates the _document state.
// 6. The "Save Document" button serializes the current document to JSON and prints it to the console.
```
<!-- END_MAIN -->
```

### Summary
In this blog post, we explored the **notus_format** package, detailing its features, installation process, and usage in a Flutter application. The provided example demonstrates how to create a simple rich text editor, allowing users to input and format text while also providing functionality to serialize the document to JSON. This package is ideal for applications that require rich text editing capabilities, making it a valuable addition to any Flutter developer's toolkit.
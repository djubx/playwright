<-- START_DESCRIPTION -->

# AES256GCM Flutter Package
================================

The `aes256gcm` Flutter package provides a simple and secure way to encrypt and decrypt data using the AES-256-GCM algorithm. This package is ideal for protecting sensitive data, such as user credentials, credit card numbers, and personal identifiable information.

## Features

*   AES-256-GCM encryption and decryption
*   Support for both Android and iOS platforms
*   Easy-to-use API for encrypting and decrypting data

## When to Use

Use the `aes256gcm` package when you need to protect sensitive data in your Flutter application. This package is particularly useful when:

*   Storing user credentials or authentication tokens
*   Protecting credit card numbers or financial information
*   Encrypting personal identifiable information (PII)

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Using the AES256GCM Package
=====================================

## Step 1: Add the Package to Your Project

Add the `aes256gcm` package to your `pubspec.yaml` file:
```yml
dependencies:
  aes256gcm: ^1.0.0
```
Then, run `flutter pub get` to install the package.

## Step 2: Import the Package

Import the `aes256gcm` package in your Dart file:
```dart
import 'package:aes256gcm/aes256gcm.dart';
```
## Step 3: Generate a Secret Key

Generate a secret key for encryption and decryption:
```dart
final secretKey = await Aes256Gcm.generateKey();
```
## Step 4: Encrypt Data

Encrypt your data using the `encrypt` method:
```dart
final encryptedData = await Aes256Gcm.encrypt(
  data: 'Hello, World!',
  secretKey: secretKey,
);
```
## Step 5: Decrypt Data

Decrypt your data using the `decrypt` method:
```dart
final decryptedData = await Aes256Gcm.decrypt(
  encryptedData: encryptedData,
  secretKey: secretKey,
);
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:aes256gcm/aes256gcm.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'AES256GCM Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _dataController = TextEditingController();
  final _secretKeyController = TextEditingController();
  String _encryptedData = '';
  String _decryptedData = '';

  // Step 1: Generate a secret key
  Future<void> _generateSecretKey() async {
    final secretKey = await Aes256Gcm.generateKey();
    _secretKeyController.text = secretKey;
  }

  // Step 2: Encrypt data
  Future<void> _encryptData() async {
    final encryptedData = await Aes256Gcm.encrypt(
      data: _dataController.text,
      secretKey: _secretKeyController.text,
    );
    setState(() {
      _encryptedData = encryptedData;
    });
  }

  // Step 3: Decrypt data
  Future<void> _decryptData() async {
    final decryptedData = await Aes256Gcm.decrypt(
      encryptedData: _encryptedData,
      secretKey: _secretKeyController.text,
    );
    setState(() {
      _decryptedData = decryptedData;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('AES256GCM Example'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Column(
          children: [
            TextField(
              controller: _dataController,
              decoration: InputDecoration(
                labelText: 'Data to Encrypt',
              ),
            ),
            SizedBox(height: 20),
            TextField(
              controller: _secretKeyController,
              decoration: InputDecoration(
                labelText: 'Secret Key',
              ),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _generateSecretKey,
              child: Text('Generate Secret Key'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _encryptData,
              child: Text('Encrypt Data'),
            ),
            SizedBox(height: 20),
            Text('Encrypted Data: $_encryptedData'),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _decryptData,
              child: Text('Decrypt Data'),
            ),
            SizedBox(height: 20),
            Text('Decrypted Data: $_decryptedData'),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user enters the data to encrypt in the text field.
// 2. The user generates a secret key by clicking the "Generate Secret Key" button.
// 3. The user encrypts the data by clicking the "Encrypt Data" button.
// 4. The encrypted data is displayed on the screen.
// 5. The user decrypts the data by clicking the "Decrypt Data" button.
// 6. The decrypted data is displayed on the screen.

// This example demonstrates the basic usage of the AES256GCM package.
// It shows how to generate a secret key, encrypt data, and decrypt data.
```

<-- END_MAIN -->
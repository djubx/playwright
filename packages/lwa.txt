<-- START_DESCRIPTION -->

# Introduction to the lwa Flutter Package
=====================================

The `lwa` Flutter package is a powerful tool for building apps that require login functionality. It provides a simple and secure way to manage user authentication, making it an ideal choice for developers who want to focus on building their app's core features.

## When to Use the lwa Package
---------------------------

You should consider using the `lwa` package in the following scenarios:

* You need to implement login functionality in your app.
* You want to provide a secure way for users to authenticate themselves.
* You need to manage user sessions and tokens.

## Features of the lwa Package
---------------------------

The `lwa` package provides the following features:

* Secure login functionality using OAuth 2.0.
* Support for multiple authentication providers (e.g., Google, Facebook, Apple).
* Automatic token refresh and revocation.
* Customizable login UI.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the lwa Package
==========================

To use the `lwa` package in your Flutter app, follow these steps:

### Step 1: Add the lwa Package to Your pubspec.yaml File

```yml
dependencies:
  flutter:
    sdk: flutter
  lwa: ^1.0.0
```

### Step 2: Import the lwa Package in Your Dart File

```dart
import 'package:flutter/material.dart';
import 'package:lwa/lwa.dart';
```

### Step 3: Initialize the lwa Package

```dart
void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'LWA Demo',
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  void initState() {
    super.initState();
    LWA.initialize(
      clientId: 'YOUR_CLIENT_ID',
      clientSecret: 'YOUR_CLIENT_SECRET',
      redirectUri: 'YOUR_REDIRECT_URI',
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('LWA Demo'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () async {
            await LWA.login();
          },
          child: Text('Login'),
        ),
      ),
    );
  }
}
```

### Platform-Specific Details

* Android: Add the following code to your `AndroidManifest.xml` file:
```xml
<activity
  android:name="com.example.lwa.LWAActivity"
  android:exported="true"
  android:launchMode="singleTask">
  <intent-filter>
    <action android:name="android.intent.action.VIEW" />
    <category android:name="android.intent.category.DEFAULT" />
    <category android:name="android.intent.category.BROWSABLE" />
    <data android:scheme="YOUR_REDIRECT_URI_SCHEME" />
  </intent-filter>
</activity>
```
* iOS: Add the following code to your `Info.plist` file:
```xml
<key>CFBundleURLTypes</key>
<array>
  <dict>
    <key>CFBundleURLSchemes</key>
    <array>
      <string>YOUR_REDIRECT_URI_SCHEME</string>
    </array>
  </dict>
</array>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:lwa/lwa.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'LWA Demo',
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  void initState() {
    super.initState();
    LWA.initialize(
      clientId: 'YOUR_CLIENT_ID',
      clientSecret: 'YOUR_CLIENT_SECRET',
      redirectUri: 'YOUR_REDIRECT_URI',
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('LWA Demo'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () async {
            // 1. Login using LWA
            await LWA.login();

            // 2. Get the access token
            String accessToken = await LWA.getAccessToken();

            // 3. Use the access token to make API calls
            // Replace with your own API call
            print('Access Token: $accessToken');

            // 4. Refresh the access token when it expires
            String refreshToken = await LWA.getRefreshToken();
            print('Refresh Token: $refreshToken');

            // 5. Revoke the access token when the user logs out
            await LWA.revokeAccessToken();
          },
          child: Text('Login'),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user clicks the login button, which triggers the LWA login process.
// 2. The LWA login process redirects the user to the authentication provider's login page.
// 3. The user enters their credentials and grants access to the app.
// 4. The authentication provider redirects the user back to the app with an authorization code.
// 5. The app exchanges the authorization code for an access token.
// 6. The app uses the access token to make API calls.
// 7. When the access token expires, the app refreshes it using the refresh token.
// 8. When the user logs out, the app revokes the access token.

// This code demonstrates the key features of the LWA package, including login, access token management, and refresh token management.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Custom Pointed Popup Flutter Package
=====================================

The `custom_pointed_popup` Flutter package is a customizable popup package that allows developers to create pointed popups with ease. It provides a simple and intuitive API for creating popups with a pointed tip, which can be used to indicate the source of the popup.

### When to Use This Package

This package is useful when you want to create a popup that needs to point to a specific element on the screen, such as a button or an icon. It's commonly used in scenarios like:

* Tooltip popups
* Context menus
* Info popups

### Features

* Customizable popup shape and size
* Adjustable tip size and position
* Supports both vertical and horizontal orientations
* Can be used with any widget as the popup content

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Using the Custom Pointed Popup Package
=============================================

### Step 1: Add the Package to Your Project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  custom_pointed_popup: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:custom_pointed_popup/custom_pointed_popup.dart';
```
### Step 3: Create a Popup

Create a popup using the `CustomPointedPopup` widget:
```dart
CustomPointedPopup(
  child: Text('Hello, World!'),
  tipSize: 10,
  tipPosition: TipPosition.top,
)
```
### Platform-Specific Details

* On Android, the popup will be displayed above the anchor widget by default. To display it below the anchor, set `tipPosition` to `TipPosition.bottom`.
* On iOS, the popup will be displayed centered horizontally by default. To display it at a specific position, set `tipPosition` to `TipPosition.left` or `TipPosition.right`.

### Required Configurations

* Make sure to wrap your app with a `MaterialApp` or `CupertinoApp` to use this package.
* If you're using a `CustomPointedPopup` inside a `ListView` or `GridView`, make sure to set `shrinkWrap` to `true` to avoid layout issues.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:custom_pointed_popup/custom_pointed_popup.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Custom Pointed Popup Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Custom Pointed Popup Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            ElevatedButton(
              onPressed: () {
                showCustomPointedPopup(
                  context: context,
                  child: Text('Hello, World!'),
                  tipSize: 10,
                  tipPosition: TipPosition.top,
                );
              },
              child: Text('Show Popup'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                showCustomPointedPopup(
                  context: context,
                  child: Text('Hello, World!'),
                  tipSize: 10,
                  tipPosition: TipPosition.bottom,
                );
              },
              child: Text('Show Popup (Bottom)'),
            ),
          ],
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user presses the "Show Popup" button.
// 2. The `showCustomPointedPopup` function is called with the context, child, tip size, and tip position.
// 3. The `CustomPointedPopup` widget is created and displayed above the anchor widget (in this case, the button).
// 4. The popup is displayed with the specified tip size and position.
// 5. The user can dismiss the popup by tapping outside of it.
```

// Summary: This code demonstrates the usage of the `custom_pointed_popup` package to display a customizable popup with a pointed tip. The popup can be displayed above or below the anchor widget, and the tip size and position can be adjusted. The code also shows how to use the `showCustomPointedPopup` function to display the popup.

<-- END_MAIN -->
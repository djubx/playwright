<-- START_DESCRIPTION -->

Horizontal Blocked Scroll Physics Flutter Package
=====================================================

Overview
--------

The `horizontal_blocked_scroll_physics` Flutter package is designed to provide a custom scroll physics that blocks horizontal scrolling when a certain condition is met. This package is useful when you want to prevent users from scrolling horizontally in a `ListView` or `GridView` under certain circumstances.

Features
--------

*   Blocks horizontal scrolling when a condition is met
*   Works with both `ListView` and `GridView`
*   Customizable condition to block scrolling

Examples
--------

*   Blocking horizontal scrolling when a user is typing in a `TextField` inside a `ListView`
*   Preventing horizontal scrolling when a certain item is being edited in a `GridView`

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Tutorial
--------

### Setup

To use the `horizontal_blocked_scroll_physics` package, add it to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  horizontal_blocked_scroll_physics: ^1.0.0
```

Then, run `flutter pub get` to get the package.

### Usage

To use the package, create a `RealFlutter` class that extends `StatelessWidget`:

```dart
import 'package:flutter/material.dart';
import 'package:horizontal_blocked_scroll_physics/horizontal_blocked_scroll_physics.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: ListView(
        physics: HorizontalBlockedScrollPhysics(
          // Condition to block scrolling
          shouldBlock: (scrollPosition) => scrollPosition > 100,
        ),
        children: [
          // Your widgets here
        ],
      ),
    );
  }
}
```

In the above example, the `HorizontalBlockedScrollPhysics` is used to block horizontal scrolling when the scroll position is greater than 100.

### Platform-Specific Details

*   Android: No additional configuration is required.
*   iOS: No additional configuration is required.

### Optimizations

*   To improve performance, make sure to use the `shouldBlock` condition wisely, as it will be called frequently during scrolling.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:horizontal_blocked_scroll_physics/horizontal_blocked_scroll_physics.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Horizontal Blocked Scroll Physics Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  bool _shouldBlock = false;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Horizontal Blocked Scroll Physics Demo'),
      ),
      body: ListView(
        physics: HorizontalBlockedScrollPhysics(
          // Condition to block scrolling
          shouldBlock: (scrollPosition) => _shouldBlock,
        ),
        children: [
          // Button to toggle blocking
          ElevatedButton(
            onPressed: () {
              setState(() {
                _shouldBlock = !_shouldBlock;
              });
            },
            child: Text(_shouldBlock ? 'Unblock' : 'Block'),
          ),
          // Your widgets here
          Container(
            height: 100,
            color: Colors.red,
          ),
          Container(
            height: 100,
            color: Colors.blue,
          ),
          Container(
            height: 100,
            color: Colors.green,
          ),
        ],
      ),
    );
  }
}

// Application flow:
// 1. The user runs the app and sees a list of widgets.
// 2. The user can scroll the list horizontally.
// 3. When the user presses the 'Block' button, the list stops scrolling horizontally.
// 4. When the user presses the 'Unblock' button, the list starts scrolling horizontally again.
// This demonstrates the usage of the HorizontalBlockedScrollPhysics package to block horizontal scrolling based on a condition.

// Summary:
// The code creates a RealFlutter class that extends StatefulWidget.
// It uses the HorizontalBlockedScrollPhysics package to block horizontal scrolling based on a condition.
// The condition is toggled by a button press.
// The application flow demonstrates the usage of the package to block and unblock horizontal scrolling.

```

<-- END_MAIN -->
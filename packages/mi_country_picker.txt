```markdown
<-- START_DESCRIPTION -->

# mi_country_picker Flutter Package

The `mi_country_picker` Flutter package is a versatile tool designed to simplify the process of selecting countries within a Flutter application. This package provides a user-friendly interface for users to pick a country from a list, which can be particularly useful in applications that require country selection for purposes such as setting user preferences, filling out forms, or configuring international settings.

## When to Use

- **User Registration**: When users need to select their country during the registration process.
- **Profile Settings**: Allow users to update their country information in their profile settings.
- **Localization**: Applications that offer services in multiple countries can use this package to let users select their preferred country.

## Features

- **Search Functionality**: Users can search for a country by name.
- **Customizable UI**: The package allows customization of the country list's appearance to match the app's theme.
- **Flag Display**: Displays the flag of each country alongside its name.
- **Locale Support**: Supports multiple locales, making it adaptable for international applications.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using mi_country_picker

In this tutorial, we will walk through the process of setting up and using the `mi_country_picker` package in a Flutter application. We will cover platform-specific configurations for both Android and iOS.

## Setup Process

### Step 1: Add Dependency

Add the `mi_country_picker` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  mi_country_picker: ^1.0.0
```

Run `flutter pub get` to install the package.

### Step 2: Android Configuration

For Android, ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```gradle
android {
    defaultConfig {
        minSdkVersion 21
    }
}
```

### Step 3: iOS Configuration

For iOS, ensure that your `ios/Podfile` has platform set to at least 11.0:

```ruby
platform :ios, '11.0'
```

Run `pod install` in the `ios` directory to update the CocoaPods dependencies.

## Using the Package

To use the `mi_country_picker` package, import it into your Dart file:

```dart
import 'package:mi_country_picker/mi_country_picker.dart';
```

### Basic Usage

Here's a simple example of how to use the package within a widget:

```dart
CountryPicker(
  onSelect: (Country country) {
    print('Selected country: ${country.name}');
  },
)
```

This widget will display a list of countries, and when a user selects one, it will print the selected country's name.

<-- END_TUTORIAL -->

<-- START_MAIN -->

# Complete Example: Flutter Main File

Below is a complete example of a Flutter application using the `mi_country_picker` package. This example demonstrates all key features of the package.

```dart
import 'package:flutter/material.dart';
import 'package:mi_country_picker/mi_country_picker.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Country Picker Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: CountryPickerPage(),
    );
  }
}

class CountryPickerPage extends StatefulWidget {
  @override
  _CountryPickerPageState createState() => _CountryPickerPageState();
}

class _CountryPickerPageState extends State<CountryPickerPage> {
  Country? _selectedCountry;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Select a Country'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            // Display the selected country
            if (_selectedCountry != null)
              Text(
                'Selected Country: ${_selectedCountry!.name}',
                style: TextStyle(fontSize: 20),
              ),
            SizedBox(height: 20),
            // Button to open the country picker
            ElevatedButton(
              onPressed: () {
                // Open the country picker dialog
                showCountryPicker(
                  context: context,
                  onSelect: (Country country) {
                    // Update the state with the selected country
                    setState(() {
                      _selectedCountry = country;
                    });
                  },
                );
              },
              child: Text('Pick a Country'),
            ),
          ],
        ),
      ),
    );
  }
}
```

// Application Flow Explanation
// 1. The `RealFlutter` class is the main entry point of the application, setting up the MaterialApp.
// 2. The `CountryPickerPage` is a stateful widget that manages the state of the selected country.
// 3. The `_CountryPickerPageState` class contains the UI and logic for displaying the country picker.
// 4. When the "Pick a Country" button is pressed, the `showCountryPicker` function is called, opening a dialog.
// 5. The user selects a country, triggering the `onSelect` callback, which updates the `_selectedCountry` state.
// 6. The selected country's name is displayed on the screen.

<-- END_MAIN -->
```

This blog post provides a comprehensive guide to using the `mi_country_picker` package in Flutter, from setup to implementation, with a complete example to demonstrate its capabilities.
<-- START_DESCRIPTION -->

# Aligned Tooltip Flutter Package
=====================================

The `aligned_tooltip` Flutter package is a powerful tool for creating customizable tooltips in your Flutter applications. It provides a simple and easy-to-use API for displaying tooltips that can be aligned to specific widgets or positions on the screen.

### When to Use

The `aligned_tooltip` package is useful when you need to provide additional information or context to the user about a specific element on the screen. This can be particularly useful in situations such as:

* Providing explanations for complex UI elements
* Displaying additional information about a specific item in a list
* Creating interactive tutorials or guides

### Features

The `aligned_tooltip` package provides a range of features, including:

* Customizable tooltip alignment (top, bottom, left, right, etc.)
* Support for multiple tooltip styles (e.g. material, cupertino)
* Ability to specify a custom tooltip child widget
* Support for tooltip animation

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
=====================

To use the `aligned_tooltip` package, follow these steps:

### Step 1: Add the Package to Your Pubspec

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  aligned_tooltip: ^1.0.0
```
Then run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:aligned_tooltip/aligned_tooltip.dart';
```
### Step 3: Create a Tooltip

Create a tooltip using the `AlignedTooltip` widget:
```dart
AlignedTooltip(
  child: Text('Hover me!'),
  tooltip: Text('This is a tooltip!'),
  alignment: Alignment.topCenter,
)
```
This will create a tooltip that appears above the `Text` widget when it is hovered.

### Platform-Specific Details

* On Android, the tooltip will be displayed using the default Android tooltip style.
* On iOS, the tooltip will be displayed using the default iOS tooltip style.

### Configurations and Optimizations

* You can customize the tooltip style by passing a `TooltipStyle` object to the `AlignedTooltip` constructor.
* You can specify a custom animation duration by passing a `Duration` object to the `AlignedTooltip` constructor.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:aligned_tooltip/aligned_tooltip.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Aligned Tooltip Demo',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Aligned Tooltip Demo'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              // Create a tooltip that appears above the text
              AlignedTooltip(
                child: Text('Hover me!'),
                tooltip: Text('This is a tooltip!'),
                alignment: Alignment.topCenter,
              ),
              SizedBox(height: 20),
              // Create a tooltip that appears below the text
              AlignedTooltip(
                child: Text('Hover me!'),
                tooltip: Text('This is a tooltip!'),
                alignment: Alignment.bottomCenter,
              ),
              SizedBox(height: 20),
              // Create a tooltip that appears to the left of the text
              AlignedTooltip(
                child: Text('Hover me!'),
                tooltip: Text('This is a tooltip!'),
                alignment: Alignment.centerLeft,
              ),
              SizedBox(height: 20),
              // Create a tooltip that appears to the right of the text
              AlignedTooltip(
                child: Text('Hover me!'),
                tooltip: Text('This is a tooltip!'),
                alignment: Alignment.centerRight,
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user hovers over the text "Hover me!".
// 2. The AlignedTooltip widget detects the hover event and displays the tooltip.
// 3. The tooltip is displayed at the specified alignment (e.g. above, below, left, right).
// 4. The user can then view the tooltip and understand the context of the text.
// 5. When the user stops hovering over the text, the tooltip is hidden.

// This demo showcases the basic usage of the AlignedTooltip widget and its customization options.
// You can modify the alignment, tooltip style, and animation duration to suit your needs.
```

<-- END_MAIN -->
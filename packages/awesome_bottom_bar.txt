<-- START_DESCRIPTION -->

# Awesome Bottom Bar Flutter Package
=====================================

The `awesome_bottom_bar` Flutter package is a customizable bottom navigation bar that allows you to add a sleek and modern look to your Flutter app. It provides a variety of features, including:

*   Customizable colors and styles
*   Support for both Android and iOS platforms
*   Easy integration with your existing Flutter app

When to use this package:

*   You want to add a modern and customizable bottom navigation bar to your Flutter app.
*   You need a bottom navigation bar that is easy to integrate and customize.

Features:

*   Customizable colors and styles
*   Support for both Android and iOS platforms
*   Easy integration with your existing Flutter app

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting up and Using the Awesome Bottom Bar Flutter Package
====================================================================

## Step 1: Add the Package to Your Flutter Project

To add the `awesome_bottom_bar` package to your Flutter project, you need to add the following line to your `pubspec.yaml` file:

```yml
dependencies:
  awesome_bottom_bar: ^1.0.0
```

Then, run the following command in your terminal:

```bash
flutter pub get
```

## Step 2: Import the Package

To use the `awesome_bottom_bar` package, you need to import it in your Dart file:

```dart
import 'package:awesome_bottom_bar/awesome_bottom_bar.dart';
```

## Step 3: Create a Bottom Navigation Bar

To create a bottom navigation bar, you can use the `AwesomeBottomBar` widget:

```dart
AwesomeBottomBar(
  items: [
    AwesomeBottomBarItem(
      icon: Icons.home,
      title: 'Home',
    ),
    AwesomeBottomBarItem(
      icon: Icons.search,
      title: 'Search',
    ),
    AwesomeBottomBarItem(
      icon: Icons.settings,
      title: 'Settings',
    ),
  ],
  onTap: (index) {
    // Handle tap event
  },
)
```

## Platform-Specific Details

The `awesome_bottom_bar` package works on both Android and iOS platforms. However, you may need to add some platform-specific configurations or optimizations.

For example, on Android, you may need to add the following line to your `AndroidManifest.xml` file:

```xml
<application
  ...
  android:usesCleartextTraffic="true"
  ...
>
```

On iOS, you may need to add the following line to your `Info.plist` file:

```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:awesome_bottom_bar/awesome_bottom_bar.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Awesome Bottom Bar Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  int _currentIndex = 0;

  @override
  Widget build(BuildContext context) {
    // Create a list of bottom bar items
    List<AwesomeBottomBarItem> _items = [
      AwesomeBottomBarItem(
        icon: Icons.home,
        title: 'Home',
      ),
      AwesomeBottomBarItem(
        icon: Icons.search,
        title: 'Search',
      ),
      AwesomeBottomBarItem(
        icon: Icons.settings,
        title: 'Settings',
      ),
    ];

    // Create a bottom navigation bar
    AwesomeBottomBar _bottomBar = AwesomeBottomBar(
      items: _items,
      onTap: (index) {
        // Handle tap event
        setState(() {
          _currentIndex = index;
        });
      },
    );

    // Create a list of pages
    List<Widget> _pages = [
      Center(
        child: Text('Home Page'),
      ),
      Center(
        child: Text('Search Page'),
      ),
      Center(
        child: Text('Settings Page'),
      ),
    ];

    // Return a Scaffold with a bottom navigation bar
    return Scaffold(
      body: _pages[_currentIndex],
      bottomNavigationBar: _bottomBar,
    );
  }
}

// The application flow is as follows:
// 1. The user taps on a bottom bar item.
// 2. The onTap event is handled and the _currentIndex is updated.
// 3. The setState method is called to rebuild the widget tree.
// 4. The _pages list is used to display the corresponding page.
// 5. The bottom navigation bar is updated to reflect the current index.

// In summary, the code flows as follows:
// User tap -> onTap event -> setState -> rebuild widget tree -> display corresponding page -> update bottom navigation bar.
```

<-- END_MAIN -->
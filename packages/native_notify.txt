```markdown
<!-- START_DESCRIPTION -->
# Native Notify Flutter Package

The **native_notify** package is a powerful tool for Flutter developers looking to implement native notifications in their applications. This package allows you to send notifications to users on both Android and iOS platforms, leveraging the native capabilities of each operating system. 

## When to Use This Package
You might consider using the **native_notify** package in scenarios such as:
- Sending alerts or reminders to users.
- Notifying users about updates or changes in the app.
- Engaging users with promotional messages or news.

## Features
- **Cross-Platform Support**: Works seamlessly on both Android and iOS.
- **Customizable Notifications**: Allows for rich notifications with images, sounds, and actions.
- **Background Notifications**: Supports notifications that can be received even when the app is in the background.
- **User Interaction**: Handles user interactions with notifications, such as tapping to open the app or performing specific actions.

Overall, the **native_notify** package is an excellent choice for developers looking to enhance user engagement through notifications.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Native Notify

## Installation
To get started with the **native_notify** package, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  native_notify: ^latest_version
```

Make sure to replace `^latest_version` with the most recent version available on [pub.dev](https://pub.dev/packages/native_notify).

## Platform-Specific Configuration

### Android
1. **Permissions**: Ensure you have the necessary permissions in your `AndroidManifest.xml` file:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
<uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED"/>
```

2. **Service Configuration**: You may need to configure a service for handling notifications.

### iOS
1. **Permissions**: Request permission to show notifications in your app. You can do this in your Dart code:

```dart
import 'package:permission_handler/permission_handler.dart';

Future<void> requestNotificationPermission() async {
  await Permission.notification.request();
}
```

2. **Info.plist**: Add the following keys to your `Info.plist` file to describe the notification usage:

```xml
<key>UIBackgroundModes</key>
<array>
  <string>fetch</string>
</array>
<key>NSUserNotificationUsageDescription</key>
<string>We use notifications to keep you updated.</string>
```

## Basic Usage
To send a notification, you can use the following code snippet:

```dart
import 'package:native_notify/native_notify.dart';

void sendNotification() {
  NativeNotify.showNotification(
    title: "Hello!",
    body: "This is a notification from Native Notify.",
    payload: "notification_payload",
  );
}
```

This function can be called whenever you want to trigger a notification in your app.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using Native Notify

```dart
import 'package:flutter/material.dart';
import 'package:native_notify/native_notify.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Native Notify Example',
      home: NotificationHome(),
    );
  }
}

class NotificationHome extends StatefulWidget {
  @override
  _NotificationHomeState createState() => _NotificationHomeState();
}

class _NotificationHomeState extends State<NotificationHome> {
  @override
  void initState() {
    super.initState();
    // Request notification permission on app start
    requestNotificationPermission();
  }

  // Function to send a notification
  void sendNotification() {
    NativeNotify.showNotification(
      title: "Hello!",
      body: "This is a notification from Native Notify.",
      payload: "notification_payload",
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Native Notify Example'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: sendNotification, // Send notification on button press
          child: Text('Send Notification'),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the RealFlutter widget.
// 2. RealFlutter builds a MaterialApp with a title and a home widget (NotificationHome).
// 3. NotificationHome initializes and requests notification permissions in initState.
// 4. The UI consists of a button that, when pressed, triggers the sendNotification function.
// 5. The sendNotification function uses the NativeNotify package to display a notification with a title and body.
```
<!-- END_MAIN -->
```

### Summary
In this blog post, we explored the **native_notify** Flutter package, detailing its features, installation process, and usage. We provided a complete example of a Flutter application that demonstrates how to send notifications using this package. The application flow was explained step-by-step through comments in the code, making it easy for developers to understand how to implement notifications in their own projects.
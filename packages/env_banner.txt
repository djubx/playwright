<-- START_DESCRIPTION -->

# env_banner Flutter Package
The `env_banner` Flutter package is a simple and effective way to display a banner on your app's screen indicating the current environment (e.g., development, staging, production). This package is particularly useful for developers who want to easily identify which environment they are working on, especially when switching between different environments.

## Features
* Customizable banner text and color
* Support for multiple environments (e.g., dev, staging, prod)
* Easy integration with existing Flutter apps

## When to Use
Use the `env_banner` package when you need to:

* Display the current environment on your app's screen
* Easily switch between different environments (e.g., dev, staging, prod)
* Customize the appearance of the environment banner

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
To use the `env_banner` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  env_banner: ^1.0.0
```
2. Run `flutter pub get` to install the package.
3. Import the package in your Dart file:
```dart
import 'package:env_banner/env_banner.dart';
```
4. Create an instance of the `EnvBanner` widget and pass in the required parameters:
```dart
EnvBanner(
  env: 'dev', // or 'staging', 'prod', etc.
  textStyle: TextStyle(fontSize: 18, color: Colors.white),
  backgroundColor: Colors.red,
)
```
5. Add the `EnvBanner` widget to your app's screen:
```dart
Scaffold(
  appBar: AppBar(
    title: Text('My App'),
  ),
  body: Center(
    child: EnvBanner(
      env: 'dev',
      textStyle: TextStyle(fontSize: 18, color: Colors.white),
      backgroundColor: Colors.red,
    ),
  ),
)
```
### Platform-Specific Details
* Android: No additional configuration required.
* iOS: No additional configuration required.

### Optimizations
* You can customize the appearance of the environment banner by passing in a custom `textStyle` and `backgroundColor`.
* You can also pass in a custom `env` value to display a custom environment name.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:env_banner/env_banner.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Env Banner Demo',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Env Banner Demo'),
        ),
        body: Center(
          child: EnvBanner(
            env: 'dev', // or 'staging', 'prod', etc.
            textStyle: TextStyle(fontSize: 18, color: Colors.white),
            backgroundColor: Colors.red,
          ),
        ),
      ),
    );
  }
}

// The app starts by running the `main` function, which creates an instance of the `MyApp` widget.
// The `MyApp` widget builds a `MaterialApp` with a `Scaffold` as its home screen.
// The `Scaffold` has an `AppBar` with a title, and a `body` that contains a centered `EnvBanner` widget.
// The `EnvBanner` widget displays the current environment ('dev' in this case) with a custom text style and background color.
// The app's flow is straightforward: it creates a `MaterialApp` with a `Scaffold` and an `EnvBanner` widget, and displays the current environment on the screen.

// Final summary: This code creates a simple Flutter app that displays a banner indicating the current environment.
// The app uses the `env_banner` package to create a customizable banner with a custom text style and background color.
// The app's flow is straightforward, and it is easy to switch between different environments by changing the `env` value passed to the `EnvBanner` widget.
```

<-- END_MAIN -->
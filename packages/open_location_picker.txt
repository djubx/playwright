<-- START_DESCRIPTION -->

# Open Location Picker Flutter Package
=====================================

The `open_location_picker` Flutter package is a powerful tool for selecting locations on a map. It provides a simple and intuitive interface for users to choose a location, and it returns the selected location's coordinates and address.

### When to Use

This package is useful in various scenarios, such as:

* Allowing users to select a delivery address
* Choosing a location for an event or meeting
* Getting the user's current location
* Searching for nearby places

### Features

* Displays a map with a marker that can be moved to select a location
* Returns the selected location's coordinates (latitude and longitude) and address
* Supports both Android and iOS platforms
* Customizable map style and marker icon

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `open_location_picker` package, follow these steps:

### Step 1: Add the Package to Your Project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  open_location_picker: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:open_location_picker/open_location_picker.dart';
```
### Step 3: Configure the Package (Optional)

You can customize the map style and marker icon by creating a `OpenLocationPickerOptions` object:
```dart
OpenLocationPickerOptions options = OpenLocationPickerOptions(
  mapStyle: MapStyle.satellite,
  markerIcon: Icon(Icons.location_pin),
);
```
### Step 4: Use the Package

Create an instance of the `OpenLocationPicker` class and call the `show` method:
```dart
OpenLocationPicker picker = OpenLocationPicker(options: options);
picker.show(context).then((location) {
  // Handle the selected location
});
```
### Platform-Specific Details

* Android: Make sure to add the `android.permission.ACCESS_FINE_LOCATION` permission to your `AndroidManifest.xml` file.
* iOS: Add the `NSLocationWhenInUseUsageDescription` key to your `Info.plist` file.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:open_location_picker/open_location_picker.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Step 1: Create an instance of the OpenLocationPicker class
  OpenLocationPicker _picker = OpenLocationPicker();

  // Step 2: Define a function to handle the selected location
  void _handleLocation(Location location) {
    // Step 3: Display the selected location's coordinates and address
    print('Selected location:');
    print('Latitude: ${location.latitude}');
    print('Longitude: ${location.longitude}');
    print('Address: ${location.address}');
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Open Location Picker Example'),
        ),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              // Step 4: Show the location picker
              _picker.show(context).then((location) {
                // Step 5: Handle the selected location
                _handleLocation(location);
              });
            },
            child: Text('Select Location'),
          ),
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user clicks the "Select Location" button.
// 2. The OpenLocationPicker instance is created and the show method is called.
// 3. The location picker is displayed, and the user can select a location.
// 4. The selected location's coordinates and address are returned.
// 5. The _handleLocation function is called to handle the selected location.
// 6. The selected location's coordinates and address are printed to the console.

```

<-- END_MAIN -->
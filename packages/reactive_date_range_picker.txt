<-- START_DESCRIPTION -->

# Reactive Date Range Picker
==========================

The `reactive_date_range_picker` Flutter package provides a simple and intuitive way to select a range of dates. It is designed to be highly customizable and can be used in a variety of applications.

## When to Use
--------------

This package is ideal for applications that require users to select a range of dates, such as:

* Booking systems
* Calendar applications
* Data analysis tools

## Features
------------

* Highly customizable
* Supports multiple date ranges
* Can be used with or without an initial date range
* Supports Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

## Setup
--------

To use the `reactive_date_range_picker` package, add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  reactive_date_range_picker: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Basic Usage
-------------

To use the package, import it into your Dart file:

```dart
import 'package:reactive_date_range_picker/reactive_date_range_picker.dart';
```

Then, create a `ReactiveDateRangePicker` widget:

```dart
ReactiveDateRangePicker(
  initialDateRange: DateRange(
    start: DateTime.now(),
    end: DateTime.now().add(Duration(days: 7)),
  ),
  onDateRangeChanged: (dateRange) {
    print(dateRange);
  },
)
```

## Platform-Specific Details
---------------------------

### Android

No additional configuration is required for Android.

### iOS

To use the package on iOS, add the following line to your `Info.plist` file:

```xml
<key>NSCalendarUsageDescription</key>
<string>This app needs access to your calendar to select dates.</string>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:reactive_date_range_picker/reactive_date_range_picker.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Reactive Date Range Picker Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  DateRange _dateRange = DateRange(
    start: DateTime.now(),
    end: DateTime.now().add(Duration(days: 7)),
  );

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Reactive Date Range Picker Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ReactiveDateRangePicker(
              initialDateRange: _dateRange,
              onDateRangeChanged: (dateRange) {
                setState(() {
                  _dateRange = dateRange;
                });
              },
            ),
            SizedBox(height: 20),
            Text(
              'Selected Date Range: ${_dateRange.start} - ${_dateRange.end}',
              style: TextStyle(fontSize: 18),
            ),
          ],
        ),
      ),
    );
  }
}

// The app starts by running the main function, which creates a new instance of the MyApp widget.
// The MyApp widget is a stateless widget that wraps the MaterialApp widget.
// The MaterialApp widget is the top-level widget for the app, and it provides a basic material design visual layout structure.
// The home property of the MaterialApp widget is set to the MyHomePage widget, which is the main page of the app.
// The MyHomePage widget is a stateful widget that displays a ReactiveDateRangePicker widget and a Text widget.
// The ReactiveDateRangePicker widget is used to select a date range, and it calls the onDateRangeChanged callback whenever the date range changes.
// The onDateRangeChanged callback updates the _dateRange variable with the new date range.
// The Text widget displays the selected date range.
// Whenever the date range changes, the setState function is called to update the UI with the new date range.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Daily Pedometer 2 Flutter Package
=====================================

The `daily_pedometer2` Flutter package provides a simple and easy-to-use interface for tracking the user's daily step count. It uses the device's built-in pedometer sensor to track the user's steps and provides a straightforward API for accessing this data.

### When to Use This Package

This package is ideal for health and fitness apps that want to track the user's daily activity levels. It can also be used in research studies or other applications where tracking daily step count is necessary.

### Features

*   Tracks the user's daily step count using the device's built-in pedometer sensor
*   Provides a simple and easy-to-use API for accessing step count data
*   Supports both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Daily Pedometer 2 Package
===========================================================

### Step 1: Add the Package to Your Flutter Project

To use the `daily_pedometer2` package, you need to add it to your Flutter project's `pubspec.yaml` file. Open the file and add the following line under the `dependencies` section:

```yml
dependencies:
  flutter:
    sdk: flutter
  daily_pedometer2: ^1.0.0
```

Then, run `flutter pub get` in your terminal to install the package.

### Step 2: Import the Package and Initialize the Pedometer

To use the package, you need to import it into your Dart file and initialize the pedometer. Here's an example:

```dart
import 'package:flutter/material.dart';
import 'package:daily_pedometer2/daily_pedometer2.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  void initState() {
    super.initState();
    initPedometer();
  }

  void initPedometer() async {
    await DailyPedometer2.initialize();
  }
}
```

### Step 3: Request Permission (Android Only)

On Android devices, you need to request permission to access the device's activity recognition data. You can do this using the `requestPermission` method:

```dart
void requestPermission() async {
  await DailyPedometer2.requestPermission();
}
```

### Step 4: Start and Stop the Pedometer

To start tracking the user's step count, you need to call the `start` method. To stop tracking, you need to call the `stop` method:

```dart
void startPedometer() async {
  await DailyPedometer2.start();
}

void stopPedometer() async {
  await DailyPedometer2.stop();
}
```

### Step 5: Get the Step Count

To get the current step count, you can call the `getStepCount` method:

```dart
void getStepCount() async {
  int stepCount = await DailyPedometer2.getStepCount();
  print('Step count: $stepCount');
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:daily_pedometer2/daily_pedometer2.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Daily Pedometer 2 Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  int _stepCount = 0;

  @override
  void initState() {
    super.initState();
    initPedometer();
  }

  void initPedometer() async {
    // Initialize the pedometer
    await DailyPedometer2.initialize();

    // Request permission (Android only)
    await DailyPedometer2.requestPermission();

    // Start the pedometer
    await DailyPedometer2.start();

    // Get the step count
    _getStepCount();
  }

  void _getStepCount() async {
    // Get the current step count
    int stepCount = await DailyPedometer2.getStepCount();

    // Update the UI with the new step count
    setState(() {
      _stepCount = stepCount;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Daily Pedometer 2 Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Step count: $_stepCount',
              style: TextStyle(fontSize: 24),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _getStepCount,
              child: Text('Get Step Count'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and the `RealFlutter` widget is initialized.
// 2. The `initPedometer` method is called, which initializes the pedometer, requests permission (Android only), and starts the pedometer.
// 3. The `getStepCount` method is called, which gets the current step count and updates the UI with the new step count.
// 4. The user can press the "Get Step Count" button to get the current step count and update the UI.
// 5. The pedometer continues to run in the background, tracking the user's step count.
```

<-- END_MAIN -->
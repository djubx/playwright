<-- START_DESCRIPTION -->

# Crypto Keys Flutter Package
================================

The `crypto_keys` Flutter package provides a secure way to store and manage cryptographic keys within your Flutter application. It allows you to generate, store, and retrieve keys securely, making it an essential tool for any app that requires encryption or decryption.

## When to Use
--------------

You should use the `crypto_keys` package in the following scenarios:

* When you need to store sensitive data, such as encryption keys or authentication tokens.
* When you want to ensure that your app's data is protected against unauthorized access.
* When you need to comply with security regulations, such as GDPR or HIPAA.

## Features
------------

The `crypto_keys` package offers the following features:

* Secure key storage using the Android KeyStore or iOS Keychain.
* Key generation and retrieval.
* Support for various key types, including RSA, EC, and AES.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Crypto Keys Package
--------------------------------------

To use the `crypto_keys` package, follow these steps:

### Step 1: Add the Package to Your Pubspec

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  crypto_keys: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:crypto_keys/crypto_keys.dart';
```
### Step 3: Initialize the Package

Initialize the package by calling the `init` method:
```dart
await CryptoKeys.init();
```
This method initializes the package and sets up the secure key storage.

### Platform-Specific Details

#### Android

On Android, the `crypto_keys` package uses the Android KeyStore to store keys securely. To use the package on Android, you need to add the following line to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.USE_CREDENTIALS" />
```
#### iOS

On iOS, the `crypto_keys` package uses the Keychain to store keys securely. To use the package on iOS, you need to add the following line to your `Info.plist` file:
```xml
<key>NSKeychainUsageDescription</key>
<string>This app needs access to the Keychain to store sensitive data.</string>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:crypto_keys/crypto_keys.dart';

void main() async {
  // Initialize the package
  await CryptoKeys.init();

  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Crypto Keys Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  String _key;

  // Generate a new key
  Future<void> _generateKey() async {
    // Generate a new RSA key
    final key = await CryptoKeys.generateKey(
      type: KeyType.RSA,
      bits: 2048,
    );

    // Store the key securely
    await CryptoKeys.storeKey(key);

    // Retrieve the stored key
    final storedKey = await CryptoKeys.getKey();

    // Display the stored key
    setState(() {
      _key = storedKey;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Crypto Keys Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              _key != null
                  ? _key
                  : 'No key generated yet',
              style: TextStyle(fontSize: 24),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _generateKey,
              child: Text('Generate Key'),
            ),
          ],
        ),
      ),
    );
  }
}
```

// This is the main entry point of the app.
// The app initializes the `crypto_keys` package and sets up the secure key storage.
// The app then displays a button to generate a new key.
// When the button is pressed, the app generates a new RSA key and stores it securely.
// The app then retrieves the stored key and displays it on the screen.

// The app uses the `CryptoKeys` class to interact with the `crypto_keys` package.
// The `CryptoKeys` class provides methods to generate, store, and retrieve keys securely.

// The app uses the `KeyType` enum to specify the type of key to generate.
// The `KeyType` enum provides values for RSA, EC, and AES keys.

// The app uses the `bits` parameter to specify the number of bits for the key.
// The number of bits determines the strength of the key.

// The app uses the `storeKey` method to store the generated key securely.
// The `storeKey` method stores the key in the secure key storage.

// The app uses the `getKey` method to retrieve the stored key.
// The `getKey` method retrieves the key from the secure key storage.

// The app displays the stored key on the screen.
// The app uses the `Text` widget to display the key.

// The app uses the `ElevatedButton` widget to display the button to generate a new key.
// The `ElevatedButton` widget provides a button with a elevated appearance.

<-- END_MAIN -->
```markdown
<!-- START_DESCRIPTION -->
# Blur Container Flutter Package

The **blur_container** Flutter package is a powerful tool that allows developers to create visually appealing user interfaces by applying a blur effect to widgets. This package is particularly useful when you want to create a frosted glass effect or simply want to add a touch of elegance to your app's design. 

## When to Use This Package
- **Frosted Glass Effect**: When you want to create a modern UI that mimics the appearance of frosted glass.
- **Background Blur**: To blur the background of a widget, making it stand out without losing context.
- **Overlay Effects**: When you need to overlay content on top of a blurred background for better readability.

## Features
- **Customizable Blur Radius**: Control the intensity of the blur effect.
- **Flexible Widget Support**: Works with any widget, allowing for versatile design options.
- **Cross-Platform Compatibility**: Fully functional on both Android and iOS platforms.

The **blur_container** package enhances the visual appeal of your Flutter applications, making it a great addition to your toolkit for UI design.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Blur Container Package

## Step 1: Adding the Dependency
To get started, you need to add the **blur_container** package to your `pubspec.yaml` file. Open the file and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  blur_container: ^1.0.0  # Check for the latest version on pub.dev
```

## Step 2: Installing the Package
Run the following command in your terminal to install the new dependency:

```bash
flutter pub get
```

## Step 3: Platform-Specific Configuration

### Android
For Android, ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

### iOS
For iOS, you may need to enable the `UIBackgroundModes` in your `Info.plist` if you plan to use background features. However, for basic usage, no additional configuration is required.

## Step 4: Importing the Package
In your Dart file, import the package:

```dart
import 'package:blur_container/blur_container.dart';
```

## Step 5: Using the Blur Container
You can now use the `BlurContainer` widget in your Flutter application. Hereâ€™s a simple example:

```dart
BlurContainer(
  blur: 10.0, // Set the blur radius
  child: Container(
    height: 200,
    width: 200,
    color: Colors.white.withOpacity(0.5), // Semi-transparent background
    child: Center(child: Text('Blurred Container')),
  ),
);
```

This code creates a blurred container with a semi-transparent white background, making it perfect for overlaying text or images.

With these steps, you are now ready to implement the **blur_container** package in your Flutter application!
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using Blur Container

```dart
import 'package:flutter/material.dart';
import 'package:blur_container/blur_container.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Blur Container Example',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Blur Container Demo'),
        ),
        body: Center(
          child: Stack(
            alignment: Alignment.center,
            children: [
              // Background image or color
              Container(
                height: 400,
                width: 400,
                color: Colors.blueAccent, // Background color
              ),
              // Blur container
              BlurContainer(
                blur: 10.0, // Set the blur radius
                child: Container(
                  height: 300,
                  width: 300,
                  color: Colors.white.withOpacity(0.5), // Semi-transparent background
                  child: Center(
                    child: Text(
                      'Blurred Content',
                      style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
                    ),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function starts the app by calling runApp with the RealFlutter widget.
// 2. RealFlutter is a StatelessWidget that builds the MaterialApp.
// 3. The MaterialApp contains a Scaffold with an AppBar and a Center widget.
// 4. Inside the Center widget, a Stack is used to layer the background and the blurred container.
// 5. The first child of the Stack is a Container that serves as the background with a blue color.
// 6. The second child is the BlurContainer, which applies a blur effect to its child.
// 7. The child of the BlurContainer is a semi-transparent white Container that holds centered text.
// 8. The result is a visually appealing blurred effect over the background, enhancing the UI.
```
<!-- END_MAIN -->
``` 

This structured blog provides a comprehensive overview of the **blur_container** Flutter package, guiding users through its features, setup, and practical implementation with detailed comments for clarity.
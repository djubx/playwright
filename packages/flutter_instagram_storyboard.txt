<-- START_DESCRIPTION -->
# Flutter Instagram Storyboard Package
=====================================

The `flutter_instagram_storyboard` package is a Flutter library that allows you to create Instagram-like storyboards in your app. It provides a customizable and easy-to-use widget that can be integrated into your existing Flutter project.

## When to Use This Package
---------------------------

This package is perfect for apps that require a storyboarding feature, such as:

* Social media apps
* Photo and video editing apps
* Content creation apps

## Features
------------

* Customizable storyboard layout
* Support for images and videos
* Swipe gestures for navigation
* Indicator for active story
* Support for Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Package
=============================================

## Step 1: Add the Package to Your Project
-----------------------------------------

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_instagram_storyboard: ^1.0.0
```
Then, run `flutter pub get` to install the package.

## Step 2: Import the Package
-----------------------------

Import the package in your Dart file:
```dart
import 'package:flutter_instagram_storyboard/flutter_instagram_storyboard.dart';
```
## Step 3: Create a Storyboard
-----------------------------

Create a storyboard by using the `InstagramStoryboard` widget:
```dart
InstagramStoryboard(
  stories: [
    Story(
      child: Image.asset('assets/image1.jpg'),
    ),
    Story(
      child: Image.asset('assets/image2.jpg'),
    ),
  ],
)
```
## Platform-Specific Details
---------------------------

### Android

* Make sure to add the following line to your `AndroidManifest.xml` file:
```xml
<application
  ...
  android:hardwareAccelerated="true"
  ...
>
```
### iOS

* Make sure to add the following line to your `Info.plist` file:
```xml
<key>UIViewControllerBasedStatusBarAppearance</key>
<false/>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->
```dart
import 'package:flutter/material.dart';
import 'package:flutter_instagram_storyboard/flutter_instagram_storyboard.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Instagram Storyboard Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  List<Story> stories = [
    Story(
      child: Image.asset('assets/image1.jpg'),
    ),
    Story(
      child: Image.asset('assets/image2.jpg'),
    ),
    Story(
      child: Image.asset('assets/image3.jpg'),
    ),
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Instagram Storyboard Demo'),
      ),
      body: InstagramStoryboard(
        stories: stories,
        // Optional parameters
        indicatorColor: Colors.blue,
        indicatorActiveColor: Colors.red,
        swipeGestureEnabled: true,
      ),
    );
  }
}
```
// The app starts by running the `main` function, which creates a `MaterialApp` instance.
// The `MaterialApp` instance has a `title` property, which is displayed in the app bar.
// The `home` property is set to `MyHomePage`, which is a stateful widget.
// `MyHomePage` has a list of `Story` objects, each containing an image asset.
// The `build` method returns a `Scaffold` instance, which has an `appBar` property set to an `AppBar` instance.
// The `body` property is set to an `InstagramStoryboard` instance, which takes the list of stories as a parameter.
// The `InstagramStoryboard` instance displays the stories in a swipeable format, with an indicator at the bottom.
// The indicator color and active color can be customized using the `indicatorColor` and `indicatorActiveColor` properties.
// The swipe gesture can be enabled or disabled using the `swipeGestureEnabled` property.

// In summary, the app displays a list of stories in a swipeable format, with a customizable indicator and swipe gesture.
<-- END_MAIN -->
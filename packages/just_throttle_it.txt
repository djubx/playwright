<-- START_DESCRIPTION -->

**Just Throttle It: A Flutter Package for Rate Limiting**
===========================================================

The `just_throttle_it` package is a simple and effective way to implement rate limiting in your Flutter applications. It provides a straightforward API for throttling events, ensuring that your app doesn't get overwhelmed with too many requests or actions.

**When to Use This Package**
-----------------------------

You should consider using `just_throttle_it` in the following scenarios:

*   **API requests**: When making multiple API requests in a short period, you might want to throttle the requests to avoid overwhelming the server or hitting rate limits.
*   **Button clicks**: To prevent accidental multiple clicks on a button, you can throttle the click event to ensure only one action is performed.
*   **Text input**: When dealing with text input fields, you might want to throttle the input events to avoid performing unnecessary actions on every keystroke.

**Features**
------------

The `just_throttle_it` package offers the following features:

*   **Throttling**: Throttle events to prevent excessive actions or requests.
*   **Debouncing**: Debounce events to ensure only one action is performed after a specified delay.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setting Up and Using Just Throttle It**
=============================================

To use the `just_throttle_it` package in your Flutter project, follow these steps:

### Step 1: Add the Package to Your Pubspec.yaml

Add the following line to your `pubspec.yaml` file:

```yml
dependencies:
  just_throttle_it: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

In your Dart file, import the package:

```dart
import 'package:just_throttle_it/just_throttle_it.dart';
```

### Step 3: Create a Throttler

Create a throttler instance with a specified delay:

```dart
final throttler = Throttler(delay: Duration(milliseconds: 500));
```

### Step 4: Throttle Events

Use the `throttle` method to throttle events:

```dart
throttler.throttle(() {
  // Perform action here
});
```

### Platform-Specific Details

The `just_throttle_it` package works on both Android and iOS platforms without any additional configuration.

### Optimizations

To optimize the performance of the throttler, you can adjust the delay duration based on your specific use case.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:just_throttle_it/just_throttle_it.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Just Throttle It Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _throttler = Throttler(delay: Duration(milliseconds: 500));
  int _counter = 0;

  void _incrementCounter() {
    _throttler.throttle(() {
      setState(() {
        _counter++;
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Just Throttle It Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'You have pushed the button this many times:',
            ),
            Text(
              '$_counter',
              style: Theme.of(context).textTheme.headline4,
            ),
          ],
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _incrementCounter,
        tooltip: 'Increment',
        child: Icon(Icons.add),
      ),
    );
  }
}

// The application flow:
// 1. The user presses the floating action button.
// 2. The _incrementCounter method is called.
// 3. The throttler throttles the _incrementCounter method to prevent excessive increments.
// 4. After the specified delay (500ms in this case), the _counter is incremented.
// 5. The UI is updated to reflect the new _counter value.
// This ensures that the _counter is only incremented once every 500ms, even if the user presses the button multiple times within that time frame.

```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Introduction to dartdap
The dartdap package is a lightweight, easy-to-use library for Flutter that provides a simple way to work with LDAP (Lightweight Directory Access Protocol) servers. It allows you to perform various operations such as authentication, searching, and modifying data in an LDAP directory.

## When to use dartdap
You can use dartdap in any Flutter application that requires interaction with an LDAP server. This can include applications such as:

* Authentication and authorization systems
* Directory management tools
* Employee management systems

## Features of dartdap
Some of the key features of the dartdap package include:

* Support for LDAP v3 protocol
* Authentication using username and password or anonymous bind
* Searching for entries in the LDAP directory
* Adding, modifying, and deleting entries in the LDAP directory
* Support for SSL/TLS encryption

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting up dartdap
To use the dartdap package in your Flutter application, you need to add it to your pubspec.yaml file:

```yml
dependencies:
  dartdap: ^0.1.0
```

Then, run `flutter pub get` to install the package.

## Platform-specific details
### Android
On Android, you need to add the following permissions to your AndroidManifest.xml file:

```xml
<uses-permission android:name="android.permission.INTERNET" />
```

### iOS
On iOS, you need to add the following lines to your Info.plist file:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

## Using dartdap
To use the dartdap package, you need to import it in your Dart file:

```dart
import 'package:dartdap/dartdap.dart';
```

Then, you can create an instance of the `LdapConnection` class to connect to your LDAP server:

```dart
LdapConnection connection = LdapConnection(
  host: 'ldap.example.com',
  port: 389,
  ssl: true,
  bindDN: 'cn=admin,dc=example,dc=com',
  bindPassword: 'password',
);
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:dartdap/dartdap.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Dartdap Example',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  LdapConnection _connection;

  @override
  void initState() {
    super.initState();
    _connectToLdap();
  }

  Future<void> _connectToLdap() async {
    // Create an instance of the LdapConnection class
    _connection = LdapConnection(
      host: 'ldap.example.com',
      port: 389,
      ssl: true,
      bindDN: 'cn=admin,dc=example,dc=com',
      bindPassword: 'password',
    );

    // Connect to the LDAP server
    await _connection.connect();

    // Search for entries in the LDAP directory
    List<LdapEntry> entries = await _connection.search(
      baseDN: 'dc=example,dc=com',
      filter: '(objectClass=*)',
    );

    // Print the search results
    entries.forEach((entry) {
      print(entry.dn);
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Dartdap Example'),
      ),
      body: Center(
        child: Text('Connected to LDAP server'),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the application.
// 2. The application creates an instance of the LdapConnection class.
// 3. The application connects to the LDAP server using the connect method.
// 4. The application searches for entries in the LDAP directory using the search method.
// 5. The application prints the search results to the console.
// 6. The application displays a message to the user indicating that it has connected to the LDAP server.

// The code flow is as follows:
// 1. The main function runs the application.
// 2. The MyApp widget is created.
// 3. The MyHomePage widget is created.
// 4. The _connectToLdap function is called.
// 5. The LdapConnection instance is created.
// 6. The connect method is called.
// 7. The search method is called.
// 8. The search results are printed to the console.
// 9. The message is displayed to the user.

// In summary, the application connects to an LDAP server, searches for entries, and displays a message to the user.
```

<-- END_MAIN -->
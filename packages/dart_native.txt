<-- START_DESCRIPTION -->

# Introduction to dart_native
The `dart_native` package is a powerful tool for Flutter developers, allowing them to execute native code on both Android and iOS platforms. This package provides a set of APIs that enable developers to interact with native components, such as cameras, microphones, and GPS, using Dart.

## When to use dart_native
The `dart_native` package is particularly useful when you need to:

* Access native hardware components, such as cameras, microphones, and GPS
* Use platform-specific features, such as Android's Intent system or iOS's Core Image framework
* Optimize performance-critical code using native languages like C++ or Objective-C

## Features of dart_native
The `dart_native` package provides a range of features, including:

* Native function calls: call native functions from Dart code
* Native callback functions: pass Dart functions as callbacks to native code
* Native data types: work with native data types, such as integers, floats, and strings
* Platform-specific APIs: access platform-specific APIs, such as Android's Intent system or iOS's Core Image framework

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting up dart_native
To use the `dart_native` package, you'll need to add it to your Flutter project's `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  dart_native: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Platform-specific setup
### Android
To use the `dart_native` package on Android, you'll need to add the following code to your `AndroidManifest.xml` file:

```xml
<application>
  ...
  <meta-data
    android:name="flutter.embedded_views"
    android:resource="@array/flutter_embedded_views"/>
</application>
```

You'll also need to create a new file called `flutter_embedded_views.xml` in your project's `res/values` directory:

```xml
<?xml version="1.0" encoding="utf-8"?>
<resources>
  <array name="flutter_embedded_views">
    <item>flutter_native</item>
  </array>
</resources>
```

### iOS
To use the `dart_native` package on iOS, you'll need to add the following code to your `Info.plist` file:

```xml
<key>FlutterEmbeddedViews</key>
<array>
  <string>flutter_native</string>
</array>
```

## Using dart_native
To use the `dart_native` package, you'll need to import it into your Dart file:

```dart
import 'package:dart_native/dart_native.dart';
```

You can then use the package's APIs to interact with native components. For example:

```dart
class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Real Flutter'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Call a native function
            NativeFunction.call('my_native_function');
          },
          child: Text('Call Native Function'),
        ),
      ),
    );
  }
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:dart_native/dart_native.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Real Flutter',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Step 1: Initialize the native function
  NativeFunction _nativeFunction;

  @override
  void initState() {
    super.initState();
    // Step 2: Create a new native function
    _nativeFunction = NativeFunction('my_native_function');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Real Flutter'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Step 3: Call the native function
            _nativeFunction.call();
          },
          child: Text('Call Native Function'),
        ),
      ),
    );
  }
}

// Step 4: Define the native function
void myNativeFunction() {
  // Step 5: Perform some native operation
  print('Hello from native!');
}

// The application flow is as follows:
// 1. The user presses the "Call Native Function" button.
// 2. The `_nativeFunction.call()` method is called.
// 3. The native function `myNativeFunction` is executed.
// 4. The native function performs some operation (in this case, printing a message).
// 5. The native function returns control to the Dart code.
```

// The application flow is a simple example of how to use the `dart_native` package to call a native function from Dart code. The native function is defined in the `myNativeFunction` function, which is called when the user presses the "Call Native Function" button. The native function performs some operation (in this case, printing a message) and then returns control to the Dart code.

<-- END_MAIN -->
Here's a detailed technical blog on the "midpay" Flutter package, structured as requested.

<!-- START_DESCRIPTION -->
# Midpay Flutter Package

The **midpay** Flutter package is a powerful tool designed to facilitate payment processing within Flutter applications. It provides a seamless integration for handling various payment methods, making it an essential choice for developers looking to implement payment functionalities in their apps.

## When to Use Midpay

You should consider using the midpay package when:
- You need to integrate multiple payment gateways into your Flutter application.
- You want to provide a smooth and secure payment experience for users.
- You are developing an e-commerce app, subscription service, or any application that requires payment processing.

## Features

- **Multi-Gateway Support**: Integrates with various payment gateways, allowing flexibility in payment options.
- **User-Friendly Interface**: Provides a simple and intuitive interface for users to complete transactions.
- **Secure Transactions**: Implements robust security measures to protect user data during payment processing.
- **Customizable**: Offers customization options to fit the design and functionality of your application.

With these features, the midpay package stands out as a reliable choice for developers aiming to enhance their applications with payment capabilities.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Midpay

In this tutorial, we will walk through the setup process for the midpay package and demonstrate how to use it in your Flutter application.

## Step 1: Adding the Dependency

To get started, add the midpay package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  midpay: ^1.0.0  # Replace with the latest version
```

Run `flutter pub get` to install the package.

## Step 2: Platform-Specific Configuration

### Android Configuration

1. Open `android/app/build.gradle` and ensure you have the following configurations:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21 // Ensure this is set to at least 21
    }
}
```

2. Add the necessary permissions in `AndroidManifest.xml`:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
```

### iOS Configuration

1. Open `ios/Runner/Info.plist` and add the following:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

2. Ensure your iOS deployment target is set to at least 10.0 in `ios/Podfile`:

```ruby
platform :ios, '10.0'
```

## Step 3: Using the Midpay Package

Now that we have set up the package, let's see how to use it in your application.

1. Import the package in your Dart file:

```dart
import 'package:midpay/midpay.dart';
```

2. Initialize the payment process:

```dart
void initiatePayment() async {
  final paymentResult = await Midpay.processPayment(
    amount: 100.0, // Amount to be charged
    currency: 'USD', // Currency code
    paymentMethod: PaymentMethod.card, // Payment method
  );

  if (paymentResult.success) {
    // Handle successful payment
  } else {
    // Handle payment failure
  }
}
```

With these steps, you can successfully integrate and use the midpay package in your Flutter application.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Midpay in Flutter

```dart
import 'package:flutter/material.dart';
import 'package:midpay/midpay.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Midpay Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: PaymentScreen(),
    );
  }
}

class PaymentScreen extends StatelessWidget {
  // Function to initiate payment
  void initiatePayment(BuildContext context) async {
    // Start the payment process
    final paymentResult = await Midpay.processPayment(
      amount: 100.0, // Amount to be charged
      currency: 'USD', // Currency code
      paymentMethod: PaymentMethod.card, // Payment method
    );

    // Check if the payment was successful
    if (paymentResult.success) {
      // Show success message
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Payment Successful!')),
      );
    } else {
      // Show error message
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Payment Failed: ${paymentResult.error}')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Midpay Payment Example'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () => initiatePayment(context), // Trigger payment on button press
          child: Text('Pay Now'),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The application starts with the MyApp class, which sets up the MaterialApp.
// 2. The home screen is set to PaymentScreen, where the payment button is displayed.
// 3. When the user presses the "Pay Now" button, the initiatePayment function is called.
// 4. This function calls Midpay.processPayment with the specified amount, currency, and payment method.
// 5. After the payment process, it checks if the payment was successful.
// 6. If successful, a success message is shown; otherwise, an error message is displayed.
```
<!-- END_MAIN -->

In this blog, we explored the midpay Flutter package, detailing its features, setup process, and providing a complete example of its usage. The application flow is straightforward, allowing developers to integrate payment processing seamlessly into their Flutter applications.
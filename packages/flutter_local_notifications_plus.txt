<-- START_DESCRIPTION -->

# Flutter Local Notifications Plus Package
=============================================

The `flutter_local_notifications_plus` package is a powerful tool for displaying local notifications in Flutter applications. It provides a simple and easy-to-use API for scheduling and displaying notifications, allowing developers to enhance the user experience of their apps.

### When to Use This Package

This package is ideal for scenarios where you want to display notifications to the user, such as:

* Reminders for upcoming events
* New message notifications
* In-app updates or promotions
* Scheduled tasks or alarms

### Features

The `flutter_local_notifications_plus` package offers a range of features, including:

* Scheduling notifications for specific times or intervals
* Customizable notification content, including title, body, and icon
* Support for multiple notification channels
* Ability to cancel or update existing notifications
* Platform-specific features, such as Android's notification priority and iOS's notification categories

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `flutter_local_notifications_plus` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_local_notifications_plus: ^9.1.1
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:flutter_local_notifications_plus/flutter_local_notifications_plus.dart';
```
### Step 3: Initialize the Package

Initialize the package in your `main` function:
```dart
Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await FlutterLocalNotificationsPlus().initialize(
    onSelectNotification: onSelectNotification,
  );
  runApp(MyApp());
}

Future onSelectNotification(String payload) async {
  // Handle notification tap
}
```
### Platform-Specific Configurations

#### Android

Add the following lines to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED" />

<application
  ...
  android:usesCleartextTraffic="true"
  android:requestLegacyExternalStorage="true"
  ...
>
```
#### iOS

Add the following lines to your `Info.plist` file:
```xml
<key>UIBackgroundModes</key>
<array>
  <string>remote-notification</string>
</array>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_local_notifications_plus/flutter_local_notifications_plus.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await FlutterLocalNotificationsPlus().initialize(
    onSelectNotification: onSelectNotification,
  );
  runApp(RealFlutter());
}

Future onSelectNotification(String payload) async {
  // Handle notification tap
  print('Notification tapped: $payload');
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final FlutterLocalNotificationsPlus _notifications = FlutterLocalNotificationsPlus();

  Future<void> _showNotification() async {
    // Create a notification channel
    const AndroidNotificationChannel channel = AndroidNotificationChannel(
      'channel_id',
      'Channel Name',
      'Channel Description',
      importance: Importance.max,
    );
    await _notifications.createNotificationChannel(channel);

    // Create a notification
    const NotificationDetails notificationDetails = NotificationDetails(
      android: AndroidNotificationDetails(
        channel.id,
        channel.name,
        channel.description,
        icon: 'ic_launcher',
      ),
    );
    await _notifications.show(
      0,
      'Notification Title',
      'Notification Body',
      notificationDetails,
      payload: 'Notification Payload',
    );
  }

  Future<void> _scheduleNotification() async {
    // Create a notification channel
    const AndroidNotificationChannel channel = AndroidNotificationChannel(
      'channel_id',
      'Channel Name',
      'Channel Description',
      importance: Importance.max,
    );
    await _notifications.createNotificationChannel(channel);

    // Create a notification
    const NotificationDetails notificationDetails = NotificationDetails(
      android: AndroidNotificationDetails(
        channel.id,
        channel.name,
        channel.description,
        icon: 'ic_launcher',
      ),
    );
    await _notifications.schedule(
      0,
      'Notification Title',
      'Notification Body',
      notificationDetails,
      payload: 'Notification Payload',
      android: AndroidNotificationDetails(
        channel.id,
        channel.name,
        channel.description,
        icon: 'ic_launcher',
      ),
      ios: IOSNotificationDetails(),
    );
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Real Flutter'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              ElevatedButton(
                onPressed: _showNotification,
                child: Text('Show Notification'),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _scheduleNotification,
                child: Text('Schedule Notification'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user opens the app and is presented with two buttons: "Show Notification" and "Schedule Notification".
// 2. When the user clicks the "Show Notification" button, a notification is displayed immediately.
// 3. When the user clicks the "Schedule Notification" button, a notification is scheduled to be displayed at a later time.
// 4. When the notification is displayed, the user can tap on it to open the app and view the notification payload.
// 5. The app uses the `flutter_local_notifications_plus` package to display and schedule notifications.
```

<-- END_MAIN -->
```markdown
<-- START_DESCRIPTION -->

# Overview of the `storage_space` Flutter Package

The `storage_space` Flutter package is a powerful tool designed to help developers manage and monitor the storage space on a device. This package is particularly useful in applications where storage management is crucial, such as media-heavy apps, file management systems, or apps that need to ensure sufficient storage before performing large downloads or installations.

## Key Features

- **Cross-Platform Support**: Works seamlessly on both Android and iOS platforms.
- **Real-Time Monitoring**: Provides real-time updates on storage space changes.
- **Detailed Storage Information**: Offers detailed insights into total, used, and available storage space.
- **Ease of Use**: Simple API that integrates easily into any Flutter application.

## When to Use

- **Media Applications**: To check available storage before downloading or recording media.
- **File Management Apps**: To display storage usage and availability to users.
- **Performance Optimization**: To ensure that your app does not attempt to use more storage than is available, preventing crashes or data loss.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the `storage_space` Package

In this section, we will walk through the setup process for the `storage_space` package and demonstrate how to use it in a Flutter application.

## Installation

To use the `storage_space` package, add it to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  storage_space: ^1.0.0
```

Run `flutter pub get` to install the package.

## Platform-Specific Setup

### Android

No additional setup is required for Android. The package uses the necessary permissions automatically.

### iOS

For iOS, ensure that your `Info.plist` file includes the following permissions:

```xml
<key>NSFileProtectionComplete</key>
<string>YES</string>
```

## Using the Package

To use the `storage_space` package, import it into your Dart file:

```dart
import 'package:storage_space/storage_space.dart';
```

### Basic Usage

Create an instance of the `RealFlutter` class and use its methods to retrieve storage information:

```dart
final storage = RealFlutter();

void checkStorage() async {
  final totalSpace = await storage.getTotalSpace();
  final freeSpace = await storage.getFreeSpace();
  final usedSpace = await storage.getUsedSpace();

  print('Total Space: $totalSpace');
  print('Free Space: $freeSpace');
  print('Used Space: $usedSpace');
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:storage_space/storage_space.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Storage Space Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: StorageSpaceScreen(),
    );
  }
}

class StorageSpaceScreen extends StatefulWidget {
  @override
  _StorageSpaceScreenState createState() => _StorageSpaceScreenState();
}

class _StorageSpaceScreenState extends State<StorageSpaceScreen> {
  final RealFlutter storage = RealFlutter();
  String totalSpace = 'Loading...';
  String freeSpace = 'Loading...';
  String usedSpace = 'Loading...';

  @override
  void initState() {
    super.initState();
    _fetchStorageInfo();
  }

  Future<void> _fetchStorageInfo() async {
    // Fetch total, free, and used storage space asynchronously
    final total = await storage.getTotalSpace();
    final free = await storage.getFreeSpace();
    final used = await storage.getUsedSpace();

    // Update the state with the fetched storage information
    setState(() {
      totalSpace = '$total MB';
      freeSpace = '$free MB';
      usedSpace = '$used MB';
    });
  }

  @override
  Widget build(BuildContext context) {
    // Build the UI to display storage information
    return Scaffold(
      appBar: AppBar(
        title: Text('Storage Space Info'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text('Total Space: $totalSpace'),
            SizedBox(height: 8),
            Text('Free Space: $freeSpace'),
            SizedBox(height: 8),
            Text('Used Space: $usedSpace'),
          ],
        ),
      ),
    );
  }
}

// Application Flow:
// 1. The app starts with the `main` function, which runs `MyApp`.
// 2. `MyApp` is a stateless widget that sets up the MaterialApp and home screen.
// 3. `StorageSpaceScreen` is a stateful widget that manages the storage information.
// 4. In `initState`, `_fetchStorageInfo` is called to retrieve storage data.
// 5. `_fetchStorageInfo` uses the `RealFlutter` instance to get total, free, and used space.
// 6. The state is updated with the fetched data, triggering a UI rebuild.
// 7. The UI displays the storage information in a simple column layout.
```

<-- END_MAIN -->
```
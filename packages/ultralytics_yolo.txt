<-- START_DESCRIPTION -->

# Ultralytics YOLO Flutter Package
=====================================

The Ultralytics YOLO Flutter package is a powerful tool for object detection in images and videos. It is based on the popular YOLO (You Only Look Once) algorithm, which is known for its high accuracy and speed.

### When to Use This Package

This package is ideal for applications that require real-time object detection, such as:

* Image and video analysis
* Surveillance systems
* Autonomous vehicles
* Robotics

### Features

* Real-time object detection
* High accuracy and speed
* Supports both image and video input
* Compatible with both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
=====================

### Step 1: Add the Package to Your Flutter Project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  ultralytics_yolo: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:ultralytics_yolo/ultralytics_yolo.dart';
```
### Step 3: Load the Model

Load the YOLO model using the `loadModel` method:
```dart
await Yolo.loadModel();
```
### Step 4: Detect Objects

Detect objects in an image or video using the `detect` method:
```dart
List<YoloObject> objects = await Yolo.detect(image: image);
```
### Platform-Specific Details

* Android: Make sure to add the following lines to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.CAMERA" />
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
```
* iOS: Make sure to add the following lines to your `Info.plist` file:
```xml
<key>NSCameraUsageDescription</key>
<string>This app needs camera access to detect objects</string>
<key>NSPhotoLibraryUsageDescription</key>
<string>This app needs photo library access to detect objects</string>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:ultralytics_yolo/ultralytics_yolo.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Ultralytics YOLO Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  List<YoloObject> _objects = [];

  Future<void> _detectObjects() async {
    // Load the YOLO model
    await Yolo.loadModel();

    // Get the image from the camera or gallery
    final image = await ImagePicker().getImage(source: ImageSource.camera);

    // Detect objects in the image
    List<YoloObject> objects = await Yolo.detect(image: image);

    // Update the UI with the detected objects
    setState(() {
      _objects = objects;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Ultralytics YOLO Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: _detectObjects,
              child: Text('Detect Objects'),
            ),
            SizedBox(height: 20),
            Text('Detected Objects:'),
            SizedBox(height: 10),
            _objects.isEmpty
                ? Text('No objects detected')
                : Column(
                    children: _objects.map((object) {
                      return Text('${object.className} - ${object.confidence}');
                    }).toList(),
                  ),
          ],
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user clicks the "Detect Objects" button.
// 2. The `_detectObjects` function is called, which loads the YOLO model.
// 3. The user is prompted to select an image from the camera or gallery.
// 4. The selected image is passed to the `Yolo.detect` function, which detects objects in the image.
// 5. The detected objects are stored in the `_objects` list.
// 6. The UI is updated to display the detected objects.

// Summary:
// This code demonstrates how to use the Ultralytics YOLO package to detect objects in images.
// The user can select an image from the camera or gallery, and the app will display the detected objects.
```

<-- END_MAIN -->
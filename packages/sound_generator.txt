<-- START_DESCRIPTION -->

# Sound Generator Flutter Package
=====================================

The `sound_generator` Flutter package is a powerful tool for generating sounds in real-time within Flutter applications. It provides a simple and efficient way to create a wide range of sounds, from simple tones to complex waveforms.

### When to Use This Package

This package is ideal for applications that require real-time sound generation, such as:

* Music and audio synthesis apps
* Sound effects and FX apps
* Games that require dynamic sound generation
* Audio testing and calibration tools

### Features

The `sound_generator` package offers the following features:

* Real-time sound generation
* Support for multiple waveforms (sine, square, sawtooth, triangle)
* Adjustable frequency, amplitude, and duration
* Support for stereo output
* Low latency and high performance

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Sound Generator Package
=============================================

To use the `sound_generator` package in your Flutter app, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  sound_generator: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:sound_generator/sound_generator.dart';
```
### Step 3: Initialize the Sound Generator

 Initialize the sound generator with the desired settings:
```dart
SoundGenerator _soundGenerator = SoundGenerator(
  frequency: 440.0, // Hz
  amplitude: 1.0, // range: 0.0 to 1.0
  waveform: Waveform.sine,
);
```
### Platform-Specific Details

* On Android, the sound generator uses the `AudioTrack` API to play the generated sound.
* On iOS, the sound generator uses the `AVAudioPlayer` API to play the generated sound.

### Required Configurations and Optimizations

* To minimize latency, it's recommended to use a buffer size of 1024 or smaller.
* To optimize performance, it's recommended to use a sample rate of 44.1 kHz or higher.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:sound_generator/sound_generator.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Sound Generator Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: SoundGeneratorDemo(),
    );
  }
}

class SoundGeneratorDemo extends StatefulWidget {
  @override
  _SoundGeneratorDemoState createState() => _SoundGeneratorDemoState();
}

class _SoundGeneratorDemoState extends State<SoundGeneratorDemo> {
  SoundGenerator _soundGenerator;
  double _frequency = 440.0;
  double _amplitude = 1.0;
  Waveform _waveform = Waveform.sine;

  @override
  void initState() {
    super.initState();
    _soundGenerator = SoundGenerator(
      frequency: _frequency,
      amplitude: _amplitude,
      waveform: _waveform,
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Sound Generator Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Slider(
              value: _frequency,
              min: 20.0,
              max: 20000.0,
              divisions: 100,
              label: _frequency.toStringAsFixed(1),
              onChanged: (value) {
                setState(() {
                  _frequency = value;
                  _soundGenerator.frequency = _frequency;
                });
              },
            ),
            Slider(
              value: _amplitude,
              min: 0.0,
              max: 1.0,
              divisions: 10,
              label: _amplitude.toStringAsFixed(1),
              onChanged: (value) {
                setState(() {
                  _amplitude = value;
                  _soundGenerator.amplitude = _amplitude;
                });
              },
            ),
            DropdownButton<Waveform>(
              value: _waveform,
              onChanged: (value) {
                setState(() {
                  _waveform = value;
                  _soundGenerator.waveform = _waveform;
                });
              },
              items: Waveform.values.map((waveform) {
                return DropdownMenuItem<Waveform>(
                  value: waveform,
                  child: Text(waveform.toString()),
                );
              }).toList(),
            ),
            ElevatedButton(
              onPressed: () {
                _soundGenerator.play();
              },
              child: Text('Play'),
            ),
            ElevatedButton(
              onPressed: () {
                _soundGenerator.stop();
              },
              child: Text('Stop'),
            ),
          ],
        ),
      ),
    );
  }
}

// The app starts by initializing the sound generator with the desired settings.
// The user can then adjust the frequency, amplitude, and waveform using the sliders and dropdown menu.
// When the user presses the "Play" button, the sound generator starts playing the sound.
// When the user presses the "Stop" button, the sound generator stops playing the sound.
// The app uses the SoundGenerator class to generate the sound in real-time.
// The SoundGenerator class uses the AudioTrack API on Android and the AVAudioPlayer API on iOS to play the generated sound.
```

<-- END_MAIN -->
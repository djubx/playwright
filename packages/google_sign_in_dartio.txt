<-- START_DESCRIPTION -->

**Google Sign In Dart IO Package Overview**
=============================================

The `google_sign_in_dartio` package is a Flutter plugin that allows users to sign in with their Google account on both Android and iOS platforms. This package provides a simple and convenient way to authenticate users with Google, allowing developers to access user data and authorize actions on their behalf.

**When to Use This Package**
---------------------------

You should use this package when you need to integrate Google sign-in functionality into your Flutter app. This package is particularly useful when:

* You want to provide a seamless authentication experience for your users.
* You need to access user data, such as their Google profile information or contacts.
* You want to authorize actions on behalf of the user, such as accessing their Google Drive files.

**Features**
------------

The `google_sign_in_dartio` package provides the following features:

* Google sign-in functionality for both Android and iOS platforms.
* Access to user data, such as their Google profile information or contacts.
* Authorization for actions on behalf of the user.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setup and Usage**
-------------------

To use the `google_sign_in_dartio` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter:
    sdk: flutter
  google_sign_in_dartio: ^0.1.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:google_sign_in_dartio/google_sign_in_dartio.dart';
```
### Step 3: Initialize the Package

Initialize the package in your `main` function:
```dart
void main() async {
  await GoogleSignInDartio.initialize();
  runApp(MyApp());
}
```
### Step 4: Use the Package

Use the package to sign in with Google:
```dart
GoogleSignInDartio _googleSignIn = GoogleSignInDartio(
  clientId: 'YOUR_CLIENT_ID',
  scopes: ['email', 'profile'],
);

Future<void> _signIn() async {
  final GoogleSignInAccount account = await _googleSignIn.signIn();
  print('Signed in with Google: ${account.displayName}');
}
```
### Platform-Specific Details

#### Android

To use the package on Android, you need to add the following lines to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.INTERNET" />
<uses-permission android:name="android.permission.GET_ACCOUNTS" />
```
#### iOS

To use the package on iOS, you need to add the following lines to your `Info.plist` file:
```xml
<key>CFBundleURLTypes</key>
<array>
  <dict>
    <key>CFBundleTypeRole</key>
    <string>Editor</string>
    <key>CFBundleURLSchemes</key>
    <array>
      <string>YOUR_CLIENT_ID</string>
    </array>
  </dict>
</array>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:google_sign_in_dartio/google_sign_in_dartio.dart';

void main() async {
  await GoogleSignInDartio.initialize();
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  GoogleSignInDartio _googleSignIn = GoogleSignInDartio(
    clientId: 'YOUR_CLIENT_ID',
    scopes: ['email', 'profile'],
  );

  Future<void> _signIn() async {
    // Sign in with Google
    final GoogleSignInAccount account = await _googleSignIn.signIn();
    print('Signed in with Google: ${account.displayName}');

    // Get user data
    final GoogleSignInUserData userData = await _googleSignIn.getUserData();
    print('User data: ${userData.toJson()}');

    // Authorize actions on behalf of the user
    final GoogleSignInAuth auth = await _googleSignIn.getAuth();
    print('Auth token: ${auth.accessToken}');
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Real Flutter',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Real Flutter'),
        ),
        body: Center(
          child: ElevatedButton(
            onPressed: _signIn,
            child: Text('Sign in with Google'),
          ),
        ),
      ),
    );
  }
}
```

// The app starts by initializing the GoogleSignInDartio package.
// The user is then presented with a button to sign in with Google.
// When the button is pressed, the app signs in with Google using the GoogleSignInDartio package.
// After signing in, the app gets the user's data and authorizes actions on behalf of the user.
// The app then prints the user's data and auth token to the console.

// The app flow is as follows:
// 1. Initialize the GoogleSignInDartio package.
// 2. Present the user with a button to sign in with Google.
// 3. Sign in with Google using the GoogleSignInDartio package.
// 4. Get the user's data.
// 5. Authorize actions on behalf of the user.
// 6. Print the user's data and auth token to the console.

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Unrar File Flutter Package
================================

The `unrar_file` Flutter package is a utility library that allows developers to extract RAR archives within their Flutter applications. This package is particularly useful when dealing with compressed files in a mobile app, providing an efficient way to handle RAR files.

### Key Features

*   Extract RAR archives
*   Support for password-protected archives
*   Asynchronous extraction for non-blocking UI

### When to Use

*   File manager apps that need to handle RAR archives
*   Apps that require data to be compressed in RAR format
*   Any scenario where RAR extraction is necessary

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Using the Unrar File Package
=====================================

### Step 1: Add the Package to Your Project

Add the `unrar_file` package to your `pubspec.yaml` file:

```yml
dependencies:
  unrar_file: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:unrar_file/unrar_file.dart';
```

### Step 3: Extract a RAR Archive

Use the `UnrarFile` class to extract a RAR archive:

```dart
void extractArchive() async {
  final unrarFile = UnrarFile('path/to/archive.rar');
  await unrarFile.extract(to: 'path/to/extract/folder');
}
```

### Platform-Specific Details

*   **Android:** No additional configuration is required.
*   **iOS:** You need to add the following line to your `Info.plist` file:

```xml
<key>UIFileSharingEnabled</key>
<true/>
```

This allows your app to access files on the device.

### Optimizations

*   To improve performance, use asynchronous extraction:

```dart
void extractArchive() async {
  final unrarFile = UnrarFile('path/to/archive.rar');
  await unrarFile.extract(to: 'path/to/extract/folder', async: true);
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:unrar_file/unrar_file.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Unrar File Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  String _extractPath = '';

  void _extractArchive() async {
    // Create an instance of UnrarFile with the archive path
    final unrarFile = UnrarFile('path/to/archive.rar');

    // Extract the archive to the specified folder
    await unrarFile.extract(to: 'path/to/extract/folder');

    // Update the UI with the extraction path
    setState(() {
      _extractPath = 'path/to/extract/folder';
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Unrar File Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text('Extraction Path: $_extractPath'),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _extractArchive,
              child: Text('Extract Archive'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user clicks the "Extract Archive" button.
// 2. The _extractArchive method is called, which creates an instance of UnrarFile.
// 3. The extract method is called on the UnrarFile instance, which extracts the archive to the specified folder.
// 4. The extraction path is updated in the UI using setState.
// 5. The user can see the extraction path displayed on the screen.

// Final summary: This code demonstrates how to use the unrar_file package to extract a RAR archive in a Flutter application. The user can click a button to extract the archive, and the extraction path is displayed on the screen.
```

<-- END_MAIN -->
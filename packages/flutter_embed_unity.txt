<-- START_DESCRIPTION -->

# Flutter Embed Unity Package
================================

The `flutter_embed_unity` package allows you to embed Unity games and experiences into your Flutter applications. This package provides a way to render Unity scenes and interact with them from your Flutter code.

## When to Use This Package
---------------------------

You should use this package when you want to:

*   Embed a Unity game or experience into your Flutter app
*   Use Unity's 3D rendering capabilities in your Flutter app
*   Interact with Unity scenes from your Flutter code

## Features
------------

*   Embed Unity scenes into your Flutter app
*   Interact with Unity scenes from your Flutter code
*   Support for Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `flutter_embed_unity` package, you need to add it to your `pubspec.yaml` file:

```yml
dependencies:
  flutter_embed_unity: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Platform-Specific Setup
---------------------------

### Android

To use the package on Android, you need to add the following code to your `AndroidManifest.xml` file:

```xml
<application
    ...
    android:hardwareAccelerated="true"
    ...
>
```

### iOS

To use the package on iOS, you need to add the following code to your `Info.plist` file:

```xml
<key>UIRequiresFullScreen</key>
<true/>
```

## Using the Package
---------------------

To use the package, you need to create a `UnityWidget` and add it to your Flutter widget tree:

```dart
import 'package:flutter/material.dart';
import 'package:flutter_embed_unity/flutter_embed_unity.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: UnityWidget(
        onUnityCreated: (unity) {
          // Interact with the Unity scene
        },
      ),
    );
  }
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_embed_unity/flutter_embed_unity.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Embed Unity Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Step 1: Create a UnityWidget
  UnityWidget _unityWidget;

  @override
  void initState() {
    super.initState();
    // Step 2: Initialize the UnityWidget
    _unityWidget = UnityWidget(
      onUnityCreated: (unity) {
        // Step 3: Interact with the Unity scene
        unity.send('MyGameObject', 'MyMethod');
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: _unityWidget,
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app.
// 2. The app creates a UnityWidget.
// 3. The UnityWidget is initialized and the onUnityCreated callback is called.
// 4. The onUnityCreated callback interacts with the Unity scene by sending a message to a GameObject.
// 5. The Unity scene receives the message and executes the corresponding method.
// 6. The Unity scene renders the updated frame.
// 7. The app displays the updated frame.

// In summary, the app embeds a Unity scene and interacts with it by sending messages to GameObjects.
// The Unity scene receives the messages and updates the frame accordingly.
// The app then displays the updated frame.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

Float Bubble
================
The `float_bubble` package is a Flutter package that allows you to create a floating bubble that can be used to provide a quick access to a feature or a shortcut. It is a highly customizable package that can be used in a variety of scenarios.

When to use this package?
------------------------

* When you want to provide a quick access to a feature or a shortcut.
* When you want to create a floating action button that can be used to perform a specific action.
* When you want to create a floating navigation menu that can be used to navigate between different screens.

Features
--------

* Highly customizable: The package provides a wide range of customization options that can be used to change the appearance and behavior of the floating bubble.
* Easy to use: The package is very easy to use and requires minimal setup.
* Platform-specific details: The package takes care of platform-specific details, so you don't have to worry about them.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup
-----

To use the `float_bubble` package, you need to add it to your `pubspec.yaml` file:
```yml
dependencies:
  float_bubble: ^1.0.0
```
Then, you need to import the package in your Dart file:
```dart
import 'package:float_bubble/float_bubble.dart';
```
Basic Usage
------------

To create a floating bubble, you need to create an instance of the `FloatBubble` class and pass it to the `FloatBubble` widget:
```dart
FloatBubble floatBubble = FloatBubble(
  child: Icon(Icons.add),
  onTap: () {
    print('Floating bubble tapped');
  },
);

FloatBubbleWidget(floatBubble: floatBubble)
```
Customization
-------------

The `FloatBubble` class provides a wide range of customization options that can be used to change the appearance and behavior of the floating bubble. Here are some examples:
```dart
FloatBubble floatBubble = FloatBubble(
  child: Icon(Icons.add),
  onTap: () {
    print('Floating bubble tapped');
  },
  backgroundColor: Colors.red,
  foregroundColor: Colors.white,
  padding: 10.0,
  margin: 10.0,
  borderRadius: 10.0,
  elevation: 10.0,
);
```
Platform-Specific Details
-------------------------

The `float_bubble` package takes care of platform-specific details, so you don't have to worry about them. However, if you want to customize the appearance and behavior of the floating bubble on a specific platform, you can use the `platform` property:
```dart
FloatBubble floatBubble = FloatBubble(
  child: Icon(Icons.add),
  onTap: () {
    print('Floating bubble tapped');
  },
  platform: TargetPlatform.android,
);
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:float_bubble/float_bubble.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Float Bubble Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  FloatBubble floatBubble;

  @override
  void initState() {
    super.initState();
    floatBubble = FloatBubble(
      child: Icon(Icons.add),
      onTap: () {
        print('Floating bubble tapped');
      },
      backgroundColor: Colors.red,
      foregroundColor: Colors.white,
      padding: 10.0,
      margin: 10.0,
      borderRadius: 10.0,
      elevation: 10.0,
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Float Bubble Demo'),
      ),
      body: Center(
        child: FloatBubbleWidget(floatBubble: floatBubble),
      ),
    );
  }
}
```

// This is the main entry point of the application.
// The `MyApp` widget is the root widget of the application.
// It uses the `MaterialApp` widget to create a material design app.
// The `MyHomePage` widget is the home page of the application.
// It uses the `Scaffold` widget to create a basic material design layout.
// The `FloatBubbleWidget` is used to display the floating bubble.
// The `FloatBubble` class is used to create the floating bubble.
// The `onTap` property is used to handle the tap event on the floating bubble.
// The `backgroundColor`, `foregroundColor`, `padding`, `margin`, `borderRadius`, and `elevation` properties are used to customize the appearance of the floating bubble.

// When the application is run, the `MyApp` widget is created and displayed.
// The `MyHomePage` widget is then created and displayed as the home page of the application.
// The `FloatBubbleWidget` is used to display the floating bubble on the home page.
// When the floating bubble is tapped, the `onTap` event is triggered and the message "Floating bubble tapped" is printed to the console.

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Recursive Tree Flutter Package
=====================================

The `recursive_tree_flutter` package is a powerful tool for creating recursive tree structures in Flutter applications. It provides a simple and efficient way to display hierarchical data, making it perfect for applications that require tree-like structures, such as file systems, organizational charts, or comment threads.

### When to Use This Package

* Displaying hierarchical data in a tree-like structure
* Creating file system or directory structures
* Building organizational charts or family trees
* Displaying comment threads or nested conversations

### Features

* Easy to use and customize
* Supports recursive tree structures
* Customizable node widgets
* Supports multiple tree structures

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using Recursive Tree Flutter
=====================================================

### Step 1: Add the Package to Your Project

Add the `recursive_tree_flutter` package to your `pubspec.yaml` file:
```yml
dependencies:
  flutter:
    sdk: flutter
  recursive_tree_flutter: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:recursive_tree_flutter/recursive_tree_flutter.dart';
```
### Step 3: Create a Tree Structure

Create a tree structure using the `RecursiveTree` widget:
```dart
RecursiveTree(
  root: Node(
    value: 'Root Node',
    children: [
      Node(
        value: 'Child Node 1',
        children: [
          Node(
            value: 'Grandchild Node 1',
          ),
          Node(
            value: 'Grandchild Node 2',
          ),
        ],
      ),
      Node(
        value: 'Child Node 2',
      ),
    ],
  ),
)
```
### Step 4: Customize the Node Widgets

Customize the node widgets using the `nodeBuilder` property:
```dart
RecursiveTree(
  root: Node(
    value: 'Root Node',
    children: [
      // ...
    ],
  ),
  nodeBuilder: (node) {
    return Container(
      padding: EdgeInsets.all(16),
      decoration: BoxDecoration(
        border: Border.all(color: Colors.black),
      ),
      child: Text(node.value),
    );
  },
)
```
### Platform-Specific Details

* Android: No additional configuration required.
* iOS: No additional configuration required.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:recursive_tree_flutter/recursive_tree_flutter.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Recursive Tree Flutter Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Recursive Tree Flutter Demo'),
      ),
      body: Center(
        child: RecursiveTree(
          root: Node(
            value: 'Root Node',
            children: [
              Node(
                value: 'Child Node 1',
                children: [
                  Node(
                    value: 'Grandchild Node 1',
                  ),
                  Node(
                    value: 'Grandchild Node 2',
                  ),
                ],
              ),
              Node(
                value: 'Child Node 2',
              ),
            ],
          ),
          nodeBuilder: (node) {
            // Step 1: Create a container for the node
            return Container(
              padding: EdgeInsets.all(16),
              decoration: BoxDecoration(
                border: Border.all(color: Colors.black),
              ),
              child: Column(
                children: [
                  // Step 2: Display the node value
                  Text(node.value),
                  // Step 3: Recursively display the child nodes
                  if (node.children != null)
                    Column(
                      children: node.children.map((child) {
                        return RecursiveTree(
                          root: child,
                          nodeBuilder: (childNode) {
                            return Container(
                              padding: EdgeInsets.all(16),
                              decoration: BoxDecoration(
                                border: Border.all(color: Colors.black),
                              ),
                              child: Text(childNode.value),
                            );
                          },
                        );
                      }).toList(),
                    ),
                ],
              ),
            );
          },
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app and is presented with a recursive tree structure.
// 2. The tree structure is built using the `RecursiveTree` widget, which takes a `root` node and a `nodeBuilder` function as properties.
// 3. The `nodeBuilder` function is called for each node in the tree, and is responsible for building the UI for that node.
// 4. In this example, the `nodeBuilder` function creates a container for the node, displays the node value, and recursively displays the child nodes.
// 5. The recursive display of child nodes is achieved by calling the `RecursiveTree` widget again for each child node.
```

<-- END_MAIN -->

In summary, the code flows as follows:

* The user runs the app and is presented with a recursive tree structure.
* The tree structure is built using the `RecursiveTree` widget, which takes a `root` node and a `nodeBuilder` function as properties.
* The `nodeBuilder` function is called for each node in the tree, and is responsible for building the UI for that node.
* The `nodeBuilder` function creates a container for the node, displays the node value, and recursively displays the child nodes.
* The recursive display of child nodes is achieved by calling the `RecursiveTree` widget again for each child node.
<-- START_DESCRIPTION -->

# Flutter Sanity Image URL Package
=====================================

The `flutter_sanity_image_url` package is a Flutter library that allows you to easily work with image URLs from Sanity.io, a popular headless CMS. This package provides a simple way to fetch, cache, and display images from Sanity.io in your Flutter app.

## When to Use This Package
---------------------------

You should use this package when:

* You are building a Flutter app that uses Sanity.io as its CMS.
* You need to display images from Sanity.io in your app.
* You want to cache images to improve performance and reduce network requests.

## Features
------------

* Fetches image URLs from Sanity.io.
* Caches images to improve performance.
* Supports various image formats (e.g., JPEG, PNG, WebP).
* Works on both Android and iOS platforms.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `flutter_sanity_image_url` package, follow these steps:

### Step 1: Add the Package to Your `pubspec.yaml` File

```yml
dependencies:
  flutter_sanity_image_url: ^1.0.0
```

### Step 2: Import the Package in Your Dart File

```dart
import 'package:flutter_sanity_image_url/flutter_sanity_image_url.dart';
```

### Step 3: Initialize the Package

```dart
void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Sanity Image URL Demo',
      home: RealFlutter(),
    );
  }
}
```

### Step 4: Use the Package to Fetch and Display Images

```dart
class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Sanity Image URL Demo'),
      ),
      body: Center(
        child: Image(
          image: SanityImage(
            'https://your-sanity-project-id.api.sanity.io/v1/images/your-image-id',
          ),
        ),
      ),
    );
  }
}
```

### Platform-Specific Details

* Android: Make sure to add the `android.permission.INTERNET` permission to your `AndroidManifest.xml` file.
* iOS: Make sure to add the `NSAppTransportSecurity` key to your `Info.plist` file.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_sanity_image_url/flutter_sanity_image_url.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Sanity Image URL Demo',
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Step 1: Create a SanityImage object with the image URL
    SanityImage sanityImage = SanityImage(
      'https://your-sanity-project-id.api.sanity.io/v1/images/your-image-id',
    );

    // Step 2: Use the SanityImage object as the image source for an Image widget
    Image image = Image(image: sanityImage);

    // Step 3: Display the Image widget in the app
    return Scaffold(
      appBar: AppBar(
        title: Text('Sanity Image URL Demo'),
      ),
      body: Center(
        child: image,
      ),
    );
  }
}

// The app flow is as follows:
// 1. The user runs the app.
// 2. The app creates a SanityImage object with the image URL.
// 3. The app uses the SanityImage object as the image source for an Image widget.
// 4. The app displays the Image widget in the app.
// 5. The SanityImage object fetches the image from the Sanity.io API.
// 6. The SanityImage object caches the image to improve performance.
// 7. The app displays the cached image.

// Final summary: The app uses the flutter_sanity_image_url package to fetch and display an image from Sanity.io. The package handles caching and image formatting, making it easy to use Sanity.io images in the app.
```

<-- END_MAIN -->
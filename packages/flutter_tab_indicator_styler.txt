<-- START_DESCRIPTION -->

# Flutter Tab Indicator Styler Package
=====================================

The `flutter_tab_indicator_styler` package is a Flutter library that allows you to customize the style of the tab indicator in a `TabBar`. It provides a range of features to customize the appearance of the tab indicator, including the ability to change its color, shape, and size.

## When to Use This Package
---------------------------

You can use this package when you want to customize the appearance of the tab indicator in your Flutter app. For example, you may want to change the color of the tab indicator to match your app's brand color, or you may want to use a custom shape for the tab indicator.

## Features
------------

*   Customizable tab indicator color
*   Customizable tab indicator shape (e.g. rectangle, triangle, etc.)
*   Customizable tab indicator size
*   Supports both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Using the Flutter Tab Indicator Styler Package
=====================================================

## Step 1: Add the Package to Your Pubspec.yaml File
------------------------------------------------

To use the `flutter_tab_indicator_styler` package, you need to add it to your `pubspec.yaml` file. You can do this by adding the following line to the `dependencies` section of your `pubspec.yaml` file:

```yml
dependencies:
  flutter_tab_indicator_styler: ^1.0.0
```

## Step 2: Import the Package in Your Dart File
---------------------------------------------

Once you have added the package to your `pubspec.yaml` file, you need to import it in your Dart file. You can do this by adding the following line to the top of your Dart file:

```dart
import 'package:flutter_tab_indicator_styler/flutter_tab_indicator_styler.dart';
```

## Step 3: Use the Package to Customize the Tab Indicator
------------------------------------------------------

To customize the tab indicator, you can use the `TabIndicatorStyler` widget. This widget takes a number of properties that allow you to customize the appearance of the tab indicator. For example, you can use the `color` property to change the color of the tab indicator, or you can use the `shape` property to change the shape of the tab indicator.

Here is an example of how you can use the `TabIndicatorStyler` widget to customize the tab indicator:

```dart
TabBar(
  indicator: TabIndicatorStyler(
    color: Colors.red,
    shape: IndicatorShape.rectangle,
  ),
  tabs: [
    Tab(text: 'Tab 1'),
    Tab(text: 'Tab 2'),
    Tab(text: 'Tab 3'),
  ],
)
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_tab_indicator_styler/flutter_tab_indicator_styler.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Tab Indicator Styler Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> with TickerProviderStateMixin {
  late TabController _tabController;

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 3, vsync: this);
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    // Create a TabBar with a customized tab indicator
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Tab Indicator Styler Demo'),
        bottom: TabBar(
          controller: _tabController,
          // Use the TabIndicatorStyler widget to customize the tab indicator
          indicator: TabIndicatorStyler(
            color: Colors.red, // Change the color of the tab indicator
            shape: IndicatorShape.rectangle, // Change the shape of the tab indicator
          ),
          tabs: [
            Tab(text: 'Tab 1'),
            Tab(text: 'Tab 2'),
            Tab(text: 'Tab 3'),
          ],
        ),
      ),
      body: TabBarView(
        controller: _tabController,
        children: [
          Center(child: Text('Tab 1 content')),
          Center(child: Text('Tab 2 content')),
          Center(child: Text('Tab 3 content')),
        ],
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app and is presented with a TabBar that has a customized tab indicator.
// 2. The user can select a tab by tapping on it, which will update the tab indicator and display the corresponding content.
// 3. The tab indicator is customized using the TabIndicatorStyler widget, which allows for changes to the color and shape of the indicator.
// 4. The app uses a TabController to manage the state of the TabBar and TabBarView.
// 5. The app uses a Scaffold to provide a basic material design layout structure.
```

// The above code creates a simple Flutter app with a TabBar that has a customized tab indicator.
// The tab indicator is customized using the TabIndicatorStyler widget, which allows for changes to the color and shape of the indicator.
// The app uses a TabController to manage the state of the TabBar and TabBarView.
// The app uses a Scaffold to provide a basic material design layout structure.

<-- END_MAIN -->
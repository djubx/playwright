<-- START_DESCRIPTION -->

# Flutter Draggable List Package
================================

The `flutter_draggable_list` package is a powerful and flexible library that allows you to create draggable lists in your Flutter applications. With this package, you can create lists where users can drag and drop items to reorder them.

## When to Use This Package
---------------------------

You can use this package in a variety of scenarios, such as:

* Creating a to-do list app where users can reorder tasks
* Building a music playlist app where users can reorder songs
* Developing a task management app where users can reorder tasks

## Features
------------

The `flutter_draggable_list` package comes with a range of features, including:

* Support for both vertical and horizontal lists
* Customizable drag handles
* Support for multiple drag modes (e.g., drag to reorder, drag to delete)
* Animations for smooth dragging and dropping

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `flutter_draggable_list` package, you'll need to add it to your `pubspec.yaml` file:

```yml
dependencies:
  flutter_draggable_list: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Platform-Specific Details
---------------------------

The `flutter_draggable_list` package works on both Android and iOS platforms. However, there are some platform-specific details to keep in mind:

* On Android, you'll need to add the following code to your `AndroidManifest.xml` file to enable drag-and-drop functionality:
```xml
<application
    ...
    android:hardwareAccelerated="true"
    ...
>
```
* On iOS, you'll need to add the following code to your `Info.plist` file to enable drag-and-drop functionality:
```xml
<key>UIUserInterfaceStyle</key>
<string>Light</string>
```

## Using the Package
---------------------

To use the `flutter_draggable_list` package, you'll need to create a `DraggableList` widget and pass in a list of items:

```dart
import 'package:flutter/material.dart';
import 'package:flutter_draggable_list/flutter_draggable_list.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  List<String> _items = ['Item 1', 'Item 2', 'Item 3'];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Draggable List Demo'),
      ),
      body: DraggableList(
        items: _items,
        itemBuilder: (context, item) {
          return ListTile(
            title: Text(item),
          );
        },
        onItemReordered: (oldIndex, newIndex) {
          setState(() {
            _items.insert(newIndex, _items.removeAt(oldIndex));
          });
        },
      ),
    );
  }
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_draggable_list/flutter_draggable_list.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Draggable List Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  List<String> _items = ['Item 1', 'Item 2', 'Item 3'];

  // Step 1: Create a DraggableList widget
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Draggable List Demo'),
      ),
      body: DraggableList(
        // Step 2: Pass in the list of items
        items: _items,
        // Step 3: Create an item builder to render each item
        itemBuilder: (context, item) {
          return ListTile(
            title: Text(item),
          );
        },
        // Step 4: Handle item reordering
        onItemReordered: (oldIndex, newIndex) {
          setState(() {
            _items.insert(newIndex, _items.removeAt(oldIndex));
          });
        },
      ),
    );
  }
}

// Application flow:
// 1. The user runs the app and sees a list of items.
// 2. The user drags an item to a new position in the list.
// 3. The onItemReordered callback is called with the old and new indices.
// 4. The list is updated by inserting the item at the new index and removing it from the old index.
// 5. The UI is updated to reflect the new list order.

```

<-- END_MAIN -->
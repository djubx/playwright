# Flutter Package: stripe_terminal

<!-- START_DESCRIPTION -->
## Description

The `stripe_terminal` Flutter package is designed to facilitate seamless integration of Stripe's Terminal SDK into Flutter applications. This package allows developers to accept in-person payments using Stripe's hardware, such as card readers, directly within their Flutter apps. It is particularly useful for businesses that require a point-of-sale (POS) solution, enabling them to manage transactions efficiently and securely.

### When to Use

- **Retail Applications**: If you are developing a retail app that requires in-person payment processing.
- **Event Management**: For applications that handle ticket sales or merchandise at events.
- **Food and Beverage**: Ideal for restaurants or cafes that need to process payments at the table or counter.

### Features

- **Card Reader Integration**: Connects with various Stripe card readers for processing payments.
- **Payment Processing**: Handles payment authorization, capture, and refunds.
- **Real-time Updates**: Provides real-time feedback on transaction status.
- **Error Handling**: Built-in mechanisms for managing errors during payment processing.
- **Cross-Platform Support**: Works on both Android and iOS devices.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
## Tutorial

### Setup Process

To get started with the `stripe_terminal` package, follow these steps:

1. **Add Dependency**: Open your `pubspec.yaml` file and add the `stripe_terminal` package.

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     stripe_terminal: ^latest_version
   ```

   Replace `^latest_version` with the latest version available on [pub.dev](https://pub.dev/packages/stripe_terminal).

2. **Platform-Specific Configuration**:

   #### Android
   - Ensure you have the required permissions in your `AndroidManifest.xml`:

     ```xml
     <uses-permission android:name="android.permission.INTERNET"/>
     <uses-permission android:name="android.permission.BLUETOOTH"/>
     <uses-permission android:name="android.permission.BLUETOOTH_ADMIN"/>
     ```

   - Add the following to your `build.gradle` file:

     ```groovy
     android {
         ...
         compileOptions {
             sourceCompatibility JavaVersion.VERSION_1_8
             targetCompatibility JavaVersion.VERSION_1_8
         }
     }
     ```

   #### iOS
   - Open your `Info.plist` and add the following keys:

     ```xml
     <key>NSBluetoothAlwaysUsageDescription</key>
     <string>This app requires Bluetooth access to connect to card readers.</string>
     <key>NSBluetoothPeripheralUsageDescription</key>
     <string>This app requires Bluetooth access to connect to card readers.</string>
     ```

3. **Initialize Stripe Terminal**: In your main application file, initialize the Stripe Terminal with your publishable key.

### Using the Package

After setting up the package, you can start using it in your application. Hereâ€™s a simple example of how to initialize the terminal and process a payment.

```dart
import 'package:flutter/material.dart';
import 'package:stripe_terminal/stripe_terminal.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  void initState() {
    super.initState();
    // Initialize Stripe Terminal with your publishable key
    StripeTerminal.initialize('your_publishable_key');
  }

  // Function to start a payment
  void startPayment() async {
    // Create a payment intent on your server and retrieve the client secret
    String clientSecret = await createPaymentIntent();

    // Present the card reader to the user
    await StripeTerminal.presentPaymentIntent(clientSecret);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Stripe Terminal Example')),
      body: Center(
        child: ElevatedButton(
          onPressed: startPayment,
          child: Text('Pay with Card'),
        ),
      ),
    );
  }

  // Mock function to create a payment intent
  Future<String> createPaymentIntent() async {
    // Call your backend to create a payment intent and return the client secret
    return 'your_client_secret';
  }
}
```

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
## Complete Example

```dart
import 'package:flutter/material.dart';
import 'package:stripe_terminal/stripe_terminal.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  void initState() {
    super.initState();
    // Initialize Stripe Terminal with your publishable key
    StripeTerminal.initialize('your_publishable_key');
  }

  // Function to start a payment
  void startPayment() async {
    // Create a payment intent on your server and retrieve the client secret
    String clientSecret = await createPaymentIntent();

    // Present the card reader to the user
    await StripeTerminal.presentPaymentIntent(clientSecret);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Stripe Terminal Example')),
      body: Center(
        child: ElevatedButton(
          onPressed: startPayment,
          child: Text('Pay with Card'),
        ),
      ),
    );
  }

  // Mock function to create a payment intent
  Future<String> createPaymentIntent() async {
    // Call your backend to create a payment intent and return the client secret
    return 'your_client_secret';
  }
}

// Application Flow Explanation:
// 1. The app initializes the Stripe Terminal with a publishable key in the initState method.
// 2. When the user taps the "Pay with Card" button, the startPayment function is called.
// 3. This function simulates creating a payment intent by calling createPaymentIntent, which should ideally call your backend service.
// 4. The client secret returned from the backend is then used to present the payment intent to the user via the Stripe card reader.
// 5. The user can then complete the payment using the card reader, and the app will handle the transaction process.
```
<!-- END_MAIN -->

## Summary

In this blog post, we explored the `stripe_terminal` Flutter package, which provides a robust solution for integrating Stripe's payment processing capabilities into Flutter applications. We covered the setup process, including platform-specific configurations for Android and iOS, and provided a complete example demonstrating how to initialize the terminal and process payments. This package is ideal for businesses looking to streamline their in-person payment processes, making it a valuable addition to any Flutter developer's toolkit.
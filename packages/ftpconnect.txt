<-- START_DESCRIPTION -->

# ftpconnect Flutter Package
==========================

The ftpconnect Flutter package is a library that allows you to connect to FTP servers from your Flutter application. It provides a simple and easy-to-use API for uploading and downloading files, creating directories, and more.

## When to Use This Package
---------------------------

You should use this package when you need to interact with an FTP server from your Flutter application. This can be useful in a variety of scenarios, such as:

* Uploading images or other files to a server
* Downloading files from a server for use in your application
* Creating directories on a server to organize files

## Features
------------

The ftpconnect package includes the following features:

* Connect to FTP servers using username and password authentication
* Upload files to the server
* Download files from the server
* Create directories on the server
* List files and directories on the server

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

## Setup
--------

To use the ftpconnect package, you need to add it to your pubspec.yaml file. You can do this by adding the following line to the dependencies section:

```yml
dependencies:
  ftpconnect: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Platform-Specific Details
---------------------------

### Android

On Android, you need to add the following permission to your AndroidManifest.xml file:

```xml
<uses-permission android:name="android.permission.INTERNET" />
```

### iOS

On iOS, you need to add the following line to your Info.plist file:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

## Using the Package
--------------------

To use the package, you need to import it into your Dart file:

```dart
import 'package:ftpconnect/ftpconnect.dart';
```

Then, you can create an instance of the FTPConnect class:

```dart
FTPConnect ftpConnect = FTPConnect('ftp.example.com', 'username', 'password');
```

You can then use the various methods of the FTPConnect class to interact with the FTP server. For example, you can use the `uploadFile` method to upload a file:

```dart
await ftpConnect.uploadFile('path/to/local/file.txt', 'path/to/remote/file.txt');
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:ftpconnect/ftpconnect.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'FTP Connect Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  FTPConnect _ftpConnect;

  @override
  void initState() {
    super.initState();
    _ftpConnect = FTPConnect('ftp.example.com', 'username', 'password');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('FTP Connect Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: _uploadFile,
              child: Text('Upload File'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _downloadFile,
              child: Text('Download File'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _createDirectory,
              child: Text('Create Directory'),
            ),
          ],
        ),
      ),
    );
  }

  _uploadFile() async {
    // Select a local file to upload
    final file = await FilePicker.platform.pickFile();
    if (file != null) {
      // Upload the file to the FTP server
      await _ftpConnect.uploadFile(file.path, 'path/to/remote/file.txt');
      print('File uploaded successfully!');
    }
  }

  _downloadFile() async {
    // Download a file from the FTP server
    final file = await _ftpConnect.downloadFile('path/to/remote/file.txt');
    if (file != null) {
      // Save the file to the local device
      await file.writeAsBytes(file.readAsBytesSync());
      print('File downloaded successfully!');
    }
  }

  _createDirectory() async {
    // Create a new directory on the FTP server
    await _ftpConnect.createDirectory('path/to/new/directory');
    print('Directory created successfully!');
  }
}

// The application flow is as follows:
// 1. The user opens the app and is presented with a screen containing three buttons: Upload File, Download File, and Create Directory.
// 2. When the user clicks the Upload File button, the app prompts them to select a local file to upload.
// 3. Once a file is selected, the app uploads it to the FTP server using the FTPConnect class.
// 4. When the user clicks the Download File button, the app downloads a file from the FTP server using the FTPConnect class.
// 5. When the user clicks the Create Directory button, the app creates a new directory on the FTP server using the FTPConnect class.
// 6. The app displays a success message to the user after each operation is completed.

```

<-- END_MAIN -->
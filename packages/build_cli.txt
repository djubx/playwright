<-- START_DESCRIPTION -->

**Build CLI Flutter Package: A Comprehensive Overview**
===========================================================

The `build_cli` Flutter package is a powerful tool that allows developers to create command-line interfaces (CLI) for their Flutter applications. With this package, you can create custom commands, handle arguments, and even integrate with other packages to enhance your app's functionality.

**When to Use This Package?**
-----------------------------

You should consider using the `build_cli` package when:

* You need to create a custom CLI for your Flutter app.
* You want to handle arguments and options in a structured way.
* You need to integrate with other packages that require a CLI.

**Key Features**
----------------

* Create custom commands with ease.
* Handle arguments and options using a simple and intuitive API.
* Support for subcommands and nested commands.
* Integration with other packages, such as `args` and `cli_util`.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setting Up the `build_cli` Package**
---------------------------------------

To use the `build_cli` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  build_cli: ^1.0.0
```
2. Run `flutter pub get` to install the package.
3. Import the package in your Dart file:
```dart
import 'package:build_cli/build_cli.dart';
```
**Platform-Specific Details**
-----------------------------

### Android

To use the `build_cli` package on Android, you need to add the following configuration to your `AndroidManifest.xml` file:
```xml
<application>
  <meta-data
    android:name="com.example.RealFlutter"
    android:exported="true" />
</application>
```
### iOS

To use the `build_cli` package on iOS, you need to add the following configuration to your `Info.plist` file:
```xml
<key>CFBundleExecutable</key>
<string>RealFlutter</string>
```
**Using the Package**
---------------------

To create a custom CLI, you need to create a new instance of the `Cli` class and define your commands:
```dart
void main() {
  final cli = Cli(
    commands: [
      Command(
        name: 'hello',
        description: 'Prints a hello message',
        action: (args) {
          print('Hello, world!');
        },
      ),
    ],
  );

  cli.run();
}
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
// Import the build_cli package
import 'package:build_cli/build_cli.dart';

// Define the main class
class RealFlutter {
  // Define the main method
  static void main() {
    // Create a new instance of the Cli class
    final cli = Cli(
      // Define the commands
      commands: [
        // Define the hello command
        Command(
          name: 'hello',
          description: 'Prints a hello message',
          action: (args) {
            // Print the hello message
            print('Hello, world!');
          },
        ),
        // Define the goodbye command
        Command(
          name: 'goodbye',
          description: 'Prints a goodbye message',
          action: (args) {
            // Print the goodbye message
            print('Goodbye, world!');
          },
        ),
      ],
    );

    // Run the CLI
    cli.run();
  }
}

// Explain the flow of the application
// The application starts by creating a new instance of the Cli class.
// The Cli class takes a list of commands as an argument.
// Each command is defined using the Command class.
// The Command class takes a name, description, and action as arguments.
// The action is a callback function that is called when the command is executed.
// In this example, we define two commands: hello and goodbye.
// The hello command prints a hello message, and the goodbye command prints a goodbye message.
// The Cli class runs the commands using the run method.
// The run method takes no arguments and returns no value.
// The application ends by running the CLI.

// Final summary: This code creates a custom CLI with two commands: hello and goodbye.
// The hello command prints a hello message, and the goodbye command prints a goodbye message.
// The CLI is run using the run method, which takes no arguments and returns no value.
```

<-- END_MAIN -->
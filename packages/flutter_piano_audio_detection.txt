```markdown
<!-- START_DESCRIPTION -->
# flutter_piano_audio_detection Package Overview

The `flutter_piano_audio_detection` package is a powerful tool for Flutter developers looking to integrate audio detection capabilities into their applications, specifically for piano sounds. This package allows you to detect musical notes played on a piano, making it ideal for music education apps, interactive learning tools, and games that involve musical elements.

## When to Use This Package
- **Music Education Apps**: To help users learn to play the piano by providing real-time feedback on the notes they play.
- **Interactive Games**: For games that require sound detection to trigger events based on musical notes.
- **Sound Analysis Tools**: To analyze and visualize piano sounds for various applications.

## Key Features
- **Real-time Audio Detection**: Detects piano notes in real-time as they are played.
- **High Accuracy**: Utilizes advanced algorithms to ensure accurate detection of musical notes.
- **Easy Integration**: Simple API that allows for quick setup and integration into existing Flutter applications.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS devices.

Overall, the `flutter_piano_audio_detection` package is a versatile solution for developers looking to add audio detection features to their Flutter applications.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Setup and Usage Tutorial for flutter_piano_audio_detection

## Installation
To get started with the `flutter_piano_audio_detection` package, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  flutter_piano_audio_detection: ^latest_version
```

Make sure to replace `^latest_version` with the latest version available on [pub.dev](https://pub.dev/packages/flutter_piano_audio_detection).

## Platform-Specific Configuration

### Android
1. Open your `android/app/build.gradle` file.
2. Ensure that you have the following permissions added to the `AndroidManifest.xml` file:

```xml
<uses-permission android:name="android.permission.RECORD_AUDIO"/>
```

### iOS
1. Open your `ios/Runner/Info.plist` file.
2. Add the following key to request microphone access:

```xml
<key>NSMicrophoneUsageDescription</key>
<string>This app requires access to the microphone to detect piano sounds.</string>
```

## Basic Usage
Once you have installed the package and configured your project, you can start using it in your Flutter application. Hereâ€™s a simple example of how to set up the audio detection.

```dart
import 'package:flutter/material.dart';
import 'package:flutter_piano_audio_detection/flutter_piano_audio_detection.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  String detectedNote = "No note detected";

  @override
  void initState() {
    super.initState();
    // Initialize the audio detection
    FlutterPianoAudioDetection.startListening((note) {
      setState(() {
        detectedNote = note; // Update the detected note
      });
    });
  }

  @override
  void dispose() {
    FlutterPianoAudioDetection.stopListening(); // Stop listening when the widget is disposed
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("Piano Audio Detection")),
      body: Center(
        child: Text(detectedNote, style: TextStyle(fontSize: 24)),
      ),
    );
  }
}
```

This code initializes the audio detection when the widget is created and updates the UI with the detected note in real-time. Make sure to handle permissions properly to ensure the app can access the microphone.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of flutter_piano_audio_detection

```dart
import 'package:flutter/material.dart';
import 'package:flutter_piano_audio_detection/flutter_piano_audio_detection.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  String detectedNote = "No note detected"; // Variable to hold the detected note

  @override
  void initState() {
    super.initState();
    // Start listening for piano audio detection
    FlutterPianoAudioDetection.startListening((note) {
      setState(() {
        detectedNote = note; // Update the detected note when a note is played
      });
    });
  }

  @override
  void dispose() {
    FlutterPianoAudioDetection.stopListening(); // Stop listening when the widget is disposed
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("Piano Audio Detection")), // App bar with title
      body: Center(
        child: Text(detectedNote, style: TextStyle(fontSize: 24)), // Display the detected note
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the RealFlutter widget.
// 2. In the initState method, we call startListening from the flutter_piano_audio_detection package.
// 3. The startListening method takes a callback function that updates the detectedNote variable whenever a note is detected.
// 4. The UI is updated using setState, which triggers a rebuild of the widget with the new detected note.
// 5. When the widget is disposed, we call stopListening to free up resources and stop audio detection.
```
<!-- END_MAIN -->
```

### Summary
In this blog post, we explored the `flutter_piano_audio_detection` package, detailing its features, installation process, and usage. We provided a complete example of a Flutter application that detects piano notes in real-time, demonstrating how to set up and utilize the package effectively. This package is particularly useful for music education apps and interactive games, making it a valuable addition to any Flutter developer's toolkit.
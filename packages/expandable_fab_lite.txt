# Expandable FAB Lite: A Comprehensive Guide

## <-- START_DESCRIPTION -->

### Description

The `expandable_fab_lite` Flutter package is a lightweight and customizable solution for creating expandable Floating Action Buttons (FABs) in your Flutter applications. This package allows developers to enhance user experience by providing a clean and intuitive way to present multiple actions without cluttering the UI. 

### When to Use

You might consider using `expandable_fab_lite` in scenarios such as:
- When you want to provide users with multiple actions related to a specific context without overwhelming the interface.
- In applications where screen real estate is limited, and you want to keep the UI clean and organized.
- For enhancing the interactivity of your app by allowing users to reveal additional options with a simple tap.

### Features

- **Expandable FAB**: The main feature is the expandable Floating Action Button that reveals additional buttons when tapped.
- **Customizable**: You can customize the appearance and behavior of the FAB and its expanded buttons.
- **Animation**: Smooth animations for expanding and collapsing the FAB, enhancing the user experience.
- **Easy Integration**: Simple to integrate into existing Flutter applications with minimal setup.

## <-- END_DESCRIPTION -->

## <-- START_TUTORIAL -->

### Tutorial

To get started with the `expandable_fab_lite` package, follow these steps:

#### Step 1: Add Dependency

Add the package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  expandable_fab_lite: ^1.0.0  # Check for the latest version on pub.dev
```

#### Step 2: Install the Package

Run the following command in your terminal to install the package:

```bash
flutter pub get
```

#### Step 3: Platform-Specific Configuration

For both Android and iOS, no additional configuration is required for basic usage. However, ensure that your Flutter environment is set up correctly for both platforms.

#### Step 4: Import the Package

In your Dart file, import the package:

```dart
import 'package:expandable_fab_lite/expandable_fab_lite.dart';
```

#### Step 5: Basic Usage

You can now use the `ExpandableFab` widget in your application. Hereâ€™s a simple example of how to implement it:

```dart
import 'package:flutter/material.dart';
import 'package:expandable_fab_lite/expandable_fab_lite.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Expandable FAB Lite Example')),
      body: Center(child: Text('Press the FAB to expand!')),
      floatingActionButton: ExpandableFab(
        distance: 112.0,
        children: [
          FloatingActionButton(
            onPressed: () => print('Action 1'),
            tooltip: 'Action 1',
            child: Icon(Icons.add),
          ),
          FloatingActionButton(
            onPressed: () => print('Action 2'),
            tooltip: 'Action 2',
            child: Icon(Icons.edit),
          ),
          FloatingActionButton(
            onPressed: () => print('Action 3'),
            tooltip: 'Action 3',
            child: Icon(Icons.delete),
          ),
        ],
      ),
    );
  }
}
```

## <-- END_TUTORIAL -->

## <-- START_MAIN -->

### Complete Example

```dart
import 'package:flutter/material.dart';
import 'package:expandable_fab_lite/expandable_fab_lite.dart';

void main() {
  runApp(MyApp());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Expandable FAB Lite Example',
      home: Scaffold(
        appBar: AppBar(title: Text('Expandable FAB Lite Example')),
        body: Center(child: Text('Press the FAB to expand!')),
        // The ExpandableFab widget is used here to create an expandable FAB
        floatingActionButton: ExpandableFab(
          distance: 112.0, // Distance between the main FAB and the expanded buttons
          children: [
            // Each child is a FloatingActionButton that performs an action
            FloatingActionButton(
              onPressed: () => print('Action 1'), // Action for the first button
              tooltip: 'Action 1',
              child: Icon(Icons.add), // Icon for the first button
            ),
            FloatingActionButton(
              onPressed: () => print('Action 2'), // Action for the second button
              tooltip: 'Action 2',
              child: Icon(Icons.edit), // Icon for the second button
            ),
            FloatingActionButton(
              onPressed: () => print('Action 3'), // Action for the third button
              tooltip: 'Action 3',
              child: Icon(Icons.delete), // Icon for the third button
            ),
          ],
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function runs the MyApp widget, which is the entry point of the application.
// 2. The RealFlutter widget builds the MaterialApp and sets up the home screen with an AppBar and a Center widget.
// 3. The ExpandableFab widget is placed as the floating action button, which contains three child FloatingActionButtons.
// 4. When the main FAB is pressed, it expands to reveal the three action buttons.
// 5. Each button has an onPressed callback that prints a message to the console when tapped, demonstrating how to handle actions.
```

## <-- END_MAIN -->

### Summary

In this blog post, we explored the `expandable_fab_lite` Flutter package, which provides a simple yet effective way to implement expandable Floating Action Buttons in your applications. We covered the installation process, basic usage, and provided a complete example with detailed comments explaining the application flow. This package is particularly useful for enhancing user experience by keeping the UI clean while still offering multiple actions.
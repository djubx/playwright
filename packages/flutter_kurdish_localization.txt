```markdown
<!-- START_DESCRIPTION -->
# Flutter Kurdish Localization Package

The `flutter_kurdish_localization` package is a powerful tool designed to facilitate the localization of Flutter applications for Kurdish-speaking users. This package provides a comprehensive solution for developers looking to create applications that cater to the Kurdish language, ensuring that users can interact with the app in their native tongue.

## When to Use This Package

You should consider using the `flutter_kurdish_localization` package when:
- You are developing a Flutter application targeting Kurdish-speaking audiences.
- You want to provide a localized experience that includes translations for UI elements, messages, and other text.
- You need to support multiple dialects of Kurdish, such as Kurmanji and Sorani.

## Features

- **Easy Integration**: The package can be easily integrated into existing Flutter projects with minimal setup.
- **Support for Multiple Dialects**: It allows for localization in different Kurdish dialects, enhancing user experience.
- **Comprehensive Translations**: The package includes a wide range of translations for common UI elements and messages.
- **Customizable**: Developers can easily add their own translations and modify existing ones to fit their application's needs.

By utilizing this package, developers can ensure that their applications are accessible and user-friendly for Kurdish speakers, ultimately broadening their user base and improving user satisfaction.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up flutter_kurdish_localization

In this tutorial, we will walk through the process of setting up the `flutter_kurdish_localization` package in a Flutter application. We will cover the necessary configurations for both Android and iOS platforms.

## Step 1: Add Dependency

To get started, add the `flutter_kurdish_localization` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  flutter_kurdish_localization: ^1.0.0  # Check for the latest version on pub.dev
```

## Step 2: Configure Android

For Android, ensure that your `android/app/build.gradle` file includes the following configurations:

```groovy
android {
    ...
    defaultConfig {
        ...
        // Ensure that the minSdkVersion is set to at least 21
        minSdkVersion 21
    }
}
```

## Step 3: Configure iOS

For iOS, you need to ensure that your `Info.plist` file includes the following settings to support localization:

```xml
<key>CFBundleLocalizations</key>
<array>
    <string>ku</string> <!-- Kurdish -->
</array>
```

## Step 4: Initialize the Package

In your main Dart file, initialize the localization package. Hereâ€™s how you can do it:

```dart
import 'package:flutter/material.dart';
import 'package:flutter_kurdish_localization/flutter_kurdish_localization.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Kurdish Localization Demo',
      localizationsDelegates: [
        KurdishLocalization.delegate, // Add the localization delegate
        GlobalMaterialLocalizations.delegate,
        GlobalWidgetsLocalizations.delegate,
      ],
      supportedLocales: [
        const Locale('ku', ''), // Kurdish
      ],
      home: RealFlutter(), // Main application widget
    );
  }
}
```

## Step 5: Using Translations

To use translations in your widgets, you can access the localized strings like this:

```dart
Text(KurdishLocalization.of(context).helloWorld),
```

This will display the localized "Hello World" string based on the user's language preference.

By following these steps, you will have successfully set up the `flutter_kurdish_localization` package in your Flutter application, allowing you to provide a localized experience for Kurdish-speaking users.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of flutter_kurdish_localization

```dart
import 'package:flutter/material.dart';
import 'package:flutter_kurdish_localization/flutter_kurdish_localization.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Kurdish Localization Demo',
      localizationsDelegates: [
        KurdishLocalization.delegate, // Delegate for Kurdish localization
        GlobalMaterialLocalizations.delegate,
        GlobalWidgetsLocalizations.delegate,
      ],
      supportedLocales: [
        const Locale('ku', ''), // Support for Kurdish language
      ],
      home: RealFlutter(), // Main application widget
    );
  }
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(KurdishLocalization.of(context).appTitle), // Localized app title
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(KurdishLocalization.of(context).helloWorld), // Localized greeting
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                // Action for button press
              },
              child: Text(KurdishLocalization.of(context).clickMe), // Localized button text
            ),
          ],
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function initializes the app by calling runApp with MyApp.
// 2. MyApp sets up the MaterialApp with localization delegates and supported locales.
// 3. The home property of MaterialApp is set to RealFlutter, which is the main screen of the app.
// 4. In RealFlutter, the AppBar displays a localized title.
// 5. The body contains a centered column with a localized greeting and a button.
// 6. When the button is pressed, it can trigger an action (currently a placeholder).
// 7. The localized strings are accessed using KurdishLocalization.of(context) to ensure the correct language is displayed.
```
<!-- END_MAIN -->
``` 

This structured blog provides a comprehensive overview of the `flutter_kurdish_localization` package, guiding users through its setup and usage while offering a complete example to illustrate its functionality.
<-- START_DESCRIPTION -->

# Well Formed Flutter Package
The `well_formed` Flutter package is a powerful tool for validating and formatting user input in Flutter applications. It provides a simple and efficient way to ensure that user input conforms to a specific format, such as email addresses, phone numbers, or passwords.

## Features
The `well_formed` package offers the following features:

*   Validation of user input against a set of predefined rules
*   Customizable validation rules
*   Support for multiple input formats
*   Real-time validation and feedback

## When to Use
The `well_formed` package is ideal for use cases where user input needs to be validated and formatted in real-time, such as:

*   Login and registration forms
*   Contact forms
*   Payment processing forms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Well Formed Package
To use the `well_formed` package in your Flutter application, follow these steps:

1.  Add the package to your `pubspec.yaml` file:

    ```yml
dependencies:
  flutter:
    sdk: flutter
  well_formed: ^1.0.0
```

2.  Run `flutter pub get` to install the package.
3.  Import the package in your Dart file:

    ```dart
import 'package:well_formed/well_formed.dart';
```

## Platform-Specific Details
The `well_formed` package works seamlessly on both Android and iOS platforms. However, you may need to configure the keyboard type for each platform to ensure optimal user experience.

For Android, you can configure the keyboard type by using the `keyboardType` property of the `TextFormField` widget:

```dart
TextFormField(
  keyboardType: TextInputType.emailAddress,
  // ...
)
```

For iOS, you can configure the keyboard type by using the `keyboardType` property of the `TextFormField` widget:

```dart
TextFormField(
  keyboardType: TextInputType.emailAddress,
  // ...
)
```

## Required Configurations and Optimizations
To get the most out of the `well_formed` package, consider the following configurations and optimizations:

*   Use the `WellFormed` widget to wrap your form fields and enable real-time validation.
*   Use the `WellFormedRule` class to define custom validation rules.
*   Use the `WellFormedFormat` class to define custom input formats.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:well_formed/well_formed.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Well Formed Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _formKey = GlobalKey<FormState>();
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Well Formed Demo'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: WellFormed(
          formKey: _formKey,
          child: Column(
            children: [
              TextFormField(
                controller: _emailController,
                decoration: InputDecoration(
                  labelText: 'Email',
                  border: OutlineInputBorder(),
                ),
                validator: (value) {
                  if (!WellFormedRule.email(value!)) {
                    return 'Invalid email';
                  }
                  return null;
                },
              ),
              SizedBox(height: 16),
              TextFormField(
                controller: _passwordController,
                decoration: InputDecoration(
                  labelText: 'Password',
                  border: OutlineInputBorder(),
                ),
                validator: (value) {
                  if (!WellFormedRule.password(value!)) {
                    return 'Invalid password';
                  }
                  return null;
                },
              ),
              SizedBox(height: 16),
              ElevatedButton(
                onPressed: () {
                  if (_formKey.currentState!.validate()) {
                    // Form is valid, proceed with submission
                  }
                },
                child: Text('Submit'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user enters their email and password in the respective form fields.
// 2. The WellFormed widget wraps the form fields and enables real-time validation.
// 3. When the user submits the form, the validator functions are called to check if the input is valid.
// 4. If the input is valid, the form is submitted. Otherwise, an error message is displayed.
// 5. The WellFormedRule class is used to define custom validation rules for the email and password fields.
// 6. The WellFormedFormat class is used to define custom input formats for the email and password fields.

```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Draw Graph Flutter Package
================================

The `draw_graph` Flutter package is a powerful tool for creating and customizing graphs in your Flutter applications. It provides a wide range of features and configurations to suit various use cases.

## When to Use This Package
---------------------------

This package is ideal for applications that require data visualization, such as:

*   Financial apps: to display stock prices, market trends, or investment returns
*   Health and fitness apps: to track progress, display workout routines, or monitor vital signs
*   Educational apps: to illustrate mathematical concepts, display scientific data, or create interactive simulations

## Features
------------

The `draw_graph` package offers the following features:

*   Customizable graph styles: choose from various colors, fonts, and line styles
*   Support for multiple graph types: line, bar, pie, and scatter plots
*   Interactive graphs: zoom, pan, and tap to view data points
*   Real-time data updates: update graph data dynamically

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Draw Graph Package
------------------------------------

To use the `draw_graph` package in your Flutter project, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:

```yml
dependencies:
  draw_graph: ^0.1.0
```

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:draw_graph/draw_graph.dart';
```

### Step 3: Create a Graph

Create a graph using the `Graph` widget:

```dart
Graph(
  data: [
    GraphData(
      id: 'Graph 1',
      data: [
        GraphPoint(x: 0, y: 10),
        GraphPoint(x: 1, y: 20),
        GraphPoint(x: 2, y: 30),
      ],
    ),
  ],
)
```

### Platform-Specific Details

*   For Android, add the following line to your `AndroidManifest.xml` file:

    ```xml
<uses-feature android:name="android.hardware.touchscreen" android:required="false" />
```

*   For iOS, add the following line to your `Info.plist` file:

    ```xml
<key>UIRequiresFullScreen</key>
<true/>
```

### Configurations and Optimizations

*   To customize the graph style, use the `GraphStyle` widget:

    ```dart
GraphStyle(
  color: Colors.blue,
  fontSize: 14,
  fontStyle: FontStyle.normal,
)
```

*   To optimize performance, use the `GraphOptimization` widget:

    ```dart
GraphOptimization(
  enable: true,
  cache: true,
)
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:draw_graph/draw_graph.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Draw Graph Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  List<GraphData> _data = [
    GraphData(
      id: 'Graph 1',
      data: [
        GraphPoint(x: 0, y: 10),
        GraphPoint(x: 1, y: 20),
        GraphPoint(x: 2, y: 30),
      ],
    ),
    GraphData(
      id: 'Graph 2',
      data: [
        GraphPoint(x: 0, y: 40),
        GraphPoint(x: 1, y: 50),
        GraphPoint(x: 2, y: 60),
      ],
    ),
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Draw Graph Demo'),
      ),
      body: Center(
        child: Graph(
          data: _data,
          style: GraphStyle(
            color: Colors.blue,
            fontSize: 14,
            fontStyle: FontStyle.normal,
          ),
          optimization: GraphOptimization(
            enable: true,
            cache: true,
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app and is presented with a graph displaying two sets of data.
// 2. The graph is customized with a blue color, font size 14, and normal font style.
// 3. The graph is optimized for performance with caching enabled.
// 4. The user can interact with the graph by zooming, panning, and tapping to view data points.
// 5. The graph updates in real-time as the user interacts with it.

// The code flow is as follows:
// 1. The `MyApp` widget is created and returned as the root of the app.
// 2. The `MyHomePage` widget is created and returned as the home page of the app.
// 3. The `_MyHomePageState` class is created to manage the state of the home page.
// 4. The `build` method is called to build the home page.
// 5. The `Graph` widget is created and returned as the child of the home page.
// 6. The `Graph` widget is customized with the `GraphStyle` and `GraphOptimization` widgets.
// 7. The graph is rendered and displayed to the user.

// In summary, the code creates a graph with two sets of data, customizes the graph style and optimization, and renders the graph to the user. The user can interact with the graph and it updates in real-time.
```

<-- END_MAIN -->
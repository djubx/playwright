```markdown
<-- START_DESCRIPTION -->

# Overview of the `shelf_static` Flutter Package

The `shelf_static` package is a part of the Dart `shelf` library, which is used for building web servers. This package specifically provides middleware for serving static files, such as HTML, CSS, JavaScript, images, and other assets. It is particularly useful when you need to serve static content alongside dynamic content in a web application.

## When to Use `shelf_static`

- **Web Applications**: When building a web application with Flutter, you might need to serve static files like images, stylesheets, or JavaScript files. `shelf_static` makes it easy to handle these files efficiently.
- **APIs with Static Content**: If your API needs to serve static documentation or assets, `shelf_static` can be integrated to manage these files.
- **Development and Testing**: During development, you might want to quickly set up a server to test static content delivery.

## Features

- **Efficient File Serving**: Optimized for serving static files with minimal configuration.
- **Customizable**: Allows configuration of headers, cache control, and more.
- **Integration with `shelf`**: Seamlessly integrates with other `shelf` middleware and handlers.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using `shelf_static` in Flutter

In this section, we'll walk through the setup process for using the `shelf_static` package in a Flutter project. We'll cover platform-specific details for both Android and iOS.

## Setup Process

1. **Add Dependency**: First, add the `shelf_static` package to your `pubspec.yaml` file.

   ```yaml
   dependencies:
     shelf_static: ^1.0.0
   ```

2. **Import the Package**: In your Dart file, import the necessary libraries.

   ```dart
   import 'package:shelf/shelf.dart';
   import 'package:shelf/shelf_io.dart' as io;
   import 'package:shelf_static/shelf_static.dart';
   ```

3. **Create a Static Handler**: Use the `createStaticHandler` function to serve files from a directory.

   ```dart
   var handler = createStaticHandler('web', defaultDocument: 'index.html');
   ```

4. **Start the Server**: Use `shelf_io` to start the server.

   ```dart
   void main() async {
     var server = await io.serve(handler, 'localhost', 8080);
     print('Serving at http://${server.address.host}:${server.port}');
   }
   ```

## Platform-Specific Details

### Android

- Ensure that your Android project is configured to allow network requests. This typically involves setting the `android:usesCleartextTraffic` attribute to `true` in your `AndroidManifest.xml` if you're testing on a local server.

### iOS

- For iOS, ensure that your app's `Info.plist` allows arbitrary loads if you're testing on a local server. Add the following entry:

  ```xml
  <key>NSAppTransportSecurity</key>
  <dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
  </dict>
  ```

## Optimizations

- **Caching**: Configure caching headers to improve performance for static files.
- **Compression**: Use middleware to compress responses for faster load times.

<-- END_TUTORIAL -->

<-- MAIN -->

# Complete Example of Using `shelf_static` in Flutter

Below is a complete example of a Flutter application using the `shelf_static` package to serve static files.

```dart
import 'package:shelf/shelf.dart';
import 'package:shelf/shelf_io.dart' as io;
import 'package:shelf_static/shelf_static.dart';

void main() async {
  // Create a handler to serve static files from the 'web' directory
  var handler = createStaticHandler('web', defaultDocument: 'index.html');

  // Start the server on localhost at port 8080
  var server = await io.serve(handler, 'localhost', 8080);

  // Print the server address and port to the console
  print('Serving at http://${server.address.host}:${server.port}');
}

// The above code sets up a simple server using the shelf_static package.
// It serves static files from the 'web' directory, with 'index.html' as the default document.
// The server listens on localhost at port 8080, making it accessible via http://localhost:8080.

// Application Flow:
// 1. Import necessary packages for handling HTTP requests and serving static files.
// 2. Create a static file handler using `createStaticHandler`, specifying the directory and default document.
// 3. Start the server using `io.serve`, passing the handler, host, and port.
// 4. Output the server's address to the console for easy access during development.
```

// Summary of Application Flow:
// - The application imports the required packages to handle HTTP requests and serve static files.
// - A static file handler is created to serve files from the specified directory.
// - The server is started on a specified host and port, and the address is printed to the console.
// - This setup allows for efficient serving of static files, making it ideal for web applications or APIs that require static content delivery.

<-- END_MAIN -->
```
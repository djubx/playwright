<-- START_DESCRIPTION -->

# Connect to SQL Server Directly Flutter Package
=============================================

The `connect_to_sql_server_directly` Flutter package allows you to connect to a SQL Server database directly from your Flutter application. This package is useful when you need to perform complex database operations or when you want to reduce the latency of your application by avoiding the need to communicate with a server.

### Features

*   Connect to SQL Server databases using a connection string
*   Execute SQL queries (SELECT, INSERT, UPDATE, DELETE)
*   Support for transactions
*   Support for stored procedures

### When to Use This Package

*   When you need to perform complex database operations that are not supported by your server-side API
*   When you want to reduce the latency of your application by avoiding the need to communicate with a server
*   When you need to connect to a SQL Server database from a Flutter desktop application

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

## Step 1: Add the Package to Your Project

Add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  connect_to_sql_server_directly: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:connect_to_sql_server_directly/connect_to_sql_server_directly.dart';
```

## Step 3: Create a Connection String

Create a connection string to connect to your SQL Server database:

```dart
String connectionString = 'Server=myServerAddress;Database=myDataBase;User Id=myUsername;Password=myPassword;';
```

## Step 4: Connect to the Database

Use the `connect` function to connect to the database:

```dart
void main() async {
  // Create a connection string
  String connectionString = 'Server=myServerAddress;Database=myDataBase;User Id=myUsername;Password=myPassword;';

  // Connect to the database
  final connection = await connect(connectionString);

  // Use the connection to execute queries
  final results = await connection.query('SELECT * FROM myTable');

  // Close the connection
  await connection.close();
}
```

## Platform-Specific Details

### Android

To use this package on Android, you need to add the following permission to your `AndroidManifest.xml` file:

```xml
<uses-permission android:name="android.permission.INTERNET" />
```

### iOS

To use this package on iOS, you need to add the following lines to your `Info.plist` file:

```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:connect_to_sql_server_directly/connect_to_sql_server_directly.dart';

void main() async {
  // Create a connection string
  String connectionString = 'Server=myServerAddress;Database=myDataBase;User Id=myUsername;Password=myPassword;';

  // Connect to the database
  final connection = await connect(connectionString);

  // Use the connection to execute queries
  final results = await connection.query('SELECT * FROM myTable');

  // Create a list of widgets to display the results
  List<Widget> widgets = [];
  for (var row in results) {
    widgets.add(Text(row.toString()));
  }

  // Close the connection
  await connection.close();

  // Run the app
  runApp(MyApp(widgets));
}

class MyApp extends StatelessWidget {
  final List<Widget> widgets;

  MyApp(this.widgets);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Connect to SQL Server Directly Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: Scaffold(
        appBar: AppBar(
          title: Text('Connect to SQL Server Directly Demo'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: widgets,
          ),
        ),
      ),
    );
  }
}
```

// This is the main entry point of the app.
// First, we create a connection string to connect to the SQL Server database.
// Then, we use the `connect` function to establish a connection to the database.
// We use the connection to execute a SQL query and store the results in the `results` variable.
// We create a list of widgets to display the results.
// We close the connection to the database.
// Finally, we run the app using the `runApp` function.

// The `MyApp` class is a stateless widget that displays the results of the SQL query.
// It takes a list of widgets as a parameter, which is used to display the results.
// The `build` method returns a `MaterialApp` widget, which is the root widget of the app.
// The `MaterialApp` widget has a `title` property, which is displayed in the app bar.
// The `theme` property is used to set the theme of the app.
// The `home` property is used to set the home screen of the app.
// The home screen is a `Scaffold` widget, which has an app bar and a body.
// The app bar displays the title of the app.
// The body of the scaffold is a `Center` widget, which centers its child horizontally and vertically.
// The child of the `Center` widget is a `Column` widget, which displays the results of the SQL query.

<-- END_MAIN -->
```markdown
<!-- START_DESCRIPTION -->
# Overview of the app_version_update_lite Flutter Package

The `app_version_update_lite` package is a lightweight Flutter package designed to facilitate the management of app version updates. It allows developers to check for the latest version of their app and prompt users to update if they are using an outdated version. This package is particularly useful for maintaining app integrity and ensuring users have access to the latest features and security updates.

## When to Use This Package
- **Version Management**: When you want to ensure that users are always running the latest version of your app.
- **User Experience**: To enhance user experience by notifying users about new features or critical updates.
- **Security**: To mitigate risks associated with outdated versions that may have vulnerabilities.

## Key Features
- **Version Checking**: Easily check the current version of the app against the latest version available on the app store.
- **User Notifications**: Prompt users to update their app with customizable messages.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS platforms.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using app_version_update_lite

## Installation
To use the `app_version_update_lite` package, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  app_version_update_lite: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run `flutter pub get` to install the package.

## Platform-Specific Configuration

### Android
1. Open your `AndroidManifest.xml` file located at `android/app/src/main/AndroidManifest.xml`.
2. Ensure you have the following permissions:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
```

### iOS
1. Open your `Info.plist` file located at `ios/Runner/Info.plist`.
2. Add the following key to allow network requests:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

## Using the Package
To use the package, you can create a method to check for updates and prompt the user accordingly. Hereâ€™s a simple example:

```dart
import 'package:flutter/material.dart';
import 'package:app_version_update_lite/app_version_update_lite.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('App Version Update Example')),
        body: Center(
          child: ElevatedButton(
            onPressed: () async {
              // Check for updates
              bool isUpdateAvailable = await AppVersionUpdateLite.checkForUpdate(
                currentVersion: '1.0.0', // Current app version
                latestVersionUrl: 'https://example.com/latest_version.json', // URL to fetch the latest version
              );

              if (isUpdateAvailable) {
                // Notify user about the update
                showDialog(
                  context: context,
                  builder: (context) => AlertDialog(
                    title: Text('Update Available'),
                    content: Text('A new version of the app is available. Please update!'),
                    actions: [
                      TextButton(
                        onPressed: () {
                          // Redirect to app store or update link
                          Navigator.of(context).pop();
                        },
                        child: Text('Update Now'),
                      ),
                    ],
                  ),
                );
              }
            },
            child: Text('Check for Updates'),
          ),
        ),
      ),
    );
  }
}
```

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of Using app_version_update_lite

```dart
import 'package:flutter/material.dart';
import 'package:app_version_update_lite/app_version_update_lite.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('App Version Update Example')),
        body: Center(
          child: ElevatedButton(
            onPressed: () async {
              // Check for updates
              bool isUpdateAvailable = await AppVersionUpdateLite.checkForUpdate(
                currentVersion: '1.0.0', // Current app version
                latestVersionUrl: 'https://example.com/latest_version.json', // URL to fetch the latest version
              );

              if (isUpdateAvailable) {
                // Notify user about the update
                showDialog(
                  context: context,
                  builder: (context) => AlertDialog(
                    title: Text('Update Available'),
                    content: Text('A new version of the app is available. Please update!'),
                    actions: [
                      TextButton(
                        onPressed: () {
                          // Redirect to app store or update link
                          Navigator.of(context).pop();
                        },
                        child: Text('Update Now'),
                      ),
                    ],
                  ),
                );
              }
            },
            child: Text('Check for Updates'),
          ),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with a MaterialApp widget that contains a Scaffold.
// 2. An AppBar is created with the title 'App Version Update Example'.
// 3. In the body of the Scaffold, a Center widget is used to center the content.
// 4. An ElevatedButton is displayed with the text 'Check for Updates'.
// 5. When the button is pressed, the app calls the checkForUpdate method from the app_version_update_lite package.
// 6. The current version of the app is passed as '1.0.0', and a URL to fetch the latest version is provided.
// 7. If an update is available, an AlertDialog is shown to the user, informing them of the new version.
// 8. The dialog contains a button that, when pressed, can redirect the user to the app store or update link.
```
<!-- END_MAIN -->
``` 

This structured approach provides a comprehensive overview of the `app_version_update_lite` package, guiding developers through its features, setup, and practical usage in a Flutter application.
<-- START_DESCRIPTION -->

Nakama Flutter Package: A High-Level Overview
=============================================

The Nakama Flutter package is a client for Nakama, an open-source, scalable, and secure game server. It allows developers to easily integrate Nakama's features into their Flutter applications. With this package, you can create real-time multiplayer games, authenticate users, and store data in a scalable and secure manner.

When to Use Nakama
-----------------

Nakama is ideal for building real-time multiplayer games, but it can also be used for other applications that require real-time communication, such as live updates, chat apps, and collaborative editing tools.

Features of Nakama
-----------------

*   Real-time multiplayer capabilities
*   User authentication and authorization
*   Data storage and retrieval
*   Real-time messaging and chat
*   Matchmaking and leaderboards

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setting Up Nakama
-----------------

To use the Nakama Flutter package, you need to set up a Nakama server. You can do this by following these steps:

1.  Install the Nakama server using Docker or by building it from source.
2.  Create a new Nakama project using the Nakama CLI.
3.  Configure your Nakama server by editing the `config.yml` file.

Installing the Nakama Flutter Package
--------------------------------------

To install the Nakama Flutter package, add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  flutter_nakama: ^1.2.3
```

Then, run `flutter pub get` to install the package.

Using the Nakama Flutter Package
---------------------------------

To use the Nakama Flutter package, you need to import it in your Dart file:

```dart
import 'package:flutter_nakama/flutter_nakama.dart';
```

Then, you can create a new Nakama client instance:

```dart
final client = NakamaClient(
  host: 'your-nakama-server-url',
  port: 7350,
  ssl: true,
);
```

Platform-Specific Details
-------------------------

### Android

To use the Nakama Flutter package on Android, you need to add the following permissions to your `AndroidManifest.xml` file:

```xml
<uses-permission android:name="android.permission.INTERNET" />
```

### iOS

To use the Nakama Flutter package on iOS, you need to add the following lines to your `Info.plist` file:

```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_nakama/flutter_nakama.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Nakama Example',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _client = NakamaClient(
    host: 'your-nakama-server-url',
    port: 7350,
    ssl: true,
  );

  String _sessionId;

  Future<void> _login() async {
    // Login to the Nakama server
    final session = await _client.authenticate(
      username: 'your-username',
      password: 'your-password',
    );

    setState(() {
      _sessionId = session.id;
    });
  }

  Future<void> _joinChat() async {
    // Join a chat room
    final room = await _client.joinChat(
      roomId: 'your-room-id',
      sessionId: _sessionId,
    );

    print('Joined chat room: ${room.id}');
  }

  Future<void> _sendMessage() async {
    // Send a message to the chat room
    await _client.sendMessage(
      roomId: 'your-room-id',
      message: 'Hello, world!',
      sessionId: _sessionId,
    );

    print('Sent message');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Nakama Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: _login,
              child: Text('Login'),
            ),
            ElevatedButton(
              onPressed: _joinChat,
              child: Text('Join Chat'),
            ),
            ElevatedButton(
              onPressed: _sendMessage,
              child: Text('Send Message'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user clicks the "Login" button, which calls the _login function.
// 2. The _login function authenticates the user with the Nakama server and stores the session ID in the _sessionId variable.
// 3. The user clicks the "Join Chat" button, which calls the _joinChat function.
// 4. The _joinChat function joins a chat room using the session ID and prints the room ID to the console.
// 5. The user clicks the "Send Message" button, which calls the _sendMessage function.
// 6. The _sendMessage function sends a message to the chat room using the session ID and prints a success message to the console.
```

<-- END_MAIN -->
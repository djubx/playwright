<-- START_DESCRIPTION -->
# Flutter Guid Package Overview
=====================================

The `flutter_guid` package is a lightweight library that provides a simple way to generate and manage globally unique identifiers (GUIDs) in Flutter applications. GUIDs are commonly used to identify unique objects, records, or users in a system.

### When to Use This Package

You can use the `flutter_guid` package in the following scenarios:

*   When you need to generate unique identifiers for objects or records in your application.
*   When you need to manage and store GUIDs in a centralized manner.
*   When you need to ensure that the GUIDs generated are unique across different platforms and devices.

### Features

The `flutter_guid` package provides the following features:

*   **GUID Generation**: The package allows you to generate new GUIDs using the `Guid.newGuid` method.
*   **GUID Parsing**: You can parse existing GUIDs from strings using the `Guid.parse` method.
*   **GUID Validation**: The package provides a `Guid.isValid` method to validate whether a given GUID is valid or not.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->
# Setting Up and Using the Flutter Guid Package
=============================================

To use the `flutter_guid` package in your Flutter application, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  flutter_guid: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:flutter_guid/flutter_guid.dart';
```

### Step 3: Generate a New GUID

Use the `Guid.newGuid` method to generate a new GUID:

```dart
Guid newGuid = Guid.newGuid;
print(newGuid); // Output: a new GUID
```

### Step 4: Parse an Existing GUID

Use the `Guid.parse` method to parse an existing GUID from a string:

```dart
Guid existingGuid = Guid.parse('xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx');
print(existingGuid); // Output: the parsed GUID
```

### Step 5: Validate a GUID

Use the `Guid.isValid` method to validate whether a given GUID is valid or not:

```dart
bool isValid = Guid.isValid('xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx');
print(isValid); // Output: true or false
```

### Platform-Specific Details

The `flutter_guid` package works on both Android and iOS platforms. However, the GUID generation algorithm used may vary depending on the platform.

On Android, the package uses the `java.util.UUID` class to generate GUIDs.

On iOS, the package uses the `NSUUID` class to generate GUIDs.

<-- END_TUTORIAL -->

<-- START_MAIN -->
```dart
import 'package:flutter/material.dart';
import 'package:flutter_guid/flutter_guid.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Guid Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  Guid _newGuid;
  Guid _parsedGuid;
  bool _isValid;

  void _generateGuid() {
    // Generate a new GUID
    _newGuid = Guid.newGuid;
    print(_newGuid); // Output: a new GUID
  }

  void _parseGuid() {
    // Parse an existing GUID from a string
    _parsedGuid = Guid.parse('xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx');
    print(_parsedGuid); // Output: the parsed GUID
  }

  void _validateGuid() {
    // Validate whether a given GUID is valid or not
    _isValid = Guid.isValid('xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx');
    print(_isValid); // Output: true or false
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Guid Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: _generateGuid,
              child: Text('Generate GUID'),
            ),
            ElevatedButton(
              onPressed: _parseGuid,
              child: Text('Parse GUID'),
            ),
            ElevatedButton(
              onPressed: _validateGuid,
              child: Text('Validate GUID'),
            ),
          ],
        ),
      ),
    );
  }
}
```
// The application flow is as follows:
// 1. The user clicks on the "Generate GUID" button, which calls the `_generateGuid` function.
// 2. The `_generateGuid` function generates a new GUID using the `Guid.newGuid` method and prints it to the console.
// 3. The user clicks on the "Parse GUID" button, which calls the `_parseGuid` function.
// 4. The `_parseGuid` function parses an existing GUID from a string using the `Guid.parse` method and prints it to the console.
// 5. The user clicks on the "Validate GUID" button, which calls the `_validateGuid` function.
// 6. The `_validateGuid` function validates whether a given GUID is valid or not using the `Guid.isValid` method and prints the result to the console.

// In summary, this application demonstrates the usage of the `flutter_guid` package to generate, parse, and validate GUIDs in a Flutter application.
<-- END_MAIN -->
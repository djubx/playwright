<-- START_DESCRIPTION -->
# Flutter Rounded Date Picker Package
=====================================

The `flutter_rounded_date_picker` package provides a customizable, rounded date picker for Flutter applications. It allows users to select dates in a visually appealing way, making it perfect for applications that require date selection.

### When to Use This Package

This package is ideal for applications that require date selection, such as:

* Scheduling appointments
* Booking flights or hotels
* Setting reminders
* Creating events

### Features

* Customizable rounded date picker
* Support for multiple date formats
* Ability to set minimum and maximum dates
* Optional callback for date selection
* Localization support

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->
# Setting Up the Package
-------------------------

To use the `flutter_rounded_date_picker` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_rounded_date_picker: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:flutter_rounded_date_picker/flutter_rounded_date_picker.dart';
```
### Step 3: Use the Package

Create a `RoundedDatePicker` widget and pass the required parameters:
```dart
RoundedDatePicker(
  initialDate: DateTime.now(),
  firstDate: DateTime(2020),
  lastDate: DateTime(2025),
  onDateChanged: (date) {
    print(date);
  },
)
```
### Platform-Specific Details

* Android: No additional configuration required.
* iOS: Add the following line to your `Info.plist` file:
```xml
<key>NSCalendarUsageDescription</key>
<string>This app needs access to your calendar</string>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->
```dart
import 'package:flutter/material.dart';
import 'package:flutter_rounded_date_picker/flutter_rounded_date_picker.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Rounded Date Picker Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  DateTime _selectedDate = DateTime.now();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Rounded Date Picker Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Selected Date: ${_selectedDate.toString()}',
              style: TextStyle(fontSize: 24),
            ),
            SizedBox(height: 20),
            RoundedDatePicker(
              initialDate: _selectedDate,
              firstDate: DateTime(2020),
              lastDate: DateTime(2025),
              onDateChanged: (date) {
                setState(() {
                  _selectedDate = date;
                });
              },
            ),
          ],
        ),
      ),
    );
  }
}
```
// This is the main entry point of the application.
// The MyApp widget is created and run.
// 
// The MyApp widget builds a MaterialApp with a title and theme.
// The home property is set to MyHomePage, which is a stateful widget.
// 
// The MyHomePage widget builds a Scaffold with an AppBar and a body.
// The body contains a Column with a Text widget and a RoundedDatePicker widget.
// 
// The RoundedDatePicker widget is initialized with the current date and a date range.
// When the user selects a new date, the onDateChanged callback is called, updating the _selectedDate variable.
// 
// The Text widget displays the selected date.
// 
// The application flow is as follows:
// 1. The user runs the application.
// 2. The MyApp widget is created and builds the MaterialApp.
// 3. The MyHomePage widget is created and builds the Scaffold.
// 4. The user interacts with the RoundedDatePicker widget, selecting a new date.
// 5. The onDateChanged callback is called, updating the _selectedDate variable.
// 6. The Text widget is updated to display the new selected date.
<-- END_MAIN -->
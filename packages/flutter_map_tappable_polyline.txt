<-- START_DESCRIPTION -->

# Flutter Map Tappable Polyline Package
=====================================

The `flutter_map_tappable_polyline` package is a powerful tool for creating interactive maps in Flutter applications. It allows users to tap on polylines and polygons to perform custom actions, making it ideal for a wide range of use cases, such as:

*   Displaying additional information about a route or location
*   Triggering navigation to a specific point of interest
*   Highlighting important areas or boundaries

Key Features:

*   Support for both polylines and polygons
*   Customizable tap behavior and callback functions
*   Compatibility with various map providers (e.g., Google Maps, OpenStreetMap)

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `flutter_map_tappable_polyline` package, follow these steps:

1.  Add the package to your `pubspec.yaml` file:

    ```yml
dependencies:
  flutter_map_tappable_polyline: ^1.0.0
```

2.  Run `flutter pub get` to install the package.

### Platform-Specific Configurations

#### Android

No additional configurations are required for Android.

#### iOS

In your `Info.plist` file, add the following lines to enable map interactions:

```xml
<key>NSLocationWhenInUseUsageDescription</key>
<string>This app needs access to location to work properly</string>
<key>NSLocationAlwaysAndWhenInUseUsageDescription</key>
<string>This app needs access to location to work properly</string>
```

### Optimizations

For optimal performance, consider the following:

*   Use a reasonable number of polylines and polygons to avoid overwhelming the map.
*   Implement custom tap behavior and callback functions to handle user interactions efficiently.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_map/flutter_map.dart';
import 'package:flutter_map_tappable_polyline/flutter_map_tappable_polyline.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Define the map controller
  MapController _mapController = MapController();

  // Define the polyline points
  List<LatLng> _polylinePoints = [
    LatLng(37.7749, -122.4194),
    LatLng(37.7859, -122.4364),
    LatLng(37.7963, -122.4575),
  ];

  // Define the polygon points
  List<LatLng> _polygonPoints = [
    LatLng(37.7749, -122.4194),
    LatLng(37.7859, -122.4364),
    LatLng(37.7963, -122.4575),
    LatLng(37.7749, -122.4194),
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Map Tappable Polyline'),
      ),
      body: FlutterMap(
        mapController: _mapController,
        options: MapOptions(
          center: LatLng(37.7749, -122.4194),
          zoom: 12.0,
        ),
        layers: [
          TileLayerOptions(
            urlTemplate: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
            subdomains: ['a', 'b', 'c'],
          ),
          TappablePolylineLayerOptions(
            polylines: [
              TaggedPolyline(
                tag: 'polyline',
                points: _polylinePoints,
                color: Colors.blue,
                strokeWidth: 3.0,
              ),
            ],
            onTap: (tag) {
              print('Tapped polyline with tag: $tag');
            },
          ),
          TappablePolygonLayerOptions(
            polygons: [
              TaggedPolygon(
                tag: 'polygon',
                points: _polygonPoints,
                color: Colors.red,
                borderColor: Colors.black,
                borderStrokeWidth: 2.0,
              ),
            ],
            onTap: (tag) {
              print('Tapped polygon with tag: $tag');
            },
          ),
        ],
      ),
    );
  }
}

// The application flow:
// 1. The user opens the app and sees the map centered at the specified location.
// 2. The user can zoom in and out of the map using the standard map gestures.
// 3. The user can tap on the polyline or polygon to trigger the onTap callback.
// 4. The onTap callback prints a message to the console indicating which polyline or polygon was tapped.
// 5. The user can continue to interact with the map and tap on different polylines and polygons to see the corresponding messages.

```

<-- END_MAIN -->
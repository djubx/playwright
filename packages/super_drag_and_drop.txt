```markdown
<-- START_DESCRIPTION -->

# Super Drag and Drop Flutter Package

The `super_drag_and_drop` Flutter package is a powerful tool designed to enhance the drag-and-drop capabilities within Flutter applications. This package provides a seamless and intuitive way to implement drag-and-drop interactions, making it ideal for applications that require dynamic user interfaces, such as design tools, interactive games, or educational apps.

## Features

- **Cross-Platform Support**: Works seamlessly on both Android and iOS platforms.
- **Customizable Drag Widgets**: Allows customization of the appearance and behavior of draggable widgets.
- **Flexible Drop Targets**: Supports multiple drop targets with specific actions for each.
- **Smooth Animations**: Provides built-in animations for a more engaging user experience.
- **Event Callbacks**: Offers callbacks for drag start, update, and completion events.

## When to Use

- **Interactive UI Design**: When building applications that require users to rearrange elements dynamically.
- **Educational Apps**: For creating interactive learning modules where users can drag items to match or categorize.
- **Games**: In game development, where drag-and-drop mechanics are part of the gameplay.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using Super Drag and Drop

In this tutorial, we will walk through the setup process for the `super_drag_and_drop` package and demonstrate how to integrate it into a Flutter project.

## Setup

### Step 1: Add Dependency

Add the `super_drag_and_drop` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  super_drag_and_drop: ^1.0.0
```

Run `flutter pub get` to install the package.

### Step 2: Platform-Specific Configuration

#### Android

Ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```gradle
android {
    defaultConfig {
        minSdkVersion 21
    }
}
```

#### iOS

No additional configuration is required for iOS.

### Step 3: Import the Package

In your Dart file, import the package:

```dart
import 'package:super_drag_and_drop/super_drag_and_drop.dart';
```

## Using the Package

### Basic Usage

1. **Create a Draggable Widget**: Use the `Draggable` widget provided by the package to make any widget draggable.
2. **Define Drop Targets**: Use the `DragTarget` widget to specify where draggable items can be dropped.
3. **Handle Callbacks**: Implement callbacks to handle drag events and update the UI accordingly.

<-- END_TUTORIAL -->

<-- MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:super_drag_and_drop/super_drag_and_drop.dart';

void main() => runApp(RealFlutter());

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: DragAndDropExample(),
    );
  }
}

class DragAndDropExample extends StatefulWidget {
  @override
  _DragAndDropExampleState createState() => _DragAndDropExampleState();
}

class _DragAndDropExampleState extends State<DragAndDropExample> {
  Color caughtColor = Colors.grey;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Super Drag and Drop Example')),
      body: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: <Widget>[
          // Draggable widget
          Draggable<Color>(
            data: Colors.blue,
            child: Container(
              width: 100,
              height: 100,
              color: Colors.blue,
              child: Center(child: Text('Drag me')),
            ),
            feedback: Container(
              width: 100,
              height: 100,
              color: Colors.blue.withOpacity(0.5),
              child: Center(child: Text('Dragging')),
            ),
            childWhenDragging: Container(
              width: 100,
              height: 100,
              color: Colors.grey,
              child: Center(child: Text('Original')),
            ),
          ),
          SizedBox(height: 50),
          // Drag target
          DragTarget<Color>(
            onAccept: (color) {
              setState(() {
                caughtColor = color;
              });
            },
            builder: (context, candidateData, rejectedData) {
              return Container(
                width: 200,
                height: 200,
                color: caughtColor,
                child: Center(child: Text('Drop here')),
              );
            },
          ),
        ],
      ),
    );
  }
}

// Application Flow:
// 1. The main function initializes the app by running RealFlutter, which is a StatelessWidget.
// 2. RealFlutter builds a MaterialApp with DragAndDropExample as the home widget.
// 3. DragAndDropExample is a StatefulWidget that manages the state of the drag-and-drop interaction.
// 4. The build method of _DragAndDropExampleState creates a Scaffold with an AppBar and a body containing a Column.
// 5. The Column contains a Draggable widget and a DragTarget widget.
// 6. The Draggable widget allows a blue square to be dragged, showing different appearances for the child, feedback, and childWhenDragging.
// 7. The DragTarget widget changes its color to the color of the draggable item when it is dropped onto it.
// 8. The onAccept callback of DragTarget updates the state to reflect the new color when a draggable item is dropped.

```

<-- END_MAIN -->
```
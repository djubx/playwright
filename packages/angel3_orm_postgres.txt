<-- START_DESCRIPTION -->

# Angel3 ORM Postgres Package
==========================

The `angel3_orm_postgres` package is a powerful ORM (Object-Relational Mapping) tool for Flutter, designed to simplify interactions with PostgreSQL databases. It provides a robust and efficient way to manage data models, perform CRUD (Create, Read, Update, Delete) operations, and handle database migrations.

### When to Use

This package is ideal for Flutter applications that require a robust and scalable database solution, especially those that involve complex data relationships and transactions. It's perfect for:

* Building data-driven applications with multiple models and relationships
* Handling large datasets and performing complex queries
* Implementing data caching and offline support

### Key Features

* Support for PostgreSQL databases
* Robust ORM system with support for models, relationships, and transactions
* Efficient data caching and offline support
* Automatic database migration handling

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `angel3_orm_postgres` package, follow these steps:

### Step 1: Add the Package to Your Project

Add the following dependency to your `pubspec.yaml` file:
```yml
dependencies:
  angel3_orm_postgres: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:angel3_orm_postgres/angel3_orm_postgres.dart';
```
### Step 3: Configure the Database

Create a `database.dart` file and configure the database connection:
```dart
import 'package:angel3_orm_postgres/angel3_orm_postgres.dart';

Future<void> main() async {
  // Create a PostgreSQL connection
  final connection = PostgreSQLConnection(
    host: 'localhost',
    port: 5432,
    database: 'mydatabase',
    username: 'myuser',
    password: 'mypassword',
  );

  // Create a database instance
  final database = Database(connection);

  // Initialize the database
  await database.init();
}
```
### Step 4: Define Your Models

Create a `models` directory and define your data models using the `Model` class:
```dart
// models/user.dart
import 'package:angel3_orm_postgres/angel3_orm_postgres.dart';

class User extends Model {
  @override
  String get tableName => 'users';

  @override
  List<Field> get fields => [
    Field('id', DbType.integer, isPrimaryKey: true),
    Field('name', DbType.text),
    Field('email', DbType.text),
  ];
}
```
### Step 5: Perform CRUD Operations

Use the `database` instance to perform CRUD operations on your models:
```dart
// Create a new user
final user = User(name: 'John Doe', email: 'john@example.com');
await database.create(user);

// Read a user
final user = await database.read(User, where: (user) => user.id == 1);

// Update a user
user.name = 'Jane Doe';
await database.update(user);

// Delete a user
await database.delete(user);
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
// main.dart
import 'package:flutter/material.dart';
import 'package:angel3_orm_postgres/angel3_orm_postgres.dart';
import 'database.dart';
import 'models/user.dart';

void main() async {
  // Initialize the database
  await database.init();

  // Create a new user
  final user = User(name: 'John Doe', email: 'john@example.com');
  await database.create(user);

  // Read a user
  final user = await database.read(User, where: (user) => user.id == 1);

  // Update a user
  user.name = 'Jane Doe';
  await database.update(user);

  // Delete a user
  await database.delete(user);

  // Run the app
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Angel3 ORM Postgres Demo',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Angel3 ORM Postgres Demo'),
        ),
        body: Center(
          child: Text('Hello, World!'),
        ),
      ),
    );
  }
}
```

// The app starts by initializing the database connection and creating a new user.
// Then, it reads the user from the database, updates the user's name, and deletes the user.
// Finally, it runs the Flutter app, which displays a simple "Hello, World!" message.

// The database connection is established using the PostgreSQL connection details.
// The `database.init()` method is called to initialize the database.
// The `User` model is defined with fields for `id`, `name`, and `email`.
// The `database.create()`, `database.read()`, `database.update()`, and `database.delete()` methods are used to perform CRUD operations on the `User` model.

// The app uses the `MaterialApp` widget to display a simple app with a title and a home screen.
// The `Scaffold` widget is used to define the app's layout, with an `AppBar` and a `Center` widget.
// The `Text` widget is used to display the "Hello, World!" message.

<-- END_MAIN -->
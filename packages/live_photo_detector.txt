```markdown
<!-- START_DESCRIPTION -->
# Live Photo Detector Flutter Package

The `live_photo_detector` Flutter package is a powerful tool designed to detect live photos in a user's gallery. This package is particularly useful for applications that require the identification of live photos, such as social media apps, photo editing tools, or any application that needs to manage multimedia content effectively.

## When to Use This Package
- **Social Media Applications**: To allow users to upload or share live photos.
- **Photo Editing Apps**: To enable specific editing features for live photos.
- **Gallery Management**: To filter and display live photos separately from static images.

## Features
- **Easy Integration**: Simple setup process for both Android and iOS platforms.
- **Efficient Detection**: Quickly identifies live photos in the device's gallery.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS devices.

This package simplifies the process of working with live photos, making it an essential tool for developers looking to enhance their multimedia applications.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Live Photo Detector

## Step 1: Adding the Dependency
To get started, add the `live_photo_detector` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  live_photo_detector: ^1.0.0  # Check for the latest version on pub.dev
```

## Step 2: Platform-Specific Configuration

### Android Configuration
1. Open `android/app/build.gradle` and ensure you have the following configurations:

```groovy
android {
    ...
    compileSdkVersion 31  // Ensure you are using the latest SDK version
    ...
}
```

2. Add the necessary permissions in `AndroidManifest.xml`:

```xml
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
```

### iOS Configuration
1. Open `ios/Runner/Info.plist` and add the following permissions:

```xml
<key>NSPhotoLibraryUsageDescription</key>
<string>We need access to your photo library to detect live photos.</string>
```

## Step 3: Using the Package
Now that you have set up the package, you can start using it in your Flutter application. Below is a simple example of how to implement the `live_photo_detector` package.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Live Photo Detector

```dart
import 'package:flutter/material.dart';
import 'package:live_photo_detector/live_photo_detector.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Live Photo Detector',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: LivePhotoHome(),
    );
  }
}

class LivePhotoHome extends StatefulWidget {
  @override
  _LivePhotoHomeState createState() => _LivePhotoHomeState();
}

class _LivePhotoHomeState extends State<LivePhotoHome> {
  List<String> livePhotos = []; // List to store detected live photo paths

  @override
  void initState() {
    super.initState();
    _detectLivePhotos(); // Call the function to detect live photos on initialization
  }

  // Function to detect live photos
  Future<void> _detectLivePhotos() async {
    try {
      // Use the LivePhotoDetector to get live photo paths
      List<String> detectedPhotos = await LivePhotoDetector.getLivePhotos();
      setState(() {
        livePhotos = detectedPhotos; // Update the state with detected live photos
      });
    } catch (e) {
      // Handle any errors that occur during detection
      print("Error detecting live photos: $e");
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Detected Live Photos'),
      ),
      body: livePhotos.isEmpty
          ? Center(child: Text('No live photos detected.'))
          : ListView.builder(
              itemCount: livePhotos.length,
              itemBuilder: (context, index) {
                return ListTile(
                  title: Text('Live Photo ${index + 1}'),
                  subtitle: Text(livePhotos[index]), // Display the path of the live photo
                );
              },
            ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the RealFlutter widget.
// 2. RealFlutter builds a MaterialApp with a title and theme, and sets LivePhotoHome as the home widget.
// 3. LivePhotoHome is a stateful widget that initializes an empty list to store live photo paths.
// 4. In the initState method, _detectLivePhotos is called to fetch live photos from the gallery.
// 5. _detectLivePhotos uses the LivePhotoDetector to get a list of live photo paths and updates the state.
// 6. The build method checks if livePhotos is empty. If it is, a message is displayed; otherwise, a list of detected live photos is shown.
```
<!-- END_MAIN -->
``` 

This structured blog provides a comprehensive overview of the `live_photo_detector` Flutter package, guiding users through its features, setup, and implementation with clear code examples and explanations.
```markdown
<!-- START_DESCRIPTION -->
# Overview of the `radio_grouped_buttons` Flutter Package

The `radio_grouped_buttons` package is a Flutter library that simplifies the creation of grouped radio buttons. It allows developers to easily implement radio button groups with customizable styles and behaviors, making it an excellent choice for forms, surveys, and any UI that requires user selection.

## When to Use This Package
You might consider using `radio_grouped_buttons` when:
- You need to present a set of options where only one can be selected at a time.
- You want to enhance the user experience with visually appealing radio buttons.
- You require easy customization of button styles and layouts.

## Key Features
- **Customizable Appearance**: Change colors, shapes, and sizes of radio buttons.
- **Flexible Layouts**: Arrange buttons in horizontal or vertical orientations.
- **Easy Integration**: Simple API for quick implementation in any Flutter project.
- **State Management**: Built-in support for managing the selected state of buttons.

Overall, `radio_grouped_buttons` is a powerful tool for Flutter developers looking to enhance their applications with user-friendly selection options.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using `radio_grouped_buttons`

## Installation
To use the `radio_grouped_buttons` package, you need to add it to your `pubspec.yaml` file. Open the file and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  radio_grouped_buttons: ^2.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command in your terminal to install it:

```bash
flutter pub get
```

## Platform-Specific Details
The `radio_grouped_buttons` package works seamlessly on both Android and iOS platforms. However, ensure that your Flutter environment is set up correctly for both platforms. You may need to configure your Android and iOS projects to support the latest Flutter features.

### Android Configuration
Make sure your `android/app/build.gradle` file has the following configurations:

```gradle
android {
    compileSdkVersion 31  // or the latest version
    ...
}
```

### iOS Configuration
For iOS, ensure your `ios/Podfile` is set to use the latest platform version:

```ruby
platform :ios, '10.0'  # or the latest version
```

## Using the Package
To use the `radio_grouped_buttons` package, you can import it into your Dart file:

```dart
import 'package:radio_grouped_buttons/radio_grouped_buttons.dart';
```

You can then create a simple radio button group as follows:

```dart
RadioGroup<String>(
  labels: <String>[
    "Option 1",
    "Option 2",
    "Option 3",
  ],
  onSelected: (String selected) => print(selected),
)
```

This code snippet creates a radio button group with three options. The `onSelected` callback will print the selected option to the console.

With this setup, you are ready to implement radio buttons in your Flutter application!
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using `radio_grouped_buttons`

```dart
import 'package:flutter/material.dart';
import 'package:radio_grouped_buttons/radio_grouped_buttons.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Radio Grouped Buttons Example',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Radio Grouped Buttons Example'),
        ),
        body: Center(
          child: RadioGroup<String>(
            // Define the labels for the radio buttons
            labels: <String>[
              "Option 1",
              "Option 2",
              "Option 3",
            ],
            // Callback function to handle selection
            onSelected: (String selected) {
              // Display the selected option in a Snackbar
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(content: Text('You selected: $selected')),
              );
            },
            // Customize the appearance of the radio buttons
            activeColor: Colors.blue,
            // Set the orientation of the buttons
            orientation: GroupedButtonsOrientation.VERTICAL,
          ),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function initializes the app by calling runApp with the RealFlutter widget.
// 2. The RealFlutter widget builds a MaterialApp with a title and a Scaffold.
// 3. The Scaffold contains an AppBar with the title "Radio Grouped Buttons Example".
// 4. In the body of the Scaffold, a RadioGroup widget is created with three options.
// 5. When a user selects an option, the onSelected callback is triggered.
// 6. The selected option is displayed in a Snackbar at the bottom of the screen.
// 7. The radio buttons are styled with a blue active color and arranged vertically.
```
<!-- END_MAIN -->
```

This structured blog post provides a comprehensive overview of the `radio_grouped_buttons` package, guiding developers through its features, setup, and practical usage with a complete example.
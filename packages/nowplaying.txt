<-- START_DESCRIPTION -->

# Now Playing Flutter Package
================================

The "nowplaying" Flutter package is a powerful tool for accessing the currently playing media on a user's device. It provides a simple and efficient way to retrieve metadata about the currently playing song, such as the title, artist, and album art.

## When to Use This Package
---------------------------

This package is particularly useful for music-based apps that need to access the currently playing song. For example, a lyrics app could use this package to display the lyrics of the currently playing song.

## Features
------------

*   Retrieves metadata about the currently playing song, including title, artist, and album art
*   Supports both Android and iOS platforms
*   Easy to use and integrate into existing Flutter apps

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Now Playing Package
=====================================================

## Step 1: Add the Package to Your Pubspec File
---------------------------------------------

To use the nowplaying package, you need to add it to your `pubspec.yaml` file. Open the file and add the following line under the dependencies section:

```yml
dependencies:
  flutter:
    sdk: flutter
  nowplaying: ^0.0.2
```

Then, run `flutter pub get` in your terminal to get the package.

## Step 2: Import the Package
---------------------------

To use the package, you need to import it into your Dart file. Add the following line at the top of your file:

```dart
import 'package:nowplaying/nowplaying.dart';
```

## Step 3: Use the Package to Get the Currently Playing Song
---------------------------------------------------------

To get the currently playing song, you can use the `NowPlaying` class. Here's an example:

```dart
void main() async {
  final nowPlaying = NowPlaying();
  final song = await nowPlaying.current();
  print(song.title);
  print(song.artist);
  print(song.albumArt);
}
```

This code creates a new instance of the `NowPlaying` class and uses it to get the currently playing song. It then prints the title, artist, and album art of the song.

### Platform-Specific Details

#### Android

On Android, the nowplaying package uses the `MediaStore` API to access the currently playing song. This API requires the `READ_EXTERNAL_STORAGE` permission, which is automatically added to your app's AndroidManifest.xml file when you use the package.

#### iOS

On iOS, the nowplaying package uses the `MPNowPlayingInfoCenter` API to access the currently playing song. This API requires the `NSAppleMusicUsageDescription` key to be added to your app's Info.plist file. You can do this by adding the following lines to your Info.plist file:

```xml
<key>NSAppleMusicUsageDescription</key>
<string>This app needs access to the currently playing song.</string>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:nowplaying/nowplaying.dart';

void main() async {
  // Create a new instance of the NowPlaying class
  final nowPlaying = NowPlaying();

  // Get the currently playing song
  final song = await nowPlaying.current();

  // Print the title, artist, and album art of the song
  print(song.title);
  print(song.artist);
  print(song.albumArt);

  // Create a new Flutter app
  runApp(MyApp(song));
}

class MyApp extends StatelessWidget {
  final Song song;

  MyApp(this.song);

  @override
  Widget build(BuildContext context) {
    // Create a new Material app
    return MaterialApp(
      title: 'Now Playing Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(song),
    );
  }
}

class MyHomePage extends StatelessWidget {
  final Song song;

  MyHomePage(this.song);

  @override
  Widget build(BuildContext context) {
    // Create a new Scaffold
    return Scaffold(
      appBar: AppBar(
        title: Text('Now Playing Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            // Display the title of the song
            Text(
              song.title,
              style: TextStyle(fontSize: 24),
            ),
            // Display the artist of the song
            Text(
              song.artist,
              style: TextStyle(fontSize: 18),
            ),
            // Display the album art of the song
            Image.network(song.albumArt),
          ],
        ),
      ),
    );
  }
}

// The flow of the application is as follows:
// 1. The main function is called, which creates a new instance of the NowPlaying class.
// 2. The NowPlaying class is used to get the currently playing song.
// 3. The title, artist, and album art of the song are printed to the console.
// 4. A new Flutter app is created, which displays the title, artist, and album art of the song.
// 5. The app uses the Material design theme and has a blue primary swatch.
// 6. The home page of the app is a Scaffold with an AppBar and a body that displays the song information.
```

<-- END_MAIN -->
```markdown
<!-- START_DESCRIPTION -->
# Decorated Text Flutter Package

The `decorated_text` Flutter package is a powerful tool that allows developers to create rich text widgets with various styles and decorations. It provides an easy way to apply different styles to different parts of a text string, making it ideal for applications that require dynamic text formatting, such as chat applications, social media platforms, or any app that needs to display text with varying styles.

## Features
- **Rich Text Styling**: Apply different styles (color, font size, weight, etc.) to specific parts of the text.
- **Text Decoration**: Add decorations like underlines, strikethroughs, and more.
- **Customizable**: Easily customize the appearance of text to match your app's theme.
- **Performance**: Optimized for performance, ensuring smooth rendering even with complex text styles.

## When to Use
- When you need to display text with multiple styles in a single widget.
- In chat applications where messages may contain different formatting (e.g., bold, italic).
- For displaying user-generated content that may require varied text styles.

The `decorated_text` package simplifies the process of creating visually appealing text layouts, enhancing the user experience in Flutter applications.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Decorated Text Package

## Step 1: Adding the Dependency
To use the `decorated_text` package, you first need to add it to your `pubspec.yaml` file. Open the file and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  decorated_text: ^1.0.0  # Check for the latest version on pub.dev
```

## Step 2: Installing the Package
After adding the dependency, run the following command in your terminal to install the package:

```bash
flutter pub get
```

## Step 3: Platform-Specific Configuration
### Android
For Android, ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

### iOS
For iOS, make sure to set the platform version in your `ios/Podfile`:

```ruby
platform :ios, '10.0'
```

## Step 4: Importing the Package
In your Dart file, import the package:

```dart
import 'package:decorated_text/decorated_text.dart';
```

## Step 5: Using the Decorated Text Widget
You can now use the `DecoratedText` widget in your Flutter application. Hereâ€™s a simple example:

```dart
DecoratedText(
  text: 'Hello, Flutter!',
  styles: [
    TextStyle(color: Colors.blue, fontSize: 20),
    TextStyle(color: Colors.red, fontWeight: FontWeight.bold),
  ],
  decorations: [
    TextDecoration.underline,
    TextDecoration.lineThrough,
  ],
)
```

This example demonstrates how to create a text widget with different styles and decorations applied to it.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using the Decorated Text Package

```dart
import 'package:flutter/material.dart';
import 'package:decorated_text/decorated_text.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Decorated Text Example',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Decorated Text Example'),
        ),
        body: Center(
          child: DecoratedText(
            text: 'Welcome to Flutter!',
            styles: [
              TextStyle(color: Colors.green, fontSize: 24), // Style for the first part
              TextStyle(color: Colors.orange, fontWeight: FontWeight.bold), // Style for the second part
            ],
            decorations: [
              TextDecoration.underline, // Underline for the first part
              TextDecoration.lineThrough, // Strikethrough for the second part
            ],
          ),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function starts the app by calling runApp() with MyApp as the root widget.
// 2. MyApp is a StatelessWidget that builds a MaterialApp with a title and a home Scaffold.
// 3. The Scaffold contains an AppBar with the title 'Decorated Text Example'.
// 4. The body of the Scaffold is centered and contains a DecoratedText widget.
// 5. The DecoratedText widget displays the text 'Welcome to Flutter!' with two different styles and decorations.
// 6. The first part of the text is styled with a green color and underlined, while the second part is styled with an orange color and has a strikethrough.
```
<!-- END_MAIN -->
```

This structured blog provides a comprehensive overview of the `decorated_text` Flutter package, guiding users through its features, setup, and practical usage with a complete example.
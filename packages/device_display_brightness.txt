```markdown
<!-- START_DESCRIPTION -->
# Device Display Brightness Flutter Package

The `device_display_brightness` Flutter package is a powerful tool that allows developers to control and retrieve the display brightness of a device. This package is particularly useful in applications where screen brightness needs to be adjusted dynamically based on user preferences or environmental conditions, such as in reading apps, gaming, or media consumption.

## When to Use This Package

- **Reading Applications**: Adjust brightness for a comfortable reading experience.
- **Gaming**: Enhance visual effects by controlling brightness during gameplay.
- **Media Players**: Automatically adjust brightness based on video content or user settings.

## Features

- **Get Current Brightness**: Retrieve the current brightness level of the device.
- **Set Brightness**: Change the brightness level programmatically.
- **Listen for Brightness Changes**: Subscribe to brightness change events to react accordingly.

This package provides a simple and effective API to manage device brightness, making it an essential tool for developers looking to enhance user experience in their Flutter applications.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Device Display Brightness Package

## Step 1: Adding the Dependency

To get started, add the `device_display_brightness` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  device_display_brightness: ^1.0.0  # Check for the latest version on pub.dev
```

## Step 2: Platform-Specific Configuration

### Android

1. Open `AndroidManifest.xml` located in `android/app/src/main/`.
2. Add the following permission to allow your app to modify system settings:

```xml
<uses-permission android:name="android.permission.WRITE_SETTINGS"/>
```

### iOS

For iOS, no additional configuration is required. The package works out of the box.

## Step 3: Importing the Package

In your Dart file, import the package:

```dart
import 'package:device_display_brightness/device_display_brightness.dart';
```

## Step 4: Using the Package

You can now use the package to get and set the brightness. Hereâ€™s a simple example:

```dart
// Get the current brightness
double currentBrightness = await DeviceDisplayBrightness.getBrightness();

// Set the brightness to 50%
await DeviceDisplayBrightness.setBrightness(0.5);
```

## Step 5: Listening for Brightness Changes

You can also listen for changes in brightness:

```dart
DeviceDisplayBrightness.onBrightnessChanged.listen((double brightness) {
  print("Brightness changed to: $brightness");
});
```

This setup allows you to effectively manage display brightness in your Flutter applications, enhancing user experience and functionality.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example: Flutter Application Using Device Display Brightness

```dart
import 'package:flutter/material.dart';
import 'package:device_display_brightness/device_display_brightness.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  double _currentBrightness = 0.0; // Variable to hold current brightness

  @override
  void initState() {
    super.initState();
    _getCurrentBrightness(); // Fetch current brightness on startup
    // Listen for brightness changes
    DeviceDisplayBrightness.onBrightnessChanged.listen((brightness) {
      setState(() {
        _currentBrightness = brightness; // Update state on brightness change
      });
    });
  }

  // Method to get the current brightness
  Future<void> _getCurrentBrightness() async {
    double brightness = await DeviceDisplayBrightness.getBrightness();
    setState(() {
      _currentBrightness = brightness; // Update the current brightness
    });
  }

  // Method to set brightness
  Future<void> _setBrightness(double brightness) async {
    await DeviceDisplayBrightness.setBrightness(brightness); // Set the new brightness
    _getCurrentBrightness(); // Refresh the current brightness
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Device Display Brightness Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Text('Current Brightness: ${(_currentBrightness * 100).toStringAsFixed(0)}%'),
              Slider(
                value: _currentBrightness,
                min: 0.0,
                max: 1.0,
                onChanged: (value) {
                  _setBrightness(value); // Update brightness when slider changes
                },
              ),
            ],
          ),
        ),
      ),
    );
  }
}
```

### Application Flow Explanation

// The application starts by running the `RealFlutter` widget.
// In the `initState` method, we fetch the current brightness and set up a listener for brightness changes.
// The `_getCurrentBrightness` method retrieves the current brightness level and updates the state.
// The `_setBrightness` method allows the user to change the brightness using a slider.
// The `build` method creates a simple UI with a text display for the current brightness and a slider to adjust it.
// As the slider moves, the brightness is updated in real-time, and the current brightness percentage is displayed to the user.
<!-- END_MAIN -->
```

This structured blog provides a comprehensive overview of the `device_display_brightness` Flutter package, guiding users through its features, setup, and practical implementation in a Flutter application.
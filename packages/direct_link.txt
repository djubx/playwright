<-- START_DESCRIPTION -->

# Direct Link Flutter Package
================================

The `direct_link` Flutter package allows developers to handle deep links and app links in their Flutter applications. This package provides a simple and efficient way to handle links and navigate to specific screens within the app.

## When to Use
--------------

Use the `direct_link` package when you want to:

* Handle deep links and app links in your Flutter app
* Navigate to specific screens within the app based on the link
* Pass parameters from the link to the app

## Features
------------

* Handles deep links and app links
* Supports Android and iOS platforms
* Allows passing parameters from the link to the app
* Simple and efficient API

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

## Setup
--------

To use the `direct_link` package, add it to your `pubspec.yaml` file:

```yml
dependencies:
  direct_link: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Android Configuration
----------------------

To handle deep links on Android, add the following code to your `AndroidManifest.xml` file:

```xml
<application
  ...
  android:launchMode="singleTask">
  ...
  <intent-filter>
    <action android:name="android.intent.action.VIEW" />
    <category android:name="android.intent.category.DEFAULT" />
    <category android:name="android.intent.category.BROWSABLE" />
    <data android:scheme="your_scheme" android:host="your_host" />
  </intent-filter>
</application>
```

Replace `your_scheme` and `your_host` with your desired scheme and host.

## iOS Configuration
-------------------

To handle deep links on iOS, add the following code to your `Info.plist` file:

```xml
<key>CFBundleURLTypes</key>
<array>
  <dict>
    <key>CFBundleURLName</key>
    <string>your_bundle_id</string>
    <key>CFBundleURLSchemes</key>
    <array>
      <string>your_scheme</string>
    </array>
  </dict>
</array>
```

Replace `your_bundle_id` and `your_scheme` with your desired bundle ID and scheme.

## Usage
-----

To handle deep links, use the `DirectLink` class:

```dart
import 'package:direct_link/direct_link.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  void initState() {
    super.initState();
    DirectLink().listen((link) {
      // Handle the link
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Real Flutter'),
      ),
      body: Center(
        child: Text('Hello, World!'),
      ),
    );
  }
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:direct_link/direct_link.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Real Flutter',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Step 1: Initialize the DirectLink instance
  final _directLink = DirectLink();

  // Step 2: Listen for incoming links
  @override
  void initState() {
    super.initState();
    _directLink.listen((link) {
      // Step 3: Handle the link
      _handleLink(link);
    });
  }

  // Step 4: Handle the link
  void _handleLink(String link) {
    // Step 5: Parse the link and extract parameters
    final params = _parseLink(link);

    // Step 6: Navigate to the desired screen
    _navigateToScreen(params);
  }

  // Step 7: Parse the link and extract parameters
  Map<String, String> _parseLink(String link) {
    // TO DO: Implement link parsing logic
    return {};
  }

  // Step 8: Navigate to the desired screen
  void _navigateToScreen(Map<String, String> params) {
    // TO DO: Implement navigation logic
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Real Flutter'),
      ),
      body: Center(
        child: Text('Hello, World!'),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user clicks on a link that opens the app.
// 2. The DirectLink instance listens for incoming links and calls the callback function.
// 3. The callback function handles the link by parsing it and extracting parameters.
// 4. The parameters are then used to navigate to the desired screen.
// 5. The navigation logic is implemented using the _navigateToScreen function.
```

<-- END_MAIN -->
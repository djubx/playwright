<-- START_DESCRIPTION -->

Wave Transition Flutter Package
==============================

The `wave_transition` Flutter package provides a beautiful and customizable wave transition effect for navigating between screens. It is ideal for applications that require a visually appealing and modern navigation experience.

When to Use
------------

* When you want to add a unique and visually appealing navigation effect to your app.
* When you want to create a seamless and smooth transition between screens.
* When you want to customize the navigation experience to fit your app's brand and style.

Features
--------

* Customizable wave color, height, and duration.
* Supports both push and pop navigation.
* Works with both Android and iOS platforms.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
---------------

To use the `wave_transition` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  wave_transition: ^1.0.0
```
2. Import the package in your Dart file:
```dart
import 'package:wave_transition/wave_transition.dart';
```
3. Create a `WaveTransition` widget and pass the required parameters:
```dart
WaveTransition(
  child: MyWidget(),
  waveColor: Colors.blue,
  waveHeight: 100,
  duration: Duration(milliseconds: 500),
)
```
Platform-Specific Details
-------------------------

* Android: No additional configuration required.
* iOS: Add the following code to your `Info.plist` file to enable the wave transition effect:
```xml
<key>UIViewControllerTransitioningDelegate</key>
<string>WaveTransitionDelegate</string>
```
Configurations and Optimizations
--------------------------------

* To optimize performance, use a `CachedNetworkImage` instead of a `NetworkImage` for the wave background.
* To customize the wave shape, use a `CustomPainter` to draw the wave.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:wave_transition/wave_transition.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Wave Transition Demo',
      home: WaveTransitionDemo(),
    );
  }
}

class WaveTransitionDemo extends StatefulWidget {
  @override
  _WaveTransitionDemoState createState() => _WaveTransitionDemoState();
}

class _WaveTransitionDemoState extends State<WaveTransitionDemo> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Wave Transition Demo'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            Navigator.push(
              context,
              WaveTransition(
                child: SecondScreen(),
                waveColor: Colors.blue,
                waveHeight: 100,
                duration: Duration(milliseconds: 500),
              ),
            );
          },
          child: Text('Go to Second Screen'),
        ),
      ),
    );
  }
}

class SecondScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Second Screen'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            Navigator.pop(context);
          },
          child: Text('Go Back'),
        ),
      ),
    );
  }
}
```

// The application flow starts with the `RealFlutter` widget, which is the main entry point of the app.
// The `RealFlutter` widget builds a `MaterialApp` with a `WaveTransitionDemo` widget as its home screen.
// The `WaveTransitionDemo` widget is a stateful widget that builds a `Scaffold` with an `AppBar` and a `Center` widget.
// The `Center` widget contains an `ElevatedButton` that, when pressed, navigates to the `SecondScreen` widget using a `WaveTransition`.
// The `WaveTransition` widget is used to create a wave transition effect between the `WaveTransitionDemo` and `SecondScreen` widgets.
// The `SecondScreen` widget is a stateless widget that builds a `Scaffold` with an `AppBar` and a `Center` widget.
// The `Center` widget contains an `ElevatedButton` that, when pressed, navigates back to the `WaveTransitionDemo` widget using a `Navigator.pop` call.

<-- END_MAIN -->
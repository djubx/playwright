<-- START_DESCRIPTION -->

# Pinch Scale Flutter Package
================================

The `pinch_scale` Flutter package provides a simple and intuitive way to add pinch-to-zoom functionality to your Flutter applications. It allows users to scale images and other content using a pinch gesture, making it easier to view and interact with content on smaller screens.

## When to Use
--------------

You can use the `pinch_scale` package in a variety of scenarios, such as:

* Image galleries: Allow users to zoom in and out of images to view details.
* Maps: Enable users to zoom in and out of maps to view different locations.
* Documents: Allow users to zoom in and out of documents to view text and images.

## Features
------------

The `pinch_scale` package provides the following features:

* Pinch-to-zoom functionality
* Double-tap to zoom in and out
* Support for both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Pinch Scale Package
------------------------------------

To use the `pinch_scale` package in your Flutter application, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  pinch_scale: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:pinch_scale/pinch_scale.dart';
```
### Step 3: Create a Pinch Scale Widget

Create a `PinchScale` widget and pass in the content you want to scale:
```dart
PinchScale(
  child: Image.asset('assets/image.jpg'),
)
```
### Platform-Specific Details

* Android: No additional configuration is required.
* iOS: You need to add the following line to your `Info.plist` file:
```xml
<key>NSPhotoLibraryUsageDescription</key>
<string>This app needs access to your photo library to display images.</string>
```
### Optimizations

You can optimize the performance of the `PinchScale` widget by setting the `cacheExtent` property:
```dart
PinchScale(
  cacheExtent: 1000,
  child: Image.asset('assets/image.jpg'),
)
```
This sets the cache extent to 1000 pixels, which can improve performance when scaling large images.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:pinch_scale/pinch_scale.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Pinch Scale Demo',
      home: PinchScaleDemo(),
    );
  }
}

class PinchScaleDemo extends StatefulWidget {
  @override
  _PinchScaleDemoState createState() => _PinchScaleDemoState();
}

class _PinchScaleDemoState extends State<PinchScaleDemo> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Pinch Scale Demo'),
      ),
      body: Center(
        child: PinchScale(
          // Set the cache extent to 1000 pixels for better performance
          cacheExtent: 1000,
          // Create a container with a background image
          child: Container(
            width: 300,
            height: 300,
            decoration: BoxDecoration(
              image: DecorationImage(
                image: AssetImage('assets/image.jpg'),
                fit: BoxFit.cover,
              ),
            ),
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app and is presented with a screen containing a background image.
// 2. The user can pinch-to-zoom the image to view details.
// 3. The cache extent is set to 1000 pixels to improve performance when scaling the image.
// 4. The user can double-tap to zoom in and out of the image.
// 5. The app uses the `PinchScale` widget to handle the pinch-to-zoom functionality.

// Summary: This code demonstrates the use of the `PinchScale` package to add pinch-to-zoom functionality to a Flutter application. It sets up a basic app with a background image and allows the user to zoom in and out using a pinch gesture. The cache extent is set to 1000 pixels to improve performance.
```

<-- END_MAIN -->
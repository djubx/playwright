<-- START_DESCRIPTION -->

# Flutter Wear OS Connectivity Package
=====================================

The `flutter_wear_os_connectivity` package provides a simple way to connect and communicate with Wear OS devices from a Flutter app. This package is ideal for developers who want to create companion apps for Wear OS devices, allowing users to control and interact with their wearables from their mobile devices.

## Features

*   Connect to Wear OS devices via Bluetooth
*   Send and receive messages between mobile and Wear OS devices
*   Support for both Android and iOS platforms

## When to Use

This package is useful when you want to:

*   Create a companion app for a Wear OS device
*   Allow users to control their Wear OS device from their mobile device
*   Send and receive data between mobile and Wear OS devices

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
================

## Step 1: Add the Package to Your Flutter Project

Add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  flutter_wear_os_connectivity: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:flutter_wear_os_connectivity/flutter_wear_os_connectivity.dart';
```

## Step 3: Initialize the Package

Initialize the package in your `main` function:

```dart
void main() {
  runApp(MyApp());
  FlutterWearOsConnectivity.initialize();
}
```

## Step 4: Connect to a Wear OS Device

Use the `connect` method to connect to a Wear OS device:

```dart
Future<void> _connectToWearOsDevice() async {
  try {
    await FlutterWearOsConnectivity.connect();
  } catch (e) {
    print('Error connecting to Wear OS device: $e');
  }
}
```

## Step 5: Send and Receive Messages

Use the `send` and `receive` methods to send and receive messages:

```dart
Future<void> _sendMessage() async {
  try {
    await FlutterWearOsConnectivity.send('Hello from mobile!');
  } catch (e) {
    print('Error sending message: $e');
  }
}

Future<void> _receiveMessage() async {
  try {
    final message = await FlutterWearOsConnectivity.receive();
    print('Received message: $message');
  } catch (e) {
    print('Error receiving message: $e');
  }
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_wear_os_connectivity/flutter_wear_os_connectivity.dart';

void main() {
  runApp(RealFlutter());
  FlutterWearOsConnectivity.initialize();
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  String _connectionStatus = 'Disconnected';
  String _receivedMessage = '';

  Future<void> _connectToWearOsDevice() async {
    try {
      await FlutterWearOsConnectivity.connect();
      setState(() {
        _connectionStatus = 'Connected';
      });
    } catch (e) {
      print('Error connecting to Wear OS device: $e');
    }
  }

  Future<void> _sendMessage() async {
    try {
      await FlutterWearOsConnectivity.send('Hello from mobile!');
    } catch (e) {
      print('Error sending message: $e');
    }
  }

  Future<void> _receiveMessage() async {
    try {
      final message = await FlutterWearOsConnectivity.receive();
      setState(() {
        _receivedMessage = message;
      });
    } catch (e) {
      print('Error receiving message: $e');
    }
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Flutter Wear OS Connectivity'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Text(_connectionStatus),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _connectToWearOsDevice,
                child: Text('Connect to Wear OS Device'),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _sendMessage,
                child: Text('Send Message'),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _receiveMessage,
                child: Text('Receive Message'),
              ),
              SizedBox(height: 20),
              Text(_receivedMessage),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and is presented with a button to connect to a Wear OS device.
// 2. When the user clicks the button, the app attempts to connect to a Wear OS device using the FlutterWearOsConnectivity.connect() method.
// 3. If the connection is successful, the app updates the connection status to "Connected".
// 4. The user can then send a message to the Wear OS device using the FlutterWearOsConnectivity.send() method.
// 5. The user can also receive a message from the Wear OS device using the FlutterWearOsConnectivity.receive() method.
// 6. The received message is displayed on the screen.

// In summary, this code provides a basic example of how to use the FlutterWearOsConnectivity package to connect to a Wear OS device, send and receive messages, and display the connection status and received message on the screen.
```

<-- END_MAIN -->
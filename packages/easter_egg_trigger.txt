<-- START_DESCRIPTION -->

# Easter Egg Trigger Package
================================

The `easter_egg_trigger` package is a Flutter library that allows developers to create hidden features or "Easter eggs" in their apps. These Easter eggs can be triggered by specific user interactions, such as tapping on a specific area of the screen or entering a secret code.

## When to Use This Package
---------------------------

This package is useful when you want to add a fun surprise for your users or create a hidden feature that only a select few can access. For example, you could use this package to:

* Create a hidden menu or settings screen
* Unlock special features or levels in a game
* Display a funny message or joke
* Provide a special reward or discount to loyal users

## Features
------------

The `easter_egg_trigger` package includes the following features:

* Support for multiple trigger types, including tap, swipe, and text input
* Customizable trigger areas and inputs
* Support for multiple Easter eggs per app
* Optional password protection for added security

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `easter_egg_trigger` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  easter_egg_trigger: ^1.0.0
```
2. Run `flutter pub get` to install the package.
3. Import the package in your Dart file:
```dart
import 'package:easter_egg_trigger/easter_egg_trigger.dart';
```
## Platform-Specific Details
---------------------------

### Android

On Android, you need to add the following code to your `AndroidManifest.xml` file:
```xml
<application
  ...
  android:hardwareAccelerated="true"
  ...
>
```
This is required to enable hardware acceleration, which is necessary for the package to work properly.

### iOS

On iOS, you need to add the following code to your `Info.plist` file:
```xml
<key>UIViewControllerBasedStatusBarAppearance</key>
<false/>
```
This is required to enable the package to work properly with the status bar.

## Using the Package
-------------------

To use the package, create an instance of the `EasterEggTrigger` class and pass in the required parameters:
```dart
EasterEggTrigger(
  triggerType: TriggerType.tap,
  triggerArea: Rect.fromLTWH(100, 100, 200, 200),
  onTrigger: () {
    // Code to execute when the Easter egg is triggered
  },
);
```
You can customize the trigger type, trigger area, and onTrigger callback to suit your needs.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:easter_egg_trigger/easter_egg_trigger.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Easter Egg Trigger Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  // Create an instance of the EasterEggTrigger class
  EasterEggTrigger _easterEggTrigger;

  @override
  void initState() {
    super.initState();
    _easterEggTrigger = EasterEggTrigger(
      triggerType: TriggerType.tap,
      triggerArea: Rect.fromLTWH(100, 100, 200, 200),
      onTrigger: _onEasterEggTriggered,
    );
  }

  // Code to execute when the Easter egg is triggered
  void _onEasterEggTriggered() {
    print('Easter egg triggered!');
    // Show a dialog box with a funny message
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Easter Egg!'),
          content: Text('You found the Easter egg!'),
          actions: [
            FlatButton(
              child: Text('OK'),
              onPressed: () {
                Navigator.of(context).pop();
              },
            ),
          ],
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Easter Egg Trigger Demo'),
      ),
      body: Center(
        child: Text('Tap on the screen to trigger the Easter egg!'),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user taps on the screen within the trigger area.
// 2. The EasterEggTrigger class detects the tap and calls the onTrigger callback.
// 3. The onTrigger callback executes the code to show a dialog box with a funny message.
// 4. The dialog box is displayed to the user.
// 5. The user can dismiss the dialog box by tapping on the OK button.
```

<-- END_MAIN -->
```markdown
<!-- START_DESCRIPTION -->
# PDF Manipulator Flutter Package

The `pdf_manipulator` Flutter package is a powerful tool designed for developers who need to create, modify, and manipulate PDF documents within their Flutter applications. This package provides a comprehensive set of features that allow for the generation of PDFs, editing existing documents, and extracting information from them. 

## When to Use This Package

You might consider using the `pdf_manipulator` package in scenarios such as:
- Generating invoices or reports dynamically within your app.
- Modifying existing PDF documents, such as adding annotations or merging multiple PDFs.
- Extracting text or images from PDF files for further processing.

## Key Features
- **PDF Creation**: Easily create new PDF documents with text, images, and custom layouts.
- **PDF Editing**: Modify existing PDFs by adding or removing content.
- **Text Extraction**: Extract text and images from PDF files for analysis or display.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS platforms.

With its user-friendly API and robust functionality, the `pdf_manipulator` package is an excellent choice for any Flutter developer looking to integrate PDF capabilities into their applications.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the PDF Manipulator Package

## Step 1: Adding the Dependency

To get started, you need to add the `pdf_manipulator` package to your Flutter project. Open your `pubspec.yaml` file and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  pdf_manipulator: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command to install it:

```bash
flutter pub get
```

## Step 2: Platform-Specific Configuration

### Android Configuration

For Android, ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
        ...
    }
}
```

### iOS Configuration

For iOS, you may need to add permissions in your `Info.plist` file if you plan to access files from the device:

```xml
<key>NSPhotoLibraryUsageDescription</key>
<string>We need access to your photo library to select images for the PDF.</string>
<key>NSDocumentsFolderUsageDescription</key>
<string>We need access to your documents to save PDFs.</string>
```

## Step 3: Basic Usage

Now that you have set up the package, you can start using it in your Flutter application. Below is a simple example of how to create a PDF document.

```dart
import 'package:flutter/material.dart';
import 'package:pdf_manipulator/pdf_manipulator.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: PDFHome(),
    );
  }
}

class PDFHome extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('PDF Manipulator Example')),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Create a new PDF document
            final pdf = RealFlutter.createPDF();
            // Add content to the PDF
            pdf.addPage(
              page: RealFlutter.Page(
                build: (context) => RealFlutter.Center(
                  child: RealFlutter.Text('Hello, PDF!'),
                ),
              ),
            );
            // Save the PDF
            RealFlutter.savePDF(pdf, 'example.pdf');
          },
          child: Text('Create PDF'),
        ),
      ),
    );
  }
}
```

In this example, we create a simple Flutter app with a button that generates a PDF document containing the text "Hello, PDF!" when pressed.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of PDF Manipulator

```dart
import 'package:flutter/material.dart';
import 'package:pdf_manipulator/pdf_manipulator.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: PDFHome(),
    );
  }
}

class PDFHome extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('PDF Manipulator Example')),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Step 1: Create a new PDF document
            final pdf = RealFlutter.createPDF();
            
            // Step 2: Add a new page to the PDF
            pdf.addPage(
              page: RealFlutter.Page(
                build: (context) => RealFlutter.Center(
                  child: RealFlutter.Text('Hello, PDF!'),
                ),
              ),
            );
            
            // Step 3: Save the PDF to the device
            RealFlutter.savePDF(pdf, 'example.pdf');
          },
          child: Text('Create PDF'),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function initializes the Flutter app by calling runApp with MyApp.
// 2. MyApp builds a MaterialApp with a home widget PDFHome.
// 3. PDFHome contains a Scaffold with an AppBar and a Center widget.
// 4. The Center widget holds an ElevatedButton.
// 5. When the button is pressed, a new PDF document is created using RealFlutter.createPDF().
// 6. A new page is added to the PDF with the text "Hello, PDF!" centered on it.
// 7. Finally, the PDF is saved to the device with the filename 'example.pdf' using RealFlutter.savePDF().
// This flow allows users to generate a simple PDF document with a single line of text.
```
<!-- END_MAIN -->
``` 

This structured blog provides a comprehensive overview of the `pdf_manipulator` package, guiding users through its features, setup, and practical usage with a complete example.
```markdown
<!-- START_DESCRIPTION -->
# Numeric Keyboard Flutter Package

The `numeric_keyboard` Flutter package provides a customizable numeric keypad for Flutter applications. This package is particularly useful for applications that require numeric input, such as calculators, financial applications, or any form that needs numeric data entry. 

## Features
- **Customizable Layout**: You can easily customize the layout of the numeric keyboard to fit your application's design.
- **Responsive Design**: The keyboard adapts to different screen sizes, ensuring a consistent user experience across devices.
- **Easy Integration**: The package is straightforward to integrate into existing Flutter applications with minimal setup.

## When to Use
You should consider using the `numeric_keyboard` package when:
- Your application requires a dedicated numeric input method.
- You want to enhance user experience by providing a custom numeric keypad.
- You need to ensure that users can only input numeric values, reducing the chance of input errors.

Overall, the `numeric_keyboard` package is a powerful tool for developers looking to implement numeric input in their Flutter applications efficiently.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Numeric Keyboard Package

## Step 1: Adding the Dependency
To use the `numeric_keyboard` package, you first need to add it to your `pubspec.yaml` file. Open your `pubspec.yaml` and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  numeric_keyboard: ^1.0.0  # Check for the latest version on pub.dev
```

## Step 2: Installing the Package
After adding the dependency, run the following command in your terminal to install the package:

```bash
flutter pub get
```

## Step 3: Platform-Specific Configuration
### Android
For Android, ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

### iOS
For iOS, you may need to set the deployment target in your `ios/Podfile`:

```ruby
platform :ios, '10.0'
```

## Step 4: Using the Numeric Keyboard
Now that you have set up the package, you can use it in your Flutter application. Below is a simple example of how to implement the numeric keyboard.

```dart
import 'package:flutter/material.dart';
import 'package:numeric_keyboard/numeric_keyboard.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Numeric Keyboard Example')),
        body: NumericKeyboardExample(),
      ),
    );
  }
}

class NumericKeyboardExample extends StatefulWidget {
  @override
  _NumericKeyboardExampleState createState() => _NumericKeyboardExampleState();
}

class _NumericKeyboardExampleState extends State<NumericKeyboardExample> {
  String input = '';

  void onNumericKeyPress(String value) {
    setState(() {
      input += value; // Append the pressed key to the input string
    });
  }

  void onBackspace() {
    setState(() {
      input = input.isNotEmpty ? input.substring(0, input.length - 1) : '';
    });
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        Text('Input: $input', style: TextStyle(fontSize: 24)),
        NumericKeyboard(
          onKeyboardTap: onNumericKeyPress, // Handle numeric key press
          onBackspaceTap: onBackspace, // Handle backspace tap
        ),
      ],
    );
  }
}
```

### Explanation of the Code
- **Importing Packages**: The necessary packages are imported at the beginning.
- **Main Class**: The `RealFlutter` class is the main entry point of the application.
- **State Management**: The `NumericKeyboardExample` class manages the state of the numeric input.
- **Input Handling**: The `onNumericKeyPress` method appends the pressed key to the input string, while the `onBackspace` method removes the last character from the input string.
- **UI Layout**: The UI consists of a text widget displaying the current input and the numeric keyboard itself.

This setup provides a simple yet effective way to handle numeric input in your Flutter application.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Numeric Keyboard in Flutter

```dart
import 'package:flutter/material.dart';
import 'package:numeric_keyboard/numeric_keyboard.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Numeric Keyboard Example')),
        body: NumericKeyboardExample(),
      ),
    );
  }
}

class NumericKeyboardExample extends StatefulWidget {
  @override
  _NumericKeyboardExampleState createState() => _NumericKeyboardExampleState();
}

class _NumericKeyboardExampleState extends State<NumericKeyboardExample> {
  String input = ''; // Variable to hold the numeric input

  // Method to handle numeric key presses
  void onNumericKeyPress(String value) {
    setState(() {
      input += value; // Append the pressed key to the input string
    });
  }

  // Method to handle backspace key press
  void onBackspace() {
    setState(() {
      input = input.isNotEmpty ? input.substring(0, input.length - 1) : '';
    });
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        Text('Input: $input', style: TextStyle(fontSize: 24)), // Display current input
        NumericKeyboard(
          onKeyboardTap: onNumericKeyPress, // Handle numeric key press
          onBackspaceTap: onBackspace, // Handle backspace tap
        ),
      ],
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the RealFlutter class, which sets up the MaterialApp and Scaffold.
// 2. The NumericKeyboardExample widget is displayed in the body of the Scaffold.
// 3. The NumericKeyboardExample maintains the state of the numeric input.
// 4. When a numeric key is pressed, the onNumericKeyPress method is called, updating the input string.
// 5. The current input is displayed on the screen.
// 6. The NumericKeyboard widget is rendered, allowing users to input numbers and use the backspace key.
```
<!-- END_MAIN -->
```

### Summary
In this blog, we explored the `numeric_keyboard` Flutter package, detailing its features and use cases. We walked through the setup process, including platform-specific configurations for Android and iOS. Finally, we provided a complete example of a Flutter application that demonstrates how to implement and use the numeric keyboard effectively. The application flow was explained step-by-step through comments in the code, ensuring clarity on how the application operates.
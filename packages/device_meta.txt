# Device Meta Flutter Package

## <-- START_DESCRIPTION -->

### Overview of the Device Meta Package

The `device_meta` Flutter package is a powerful tool that allows developers to retrieve detailed information about the device on which their Flutter application is running. This package is particularly useful for applications that need to adapt their behavior based on device specifications, such as screen size, operating system version, and hardware capabilities.

### When to Use

You might consider using the `device_meta` package in scenarios such as:
- **Responsive Design**: Adjusting UI elements based on device characteristics.
- **Feature Availability**: Enabling or disabling features based on device capabilities (e.g., camera, sensors).
- **Analytics**: Collecting device information for analytics purposes.

### Key Features

- **Device Information**: Access to various device properties such as model, manufacturer, OS version, and more.
- **Screen Metrics**: Retrieve screen dimensions and pixel density.
- **Platform Compatibility**: Works seamlessly on both Android and iOS platforms.

## <-- END_DESCRIPTION -->

## <-- START_TUTORIAL -->

### Setup Process

To get started with the `device_meta` package, follow these steps:

1. **Add Dependency**: Open your `pubspec.yaml` file and add the `device_meta` package under dependencies:

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     device_meta: ^1.0.0  # Check for the latest version on pub.dev
   ```

2. **Install the Package**: Run the following command in your terminal to install the package:

   ```bash
   flutter pub get
   ```

3. **Platform-Specific Configuration**:
   - **Android**: No additional configuration is required for Android.
   - **iOS**: Ensure that your iOS deployment target is set to at least 9.0 in your `ios/Podfile`:

     ```ruby
     platform :ios, '9.0'
     ```

### Using the Package

To use the `device_meta` package, you need to import it into your Dart file:

```dart
import 'package:device_meta/device_meta.dart';
```

You can then access device information using the `DeviceMeta` class. Hereâ€™s a simple example of how to retrieve and display device information:

```dart
void getDeviceInfo() async {
  // Fetch device information
  final deviceInfo = await DeviceMeta.deviceInfo;
  print('Device Model: ${deviceInfo.model}');
  print('OS Version: ${deviceInfo.version}');
}
```

## <-- END_TUTORIAL -->

## <-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:device_meta/device_meta.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Device Meta Example',
      home: DeviceInfoScreen(),
    );
  }
}

class DeviceInfoScreen extends StatefulWidget {
  @override
  _DeviceInfoScreenState createState() => _DeviceInfoScreenState();
}

class _DeviceInfoScreenState extends State<DeviceInfoScreen> {
  String _deviceInfo = 'Fetching device info...'; // Placeholder text

  @override
  void initState() {
    super.initState();
    _fetchDeviceInfo(); // Call the method to fetch device info
  }

  // Method to fetch device information
  void _fetchDeviceInfo() async {
    // Fetch device information asynchronously
    final deviceInfo = await DeviceMeta.deviceInfo;

    // Update the state with the fetched device information
    setState(() {
      _deviceInfo = 'Device Model: ${deviceInfo.model}\n'
                    'Manufacturer: ${deviceInfo.manufacturer}\n'
                    'OS Version: ${deviceInfo.version}\n'
                    'Screen Size: ${deviceInfo.screenSize.width} x ${deviceInfo.screenSize.height}';
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Device Information'),
      ),
      body: Center(
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Text(
            _deviceInfo, // Display the device information
            style: TextStyle(fontSize: 18),
            textAlign: TextAlign.center,
          ),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function runs the RealFlutter app.
// 2. The RealFlutter widget builds a MaterialApp with a title and a home screen.
// 3. The DeviceInfoScreen widget is created, which is a StatefulWidget.
// 4. In the _DeviceInfoScreenState, the initState method is overridden to call _fetchDeviceInfo.
// 5. The _fetchDeviceInfo method retrieves device information asynchronously using DeviceMeta.deviceInfo.
// 6. Once the information is fetched, the state is updated with the device details.
// 7. The build method displays the device information in a centered Text widget on the screen.
```

## <-- END_MAIN -->

### Summary

In this blog post, we explored the `device_meta` Flutter package, which provides essential device information that can enhance the user experience by allowing developers to tailor their applications based on device capabilities. We walked through the setup process, including platform-specific configurations, and provided a complete example demonstrating how to fetch and display device information in a Flutter application. This package is particularly useful for responsive design and feature availability checks, making it a valuable addition to any Flutter developer's toolkit.
<-- START_DESCRIPTION -->

# Lokalise Flutter SDK
The `lokalise_flutter_sdk` package is a Flutter wrapper for the Lokalise SDK, which allows you to easily integrate Lokalise's localization and translation management capabilities into your Flutter app. With this package, you can manage your app's translations, update them in real-time, and even allow users to contribute translations.

## When to Use
You should use this package when:

* You want to manage your app's translations in a centralized platform.
* You need to update translations in real-time without requiring app updates.
* You want to allow users to contribute translations.

## Features
The `lokalise_flutter_sdk` package provides the following features:

* Real-time translation updates
* User contribution support
* Translation management via the Lokalise dashboard
* Support for multiple platforms (Android, iOS, Web)

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
To use the `lokalise_flutter_sdk` package, follow these steps:

## Step 1: Add the Package to Your Pubspec
Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  lokalise_flutter_sdk: ^1.0.0
```
Then, run `flutter pub get` to install the package.

## Step 2: Initialize the SDK
In your `main.dart` file, import the package and initialize the SDK:
```dart
import 'package:lokalise_flutter_sdk/lokalise_flutter_sdk.dart';

void main() {
  LokaliseFlutterSdk.init(
    apiKey: 'YOUR_API_KEY',
    projectId: 'YOUR_PROJECT_ID',
  );
  runApp(MyApp());
}
```
Replace `YOUR_API_KEY` and `YOUR_PROJECT_ID` with your actual Lokalise API key and project ID.

## Step 3: Configure Platform-Specific Settings
For Android, add the following lines to your `android/app/src/main/AndroidManifest.xml` file:
```xml
<application
  ...
  android:usesCleartextTraffic="true"
  tools:targetApi="28"
  tools:ignore="GoogleAppIndexingWarning">
```
For iOS, add the following lines to your `ios/Runner/Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```
## Step 4: Use the SDK
You can now use the SDK to manage your app's translations. For example, to get the current translation for a key, use the following code:
```dart
String translation = await LokaliseFlutterSdk.translate('hello_world');
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:lokalise_flutter_sdk/lokalise_flutter_sdk.dart';

void main() {
  // Initialize the SDK
  LokaliseFlutterSdk.init(
    apiKey: 'YOUR_API_KEY',
    projectId: 'YOUR_PROJECT_ID',
  );

  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  String _translation = '';

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Lokalise Flutter SDK Demo'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Text(_translation),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _getTranslation,
                child: Text('Get Translation'),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Future<void> _getTranslation() async {
    // Get the current translation for the 'hello_world' key
    String translation = await LokaliseFlutterSdk.translate('hello_world');

    // Update the UI with the new translation
    setState(() {
      _translation = translation;
    });
  }
}

// The app flow is as follows:
// 1. The user opens the app and the SDK is initialized with the API key and project ID.
// 2. The user clicks the "Get Translation" button, which calls the _getTranslation function.
// 3. The _getTranslation function uses the SDK to get the current translation for the 'hello_world' key.
// 4. The SDK returns the translation, which is then updated in the UI using setState.
// 5. The user sees the updated translation on the screen.

// This code demonstrates the basic usage of the Lokalise Flutter SDK, including initialization, translation retrieval, and UI updates.
```

<-- END_MAIN -->
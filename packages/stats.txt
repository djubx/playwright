<-- START_DESCRIPTION -->

**Introduction to the "stats" Flutter Package**
=============================================

The "stats" Flutter package is a powerful tool for collecting and analyzing application performance metrics. It provides a simple and efficient way to track and monitor various aspects of your app's performance, such as frame rate, memory usage, and CPU utilization.

**When to Use the "stats" Package**
---------------------------------

The "stats" package is particularly useful for:

*   Identifying performance bottlenecks in your app
*   Optimizing app performance for better user experience
*   Monitoring app performance in real-time
*   Collecting data for analytics and reporting

**Key Features of the "stats" Package**
--------------------------------------

Some of the key features of the "stats" package include:

*   **Frame Rate Monitoring**: Track the frame rate of your app in real-time
*   **Memory Usage Monitoring**: Monitor the memory usage of your app
*   **CPU Utilization Monitoring**: Track the CPU utilization of your app
*   **Custom Metrics**: Collect custom metrics tailored to your app's specific needs

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setting Up the "stats" Package**
================================

To use the "stats" package in your Flutter app, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:

```yml
dependencies:
  stats: ^1.0.0
```

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:stats/stats.dart';
```

### Step 3: Initialize the Package

Initialize the package in your app's `main` function:

```dart
void main() {
  Stats().init();
  runApp(MyApp());
}
```

### Step 4: Track Metrics

Use the `Stats` class to track metrics in your app:

```dart
Stats().trackFrameRate();
Stats().trackMemoryUsage();
Stats().trackCpuUtilization();
```

### Platform-Specific Details

*   **Android**: No additional setup required
*   **iOS**: Add the following line to your `Info.plist` file:

```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:stats/stats.dart';

void main() {
  // Initialize the stats package
  Stats().init();

  // Run the app
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Create a text style for the metrics
  TextStyle _textStyle = TextStyle(fontSize: 24);

  // Create a scroll controller for the metrics
  ScrollController _scrollController = ScrollController();

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Real Flutter',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Real Flutter'),
        ),
        body: ListView(
          controller: _scrollController,
          children: [
            // Track frame rate
            ListTile(
              title: Text('Frame Rate', style: _textStyle),
              subtitle: Text('${Stats().frameRate} FPS'),
            ),

            // Track memory usage
            ListTile(
              title: Text('Memory Usage', style: _textStyle),
              subtitle: Text('${Stats().memoryUsage} MB'),
            ),

            // Track CPU utilization
            ListTile(
              title: Text('CPU Utilization', style: _textStyle),
              subtitle: Text('${Stats().cpuUtilization} %'),
            ),
          ],
        ),
      ),
    );
  }
}

// The app starts by initializing the stats package and running the RealFlutter widget.
// The RealFlutter widget creates a material app with a scaffold and a list view.
// The list view contains three list tiles, each tracking a different metric (frame rate, memory usage, and CPU utilization).
// The metrics are updated in real-time using the stats package.
// The user can scroll through the list view to view the different metrics.
```

<-- END_MAIN -->
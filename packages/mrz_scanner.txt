<-- START_DESCRIPTION -->

# MRZ Scanner Flutter Package
================================

The `mrz_scanner` Flutter package provides a simple and efficient way to scan Machine Readable Zones (MRZ) from passports, ID cards, and other travel documents. This package uses the device's camera to capture the MRZ and then parses the information into a usable format.

## When to Use This Package
---------------------------

This package is ideal for applications that require identification verification, such as:

* Border control and immigration
* Identity verification for financial transactions
* Age verification for restricted goods and services

## Features
------------

* Fast and accurate MRZ scanning
* Supports multiple document types (passports, ID cards, etc.)
* Parses information into a usable format (JSON)
* Compatible with both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the MRZ Scanner Package
=====================================

## Step 1: Add the Package to Your Pubspec.yaml File
------------------------------------------------

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  mrz_scanner: ^1.0.0
```
Then, run `flutter pub get` to install the package.

## Step 2: Import the Package
---------------------------

Import the package in your Dart file:
```dart
import 'package:mrz_scanner/mrz_scanner.dart';
```
## Step 3: Initialize the Scanner
------------------------------

Create an instance of the `MrzScanner` class:
```dart
MrzScanner _scanner = MrzScanner();
```
## Step 4: Configure the Scanner (Optional)
--------------------------------------

You can configure the scanner to suit your needs. For example, you can set the document type to scan:
```dart
_scanner.setDocumentType(MrzDocumentType.passport);
```
## Step 5: Start the Scanner
-------------------------

Start the scanner by calling the `startScan` method:
```dart
_scanner.startScan();
```
This will open the camera and begin scanning for an MRZ.

## Step 6: Handle the Scan Result
------------------------------

The `startScan` method returns a `Future` that resolves with the scan result. You can handle the result by using the `then` method:
```dart
_scanner.startScan().then((result) {
  if (result != null) {
    // Handle the scan result
  } else {
    // Handle the error
  }
});
```
### Platform-Specific Details

* Android: Make sure to add the `android.permission.CAMERA` permission to your `AndroidManifest.xml` file.
* iOS: Make sure to add the `NSCameraUsageDescription` key to your `Info.plist` file.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:mrz_scanner/mrz_scanner.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'MRZ Scanner Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  MrzScanner _scanner = MrzScanner();
  String _scanResult = '';

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('MRZ Scanner Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: () {
                // Start the scanner
                _scanner.startScan().then((result) {
                  if (result != null) {
                    // Handle the scan result
                    setState(() {
                      _scanResult = result.toString();
                    });
                  } else {
                    // Handle the error
                    setState(() {
                      _scanResult = 'Error scanning MRZ';
                    });
                  }
                });
              },
              child: Text('Scan MRZ'),
            ),
            Text(_scanResult),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user presses the "Scan MRZ" button.
// 2. The `startScan` method is called, which opens the camera and begins scanning for an MRZ.
// 3. The scan result is handled by the `then` method.
// 4. If the scan result is not null, the result is displayed on the screen.
// 5. If the scan result is null, an error message is displayed on the screen.

// In summary, this code demonstrates how to use the `mrz_scanner` package to scan an MRZ and display the result on the screen.
```

<-- END_MAIN -->
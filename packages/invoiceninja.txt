```markdown
<!-- START_DESCRIPTION -->
# InvoiceNinja Flutter Package

The **InvoiceNinja** Flutter package is a powerful tool designed for developers looking to integrate invoicing capabilities into their Flutter applications. This package allows you to create, manage, and send invoices seamlessly, making it an excellent choice for businesses that require invoicing solutions.

## When to Use This Package
- **Small to Medium Businesses**: Ideal for businesses that need to manage invoices without complex accounting software.
- **Freelancers**: Perfect for freelancers who want to send professional invoices to clients.
- **E-commerce Applications**: Useful for applications that require invoicing as part of their sales process.

## Key Features
- **Create Invoices**: Easily create invoices with customizable templates.
- **Send Invoices**: Send invoices directly to clients via email.
- **Manage Clients**: Keep track of clients and their payment statuses.
- **Payment Tracking**: Monitor payments and outstanding invoices.
- **Multi-Currency Support**: Handle transactions in various currencies.

The InvoiceNinja package simplifies the invoicing process, allowing developers to focus on building their applications while providing robust invoicing features.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Setting Up the InvoiceNinja Package

To get started with the InvoiceNinja package, follow these steps:

## Installation

1. **Add Dependency**: Open your `pubspec.yaml` file and add the following dependency:

   ```yaml
   dependencies:
     invoiceninja: ^latest_version
   ```

   Replace `latest_version` with the most recent version of the package.

2. **Install Packages**: Run the following command in your terminal to install the package:

   ```bash
   flutter pub get
   ```

## Platform-Specific Configuration

### Android
- Ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

   ```groovy
   android {
       ...
       defaultConfig {
           ...
           minSdkVersion 21
           ...
       }
   }
   ```

### iOS
- For iOS, ensure you have the correct permissions set in your `Info.plist` file if you plan to send emails directly from the app.

## Basic Usage

To use the InvoiceNinja package, you need to initialize it and create an instance of the main class. Hereâ€™s a simple example:

```dart
import 'package:flutter/material.dart';
import 'package:invoiceninja/invoiceninja.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Invoice Ninja Demo',
      home: RealFlutter(),
    );
  }
}
```

This sets up a basic Flutter application with the InvoiceNinja package ready to use. You can now start creating and managing invoices within your app.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of InvoiceNinja in Flutter

```dart
import 'package:flutter/material.dart';
import 'package:invoiceninja/invoiceninja.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Invoice Ninja Demo',
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Create an instance of the InvoiceNinja class
  final InvoiceNinja _invoiceNinja = InvoiceNinja();

  @override
  void initState() {
    super.initState();
    // Initialize the InvoiceNinja instance
    _invoiceNinja.initialize();
  }

  // Function to create a new invoice
  void _createInvoice() {
    // Define the invoice details
    final invoice = Invoice(
      clientId: 'client_id',
      amount: 100.0,
      currency: 'USD',
      description: 'Consulting Services',
    );

    // Call the create method from InvoiceNinja
    _invoiceNinja.createInvoice(invoice).then((result) {
      // Handle the result of the invoice creation
      if (result.success) {
        // Show success message
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Invoice created successfully!')),
        );
      } else {
        // Show error message
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Failed to create invoice: ${result.error}')),
        );
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Invoice Ninja Demo'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: _createInvoice, // Call the create invoice function
          child: Text('Create Invoice'),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the MyApp widget.
// 2. MyApp sets up the MaterialApp and points to the RealFlutter widget as the home.
// 3. In RealFlutter, we create an instance of InvoiceNinja and initialize it in initState.
// 4. The _createInvoice function defines an invoice and calls the createInvoice method from InvoiceNinja.
// 5. Upon success or failure, a SnackBar is displayed to inform the user of the result.
// 6. The UI consists of a button that triggers the invoice creation when pressed.
```
<!-- END_MAIN -->
```

### Summary
In this blog post, we explored the InvoiceNinja Flutter package, detailing its features, installation process, and usage through a complete example. The provided code demonstrates how to create an invoice and handle the response effectively. This package is a valuable tool for developers looking to integrate invoicing capabilities into their Flutter applications, especially for small to medium businesses and freelancers.
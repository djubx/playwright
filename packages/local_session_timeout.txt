Here's a detailed technical blog on the "local_session_timeout" Flutter package, structured as requested.

<!-- START_DESCRIPTION -->
# Local Session Timeout Flutter Package

The `local_session_timeout` package is a Flutter library designed to manage user sessions effectively by implementing a timeout mechanism. This package is particularly useful in applications where user security and session management are critical, such as banking apps, social media platforms, and any application that handles sensitive user data.

## When to Use This Package

You should consider using the `local_session_timeout` package in scenarios such as:

- **Security-Sensitive Applications**: When your app deals with sensitive information, it's essential to log users out after a period of inactivity.
- **User Experience**: To enhance user experience by preventing unauthorized access to the app when the user is away.
- **Compliance**: To comply with regulations that require session management and timeout policies.

## Features

- **Customizable Timeout Duration**: Set the duration for session timeout according to your application's needs.
- **Automatic Logout**: Automatically logs out users after the specified timeout period.
- **Session Reset**: Resets the session timer on user activity, ensuring that active users remain logged in.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS platforms.

By leveraging this package, developers can ensure that their applications maintain a high level of security while providing a smooth user experience.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Local Session Timeout Package

## Step 1: Adding the Dependency

To get started, add the `local_session_timeout` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  local_session_timeout: ^1.0.0  # Check for the latest version on pub.dev
```

## Step 2: Importing the Package

In your Dart file, import the package:

```dart
import 'package:local_session_timeout/local_session_timeout.dart';
```

## Step 3: Initializing the Package

You need to initialize the session timeout in your main application file. This is typically done in the `initState` method of your main widget.

### Android Configuration

For Android, ensure that your `AndroidManifest.xml` has the necessary permissions if you are using features that require them. However, the `local_session_timeout` package does not require any special permissions.

### iOS Configuration

For iOS, ensure that your app's `Info.plist` file is configured correctly. Again, the `local_session_timeout` package does not require any specific configurations.

## Step 4: Using the Package

You can use the package by creating an instance of `LocalSessionTimeout` and setting the timeout duration. Hereâ€™s a basic example:

```dart
LocalSessionTimeout sessionTimeout = LocalSessionTimeout(
  timeoutDuration: Duration(minutes: 5), // Set timeout duration
  onTimeout: () {
    // Handle timeout, e.g., navigate to login screen
    print("Session timed out!");
  },
);
```

## Step 5: Resetting the Session

To reset the session timeout on user activity, you can call the `resetSession` method whenever the user interacts with the app:

```dart
sessionTimeout.resetSession();
```

This method should be called in response to user actions, such as button presses or screen taps.

With these steps, you can effectively manage user sessions in your Flutter application using the `local_session_timeout` package.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using Local Session Timeout

```dart
import 'package:flutter/material.dart';
import 'package:local_session_timeout/local_session_timeout.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatefulWidget {
  @override
  _MyAppState createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  // Create an instance of LocalSessionTimeout
  LocalSessionTimeout sessionTimeout;

  @override
  void initState() {
    super.initState();
    // Initialize the session timeout with a duration of 5 minutes
    sessionTimeout = LocalSessionTimeout(
      timeoutDuration: Duration(minutes: 5),
      onTimeout: () {
        // Handle session timeout
        Navigator.of(context).pushReplacement(
          MaterialPageRoute(builder: (context) => LoginScreen()),
        );
      },
    );
    // Start the session timeout
    sessionTimeout.startSession();
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Local Session Timeout Example')),
        body: GestureDetector(
          onTap: () {
            // Reset the session timeout on user interaction
            sessionTimeout.resetSession();
          },
          child: Center(
            child: Text('Tap anywhere to reset session timeout.'),
          ),
        ),
      ),
    );
  }

  @override
  void dispose() {
    // Dispose of the session timeout when the app is closed
    sessionTimeout.dispose();
    super.dispose();
  }
}

class LoginScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Login')),
      body: Center(child: Text('Session has timed out. Please log in again.')),
    );
  }
}
```

### Application Flow Explanation

// The application starts with the `MyApp` widget, which initializes the `LocalSessionTimeout` instance.
// The timeout duration is set to 5 minutes, and the `onTimeout` callback navigates to the `LoginScreen` when the session times out.
// The `GestureDetector` widget wraps the main content, allowing the app to reset the session timeout whenever the user taps anywhere on the screen.
// The `resetSession` method is called on user interaction, ensuring that active users remain logged in.
// When the app is disposed of, the session timeout is also disposed of to free up resources.
// If the session times out, the user is redirected to the `LoginScreen`, prompting them to log in again.

```
<!-- END_MAIN -->

This blog provides a comprehensive overview of the `local_session_timeout` package, including its features, setup instructions, and a complete example demonstrating its usage in a Flutter application.
<-- START_DESCRIPTION -->

# Introduction to graphql_query_compress Flutter Package
=====================================================

The `graphql_query_compress` package is a useful tool for compressing GraphQL queries in Flutter applications. It helps reduce the size of queries, making them more efficient and faster to execute. In this blog, we will explore the features of this package, its setup process, and provide a complete example of how to use it.

### When to Use This Package

This package is particularly useful when working with large and complex GraphQL queries. By compressing these queries, you can improve the performance of your application and reduce the amount of data transferred over the network.

### Features

*   Compresses GraphQL queries to reduce their size
*   Supports compression of queries with variables and fragments
*   Easy to integrate with existing Flutter applications

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the graphql_query_compress Package
=============================================

To use the `graphql_query_compress` package, you need to add it to your Flutter project's `pubspec.yaml` file. Here's how to do it:

### Step 1: Add the Package to pubspec.yaml

```yml
dependencies:
  flutter:
    sdk: flutter
  graphql_query_compress: ^1.0.0
```

### Step 2: Run flutter pub get

Run the following command in your terminal to get the package:

```bash
flutter pub get
```

### Step 3: Import the Package

Import the package in your Dart file:

```dart
import 'package:graphql_query_compress/graphql_query_compress.dart';
```

### Using the Package

To compress a GraphQL query, you can use the `compressQuery` function:

```dart
String query = """
  query {
    user {
      id
      name
    }
  }
""";

String compressedQuery = compressQuery(query);
print(compressedQuery);
```

This will output the compressed query.

### Platform-Specific Details

The `graphql_query_compress` package works on both Android and iOS platforms. However, you may need to configure your project settings to use it.

#### Android

No additional configuration is required for Android.

#### iOS

No additional configuration is required for iOS.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:graphql_query_compress/graphql_query_compress.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'GraphQL Query Compress Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  String _query = """
    query {
      user {
        id
        name
      }
    }
  """;

  String _compressedQuery = "";

  void _compressQuery() {
    String compressedQuery = compressQuery(_query);
    setState(() {
      _compressedQuery = compressedQuery;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('GraphQL Query Compress Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Original Query:',
              style: TextStyle(fontSize: 20),
            ),
            Text(_query),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _compressQuery,
              child: Text('Compress Query'),
            ),
            SizedBox(height: 20),
            Text(
              'Compressed Query:',
              style: TextStyle(fontSize: 20),
            ),
            Text(_compressedQuery),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and sees the original query displayed on the screen.
// 2. The user clicks the "Compress Query" button.
// 3. The _compressQuery function is called, which compresses the original query using the compressQuery function from the graphql_query_compress package.
// 4. The compressed query is then displayed on the screen below the original query.
// 5. The user can compare the original query with the compressed query to see the difference.

// In summary, this app demonstrates how to use the graphql_query_compress package to compress a GraphQL query and display the result on the screen.
```

<-- END_MAIN -->
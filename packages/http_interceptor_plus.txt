<-- START_DESCRIPTION -->

# http_interceptor_plus Flutter Package
=====================================

The `http_interceptor_plus` package is a powerful tool for intercepting and modifying HTTP requests in Flutter applications. It provides a simple and efficient way to handle HTTP requests and responses, allowing developers to add custom logic, headers, and parameters to their requests.

### When to Use This Package

This package is useful when you need to:

* Add custom headers or parameters to your HTTP requests
* Handle HTTP requests and responses in a centralized way
* Implement authentication or authorization logic
* Log or debug HTTP requests and responses

### Features

* Intercepts HTTP requests and responses
* Allows adding custom headers and parameters to requests
* Provides a centralized way to handle requests and responses
* Supports logging and debugging

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `http_interceptor_plus` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  http_interceptor_plus: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:http_interceptor_plus/http_interceptor_plus.dart';
```
### Step 3: Create an Interceptor

Create a class that implements the `Interceptor` interface:
```dart
class MyInterceptor implements Interceptor {
  @override
  Future<Request> intercept(Request request) async {
    // Add custom logic here
    return request;
  }
}
```
### Step 4: Add the Interceptor to the HTTP Client

Create an instance of the `HttpClient` class and add the interceptor:
```dart
final httpClient = HttpClient();
httpClient.interceptors.add(MyInterceptor());
```
### Platform-Specific Details

* Android: No additional configuration is required.
* iOS: You need to add the following lines to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:http_interceptor_plus/http_interceptor_plus.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'http_interceptor_plus Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _httpClient = HttpClient();

  @override
  void initState() {
    super.initState();
    _httpClient.interceptors.add(MyInterceptor());
  }

  Future<void> _makeRequest() async {
    final request = Request('GET', 'https://example.com');
    final response = await _httpClient.send(request);
    print(response.body);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('http_interceptor_plus Demo'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: _makeRequest,
          child: Text('Make Request'),
        ),
      ),
    );
  }
}

class MyInterceptor implements Interceptor {
  @override
  Future<Request> intercept(Request request) async {
    // Add custom logic here
    print('Intercepting request...');
    return request;
  }
}

// Application flow:
// 1. The user presses the "Make Request" button.
// 2. The `_makeRequest` function is called, which creates a new `Request` object.
// 3. The `Request` object is sent to the `_httpClient`, which intercepts the request using the `MyInterceptor` class.
// 4. The `MyInterceptor` class adds custom logic to the request (in this case, printing a message to the console).
// 5. The modified request is sent to the server, which responds with a response object.
// 6. The response object is printed to the console.
```

// Final summary:
// The code flows as follows: the user presses the button, which triggers the `_makeRequest` function. This function creates a new `Request` object and sends it to the `_httpClient`. The `_httpClient` intercepts the request using the `MyInterceptor` class, which adds custom logic to the request. The modified request is then sent to the server, which responds with a response object. The response object is printed to the console.

<-- END_MAIN -->
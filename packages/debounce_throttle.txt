<-- START_DESCRIPTION -->

# Debounce Throttle Flutter Package
=====================================

The `debounce_throttle` Flutter package provides a simple and efficient way to handle frequent events, such as button clicks or text input changes, by debouncing or throttling them. Debouncing ensures that only the last event is processed after a specified delay, while throttling limits the frequency of events processed within a specified time window.

### When to Use

*   Handle frequent button clicks to prevent multiple simultaneous actions.
*   Process text input changes only after the user has finished typing.
*   Limit the frequency of API calls or other resource-intensive operations.

### Features

*   Debouncing: process only the last event after a specified delay.
*   Throttling: limit the frequency of events processed within a specified time window.
*   Configurable delay and time window durations.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
=====================

### Add the Package to Your Project

Add the `debounce_throttle` package to your `pubspec.yaml` file:

```yml
dependencies:
  debounce_throttle: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Import the Package

Import the package in your Dart file:

```dart
import 'package:debounce_throttle/debounce_throttle.dart';
```

### Debouncing

Create a `Debouncer` instance with a specified delay:

```dart
final debouncer = Debouncer(delay: const Duration(milliseconds: 500));
```

Then, call the `debouncer.run` method to debounce events:

```dart
debouncer.run(() {
  // Process the event
});
```

### Throttling

Create a `Throttler` instance with a specified time window:

```dart
final throttler = Throttler(timeWindow: const Duration(seconds: 1));
```

Then, call the `throttler.run` method to throttle events:

```dart
throttler.run(() {
  // Process the event
});
```

### Platform-Specific Details

No platform-specific configurations or optimizations are required.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:debounce_throttle/debounce_throttle.dart';

void main() {
  runApp(const RealFlutterApp());
}

class RealFlutterApp extends StatelessWidget {
  const RealFlutterApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Debounce Throttle Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: const RealFlutterHomePage(),
    );
  }
}

class RealFlutterHomePage extends StatefulWidget {
  const RealFlutterHomePage({Key? key}) : super(key: key);

  @override
  State<RealFlutterHomePage> createState() => _RealFlutterHomePageState();
}

class _RealFlutterHomePageState extends State<RealFlutterHomePage> {
  final _debouncer = Debouncer(delay: const Duration(milliseconds: 500));
  final _throttler = Throttler(timeWindow: const Duration(seconds: 1));
  int _debounceCount = 0;
  int _throttleCount = 0;

  void _debounceButtonPressed() {
    _debouncer.run(() {
      setState(() {
        _debounceCount++;
      });
    });
  }

  void _throttleButtonPressed() {
    _throttler.run(() {
      setState(() {
        _throttleCount++;
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Debounce Throttle Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            ElevatedButton(
              onPressed: _debounceButtonPressed,
              child: const Text('Debounce Button'),
            ),
            Text('Debounce count: $_debounceCount'),
            const SizedBox(height: 20),
            ElevatedButton(
              onPressed: _throttleButtonPressed,
              child: const Text('Throttle Button'),
            ),
            Text('Throttle count: $_throttleCount'),
          ],
        ),
      ),
    );
  }
}

// The app starts by creating a MaterialApp with a RealFlutterHomePage as its home page.
// The RealFlutterHomePage has two buttons: Debounce Button and Throttle Button.
// When the Debounce Button is pressed, the _debounceButtonPressed method is called, which debounces the event using the _debouncer.
// The debounced event increments the _debounceCount and updates the UI.
// When the Throttle Button is pressed, the _throttleButtonPressed method is called, which throttles the event using the _throttler.
// The throttled event increments the _throttleCount and updates the UI.
// The app demonstrates debouncing and throttling of frequent events.

```

<-- END_MAIN -->
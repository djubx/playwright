<-- START_DESCRIPTION -->

# Flutter Web3 Package Overview
=====================================

The `flutter_web3` package provides a simple and intuitive way to interact with the Ethereum blockchain in Flutter applications. It allows developers to create, manage, and interact with Ethereum wallets, as well as send and receive transactions.

### When to Use

The `flutter_web3` package is ideal for building decentralized applications (dApps) that require interaction with the Ethereum blockchain. Some examples of use cases include:

* Creating a cryptocurrency wallet app
* Building a decentralized finance (DeFi) application
* Developing a non-fungible token (NFT) marketplace

### Features

The `flutter_web3` package provides the following features:

* Wallet creation and management
* Transaction sending and receiving
* Ethereum network interaction (mainnet, testnet, etc.)
* Support for various Ethereum providers (Infura, Alchemy, etc.)

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the Flutter Web3 Package
=============================================

### Step 1: Add the Package to Your Project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_web3: ^0.1.1
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:flutter_web3/flutter_web3.dart';
```
### Step 3: Set Up the Ethereum Provider

Set up an Ethereum provider (e.g. Infura) and obtain an API key. Then, create an instance of the `Web3` class:
```dart
final web3 = Web3('https://mainnet.infura.io/v3/YOUR_API_KEY');
```
### Step 4: Create a Wallet

Create a new wallet using the `Wallet` class:
```dart
final wallet = Wallet.createNew();
```
### Step 5: Send a Transaction

Send a transaction using the `sendTransaction` method:
```dart
final txHash = await web3.sendTransaction(
  from: wallet.address,
  to: '0x... recipient address ...',
  value: EtherAmount(1.0),
);
```
### Platform-Specific Details

* Android: No additional setup required.
* iOS: Add the following line to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_web3/flutter_web3.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Web3 Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _web3 = Web3('https://mainnet.infura.io/v3/YOUR_API_KEY');
  final _wallet = Wallet.createNew();

  String _txHash = '';

  void _sendTransaction() async {
    // Send a transaction
    final txHash = await _web3.sendTransaction(
      from: _wallet.address,
      to: '0x... recipient address ...',
      value: EtherAmount(1.0),
    );

    setState(() {
      _txHash = txHash;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Web3 Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text('Wallet Address: ${_wallet.address}'),
            Text('Transaction Hash: $_txHash'),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _sendTransaction,
              child: Text('Send Transaction'),
            ),
          ],
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user opens the app and is presented with a wallet address and a "Send Transaction" button.
// 2. When the user clicks the "Send Transaction" button, the app sends a transaction to the recipient address using the `sendTransaction` method.
// 3. The transaction hash is displayed on the screen.
// 4. The user can copy the transaction hash and verify the transaction on a blockchain explorer.

// Created/Modified files during execution:
// None
```

<-- END_MAIN -->
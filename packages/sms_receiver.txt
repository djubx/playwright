<-- START_DESCRIPTION -->

**sms_receiver Flutter Package: A Comprehensive Overview**
===========================================================

The `sms_receiver` Flutter package provides a simple and efficient way to receive and handle SMS messages within your Flutter application. This package is particularly useful when implementing features such as SMS-based authentication, OTP verification, or SMS-driven workflows.

**Key Features:**

*   Receive SMS messages within your Flutter application
*   Handle SMS messages using a simple and intuitive API
*   Supports both Android and iOS platforms
*   Customizable to fit your specific use case

**When to Use:**

*   Implementing SMS-based authentication or OTP verification
*   Creating SMS-driven workflows or features
*   Receiving and processing SMS messages within your application

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setting Up and Using the sms_receiver Package**
=============================================

### Step 1: Add the Package to Your pubspec.yaml File

```yml
dependencies:
  flutter:
    sdk: flutter
  sms_receiver: ^0.9.3
```

### Step 2: Import the Package in Your Dart File

```dart
import 'package:sms_receiver/sms_receiver.dart';
```

### Step 3: Request SMS Permissions (Android Only)

```dart
void requestSmsPermission() async {
  await SmsReceiver.requestSmsPermission();
}
```

### Step 4: Start Listening for SMS Messages

```dart
void startListening() async {
  await SmsReceiver.startListening(
    onSmsReceived: (SmsMessage message) {
      // Handle the received SMS message
    },
  );
}
```

### Step 5: Stop Listening for SMS Messages

```dart
void stopListening() async {
  await SmsReceiver.stopListening();
}
```

### Platform-Specific Details:

*   **Android:** The `sms_receiver` package requires the `android.permission.RECEIVE_SMS` permission to receive SMS messages. You can request this permission using the `SmsReceiver.requestSmsPermission()` method.
*   **iOS:** The `sms_receiver` package uses the `CoreTelephony` framework to receive SMS messages. You don't need to request any specific permissions to use this package on iOS.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:sms_receiver/sms_receiver.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'SMS Receiver Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final SmsReceiver _smsReceiver = SmsReceiver();

  void _requestSmsPermission() async {
    // Request SMS permission on Android
    await _smsReceiver.requestSmsPermission();
  }

  void _startListening() async {
    // Start listening for SMS messages
    await _smsReceiver.startListening(
      onSmsReceived: (SmsMessage message) {
        // Handle the received SMS message
        print('Received SMS message: ${message.body}');
      },
    );
  }

  void _stopListening() async {
    // Stop listening for SMS messages
    await _smsReceiver.stopListening();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('SMS Receiver Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: _requestSmsPermission,
              child: Text('Request SMS Permission'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _startListening,
              child: Text('Start Listening for SMS'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _stopListening,
              child: Text('Stop Listening for SMS'),
            ),
          ],
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user opens the app and is presented with a button to request SMS permission.
// 2. When the user clicks the button, the app requests SMS permission on Android.
// 3. After permission is granted, the user can click the "Start Listening for SMS" button to start listening for SMS messages.
// 4. When an SMS message is received, the app prints the message body to the console.
// 5. The user can click the "Stop Listening for SMS" button to stop listening for SMS messages.

// Summary:
// This code demonstrates how to use the sms_receiver package to receive and handle SMS messages within a Flutter app.
// The app requests SMS permission on Android, starts listening for SMS messages, and prints the received message body to the console.
```

<-- END_MAIN -->
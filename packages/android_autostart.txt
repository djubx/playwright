<-- START_DESCRIPTION -->

**Android Autostart Flutter Package**
=====================================

The `android_autostart` Flutter package allows you to enable autostart for your Flutter app on Android devices. Autostart is a feature that allows your app to start automatically when the device boots up. This package provides a simple and easy-to-use API to enable autostart for your app.

**When to Use This Package**
---------------------------

You can use this package in scenarios where you want your app to start automatically when the device boots up, such as:

* Running a background service to perform some tasks
* Starting a foreground service to show a notification
* Launching an activity to show some information to the user

**Features**
------------

The `android_autostart` package provides the following features:

* Enable autostart for your app
* Disable autostart for your app
* Check if autostart is enabled for your app

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setup and Usage**
-------------------

To use the `android_autostart` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  android_autostart: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:android_autostart/android_autostart.dart';
```
### Step 3: Enable Autostart

To enable autostart, use the `enableAutostart` method:
```dart
await AndroidAutostart.enableAutostart();
```
### Step 4: Disable Autostart

To disable autostart, use the `disableAutostart` method:
```dart
await AndroidAutostart.disableAutostart();
```
### Step 5: Check Autostart Status

To check if autostart is enabled, use the `isAutostartEnabled` method:
```dart
bool isEnabled = await AndroidAutostart.isAutostartEnabled();
```
### Platform-Specific Details

* On Android, the package uses the `android.permission.RECEIVE_BOOT_COMPLETED` permission to enable autostart.
* On iOS, autostart is not supported due to platform limitations.

### Configurations and Optimizations

* Make sure to add the `android.permission.RECEIVE_BOOT_COMPLETED` permission to your AndroidManifest.xml file.
* If you are using a foreground service, make sure to add the `android.permission.FOREGROUND_SERVICE` permission to your AndroidManifest.xml file.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:android_autostart/android_autostart.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Autostart Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  bool _isAutostartEnabled = false;

  @override
  void initState() {
    super.initState();
    _checkAutostartStatus();
  }

  Future<void> _checkAutostartStatus() async {
    bool isEnabled = await AndroidAutostart.isAutostartEnabled();
    setState(() {
      _isAutostartEnabled = isEnabled;
    });
  }

  Future<void> _enableAutostart() async {
    await AndroidAutostart.enableAutostart();
    _checkAutostartStatus();
  }

  Future<void> _disableAutostart() async {
    await AndroidAutostart.disableAutostart();
    _checkAutostartStatus();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Autostart Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              _isAutostartEnabled ? 'Autostart is enabled' : 'Autostart is disabled',
              style: TextStyle(fontSize: 24),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _enableAutostart,
              child: Text('Enable Autostart'),
            ),
            SizedBox(height: 10),
            ElevatedButton(
              onPressed: _disableAutostart,
              child: Text('Disable Autostart'),
            ),
          ],
        ),
      ),
    );
  }
}

// The app starts by checking the autostart status.
// If autostart is enabled, it displays a message indicating that autostart is enabled.
// If autostart is disabled, it displays a message indicating that autostart is disabled.
// The user can enable or disable autostart by pressing the corresponding buttons.
// When the user enables or disables autostart, the app updates the autostart status and displays the new status.

// The app uses the AndroidAutostart package to enable and disable autostart.
// The package provides a simple and easy-to-use API to enable and disable autostart.
// The app also uses the AndroidAutostart package to check the autostart status.

// The app is a simple demonstration of how to use the AndroidAutostart package to enable and disable autostart in a Flutter app.
```

<-- END_MAIN -->
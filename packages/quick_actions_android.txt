<-- START_DESCRIPTION -->

**Quick Actions Android Flutter Package**
=====================================

The `quick_actions_android` Flutter package allows developers to create custom quick actions for their Android app. Quick actions are a set of shortcuts that can be accessed by long-pressing on the app's icon. This package provides a simple and easy-to-use API for creating and managing quick actions.

**When to Use**
---------------

Use this package when you want to provide users with quick access to specific features or actions within your app. For example, a music streaming app could use quick actions to allow users to quickly play, pause, or skip tracks.

**Features**
------------

*   Create custom quick actions with icons and labels
*   Support for multiple quick actions
*   Easy-to-use API for creating and managing quick actions

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setup and Usage**
-------------------

### Step 1: Add the Package to Your Project

Add the `quick_actions_android` package to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  quick_actions_android: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:quick_actions_android/quick_actions_android.dart';
```

### Step 3: Create Quick Actions

Create a list of quick actions using the `QuickAction` class:

```dart
List<QuickAction> quickActions = [
  QuickAction(
    icon: Icons.play_arrow,
    label: 'Play',
    action: 'play',
  ),
  QuickAction(
    icon: Icons.pause,
    label: 'Pause',
    action: 'pause',
  ),
];
```

### Step 4: Initialize the Package

Initialize the package in your app's `initState` method:

```dart
@override
void initState() {
  super.initState();
  QuickActionsAndroid.initialize(quickActions);
}
```

### Step 5: Handle Quick Action Taps

Handle quick action taps using the `onAction` callback:

```dart
QuickActionsAndroid.onAction((action) {
  switch (action) {
    case 'play':
      // Play music
      break;
    case 'pause':
      // Pause music
      break;
  }
});
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:quick_actions_android/quick_actions_android.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Quick Actions Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  List<QuickAction> quickActions = [
    QuickAction(
      icon: Icons.play_arrow,
      label: 'Play',
      action: 'play',
    ),
    QuickAction(
      icon: Icons.pause,
      label: 'Pause',
      action: 'pause',
    ),
  ];

  @override
  void initState() {
    super.initState();
    QuickActionsAndroid.initialize(quickActions);
    QuickActionsAndroid.onAction((action) {
      switch (action) {
        case 'play':
          // Play music
          print('Playing music...');
          break;
        case 'pause':
          // Pause music
          print('Pausing music...');
          break;
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Quick Actions Demo'),
      ),
      body: Center(
        child: Text('Long-press on the app icon to see quick actions!'),
      ),
    );
  }
}

// The app starts by initializing the quick actions in the initState method.
// When a quick action is tapped, the onAction callback is triggered.
// The callback checks the action type and performs the corresponding action.
// In this example, we simply print a message to the console.
// In a real-world app, you would replace this with your own logic.
// For example, you might play or pause music, navigate to a different screen, or perform some other action.
```

<-- END_MAIN -->
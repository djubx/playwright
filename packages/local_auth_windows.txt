<-- START_DESCRIPTION -->

Local Auth Windows Flutter Package
=====================================

The `local_auth_windows` Flutter package provides a simple and efficient way to authenticate users on Windows devices using fingerprint, face, or iris recognition. This package is a must-have for any Flutter developer looking to add an extra layer of security to their Windows-based applications.

When to Use This Package
------------------------

You should use this package when:

* You want to add biometric authentication to your Flutter app on Windows devices.
* You need a simple and efficient way to authenticate users without requiring them to enter a password or PIN.
* You want to provide a seamless and secure user experience for your Windows-based application.

Features
--------

* Supports fingerprint, face, and iris recognition.
* Easy to integrate with your existing Flutter app.
* Provides a simple and efficient way to authenticate users.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
---------------

To use the `local_auth_windows` package, follow these steps:

### Step 1: Add the Package to Your Pubspec.yaml File

```yml
dependencies:
  flutter:
    sdk: flutter
  local_auth_windows: ^1.0.0
```

### Step 2: Import the Package in Your Dart File

```dart
import 'package:flutter/material.dart';
import 'package:local_auth_windows/local_auth_windows.dart';
```

### Step 3: Initialize the Local Auth Windows Plugin

```dart
class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final LocalAuthWindows _localAuthWindows = LocalAuthWindows();

  @override
  void initState() {
    super.initState();
    _localAuthWindows.initialize();
  }
}
```

### Step 4: Authenticate the User

```dart
Future<void> _authenticateUser() async {
  try {
    final bool isAuthenticated = await _localAuthWindows.authenticate(
      localizedReason: 'Please authenticate to access the app',
      useErrorDialogs: true,
    );

    if (isAuthenticated) {
      print('User is authenticated');
    } else {
      print('User is not authenticated');
    }
  } on PlatformException catch (e) {
    print('Error: ${e.message}');
  }
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:local_auth_windows/local_auth_windows.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Local Auth Windows Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final LocalAuthWindows _localAuthWindows = LocalAuthWindows();

  @override
  void initState() {
    super.initState();
    _localAuthWindows.initialize();
  }

  Future<void> _authenticateUser() async {
    // Step 1: Authenticate the user using the Local Auth Windows plugin
    try {
      final bool isAuthenticated = await _localAuthWindows.authenticate(
        localizedReason: 'Please authenticate to access the app',
        useErrorDialogs: true,
      );

      // Step 2: Check if the user is authenticated
      if (isAuthenticated) {
        print('User is authenticated');
      } else {
        print('User is not authenticated');
      }
    } on PlatformException catch (e) {
      // Step 3: Handle any errors that occur during authentication
      print('Error: ${e.message}');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Local Auth Windows Demo'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: _authenticateUser,
          child: Text('Authenticate'),
        ),
      ),
    );
  }
}

// The app starts by initializing the Local Auth Windows plugin in the initState method.
// When the user clicks the Authenticate button, the _authenticateUser method is called.
// This method authenticates the user using the Local Auth Windows plugin and checks if the user is authenticated.
// If the user is authenticated, it prints a success message to the console.
// If the user is not authenticated, it prints an error message to the console.
// Any errors that occur during authentication are caught and handled by printing an error message to the console.
```

<-- END_MAIN -->
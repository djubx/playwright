<-- START_DESCRIPTION -->

# Introduction to dartpy
The dartpy package is a powerful tool for Flutter developers, allowing them to leverage the capabilities of Python scripts within their Flutter applications. This package provides a seamless way to integrate Python code into Flutter, enabling developers to utilize the strengths of both languages.

## When to Use dartpy
dartpy is particularly useful when you need to:

* Use Python libraries or frameworks that don't have a Dart equivalent
* Perform complex computations or data analysis that are easier to implement in Python
* Integrate existing Python code into your Flutter application

## Features of dartpy
Some key features of the dartpy package include:

* Support for running Python scripts within Flutter applications
* Ability to pass data between Dart and Python code
* Support for various Python libraries and frameworks

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up dartpy
To use dartpy in your Flutter project, follow these steps:

1. Add the dartpy package to your `pubspec.yaml` file:
```yml
dependencies:
  dartpy: ^1.0.0
```
2. Run `flutter pub get` to install the package.
3. Import the dartpy package in your Dart file:
```dart
import 'package:dartpy/dartpy.dart';
```
4. Create a new instance of the `Python` class:
```dart
Python python = Python();
```
5. Use the `python` instance to run Python scripts or pass data between Dart and Python code.

## Platform-Specific Details
### Android
To use dartpy on Android, you need to add the following configuration to your `android/app/build.gradle` file:
```groovy
android {
    ...
    defaultConfig {
        ...
        ndk {
            abiFilters "armeabi-v7l", "arm64-v8a", "x86", "x86_64"
        }
    }
}
```
### iOS
To use dartpy on iOS, you need to add the following configuration to your `ios/Podfile` file:
```ruby
target 'YourApp' do
  ...
  pod 'dartpy', :path => '../.symlinks/plugins/dartpy/ios'
end
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:dartpy/dartpy.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'dartpy Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  Python _python;

  @override
  void initState() {
    super.initState();
    _python = Python();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('dartpy Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Result:',
              style: TextStyle(fontSize: 24),
            ),
            Text(
              _result,
              style: TextStyle(fontSize: 24),
            ),
          ],
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _runPythonScript,
        tooltip: 'Run Python Script',
        child: Icon(Icons.play_arrow),
      ),
    );
  }

  String _result = '';

  void _runPythonScript() async {
    // Run a Python script that adds two numbers
    String script = '''
def add(a, b):
  return a + b

result = add(2, 3)
print(result)
''';
    _python.run(script);
    // Get the result from the Python script
    _result = _python.get('result');
    setState(() {});
  }
}

// The application flow is as follows:
// 1. The user clicks the floating action button to run the Python script.
// 2. The `_runPythonScript` function is called, which runs the Python script using the `dartpy` package.
// 3. The Python script adds two numbers and prints the result.
// 4. The result is retrieved from the Python script using the `get` method of the `dartpy` package.
// 5. The result is displayed on the screen by updating the `_result` variable and calling `setState`.
```

// The application flow is a simple demonstration of how to use the `dartpy` package to run a Python script and retrieve the result. The script adds two numbers and prints the result, which is then displayed on the screen. This example shows how to use the `dartpy` package to integrate Python code into a Flutter application.
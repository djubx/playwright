<-- START_DESCRIPTION -->

# Device Info Null Safety Package
=====================================

The `device_info_null_safety` package is a Flutter package that provides a simple way to access device information, such as device name, model, and operating system version, while ensuring null safety.

## When to Use This Package
---------------------------

This package is useful when you need to access device information in your Flutter app, such as:

* Displaying device information to the user
* Logging device information for debugging purposes
* Using device information to customize the app's behavior

## Features
------------

* Provides a simple API for accessing device information
* Ensures null safety by returning `null` instead of throwing an exception when device information is not available
* Supports both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `device_info_null_safety` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  device_info_null_safety: ^1.0.0
```
2. Run `flutter pub get` to install the package.

## Platform-Specific Configurations
-----------------------------------

### Android

No additional configurations are required for Android.

### iOS

To access device information on iOS, you need to add the following lines to your `Info.plist` file:
```xml
<key>NSDeviceInformation</key>
<true/>
```
## Using the Package
---------------------

To use the package, import it in your Dart file:
```dart
import 'package:device_info_null_safety/device_info_null_safety.dart';
```
Then, use the `DeviceInfo` class to access device information:
```dart
DeviceInfo deviceInfo = DeviceInfo();
print(deviceInfo.deviceName);
print(deviceInfo.deviceModel);
print(deviceInfo.osVersion);
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:device_info_null_safety/device_info_null_safety.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Device Info Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  DeviceInfo _deviceInfo = DeviceInfo();

  @override
  void initState() {
    super.initState();
    _initDeviceInfo();
  }

  Future<void> _initDeviceInfo() async {
    // Initialize device info
    await _deviceInfo.init();
    setState(() {});
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Device Info Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text('Device Name: ${_deviceInfo.deviceName}'),
            Text('Device Model: ${_deviceInfo.deviceModel}'),
            Text('OS Version: ${_deviceInfo.osVersion}'),
          ],
        ),
      ),
    );
  }
}

// Application flow:
// 1. The app starts and initializes the DeviceInfo object.
// 2. The DeviceInfo object is used to access device information.
// 3. The device information is displayed on the screen.
// 4. When the user closes the app, the DeviceInfo object is disposed.

// Summary:
// This code demonstrates how to use the device_info_null_safety package to access device information in a Flutter app.
// The app initializes the DeviceInfo object and uses it to access device information, which is then displayed on the screen.
```

<-- END_MAIN -->
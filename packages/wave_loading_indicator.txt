<-- START_DESCRIPTION -->

Wave Loading Indicator
======================
The `wave_loading_indicator` package is a Flutter library that provides a customizable, wave-based loading indicator for your mobile applications. It's perfect for adding a visually appealing loading animation to your app's UI.

When to Use
-----------
You can use this package in various scenarios, such as:

* When fetching data from a server or database
* During file uploads or downloads
* When performing time-consuming computations
* In splash screens or onboarding processes

Features
--------
The `wave_loading_indicator` package offers the following features:

* Customizable wave color, amplitude, and speed
* Support for multiple wave types (e.g., sine, cosine, sawtooth)
* Option to display a progress value (e.g., percentage)
* Compatible with both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
----------------

### Step 1: Add the package to your pubspec.yaml file

```yml
dependencies:
  wave_loading_indicator: ^1.0.0
```

### Step 2: Import the package in your Dart file

```dart
import 'package:wave_loading_indicator/wave_loading_indicator.dart';
```

### Step 3: Create a WaveLoadingIndicator widget

```dart
WaveLoadingIndicator(
  waveColor: Colors.blue,
  waveAmplitude: 10.0,
  waveSpeed: 2.0,
  progressValue: 50.0,
)
```

### Platform-Specific Details

* Android: No additional configuration required.
* iOS: You may need to add the following line to your `Info.plist` file to avoid a warning about the animation duration:
```xml
<key>UIViewAnimationDuration</key>
<string>0.5</string>
```

### Optimizations

* To improve performance, consider using a smaller wave amplitude or speed.
* You can also use a `ClipRect` widget to clip the wave animation to a specific area.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:wave_loading_indicator/wave_loading_indicator.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  double _progressValue = 0.0;

  @override
  void initState() {
    super.initState();
    _animateProgress();
  }

  void _animateProgress() {
    Future.delayed(Duration(milliseconds: 1000), () {
      setState(() {
        _progressValue += 10.0;
        if (_progressValue <= 100.0) {
          _animateProgress();
        }
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Wave Loading Indicator Demo',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Wave Loading Indicator Demo'),
        ),
        body: Center(
          child: WaveLoadingIndicator(
            waveColor: Colors.blue,
            waveAmplitude: 10.0,
            waveSpeed: 2.0,
            progressValue: _progressValue,
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The RealFlutter widget is created and starts the animation by calling _animateProgress.
// 2. The _animateProgress function increments the _progressValue every 1000 milliseconds.
// 3. The WaveLoadingIndicator widget is rebuilt with the new _progressValue.
// 4. The wave animation is updated to reflect the new progress value.
// 5. Steps 2-4 repeat until the _progressValue reaches 100.0.
// The final result is a smooth, wave-based loading animation that fills up to 100%.
```

<-- END_MAIN -->
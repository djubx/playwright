```markdown
<!-- START_DESCRIPTION -->
# Geo Firestore Flutter Package

The `geo_firestore_flutter` package is a powerful tool for Flutter developers who need to integrate geolocation features with Firestore. This package allows you to store and query geospatial data in Firestore, making it ideal for applications that require location-based functionalities, such as ride-sharing apps, location-based services, and social networking platforms.

## When to Use This Package
You should consider using `geo_firestore_flutter` when:
- You need to store and retrieve location data in Firestore.
- Your application requires geospatial queries, such as finding nearby users or places.
- You want to enhance your app's functionality with location-based features.

## Features
- **Geospatial Queries**: Easily query documents based on geographical locations.
- **Real-time Updates**: Leverage Firestore's real-time capabilities to get updates on location changes.
- **Integration with Firestore**: Seamlessly integrates with Firestore for data storage and retrieval.
- **Customizable**: Offers flexibility in how you structure your geospatial data.

Overall, `geo_firestore_flutter` is an essential package for any Flutter developer looking to implement geolocation features in their applications.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using geo_firestore_flutter

In this tutorial, we will walk through the setup process for the `geo_firestore_flutter` package and demonstrate how to use it in a Flutter application.

## Step 1: Adding the Package to Your Project
To get started, add the `geo_firestore_flutter` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  geo_firestore_flutter: ^latest_version
```

Make sure to replace `^latest_version` with the latest version available on [pub.dev](https://pub.dev/packages/geo_firestore_flutter).

## Step 2: Platform-Specific Configuration

### Android
1. Open `android/app/build.gradle` and ensure you have the following configurations:
   ```groovy
   android {
       ...
       defaultConfig {
           ...
           minSdkVersion 21 // Ensure this is set to at least 21
       }
   }
   ```

2. Add the necessary permissions in `AndroidManifest.xml`:
   ```xml
   <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>
   <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION"/>
   ```

### iOS
1. Open `ios/Runner/Info.plist` and add the following keys for location permissions:
   ```xml
   <key>NSLocationWhenInUseUsageDescription</key>
   <string>We need your location to show nearby places.</string>
   <key>NSLocationAlwaysUsageDescription</key>
   <string>We need your location to show nearby places.</string>
   ```

## Step 3: Using the Package
Now that we have set up the package, we can start using it in our Flutter application. Below, we will create a simple application that stores and retrieves geolocation data.

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of geo_firestore_flutter

```dart
import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:geo_firestore_flutter/geo_firestore_flutter.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Geo Firestore Example',
      home: GeoFirestoreExample(),
    );
  }
}

class GeoFirestoreExample extends StatefulWidget {
  @override
  _GeoFirestoreExampleState createState() => _GeoFirestoreExampleState();
}

class _GeoFirestoreExampleState extends State<GeoFirestoreExample> {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  late GeoFirestore geoFirestore;

  @override
  void initState() {
    super.initState();
    // Initialize GeoFirestore with a Firestore collection
    geoFirestore = GeoFirestore(_firestore.collection('locations'));
  }

  // Function to add a location
  void _addLocation() {
    // Example location data
    GeoFirePoint point = GeoFirePoint(37.7749, -122.4194); // San Francisco
    geoFirestore.setLocation('sf_location', point).then((_) {
      print('Location added');
    });
  }

  // Function to get nearby locations
  void _getNearbyLocations() {
    GeoFirePoint center = GeoFirePoint(37.7749, -122.4194); // San Francisco
    double radius = 50; // in kilometers

    // Query for nearby locations
    geoFirestore.queryAtLocation(center, radius).listen((map) {
      map.forEach((key, value) {
        print('Found location: $key at ${value['geopoint']}');
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Geo Firestore Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: _addLocation,
              child: Text('Add Location'),
            ),
            ElevatedButton(
              onPressed: _getNearbyLocations,
              child: Text('Get Nearby Locations'),
            ),
          ],
        ),
      ),
    );
  }
}
```

```dart
// The above code demonstrates a simple Flutter application using the geo_firestore_flutter package.
// 
// 1. **Main Function**: The app starts with the `main` function, which runs the `RealFlutter` widget.
// 
// 2. **RealFlutter Widget**: This is a stateless widget that sets up the MaterialApp and defines the home screen.
// 
// 3. **GeoFirestoreExample Widget**: This stateful widget manages the geolocation functionalities.
// 
// 4. **initState**: Initializes the GeoFirestore instance with a Firestore collection named 'locations'.
// 
// 5. **_addLocation Method**: This method creates a GeoFirePoint for San Francisco and adds it to Firestore.
// 
// 6. **_getNearbyLocations Method**: This method queries for locations within a 50 km radius of San Francisco and prints them to the console.
// 
// 7. **UI**: The UI consists of two buttons: one to add a location and another to retrieve nearby locations.
// 
// Overall, this application demonstrates how to use the geo_firestore_flutter package to manage geolocation data in a Flutter app.
```
<!-- END_MAIN -->
``` 

This structured blog post provides a comprehensive overview of the `geo_firestore_flutter` package, guiding developers through its features, setup, and practical usage in a Flutter application.
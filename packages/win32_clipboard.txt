<-- START_DESCRIPTION -->

# win32_clipboard Flutter Package
=====================================

The `win32_clipboard` Flutter package provides a simple and efficient way to interact with the Windows clipboard. It allows you to read and write text, images, and other data formats to the clipboard.

### When to Use This Package

This package is useful when you need to share data between your Flutter app and other Windows applications. For example, you can use it to:

* Copy text from your app to the clipboard and paste it into another app
* Read text from the clipboard and use it in your app
* Share images between your app and other Windows applications

### Features

* Read and write text to the clipboard
* Read and write images to the clipboard
* Support for multiple data formats (text, image, etc.)

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
=====================

### Add the Package to Your Project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  win32_clipboard: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Import the Package

Import the package in your Dart file:
```dart
import 'package:win32_clipboard/win32_clipboard.dart';
```
### Read and Write Text to the Clipboard

Use the `Clipboard` class to read and write text to the clipboard:
```dart
import 'package:win32_clipboard/win32_clipboard.dart';

class RealFlutter {
  void copyTextToClipboard() {
    Clipboard.setText('Hello, World!');
  }

  void readTextFromClipboard() {
    Clipboard.getText().then((text) {
      print(text);
    });
  }
}
```
### Read and Write Images to the Clipboard

Use the `Clipboard` class to read and write images to the clipboard:
```dart
import 'package:win32_clipboard/win32_clipboard.dart';
import 'dart:typed_data';

class RealFlutter {
  void copyImageToClipboard() {
    Uint8List imageBytes = Uint8List.fromList([/* image data */]);
    Clipboard.setImage(imageBytes);
  }

  void readImageFromClipboard() {
    Clipboard.getImage().then((imageBytes) {
      print(imageBytes);
    });
  }
}
```
### Platform-Specific Details

* On Windows, the `win32_clipboard` package uses the Windows API to interact with the clipboard.
* On Android and iOS, the package uses the platform's native clipboard API.

### Configurations and Optimizations

* Make sure to handle errors and exceptions properly when using the `Clipboard` class.
* Use the `Clipboard` class in an `async` context to avoid blocking the UI thread.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:win32_clipboard/win32_clipboard.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'win32_clipboard Example',
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final _textController = TextEditingController();

  void _copyTextToClipboard() {
    // Get the text from the text field
    String text = _textController.text;

    // Copy the text to the clipboard
    Clipboard.setText(text);

    // Show a snackbar to confirm the copy operation
    Scaffold.of(context).showSnackBar(SnackBar(content: Text('Text copied to clipboard')));
  }

  void _readTextFromClipboard() {
    // Read the text from the clipboard
    Clipboard.getText().then((text) {
      // Show a snackbar with the text
      Scaffold.of(context).showSnackBar(SnackBar(content: Text(text)));
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('win32_clipboard Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            TextField(
              controller: _textController,
              decoration: InputDecoration(labelText: 'Enter some text'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _copyTextToClipboard,
              child: Text('Copy to Clipboard'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _readTextFromClipboard,
              child: Text('Read from Clipboard'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user enters some text in the text field.
// 2. The user clicks the "Copy to Clipboard" button.
// 3. The text is copied to the clipboard using the Clipboard.setText method.
// 4. A snackbar is shown to confirm the copy operation.
// 5. The user clicks the "Read from Clipboard" button.
// 6. The text is read from the clipboard using the Clipboard.getText method.
// 7. A snackbar is shown with the text read from the clipboard.

// This example demonstrates the basic usage of the win32_clipboard package.
// It shows how to copy and read text to and from the clipboard.
// The package can also be used to copy and read images and other data formats.

```

<-- END_MAIN -->
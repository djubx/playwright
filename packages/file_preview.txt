# Flutter Package: file_preview

<!-- START_DESCRIPTION -->
## Description

The `file_preview` Flutter package is designed to provide a seamless way to preview various file types within your Flutter applications. This package is particularly useful for applications that require users to view documents, images, or other file types without leaving the app. 

### When to Use

You might consider using `file_preview` in scenarios such as:
- Document management applications where users need to view PDFs or Word documents.
- Image galleries that allow users to preview images before downloading or sharing.
- Any application that requires file previews to enhance user experience.

### Features

- **Multi-format Support**: Preview various file types including PDFs, images, and text files.
- **Customizable UI**: Offers options to customize the preview interface to match your app's design.
- **Easy Integration**: Simple API that allows for quick setup and usage.
- **Cross-platform Compatibility**: Works seamlessly on both Android and iOS platforms.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
## Tutorial

### Installation

To get started with the `file_preview` package, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  file_preview: ^latest_version
```

Make sure to replace `^latest_version` with the latest version available on [pub.dev](https://pub.dev/packages/file_preview).

### Platform-Specific Configuration

#### Android

For Android, ensure that you have the following permissions in your `AndroidManifest.xml` file:

```xml
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
```

#### iOS

For iOS, you need to add the following keys to your `Info.plist` file to request permission for accessing files:

```xml
<key>NSPhotoLibraryUsageDescription</key>
<string>We need access to your photo library to show previews.</string>
<key>NSDocumentsFolderUsageDescription</key>
<string>We need access to your documents to show previews.</string>
```

### Usage

To use the `file_preview` package, you can follow these steps:

1. Import the package in your Dart file:

```dart
import 'package:file_preview/file_preview.dart';
```

2. Use the `FilePreview` widget to display a file preview. Here’s a simple example:

```dart
FilePreview(
  filePath: 'path/to/your/file.pdf',
  onPreviewClosed: () {
    // Handle the event when the preview is closed
  },
);
```

This widget will automatically handle the rendering of the file based on its type.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
## Complete Example

Here’s a complete example of a Flutter application that demonstrates the use of the `file_preview` package:

```dart
import 'package:flutter/material.dart';
import 'package:file_preview/file_preview.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'File Preview Example',
      home: FilePreviewPage(),
    );
  }
}

class FilePreviewPage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('File Preview Example'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Trigger the file preview when the button is pressed
            showFilePreview(context);
          },
          child: Text('Preview File'),
        ),
      ),
    );
  }

  void showFilePreview(BuildContext context) {
    // Replace with the actual path to your file
    String filePath = 'path/to/your/file.pdf';

    // Show the file preview
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          content: Container(
            width: double.maxFinite,
            height: 400,
            child: FilePreview(
              filePath: filePath,
              onPreviewClosed: () {
                // Handle the event when the preview is closed
                Navigator.of(context).pop();
              },
            ),
          ),
        );
      },
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the RealFlutter widget.
// 2. RealFlutter builds a MaterialApp with a title and a home page (FilePreviewPage).
// 3. FilePreviewPage contains a button that, when pressed, triggers the showFilePreview function.
// 4. showFilePreview opens a dialog containing the FilePreview widget, which displays the file.
// 5. The user can view the file, and upon closing the preview, the dialog is dismissed.
```

<!-- END_MAIN -->

## Summary

In this blog post, we explored the `file_preview` Flutter package, which allows developers to easily integrate file previews into their applications. We covered the installation process, platform-specific configurations, and provided a complete example demonstrating how to use the package effectively. The application flow was explained step-by-step through comments in the code, making it easier to understand how the package works in a real-world scenario. This package is a great choice for any Flutter developer looking to enhance their app's file handling capabilities.
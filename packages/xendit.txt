Here's a detailed technical blog on the "xendit" Flutter package, structured as requested.

<!-- START_DESCRIPTION -->
# Xendit Flutter Package

The Xendit Flutter package is a powerful tool for integrating payment solutions into Flutter applications. It provides a seamless way to handle various payment methods, including credit cards, bank transfers, and e-wallets, making it an essential package for developers looking to implement payment functionalities in their apps.

## When to Use Xendit

You should consider using the Xendit Flutter package when:
- You are developing an e-commerce application that requires payment processing.
- You need to integrate multiple payment methods to cater to a diverse user base.
- You want to leverage Xendit's robust API for handling transactions securely and efficiently.

## Features

- **Multiple Payment Methods**: Supports various payment options, including credit cards, bank transfers, and e-wallets.
- **Easy Integration**: Simple setup process with clear documentation.
- **Secure Transactions**: Built with security in mind, ensuring that user data is protected.
- **Real-time Notifications**: Provides webhooks for real-time transaction updates.

Overall, the Xendit Flutter package simplifies the payment integration process, allowing developers to focus on building their applications without worrying about the complexities of payment processing.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up Xendit in Your Flutter Application

In this tutorial, we will walk through the setup process for the Xendit Flutter package and demonstrate how to use it effectively in your application.

## Step 1: Add Dependency

To get started, add the Xendit Flutter package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  xendit_flutter: ^latest_version
```

Make sure to replace `latest_version` with the most recent version of the package.

## Step 2: Platform-Specific Configuration

### Android Configuration

1. Open `android/app/build.gradle` and ensure you have the following configurations:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21 // Ensure this is set to at least 21
    }
}
```

2. Add the following permissions in `AndroidManifest.xml`:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
```

### iOS Configuration

1. Open `ios/Runner/Info.plist` and add the following:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

2. Ensure your iOS deployment target is set to at least 10.0 in `ios/Podfile`:

```ruby
platform :ios, '10.0'
```

## Step 3: Initialize Xendit

In your main application file, initialize the Xendit package:

```dart
import 'package:xendit_flutter/xendit_flutter.dart';

void main() {
  Xendit.init('YOUR_API_KEY'); // Replace with your actual API key
  runApp(MyApp());
}
```

## Step 4: Using Xendit

You can now use the Xendit package to create payment requests. Hereâ€™s a simple example of how to create a payment link:

```dart
void createPayment() async {
  try {
    var paymentLink = await Xendit.createPaymentLink(
      amount: 10000, // Amount in the smallest currency unit
      currency: 'IDR', // Currency code
      description: 'Payment for Order #12345',
    );
    print('Payment Link: ${paymentLink.url}');
  } catch (e) {
    print('Error creating payment link: $e');
  }
}
```

This function creates a payment link that can be shared with users for payment.

## Conclusion

You have now set up the Xendit Flutter package in your application. You can create payment links and handle transactions securely. Make sure to explore the package documentation for more advanced features and configurations.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Xendit Flutter Package

```dart
import 'package:flutter/material.dart';
import 'package:xendit_flutter/xendit_flutter.dart';

void main() {
  // Initialize Xendit with your API key
  Xendit.init('YOUR_API_KEY'); // Replace with your actual API key
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Xendit Flutter Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: PaymentScreen(),
    );
  }
}

class PaymentScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Xendit Payment Example'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            createPayment();
          },
          child: Text('Create Payment Link'),
        ),
      ),
    );
  }

  void createPayment() async {
    try {
      // Create a payment link with specified amount and currency
      var paymentLink = await Xendit.createPaymentLink(
        amount: 10000, // Amount in the smallest currency unit
        currency: 'IDR', // Currency code
        description: 'Payment for Order #12345',
      );
      // Print the payment link URL
      print('Payment Link: ${paymentLink.url}');
      // Optionally, you can navigate to the payment link in a web view or browser
    } catch (e) {
      // Handle any errors that occur during payment link creation
      print('Error creating payment link: $e');
    }
  }
}

// Application Flow Explanation:
// 1. The app starts by initializing the Xendit package with the provided API key.
// 2. The main widget is a MaterialApp that sets up the application theme and home screen.
// 3. The PaymentScreen widget contains a button that, when pressed, triggers the createPayment function.
// 4. The createPayment function attempts to create a payment link using the Xendit API.
// 5. If successful, it prints the payment link URL to the console, which can be shared with users.
// 6. If an error occurs, it prints the error message to the console.
```

<!-- END_MAIN -->

### Summary

In this blog, we explored the Xendit Flutter package, detailing its features and providing a comprehensive tutorial on how to set it up and use it in a Flutter application. The complete example demonstrated how to create a payment link, showcasing the simplicity and effectiveness of the package. By following the steps outlined, developers can easily integrate payment solutions into their Flutter apps, enhancing user experience and streamlining transactions.
<-- START_DESCRIPTION -->

# Flex with Main Child Package
================================

The `flex_with_main_child` package is a Flutter package that allows you to create a flexible layout with a main child and other children. It is useful when you want to create a layout where the main child takes up the most space, and the other children are arranged around it.

## Features

*   Allows you to create a flexible layout with a main child and other children.
*   Supports arranging children horizontally or vertically.
*   Supports customizing the spacing between children.

## When to Use

This package is useful when you want to create a layout where the main child takes up the most space, and the other children are arranged around it. For example, you can use it to create a layout with a large image and several smaller images arranged around it.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

## Step 1: Add the Package to Your Project

To use the `flex_with_main_child` package, you need to add it to your project. You can do this by adding the following line to your `pubspec.yaml` file:

```yml
dependencies:
  flex_with_main_child: ^1.0.0
```

## Step 2: Import the Package

After adding the package to your project, you need to import it in your Dart file. You can do this by adding the following line at the top of your file:

```dart
import 'package:flex_with_main_child/flex_with_main_child.dart';
```

## Step 3: Use the Package

To use the package, you need to create a `FlexWithMainChild` widget and pass the main child and other children to it. Here is an example:

```dart
FlexWithMainChild(
  mainChild: Container(
    width: 100,
    height: 100,
    color: Colors.red,
  ),
  children: [
    Container(
      width: 50,
      height: 50,
      color: Colors.blue,
    ),
    Container(
      width: 50,
      height: 50,
      color: Colors.green,
    ),
  ],
)
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flex_with_main_child/flex_with_main_child.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flex with Main Child Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flex with Main Child Demo'),
      ),
      body: Center(
        child: FlexWithMainChild(
          // The main child takes up the most space
          mainChild: Container(
            width: 200,
            height: 200,
            color: Colors.red,
          ),
          // The other children are arranged around the main child
          children: [
            Container(
              width: 50,
              height: 50,
              color: Colors.blue,
            ),
            Container(
              width: 50,
              height: 50,
              color: Colors.green,
            ),
          ],
          // The spacing between children can be customized
          spacing: 10,
          // The direction of the layout can be customized
          direction: Axis.horizontal,
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app and the MyApp widget is created.
// 2. The MyApp widget builds the MaterialApp widget with the title and theme.
// 3. The MaterialApp widget builds the MyHomePage widget.
// 4. The MyHomePage widget builds the Scaffold widget with the AppBar and the body.
// 5. The body of the Scaffold widget is a Center widget with the FlexWithMainChild widget.
// 6. The FlexWithMainChild widget arranges the main child and the other children according to the direction and spacing.
// 7. The user sees the layout with the main child and the other children arranged around it.

// The code flow is as follows:
// 1. The main function runs the app.
// 2. The MyApp widget is created and builds the MaterialApp widget.
// 3. The MaterialApp widget builds the MyHomePage widget.
// 4. The MyHomePage widget builds the Scaffold widget.
// 5. The Scaffold widget builds the Center widget with the FlexWithMainChild widget.
// 6. The FlexWithMainChild widget arranges the children and returns the layout.
// 7. The layout is displayed to the user.

// In summary, the code flows from the main function to the MyApp widget to the MaterialApp widget to the MyHomePage widget to the Scaffold widget to the Center widget to the FlexWithMainChild widget, and finally to the layout displayed to the user.
```

<-- END_MAIN -->
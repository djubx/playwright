```markdown
<!-- START_DESCRIPTION -->
# delete_un_used_assets Flutter Package

The `delete_un_used_assets` package is a powerful tool designed for Flutter developers to streamline their asset management process. As projects grow, it’s common to accumulate unused assets, which can bloat the application size and complicate maintenance. This package automates the detection and removal of these unused assets, ensuring that your Flutter project remains clean and efficient.

## When to Use This Package
- **Project Cleanup**: When you want to clean up your project after a significant refactor or redesign.
- **Asset Management**: To maintain a lean asset folder, especially in larger applications where assets are frequently added and removed.
- **Performance Optimization**: To reduce the app size and improve load times by eliminating unnecessary assets.

## Features
- **Automatic Detection**: Scans your project for assets that are not referenced in your code.
- **Safe Deletion**: Provides a preview of unused assets before deletion, allowing for safe management.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS platforms.
- **Command-Line Interface**: Easy to integrate into your development workflow via command line.

By utilizing the `delete_un_used_assets` package, developers can ensure their Flutter applications are optimized and maintainable, leading to better performance and user experience.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using delete_un_used_assets

## Installation
To get started with the `delete_un_used_assets` package, you need to add it to your `pubspec.yaml` file. Open your `pubspec.yaml` and add the following line under dependencies:

```yaml
dev_dependencies:
  delete_un_used_assets: ^1.0.0
```

After adding the dependency, run the following command in your terminal to install it:

```bash
flutter pub get
```

## Usage
Once the package is installed, you can use it to clean up your assets. Here’s how to do it:

1. **Navigate to Your Project Directory**: Open your terminal and navigate to the root of your Flutter project.

2. **Run the Command**: Execute the following command to scan for unused assets:

```bash
flutter pub run delete_un_used_assets
```

3. **Review the Output**: The command will list all unused assets found in your project. Review this list carefully.

4. **Delete Unused Assets**: If you are satisfied with the list, you can proceed to delete the unused assets by running:

```bash
flutter pub run delete_un_used_assets --delete
```

### Platform-Specific Details
- **Android**: Ensure that your assets are correctly referenced in your `AndroidManifest.xml` and that you are using the correct asset paths in your Dart files.
- **iOS**: Make sure that your assets are included in the Xcode project and referenced properly in your Dart code.

## Optimizations
- Regularly run the asset cleanup command during development to keep your project tidy.
- Integrate the command into your CI/CD pipeline to automate asset management.

By following these steps, you can effectively manage and clean up unused assets in your Flutter project using the `delete_un_used_assets` package.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of delete_un_used_assets

```dart
import 'package:flutter/material.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Delete Unused Assets Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: HomeScreen(),
    );
  }
}

class HomeScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Unused Assets Cleanup'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Welcome to the Unused Assets Cleanup App!',
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                // This button simulates the action of cleaning up unused assets
                // In a real application, you would call the delete_un_used_assets command here
                print('Simulating asset cleanup...');
              },
              child: Text('Clean Up Assets'),
            ),
          ],
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function initializes the Flutter app by calling runApp() with the RealFlutter widget.
// 2. The RealFlutter widget builds a MaterialApp with a title and theme.
// 3. The home property of MaterialApp is set to HomeScreen, which is the main screen of the app.
// 4. HomeScreen contains a Scaffold with an AppBar and a Center widget that holds a Column.
// 5. The Column displays a welcome message and a button.
// 6. When the button is pressed, it simulates the action of cleaning up unused assets by printing a message to the console.
// 7. This example serves as a placeholder for where the actual asset cleanup logic would be integrated.
```
<!-- END_MAIN -->
```

### Summary
In this blog post, we explored the `delete_un_used_assets` Flutter package, detailing its purpose, features, and how to set it up in your project. We provided a complete example of a Flutter application that simulates asset cleanup, demonstrating how to integrate the package into your workflow. By following the steps outlined, developers can maintain a clean and efficient asset management process, ultimately leading to better performance and user experience in their Flutter applications.
<-- START_DESCRIPTION -->

# File Selector Web Flutter Package
=====================================

The `file_selector_web` Flutter package allows users to select files from their device, providing a convenient and platform-agnostic way to handle file uploads. This package is ideal for applications that require users to upload files, such as images, documents, or videos.

### Key Features

*   Supports single and multiple file selection
*   Allows filtering by file type (e.g., images, videos, documents)
*   Provides a customizable UI for the file selection dialog
*   Compatible with both Android and iOS platforms

### When to Use

Use the `file_selector_web` package when your application requires users to upload files from their device. This package is particularly useful for applications that need to handle file uploads in a platform-agnostic way.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the File Selector Web Package
===========================================================

### Step 1: Add the Package to Your Project

Add the `file_selector_web` package to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  file_selector_web: ^0.8.2+1
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the `file_selector_web` package in your Dart file:

```dart
import 'package:file_selector_web/file_selector_web.dart';
```

### Step 3: Use the Package

Use the `FileSelectorWeb` class to select files:

```dart
class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  List<PlatformFile> _files = [];

  void _selectFiles() async {
    final files = await FileSelectorWeb.platform.pickFiles(
      allowMultiple: true,
      type: FileType.custom,
      allowedExtensions: ['jpg', 'png', 'pdf'],
    );

    setState(() {
      _files = files;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('File Selector Web Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: _selectFiles,
              child: Text('Select Files'),
            ),
            SizedBox(height: 20),
            Text('Selected Files:'),
            SizedBox(height: 10),
            _files.isEmpty
                ? Text('No files selected')
                : Column(
                    children: _files.map((file) {
                      return Text(file.name);
                    }).toList(),
                  ),
          ],
        ),
      ),
    );
  }
}
```

### Platform-Specific Details

*   **Android:** No additional configuration is required.
*   **iOS:** Add the following lines to your `Info.plist` file:

```xml
<key>NSPhotoLibraryUsageDescription</key>
<string>This app needs access to the photo library to select files</string>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:file_selector_web/file_selector_web.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'File Selector Web Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  List<PlatformFile> _files = [];

  // Step 1: Define a function to select files
  void _selectFiles() async {
    // Step 2: Use the FileSelectorWeb.platform.pickFiles method to select files
    final files = await FileSelectorWeb.platform.pickFiles(
      // Step 3: Allow multiple file selection
      allowMultiple: true,
      // Step 4: Filter by file type (e.g., images, videos, documents)
      type: FileType.custom,
      // Step 5: Specify the allowed file extensions
      allowedExtensions: ['jpg', 'png', 'pdf'],
    );

    // Step 6: Update the state with the selected files
    setState(() {
      _files = files;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('File Selector Web Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            // Step 7: Create a button to select files
            ElevatedButton(
              onPressed: _selectFiles,
              child: Text('Select Files'),
            ),
            SizedBox(height: 20),
            Text('Selected Files:'),
            SizedBox(height: 10),
            // Step 8: Display the selected files
            _files.isEmpty
                ? Text('No files selected')
                : Column(
                    children: _files.map((file) {
                      return Text(file.name);
                    }).toList(),
                  ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user clicks the "Select Files" button.
// 2. The _selectFiles function is called, which uses the FileSelectorWeb.platform.pickFiles method to select files.
// 3. The user selects one or more files.
// 4. The selected files are returned to the _selectFiles function.
// 5. The _selectFiles function updates the state with the selected files.
// 6. The UI is updated to display the selected files.

// This code demonstrates how to use the file_selector_web package to select files in a Flutter application.
// The package provides a convenient and platform-agnostic way to handle file uploads.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Flutter Hue Package Overview
================================

The `flutter_hue` package is a Flutter library that allows developers to interact with Philips Hue smart lighting systems. It provides a simple and intuitive API for controlling lights, groups, and scenes, making it easy to integrate Hue functionality into Flutter applications.

## When to Use This Package
---------------------------

This package is ideal for developers who want to create smart home automation apps that integrate with Philips Hue lighting systems. It's also suitable for IoT enthusiasts who want to experiment with smart lighting control.

## Key Features
----------------

*   Control individual lights, groups, and scenes
*   Get and set light properties (e.g., brightness, color, on/off state)
*   Create and manage groups and scenes
*   Support for Philips Hue Bridge discovery and connection

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the Flutter Hue Package
---------------------------------------------

## Step 1: Add the Package to Your Flutter Project
------------------------------------------------

Add the `flutter_hue` package to your `pubspec.yaml` file:

```yml
dependencies:
  flutter_hue: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Step 2: Import the Package and Initialize the Hue Bridge
---------------------------------------------------------

Import the package in your Dart file:

```dart
import 'package:flutter_hue/flutter_hue.dart';
```

 Initialize the Hue Bridge:

```dart
final hueBridge = HueBridge('your_hue_bridge_ip_address');
```

Replace `'your_hue_bridge_ip_address'` with the actual IP address of your Hue Bridge.

## Step 3: Discover and Connect to the Hue Bridge
-------------------------------------------------

Discover the Hue Bridge:

```dart
await hueBridge.discover();
```

 Connect to the Hue Bridge:

```dart
await hueBridge.connect('your_hue_username');
```

Replace `'your_hue_username'` with your actual Hue username.

## Step 4: Control Lights, Groups, and Scenes
---------------------------------------------

Get a list of all lights:

```dart
final lights = await hueBridge.getLights();
```

 Turn on a light:

```dart
await lights.first.setOn(true);
```

 Get a list of all groups:

```dart
final groups = await hueBridge.getGroups();
```

 Turn on a group:

```dart
await groups.first.setOn(true);
```

 Get a list of all scenes:

```dart
final scenes = await hueBridge.getScenes();
```

 Activate a scene:

```dart
await scenes.first.activate();
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_hue/flutter_hue.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Hue Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _hueBridge = HueBridge('your_hue_bridge_ip_address');
  List<Light> _lights = [];
  List<Group> _groups = [];
  List<Scene> _scenes = [];

  @override
  void initState() {
    super.initState();
    _initHueBridge();
  }

  Future<void> _initHueBridge() async {
    // Discover the Hue Bridge
    await _hueBridge.discover();

    // Connect to the Hue Bridge
    await _hueBridge.connect('your_hue_username');

    // Get a list of all lights
    final lights = await _hueBridge.getLights();
    setState(() {
      _lights = lights;
    });

    // Get a list of all groups
    final groups = await _hueBridge.getGroups();
    setState(() {
      _groups = groups;
    });

    // Get a list of all scenes
    final scenes = await _hueBridge.getScenes();
    setState(() {
      _scenes = scenes;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Hue Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            // Light control
            ElevatedButton(
              onPressed: () async {
                // Turn on the first light
                await _lights.first.setOn(true);
              },
              child: Text('Turn on light'),
            ),
            // Group control
            ElevatedButton(
              onPressed: () async {
                // Turn on the first group
                await _groups.first.setOn(true);
              },
              child: Text('Turn on group'),
            ),
            // Scene control
            ElevatedButton(
              onPressed: () async {
                // Activate the first scene
                await _scenes.first.activate();
              },
              child: Text('Activate scene'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and is presented with a button to turn on a light.
// 2. When the button is pressed, the app sends a request to the Hue Bridge to turn on the first light.
// 3. The Hue Bridge receives the request and turns on the light.
// 4. The app then displays a button to turn on a group.
// 5. When the button is pressed, the app sends a request to the Hue Bridge to turn on the first group.
// 6. The Hue Bridge receives the request and turns on the group.
// 7. The app then displays a button to activate a scene.
// 8. When the button is pressed, the app sends a request to the Hue Bridge to activate the first scene.
// 9. The Hue Bridge receives the request and activates the scene.

// This code demonstrates how to use the Flutter Hue package to control Philips Hue lights, groups, and scenes.
// It shows how to discover and connect to the Hue Bridge, get a list of lights, groups, and scenes, and control them.

<-- END_MAIN -->
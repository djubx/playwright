<-- START_DESCRIPTION -->

**Shelf Rate Limiter Package Overview**
=====================================

The `shelf_rate_limiter` package is a Flutter package that provides a simple and effective way to limit the rate at which HTTP requests are made to a server. This is useful for preventing abuse, reducing server load, and complying with API rate limits.

**When to Use This Package**
---------------------------

You should use this package when:

* You need to limit the rate at which HTTP requests are made to a server.
* You want to prevent abuse or reduce server load.
* You need to comply with API rate limits.

**Features**
------------

* Supports multiple rate limiting algorithms (e.g. token bucket, leaky bucket).
* Allows for customizable rate limits and time windows.
* Supports both synchronous and asynchronous requests.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setting Up the Package**
-------------------------

To use the `shelf_rate_limiter` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  shelf_rate_limiter: ^1.0.0
```
2. Import the package in your Dart file:
```dart
import 'package:shelf_rate_limiter/shelf_rate_limiter.dart';
```
**Configuring the Package**
---------------------------

To configure the package, you need to create a `RateLimiter` instance and pass it to the `ShelfRateLimiter` constructor.

For example:
```dart
import 'package:shelf_rate_limiter/shelf_rate_limiter.dart';

void main() {
  // Create a rate limiter instance
  final rateLimiter = TokenBucketRateLimiter(
    maxTokens: 10,
    refillTokens: 5,
    timeWindow: Duration(minutes: 1),
  );

  // Create a ShelfRateLimiter instance
  final shelfRateLimiter = ShelfRateLimiter(
    rateLimiter: rateLimiter,
  );
}
```
**Platform-Specific Details**
---------------------------

### Android

On Android, you need to add the following code to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.INTERNET" />
```
### iOS

On iOS, you need to add the following code to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:shelf_rate_limiter/shelf_rate_limiter.dart';

void main() {
  // Create a rate limiter instance
  final rateLimiter = TokenBucketRateLimiter(
    maxTokens: 10,
    refillTokens: 5,
    timeWindow: Duration(minutes: 1),
  );

  // Create a ShelfRateLimiter instance
  final shelfRateLimiter = ShelfRateLimiter(
    rateLimiter: rateLimiter,
  );

  // Create a RealFlutter instance
  final realFlutter = RealFlutter(
    shelfRateLimiter: shelfRateLimiter,
  );

  // Run the app
  runApp(realFlutter);
}

class RealFlutter extends StatelessWidget {
  final ShelfRateLimiter shelfRateLimiter;

  RealFlutter({required this.shelfRateLimiter});

  @override
  Widget build(BuildContext context) {
    // Create a button to make a request
    final button = ElevatedButton(
      onPressed: () async {
        // Make a request using the shelf rate limiter
        final response = await shelfRateLimiter.makeRequest(
          Uri.parse('https://example.com'),
        );

        // Print the response
        print(response.body);
      },
      child: Text('Make Request'),
    );

    // Return the button
    return MaterialApp(
      home: Scaffold(
        body: Center(
          child: button,
        ),
      ),
    );
  }
}
```

// The app starts by creating a rate limiter instance and a ShelfRateLimiter instance.
// The rate limiter instance is configured with a token bucket algorithm, which allows for 10 tokens to be used within a 1-minute time window.
// The ShelfRateLimiter instance is created with the rate limiter instance.
// The app then creates a RealFlutter instance, which is a StatelessWidget that contains a button to make a request.
// When the button is pressed, the app makes a request using the shelf rate limiter.
// The shelf rate limiter checks if the request can be made based on the rate limit, and if so, makes the request and returns the response.
// The response is then printed to the console.

// The app uses the shelf_rate_limiter package to limit the rate at which requests are made to the server.
// The package provides a simple and effective way to prevent abuse and reduce server load.
// The app demonstrates how to use the package to make requests and handle responses.

<-- END_MAIN -->
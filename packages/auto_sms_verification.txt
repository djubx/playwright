Here's a detailed technical blog on the `auto_sms_verification` Flutter package, structured as requested.

<!-- START_DESCRIPTION -->
# Auto SMS Verification Flutter Package

The `auto_sms_verification` package is a powerful tool for Flutter developers looking to implement SMS-based verification in their applications. This package simplifies the process of sending and verifying SMS codes, making it easier to enhance user authentication and security.

## When to Use This Package

You should consider using the `auto_sms_verification` package in scenarios such as:

- **User Registration**: When new users sign up, you can send them a verification code via SMS to confirm their identity.
- **Password Recovery**: If users forget their passwords, you can send a verification code to their registered phone numbers to allow them to reset their passwords.
- **Two-Factor Authentication (2FA)**: Enhance security by requiring users to enter a verification code sent to their mobile devices.

## Features

- **Automatic SMS Retrieval**: The package can automatically read the SMS containing the verification code, reducing user input errors.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS platforms.
- **Easy Integration**: Simple setup and usage, allowing developers to focus on building their applications rather than dealing with complex SMS verification logic.

With these features, the `auto_sms_verification` package provides a robust solution for implementing SMS verification in Flutter applications.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Auto SMS Verification Package

## Step 1: Add Dependency

To get started, add the `auto_sms_verification` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  auto_sms_verification: ^latest_version
```

Make sure to replace `^latest_version` with the latest version of the package available on [pub.dev](https://pub.dev/packages/auto_sms_verification).

## Step 2: Platform-Specific Configuration

### Android Configuration

1. **Permissions**: Open your `AndroidManifest.xml` file located at `android/app/src/main/AndroidManifest.xml` and add the following permissions:

   ```xml
   <uses-permission android:name="android.permission.RECEIVE_SMS"/>
   <uses-permission android:name="android.permission.READ_SMS"/>
   ```

2. **SMS Retriever API**: To automatically retrieve SMS messages, you need to implement the SMS Retriever API. Follow the [official documentation](https://developers.google.com/identity/sms-retriever/overview) for detailed instructions.

### iOS Configuration

1. **Permissions**: Open your `Info.plist` file located at `ios/Runner/Info.plist` and add the following:

   ```xml
   <key>NSContactsUsageDescription</key>
   <string>This app requires access to contacts for SMS verification.</string>
   ```

2. **SMS Handling**: iOS does not allow automatic SMS retrieval like Android. Users will need to manually enter the verification code.

## Step 3: Using the Package

Hereâ€™s a basic example of how to use the `auto_sms_verification` package in your Flutter application:

```dart
import 'package:flutter/material.dart';
import 'package:auto_sms_verification/auto_sms_verification.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: VerificationScreen(),
    );
  }
}

class VerificationScreen extends StatefulWidget {
  @override
  _VerificationScreenState createState() => _VerificationScreenState();
}

class _VerificationScreenState extends State<VerificationScreen> {
  String _verificationCode = '';
  String _phoneNumber = '';

  void _sendVerificationCode() {
    // Send the verification code to the user's phone number
    AutoSmsVerification.sendSms(_phoneNumber);
  }

  void _verifyCode() {
    // Verify the entered code
    if (AutoSmsVerification.verifyCode(_verificationCode)) {
      // Code is valid, proceed to the next step
      print('Verification successful!');
    } else {
      // Code is invalid, show an error message
      print('Invalid verification code.');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('SMS Verification')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            TextField(
              decoration: InputDecoration(labelText: 'Phone Number'),
              onChanged: (value) {
                _phoneNumber = value;
              },
            ),
            TextField(
              decoration: InputDecoration(labelText: 'Verification Code'),
              onChanged: (value) {
                _verificationCode = value;
              },
            ),
            ElevatedButton(
              onPressed: _sendVerificationCode,
              child: Text('Send Code'),
            ),
            ElevatedButton(
              onPressed: _verifyCode,
              child: Text('Verify Code'),
            ),
          ],
        ),
      ),
    );
  }
}
```

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Auto SMS Verification

```dart
import 'package:flutter/material.dart';
import 'package:auto_sms_verification/auto_sms_verification.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: VerificationScreen(),
    );
  }
}

class VerificationScreen extends StatefulWidget {
  @override
  _VerificationScreenState createState() => _VerificationScreenState();
}

class _VerificationScreenState extends State<VerificationScreen> {
  String _verificationCode = ''; // Variable to hold the verification code
  String _phoneNumber = ''; // Variable to hold the user's phone number

  void _sendVerificationCode() {
    // Send the verification code to the user's phone number
    AutoSmsVerification.sendSms(_phoneNumber);
  }

  void _verifyCode() {
    // Verify the entered code
    if (AutoSmsVerification.verifyCode(_verificationCode)) {
      // Code is valid, proceed to the next step
      print('Verification successful!');
    } else {
      // Code is invalid, show an error message
      print('Invalid verification code.');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('SMS Verification')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            TextField(
              decoration: InputDecoration(labelText: 'Phone Number'),
              onChanged: (value) {
                _phoneNumber = value; // Update phone number as user types
              },
            ),
            TextField(
              decoration: InputDecoration(labelText: 'Verification Code'),
              onChanged: (value) {
                _verificationCode = value; // Update verification code as user types
              },
            ),
            ElevatedButton(
              onPressed: _sendVerificationCode, // Send code when button is pressed
              child: Text('Send Code'),
            ),
            ElevatedButton(
              onPressed: _verifyCode, // Verify code when button is pressed
              child: Text('Verify Code'),
            ),
          ],
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the RealFlutter class, which sets up the MaterialApp.
// 2. The VerificationScreen widget is displayed, containing two text fields for the phone number and verification code.
// 3. When the user enters their phone number and clicks "Send Code", the _sendVerificationCode method is called, which sends the SMS.
// 4. The user then receives an SMS with a verification code, which they enter into the second text field.
// 5. Upon clicking "Verify Code", the _verifyCode method checks if the entered code is valid.
// 6. If the code is valid, a success message is printed; otherwise, an error message is shown.
```
<!-- END_MAIN -->

This blog provides a comprehensive overview of the `auto_sms_verification` package, including its features, setup instructions, and a complete example to help developers integrate SMS verification into their Flutter applications effectively.
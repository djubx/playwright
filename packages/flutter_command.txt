<-- START_DESCRIPTION -->

# Flutter Command Package: A Comprehensive Overview
=====================================================

The `flutter_command` package is a powerful tool for managing and executing commands in Flutter applications. It provides a simple and efficient way to handle commands, making it an essential package for any Flutter developer.

### When to Use This Package

The `flutter_command` package is ideal for applications that require complex command handling, such as:

*   Chat applications with multiple commands
*   Voice assistants with various voice commands
*   Games with custom commands

### Features

The `flutter_command` package offers several features, including:

*   **Command Management**: Easily manage and execute commands
*   **Command Parameters**: Pass parameters to commands for customization
*   **Command History**: Keep track of previously executed commands
*   **Command Undo/Redo**: Undo and redo commands for flexible command handling

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the Flutter Command Package
=====================================================

### Step 1: Add the Package to Your Project

Add the `flutter_command` package to your `pubspec.yaml` file:

```yml
dependencies:
  flutter_command: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the `flutter_command` package in your Dart file:

```dart
import 'package:flutter_command/flutter_command.dart';
```

### Step 3: Create a Command

Create a new command by extending the `Command` class:

```dart
class MyCommand extends Command {
  @override
  void execute() {
    print('My command executed!');
  }
}
```

### Step 4: Register the Command

Register the command with the `CommandManager`:

```dart
void main() {
  CommandManager.registerCommand(MyCommand());
  runApp(MyApp());
}
```

### Step 5: Execute the Command

Execute the command using the `CommandManager`:

```dart
void _executeCommand() {
  CommandManager.executeCommand(MyCommand());
}
```

### Platform-Specific Details

The `flutter_command` package works seamlessly on both Android and iOS platforms. However, you may need to configure the package for specific platform requirements.

### Required Configurations or Optimizations

For optimal performance, you can configure the `CommandManager` to handle command execution and history:

```dart
void main() {
  CommandManager.config(
    maxCommandHistory: 10,
    undoRedoEnabled: true,
  );
  runApp(MyApp());
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_command/flutter_command.dart';

void main() {
  CommandManager.config(
    maxCommandHistory: 10,
    undoRedoEnabled: true,
  );
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Command Demo',
      home: CommandDemo(),
    );
  }
}

class CommandDemo extends StatefulWidget {
  @override
  _CommandDemoState createState() => _CommandDemoState();
}

class _CommandDemoState extends State<CommandDemo> {
  final _commandManager = CommandManager();

  void _executeCommand() {
    _commandManager.executeCommand(MyCommand());
  }

  void _undoCommand() {
    _commandManager.undoCommand();
  }

  void _redoCommand() {
    _commandManager.redoCommand();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Command Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            ElevatedButton(
              onPressed: _executeCommand,
              child: Text('Execute Command'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _undoCommand,
              child: Text('Undo Command'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _redoCommand,
              child: Text('Redo Command'),
            ),
          ],
        ),
      ),
    );
  }
}

class MyCommand extends Command {
  @override
  void execute() {
    print('My command executed!');
  }
}

// The application flow is as follows:
// 1. The user clicks the "Execute Command" button, which calls the _executeCommand function.
// 2. The _executeCommand function executes the MyCommand using the CommandManager.
// 3. The MyCommand prints "My command executed!" to the console.
// 4. The user can then click the "Undo Command" button to undo the command.
// 5. The _undoCommand function undoes the command using the CommandManager.
// 6. The user can then click the "Redo Command" button to redo the command.
// 7. The _redoCommand function redoes the command using the CommandManager.

// In summary, the application demonstrates the execution, undo, and redo of a custom command using the Flutter Command package.
```

<-- END_MAIN -->
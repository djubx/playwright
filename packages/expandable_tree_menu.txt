<-- START_DESCRIPTION -->

# Expandable Tree Menu Flutter Package
=====================================

The `expandable_tree_menu` Flutter package provides a customizable and easy-to-use tree menu that can be expanded and collapsed. It is ideal for displaying hierarchical data, such as categories, folders, or organizational structures.

### When to Use This Package

* Displaying hierarchical data in a compact and organized manner
* Creating a navigation menu with expandable and collapsible sections
* Providing a user-friendly interface for selecting multiple items from a hierarchical list

### Features

* Customizable tree menu with expandable and collapsible sections
* Support for multiple levels of nesting
* Optional checkbox or radio button selection
* Customizable node and leaf widgets
* Support for scrolling and lazy loading

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Expandable Tree Menu Package
===========================================================

### Step 1: Add the Package to Your Flutter Project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  expandable_tree_menu: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:expandable_tree_menu/expandable_tree_menu.dart';
```
### Step 3: Create a Tree Menu

Create a tree menu by defining a list of `TreeNode` objects:
```dart
List<TreeNode> treeNodes = [
  TreeNode(
    label: 'Node 1',
    children: [
      TreeNode(label: 'Node 1.1'),
      TreeNode(label: 'Node 1.2'),
    ],
  ),
  TreeNode(
    label: 'Node 2',
    children: [
      TreeNode(label: 'Node 2.1'),
      TreeNode(label: 'Node 2.2'),
    ],
  ),
];
```
### Step 4: Create an Expandable Tree Menu Widget

Create an `ExpandableTreeMenu` widget and pass the `treeNodes` list to it:
```dart
ExpandableTreeMenu(
  treeNodes: treeNodes,
  onNodeTap: (node) {
    print(node.label);
  },
)
```
### Platform-Specific Details

* On Android, the `ExpandableTreeMenu` widget uses a `ListView` to display the tree menu. You can customize the `ListView` by passing a `ListView.builder` to the `ExpandableTreeMenu` constructor.
* On iOS, the `ExpandableTreeMenu` widget uses a `UITableView` to display the tree menu. You can customize the `UITableView` by passing a `UITableViewDataSource` to the `ExpandableTreeMenu` constructor.

### Required Configurations or Optimizations

* To optimize performance, you can use lazy loading by setting `lazyLoad` to `true` in the `ExpandableTreeMenu` constructor.
* To customize the appearance of the tree menu, you can pass a `TreeNodeWidgetBuilder` to the `ExpandableTreeMenu` constructor.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:expandable_tree_menu/expandable_tree_menu.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Expandable Tree Menu Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  List<TreeNode> treeNodes = [
    TreeNode(
      label: 'Node 1',
      children: [
        TreeNode(label: 'Node 1.1'),
        TreeNode(label: 'Node 1.2'),
      ],
    ),
    TreeNode(
      label: 'Node 2',
      children: [
        TreeNode(label: 'Node 2.1'),
        TreeNode(label: 'Node 2.2'),
      ],
    ),
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Expandable Tree Menu Demo'),
      ),
      body: ExpandableTreeMenu(
        treeNodes: treeNodes,
        onNodeTap: (node) {
          print(node.label);
        },
      ),
    );
  }
}
```

// This code creates a basic Flutter app with an expandable tree menu.
// The tree menu is defined by a list of TreeNode objects, each with a label and optional children.
// When a node is tapped, its label is printed to the console.
// The ExpandableTreeMenu widget is used to display the tree menu, and it handles the expansion and collapse of nodes automatically.
// The onNodeTap callback is used to handle node taps, and it can be customized to perform any desired action.

<-- END_MAIN -->
```markdown
<!-- START_DESCRIPTION -->
# Overview of the `thai_id_card_numbers` Flutter Package

The `thai_id_card_numbers` package is a specialized Flutter library designed to validate and generate Thai ID card numbers. This package is particularly useful for applications that require user identification verification, such as banking apps, government services, or any application that needs to handle Thai citizen data securely and accurately.

## When to Use This Package
- **User Registration**: When building applications that require user registration with Thai ID cards.
- **Data Validation**: To ensure that the ID numbers entered by users are valid and conform to the Thai ID card format.
- **Government Services**: For applications that interact with government databases or services requiring ID verification.

## Key Features
- **Validation**: Check if a given ID card number is valid based on the official Thai ID card number rules.
- **Generation**: Create random valid Thai ID card numbers for testing purposes.
- **Easy Integration**: Simple API that can be easily integrated into any Flutter application.

This package simplifies the process of handling Thai ID card numbers, ensuring that developers can focus on building their applications without worrying about the complexities of ID validation.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the `thai_id_card_numbers` Package

## Installation
To use the `thai_id_card_numbers` package in your Flutter project, you need to add it to your `pubspec.yaml` file. Open your `pubspec.yaml` and add the following line under dependencies:

```yaml
dependencies:
  thai_id_card_numbers: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command in your terminal to install the package:

```bash
flutter pub get
```

## Platform-Specific Details
The `thai_id_card_numbers` package is designed to work seamlessly on both Android and iOS platforms. There are no additional configurations required for either platform, making it easy to integrate into your Flutter application.

## Basic Usage
Hereâ€™s how to use the package in your Flutter application:

1. **Import the Package**: Start by importing the package in your Dart file.

```dart
import 'package:thai_id_card_numbers/thai_id_card_numbers.dart';
```

2. **Validate an ID Card Number**: Use the `isValidThaiIdCardNumber` method to check if an ID number is valid.

```dart
bool isValid = ThaiIdCardNumbers.isValidThaiIdCardNumber('1234567890123');
```

3. **Generate a Random ID Card Number**: Use the `generateRandomThaiIdCardNumber` method to create a valid ID number.

```dart
String randomId = ThaiIdCardNumbers.generateRandomThaiIdCardNumber();
```

With these simple steps, you can easily validate and generate Thai ID card numbers in your Flutter application.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using the `thai_id_card_numbers` Package

```dart
import 'package:flutter/material.dart';
import 'package:thai_id_card_numbers/thai_id_card_numbers.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Thai ID Card Numbers Example',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Thai ID Card Numbers'),
        ),
        body: Center(
          child: IDCardExample(),
        ),
      ),
    );
  }
}

class IDCardExample extends StatefulWidget {
  @override
  _IDCardExampleState createState() => _IDCardExampleState();
}

class _IDCardExampleState extends State<IDCardExample> {
  String _idCardNumber = '';
  String _validationMessage = '';

  // Function to validate the ID card number
  void _validateIdCard() {
    // Check if the ID card number is valid
    if (ThaiIdCardNumbers.isValidThaiIdCardNumber(_idCardNumber)) {
      setState(() {
        _validationMessage = 'The ID card number is valid.';
      });
    } else {
      setState(() {
        _validationMessage = 'The ID card number is invalid.';
      });
    }
  }

  // Function to generate a random ID card number
  void _generateRandomIdCard() {
    // Generate a random valid Thai ID card number
    setState(() {
      _idCardNumber = ThaiIdCardNumbers.generateRandomThaiIdCardNumber();
      _validationMessage = ''; // Clear previous validation message
    });
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      mainAxisAlignment: MainAxisAlignment.center,
      children: <Widget>[
        TextField(
          decoration: InputDecoration(
            labelText: 'Enter Thai ID Card Number',
          ),
          onChanged: (value) {
            _idCardNumber = value; // Update the ID card number
          },
        ),
        SizedBox(height: 20),
        ElevatedButton(
          onPressed: _validateIdCard, // Validate the ID card number
          child: Text('Validate ID Card'),
        ),
        ElevatedButton(
          onPressed: _generateRandomIdCard, // Generate a random ID card number
          child: Text('Generate Random ID Card'),
        ),
        SizedBox(height: 20),
        Text(
          _validationMessage, // Display validation message
          style: TextStyle(fontSize: 16, color: Colors.red),
        ),
        SizedBox(height: 20),
        Text(
          'Generated ID: $_idCardNumber', // Display generated ID card number
          style: TextStyle(fontSize: 16),
        ),
      ],
    );
  }
}
```

// The above code demonstrates how to use the `thai_id_card_numbers` package in a Flutter application.
// 
// 1. **Main Function**: The `main` function initializes the app by running the `RealFlutter` widget.
// 2. **RealFlutter Widget**: This is the main widget that sets up the MaterialApp and the home screen.
// 3. **IDCardExample Widget**: This stateful widget contains the logic for validating and generating Thai ID card numbers.
// 4. **TextField**: Users can input a Thai ID card number here.
// 5. **Validate Button**: When pressed, it calls `_validateIdCard`, which checks if the entered ID is valid and updates the validation message.
// 6. **Generate Button**: This button calls `_generateRandomIdCard`, which generates a random valid ID card number and displays it.
// 7. **Validation Message**: Displays whether the entered ID card number is valid or invalid.
// 8. **Generated ID Display**: Shows the randomly generated ID card number.

// This application flow allows users to input an ID card number, validate it, and generate a random valid ID card number for testing purposes.
<!-- END_MAIN -->
```
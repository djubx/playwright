<-- START_DESCRIPTION -->

# Overlay Tutorial Flutter Package
=====================================

The `overlay_tutorial` Flutter package is a powerful tool for creating interactive tutorials and guides for your Flutter applications. It allows you to create overlays that can be used to highlight specific parts of your app's UI, provide instructions, and even collect user input.

### When to Use This Package

This package is perfect for creating:

* Interactive tutorials for new users
* Guided tours of your app's features
* Tooltips and hints for complex UI elements
* Surveys and feedback collection

### Features

* Create custom overlays with any widget
* Position overlays relative to any widget
* Animate overlays with built-in animations
* Collect user input with built-in form fields
* Customize overlay appearance and behavior

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `overlay_tutorial` package, add it to your `pubspec.yaml` file:
```yml
dependencies:
  overlay_tutorial: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Platform-Specific Details

* Android: No additional setup required.
* iOS: Add the following line to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```
### Using the Package

To create an overlay, use the `OverlayTutorial` widget:
```dart
import 'package:overlay_tutorial/overlay_tutorial.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Overlay Tutorial'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            OverlayTutorial(
              child: Text('This is an overlay!'),
              target: Offset(100, 100),
            ).show(context);
          },
          child: Text('Show Overlay'),
        ),
      ),
    );
  }
}
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:overlay_tutorial/overlay_tutorial.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Overlay Tutorial Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Step 1: Create a GlobalKey to access the button's position
  final _buttonKey = GlobalKey();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Overlay Tutorial Demo'),
      ),
      body: Center(
        child: ElevatedButton(
          key: _buttonKey, // Step 2: Assign the GlobalKey to the button
          onPressed: () {
            // Step 3: Get the button's position using the GlobalKey
            final buttonPosition = _buttonKey.currentContext.findRenderObject().localToGlobal(Offset.zero);

            // Step 4: Create an OverlayTutorial instance
            final overlay = OverlayTutorial(
              child: Text('This is an overlay!'), // Step 5: Define the overlay's content
              target: buttonPosition, // Step 6: Set the overlay's target position
            );

            // Step 7: Show the overlay
            overlay.show(context);
          },
          child: Text('Show Overlay'),
        ),
      ),
    );
  }
}

// The application flow:
// 1. The user presses the "Show Overlay" button.
// 2. The button's position is obtained using the GlobalKey.
// 3. An OverlayTutorial instance is created with the desired content and target position.
// 4. The overlay is shown using the `show` method.
// 5. The overlay is displayed on top of the button, with the specified content and animation.
```

// In summary, this code creates a button that, when pressed, displays an overlay on top of it. The overlay's position is determined using a GlobalKey, and its content is defined using the OverlayTutorial widget. The overlay is then shown using the `show` method, which animates its appearance on top of the button.
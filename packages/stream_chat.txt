<-- START_DESCRIPTION -->

Stream Chat Flutter Package
==========================

The Stream Chat Flutter package is a powerful tool for building real-time chat applications in Flutter. It provides a simple and intuitive API for integrating chat functionality into your app, with features such as:

* Real-time messaging
* User presence and typing indicators
* File and image sharing
* Customizable UI components

When to Use This Package
------------------------

This package is ideal for building chat applications, such as:

* Social media platforms
* Messaging apps
* Customer support chatbots
* Live event chat rooms

Features
--------

* Real-time messaging with WebSocket support
* User presence and typing indicators
* File and image sharing with upload progress indicators
* Customizable UI components, including chat bubbles and input fields
* Support for multiple chat channels and threads

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Configuration
-----------------------

To use the Stream Chat Flutter package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  stream_chat_flutter: ^2.1.0
```
2. Import the package in your Dart file:
```dart
import 'package:stream_chat_flutter/stream_chat_flutter.dart';
```
3. Initialize the Stream Chat client with your API key:
```dart
final client = StreamChatClient(
  'YOUR_API_KEY',
  logLevel: Level.INFO,
);
```
4. Create a chat channel and add users to it:
```dart
final channel = client.channel(
  'messaging',
  id: 'general',
  extraData: {
    'name': 'General Chat',
  },
);

channel.addMembers([
  User(id: 'user1', name: 'John Doe'),
  User(id: 'user2', name: 'Jane Doe'),
]);
```
Platform-Specific Details
-------------------------

### Android

* Add the following permissions to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.INTERNET" />
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
```
* Add the following dependencies to your `build.gradle` file:
```groovy
dependencies {
  implementation 'io.stream:stream-chat-android:2.1.0'
}
```
### iOS

* Add the following permissions to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```
* Add the following dependencies to your `Podfile`:
```ruby
pod 'StreamChat', '~> 2.1.0'
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:stream_chat_flutter/stream_chat_flutter.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Stream Chat Demo',
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final _client = StreamChatClient(
    'YOUR_API_KEY',
    logLevel: Level.INFO,
  );

  final _channel = _client.channel(
    'messaging',
    id: 'general',
    extraData: {
      'name': 'General Chat',
    },
  );

  @override
  void initState() {
    super.initState();
    _channel.addMembers([
      User(id: 'user1', name: 'John Doe'),
      User(id: 'user2', name: 'Jane Doe'),
    ]);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Stream Chat Demo'),
      ),
      body: Column(
        children: [
          Expanded(
            child: StreamChat(
              client: _client,
              channel: _channel,
              onMessageSent: (message) {
                print('Message sent: ${message.text}');
              },
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Row(
              children: [
                Expanded(
                  child: TextField(
                    decoration: InputDecoration(
                      border: OutlineInputBorder(),
                      hintText: 'Type a message',
                    ),
                  ),
                ),
                SizedBox(width: 16),
                ElevatedButton(
                  onPressed: () {
                    _channel.sendMessage(
                      Message(
                        text: 'Hello, world!',
                      ),
                    );
                  },
                  child: Text('Send'),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}

// The app starts by initializing the Stream Chat client with the API key.
// Then, it creates a chat channel and adds two users to it.
// The app uses the `StreamChat` widget to display the chat UI.
// When the user types a message and clicks the send button, the app sends the message to the channel using the `sendMessage` method.
// The `onMessageSent` callback is called when the message is sent successfully, and it prints the message text to the console.
```

<-- END_MAIN -->
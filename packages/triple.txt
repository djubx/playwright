<-- START_DESCRIPTION -->

# Triple Flutter Package: A High-Level Overview
=====================================================

The Triple Flutter package is a state management library that simplifies the process of managing state in Flutter applications. It provides a simple and intuitive API for managing state, making it easier to build robust and maintainable applications.

### When to Use Triple

Triple is ideal for applications that require complex state management, such as:

* Applications with multiple screens and complex navigation flows
* Applications that require caching and data persistence
* Applications that need to handle errors and exceptions robustly

### Features of Triple

Triple provides several key features that make it an attractive choice for state management:

* **Simple and Intuitive API**: Triple provides a simple and easy-to-use API for managing state.
* **Automatic Caching**: Triple automatically caches state, making it easier to handle data persistence.
* **Error Handling**: Triple provides robust error handling mechanisms, making it easier to handle exceptions and errors.
* **Support for Multiple Stores**: Triple supports multiple stores, making it easier to manage complex state.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up Triple
=====================

To use Triple, you need to add the `triple` package to your `pubspec.yaml` file:

```yml
dependencies:
  triple: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Creating a Store

To create a store, you need to create a class that extends `Store`:

```dart
import 'package:triple/triple.dart';

class RealFlutterStore extends Store<RealFlutterState> {
  RealFlutterStore() : super(RealFlutterState());

  void increment() {
    update(state.copyWith(counter: state.counter + 1));
  }

  void decrement() {
    update(state.copyWith(counter: state.counter - 1));
  }
}
```

### Creating a State

To create a state, you need to create a class that extends `State`:

```dart
import 'package:triple/triple.dart';

class RealFlutterState extends State {
  final int counter;

  RealFlutterState({this.counter = 0});

  RealFlutterState copyWith({int? counter}) {
    return RealFlutterState(counter: counter ?? this.counter);
  }
}
```

### Using the Store

To use the store, you need to create an instance of the store and use it to manage state:

```dart
import 'package:flutter/material.dart';
import 'package:triple/triple.dart';

class RealFlutterApp extends StatelessWidget {
  final RealFlutterStore store = RealFlutterStore();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Real Flutter App'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Counter: ${store.state.counter}',
              style: TextStyle(fontSize: 24),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: store.increment,
              child: Text('Increment'),
            ),
            SizedBox(height: 10),
            ElevatedButton(
              onPressed: store.decrement,
              child: Text('Decrement'),
            ),
          ],
        ),
      ),
    );
  }
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:triple/triple.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Real Flutter App',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutterApp(),
    );
  }
}

class RealFlutterApp extends StatelessWidget {
  final RealFlutterStore store = RealFlutterStore();

  @override
  Widget build(BuildContext context) {
    // Create a ScopedBuilder to rebuild the widget tree when the state changes
    return ScopedBuilder(
      store: store,
      onState: (context, state) {
        // Return the widget tree
        return Scaffold(
          appBar: AppBar(
            title: Text('Real Flutter App'),
          ),
          body: Center(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: <Widget>[
                Text(
                  'Counter: ${state.counter}',
                  style: TextStyle(fontSize: 24),
                ),
                SizedBox(height: 20),
                ElevatedButton(
                  onPressed: store.increment,
                  child: Text('Increment'),
                ),
                SizedBox(height: 10),
                ElevatedButton(
                  onPressed: store.decrement,
                  child: Text('Decrement'),
                ),
              ],
            ),
          ),
        );
      },
      onError: (context, error) {
        // Return an error message
        return Text('Error: $error');
      },
      onLoading: (context) {
        // Return a loading indicator
        return CircularProgressIndicator();
      },
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and the ScopedBuilder is created.
// 2. The ScopedBuilder rebuilds the widget tree with the initial state.
// 3. The user presses the increment or decrement button.
// 4. The store updates the state and notifies the ScopedBuilder.
// 5. The ScopedBuilder rebuilds the widget tree with the new state.
// 6. The user sees the updated counter value.
```

<-- END_MAIN -->
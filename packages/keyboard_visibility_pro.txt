<-- START_DESCRIPTION -->

**Keyboard Visibility Pro Flutter Package**
=============================================

The `keyboard_visibility_pro` Flutter package provides a simple way to detect when the keyboard is visible or hidden. This package is useful when you need to adjust your app's layout or behavior based on the keyboard's visibility.

**When to Use This Package**
---------------------------

You can use this package in scenarios such as:

* Adjusting the layout of your app when the keyboard is visible to avoid overlapping widgets.
* Hiding or showing certain widgets based on the keyboard's visibility.
* Triggering specific actions when the keyboard is shown or hidden.

**Features**
------------

* Detects when the keyboard is visible or hidden.
* Provides a simple API for listening to keyboard visibility changes.
* Works on both Android and iOS platforms.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setup and Usage**
-------------------

To use the `keyboard_visibility_pro` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  keyboard_visibility_pro: ^1.0.0
```
2. Import the package in your Dart file:
```dart
import 'package:keyboard_visibility_pro/keyboard_visibility_pro.dart';
```
3. Create an instance of the `KeyboardVisibilityPro` class:
```dart
KeyboardVisibilityPro _keyboardVisibilityPro = KeyboardVisibilityPro();
```
4. Listen to keyboard visibility changes using the `onVisibilityChanged` callback:
```dart
_keyboardVisibilityPro.onVisibilityChanged.listen((bool visible) {
  // Handle keyboard visibility change
});
```
**Platform-Specific Details**
---------------------------

* On Android, the package uses the `android.view.ViewTreeObserver` class to detect keyboard visibility changes.
* On iOS, the package uses the `NSNotificationCenter` class to detect keyboard visibility changes.

**Required Configurations or Optimizations**
------------------------------------------

* Make sure to dispose of the `KeyboardVisibilityPro` instance when it is no longer needed to avoid memory leaks.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:keyboard_visibility_pro/keyboard_visibility_pro.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Keyboard Visibility Pro Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  KeyboardVisibilityPro _keyboardVisibilityPro = KeyboardVisibilityPro();
  bool _isKeyboardVisible = false;

  @override
  void initState() {
    super.initState();
    _keyboardVisibilityPro.onVisibilityChanged.listen((bool visible) {
      setState(() {
        _isKeyboardVisible = visible;
      });
    });
  }

  @override
  void dispose() {
    _keyboardVisibilityPro.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Keyboard Visibility Pro Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              _isKeyboardVisible ? 'Keyboard is visible' : 'Keyboard is hidden',
              style: TextStyle(fontSize: 24),
            ),
            SizedBox(height: 20),
            TextField(
              decoration: InputDecoration(
                border: OutlineInputBorder(),
                labelText: 'Type something',
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// Application flow:
// 1. The app creates an instance of the `KeyboardVisibilityPro` class.
// 2. The app listens to keyboard visibility changes using the `onVisibilityChanged` callback.
// 3. When the keyboard visibility changes, the app updates the `_isKeyboardVisible` variable.
// 4. The app uses the `_isKeyboardVisible` variable to display a message indicating whether the keyboard is visible or hidden.
// 5. The app disposes of the `KeyboardVisibilityPro` instance when it is no longer needed to avoid memory leaks.

// Final summary:
// The code flows by creating an instance of the `KeyboardVisibilityPro` class, listening to keyboard visibility changes, and updating the UI accordingly. The app also disposes of the `KeyboardVisibilityPro` instance when it is no longer needed to avoid memory leaks.

```

<-- END_MAIN -->
<-- START_DESCRIPTION -->
Quill Markdown Flutter Package
=============================

The `quill_markdown` Flutter package is a powerful tool for creating Markdown editors in Flutter applications. It provides a simple and efficient way to edit and parse Markdown text, making it ideal for use cases such as note-taking apps, blogging platforms, and documentation tools.

Key Features
------------

*   Supports Markdown syntax for editing and parsing
*   Provides a customizable editor with various formatting options
*   Allows for seamless conversion between Markdown and HTML
*   Offers a simple and intuitive API for integration into Flutter apps

When to Use
------------

The `quill_markdown` package is perfect for any Flutter application that requires a robust Markdown editor. Some examples include:

*   Note-taking apps that allow users to format their notes using Markdown
*   Blogging platforms that need to parse and display Markdown posts
*   Documentation tools that require a simple and efficient way to edit and display Markdown text

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->
Setup and Usage
----------------

### Step 1: Add the Package to Your Project

To use the `quill_markdown` package, you need to add it to your project's `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  quill_markdown: ^0.1.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the `quill_markdown` package in your Dart file:

```dart
import 'package:quill_markdown/quill_markdown.dart';
```

### Step 3: Create a Markdown Editor

Create a `QuillMarkdownEditor` widget to edit Markdown text:

```dart
QuillMarkdownEditor(
  controller: _controller,
  readOnly: false,
)
```

### Step 4: Parse Markdown Text

Use the `QuillMarkdownParser` class to parse Markdown text:

```dart
QuillMarkdownParser parser = QuillMarkdownParser();
String html = parser.parse(_controller.text);
```

Platform-Specific Details
-------------------------

The `quill_markdown` package works seamlessly on both Android and iOS platforms. However, you may need to configure the platform-specific settings for optimal performance.

For example, on Android, you can configure the `android:hardwareAccelerated` attribute in the `AndroidManifest.xml` file to improve performance:

```xml
<application
  android:hardwareAccelerated="true"
  ...>
```

Similarly, on iOS, you can configure the `UIViewControllerBasedStatusBarAppearance` key in the `Info.plist` file to customize the status bar appearance:

```xml
<key>UIViewControllerBasedStatusBarAppearance</key>
<false/>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->
```dart
import 'package:flutter/material.dart';
import 'package:quill_markdown/quill_markdown.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Quill Markdown Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _controller = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Quill Markdown Demo'),
      ),
      body: Column(
        children: [
          // Create a QuillMarkdownEditor widget to edit Markdown text
          QuillMarkdownEditor(
            controller: _controller,
            readOnly: false,
          ),
          // Create a button to parse the Markdown text
          ElevatedButton(
            onPressed: () {
              // Create a QuillMarkdownParser instance to parse the Markdown text
              QuillMarkdownParser parser = QuillMarkdownParser();
              // Parse the Markdown text and display the result
              String html = parser.parse(_controller.text);
              print(html);
            },
            child: Text('Parse Markdown'),
          ),
        ],
      ),
    );
  }
}
```

// The application flow is as follows:
// 1. The user edits the Markdown text in the QuillMarkdownEditor widget.
// 2. When the user clicks the "Parse Markdown" button, the QuillMarkdownParser instance is created.
// 3. The QuillMarkdownParser instance parses the Markdown text and converts it to HTML.
// 4. The parsed HTML is printed to the console.

// In summary, this code demonstrates how to use the Quill Markdown package to create a Markdown editor and parse Markdown text in a Flutter application.

<-- END_MAIN -->
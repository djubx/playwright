<-- START_DESCRIPTION -->

Implicitly Animated List
========================

The `implicitly_animated_list` package is a powerful tool for creating animated lists in Flutter. It provides a simple and efficient way to animate the addition, removal, and reordering of items in a list.

When to Use
------------

This package is perfect for scenarios where you need to display a list of items that can change dynamically, such as:

* A to-do list app where users can add, remove, and reorder tasks
* A social media feed where posts can be added, removed, and reordered
* A shopping cart where items can be added, removed, and reordered

Features
--------

* Implicitly animates the addition, removal, and reordering of items in a list
* Supports custom animation curves and durations
* Works with any type of widget, not just lists

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
----------------

To use the `implicitly_animated_list` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  implicitly_animated_list: ^1.0.0
```
2. Import the package in your Dart file:
```dart
import 'package:implicitly_animated_list/implicitly_animated_list.dart';
```
3. Create a list of items:
```dart
List<String> items = ['Item 1', 'Item 2', 'Item 3'];
```
4. Create an `ImplicitlyAnimatedList` widget:
```dart
ImplicitlyAnimatedList(
  items: items,
  itemBuilder: (context, item, animation) {
    return ListTile(
      title: Text(item),
    );
  },
)
```
5. To add, remove, or reorder items, simply modify the `items` list and the animation will be triggered automatically.

Platform-Specific Details
-------------------------

* On Android, the animation is triggered by the `LayoutTransition` class.
* On iOS, the animation is triggered by the `UICollectionView` class.

Configurations and Optimizations
---------------------------------

* To customize the animation curve and duration, use the `animationCurve` and `animationDuration` properties.
* To improve performance, use the `cacheExtent` property to limit the number of items that are animated at once.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:implicitly_animated_list/implicitly_animated_list.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  List<String> items = ['Item 1', 'Item 2', 'Item 3'];

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Implicitly Animated List'),
        ),
        body: ImplicitlyAnimatedList(
          items: items,
          itemBuilder: (context, item, animation) {
            // Step 1: Create a ListTile widget for each item
            return ListTile(
              title: Text(item),
            );
          },
        ),
        floatingActionButton: FloatingActionButton(
          onPressed: () {
            // Step 2: Add a new item to the list
            setState(() {
              items.add('Item ${items.length + 1}');
            });
          },
          tooltip: 'Add item',
          child: Icon(Icons.add),
        ),
      ),
    );
  }
}

// Application flow:
// 1. The app starts with a list of three items.
// 2. When the user presses the floating action button, a new item is added to the list.
// 3. The ImplicitlyAnimatedList widget automatically animates the addition of the new item.
// 4. The animation is triggered by the modification of the items list.
// 5. The animation curve and duration can be customized using the animationCurve and animationDuration properties.
// 6. The cacheExtent property can be used to improve performance by limiting the number of items that are animated at once.

// Final summary:
// The ImplicitlyAnimatedList widget provides a simple and efficient way to animate the addition, removal, and reordering of items in a list.
// The widget automatically animates the modification of the items list, and the animation curve and duration can be customized.
// The cacheExtent property can be used to improve performance by limiting the number of items that are animated at once.

```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

Event Bus Plus
================

Event Bus Plus is a Flutter package that allows for easy communication between different parts of your app using events. It's a great way to decouple your widgets and business logic, making your code more modular and easier to maintain.

When to Use
------------

Event Bus Plus is perfect for situations where you need to notify different parts of your app about certain events or changes. For example:

* When a user logs in or out
* When new data is available from an API
* When a user interacts with a widget

Features
--------

* Easy to use: just register for events and post them when needed
* Supports multiple event types
* Works with both Android and iOS

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
----------------

### Step 1: Add the Package to Your Pubspec

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  event_bus_plus: ^1.0.0
```
Then run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:event_bus_plus/event_bus_plus.dart';
```
### Step 3: Register for Events

Create a new instance of the `EventBus` class and register for events using the `on` method:
```dart
EventBus eventBus = EventBus();

eventBus.on<UserLoggedInEvent>((event) {
  // Handle the event
});
```
### Step 4: Post Events

Post events using the `post` method:
```dart
eventBus.post(UserLoggedInEvent());
```
Platform-Specific Details
-------------------------

### Android

No additional setup is required for Android.

### iOS

No additional setup is required for iOS.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:event_bus_plus/event_bus_plus.dart';

// Define an event class
class UserLoggedInEvent {}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Create an instance of the event bus
  EventBus eventBus = EventBus();

  @override
  void initState() {
    super.initState();

    // Register for events
    eventBus.on<UserLoggedInEvent>((event) {
      // Handle the event
      print('User logged in!');
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Event Bus Plus Demo'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Post an event
            eventBus.post(UserLoggedInEvent());
          },
          child: Text('Log in'),
        ),
      ),
    );
  }
}

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Event Bus Plus Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}
```

// The app starts by creating an instance of the `EventBus` class.
// This instance is used to register for events and post events.
// In this example, we register for the `UserLoggedInEvent` event in the `initState` method.
// When the event is posted, the callback function is called and prints 'User logged in!' to the console.
// The event is posted when the user presses the 'Log in' button.
// The `post` method is used to post the event, and the `on` method is used to register for the event.

// The app flow is as follows:
// 1. The user opens the app and the `RealFlutter` widget is created.
// 2. The `initState` method is called and the event bus is created.
// 3. The event bus is used to register for the `UserLoggedInEvent` event.
// 4. The user presses the 'Log in' button and the event is posted.
// 5. The callback function is called and prints 'User logged in!' to the console.

<-- END_MAIN -->
# Detailed Technical Blog on the "tosspayments_widget_sdk_flutter" Flutter Package

## <-- START_DESCRIPTION -->

### Description

The `tosspayments_widget_sdk_flutter` package is a powerful Flutter SDK designed to facilitate seamless payment integration in mobile applications. It provides developers with a straightforward way to implement payment functionalities using Toss Payments, a popular payment gateway in South Korea. This package is particularly useful for applications that require in-app purchases, subscription services, or any form of online transactions.

### When to Use

You should consider using the `tosspayments_widget_sdk_flutter` package when:
- You are developing a Flutter application that requires payment processing.
- You want to leverage Toss Payments for its user-friendly interface and robust security features.
- You need a solution that supports various payment methods, including credit cards and mobile wallets.

### Key Features

- **Easy Integration**: The package simplifies the process of integrating Toss Payments into your Flutter app.
- **Multiple Payment Methods**: Supports various payment options, enhancing user experience.
- **Secure Transactions**: Ensures that all transactions are processed securely, adhering to industry standards.
- **Customizable UI**: Allows developers to customize the payment interface to match their app's design.
- **Real-time Payment Status**: Provides real-time updates on payment status, improving user feedback.

## <-- END_DESCRIPTION -->

## <-- START_TUTORIAL -->

### Tutorial

To get started with the `tosspayments_widget_sdk_flutter` package, follow these steps:

#### Step 1: Add Dependency

Add the package to your `pubspec.yaml` file:

```yaml
dependencies:
  tosspayments_widget_sdk_flutter: ^latest_version
```

Make sure to replace `latest_version` with the most recent version available on [pub.dev](https://pub.dev/packages/tosspayments_widget_sdk_flutter).

#### Step 2: Platform-Specific Configuration

**For Android:**
1. Open `android/app/build.gradle` and ensure you have the following configurations:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21 // or higher
    }
}
```

2. Add the necessary permissions in `AndroidManifest.xml`:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
```

**For iOS:**
1. Open `ios/Runner/Info.plist` and add the following:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

2. Ensure your deployment target is set to at least iOS 11.0 in `ios/Podfile`:

```ruby
platform :ios, '11.0'
```

#### Step 3: Initialize the SDK

In your Flutter application, initialize the Toss Payments SDK. You can do this in your main application file or wherever appropriate.

```dart
import 'package:tosspayments_widget_sdk_flutter/tosspayments_widget_sdk_flutter.dart';

void main() {
  runApp(MyApp());
  // Initialize the Toss Payments SDK
  TossPayments.init('YOUR_TOSS_PAYMENTS_KEY');
}
```

### Step 4: Implement Payment Functionality

You can now implement the payment functionality in your app. Hereâ€™s a simple example of how to create a payment request.

```dart
void initiatePayment() async {
  final paymentResult = await TossPayments.requestPayment(
    amount: 10000, // Amount in the smallest currency unit (e.g., cents)
    orderId: 'order_id_12345',
    orderName: 'Test Order',
    customerName: 'John Doe',
    customerEmail: 'john.doe@example.com',
  );

  if (paymentResult.isSuccess) {
    // Handle successful payment
  } else {
    // Handle payment failure
  }
}
```

## <-- END_TUTORIAL -->

## <-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:tosspayments_widget_sdk_flutter/tosspayments_widget_sdk_flutter.dart';

void main() {
  runApp(MyApp());
  // Initialize the Toss Payments SDK with your API key
  TossPayments.init('YOUR_TOSS_PAYMENTS_KEY');
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Toss Payments Demo',
      home: PaymentScreen(),
    );
  }
}

class PaymentScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Toss Payments Example'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Call the function to initiate payment when the button is pressed
            initiatePayment();
          },
          child: Text('Pay Now'),
        ),
      ),
    );
  }

  void initiatePayment() async {
    // Request payment from Toss Payments
    final paymentResult = await TossPayments.requestPayment(
      amount: 10000, // Amount in the smallest currency unit (e.g., cents)
      orderId: 'order_id_12345', // Unique order ID
      orderName: 'Test Order', // Description of the order
      customerName: 'John Doe', // Customer's name
      customerEmail: 'john.doe@example.com', // Customer's email
    );

    // Check if the payment was successful
    if (paymentResult.isSuccess) {
      // Show success message
      print('Payment Successful: ${paymentResult.transactionId}');
    } else {
      // Show failure message
      print('Payment Failed: ${paymentResult.errorMessage}');
    }
  }
}

// The application flow is as follows:
// 1. The app starts and initializes the Toss Payments SDK with the provided API key.
// 2. The main screen displays a button labeled "Pay Now."
// 3. When the button is pressed, the `initiatePayment` function is called.
// 4. This function requests a payment from Toss Payments with the specified details.
// 5. If the payment is successful, it prints the transaction ID; otherwise, it prints the error message.
```

## <-- END_MAIN -->

### Summary

In this blog post, we explored the `tosspayments_widget_sdk_flutter` package, which provides a robust solution for integrating Toss Payments into Flutter applications. We covered the setup process, including platform-specific configurations for Android and iOS, and demonstrated how to implement payment functionality with a complete example. The application flow was explained step-by-step through comments in the code, making it easy to understand how to utilize this package effectively in your projects.
<-- START_DESCRIPTION -->
# Flutter Gradient Colors Package
=====================================

The `flutter_gradient_colors` package is a powerful tool for creating beautiful gradient effects in Flutter applications. It provides a simple and intuitive way to add gradients to various widgets, making it easy to enhance the visual appeal of your app.

### When to Use This Package

This package is perfect for creating visually appealing backgrounds, buttons, and other UI elements that require a gradient effect. It's also useful for creating custom loading animations, progress bars, and other interactive elements.

### Key Features

*   Supports linear and radial gradients
*   Allows for customization of gradient colors, stops, and direction
*   Compatible with various Flutter widgets, including `Container`, `Button`, and `Text`
*   Easy to use and integrate into existing projects

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->
# Tutorial: Using the Flutter Gradient Colors Package
=====================================================

### Step 1: Add the Package to Your Project

To use the `flutter_gradient_colors` package, you need to add it to your project's `pubspec.yaml` file. Open the file and add the following line under the `dependencies` section:

```yml
dependencies:
  flutter:
    sdk: flutter
  flutter_gradient_colors: ^1.0.0
```

Then, run `flutter pub get` in your terminal to install the package.

### Step 2: Import the Package

In your Dart file, import the package using the following line:

```dart
import 'package:flutter_gradient_colors/flutter_gradient_colors.dart';
```

### Step 3: Use the Package

To use the package, you can create a `GradientColor` object and pass it to a widget's `decoration` property. For example:

```dart
Container(
  decoration: BoxDecoration(
    gradient: LinearGradient(
      colors: GradientColor.linearGradientColors,
    ),
  ),
)
```

You can customize the gradient colors, stops, and direction using the `GradientColor` object's properties.

### Platform-Specific Details

The `flutter_gradient_colors` package works on both Android and iOS platforms. However, you may need to adjust the gradient colors and stops to achieve the desired effect on each platform.

### Required Configurations and Optimizations

There are no specific configurations or optimizations required to use the `flutter_gradient_colors` package. However, you should ensure that your Flutter project is set up correctly and that you have the necessary dependencies installed.

<-- END_TUTORIAL -->

<-- START_MAIN -->
```dart
import 'package:flutter/material.dart';
import 'package:flutter_gradient_colors/flutter_gradient_colors.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Gradient Colors Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    // Create a GradientColor object with custom colors and stops
    GradientColor gradientColor = GradientColor(
      linearGradientColors: [
        Colors.blue,
        Colors.green,
        Colors.yellow,
      ],
      stops: [
        0.1,
        0.5,
        0.9,
      ],
    );

    // Use the GradientColor object to create a linear gradient
    LinearGradient linearGradient = LinearGradient(
      colors: gradientColor.linearGradientColors,
      stops: gradientColor.stops,
    );

    // Create a Container widget with the linear gradient
    Container container = Container(
      decoration: BoxDecoration(
        gradient: linearGradient,
      ),
      child: Center(
        child: Text(
          'Linear Gradient',
          style: TextStyle(
            fontSize: 24,
            color: Colors.white,
          ),
        ),
      ),
    );

    // Create a GradientColor object with custom colors and stops for radial gradient
    GradientColor radialGradientColor = GradientColor(
      radialGradientColors: [
        Colors.red,
        Colors.orange,
        Colors.purple,
      ],
      stops: [
        0.1,
        0.5,
        0.9,
      ],
    );

    // Use the GradientColor object to create a radial gradient
    RadialGradient radialGradient = RadialGradient(
      colors: radialGradientColor.radialGradientColors,
      stops: radialGradientColor.stops,
    );

    // Create a Container widget with the radial gradient
    Container radialContainer = Container(
      decoration: BoxDecoration(
        gradient: radialGradient,
      ),
      child: Center(
        child: Text(
          'Radial Gradient',
          style: TextStyle(
            fontSize: 24,
            color: Colors.white,
          ),
        ),
      ),
    );

    // Return a Column widget with the linear and radial gradient containers
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Gradient Colors Demo'),
      ),
      body: Column(
        children: [
          Expanded(
            child: container,
          ),
          Expanded(
            child: radialContainer,
          ),
        ],
      ),
    );
  }
}
```
// The application flow is as follows:
// 1. The user runs the app and is presented with a Material app with a title and a home screen.
// 2. The home screen is a Scaffold with an AppBar and a Column widget.
// 3. The Column widget contains two Expanded widgets, each containing a Container widget.
// 4. The first Container widget has a linear gradient decoration and displays the text "Linear Gradient".
// 5. The second Container widget has a radial gradient decoration and displays the text "Radial Gradient".
// 6. The user can view the linear and radial gradients and their corresponding text.
// The application demonstrates the use of the Flutter Gradient Colors package to create linear and radial gradients in a Flutter app.
<-- END_MAIN -->
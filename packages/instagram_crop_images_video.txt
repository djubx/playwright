```markdown
<!-- START_DESCRIPTION -->
# Instagram Crop Images Video Flutter Package

The `instagram_crop_images_video` package is a powerful tool for Flutter developers looking to implement image and video cropping functionalities similar to those found in Instagram. This package allows users to select images or videos from their device, crop them to their desired dimensions, and then utilize the cropped media in their applications. 

## When to Use This Package
- **Social Media Applications**: If you're building an app that requires users to upload images or videos, this package can help ensure that the media is cropped to the desired aspect ratio.
- **Photo Editing Apps**: For applications focused on image editing, this package provides a straightforward way to implement cropping features.
- **User Profile Management**: When users need to upload profile pictures, cropping functionality can enhance the user experience.

## Key Features
- **Image and Video Support**: Crop both images and videos with ease.
- **Aspect Ratio Control**: Maintain specific aspect ratios while cropping.
- **Customizable UI**: The cropping interface can be customized to fit the design of your application.
- **Easy Integration**: Simple setup and usage within your Flutter project.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using instagram_crop_images_video

## Installation
To get started with the `instagram_crop_images_video` package, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  instagram_crop_images_video: ^latest_version
```

Make sure to replace `^latest_version` with the most recent version available on [pub.dev](https://pub.dev/packages/instagram_crop_images_video).

## Platform-Specific Configuration

### Android
1. Open your `android/app/build.gradle` file.
2. Ensure that you have the following permissions in your `AndroidManifest.xml`:

```xml
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
```

### iOS
1. Open your `ios/Runner/Info.plist` file.
2. Add the following keys to request permission for accessing the photo library:

```xml
<key>NSPhotoLibraryUsageDescription</key>
<string>We need access to your photo library to crop images and videos.</string>
<key>NSCameraUsageDescription</key>
<string>We need access to your camera to take photos and videos.</string>
```

## Using the Package
To use the package, you can create a simple UI that allows users to select an image or video, crop it, and then display the result. Below is a basic example of how to implement this.

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of Using instagram_crop_images_video

```dart
import 'package:flutter/material.dart';
import 'package:instagram_crop_images_video/instagram_crop_images_video.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Instagram Crop Example',
      home: CropPage(),
    );
  }
}

class CropPage extends StatefulWidget {
  @override
  _CropPageState createState() => _CropPageState();
}

class _CropPageState extends State<CropPage> {
  // Variable to hold the cropped image or video
  var _croppedMedia;

  // Function to pick and crop media
  Future<void> _pickAndCropMedia() async {
    // Open the cropping interface
    var cropped = await InstagramCropImagesVideo.cropImageOrVideo(
      source: ImageSource.gallery, // Choose from gallery
      aspectRatioPresets: [
        CropAspectRatioPreset.square, // Square aspect ratio
        CropAspectRatioPreset.original, // Original aspect ratio
      ],
      compressQuality: 100, // Quality of the cropped media
      maxWidth: 512, // Maximum width of the cropped media
      maxHeight: 512, // Maximum height of the cropped media
    );

    // Update the state with the cropped media
    setState(() {
      _croppedMedia = cropped;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Crop Image/Video'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            // Display the cropped media if available
            if (_croppedMedia != null)
              Image.file(_croppedMedia), // Display the cropped image
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _pickAndCropMedia, // Trigger media picking and cropping
              child: Text('Pick and Crop Media'),
            ),
          ],
        ),
      ),
    );
  }
}
```

```dart
// The above code creates a simple Flutter application that allows users to pick and crop images or videos.
// 
// 1. The `main` function initializes the app and sets `RealFlutter` as the home widget.
// 2. The `CropPage` widget is a stateful widget that manages the cropping functionality.
// 3. The `_pickAndCropMedia` function uses the `InstagramCropImagesVideo` package to open the cropping interface.
// 4. Users can select an image or video from their gallery, and the cropping options allow them to choose the aspect ratio.
// 5. Once the media is cropped, it updates the `_croppedMedia` variable and displays the cropped image in the UI.
// 6. The button triggers the media picking and cropping process, providing a seamless user experience.

```
<!-- END_MAIN -->
``` 

This structured approach provides a comprehensive overview of the `instagram_crop_images_video` package, guiding developers through its features, setup, and practical implementation.
```markdown
<-- START_DESCRIPTION -->

# Overview of the `video_compress_v2` Flutter Package

The `video_compress_v2` package is a powerful tool for Flutter developers looking to integrate video compression capabilities into their applications. This package provides a simple and efficient way to reduce the size of video files, making it ideal for applications where bandwidth and storage are concerns, such as social media apps, video sharing platforms, or any app that handles video uploads.

## When to Use `video_compress_v2`

- **Social Media Applications**: To reduce the size of videos before uploading, ensuring faster uploads and reduced data usage.
- **Video Sharing Platforms**: To optimize video storage and streaming by compressing videos before saving them to the server.
- **Messaging Apps**: To allow users to send videos without consuming excessive bandwidth.

## Key Features

- **Cross-Platform Support**: Works seamlessly on both Android and iOS.
- **Customizable Compression**: Offers various options to adjust the quality and size of the output video.
- **Easy Integration**: Simple API that integrates easily with existing Flutter applications.
- **Background Processing**: Supports video compression in the background, allowing users to continue using the app.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using `video_compress_v2`

In this section, we will walk through the setup process for the `video_compress_v2` package and demonstrate how to use it in a Flutter application.

## Setup Process

### Step 1: Add Dependency

Add the `video_compress_v2` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  video_compress_v2: ^1.0.0
```

### Step 2: Platform-Specific Configuration

#### Android

1. **Permissions**: Ensure you have the necessary permissions in your `AndroidManifest.xml`:

   ```xml
   <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
   <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
   ```

2. **ProGuard Rules**: If you are using ProGuard, add the following rules to your `proguard-rules.pro`:

   ```pro
   -keep class com.example.video_compress_v2.** { *; }
   -keep class androidx.** { *; }
   ```

#### iOS

1. **Permissions**: Update your `Info.plist` with the necessary permissions:

   ```xml
   <key>NSPhotoLibraryUsageDescription</key>
   <string>We need access to your photo library to compress videos.</string>
   <key>NSCameraUsageDescription</key>
   <string>We need access to your camera to record videos.</string>
   ```

2. **Podfile**: Ensure your `Podfile` is using platform version 10.0 or higher:

   ```ruby
   platform :ios, '10.0'
   ```

### Step 3: Using the Package

To use the package, import it into your Dart file:

```dart
import 'package:video_compress_v2/video_compress_v2.dart';
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:video_compress_v2/video_compress_v2.dart';

void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Video Compress Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: VideoCompressScreen(),
    );
  }
}

class VideoCompressScreen extends StatefulWidget {
  @override
  _VideoCompressScreenState createState() => _VideoCompressScreenState();
}

class _VideoCompressScreenState extends State<VideoCompressScreen> {
  // Variable to hold the compression result
  MediaInfo? _compressedVideo;

  // Function to compress video
  Future<void> _compressVideo() async {
    // Start the compression process
    final info = await RealFlutter.compressVideo(
      'path/to/your/video.mp4', // Path to the video file
      quality: VideoQuality.MediumQuality, // Set the desired quality
    );

    // Update the state with the compression result
    setState(() {
      _compressedVideo = info;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Video Compress Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: _compressVideo, // Trigger video compression
              child: Text('Compress Video'),
            ),
            if (_compressedVideo != null) ...[
              Text('Compressed Video Path: ${_compressedVideo!.path}'),
              Text('Size: ${_compressedVideo!.filesize} bytes'),
            ],
          ],
        ),
      ),
    );
  }
}
```

// The application starts by running the `MyApp` class, which sets up the MaterialApp.
// The home screen is set to `VideoCompressScreen`, a stateful widget.
// In `_VideoCompressScreenState`, a function `_compressVideo` is defined to handle video compression.
// The function uses `RealFlutter.compressVideo` to compress a video at a specified path.
// The result of the compression is stored in `_compressedVideo` and displayed on the screen.
// The UI consists of a button to trigger compression and displays the path and size of the compressed video if available.

<-- END_MAIN -->
```
```markdown
<!-- START_DESCRIPTION -->
# Easy SMS Receiver: A Flutter Package for SMS Handling

The `easy_sms_receiver` package is a powerful tool for Flutter developers looking to integrate SMS functionality into their applications. This package allows you to easily receive and handle SMS messages, making it ideal for applications that require SMS verification, notifications, or any other SMS-related features.

## When to Use This Package
- **SMS Verification**: Use it for applications that require user verification via SMS codes.
- **Notifications**: Ideal for apps that need to receive real-time notifications via SMS.
- **Two-Factor Authentication**: Enhance security by implementing SMS-based two-factor authentication.

## Key Features
- **Easy Integration**: Simple API to receive SMS messages without complex configurations.
- **Platform Support**: Works seamlessly on both Android and iOS platforms.
- **Real-time SMS Handling**: Receive SMS messages in real-time, allowing for immediate processing.
- **Customizable**: Offers options to filter and handle SMS messages based on your application's needs.

With these features, `easy_sms_receiver` stands out as a go-to package for developers needing SMS capabilities in their Flutter applications.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Easy SMS Receiver

In this section, we will walk through the setup process for the `easy_sms_receiver` package and demonstrate how to use it in your Flutter application.

## Step 1: Adding the Package to Your Project
To get started, add the `easy_sms_receiver` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  easy_sms_receiver: ^latest_version
```

Make sure to replace `^latest_version` with the latest version available on [pub.dev](https://pub.dev/packages/easy_sms_receiver).

## Step 2: Platform-Specific Configuration

### Android Configuration
1. Open your `AndroidManifest.xml` file located at `android/app/src/main/AndroidManifest.xml`.
2. Add the following permissions inside the `<manifest>` tag:

```xml
<uses-permission android:name="android.permission.RECEIVE_SMS"/>
<uses-permission android:name="android.permission.READ_SMS"/>
```

3. Ensure that your application has the correct intent filter to receive SMS:

```xml
<application>
    ...
    <receiver android:name="com.example.easy_sms_receiver.SmsReceiver">
        <intent-filter>
            <action android:name="android.provider.Telephony.SMS_RECEIVED"/>
        </intent-filter>
    </receiver>
</application>
```

### iOS Configuration
For iOS, you need to add the following permissions in your `Info.plist` file located at `ios/Runner/Info.plist`:

```xml
<key>NSContactsUsageDescription</key>
<string>This app requires access to your contacts.</string>
<key>NSPhotoLibraryUsageDescription</key>
<string>This app requires access to your photo library.</string>
```

## Step 3: Using the Package in Your Flutter App
Now that we have set up the package, we can start using it in our Flutter application. Below is a simple example of how to implement SMS receiving functionality.

```dart
import 'package:flutter/material.dart';
import 'package:easy_sms_receiver/easy_sms_receiver.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  String _smsMessage = "No SMS received yet";

  @override
  void initState() {
    super.initState();
    // Initialize the SMS receiver
    EasySmsReceiver.onSmsReceived.listen((SmsMessage message) {
      // Update the state with the received SMS message
      setState(() {
        _smsMessage = message.body;
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Easy SMS Receiver Example'),
      ),
      body: Center(
        child: Text(_smsMessage),
      ),
    );
  }
}
```

In this example, we listen for incoming SMS messages and update the UI with the received message. 

With these steps, you should be able to successfully integrate the `easy_sms_receiver` package into your Flutter application.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Easy SMS Receiver

```dart
import 'package:flutter/material.dart';
import 'package:easy_sms_receiver/easy_sms_receiver.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  String _smsMessage = "No SMS received yet"; // Variable to hold the SMS message

  @override
  void initState() {
    super.initState();
    // Listen for incoming SMS messages
    EasySmsReceiver.onSmsReceived.listen((SmsMessage message) {
      // Update the state with the received SMS message
      setState(() {
        _smsMessage = message.body; // Store the SMS body
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Easy SMS Receiver Example'), // App title
      ),
      body: Center(
        child: Text(_smsMessage), // Display the received SMS message
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts and initializes the RealFlutter widget.
// 2. In the initState method, we set up a listener for incoming SMS messages.
// 3. When an SMS is received, the listener is triggered, and the message body is stored in the _smsMessage variable.
// 4. The UI is updated to display the received SMS message in the center of the screen.
// 5. If no SMS has been received, it shows "No SMS received yet".
```
<!-- END_MAIN -->
```

### Summary
In this blog post, we explored the `easy_sms_receiver` Flutter package, detailing its features, setup process, and providing a complete example of its usage. The package is particularly useful for applications that require SMS handling, such as verification and notifications. By following the tutorial and example provided, developers can easily integrate SMS functionality into their Flutter applications.
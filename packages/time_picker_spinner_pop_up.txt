<-- START_DESCRIPTION -->

# Time Picker Spinner Pop Up Package
The `time_picker_spinner_pop_up` package is a Flutter package that provides a customizable time picker spinner pop-up. It allows users to select time in a user-friendly and intuitive way. This package is ideal for applications that require users to select specific times, such as scheduling appointments or setting reminders.

## Features
* Customizable time picker spinner pop-up
* Supports 12-hour and 24-hour formats
* Optional minute interval selection
* Supports localization

## When to Use
This package is useful when you need to allow users to select specific times in your application. For example:

* Scheduling appointments
* Setting reminders
* Selecting time slots for events

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
To use the `time_picker_spinner_pop_up` package, follow these steps:

### Step 1: Add the Package to Your Project
Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  time_picker_spinner_pop_up: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package
Import the package in your Dart file:
```dart
import 'package:time_picker_spinner_pop_up/time_picker_spinner_pop_up.dart';
```
### Step 3: Use the Time Picker Spinner Pop-Up
Create a `TimePickerSpinnerPopUp` widget and pass the required parameters:
```dart
TimePickerSpinnerPopUp(
  onTimeSelected: (time) {
    print('Selected time: $time');
  },
  initialTime: DateTime.now(),
  minuteInterval: 15,
  is24HourFormat: true,
)
```
### Platform-Specific Details
* Android: No additional configuration required.
* iOS: Add the following line to your `Info.plist` file:
```xml
<key>UIRequiresFullScreen</key>
<true/>
```
This is required to ensure that the time picker spinner pop-up is displayed correctly on iOS devices.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:time_picker_spinner_pop_up/time_picker_spinner_pop_up.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  DateTime _selectedTime;

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Time Picker Spinner Pop-Up Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Text(
                'Selected Time: ${_selectedTime != null ? _selectedTime.toString() : 'None'}',
                style: TextStyle(fontSize: 24),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  showDialog(
                    context: context,
                    builder: (context) {
                      return TimePickerSpinnerPopUp(
                        onTimeSelected: (time) {
                          setState(() {
                            _selectedTime = time;
                          });
                        },
                        initialTime: DateTime.now(),
                        minuteInterval: 15,
                        is24HourFormat: true,
                      );
                    },
                  );
                },
                child: Text('Select Time'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user clicks the 'Select Time' button.
// 2. The TimePickerSpinnerPopUp widget is displayed as a dialog.
// 3. The user selects a time using the time picker spinner.
// 4. The onTimeSelected callback is called with the selected time.
// 5. The selected time is updated in the _RealFlutterState.
// 6. The UI is updated to display the selected time.
// 7. The user can repeat the process to select a different time.

// Summary:
// This code demonstrates the use of the TimePickerSpinnerPopUp package to allow users to select a time.
// The selected time is displayed on the screen, and the user can repeat the process to select a different time.

```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Floodfill Image Package for Flutter
=====================================

The `floodfill_image` package is a powerful tool for Flutter developers to create interactive image editing experiences. It allows users to fill a closed area of an image with a specified color, creating a flood fill effect.

### When to Use This Package

This package is ideal for applications that require interactive image editing, such as:

* Coloring books or puzzle games
* Image editing software
* Interactive tutorials or educational apps

### Features

* Supports PNG, JPEG, and other popular image formats
* Adjustable brush size and color
* Optional undo and redo functionality
* Compatible with Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Floodfill Image Package
=====================================

To use the `floodfill_image` package in your Flutter project, follow these steps:

### Step 1: Add the Package to Your `pubspec.yaml` File

```yml
dependencies:
  flutter:
    sdk: flutter
  floodfill_image: ^1.0.0
```

### Step 2: Import the Package in Your Dart File

```dart
import 'package:floodfill_image/floodfill_image.dart';
```

### Step 3: Create a `FloodfillImage` Widget

```dart
FloodfillImage(
  image: AssetImage('assets/image.png'),
  brushColor: Colors.red,
  brushSize: 10.0,
)
```

### Platform-Specific Details

* For Android, make sure to add the `android.permission.WRITE_EXTERNAL_STORAGE` permission to your `AndroidManifest.xml` file.
* For iOS, add the `NSPhotoLibraryUsageDescription` key to your `Info.plist` file.

### Configurations and Optimizations

* To improve performance, consider using a smaller brush size or a lower-resolution image.
* To enable undo and redo functionality, set the `undoSteps` property to a non-zero value.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:floodfill_image/floodfill_image.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Create a FloodfillImage widget with a sample image
  FloodfillImage _floodfillImage = FloodfillImage(
    image: AssetImage('assets/image.png'),
    brushColor: Colors.red,
    brushSize: 10.0,
  );

  // Step 1: Initialize the FloodfillImage widget
  @override
  void initState() {
    super.initState();
  }

  // Step 2: Build the UI with the FloodfillImage widget
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Floodfill Image Example'),
        ),
        body: Center(
          child: _floodfillImage,
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user interacts with the FloodfillImage widget by tapping on the screen.
// 2. The FloodfillImage widget detects the tap event and fills the closed area with the specified color.
// 3. The user can adjust the brush size and color using the optional controls.
// 4. The user can undo and redo their actions using the optional undo and redo buttons.
// 5. The FloodfillImage widget updates the image in real-time as the user interacts with it.

// Summary:
// The FloodfillImage package provides an interactive image editing experience for Flutter developers.
// This example demonstrates how to use the FloodfillImage widget to create a simple image editing app.
// The user can interact with the image by tapping on the screen, adjusting the brush size and color, and using the undo and redo functionality.

```

<-- END_MAIN -->
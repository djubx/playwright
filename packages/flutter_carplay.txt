<-- START_DESCRIPTION -->

# Flutter CarPlay Package
==========================

The `flutter_carplay` package allows developers to integrate their Flutter apps with Apple's CarPlay. This package provides a set of widgets and APIs to create a seamless in-car experience.

## When to Use

Use this package when you want to extend your Flutter app to support CarPlay. This is particularly useful for music, podcast, or audiobook apps that want to provide a safe and convenient in-car experience.

## Features

*   Support for CarPlay connectivity
*   Customizable UI components for CarPlay
*   APIs for controlling playback and navigating content

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up Flutter CarPlay
=============================

## Step 1: Add the Package

Add the `flutter_carplay` package to your `pubspec.yaml` file:

```yml
dependencies:
  flutter_carplay: ^0.0.1
```

## Step 2: Configure CarPlay

Configure CarPlay in your app's `Info.plist` file:

```xml
<key>UIBackgroundModes</key>
<array>
    <string>processing</string>
</array>
<key>UISupportedExternalAccessoryProtocols</key>
<array>
    <string>com.apple.carplay</string>
</array>
```

## Step 3: Initialize CarPlay

Initialize CarPlay in your app's `main` function:

```dart
import 'package:flutter/material.dart';
import 'package:flutter_carplay/flutter_carplay.dart';

void main() {
  runApp(RealFlutter());
}
```

## Step 4: Create a CarPlay UI

Create a CarPlay UI using the `CarPlay` widget:

```dart
class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: CarPlay(
        // CarPlay UI components
      ),
    );
  }
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_carplay/flutter_carplay.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Create a CarPlay instance
  CarPlay _carPlay = CarPlay();

  // Define the CarPlay UI components
  List<CarPlayListItem> _items = [
    CarPlayListItem(
      title: 'Item 1',
      subtitle: 'Subtitle 1',
      artwork: Image.asset('assets/image1.png'),
    ),
    CarPlayListItem(
      title: 'Item 2',
      subtitle: 'Subtitle 2',
      artwork: Image.asset('assets/image2.png'),
    ),
  ];

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: CarPlay(
        // Set the CarPlay UI components
        items: _items,

        // Handle CarPlay events
        onItemSelected: (index) {
          print('Item $index selected');
        },
        onPlayPressed: () {
          print('Play pressed');
        },
        onPausePressed: () {
          print('Pause pressed');
        },
      ),
    );
  }
}

// The application flow is as follows:
// 1. The app initializes CarPlay in the main function.
// 2. The app creates a CarPlay instance and defines the CarPlay UI components.
// 3. The app sets the CarPlay UI components and handles CarPlay events.
// 4. When the user interacts with the CarPlay UI, the app receives the events and handles them accordingly.
// 5. The app updates the CarPlay UI components as needed to reflect the current state of the app.

// In summary, the code flows as follows:
// - Initialize CarPlay
// - Create CarPlay UI components
// - Handle CarPlay events
// - Update CarPlay UI components
```

<-- END_MAIN -->
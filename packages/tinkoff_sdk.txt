```markdown
<!-- START_DESCRIPTION -->
# Tinkoff SDK Flutter Package

The `tinkoff_sdk` Flutter package is a powerful tool designed for integrating Tinkoff's payment services into Flutter applications. This package allows developers to easily implement payment processing features, making it an excellent choice for e-commerce applications, subscription services, or any app that requires payment functionality.

## When to Use This Package
You should consider using the `tinkoff_sdk` package when:
- You need to integrate Tinkoff payment services into your Flutter application.
- You want a straightforward solution for handling payments without dealing with complex backend implementations.
- You are developing an application that requires secure and reliable payment processing.

## Features
- **Easy Integration**: Simplifies the process of integrating Tinkoff payment services into your Flutter app.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS platforms.
- **Secure Transactions**: Ensures that all payment transactions are secure and compliant with industry standards.
- **Customizable UI**: Allows developers to customize the payment interface to match their app's design.

Overall, the `tinkoff_sdk` package is an essential tool for Flutter developers looking to implement payment solutions efficiently and securely.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Tinkoff SDK

In this tutorial, we will walk through the setup process for the `tinkoff_sdk` package and demonstrate how to use it in a Flutter application.

## Installation

To add the `tinkoff_sdk` package to your Flutter project, include it in your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  tinkoff_sdk: ^latest_version
```

Make sure to replace `^latest_version` with the latest version available on [pub.dev](https://pub.dev/packages/tinkoff_sdk).

## Platform-Specific Configuration

### Android
1. Open your `android/app/build.gradle` file and ensure you have the following configurations:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21 // Ensure this is set to at least 21
    }
}
```

2. Add the necessary permissions in your `AndroidManifest.xml`:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
```

### iOS
1. Open your `ios/Runner/Info.plist` file and add the following:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

2. Ensure you have the correct deployment target set in your `ios/Podfile`:

```ruby
platform :ios, '10.0'
```

## Using the Package

To use the `tinkoff_sdk`, you need to initialize it and create a payment request. Hereâ€™s a simple example of how to do this:

```dart
import 'package:flutter/material.dart';
import 'package:tinkoff_sdk/tinkoff_sdk.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Tinkoff Payment Example')),
        body: Center(
          child: ElevatedButton(
            onPressed: () async {
              // Initialize the Tinkoff SDK
              final tinkoffSdk = TinkoffSdk();
              await tinkoffSdk.initialize('YOUR_TERMINAL_KEY');

              // Create a payment request
              final paymentResult = await tinkoffSdk.processPayment(
                amount: 1000, // Amount in kopecks
                orderId: 'order_12345',
                description: 'Payment for order 12345',
              );

              // Handle the payment result
              if (paymentResult.isSuccess) {
                print('Payment successful: ${paymentResult.data}');
              } else {
                print('Payment failed: ${paymentResult.error}');
              }
            },
            child: Text('Pay Now'),
          ),
        ),
      ),
    );
  }
}
```

In this example, we initialize the Tinkoff SDK, create a payment request, and handle the result of the payment process.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Tinkoff SDK in Flutter

```dart
import 'package:flutter/material.dart';
import 'package:tinkoff_sdk/tinkoff_sdk.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Tinkoff Payment Example')),
        body: Center(
          child: ElevatedButton(
            onPressed: () async {
              // Initialize the Tinkoff SDK with your terminal key
              final tinkoffSdk = TinkoffSdk();
              await tinkoffSdk.initialize('YOUR_TERMINAL_KEY');

              // Create a payment request with the specified amount and order ID
              final paymentResult = await tinkoffSdk.processPayment(
                amount: 1000, // Amount in kopecks (10.00 RUB)
                orderId: 'order_12345', // Unique order ID
                description: 'Payment for order 12345', // Description of the payment
              );

              // Check if the payment was successful
              if (paymentResult.isSuccess) {
                // If successful, print the payment data
                print('Payment successful: ${paymentResult.data}');
              } else {
                // If failed, print the error message
                print('Payment failed: ${paymentResult.error}');
              }
            },
            child: Text('Pay Now'), // Button to initiate payment
          ),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with a MaterialApp containing a Scaffold.
// 2. An AppBar is displayed with the title 'Tinkoff Payment Example'.
// 3. The body contains a Center widget with an ElevatedButton.
// 4. When the button is pressed, the Tinkoff SDK is initialized with the terminal key.
// 5. A payment request is created with a specified amount, order ID, and description.
// 6. The result of the payment process is checked.
// 7. If the payment is successful, the success message and data are printed.
// 8. If the payment fails, the error message is printed.
```
<!-- END_MAIN -->
```

This structured blog post provides a comprehensive overview of the `tinkoff_sdk` Flutter package, including its features, setup instructions, and a complete example with detailed comments explaining the application flow.
<-- START_DESCRIPTION -->

# Introduction to astro_refresh_indicator

The `astro_refresh_indicator` package is a Flutter library that provides a customizable and easy-to-use refresh indicator for your Flutter applications. It allows you to add a pull-to-refresh feature to your lists, grids, and other scrollable widgets.

## When to use astro_refresh_indicator

You can use `astro_refresh_indicator` in any scenario where you need to refresh the content of a scrollable widget, such as:

* Refreshing a list of items from a remote API
* Updating a grid of images or other media
* Reloading a scrollable widget after a user interaction

## Features

The `astro_refresh_indicator` package provides the following features:

* Customizable refresh indicator styles
* Support for both pull-to-refresh and swipe-to-refresh gestures
* Ability to specify a custom refresh callback
* Compatibility with both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting up astro_refresh_indicator

To use the `astro_refresh_indicator` package in your Flutter application, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  astro_refresh_indicator: ^1.0.0
```
2. Run `flutter pub get` to install the package.
3. Import the package in your Dart file:
```dart
import 'package:astro_refresh_indicator/astro_refresh_indicator.dart';
```
4. Create a `RealFlutter` class that extends `StatefulWidget`:
```dart
class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}
```
5. In the `_RealFlutterState` class, create a `RefreshIndicator` widget and pass a `onRefresh` callback:
```dart
class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: RefreshIndicator(
        onRefresh: () async {
          // Your refresh logic here
        },
        child: ListView.builder(
          itemCount: 10,
          itemBuilder: (context, index) {
            return ListTile(
              title: Text('Item $index'),
            );
          },
        ),
      ),
    );
  }
}
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:astro_refresh_indicator/astro_refresh_indicator.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Astro Refresh Indicator Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  List<String> _items = [];

  @override
  void initState() {
    super.initState();
    _loadItems();
  }

  Future<void> _loadItems() async {
    // Simulate a network request
    await Future.delayed(Duration(seconds: 2));
    setState(() {
      _items = List.generate(10, (index) => 'Item $index');
    });
  }

  Future<void> _refreshItems() async {
    // Simulate a network request
    await Future.delayed(Duration(seconds: 2));
    setState(() {
      _items = List.generate(10, (index) => 'New Item $index');
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Astro Refresh Indicator Demo'),
      ),
      body: RefreshIndicator(
        onRefresh: _refreshItems,
        child: ListView.builder(
          itemCount: _items.length,
          itemBuilder: (context, index) {
            return ListTile(
              title: Text(_items[index]),
            );
          },
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user launches the app and the `RealFlutter` widget is displayed.
// 2. The `_loadItems` function is called in the `initState` method to simulate a network request and load the initial list of items.
// 3. The user pulls down on the list to trigger the refresh indicator.
// 4. The `_refreshItems` function is called to simulate a network request and refresh the list of items.
// 5. The new list of items is displayed to the user.
```

<-- END_MAIN -->
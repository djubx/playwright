<-- START_DESCRIPTION -->

# Geoflutterfire Package Overview
The geoflutterfire package is a Flutter package that provides a simple and efficient way to handle geolocation and geofencing in Flutter applications. It allows developers to easily retrieve the device's current location, monitor location changes, and create geofences to trigger events when the device enters or exits a specific area.

## Key Features

*   Get the device's current location
*   Monitor location changes
*   Create geofences to trigger events when the device enters or exits a specific area
*   Support for both Android and iOS platforms

## When to Use

The geoflutterfire package is useful in a variety of scenarios, such as:

*   Location-based services (e.g., food delivery, ride-sharing, etc.)
*   Geofencing applications (e.g., triggering events when a user enters or exits a specific area)
*   Location-based games

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Geoflutterfire Package

To use the geoflutterfire package, follow these steps:

### Step 1: Add the Package to Your Flutter Project

Add the geoflutterfire package to your Flutter project by adding the following line to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  geoflutterfire: ^3.0.3
```

Then, run `flutter pub get` to get the package.

### Step 2: Import the Package

Import the geoflutterfire package in your Dart file:

```dart
import 'package:geoflutterfire/geoflutterfire.dart';
```

### Step 3: Initialize the Geoflutterfire Package

Initialize the geoflutterfire package by creating an instance of the `Geoflutterfire` class:

```dart
Geoflutterfire geo = Geoflutterfire();
```

### Step 4: Request Location Permissions

Request location permissions using the `requestPermission` method:

```dart
geo.requestPermission();
```

### Step 5: Get the Device's Current Location

Get the device's current location using the `getCurrentPosition` method:

```dart
geo.getCurrentPosition().then((position) {
  print('Current position: ${position.latitude}, ${position.longitude}');
});
```

### Step 6: Monitor Location Changes

Monitor location changes using the `listen` method:

```dart
geo.listen((position) {
  print('Current position: ${position.latitude}, ${position.longitude}');
});
```

### Step 7: Create a Geofence

Create a geofence using the `setGeofence` method:

```dart
geo.setGeofence(
  Geofence(
    id: 'my_geofence',
    latitude: 37.7749,
    longitude: -122.4194,
    radius: 1000,
  ),
);
```

### Platform-Specific Details

*   Android: Add the following lines to your `AndroidManifest.xml` file:

    ```xml
<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
<uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
```

*   iOS: Add the following lines to your `Info.plist` file:

    ```xml
<key>NSLocationWhenInUseUsageDescription</key>
<string>This app needs access to location to work properly</string>
<key>NSLocationAlwaysAndWhenInUseUsageDescription</key>
<string>This app needs access to location to work properly</string>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:geoflutterfire/geoflutterfire.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  Geoflutterfire geo = Geoflutterfire();
  String _currentPosition = '';

  @override
  void initState() {
    super.initState();
    geo.requestPermission();
    geo.getCurrentPosition().then((position) {
      setState(() {
        _currentPosition = 'Current position: ${position.latitude}, ${position.longitude}';
      });
    });
    geo.listen((position) {
      setState(() {
        _currentPosition = 'Current position: ${position.latitude}, ${position.longitude}';
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Geoflutterfire Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(_currentPosition),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                geo.setGeofence(
                  Geofence(
                    id: 'my_geofence',
                    latitude: 37.7749,
                    longitude: -122.4194,
                    radius: 1000,
                  ),
                );
              },
              child: Text('Create Geofence'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and is prompted to grant location permissions.
// 2. Once permissions are granted, the app gets the device's current location using the `getCurrentPosition` method.
// 3. The app then listens for location changes using the `listen` method.
// 4. When the user presses the "Create Geofence" button, the app creates a geofence using the `setGeofence` method.
// 5. The app then updates the UI with the current position and geofence information.

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Geoflutterfire Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}
```

<-- END_MAIN -->
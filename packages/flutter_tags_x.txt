<-- START_DESCRIPTION -->

# Flutter Tags X Package Overview
=====================================

The `flutter_tags_x` package is a powerful and flexible library for creating and managing tags in Flutter applications. It provides a simple and intuitive way to add, remove, and customize tags, making it an ideal solution for a wide range of use cases.

### When to Use This Package

* When you need to create a tagging system for your app, such as for categorizing items or adding keywords.
* When you want to provide users with a way to filter or search content based on specific tags.
* When you need a customizable and flexible tagging solution that can be easily integrated into your existing app.

### Key Features

* Support for single and multiple tag selection
* Customizable tag appearance and behavior
* Easy tag creation and removal
* Support for tag filtering and searching

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the Flutter Tags X Package
=====================================================

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_tags_x: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:flutter_tags_x/flutter_tags_x.dart';
```
### Step 3: Create a TagController

Create a `TagController` instance to manage your tags:
```dart
TagController _tagController = TagController();
```
### Step 4: Add Tags

Add tags to the controller using the `addTag` method:
```dart
_tagController.addTag('Tag 1');
_tagController.addTag('Tag 2');
```
### Step 5: Display the Tags

Use the `Tags` widget to display the tags:
```dart
Tags(
  controller: _tagController,
  itemCount: _tagController.length,
  itemBuilder: (context, index) {
    return TagItem(
      tag: _tagController.getTag(index),
      onPressed: () {
        // Handle tag press
      },
    );
  },
)
```
### Platform-Specific Details

* On Android, you may need to add the following line to your `AndroidManifest.xml` file to enable the package:
```xml
<application
  ...
  android:hardwareAccelerated="true"
  ...
>
```
* On iOS, you may need to add the following line to your `Info.plist` file to enable the package:
```xml
<key>UIViewControllerBasedStatusBarAppearance</key>
<false/>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_tags_x/flutter_tags_x.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Tags X Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  TagController _tagController = TagController();

  @override
  void initState() {
    super.initState();
    _tagController.addTag('Tag 1');
    _tagController.addTag('Tag 2');
    _tagController.addTag('Tag 3');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Tags X Demo'),
      ),
      body: Center(
        child: Tags(
          controller: _tagController,
          itemCount: _tagController.length,
          itemBuilder: (context, index) {
            return TagItem(
              tag: _tagController.getTag(index),
              onPressed: () {
                // Handle tag press
                print('Tag pressed: ${_tagController.getTag(index)}');
              },
            );
          },
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          // Add new tag
          _tagController.addTag('New Tag');
          setState(() {});
        },
        tooltip: 'Add new tag',
        child: Icon(Icons.add),
      ),
    );
  }
}

// Application flow:
// 1. The app starts and the `MyApp` widget is built.
// 2. The `MyHomePage` widget is built and the `TagController` is initialized.
// 3. The `TagController` adds three initial tags.
// 4. The `Tags` widget is built and displays the three initial tags.
// 5. When a tag is pressed, the `onPressed` callback is called and prints the tag text.
// 6. When the floating action button is pressed, a new tag is added to the `TagController`.
// 7. The `setState` method is called to rebuild the `MyHomePage` widget and display the new tag.
```

<-- END_MAIN -->
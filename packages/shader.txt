<-- START_DESCRIPTION -->

**Shader Package Overview**
==========================

The Shader package is a powerful tool for creating visually stunning graphics in Flutter applications. It provides a simple and efficient way to apply complex graphics effects to widgets, making it ideal for creating games, animations, and other graphics-intensive applications.

**Key Features**

*   Support for custom shaders written in GLSL (OpenGL Shading Language)
*   Easy integration with Flutter widgets
*   High-performance rendering
*   Compatible with both Android and iOS platforms

**When to Use**

The Shader package is perfect for creating applications that require complex graphics effects, such as:

*   Games with custom graphics and animations
*   Interactive simulations with realistic graphics
*   Augmented reality (AR) and virtual reality (VR) experiences
*   Graphics-intensive animations and transitions

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setup and Usage**
=====================

### Step 1: Add the Shader Package to Your Project

Add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  shader: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Shader Package

Import the Shader package in your Dart file:

```dart
import 'package:shader/shader.dart';
```

### Step 3: Create a Custom Shader

Create a new file called `custom_shader.glsl` and add your custom shader code:

```glsl
void main() {
  // Your custom shader code here
}
```

### Step 4: Load the Custom Shader

Load the custom shader in your Dart file:

```dart
Future<void> main() async {
  final shader = await Shader.load('custom_shader.glsl');
  // Use the shader
}
```

### Platform-Specific Details

*   **Android:** Make sure to add the following line to your `AndroidManifest.xml` file:

    ```xml
<uses-feature android:glEsVersion="0x00020000" android:required="true" />
```

*   **iOS:** Add the following line to your `Info.plist` file:

    ```xml
<key>UIRequiredDeviceCapabilities</key>
<array>
  <string>opengles-2</string>
</array>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:shader/shader.dart';

void main() async {
  final shader = await Shader.load('custom_shader.glsl');

  runApp(
    RealFlutter(
      shader: shader,
    ),
  );
}

class RealFlutter extends StatefulWidget {
  final Shader shader;

  RealFlutter({required this.shader});

  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    // Create a new CustomPaint widget
    return CustomPaint(
      // Use the custom shader as the painter
      painter: CustomShaderPainter(widget.shader),
      // Set the size of the CustomPaint widget
      size: Size(400, 400),
    );
  }
}

class CustomShaderPainter extends CustomPainter {
  final Shader shader;

  CustomShaderPainter(this.shader);

  @override
  void paint(Canvas canvas, Size size) {
    // Create a new Paint object
    final paint = Paint()
      // Set the shader as the paint's shader
      ..shader = shader;

    // Draw a rectangle using the paint
    canvas.drawRect(
      Rect.fromLTWH(0, 0, size.width, size.height),
      paint,
    );
  }

  @override
  bool shouldRepaint(CustomPainter oldDelegate) {
    return false;
  }
}

// The application flow is as follows:
// 1. The main function loads the custom shader.
// 2. The main function creates a new RealFlutter widget and passes the custom shader to it.
// 3. The RealFlutter widget creates a new CustomPaint widget and uses the custom shader as the painter.
// 4. The CustomPaint widget sets the size of the CustomPaint widget.
// 5. The CustomShaderPainter class creates a new Paint object and sets the custom shader as the paint's shader.
// 6. The CustomShaderPainter class draws a rectangle using the paint.
// 7. The CustomShaderPainter class returns false for shouldRepaint, indicating that the CustomPaint widget does not need to be repainted.

// In summary, the code flows as follows:
// - Load the custom shader.
// - Create a new RealFlutter widget and pass the custom shader to it.
// - Create a new CustomPaint widget and use the custom shader as the painter.
// - Draw a rectangle using the custom shader.
```

<-- END_MAIN -->
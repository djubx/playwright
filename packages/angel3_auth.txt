<-- START_DESCRIPTION -->

# Angel3 Auth Flutter Package
================================

The `angel3_auth` Flutter package provides a simple and efficient way to handle authentication in your Flutter applications. It supports multiple authentication providers, including Google, Facebook, and Twitter, and allows you to easily switch between them.

### When to Use This Package

This package is ideal for applications that require authentication, such as:

* Social media apps
* E-commerce apps
* Productivity apps
* Games

### Features

* Supports multiple authentication providers (Google, Facebook, Twitter)
* Easy to switch between providers
* Handles authentication flow and token management
* Provides a simple API for authenticating and authorizing users

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `angel3_auth` package, follow these steps:

### Step 1: Add the Package to Your Pubspec

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  angel3_auth: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:angel3_auth/angel3_auth.dart';
```
### Step 3: Configure the Package

Configure the package by creating an instance of the `Angel3Auth` class:
```dart
Angel3Auth auth = Angel3Auth(
  // Your authentication provider (e.g. Google, Facebook, Twitter)
  provider: AuthProvider.google,
  // Your client ID
  clientId: 'YOUR_CLIENT_ID',
  // Your client secret
  clientSecret: 'YOUR_CLIENT_SECRET',
  // Your redirect URI
  redirectUri: 'YOUR_REDIRECT_URI',
);
```
### Platform-Specific Details

#### Android

To use the package on Android, you need to add the following lines to your `AndroidManifest.xml` file:
```xml
<activity
  android:name="com.example.RealFlutter"
  android:exported="true" >
  <intent-filter>
    <action android:name="android.intent.action.VIEW" />
    <category android:name="android.intent.category.DEFAULT" />
    <category android:name="android.intent.category.BROWSABLE" />
    <data android:scheme="YOUR_SCHEME" android:host="YOUR_HOST" />
  </intent-filter>
</activity>
```
#### iOS

To use the package on iOS, you need to add the following lines to your `Info.plist` file:
```xml
<key>CFBundleURLTypes</key>
<array>
  <dict>
    <key>CFBundleURLSchemes</key>
    <array>
      <string>YOUR_SCHEME</string>
    </array>
    <key>CFBundleURLName</key>
    <string>YOUR_HOST</string>
  </dict>
</array>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:angel3_auth/angel3_auth.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  Angel3Auth _auth;

  @override
  void initState() {
    super.initState();
    _auth = Angel3Auth(
      provider: AuthProvider.google,
      clientId: 'YOUR_CLIENT_ID',
      clientSecret: 'YOUR_CLIENT_SECRET',
      redirectUri: 'YOUR_REDIRECT_URI',
    );
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Real Flutter',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Real Flutter'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Text('Welcome to Real Flutter'),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _login,
                child: Text('Login'),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _logout,
                child: Text('Logout'),
              ),
            ],
          ),
        ),
      ),
    );
  }

  void _login() async {
    // Start the authentication flow
    final authResult = await _auth.startAuthentication();

    // Check if the authentication was successful
    if (authResult.isSuccess) {
      // Get the access token
      final accessToken = authResult.accessToken;

      // Use the access token to authenticate the user
      final user = await _auth.authenticate(accessToken);

      // Check if the user is authenticated
      if (user != null) {
        // Show a success message
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Login successful')),
        );
      } else {
        // Show an error message
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Login failed')),
        );
      }
    } else {
      // Show an error message
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Login failed')),
      );
    }
  }

  void _logout() async {
    // Revoke the access token
    await _auth.revokeAccessToken();

    // Show a success message
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Logout successful')),
    );
  }
}

// The application flow is as follows:
// 1. The user clicks the login button.
// 2. The authentication flow is started using the Angel3Auth instance.
// 3. The user is redirected to the authentication provider's login page.
// 4. The user enters their credentials and submits the form.
// 5. The authentication provider redirects the user back to the app with an authorization code.
// 6. The app exchanges the authorization code for an access token.
// 7. The app uses the access token to authenticate the user.
// 8. If the user is authenticated, a success message is shown.
// 9. If the user clicks the logout button, the access token is revoked and a success message is shown.

// This code demonstrates the use of the Angel3Auth package to authenticate users in a Flutter app.
// It shows how to start the authentication flow, handle the redirect, and authenticate the user using the access token.
// It also shows how to revoke the access token when the user logs out.
```

<-- END_MAIN -->
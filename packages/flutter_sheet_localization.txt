<-- START_DESCRIPTION -->

# Flutter Sheet Localization Package
=====================================

The `flutter_sheet_localization` package is a Flutter library that simplifies the process of localizing your app by providing a simple and efficient way to manage translations. It allows you to store translations in a JSON file and easily access them in your app.

## When to Use This Package
---------------------------

This package is ideal for apps that need to support multiple languages. It's also useful for apps that need to display text that changes based on the user's location or preferences.

## Features
------------

*   Supports multiple languages and regions
*   Stores translations in a JSON file for easy management
*   Provides a simple API for accessing translations in your app
*   Supports placeholders and formatting for dynamic text

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Package
=============================================

## Step 1: Add the Package to Your App
--------------------------------------

Add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  flutter_sheet_localization: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Step 2: Create a JSON File for Translations
---------------------------------------------

Create a new file called `translations.json` in the `assets` directory of your project. This file will store all the translations for your app.

```json
{
  "en": {
    "hello": "Hello",
    "goodbye": "Goodbye"
  },
  "fr": {
    "hello": "Bonjour",
    "goodbye": "Au revoir"
  }
}
```

## Step 3: Initialize the Package
----------------------------------

In your `main` function, initialize the package by calling `SheetLocalization.init` and passing in the path to your `translations.json` file.

```dart
import 'package:flutter/material.dart';
import 'package:flutter_sheet_localization/flutter_sheet_localization.dart';

void main() async {
  await SheetLocalization.init(
    filePath: 'assets/translations.json',
  );
  runApp(MyApp());
}
```

## Step 4: Use the Package in Your App
--------------------------------------

To access a translation, call `SheetLocalization.t` and pass in the key for the translation you want to access.

```dart
Text(SheetLocalization.t('hello'));
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_sheet_localization/flutter_sheet_localization.dart';

void main() async {
  // Initialize the package
  await SheetLocalization.init(
    filePath: 'assets/translations.json',
  );
  
  // Run the app
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Create a Material app
    return MaterialApp(
      title: 'Flutter Sheet Localization Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  Widget build(BuildContext context) {
    // Create a Scaffold
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Sheet Localization Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            // Display a translation
            Text(SheetLocalization.t('hello')),
            SizedBox(height: 20),
            // Display another translation
            Text(SheetLocalization.t('goodbye')),
          ],
        ),
      ),
    );
  }
}
```

// This is the main entry point of the app.
// The app is initialized with the translations file.
// The app is then run with the Material app.
// The home page is created with a Scaffold.
// The Scaffold has an app bar and a body.
// The body displays two translations.

// To change the language, you can call `SheetLocalization.changeLanguage` and pass in the new language code.
// For example: `SheetLocalization.changeLanguage('fr');`

// This will change the language to French and update all the translations in the app.

// You can also use placeholders and formatting in your translations.
// For example: `SheetLocalization.t('hello_name', {'name': 'John'});`

// This will replace the placeholder `{{name}}` with the value `John` in the translation.

// You can also use multiple placeholders and formatting in your translations.
// For example: `SheetLocalization.t('hello_name_age', {'name': 'John', 'age': 30});`

// This will replace the placeholders `{{name}}` and `{{age}}` with the values `John` and `30` in the translation.

<-- END_MAIN -->
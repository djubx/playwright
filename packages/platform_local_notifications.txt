<-- START_DESCRIPTION -->

# Platform Local Notifications Package
The `platform_local_notifications` package is a Flutter package that allows you to display local notifications on both Android and iOS platforms. This package is useful when you want to notify the user of an event or reminder without relying on a remote server.

## Features
- Display local notifications with custom title, message, and icon
- Support for both Android and iOS platforms
- Ability to schedule notifications for a specific time or interval
- Optional vibration and sound effects

## When to Use
- When you want to remind the user of an upcoming event or appointment
- When you want to notify the user of a new message or update
- When you want to provide a local alert or warning to the user

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
To use the `platform_local_notifications` package, you need to add it to your `pubspec.yaml` file:
```yml
dependencies:
  flutter:
    sdk: flutter
  platform_local_notifications: ^1.0.0
```
Then, run `flutter pub get` to install the package.

## Android Configuration
For Android, you need to add the following configuration to your `AndroidManifest.xml` file:
```xml
<application
  ...
  android:icon="@mipmap/ic_launcher"
  android:label="@string/app_name"
  android:theme="@style/AppTheme"
  android:allowBackup="true"
  android:supportsRtl="true"
  android:hardwareAccelerated="true"
  android:usesCleartextTraffic="true"
  tools:targetApi="28"
  tools:ignore="UnusedAttribute">
  ...
  <activity
    android:name=".MainActivity"
    android:launchMode="singleTop"
    android:theme="@style/LaunchTheme"
    android:configChanges="orientation|keyboardHidden|keyboard|screenSize|smallestScreenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode"
    android:hardwareAccelerated="true"
    android:windowSoftInputMode="adjustResize">
    ...
  </activity>
  ...
</application>
```
## iOS Configuration
For iOS, you need to add the following configuration to your `Info.plist` file:
```xml
<key>UIBackgroundModes</key>
<array>
  <string>remote-notification</string>
</array>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->
```dart
import 'package:flutter/material.dart';
import 'package:platform_local_notifications/platform_local_notifications.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Local Notifications Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _notifications = FlutterLocalNotificationsPlugin();

  Future<void> _showNotification() async {
    // Create a new notification
    var androidPlatformChannelSpecifics = AndroidNotificationDetails(
      'channel_id',
      'channel_name',
      'channel_description',
      importance: Importance.max,
      priority: Priority.high,
    );
    var iOSPlatformChannelSpecifics = IOSNotificationDetails();
    var platformChannelSpecifics = NotificationDetails(
      android: androidPlatformChannelSpecifics,
      iOS: iOSPlatformChannelSpecifics,
    );

    // Show the notification
    await _notifications.show(
      0,
      'Hello, World!',
      'This is a local notification.',
      platformChannelSpecifics,
    );
  }

  Future<void> _scheduleNotification() async {
    // Create a new notification
    var androidPlatformChannelSpecifics = AndroidNotificationDetails(
      'channel_id',
      'channel_name',
      'channel_description',
      importance: Importance.max,
      priority: Priority.high,
    );
    var iOSPlatformChannelSpecifics = IOSNotificationDetails();
    var platformChannelSpecifics = NotificationDetails(
      android: androidPlatformChannelSpecifics,
      iOS: iOSPlatformChannelSpecifics,
    );

    // Schedule the notification for 5 seconds from now
    await _notifications.schedule(
      0,
      'Hello, World!',
      'This is a scheduled local notification.',
      DateTime.now().add(Duration(seconds: 5)),
      platformChannelSpecifics,
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Local Notifications Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: _showNotification,
              child: Text('Show Notification'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _scheduleNotification,
              child: Text('Schedule Notification'),
            ),
          ],
        ),
      ),
    );
  }
}
```
// This is the main entry point of the app.
// The app uses the `MaterialApp` widget to define the app's title and theme.
// The `MyHomePage` widget is used to define the app's home page.

// The `MyHomePage` widget uses the `Scaffold` widget to define the app's layout.
// The `AppBar` widget is used to define the app's title bar.
// The `Center` widget is used to center the app's content.

// The app has two buttons: "Show Notification" and "Schedule Notification".
// When the "Show Notification" button is pressed, the `_showNotification` function is called.
// This function creates a new notification and shows it immediately.

// When the "Schedule Notification" button is pressed, the `_scheduleNotification` function is called.
// This function creates a new notification and schedules it for 5 seconds from now.

// The app uses the `FlutterLocalNotificationsPlugin` to create and show notifications.
// The plugin provides a simple way to create and show notifications on both Android and iOS platforms.

<-- END_MAIN -->
<-- START_DESCRIPTION -->

Background Location Package
==========================

The `background_location` package is a Flutter plugin that allows you to access device location in the background. This package is useful when you need to track user location even when the app is not running in the foreground.

Features
--------

*   Supports both Android and iOS platforms
*   Allows you to configure the interval at which location updates are received
*   Provides options to handle location updates when the app is in the background or terminated

When to Use
------------

This package is useful in scenarios where you need to track user location continuously, such as:

*   Ride-hailing apps
*   Food delivery apps
*   Fitness tracking apps
*   Location-based games

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Configuration
-----------------------

### Step 1: Add the Package to Your Project

Add the `background_location` package to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  background_location: ^0.8.1
```

Then, run `flutter pub get` to install the package.

### Step 2: Configure Platform-Specific Settings

#### Android

Add the following permissions to your `AndroidManifest.xml` file:

```xml
<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
<uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
<uses-permission android:name="android.permission.ACCESS_BACKGROUND_LOCATION" />
```

#### iOS

Add the following lines to your `Info.plist` file:

```xml
<key>NSLocationWhenInUseUsageDescription</key>
<string>This app needs access to location when open.</string>
<key>NSLocationAlwaysUsageDescription</key>
<string>This app needs access to location always.</string>
<key>NSLocationAlwaysAndWhenInUseUsageDescription</key>
<string>This app needs access to location always and when in use.</string>
```

### Step 3: Initialize the Package

Import the package and initialize it in your Dart file:

```dart
import 'package:background_location/background_location.dart';

class RealFlutter {
  Future<void> initialize() async {
    await BackgroundLocation.initialize(
      android: AndroidSettings(
        interval: 10000, // 10 seconds
        distanceFilter: 10, // 10 meters
      ),
      ios: IOSSettings(
        accuracy: LocationAccuracy.high,
        distanceFilter: 10, // 10 meters
      ),
    );
  }
}
```

### Step 4: Start and Stop Location Updates

Use the `startLocationUpdates` and `stopLocationUpdates` methods to control location updates:

```dart
class RealFlutter {
  Future<void> startLocationUpdates() async {
    await BackgroundLocation.startLocationUpdates((location) {
      print('Location update: $location');
    });
  }

  Future<void> stopLocationUpdates() async {
    await BackgroundLocation.stopLocationUpdates();
  }
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:background_location/background_location.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Background Location Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final RealFlutter _realFlutter = RealFlutter();

  @override
  void initState() {
    super.initState();
    _realFlutter.initialize();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Background Location Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: _realFlutter.startLocationUpdates,
              child: Text('Start Location Updates'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _realFlutter.stopLocationUpdates,
              child: Text('Stop Location Updates'),
            ),
          ],
        ),
      ),
    );
  }
}

class RealFlutter {
  Future<void> initialize() async {
    // Initialize the background location package
    await BackgroundLocation.initialize(
      android: AndroidSettings(
        interval: 10000, // 10 seconds
        distanceFilter: 10, // 10 meters
      ),
      ios: IOSSettings(
        accuracy: LocationAccuracy.high,
        distanceFilter: 10, // 10 meters
      ),
    );
  }

  Future<void> startLocationUpdates() async {
    // Start location updates and print the location to the console
    await BackgroundLocation.startLocationUpdates((location) {
      print('Location update: $location');
    });
  }

  Future<void> stopLocationUpdates() async {
    // Stop location updates
    await BackgroundLocation.stopLocationUpdates();
  }
}

// Application flow:
// 1. The app initializes the background location package when it starts.
// 2. The user can start location updates by pressing the "Start Location Updates" button.
// 3. The app starts location updates and prints the location to the console every 10 seconds.
// 4. The user can stop location updates by pressing the "Stop Location Updates" button.
// 5. The app stops location updates.

// Summary:
// This app demonstrates how to use the background location package to get location updates in the background.
// The app initializes the package, starts and stops location updates, and prints the location to the console.
```

<-- END_MAIN -->
```markdown
<!-- START_DESCRIPTION -->
# ShuftiPro SDK Flutter Package

The **shuftipro_sdk** Flutter package is a powerful tool designed for integrating identity verification and KYC (Know Your Customer) processes into Flutter applications. This package allows developers to leverage ShuftiPro's services, which include document verification, facial recognition, and more, ensuring compliance with regulatory requirements while enhancing user experience.

## When to Use This Package
- **Identity Verification**: When you need to verify user identities for applications in finance, healthcare, or any sector requiring stringent KYC processes.
- **Document Verification**: For applications that require users to upload documents for verification, such as passports, ID cards, or driver's licenses.
- **Facial Recognition**: When implementing biometric authentication or verification processes.

## Key Features
- **Comprehensive KYC Solutions**: Supports various identity verification methods, including document and facial recognition.
- **Real-time Processing**: Provides instant verification results, enhancing user experience.
- **Cross-platform Support**: Works seamlessly on both Android and iOS platforms.
- **Customizable UI**: Allows developers to customize the verification interface to match their application's branding.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the ShuftiPro SDK

## Installation
To add the **shuftipro_sdk** package to your Flutter project, include it in your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  shuftipro_sdk: ^latest_version
```

Run `flutter pub get` to install the package.

## Platform-Specific Configuration

### Android
1. Open `android/app/build.gradle` and ensure you have the following permissions:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21 // Ensure this is set to at least 21
    }
}
```

2. Add the required permissions in `AndroidManifest.xml`:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
<uses-permission android:name="android.permission.CAMERA"/>
```

### iOS
1. Open `ios/Runner/Info.plist` and add the following permissions:

```xml
<key>NSCameraUsageDescription</key>
<string>We need access to the camera for identity verification.</string>
<key>NSPhotoLibraryUsageDescription</key>
<string>We need access to your photo library for document uploads.</string>
```

## Using the Package
To use the ShuftiPro SDK, you need to initialize it and handle the verification process. Below is a basic example of how to set it up in your Flutter application.

```dart
import 'package:flutter/material.dart';
import 'package:shuftipro_sdk/shuftipro_sdk.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('ShuftiPro Example')),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              // Start the verification process
              ShuftiPro.startVerification(
                clientId: 'YOUR_CLIENT_ID',
                secretKey: 'YOUR_SECRET_KEY',
                onSuccess: (response) {
                  // Handle successful verification
                  print('Verification successful: $response');
                },
                onError: (error) {
                  // Handle error
                  print('Verification error: $error');
                },
              );
            },
            child: Text('Verify Identity'),
          ),
        ),
      ),
    );
  }
}
```

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of ShuftiPro SDK in Flutter

```dart
import 'package:flutter/material.dart';
import 'package:shuftipro_sdk/shuftipro_sdk.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('ShuftiPro Example')),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              // Start the verification process
              ShuftiPro.startVerification(
                clientId: 'YOUR_CLIENT_ID', // Replace with your ShuftiPro client ID
                secretKey: 'YOUR_SECRET_KEY', // Replace with your ShuftiPro secret key
                onSuccess: (response) {
                  // Handle successful verification
                  print('Verification successful: $response');
                },
                onError: (error) {
                  // Handle error
                  print('Verification error: $error');
                },
              );
            },
            child: Text('Verify Identity'), // Button to trigger verification
          ),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the RealFlutter widget.
// 2. A MaterialApp is created with a Scaffold containing an AppBar and a Center widget.
// 3. Inside the Center widget, an ElevatedButton is displayed.
// 4. When the button is pressed, the ShuftiPro.startVerification method is called.
// 5. The client ID and secret key are provided to authenticate the request.
// 6. The onSuccess callback handles successful verification, printing the response.
// 7. The onError callback handles any errors that occur during the verification process.
```
<!-- END_MAIN -->
```

### Summary
In this blog post, we explored the **shuftipro_sdk** Flutter package, detailing its features, installation process, and usage. We provided a complete example of a Flutter application that integrates identity verification using ShuftiPro. The application flow was explained step-by-step through comments in the code, making it easy for developers to understand how to implement this package in their own projects.
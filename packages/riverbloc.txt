<-- START_DESCRIPTION -->

Riverbloc: A State Management Package for Flutter
=====================================================

Riverbloc is a popular state management package for Flutter that helps you manage the state of your application in a predictable and scalable way. It's built on top of the BLoC (Business Logic Component) pattern, which separates the business logic of your application from the UI.

When to Use Riverbloc
--------------------

Riverbloc is a good choice for complex applications with multiple features and a large codebase. It's particularly useful when you need to manage multiple states and side effects in your application.

Features of Riverbloc
--------------------

*   Predictable and scalable state management
*   Separation of business logic from UI
*   Support for multiple states and side effects
*   Easy debugging and testing

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setting Up Riverbloc
--------------------

To use Riverbloc in your Flutter application, you need to add the `riverbloc` package to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  riverbloc: ^2.0.2
```

Then, run `flutter pub get` to install the package.

Creating a BLoC
----------------

To create a BLoC, you need to create a class that extends `Bloc`:

```dart
import 'package:riverbloc/riverbloc.dart';

class RealFlutterBloc extends Bloc<RealFlutterEvent, RealFlutterState> {
  RealFlutterBloc() : super(RealFlutterInitialState()) {
    on<RealFlutterLoadDataEvent>((event, emit) async {
      // Load data from API or database
      final data = await loadData();
      emit(RealFlutterLoadedState(data));
    });
  }
}
```

In this example, `RealFlutterBloc` is a BLoC that manages the state of a list of data. It has an initial state of `RealFlutterInitialState`, and it listens for `RealFlutterLoadDataEvent` events. When it receives a `RealFlutterLoadDataEvent`, it loads the data from an API or database and emits a `RealFlutterLoadedState` with the loaded data.

Using the BLoC in a Widget
---------------------------

To use the BLoC in a widget, you need to wrap the widget with a `BlocProvider`:

```dart
import 'package:flutter/material.dart';
import 'package:riverbloc/riverbloc.dart';

class RealFlutterWidget extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return BlocProvider(
      create: (context) => RealFlutterBloc(),
      child: RealFlutterChildWidget(),
    );
  }
}
```

In this example, `RealFlutterWidget` is a widget that uses the `RealFlutterBloc` BLoC. It creates a `BlocProvider` with the `RealFlutterBloc` BLoC and wraps the `RealFlutterChildWidget` with it.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:riverbloc/riverbloc.dart';

// Define the events
abstract class RealFlutterEvent extends Equatable {
  const RealFlutterEvent();

  @override
  List<Object> get props => [];
}

class RealFlutterLoadDataEvent extends RealFlutterEvent {}

// Define the states
abstract class RealFlutterState extends Equatable {
  const RealFlutterState();

  @override
  List<Object> get props => [];
}

class RealFlutterInitialState extends RealFlutterState {}

class RealFlutterLoadedState extends RealFlutterState {
  final List<String> data;

  const RealFlutterLoadedState(this.data);

  @override
  List<Object> get props => [data];
}

// Define the BLoC
class RealFlutterBloc extends Bloc<RealFlutterEvent, RealFlutterState> {
  RealFlutterBloc() : super(RealFlutterInitialState()) {
    // Listen for events and emit states
    on<RealFlutterLoadDataEvent>((event, emit) async {
      // Load data from API or database
      final data = await loadData();
      emit(RealFlutterLoadedState(data));
    });
  }

  // Load data from API or database
  Future<List<String>> loadData() async {
    // Simulate loading data
    await Future.delayed(Duration(seconds: 2));
    return ['Item 1', 'Item 2', 'Item 3'];
  }
}

// Define the widget
class RealFlutterWidget extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Create a BlocProvider with the RealFlutterBloc BLoC
    return BlocProvider(
      create: (context) => RealFlutterBloc(),
      child: RealFlutterChildWidget(),
    );
  }
}

// Define the child widget
class RealFlutterChildWidget extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Use the BlocBuilder to rebuild the widget when the state changes
    return BlocBuilder<RealFlutterBloc, RealFlutterState>(
      builder: (context, state) {
        // Check the state and display the data
        if (state is RealFlutterLoadedState) {
          return ListView.builder(
            itemCount: state.data.length,
            itemBuilder: (context, index) {
              return ListTile(
                title: Text(state.data[index]),
              );
            },
          );
        } else {
          return Center(
            child: CircularProgressIndicator(),
          );
        }
      },
    );
  }
}

// Run the app
void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Real Flutter',
      home: RealFlutterWidget(),
    );
  }
}
```

// The app starts by creating a MaterialApp with a RealFlutterWidget as the home page.
// The RealFlutterWidget creates a BlocProvider with a RealFlutterBloc BLoC.
// The RealFlutterBloc BLoC listens for events and emits states.
// The RealFlutterChildWidget uses a BlocBuilder to rebuild the widget when the state changes.
// When the state is a RealFlutterLoadedState, the widget displays a ListView with the loaded data.
// When the state is not a RealFlutterLoadedState, the widget displays a CircularProgressIndicator.

<-- END_MAIN -->
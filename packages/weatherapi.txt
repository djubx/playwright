```markdown
<!-- START_DESCRIPTION -->
# WeatherAPI Flutter Package

The **WeatherAPI** Flutter package is a powerful tool for developers looking to integrate weather data into their applications. It provides a simple and efficient way to access weather information from the WeatherAPI service, allowing you to display current weather conditions, forecasts, and more.

## When to Use This Package
You should consider using the WeatherAPI package when:
- You need to display real-time weather data in your Flutter application.
- You want to provide users with weather forecasts for specific locations.
- You are building applications related to travel, outdoor activities, or any service that benefits from weather information.

## Features
- **Current Weather Data**: Fetch real-time weather information for any location.
- **Forecast Data**: Access weather forecasts for the upcoming days.
- **Location Search**: Easily search for weather data by city name or geographic coordinates.
- **Customizable Requests**: Tailor your API requests to include specific data points.

Overall, the WeatherAPI package simplifies the process of integrating weather data into your Flutter applications, making it a valuable resource for developers.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using WeatherAPI

## Installation
To get started with the WeatherAPI package, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  weatherapi: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run `flutter pub get` to install the package.

## Platform-Specific Configuration

### Android
1. Open `android/app/build.gradle`.
2. Ensure that you have the following permissions in your `AndroidManifest.xml` file:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
```

### iOS
1. Open `ios/Runner/Info.plist`.
2. Add the following key to allow network requests:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

## Using the Package
To use the WeatherAPI package, you will need to create an instance of the main class, `RealFlutter`, and call its methods to fetch weather data.

### Example Usage
Here’s a simple example of how to use the package to get current weather data:

```dart
import 'package:flutter/material.dart';
import 'package:weatherapi/weatherapi.dart';

class RealFlutter {
  final WeatherAPI weatherAPI;

  RealFlutter(String apiKey) : weatherAPI = WeatherAPI(apiKey: apiKey);

  Future<WeatherData> getCurrentWeather(String location) async {
    return await weatherAPI.getCurrentWeather(location);
  }
}
```

This code initializes the WeatherAPI with your API key and fetches the current weather for a specified location.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of WeatherAPI in Flutter

```dart
import 'package:flutter/material.dart';
import 'package:weatherapi/weatherapi.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Weather App',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: WeatherHome(),
    );
  }
}

class WeatherHome extends StatefulWidget {
  @override
  _WeatherHomeState createState() => _WeatherHomeState();
}

class _WeatherHomeState extends State<WeatherHome> {
  final String apiKey = 'YOUR_API_KEY'; // Replace with your WeatherAPI key
  final RealFlutter realFlutter;
  WeatherData? weatherData;

  _WeatherHomeState() : realFlutter = RealFlutter(apiKey);

  @override
  void initState() {
    super.initState();
    fetchWeather(); // Fetch weather data when the widget is initialized
  }

  Future<void> fetchWeather() async {
    // Fetch current weather data for a specific location
    weatherData = await realFlutter.getCurrentWeather('London');
    setState(() {}); // Update the UI with the fetched data
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Current Weather'),
      ),
      body: weatherData == null
          ? Center(child: CircularProgressIndicator()) // Show loading indicator while fetching data
          : Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Text(
                  'Location: ${weatherData!.location}',
                  style: TextStyle(fontSize: 24),
                ),
                Text(
                  'Temperature: ${weatherData!.temperature}°C',
                  style: TextStyle(fontSize: 24),
                ),
                Text(
                  'Condition: ${weatherData!.condition}',
                  style: TextStyle(fontSize: 24),
                ),
              ],
            ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the MyApp widget.
// 2. MyApp builds a MaterialApp with a title and theme, and sets WeatherHome as the home widget.
// 3. WeatherHome is a stateful widget that initializes the RealFlutter class with the API key.
// 4. In the initState method, fetchWeather is called to retrieve the current weather data.
// 5. fetchWeather uses the RealFlutter instance to get weather data for 'London'.
// 6. Once the data is fetched, setState is called to update the UI.
// 7. The build method displays a loading indicator while data is being fetched.
// 8. After fetching, it displays the location, temperature, and weather condition in the UI.
```

<!-- END_MAIN -->
```

This structured blog post provides a comprehensive overview of the WeatherAPI Flutter package, guiding developers through its features, setup, and practical usage with a complete example.
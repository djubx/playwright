```markdown
<!-- START_DESCRIPTION -->
# Easy Localization Generator: A Comprehensive Overview

The `easy_localization_generator` package is a powerful tool designed to simplify the process of localizing Flutter applications. It works in conjunction with the `easy_localization` package, allowing developers to generate localization files automatically from their Dart code. This package is particularly useful for projects that require support for multiple languages, as it streamlines the management of localization strings.

## When to Use This Package
- **Multi-Language Support**: If your application targets users from different linguistic backgrounds, this package helps manage translations efficiently.
- **Dynamic Localization**: When your app's content changes frequently, and you need to keep localization files updated without manual intervention.
- **Large Projects**: In larger applications with numerous strings, this package can save time and reduce errors in localization.

## Key Features
- **Automatic Generation**: Automatically generates localization files from your Dart code.
- **Integration with Easy Localization**: Seamlessly integrates with the `easy_localization` package for easy implementation.
- **Customizable**: Allows customization of the generated files to fit your project’s structure.
- **Support for Multiple Languages**: Easily manage translations for various languages in a single project.

By leveraging the `easy_localization_generator`, developers can focus more on building features rather than managing localization files manually.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up Easy Localization Generator

In this tutorial, we will walk through the setup process for the `easy_localization_generator` package and demonstrate how to use it in a Flutter project.

## Step 1: Add Dependencies
First, you need to add the necessary dependencies to your `pubspec.yaml` file. Include both `easy_localization` and `easy_localization_generator`:

```yaml
dependencies:
  flutter:
    sdk: flutter
  easy_localization: ^3.0.0

dev_dependencies:
  easy_localization_generator: ^3.0.0
  build_runner: ^2.0.0
```

## Step 2: Create Localization Files
Create a directory named `assets/translations` in your project. Inside this directory, create JSON files for each language you want to support. For example:

- `en.json` for English
- `es.json` for Spanish

Example content for `en.json`:
```json
{
  "hello": "Hello",
  "welcome": "Welcome to our application"
}
```

Example content for `es.json`:
```json
{
  "hello": "Hola",
  "welcome": "Bienvenido a nuestra aplicación"
}
```

## Step 3: Configure Build Runner
To generate localization files, you need to run the build runner. Open your terminal and execute the following command:

```bash
flutter pub run build_runner build
```

This command will generate the necessary localization files based on your Dart code.

## Step 4: Platform-Specific Configuration
### Android
Ensure that your `android/app/build.gradle` file includes the following:

```groovy
android {
    ...
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}
```

### iOS
For iOS, ensure that your `ios/Runner/Info.plist` includes the following:

```xml
<key>CFBundleLocalizations</key>
<array>
    <string>en</string>
    <string>es</string>
</array>
```

## Step 5: Using the Package
Now that everything is set up, you can use the localization in your Flutter app. Wrap your `MaterialApp` with `EasyLocalization` and specify the supported locales.

```dart
import 'package:flutter/material.dart';
import 'package:easy_localization/easy_localization.dart';

void main() {
  runApp(
    EasyLocalization(
      supportedLocales: [Locale('en'), Locale('es')],
      path: 'assets/translations', // Path to your translation files
      child: MyApp(),
    ),
  );
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: HomeScreen(),
      localizationsDelegates: context.localizationDelegates,
      supportedLocales: context.supportedLocales,
      locale: context.locale,
    );
  }
}

class HomeScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('hello'.tr()), // Using the localization key
      ),
      body: Center(
        child: Text('welcome'.tr()), // Using the localization key
      ),
    );
  }
}
```

With these steps, you have successfully set up and used the `easy_localization_generator` package in your Flutter application.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Easy Localization Generator

```dart
import 'package:flutter/material.dart';
import 'package:easy_localization/easy_localization.dart';

void main() {
  runApp(
    EasyLocalization(
      supportedLocales: [Locale('en'), Locale('es')], // Supported languages
      path: 'assets/translations', // Path to translation files
      child: RealFlutter(), // Main application widget
    ),
  );
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: HomeScreen(), // Home screen of the app
      localizationsDelegates: context.localizationDelegates, // Localization delegates
      supportedLocales: context.supportedLocales, // Supported locales
      locale: context.locale, // Current locale
    );
  }
}

class HomeScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('hello'.tr()), // Localized title
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text('welcome'.tr()), // Localized welcome message
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                // Change locale to Spanish
                context.setLocale(Locale('es'));
              },
              child: Text('Switch to Spanish'), // Button to switch language
            ),
            ElevatedButton(
              onPressed: () {
                // Change locale to English
                context.setLocale(Locale('en'));
              },
              child: Text('Switch to English'), // Button to switch language
            ),
          ],
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function initializes the app and wraps it with EasyLocalization.
// 2. The RealFlutter class sets up the MaterialApp with localization support.
// 3. The HomeScreen displays localized text and buttons to switch languages.
// 4. When a button is pressed, the app changes the locale, updating the displayed text accordingly.
```
<!-- END_MAIN -->
```

### Summary
In this blog post, we explored the `easy_localization_generator` package, detailing its features, setup process, and providing a complete example of its usage in a Flutter application. The application allows users to switch between English and Spanish, demonstrating how easy it is to implement localization with this package. By following the steps outlined, developers can efficiently manage translations and enhance their apps' accessibility for a global audience.
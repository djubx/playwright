<-- START_DESCRIPTION -->

# Firebase UI OAuth Flutter Package
=====================================

The `firebase_ui_oauth` Flutter package provides a simple and convenient way to authenticate users with Firebase using OAuth providers such as Google, Facebook, and Twitter. This package is built on top of the Firebase Authentication SDK and provides a set of pre-built UI components to handle the authentication flow.

## When to Use This Package
---------------------------

You should use this package when you want to integrate Firebase Authentication with OAuth providers in your Flutter app. This package is particularly useful when you want to provide a seamless authentication experience for your users without having to build the authentication flow from scratch.

## Features
------------

*   Supports multiple OAuth providers: Google, Facebook, Twitter, and more
*   Pre-built UI components for authentication flow
*   Easy integration with Firebase Authentication SDK
*   Supports both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `firebase_ui_oauth` package, you need to add it to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  firebase_ui_oauth: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Platform-Specific Setup
---------------------------

### Android

To use this package on Android, you need to add the following configuration to your `android/app/build.gradle` file:

```groovy
android {
  // ...
  defaultConfig {
    // ...
    manifestPlaceholders = [
      'appPackageName': 'com.example.your_app_package_name'
    ]
  }
}
```

### iOS

To use this package on iOS, you need to add the following configuration to your `ios/Runner/Info.plist` file:

```xml
<key>CFBundleURLTypes</key>
<array>
  <dict>
    <key>CFBundleTypeRole</key>
    <string>Editor</string>
    <key>CFBundleURLSchemes</key>
    <array>
      <string>com.example.your_app_bundle_id</string>
    </array>
  </dict>
</array>
```

## Using the Package
---------------------

To use the package, you need to import it in your Dart file:

```dart
import 'package:firebase_ui_oauth/firebase_ui_oauth.dart';
```

Then, you can use the `FirebaseUiOAuth` class to authenticate users:

```dart
FirebaseUiOAuth(
  providers: [
    GoogleAuthProvider(),
    FacebookAuthProvider(),
    TwitterAuthProvider(),
  ],
  onCompleted: (credential) {
    // Authentication completed
  },
  onError: (error) {
    // Authentication error
  },
)
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:firebase_ui_oauth/firebase_ui_oauth.dart';
import 'package:firebase_auth/firebase_auth.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Firebase UI OAuth Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: Scaffold(
        appBar: AppBar(
          title: Text('Firebase UI OAuth Demo'),
        ),
        body: Center(
          child: FirebaseUiOAuth(
            providers: [
              GoogleAuthProvider(),
              FacebookAuthProvider(),
              TwitterAuthProvider(),
            ],
            onCompleted: (credential) {
              // Authentication completed
              print('Authentication completed');
              print('Credential: $credential');
              // Use the credential to authenticate with Firebase
              FirebaseAuth.instance.signInWithCredential(credential);
            },
            onError: (error) {
              // Authentication error
              print('Authentication error');
              print('Error: $error');
            },
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user clicks on one of the authentication buttons (e.g. Google, Facebook, Twitter).
// 2. The FirebaseUiOAuth widget handles the authentication flow and redirects the user to the authentication page.
// 3. After the user completes the authentication, the FirebaseUiOAuth widget returns the authentication credential.
// 4. The onCompleted callback is called with the authentication credential.
// 5. The credential is used to authenticate with Firebase using the FirebaseAuth.instance.signInWithCredential method.
// 6. If the authentication is successful, the user is signed in to the app.
// 7. If there is an error during the authentication, the onError callback is called with the error.

// In summary, this code provides a simple and convenient way to authenticate users with Firebase using OAuth providers.
// The FirebaseUiOAuth widget handles the authentication flow and provides a set of pre-built UI components to handle the authentication.
```

<-- END_MAIN -->
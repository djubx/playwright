<-- START_DESCRIPTION -->

# http_proxy Flutter Package
================================

The `http_proxy` package is a Flutter library that allows you to proxy HTTP requests. It provides a simple way to intercept and modify HTTP requests and responses.

## When to Use
--------------

You can use this package in various scenarios, such as:

*   Debugging: To inspect and modify HTTP requests and responses for debugging purposes.
*   Testing: To mock HTTP responses for testing purposes.
*   Security: To intercept and modify HTTP requests and responses for security purposes.

## Features
------------

The `http_proxy` package provides the following features:

*   HTTP request and response interception
*   HTTP request and response modification
*   Support for HTTP and HTTPS protocols

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

## Setup
--------

To use the `http_proxy` package, you need to add it to your `pubspec.yaml` file:

```yml
dependencies:
  http_proxy: ^1.0.0
```

Then, run `flutter pub get` to get the package.

## Usage
-----

To use the `http_proxy` package, you need to create an instance of the `HttpProxy` class:

```dart
import 'package:http_proxy/http_proxy.dart';

class RealFlutter {
  Future<void> main() async {
    final httpProxy = HttpProxy();
    // Use httpProxy to intercept and modify HTTP requests and responses
  }
}
```

### Android Configuration
-------------------------

On Android, you need to add the following configuration to your `AndroidManifest.xml` file:

```xml
<application
    ...
    android:networkSecurityConfig="@xml/network_security_config"
    ...>
</application>
```

Then, create a `network_security_config.xml` file in the `res/xml` directory:

```xml
<?xml version="1.0" encoding="utf-8"?>
<network-security-config>
    <base-config cleartextTrafficPermitted="true">
        <trust-anchors>
            <certificates src="system" />
        </trust-anchors>
    </base-config>
</network-security-config>
```

### iOS Configuration
---------------------

On iOS, you need to add the following configuration to your `Info.plist` file:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:http_proxy/http_proxy.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final httpProxy = HttpProxy();

  @override
  void initState() {
    super.initState();
    // Initialize the httpProxy instance
    httpProxy.init();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('http_proxy Example'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () async {
            // Use httpProxy to intercept and modify HTTP requests and responses
            final response = await httpProxy.get('https://example.com');
            print(response.body);
          },
          child: Text('Send HTTP Request'),
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user opens the app and clicks the "Send HTTP Request" button.
// 2. The httpProxy instance is used to send an HTTP GET request to https://example.com.
// 3. The httpProxy instance intercepts the HTTP request and response.
// 4. The response body is printed to the console.
// 5. The user can view the response body in the console.

// Final summary:
// The http_proxy package is used to intercept and modify HTTP requests and responses.
// The RealFlutter class initializes the httpProxy instance and uses it to send an HTTP GET request.
// The httpProxy instance intercepts the HTTP request and response, and the response body is printed to the console.
```

<-- END_MAIN -->
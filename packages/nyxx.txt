<-- START_DESCRIPTION -->

**nyxx: A Powerful Discord API Wrapper for Flutter**
=====================================================

The nyxx package is a Discord API wrapper for Flutter, allowing developers to create Discord bots and interact with the Discord API. It provides a simple and intuitive API for sending and receiving messages, managing guilds and channels, and more.

**When to Use nyxx**
--------------------

*   Creating a Discord bot that needs to interact with the Discord API
*   Building a Flutter app that integrates with Discord
*   Developing a game or application that uses Discord for authentication or communication

**Features of nyxx**
--------------------

*   Simple and intuitive API for interacting with the Discord API
*   Support for sending and receiving messages, including embeds and files
*   Guild and channel management, including creating and deleting channels
*   User and member management, including getting user information and adding roles
*   Event handling, including message creation and deletion events
*   Support for Discord's rich presence and activity system

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setting Up nyxx**
------------------

To use nyxx, you'll need to add it to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  nyxx: ^1.0.0
```

Then, run `flutter pub get` to install the package.

**Using nyxx**
--------------

To use nyxx, you'll need to create a `Nyxx` instance and login to the Discord API:

```dart
import 'package:nyxx/nyxx.dart';

void main() async {
  final bot = Nyxx('YOUR_BOT_TOKEN', GatewayIntents.allUnprivileged());
  await bot.login();
}
```

Replace `YOUR_BOT_TOKEN` with your bot's token from the Discord Developer Portal.

**Platform-Specific Details**
---------------------------

nyxx works on both Android and iOS, but there are some platform-specific details to keep in mind:

*   On Android, you'll need to add the `INTERNET` permission to your `AndroidManifest.xml` file:

    ```xml
<uses-permission android:name="android.permission.INTERNET" />
```
*   On iOS, you'll need to add the `NSAppTransportSecurity` key to your `Info.plist` file:

    ```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```

**Required Configurations and Optimizations**
------------------------------------------

To get the most out of nyxx, you'll want to configure it to use the correct gateway intents and presence:

```dart
final bot = Nyxx('YOUR_BOT_TOKEN', GatewayIntents.allUnprivileged());
bot.presence = PresenceBuilder()
  ..status = PresenceStatus.online
  ..activity = ActivityBuilder()
    ..name = 'nyxx'
    ..type = ActivityType.playing;
```

This will set the bot's presence to online and its activity to playing nyxx.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:nyxx/nyxx.dart';

void main() async {
  final bot = Nyxx('YOUR_BOT_TOKEN', GatewayIntents.allUnprivileged());
  await bot.login();

  // Set the bot's presence to online and its activity to playing nyxx
  bot.presence = PresenceBuilder()
    ..status = PresenceStatus.online
    ..activity = ActivityBuilder()
      ..name = 'nyxx'
      ..type = ActivityType.playing;

  // Listen for message creation events
  bot.eventsWs.onMessageReceived.listen((event) {
    // Check if the message is from a guild
    if (event.message.guild != null) {
      // Send a response back to the channel
      event.message.channel.sendMessage(MessageBuilder()
        ..content = 'Hello, ${event.message.author.username}!');
    }
  });

  // Create a new guild
  final guild = await bot.http.createGuild('My Guild');

  // Create a new channel in the guild
  final channel = await guild.createChannel('my-channel', ChannelType.text);

  // Send a message to the channel
  await channel.sendMessage(MessageBuilder()
    ..content = 'Hello, world!');

  // Get the bot's user information
  final user = await bot.http.getUser(bot.self.id);

  // Print the user's username
  print(user.username);

  // Run the Flutter app
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'nyxx Example',
      home: Scaffold(
        appBar: AppBar(
          title: Text('nyxx Example'),
        ),
        body: Center(
          child: Text('Hello, world!'),
        ),
      ),
    );
  }
}
```

// This code creates a Discord bot using the nyxx package and sets up a Flutter app.
// The bot logs in to the Discord API and sets its presence to online.
// It then listens for message creation events and responds to messages from guilds.
// The bot also creates a new guild and channel, and sends a message to the channel.
// Finally, the bot gets its user information and prints its username.
// The Flutter app displays a simple "Hello, world!" message.

// The code flow is as follows:
// 1. The bot logs in to the Discord API.
// 2. The bot sets its presence to online.
// 3. The bot listens for message creation events.
// 4. When a message is received, the bot checks if it's from a guild.
// 5. If it is, the bot sends a response back to the channel.
// 6. The bot creates a new guild and channel.
// 7. The bot sends a message to the channel.
// 8. The bot gets its user information and prints its username.
// 9. The Flutter app displays a simple "Hello, world!" message.

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Flutter Load Kit Package Overview
=====================================

The `flutter_load_kit` package is a powerful tool for managing loading states in Flutter applications. It provides a simple and efficient way to handle loading animations, error messages, and data presentation. With this package, you can easily create a seamless user experience by displaying loading indicators while data is being fetched or processed.

### When to Use This Package

This package is ideal for applications that require data fetching, processing, or any other operation that takes time to complete. It's perfect for scenarios such as:

* Fetching data from APIs or databases
* Processing large datasets
* Handling network requests
* Displaying loading animations during app initialization

### Key Features

* Easy-to-use API for managing loading states
* Customizable loading animations and error messages
* Support for multiple loading states (e.g., loading, error, success)
* Compatible with both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the Flutter Load Kit Package
=====================================================

### Step 1: Add the Package to Your Project

Add the following dependency to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_load_kit: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:flutter_load_kit/flutter_load_kit.dart';
```
### Step 3: Create a LoadKit Instance

Create a `LoadKit` instance and pass it to your widget tree:
```dart
LoadKit _loadKit = LoadKit();

@override
Widget build(BuildContext context) {
  return LoadKitProvider(
    loadKit: _loadKit,
    child: YourWidget(),
  );
}
```
### Step 4: Use the LoadKit Instance

Use the `_loadKit` instance to manage loading states in your widgets:
```dart
_loadKit.loading(() {
  // Code to fetch data or perform an operation
}).error((error) {
  // Code to handle errors
}).success((data) {
  // Code to display data
});
```
### Platform-Specific Details

* Android: No additional configuration required.
* iOS: Add the following code to your `Info.plist` file to enable loading animations:
```xml
<key>UIActivityIndicatorViewStyle</key>
<string>UIActivityIndicatorViewStyleGray</string>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_load_kit/flutter_load_kit.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Load Kit Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  LoadKit _loadKit = LoadKit();

  @override
  Widget build(BuildContext context) {
    return LoadKitProvider(
      loadKit: _loadKit,
      child: Scaffold(
        appBar: AppBar(
          title: Text('Flutter Load Kit Demo'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              ElevatedButton(
                onPressed: () {
                  _loadKit.loading(() {
                    // Simulate data fetching
                    Future.delayed(Duration(seconds: 2), () {
                      _loadKit.success('Data fetched successfully!');
                    });
                  }).error((error) {
                    // Handle errors
                  });
                },
                child: Text('Fetch Data'),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  _loadKit.loading(() {
                    // Simulate data processing
                    Future.delayed(Duration(seconds: 2), () {
                      _loadKit.error('Error processing data!');
                    });
                  });
                },
                child: Text('Process Data'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user clicks the "Fetch Data" button.
// 2. The _loadKit instance starts loading and simulates data fetching.
// 3. After 2 seconds, the data is fetched successfully and the _loadKit instance displays a success message.
// 4. The user clicks the "Process Data" button.
// 5. The _loadKit instance starts loading and simulates data processing.
// 6. After 2 seconds, an error occurs while processing the data and the _loadKit instance displays an error message.

// Summary:
// The Flutter Load Kit package provides a simple and efficient way to manage loading states in Flutter applications.
// It allows you to display loading animations, error messages, and data presentation with ease.
// This example demonstrates how to use the package to fetch data and process data, handling both success and error scenarios.
```

<-- END_MAIN -->
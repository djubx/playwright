<-- START_DESCRIPTION -->

# Zoomable Image Cropper Package
The `zoomable_image_cropper` package is a powerful Flutter library that allows users to crop images with zooming capabilities. It's perfect for applications that require precise image editing, such as social media, photo editing, or e-commerce apps.

## Key Features

* Zoom in and out of images
* Crop images to specific aspect ratios
* Support for both Android and iOS platforms
* Customizable UI and layout

## When to Use

Use the `zoomable_image_cropper` package when you need to provide users with advanced image editing capabilities, such as:

* Profile picture editing
* Product image editing
* Social media image posting

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage

## Step 1: Add the Package to Your Pubspec.yaml File

```yml
dependencies:
  flutter:
    sdk: flutter
  zoomable_image_cropper: ^1.0.0
```

## Step 2: Import the Package in Your Dart File

```dart
import 'package:zoomable_image_cropper/zoomable_image_cropper.dart';
```

## Step 3: Use the `ZoomableImageCropper` Widget

```dart
ZoomableImageCropper(
  image: Image.asset('assets/image.jpg'),
  aspectRatio: 16 / 9,
  onCrop: (croppedImage) {
    // Handle the cropped image
  },
)
```

## Platform-Specific Details

* Android: Make sure to add the `android.permission.WRITE_EXTERNAL_STORAGE` permission to your AndroidManifest.xml file.
* iOS: Add the `NSPhotoLibraryUsageDescription` key to your Info.plist file.

## Configurations and Optimizations

* You can customize the UI and layout of the `ZoomableImageCropper` widget by using the `toolbar` and `footer` properties.
* To optimize performance, you can use the `cacheWidth` and `cacheHeight` properties to reduce the image size.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:zoomable_image_cropper/zoomable_image_cropper.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Zoomable Image Cropper Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  File _image;

  Future<void> _cropImage() async {
    final croppedImage = await ZoomableImageCropper.cropImage(
      image: Image.asset('assets/image.jpg'),
      aspectRatio: 16 / 9,
    );
    setState(() {
      _image = croppedImage;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Zoomable Image Cropper Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            _image != null
                ? Image.file(_image)
                : Text('No image selected'),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _cropImage,
              child: Text('Crop Image'),
            ),
          ],
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user opens the app and sees a button to crop an image.
// 2. When the user clicks the button, the `ZoomableImageCropper` widget is displayed.
// 3. The user can zoom in and out of the image and crop it to a specific aspect ratio.
// 4. When the user confirms the crop, the cropped image is displayed on the screen.
// 5. The user can repeat the process by clicking the crop button again.

// Summary:
// The `ZoomableImageCropper` package provides a powerful and customizable image cropping solution for Flutter apps.
// This demo app showcases the package's capabilities and provides a simple example of how to use it.

```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# onepref Flutter Package
The onepref Flutter package is a simple and efficient way to store and manage application preferences. It provides a straightforward API for storing and retrieving data, making it an ideal solution for managing app settings, user preferences, and other types of data that need to be persisted.

## Features
- Lightweight and easy to use
- Supports storing and retrieving various data types, including strings, integers, booleans, and more
- Works on both Android and iOS platforms

## When to Use
The onepref package is perfect for storing and managing small amounts of data, such as:

- App settings (e.g., theme, language, font size)
- User preferences (e.g., notification settings, units of measurement)
- Cache data (e.g., API responses, images)

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up onepref
To use the onepref package in your Flutter project, follow these steps:

1. Add the onepref package to your `pubspec.yaml` file:
```yml
dependencies:
  onepref: ^1.0.0
```
2. Run `flutter pub get` to install the package.
3. Import the onepref package in your Dart file:
```dart
import 'package:onepref/onepref.dart';
```

## Platform-Specific Details
- On Android, the onepref package uses the `SharedPreferences` API to store data.
- On iOS, the onepref package uses the `NSUserDefaults` API to store data.

## Configurations and Optimizations
- Make sure to handle errors and exceptions properly when using the onepref package.
- Use the `await` keyword when storing or retrieving data to ensure asynchronous operations are completed.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:onepref/onepref.dart';

void main() async {
  // Initialize the onepref package
  await OnePref.init();

  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  String _storedValue = '';

  @override
  void initState() {
    super.initState();
    // Retrieve the stored value when the app starts
    _loadStoredValue();
  }

  Future<void> _loadStoredValue() async {
    // Use the onepref package to retrieve the stored value
    String storedValue = await OnePref.getString('stored_value');
    setState(() {
      _storedValue = storedValue;
    });
  }

  Future<void> _storeValue() async {
    // Use the onepref package to store a new value
    await OnePref.setString('stored_value', 'New Value');
    _loadStoredValue();
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('OnePref Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Text(_storedValue),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _storeValue,
                child: Text('Store New Value'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow:
// 1. The app initializes the onepref package in the main function.
// 2. The RealFlutter widget is created and retrieves the stored value when it starts.
// 3. The stored value is displayed on the screen.
// 4. When the user presses the "Store New Value" button, a new value is stored using the onepref package.
// 5. The stored value is updated on the screen.

// Final summary: This example demonstrates how to use the onepref package to store and retrieve values in a Flutter app. The app initializes the package, retrieves the stored value, and updates the value when the user presses a button.
```

<-- END_MAIN -->
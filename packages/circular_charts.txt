# Circular Charts Flutter Package

<!-- START_DESCRIPTION -->
## Description

The `circular_charts` Flutter package is a powerful tool for creating visually appealing circular charts, such as pie charts and donut charts, in your Flutter applications. This package is particularly useful for data visualization, allowing developers to represent data in a way that is easy to understand and aesthetically pleasing. 

### When to Use

You might consider using the `circular_charts` package in scenarios such as:
- Displaying statistical data in a visually engaging format.
- Creating dashboards that require quick insights into data distributions.
- Enhancing user interfaces with interactive and animated charts.

### Features

- **Multiple Chart Types**: Supports various circular chart types, including pie charts and donut charts.
- **Customizable Appearance**: Offers extensive customization options for colors, sizes, and animations.
- **Interactive Elements**: Allows for user interaction, such as tapping on segments to reveal more information.
- **Responsive Design**: Adapts to different screen sizes and orientations, ensuring a consistent user experience.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
## Tutorial

### Installation

To get started with the `circular_charts` package, you need to add it to your `pubspec.yaml` file. Open your Flutter project and include the following dependency:

```yaml
dependencies:
  flutter:
    sdk: flutter
  circular_charts: ^latest_version
```

Make sure to replace `^latest_version` with the most recent version of the package available on [pub.dev](https://pub.dev/packages/circular_charts).

### Platform-Specific Configuration

#### Android

For Android, ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
        ...
    }
}
```

#### iOS

For iOS, you may need to set the platform version in your `ios/Podfile`:

```ruby
platform :ios, '10.0'
```

### Basic Usage

To use the `circular_charts` package, you can create a simple pie chart as follows:

1. Import the package in your Dart file:

```dart
import 'package:circular_charts/circular_charts.dart';
```

2. Create a widget that utilizes the `CircularChart` class:

```dart
class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Circular Charts Example')),
      body: Center(
        child: CircularChart(
          data: [
            CircularChartData(value: 30, color: Colors.blue),
            CircularChartData(value: 70, color: Colors.red),
          ],
          totalValue: 100,
        ),
      ),
    );
  }
}
```

This code snippet creates a simple pie chart with two segments, representing 30% and 70% of the total.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
## Complete Example

```dart
import 'package:flutter/material.dart';
import 'package:circular_charts/circular_charts.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Circular Charts Example',
      home: Scaffold(
        appBar: AppBar(title: Text('Circular Charts Example')),
        body: Center(
          child: CircularChart(
            // Define the data for the circular chart
            data: [
              CircularChartData(value: 30, color: Colors.blue), // First segment
              CircularChartData(value: 70, color: Colors.red),  // Second segment
            ],
            totalValue: 100, // Total value for the chart
            // Optional: Add a title to the chart
            title: 'Data Distribution',
          ),
        ),
      ),
    );
  }
}

// The main function initializes the app and runs the RealFlutter widget.
// The RealFlutter widget builds a MaterialApp with a title and a home Scaffold.
// Inside the Scaffold, we have an AppBar with the title "Circular Charts Example".
// The body of the Scaffold contains a Center widget that centers its child.
// The child is a CircularChart widget, which takes a list of CircularChartData objects.
// Each CircularChartData object represents a segment of the chart with a value and color.
// The totalValue parameter defines the total value of the chart, which is 100 in this case.
// The chart visually represents the data distribution with two segments: 30% in blue and 70% in red.
```

<!-- END_MAIN -->

## Summary

In this blog post, we explored the `circular_charts` Flutter package, which provides an easy way to create circular charts for data visualization. We covered the installation process, platform-specific configurations, and provided a complete example of how to implement a simple pie chart in a Flutter application. The code demonstrates how to set up the chart, define its data, and customize its appearance. This package is a great choice for developers looking to enhance their applications with interactive and visually appealing data representations.
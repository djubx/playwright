```markdown
<-- START_DESCRIPTION -->

# Flutter Screen Lock Package Overview

The `flutter_screen_lock` package is a versatile and easy-to-use Flutter package designed to implement screen lock functionality in your Flutter applications. This package is particularly useful for apps that require an additional layer of security, such as banking apps, personal data management apps, or any application where sensitive information is handled.

## Features

- **Customizable UI**: The package allows you to customize the appearance of the lock screen to match your app's theme.
- **Biometric Authentication**: Supports fingerprint and face recognition for unlocking, providing a seamless user experience.
- **Passcode Lock**: Offers a traditional passcode lock mechanism with customizable passcode length.
- **Timeout Lock**: Automatically locks the screen after a specified period of inactivity.
- **Easy Integration**: Simple API for quick integration into existing Flutter projects.

## When to Use

- **Security**: When your app handles sensitive data and requires an additional security layer.
- **User Authentication**: To provide users with a familiar and secure way to authenticate using biometrics or passcodes.
- **Session Management**: To manage user sessions and ensure that the app is locked after a period of inactivity.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the Flutter Screen Lock Package

In this tutorial, we will walk through the process of setting up the `flutter_screen_lock` package in a Flutter project and demonstrate how to use its features effectively.

## Setup

### Step 1: Add Dependency

Add the `flutter_screen_lock` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  flutter_screen_lock: ^3.0.0
```

Run `flutter pub get` to install the package.

### Step 2: Platform-Specific Configuration

#### Android

For Android, ensure that your `AndroidManifest.xml` includes the necessary permissions for biometric authentication:

```xml
<uses-permission android:name="android.permission.USE_BIOMETRIC" />
```

#### iOS

For iOS, update your `Info.plist` to include the necessary permissions:

```xml
<key>NSFaceIDUsageDescription</key>
<string>We use Face ID to secure your data.</string>
```

### Step 3: Basic Usage

To use the `flutter_screen_lock` package, import it into your Dart file:

```dart
import 'package:flutter_screen_lock/flutter_screen_lock.dart';
```

## Implementing Screen Lock

### Basic Passcode Lock

To implement a basic passcode lock, use the `screenLock` function:

```dart
screenLock(
  context: context,
  correctString: '1234',
);
```

### Biometric Authentication

To enable biometric authentication, configure the `screenLock` function as follows:

```dart
screenLock(
  context: context,
  correctString: '1234',
  canUseBiometrics: true,
);
```

### Customizing the UI

You can customize the lock screen's appearance by providing additional parameters to the `screenLock` function, such as `title`, `confirmTitle`, and `cancelButton`.

<-- END_TUTORIAL -->

<-- MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_screen_lock/flutter_screen_lock.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Screen Lock Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: HomeScreen(),
    );
  }
}

class HomeScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Home Screen'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Trigger the screen lock when the button is pressed
            screenLock(
              context: context,
              correctString: '1234', // Set the correct passcode
              canUseBiometrics: true, // Enable biometric authentication
              onUnlocked: () {
                // Action to perform when the screen is unlocked
                Navigator.of(context).pop();
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text('Unlocked!')),
                );
              },
            );
          },
          child: Text('Lock Screen'),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The application starts with the `RealFlutter` widget, which sets up the MaterialApp.
// 2. The `HomeScreen` widget is displayed, featuring a button labeled "Lock Screen".
// 3. When the button is pressed, the `screenLock` function is called.
// 4. The `screenLock` function displays a lock screen where the user can enter a passcode or use biometrics.
// 5. If the correct passcode is entered or biometric authentication is successful, the `onUnlocked` callback is triggered.
// 6. The `onUnlocked` callback dismisses the lock screen and shows a SnackBar indicating that the screen is unlocked.

```

<-- END_MAIN -->
```
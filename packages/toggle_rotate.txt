<-- START_DESCRIPTION -->

# Toggle Rotate Flutter Package
================================

The `toggle_rotate` Flutter package provides a simple and efficient way to toggle the rotation of a widget. This package is useful when you want to rotate a widget by a certain angle, and then rotate it back to its original position.

## Features

* Rotate a widget by a certain angle
* Toggle the rotation of a widget
* Support for both clockwise and counter-clockwise rotation

## Examples

* Rotate a button by 90 degrees when pressed
* Create a rotating loading animation
* Rotate a widget based on user input

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

## Step 1: Add the package to your pubspec.yaml file

```yml
dependencies:
  toggle_rotate: ^1.0.0
```

## Step 2: Import the package in your Dart file

```dart
import 'package:toggle_rotate/toggle_rotate.dart';
```

## Step 3: Create a ToggleRotate widget

```dart
ToggleRotate(
  child: Container(
    width: 100,
    height: 100,
    color: Colors.red,
  ),
  angle: 90,
)
```

## Step 4: Toggle the rotation

```dart
ToggleRotate(
  child: Container(
    width: 100,
    height: 100,
    color: Colors.red,
  ),
  angle: 90,
  toggle: true,
)
```

## Platform-Specific Details

* Android: No additional configuration required
* iOS: No additional configuration required

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:toggle_rotate/toggle_rotate.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Toggle Rotate Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  bool _toggle = false;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Toggle Rotate Demo'),
      ),
      body: Center(
        child: ToggleRotate(
          child: Container(
            width: 100,
            height: 100,
            color: Colors.red,
          ),
          angle: 90,
          toggle: _toggle,
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          setState(() {
            _toggle = !_toggle;
          });
        },
        tooltip: 'Toggle',
        child: Icon(Icons.rotate_right),
      ),
    );
  }
}

// Application flow:
// 1. The app starts with the red square in its original position.
// 2. When the floating action button is pressed, the _toggle variable is toggled.
// 3. The ToggleRotate widget is rebuilt with the new _toggle value.
// 4. If _toggle is true, the red square is rotated by 90 degrees.
// 5. If _toggle is false, the red square is rotated back to its original position.

// Summary:
// The app demonstrates the use of the ToggleRotate widget to toggle the rotation of a red square.
// The rotation is controlled by a floating action button that toggles the _toggle variable.
```

<-- END_MAIN -->
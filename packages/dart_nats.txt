<-- START_DESCRIPTION -->

**Introduction to dart_nats**
==========================

The `dart_nats` package is a Flutter library that allows you to connect to a NATS server, a lightweight messaging system for microservices and IoT devices. With `dart_nats`, you can easily integrate your Flutter app with a NATS server, enabling real-time communication and data exchange.

**When to Use dart_nats**
------------------------

You should consider using `dart_nats` in the following scenarios:

*   Building real-time applications, such as live updates, gaming, or chat apps.
*   Integrating with IoT devices or microservices that use NATS for communication.
*   Developing scalable and fault-tolerant systems that require efficient messaging.

**Key Features of dart_nats**
---------------------------

*   **Connection Management**: Establish and manage connections to a NATS server.
*   **Publish-Subscribe**: Publish messages to subjects and subscribe to receive messages.
*   **Request-Response**: Send requests and receive responses using the NATS server.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setting Up dart_nats**
----------------------

To use `dart_nats` in your Flutter project, follow these steps:

1.  **Add the Package**: Add the `dart_nats` package to your `pubspec.yaml` file:

    ```yml
dependencies:
  flutter:
    sdk: flutter
  dart_nats: ^1.0.0
```

2.  **Import the Package**: Import the `dart_nats` package in your Dart file:

    ```dart
import 'package:dart_nats/dart_nats.dart';
```

3.  **Create a NATS Client**: Create a NATS client instance:

    ```dart
NatsClient client = NatsClient('nats://localhost:4222');
```

**Platform-Specific Details**
---------------------------

*   **Android**: No additional configuration is required for Android.
*   **iOS**: You need to add the `NSAllowsArbitraryLoads` key to your `Info.plist` file to allow insecure connections:

    ```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

**Using the Package**
--------------------

Here's a basic example of using the `dart_nats` package:

```dart
void main() async {
  // Create a NATS client
  NatsClient client = NatsClient('nats://localhost:4222');

  // Connect to the NATS server
  await client.connect();

  // Subscribe to a subject
  Subscription sub = await client.sub('my_subject');

  // Publish a message
  await client.pub('my_subject', 'Hello, World!');

  // Receive messages
  sub.stream.listen((msg) {
    print('Received message: ${msg.string}');
  });
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:dart_nats/dart_nats.dart';

void main() async {
  // Create a NATS client
  NatsClient client = NatsClient('nats://localhost:4222');

  // Connect to the NATS server
  await client.connect();

  // Create a Flutter app
  runApp(MyApp(client));
}

class MyApp extends StatelessWidget {
  final NatsClient _client;

  MyApp(this._client);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'NATS Example',
      home: MyHomePage(_client),
    );
  }
}

class MyHomePage extends StatefulWidget {
  final NatsClient _client;

  MyHomePage(this._client);

  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _subjectController = TextEditingController();
  final _messageController = TextEditingController();
  Subscription _sub;

  void _subscribe() async {
    // Subscribe to a subject
    _sub = await widget._client.sub(_subjectController.text);

    // Receive messages
    _sub.stream.listen((msg) {
      print('Received message: ${msg.string}');
    });
  }

  void _publish() async {
    // Publish a message
    await widget._client.pub(_subjectController.text, _messageController.text);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('NATS Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            TextField(
              controller: _subjectController,
              decoration: InputDecoration(labelText: 'Subject'),
            ),
            TextField(
              controller: _messageController,
              decoration: InputDecoration(labelText: 'Message'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _subscribe,
              child: Text('Subscribe'),
            ),
            SizedBox(height: 10),
            ElevatedButton(
              onPressed: _publish,
              child: Text('Publish'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user creates a NATS client instance and connects to the NATS server.
// 2. The user creates a Flutter app and passes the NATS client instance to it.
// 3. The Flutter app creates a subscription to a subject using the NATS client.
// 4. The user publishes a message to the subject using the NATS client.
// 5. The subscription receives the message and prints it to the console.
// 6. The user can repeat steps 3-5 to continue publishing and receiving messages.

// Created/Modified files during execution:
// None
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# esp_provisioning_ble Flutter Package
=====================================

The `esp_provisioning_ble` package is a Flutter library that enables ESP32/ESP8266 devices to be provisioned over Bluetooth Low Energy (BLE). It provides a simple and efficient way to configure and connect to ESP devices using BLE.

### When to Use This Package

This package is useful when you need to:

* Configure ESP devices without the need for a physical connection
* Provision multiple ESP devices at once
* Use a mobile app to configure and connect to ESP devices

### Features

* Supports ESP32 and ESP8266 devices
* Provisioning over BLE
* Simple and efficient API

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Using the esp_provisioning_ble Package
=============================================

### Step 1: Add the Package to Your Flutter Project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  esp_provisioning_ble: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:esp_provisioning_ble/esp_provisioning_ble.dart';
```
### Step 3: Initialize the Package

Initialize the package by calling the `init` method:
```dart
await EspProvisioningBle.init();
```
### Step 4: Scan for Devices

Scan for available ESP devices using the `scan` method:
```dart
List<EspDevice> devices = await EspProvisioningBle.scan();
```
### Step 5: Provision a Device

Provision a device using the `provision` method:
```dart
await EspProvisioningBle.provision(devices[0], 'your_ssid', 'your_password');
```
### Platform-Specific Details

* Android: Make sure to add the `BLUETOOTH` and `BLUETOOTH_ADMIN` permissions to your `AndroidManifest.xml` file.
* iOS: Make sure to add the `NSBluetoothAlwaysUsageDescription` key to your `Info.plist` file.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:esp_provisioning_ble/esp_provisioning_ble.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'ESP Provisioning BLE Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  List<EspDevice> _devices = [];

  @override
  void initState() {
    super.initState();
    _initPackage();
  }

  Future<void> _initPackage() async {
    // Initialize the package
    await EspProvisioningBle.init();

    // Scan for devices
    _devices = await EspProvisioningBle.scan();

    // Update the UI
    setState(() {});
  }

  Future<void> _provisionDevice(EspDevice device) async {
    // Provision the device
    await EspProvisioningBle.provision(device, 'your_ssid', 'your_password');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('ESP Provisioning BLE Demo'),
      ),
      body: ListView.builder(
        itemCount: _devices.length,
        itemBuilder: (context, index) {
          return ListTile(
            title: Text(_devices[index].name),
            subtitle: Text(_devices[index].macAddress),
            trailing: IconButton(
              icon: Icon(Icons.settings),
              onPressed: () => _provisionDevice(_devices[index]),
            ),
          );
        },
      ),
    );
  }
}

// Application flow:
// 1. The app initializes the esp_provisioning_ble package.
// 2. The app scans for available ESP devices.
// 3. The app displays a list of found devices.
// 4. The user selects a device to provision.
// 5. The app provisions the selected device.
// 6. The app updates the UI to reflect the provisioned device.
```

// Summary:
// The code initializes the esp_provisioning_ble package, scans for devices, and displays a list of found devices.
// The user can select a device to provision, and the app will provision the device using the esp_provisioning_ble package.
// The app updates the UI to reflect the provisioned device.

<-- END_MAIN -->
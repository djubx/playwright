<-- START_DESCRIPTION -->

# alphanum_comparator Flutter Package
=====================================

The `alphanum_comparator` package is a utility library for Flutter that provides a simple and efficient way to compare and sort alphanumeric strings. It is particularly useful when working with lists of data that contain a mix of letters and numbers, such as product codes or IDs.

### Features

*   Compares alphanumeric strings in a natural and intuitive way
*   Handles numbers and letters in a case-insensitive manner
*   Supports sorting lists of alphanumeric strings

### When to Use

*   When working with lists of data that contain alphanumeric strings
*   When you need to compare or sort alphanumeric strings in a natural and intuitive way
*   When you want to handle numbers and letters in a case-insensitive manner

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Using the alphanum_comparator Package
=====================================

### Step 1: Add the Package to Your Project

Add the `alphanum_comparator` package to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  alphanum_comparator: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the `alphanum_comparator` package in your Dart file:

```dart
import 'package:alphanum_comparator/alphanum_comparator.dart';
```

### Step 3: Use the Package

Use the `compare` function to compare two alphanumeric strings:

```dart
void main() {
  String str1 = 'abc123';
  String str2 = 'abc456';
  
  int result = compare(str1, str2);
  
  if (result < 0) {
    print('$str1 is less than $str2');
  } else if (result > 0) {
    print('$str1 is greater than $str2');
  } else {
    print('$str1 is equal to $str2');
  }
}
```

You can also use the `sort` function to sort a list of alphanumeric strings:

```dart
void main() {
  List<String> list = ['abc456', 'abc123', 'def789'];
  
  list.sort(compare);
  
  print(list); // [abc123, abc456, def789]
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:alphanum_comparator/alphanum_comparator.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Alphanum Comparator Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  List<String> _list = ['abc456', 'abc123', 'def789'];
  
  void _sortList() {
    _list.sort(compare);
    setState(() {});
  }
  
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Alphanum Comparator Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Original List:',
              style: TextStyle(fontSize: 20),
            ),
            Text(
              _list.join(', '),
              style: TextStyle(fontSize: 20),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _sortList,
              child: Text('Sort List'),
            ),
            SizedBox(height: 20),
            Text(
              'Sorted List:',
              style: TextStyle(fontSize: 20),
            ),
            Text(
              _list.join(', '),
              style: TextStyle(fontSize: 20),
            ),
          ],
        ),
      ),
    );
  }
}

// The app starts by displaying the original list of alphanumeric strings.
// When the user clicks the "Sort List" button, the list is sorted using the compare function from the alphanum_comparator package.
// The sorted list is then displayed below the original list.
// The compare function is used to sort the list in a natural and intuitive way, handling numbers and letters in a case-insensitive manner.
```

<-- END_MAIN -->
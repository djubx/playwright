<-- START_DESCRIPTION -->

# Kubernetes Flutter Package
The Kubernetes Flutter package is a powerful tool for managing Kubernetes clusters from within a Flutter application. It provides a simple and intuitive API for interacting with Kubernetes resources, allowing developers to build custom management interfaces and automation tools.

## When to Use This Package
This package is ideal for building custom Kubernetes management interfaces, automating cluster tasks, and integrating Kubernetes with other systems. It can be used to build a wide range of applications, from simple cluster monitoring tools to complex automation platforms.

## Features
The Kubernetes Flutter package includes the following features:

* Support for multiple Kubernetes clusters
* Authentication using certificates, tokens, or username/password
* CRUD operations for Pods, Deployments, Services, and other resources
* Real-time updates using Kubernetes' built-in watch functionality
* Support for custom resources and API extensions

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
To use the Kubernetes Flutter package, you'll need to add it to your project's `pubspec.yaml` file:

```yml
dependencies:
  kubernetes: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Platform-Specific Details
### Android
On Android, you'll need to add the following permissions to your `AndroidManifest.xml` file:

```xml
<uses-permission android:name="android.permission.INTERNET" />
```

### iOS
On iOS, you'll need to add the following lines to your `Info.plist` file:

```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```

## Using the Package
To use the package, you'll need to import it and create a `KubernetesClient` instance:

```dart
import 'package:kubernetes/kubernetes.dart';

void main() async {
  final client = KubernetesClient(
    cluster: 'https://your-cluster-url.com',
    token: 'your-token',
  );

  final pods = await client.listPods();
  print(pods);
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:kubernetes/kubernetes.dart';

void main() async {
  final client = KubernetesClient(
    cluster: 'https://your-cluster-url.com',
    token: 'your-token',
  );

  // Create a new deployment
  final deployment = await client.createDeployment(
    metadata: ObjectMeta(
      name: 'example-deployment',
    ),
    spec: DeploymentSpec(
      replicas: 3,
      selector: LabelSelector(
        matchLabels: {
          'app': 'example',
        },
      ),
      template: PodTemplateSpec(
        metadata: ObjectMeta(
          labels: {
            'app': 'example',
          },
        ),
        spec: PodSpec(
          containers: [
            Container(
              name: 'example-container',
              image: 'nginx:latest',
            ),
          ],
        ),
      ),
    ),
  );

  // List all deployments
  final deployments = await client.listDeployments();
  print(deployments);

  // Update the deployment
  final updatedDeployment = await client.updateDeployment(
    metadata: ObjectMeta(
      name: 'example-deployment',
    ),
    spec: DeploymentSpec(
      replicas: 5,
      selector: LabelSelector(
        matchLabels: {
          'app': 'example',
        },
      ),
      template: PodTemplateSpec(
        metadata: ObjectMeta(
          labels: {
            'app': 'example',
          },
        ),
        spec: PodSpec(
          containers: [
            Container(
              name: 'example-container',
              image: 'nginx:latest',
            ),
          ],
        ),
      ),
    ),
  );

  // Delete the deployment
  await client.deleteDeployment('example-deployment');

  // Create a new RealFlutter instance
  final realFlutter = RealFlutter();

  // Use the RealFlutter instance to manage your Kubernetes resources
  realFlutter.manageResources(client);
}

class RealFlutter {
  void manageResources(KubernetesClient client) {
    // Use the client to manage your Kubernetes resources
  }
}
```

// The application flow is as follows:
// 1. The user creates a new Kubernetes client instance with the cluster URL and token.
// 2. The user creates a new deployment using the client.
// 3. The user lists all deployments using the client.
// 4. The user updates the deployment using the client.
// 5. The user deletes the deployment using the client.
// 6. The user creates a new RealFlutter instance.
// 7. The user uses the RealFlutter instance to manage their Kubernetes resources.

// The code flow is as follows:
// 1. The main function is called.
// 2. The Kubernetes client instance is created.
// 3. The deployment is created.
// 4. The deployments are listed.
// 5. The deployment is updated.
// 6. The deployment is deleted.
// 7. The RealFlutter instance is created.
// 8. The RealFlutter instance is used to manage the Kubernetes resources.

<-- END_MAIN -->
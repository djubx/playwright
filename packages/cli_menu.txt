```markdown
<!-- START_DESCRIPTION -->
# CLI Menu Flutter Package

The `cli_menu` Flutter package is a powerful tool designed to create command-line interfaces (CLI) for Flutter applications. It allows developers to build interactive menus that can be used in terminal-based applications, making it ideal for applications that require user input in a structured format. 

## When to Use This Package
- **Command-Line Applications**: If you're building a Flutter application that runs in a terminal or command-line environment, `cli_menu` is an excellent choice for managing user interactions.
- **Interactive Scripts**: For scripts that require user input, such as setup scripts or configuration tools, this package simplifies the process of gathering input.
- **Educational Tools**: If you're developing educational tools that require user interaction through a terminal, this package can help create a more engaging experience.

## Features
- **Easy Menu Creation**: Quickly create menus with options for users to select.
- **Customizable Options**: Define custom actions for each menu item.
- **Input Handling**: Manage user input effectively, ensuring a smooth user experience.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS platforms.

Overall, the `cli_menu` package enhances the user experience in terminal-based Flutter applications by providing a structured way to interact with users.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using CLI Menu

## Step 1: Adding the Dependency
To use the `cli_menu` package, you first need to add it to your `pubspec.yaml` file. Open your Flutter project and add the following line under dependencies:

```yaml
dependencies:
  cli_menu: ^1.0.0  # Check for the latest version on pub.dev
```

## Step 2: Installing the Package
Run the following command in your terminal to install the package:

```bash
flutter pub get
```

## Step 3: Basic Setup
In your Dart file, import the package:

```dart
import 'package:cli_menu/cli_menu.dart';
```

## Step 4: Creating a Simple Menu
You can create a simple menu using the `RealFlutter` class. Hereâ€™s a basic example:

```dart
void main() {
  final menu = Menu('Main Menu')
    ..addItem(MenuItem('Option 1', (context) => print('You selected Option 1')))
    ..addItem(MenuItem('Option 2', (context) => print('You selected Option 2')))
    ..addItem(MenuItem('Exit', (context) => print('Exiting...')));

  menu.show();
}
```

## Platform-Specific Details
### Android
- Ensure that your Android project is set up to run terminal applications. You may need to adjust your `AndroidManifest.xml` to allow for terminal input.

### iOS
- Similar to Android, ensure that your iOS project is configured to handle terminal input. You may need to test on a physical device or simulator that supports terminal applications.

## Optimizations
- For better performance, consider using asynchronous operations for menu actions, especially if they involve network calls or heavy computations.

With these steps, you should be able to set up and use the `cli_menu` package in your Flutter applications effectively.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of CLI Menu in Flutter

```dart
import 'package:cli_menu/cli_menu.dart';

void main() {
  // Create a new menu instance with a title
  final menu = Menu('Main Menu')
    // Add menu items with associated actions
    ..addItem(MenuItem('Option 1', (context) {
      // Action for Option 1
      print('You selected Option 1');
    }))
    ..addItem(MenuItem('Option 2', (context) {
      // Action for Option 2
      print('You selected Option 2');
    }))
    ..addItem(MenuItem('Exit', (context) {
      // Action for Exit
      print('Exiting...');
      // Exit the application
      exit(0);
    }));

  // Show the menu to the user
  menu.show();
}

/*
  Application Flow Explanation:
  1. The application starts by creating an instance of the Menu class with the title 'Main Menu'.
  2. Three menu items are added:
     - 'Option 1' which prints a message when selected.
     - 'Option 2' which also prints a message when selected.
     - 'Exit' which prints a message and exits the application.
  3. The menu is displayed to the user, allowing them to make a selection.
  4. Based on the user's choice, the corresponding action is executed.
  5. If 'Exit' is selected, the application terminates gracefully.
*/
```
<!-- END_MAIN -->
```

### Summary
In this blog, we explored the `cli_menu` Flutter package, detailing its features and use cases. We walked through the setup process, including platform-specific considerations for Android and iOS. Finally, we provided a complete example of a Flutter application using the `cli_menu` package, with detailed comments explaining the application flow. This structured approach allows developers to easily implement interactive command-line interfaces in their Flutter applications.
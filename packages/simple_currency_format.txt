```markdown
<!-- START_DESCRIPTION -->
# Simple Currency Format Package in Flutter

The `simple_currency_format` package is a lightweight and efficient Flutter package designed to format currency values easily. It provides developers with a straightforward way to display monetary values in a user-friendly format, making it ideal for applications that deal with financial data, e-commerce, or any scenario where currency representation is necessary.

## When to Use This Package
- **E-commerce Applications**: Displaying product prices in a clear and consistent format.
- **Financial Apps**: Showing account balances, transaction amounts, or investment values.
- **Budgeting Tools**: Formatting expenses and income for better readability.

## Features
- **Customizable Currency Symbols**: Easily set the currency symbol to match the user's locale.
- **Precision Control**: Specify the number of decimal places to display.
- **Locale Support**: Format currency according to different locales, ensuring proper representation.
- **Simple API**: Intuitive methods for formatting and parsing currency values.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Simple Currency Format

## Installation
To add the `simple_currency_format` package to your Flutter project, include it in your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  simple_currency_format: ^1.0.0  # Check for the latest version on pub.dev
```

Run the following command to install the package:

```bash
flutter pub get
```

## Usage
### Importing the Package
In your Dart file, import the package:

```dart
import 'package:simple_currency_format/simple_currency_format.dart';
```

### Basic Usage
You can format a currency value using the `CurrencyFormat` class. Hereâ€™s how to do it:

```dart
void main() {
  // Create an instance of CurrencyFormat
  final currencyFormatter = CurrencyFormat();

  // Format a number as currency
  String formattedValue = currencyFormatter.format(1234.56, symbol: '\$', decimalDigits: 2);
  print(formattedValue); // Output: $1,234.56
}
```

### Platform-Specific Details
- **Android**: Ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file for compatibility.
- **iOS**: No additional configuration is required, but ensure your deployment target is set to a version that supports the package.

### Optimizations
- For better performance, avoid formatting currency values in the build method. Instead, format them once and store the result in a variable.

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of Simple Currency Format

```dart
import 'package:flutter/material.dart';
import 'package:simple_currency_format/simple_currency_format.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Currency Format Example',
      home: CurrencyHomePage(),
    );
  }
}

class CurrencyHomePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Create an instance of CurrencyFormat
    final currencyFormatter = CurrencyFormat();

    // Sample currency values
    double price1 = 1234.56;
    double price2 = 7890.12;

    // Format the currency values
    String formattedPrice1 = currencyFormatter.format(price1, symbol: '\$', decimalDigits: 2);
    String formattedPrice2 = currencyFormatter.format(price2, symbol: '\$', decimalDigits: 2);

    return Scaffold(
      appBar: AppBar(
        title: Text('Currency Format Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text('Price 1: $formattedPrice1'), // Display formatted price 1
            Text('Price 2: $formattedPrice2'), // Display formatted price 2
          ],
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function initializes the app by calling runApp with the RealFlutter widget.
// 2. RealFlutter is a StatelessWidget that builds the MaterialApp with a title and home page.
// 3. CurrencyHomePage is another StatelessWidget that formats and displays currency values.
// 4. Inside CurrencyHomePage, we create an instance of CurrencyFormat to format our prices.
// 5. We define two sample prices and format them using the currencyFormatter.
// 6. The formatted prices are displayed in the center of the screen using Text widgets.
```
<!-- END_MAIN -->
``` 

This structured approach provides a comprehensive overview of the `simple_currency_format` package, guiding developers through its features, setup, and practical usage in a Flutter application.
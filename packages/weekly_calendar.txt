<-- START_DESCRIPTION -->

# Weekly Calendar Flutter Package
=====================================

The `weekly_calendar` Flutter package is a useful tool for creating weekly calendars in your Flutter applications. It provides a simple and intuitive way to display a weekly calendar, allowing users to navigate through different weeks and select specific days.

### When to Use This Package

This package is ideal for applications that require a weekly calendar view, such as:

* Scheduling apps
* Event planning apps
* Task management apps
* Calendar-based games

### Features

* Displays a weekly calendar with days of the week
* Allows users to navigate through different weeks
* Supports day selection
* Customizable calendar appearance

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Weekly Calendar Package
==========================================

To use the `weekly_calendar` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  weekly_calendar: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:weekly_calendar/weekly_calendar.dart';
```
### Step 3: Create a Weekly Calendar Widget

Create a `WeeklyCalendar` widget and add it to your app:
```dart
WeeklyCalendar(
  startDate: DateTime.now(),
  endDate: DateTime.now().add(Duration(days: 7)),
  selectedDate: DateTime.now(),
  onChanged: (date) {
    print('Selected date: $date');
  },
)
```
### Platform-Specific Details

* Android: No additional setup required.
* iOS: No additional setup required.

### Configurations and Optimizations

* You can customize the calendar appearance by using the `calendarStyle` property.
* You can also use the `onChanged` property to handle day selection events.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:weekly_calendar/weekly_calendar.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  DateTime _selectedDate = DateTime.now();

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Weekly Calendar Demo',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Weekly Calendar Demo'),
        ),
        body: Center(
          child: WeeklyCalendar(
            startDate: DateTime.now(),
            endDate: DateTime.now().add(Duration(days: 7)),
            selectedDate: _selectedDate,
            onChanged: (date) {
              setState(() {
                _selectedDate = date;
              });
              print('Selected date: $date');
            },
          ),
        ),
      ),
    );
  }
}

// The app starts by running the main function, which creates a RealFlutter widget.
// The RealFlutter widget is a stateful widget that contains a WeeklyCalendar widget.
// The WeeklyCalendar widget displays a weekly calendar with the current date selected.
// When the user selects a new date, the onChanged event is triggered, which updates the _selectedDate variable and prints the selected date to the console.
// The app uses the Material Design theme and has a basic scaffold with an app bar and a body.
// The body contains a center widget that holds the WeeklyCalendar widget.
```

// In summary, the app flows as follows:
// 1. The user runs the app, which creates a RealFlutter widget.
// 2. The RealFlutter widget creates a WeeklyCalendar widget with the current date selected.
// 3. The user selects a new date on the calendar, which triggers the onChanged event.
// 4. The onChanged event updates the _selectedDate variable and prints the selected date to the console.
// 5. The app continues to run, allowing the user to select new dates and view the updated calendar.

<-- END_MAIN -->
```markdown
<!-- START_DESCRIPTION -->
# Exploring the json_data_explorer Flutter Package

The `json_data_explorer` package is a powerful tool designed for Flutter developers who need to visualize and manipulate JSON data in their applications. This package is particularly useful when working with APIs that return complex JSON structures, allowing developers to easily explore and understand the data they are working with.

## When to Use This Package
- **API Development**: When building applications that consume RESTful APIs, this package helps in visualizing the JSON responses.
- **Data Analysis**: For applications that require data analysis or manipulation, `json_data_explorer` provides a user-friendly interface to explore JSON data.
- **Debugging**: It can be used during the development phase to debug and inspect JSON data structures.

## Key Features
- **Interactive JSON Viewer**: Provides a tree view of JSON data, making it easy to navigate through nested structures.
- **Search Functionality**: Allows users to search for specific keys or values within the JSON data.
- **Data Editing**: Users can modify JSON data directly within the app, which is useful for testing and debugging.
- **Export Options**: Offers functionality to export modified JSON data for further use.

Overall, `json_data_explorer` is an essential package for any Flutter developer dealing with JSON data, enhancing productivity and understanding of data structures.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using json_data_explorer

## Installation
To get started with the `json_data_explorer` package, you need to add it to your Flutter project. Open your `pubspec.yaml` file and add the following dependency:

```yaml
dependencies:
  flutter:
    sdk: flutter
  json_data_explorer: ^latest_version
```

Make sure to replace `^latest_version` with the latest version available on [pub.dev](https://pub.dev/packages/json_data_explorer).

## Platform-Specific Configuration
### Android
For Android, ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
        ...
    }
}
```

### iOS
For iOS, you may need to update your `ios/Podfile` to ensure compatibility with the latest iOS versions. Make sure to set the platform version:

```ruby
platform :ios, '10.0'
```

## Using the Package
Once you have installed the package, you can start using it in your Flutter application. Hereâ€™s a simple example of how to implement the `json_data_explorer` in your app.

1. Import the package in your Dart file:

```dart
import 'package:json_data_explorer/json_data_explorer.dart';
```

2. Create a simple Flutter app that utilizes the `json_data_explorer` widget to display JSON data.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of json_data_explorer

```dart
import 'package:flutter/material.dart';
import 'package:json_data_explorer/json_data_explorer.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // The main MaterialApp widget
    return MaterialApp(
      title: 'JSON Data Explorer',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: JsonExplorerScreen(),
    );
  }
}

class JsonExplorerScreen extends StatelessWidget {
  // Sample JSON data to be explored
  final String jsonData = '''
  {
    "name": "John Doe",
    "age": 30,
    "isDeveloper": true,
    "skills": ["Flutter", "Dart", "JavaScript"],
    "projects": [
      {
        "title": "Project A",
        "status": "completed"
      },
      {
        "title": "Project B",
        "status": "in progress"
      }
    ]
  }
  ''';

  @override
  Widget build(BuildContext context) {
    // Using JsonDataExplorer widget to display the JSON data
    return Scaffold(
      appBar: AppBar(
        title: Text('JSON Data Explorer'),
      ),
      body: JsonDataExplorer(
        json: jsonData, // Pass the JSON data here
        onEdit: (String editedJson) {
          // Callback for when the JSON is edited
          print('Edited JSON: $editedJson');
        },
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function runs the RealFlutter app.
// 2. RealFlutter builds a MaterialApp with a title and theme.
// 3. The home screen is set to JsonExplorerScreen.
// 4. JsonExplorerScreen contains a sample JSON string.
// 5. The JsonDataExplorer widget is used to visualize the JSON data.
// 6. Users can interact with the JSON data, and any edits will trigger the onEdit callback, printing the modified JSON to the console.
```

<!-- END_MAIN -->
```

### Summary
In this blog post, we explored the `json_data_explorer` Flutter package, detailing its features, installation process, and usage through a complete example. The application allows users to visualize and edit JSON data interactively, making it a valuable tool for developers working with APIs or complex data structures. The provided code demonstrates how to set up the package and utilize its capabilities effectively.
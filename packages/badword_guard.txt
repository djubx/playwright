<-- START_DESCRIPTION -->

# Badword Guard Flutter Package
================================

The `badword_guard` Flutter package is a utility library designed to help developers filter out profanity and unwanted words from user-generated content in their Flutter applications. This package provides a simple and efficient way to detect and replace bad words with more family-friendly alternatives.

## When to Use
--------------

The `badword_guard` package is perfect for applications that allow users to input text, such as:

* Chat applications
* Social media platforms
* Comment sections
* Forums

## Features
------------

*   **Bad word detection**: The package includes a comprehensive list of bad words that can be detected in user input.
*   **Customizable replacement**: Developers can specify a custom replacement string for detected bad words.
*   **Case insensitivity**: The package detects bad words regardless of case.
*   **Special character handling**: The package can handle special characters and punctuation.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Badword Guard Package
===========================================================

## Step 1: Add the Package to Your Project
-----------------------------------------

To use the `badword_guard` package, you need to add it to your project's `pubspec.yaml` file. Open the file and add the following line under the `dependencies` section:

```yml
dependencies:
  flutter:
    sdk: flutter
  badword_guard: ^1.0.0
```

Then, run `flutter pub get` in your terminal to install the package.

## Step 2: Import the Package
---------------------------

In your Dart file, import the `badword_guard` package:

```dart
import 'package:badword_guard/badword_guard.dart';
```

## Step 3: Use the Package
-------------------------

To use the package, create an instance of the `BadwordGuard` class and call the `filter` method:

```dart
void main() {
  final badwordGuard = BadwordGuard();
  final userInput = 'This is a bad word!';
  final filteredInput = badwordGuard.filter(userInput);
  print(filteredInput); // Output: 'This is a *****!'
}
```

### Platform-Specific Details

The `badword_guard` package works on both Android and iOS platforms. However, if you want to use a custom list of bad words, you need to create a JSON file and add it to your project's assets.

### Required Configurations or Optimizations

To optimize the performance of the `badword_guard` package, you can create a singleton instance of the `BadwordGuard` class and reuse it throughout your application.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:badword_guard/badword_guard.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Badword Guard Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _textController = TextEditingController();
  final _badwordGuard = BadwordGuard();

  String _filteredInput = '';

  void _filterInput() {
    final userInput = _textController.text;
    final filteredInput = _badwordGuard.filter(userInput);
    setState(() {
      _filteredInput = filteredInput;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Badword Guard Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            TextField(
              controller: _textController,
              decoration: InputDecoration(
                border: OutlineInputBorder(),
                labelText: 'Enter some text',
              ),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _filterInput,
              child: Text('Filter Input'),
            ),
            SizedBox(height: 20),
            Text(_filteredInput),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user enters some text into the TextField.
// 2. The user clicks the "Filter Input" button.
// 3. The _filterInput method is called, which gets the user's input from the TextField.
// 4. The user's input is passed to the BadwordGuard's filter method.
// 5. The filter method checks the user's input for bad words and replaces them with *****.
// 6. The filtered input is then displayed on the screen.
// This process is repeated every time the user clicks the "Filter Input" button.

// The benefits of using the BadwordGuard package include:
// 1. Easy to use: The package is simple to use and requires minimal setup.
// 2. Customizable: The package allows you to customize the list of bad words and the replacement string.
// 3. Fast: The package is fast and efficient, making it suitable for use in real-time applications.
```

<-- END_MAIN -->
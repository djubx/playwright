<-- START_DESCRIPTION -->

Open-Meteo Flutter Package: A Comprehensive Overview
=====================================================

The Open-Meteo Flutter package is a powerful tool for fetching and displaying weather data in your Flutter applications. It provides a simple and intuitive API for accessing current and forecasted weather conditions, making it an ideal choice for developers looking to add weather functionality to their apps.

When to Use Open-Meteo
--------------------

The Open-Meteo package is perfect for applications that require weather data, such as:

* Weather apps
* Travel guides
* Outdoor activity planners
* Smart home automation systems

Features
--------

The Open-Meteo package offers a range of features, including:

* Current weather conditions
* Forecasted weather conditions for up to 7 days
* Hourly weather forecasts
* Weather alerts and warnings
* Support for multiple languages

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setting Up Open-Meteo
---------------------

To use the Open-Meteo package in your Flutter application, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  open_meteo: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:open_meteo/open_meteo.dart';
```
### Step 3: Initialize the Package

Initialize the package with your API key:
```dart
OpenMeteo openMeteo = OpenMeteo(apiKey: 'YOUR_API_KEY');
```
### Platform-Specific Details

#### Android

Add the following line to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.INTERNET" />
```
#### iOS

Add the following line to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:open_meteo/open_meteo.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  OpenMeteo openMeteo;
  WeatherData weatherData;

  @override
  void initState() {
    super.initState();
    openMeteo = OpenMeteo(apiKey: 'YOUR_API_KEY');
    _fetchWeatherData();
  }

  _fetchWeatherData() async {
    // Fetch current weather data
    weatherData = await openMeteo.getCurrentWeather(
      latitude: 37.7749,
      longitude: -122.4194,
    );
    setState(() {});
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Open-Meteo Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Text(
                'Current Weather:',
                style: TextStyle(fontSize: 24),
              ),
              Text(
                weatherData != null
                    ? '${weatherData.temperature}Â°C'
                    : 'Loading...',
                style: TextStyle(fontSize: 48),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _fetchWeatherData,
                child: Text('Refresh'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Application flow:
// 1. The app initializes the OpenMeteo package with the API key.
// 2. The app fetches the current weather data for the specified location.
// 3. The app displays the current weather data on the screen.
// 4. The user can refresh the weather data by pressing the "Refresh" button.
// 5. The app updates the weather data on the screen with the new data.

// Summary:
// This example demonstrates how to use the OpenMeteo package to fetch and display current weather data in a Flutter app.
```

<-- END_MAIN -->
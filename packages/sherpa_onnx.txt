<-- START_DESCRIPTION -->

# Sherpa Onnx Flutter Package
================================

The Sherpa Onnx Flutter package is a powerful tool for integrating Onnx machine learning models into Flutter applications. It provides a simple and efficient way to run Onnx models on both Android and iOS platforms.

## When to Use
--------------

This package is ideal for developers who want to integrate machine learning capabilities into their Flutter applications, such as:

* Image classification
* Object detection
* Speech recognition
* Natural language processing

## Features
------------

* Supports Onnx models
* Runs on both Android and iOS platforms
* Provides a simple and efficient API for integrating machine learning models into Flutter applications

<-- END_DESCRIPTION -->


<-- START_TUTORIAL -->

# Setting Up the Sherpa Onnx Flutter Package
------------------------------------------

## Step 1: Add the Package to Your Flutter Project
------------------------------------------------

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  sherpa_onnx: ^1.0.0
```
Then, run `flutter pub get` to install the package.

## Step 2: Import the Package
---------------------------

Import the package in your Dart file:
```dart
import 'package:sherpa_onnx/sherpa_onnx.dart';
```
## Step 3: Load the Onnx Model
---------------------------

Load the Onnx model using the `SherpaOnnx` class:
```dart
SherpaOnnx _sherpaOnnx = SherpaOnnx();
await _sherpaOnnx.loadModel('path/to/model.onnx');
```
## Step 4: Run the Model
----------------------

Run the model using the `run` method:
```dart
List<double> _output = await _sherpaOnnx.run(_input);
```
## Platform-Specific Details
---------------------------

### Android

* Make sure to add the following line to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.INTERNET" />
```
### iOS

* Make sure to add the following line to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```
<-- END_TUTORIAL -->


<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:sherpa_onnx/sherpa_onnx.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Sherpa Onnx Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  SherpaOnnx _sherpaOnnx = SherpaOnnx();
  List<double> _output = [];

  @override
  void initState() {
    super.initState();
    _loadModel();
  }

  Future<void> _loadModel() async {
    // Load the Onnx model
    await _sherpaOnnx.loadModel('path/to/model.onnx');
  }

  Future<void> _runModel() async {
    // Create a sample input
    List<double> _input = [1.0, 2.0, 3.0];

    // Run the model
    _output = await _sherpaOnnx.run(_input);

    // Update the UI
    setState(() {});
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Sherpa Onnx Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Output:',
              style: TextStyle(fontSize: 24),
            ),
            Text(
              _output.toString(),
              style: TextStyle(fontSize: 24),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _runModel,
              child: Text('Run Model'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and the `MyHomePage` widget is displayed.
// 2. The `MyHomePage` widget loads the Onnx model using the `SherpaOnnx` class.
// 3. The user clicks the "Run Model" button, which creates a sample input and runs the model using the `run` method.
// 4. The output of the model is displayed on the screen.
// 5. The user can repeat steps 3-4 to run the model multiple times.

// The code uses the `SherpaOnnx` class to load and run the Onnx model, and the `MyHomePage` widget to display the output and handle user input.

// The `SherpaOnnx` class provides a simple and efficient way to integrate Onnx models into Flutter applications.

```

<-- END_MAIN -->
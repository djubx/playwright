```markdown
<-- START_DESCRIPTION -->

# Swipeable Card Stack Flutter Package

The `swipeable_card_stack` Flutter package is a powerful tool for developers looking to implement interactive card-based interfaces in their applications. This package allows users to swipe through a stack of cards, similar to popular dating apps, providing a dynamic and engaging user experience.

## When to Use

The `swipeable_card_stack` package is ideal for applications that require a card-based UI with swipe gestures. Common use cases include:

- **Dating Apps**: Allow users to swipe left or right to like or dislike profiles.
- **Product Browsing**: Enable users to swipe through product images or descriptions.
- **Content Discovery**: Facilitate the exploration of articles, videos, or other media.

## Features

- **Customizable Cards**: Easily customize the appearance and content of each card.
- **Swipe Gestures**: Support for swiping left, right, up, and down.
- **Animation Control**: Fine-tune the animations for card transitions.
- **Event Callbacks**: Handle swipe events to trigger actions or update the UI.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using Swipeable Card Stack

In this tutorial, we'll walk through the process of setting up and using the `swipeable_card_stack` package in a Flutter project. We'll cover platform-specific configurations for both Android and iOS.

## Setup Process

1. **Add Dependency**

   First, add the `swipeable_card_stack` package to your `pubspec.yaml` file:

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     swipeable_card_stack: ^1.0.0
   ```

2. **Install Packages**

   Run the following command to install the new package:

   ```bash
   flutter pub get
   ```

3. **Platform-Specific Configurations**

   - **Android**: Ensure your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

     ```gradle
     defaultConfig {
         minSdkVersion 21
     }
     ```

   - **iOS**: No specific configurations are required for iOS, but ensure your deployment target is set to iOS 9.0 or higher in your `ios/Podfile`:

     ```ruby
     platform :ios, '9.0'
     ```

## Using the Package

To use the `swipeable_card_stack` package, import it into your Dart file:

```dart
import 'package:swipeable_card_stack/swipeable_card_stack.dart';
```

Create a `RealFlutter` widget to manage the card stack and handle swipe events.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:swipeable_card_stack/swipeable_card_stack.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Swipeable Card Stack Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final SwipeableCardSectionController _cardController = SwipeableCardSectionController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Swipeable Card Stack'),
      ),
      body: SwipeableCardsSection(
        cardController: _cardController,
        context: context,
        items: _buildCardItems(),
        onCardSwiped: (dir, index, widget) {
          // Handle swipe events
          print('Card $index swiped $dir');
        },
        enableSwipeUp: true,
        enableSwipeDown: true,
      ),
    );
  }

  List<Widget> _buildCardItems() {
    // Create a list of card widgets
    return List.generate(5, (index) {
      return Card(
        color: Colors.primaries[index % Colors.primaries.length],
        child: Center(
          child: Text(
            'Card $index',
            style: TextStyle(fontSize: 24, color: Colors.white),
          ),
        ),
      );
    });
  }
}

// Application Flow Explanation:
// 1. The `MyApp` widget sets up the MaterialApp and specifies `RealFlutter` as the home widget.
// 2. `RealFlutter` is a stateful widget that manages the swipeable card stack.
// 3. `_RealFlutterState` initializes a `SwipeableCardSectionController` to control the card stack.
// 4. The `SwipeableCardsSection` widget is used to display the stack of cards.
// 5. `_buildCardItems` generates a list of card widgets with different colors and labels.
// 6. The `onCardSwiped` callback handles swipe events, printing the direction and index of the swiped card.
// 7. The app allows swiping in all four directions: left, right, up, and down.
```

<-- END_MAIN -->
```

This blog provides a comprehensive overview of the `swipeable_card_stack` package, guiding you through its setup and usage, and culminating in a complete example to demonstrate its capabilities.
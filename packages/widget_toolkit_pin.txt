<-- START_DESCRIPTION -->

**Widget Toolkit Pin Package Overview**
=====================================

The `widget_toolkit_pin` package is a Flutter library that provides a customizable PIN entry field for secure authentication. It's designed to be highly customizable, allowing developers to tailor the appearance and behavior to their specific needs.

**When to Use This Package**
---------------------------

This package is ideal for applications that require secure authentication, such as:

* Banking and finance apps
* Password managers
* Secure messaging apps
* Any app that requires sensitive user input

**Key Features**
----------------

* Customizable PIN length
* Optional numeric keypad
* Error handling and validation
* Support for Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setup and Configuration**
-------------------------

To use the `widget_toolkit_pin` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  flutter:
    sdk: flutter
  widget_toolkit_pin: ^1.0.0
```
2. Run `flutter pub get` to install the package.
3. Import the package in your Dart file:
```dart
import 'package:widget_toolkit_pin/widget_toolkit_pin.dart';
```
**Platform-Specific Details**
---------------------------

### Android

No additional configuration is required for Android.

### iOS

To use the numeric keypad on iOS, add the following code to your `Info.plist` file:
```xml
<key>UIKeyboardType</key>
<string>NumberPad</string>
```
**Using the Package**
---------------------

To create a PIN entry field, use the `WidgetToolkitPin` widget:
```dart
WidgetToolkitPin(
  length: 4, // customizable PIN length
  onChanged: (pin) {
    // handle PIN entry
  },
  onError: (error) {
    // handle error
  },
)
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:widget_toolkit_pin/widget_toolkit_pin.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Widget Toolkit Pin Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  String _pin = '';

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Widget Toolkit Pin Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Enter PIN:',
              style: TextStyle(fontSize: 24),
            ),
            WidgetToolkitPin(
              length: 4,
              onChanged: (pin) {
                setState(() {
                  _pin = pin;
                });
              },
              onError: (error) {
                print('Error: $error');
              },
            ),
            Text(
              'PIN: $_pin',
              style: TextStyle(fontSize: 24),
            ),
          ],
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user is presented with a PIN entry field.
// 2. The user enters a PIN, which is validated by the WidgetToolkitPin widget.
// 3. If the PIN is valid, the onChanged callback is called with the entered PIN.
// 4. The PIN is displayed on the screen.
// 5. If the user enters an invalid PIN, the onError callback is called with an error message.
```

// Summary:
// The code flows as follows: the user is presented with a PIN entry field, which is validated by the WidgetToolkitPin widget. If the PIN is valid, the onChanged callback is called with the entered PIN, which is then displayed on the screen. If the user enters an invalid PIN, the onError callback is called with an error message.

<-- END_MAIN -->
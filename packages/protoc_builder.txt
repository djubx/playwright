# Protoc Builder: A Comprehensive Guide to the Flutter Package

## <-- START_DESCRIPTION -->

### Description

The `protoc_builder` package is a powerful tool for Flutter developers looking to integrate Protocol Buffers (protobuf) into their applications. Protocol Buffers is a language-agnostic binary serialization format developed by Google, which is efficient for data interchange between services. The `protoc_builder` package simplifies the process of generating Dart code from `.proto` files, allowing developers to easily work with structured data.

### When to Use

You should consider using `protoc_builder` in scenarios where:
- You need to communicate with gRPC services.
- You want to serialize and deserialize structured data efficiently.
- You are working on applications that require high-performance data interchange.

### Features

- **Code Generation**: Automatically generates Dart classes from `.proto` files.
- **Support for gRPC**: Facilitates the use of gRPC in Flutter applications.
- **Customizable Options**: Allows customization of generated code through various options.
- **Cross-Platform Compatibility**: Works seamlessly on both Android and iOS platforms.

## <-- END_DESCRIPTION -->

## <-- START_TUTORIAL -->

### Tutorial

#### Installation

To get started with `protoc_builder`, you need to add it to your `pubspec.yaml` file:

```yaml
dev_dependencies:
  protoc_builder: ^latest_version
```

Make sure to replace `latest_version` with the most recent version available on [pub.dev](https://pub.dev/packages/protoc_builder).

#### Setting Up Protocol Buffers

1. **Install Protocol Buffers**: Ensure you have the Protocol Buffers compiler (`protoc`) installed on your machine. You can download it from the [Protocol Buffers releases page](https://github.com/protocolbuffers/protobuf/releases).

2. **Create a `.proto` File**: Define your data structure in a `.proto` file. For example, create a file named `message.proto`:

   ```proto
   syntax = "proto3";

   message User {
     string name = 1;
     int32 age = 2;
   }
   ```

3. **Generate Dart Code**: Use the `protoc` command to generate Dart code from your `.proto` file. Run the following command in your terminal:

   ```bash
   protoc --dart_out=lib/src/generated -Iprotos protos/message.proto
   ```

   This command specifies the output directory for the generated Dart files.

#### Platform-Specific Configuration

- **Android**: Ensure that your `android/app/build.gradle` file includes the necessary dependencies for gRPC and Protocol Buffers.

- **iOS**: Make sure to add the required configurations in your `ios/Podfile` to support gRPC.

#### Using the Package

Once you have set up the package and generated the Dart code, you can start using it in your Flutter application. Import the generated files and use the classes as needed.

## <-- END_TUTORIAL -->

## <-- START_MAIN -->

### Complete Example

```dart
import 'package:flutter/material.dart';
import 'src/generated/message.pb.dart'; // Import the generated protobuf classes

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Protoc Builder Example',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Protoc Builder Example'),
        ),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              // Create a new User instance
              User user = User()
                ..name = 'John Doe' // Set the name
                ..age = 30; // Set the age

              // Serialize the User instance to binary format
              List<int> serializedUser = user.writeToBuffer();

              // Deserialize the binary data back to a User instance
              User deserializedUser = User.fromBuffer(serializedUser);

              // Display the deserialized user information
              showDialog(
                context: context,
                builder: (context) => AlertDialog(
                  title: Text('User Info'),
                  content: Text('Name: ${deserializedUser.name}, Age: ${deserializedUser.age}'),
                  actions: [
                    TextButton(
                      onPressed: () => Navigator.of(context).pop(),
                      child: Text('Close'),
                    ),
                  ],
                ),
              );
            },
            child: Text('Create User'),
          ),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the RealFlutter widget.
// 2. The RealFlutter widget builds a MaterialApp with a title and a Scaffold.
// 3. Inside the Scaffold, there's a Center widget containing an ElevatedButton.
// 4. When the button is pressed, a new User instance is created and populated with data.
// 5. The User instance is serialized into a binary format using writeToBuffer().
// 6. The binary data is then deserialized back into a User instance using fromBuffer().
// 7. Finally, an AlertDialog is displayed showing the deserialized user's name and age.
```

## <-- END_MAIN -->

### Summary

In this blog post, we explored the `protoc_builder` package, which allows Flutter developers to easily integrate Protocol Buffers into their applications. We covered the installation process, platform-specific configurations, and provided a complete example demonstrating how to create, serialize, and deserialize a user object. This package is particularly useful for applications that require efficient data interchange, especially when working with gRPC services.
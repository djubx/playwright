<-- START_DESCRIPTION -->

# Flutter Auto Cache Package
================================

The `flutter_auto_cache` package is a powerful caching solution for Flutter applications. It provides a simple and efficient way to cache data, reducing the need for frequent network requests and improving overall app performance.

## When to Use
--------------

Use `flutter_auto_cache` when you need to cache data that is frequently accessed or updated, such as:

* API responses
* Database queries
* Image loading
* Heavy computations

## Features
------------

* **Automatic caching**: Cache data without writing any caching logic.
* **Cache expiration**: Set expiration times for cached data.
* **Cache invalidation**: Invalidate cached data when it becomes outdated.
* **Cache statistics**: Get insights into cache hits, misses, and evictions.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up Flutter Auto Cache
================================

## Step 1: Add the Package
-------------------------

Add the `flutter_auto_cache` package to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_auto_cache: ^1.0.0
```
## Step 2: Import the Package
---------------------------

Import the package in your Dart file:
```dart
import 'package:flutter_auto_cache/flutter_auto_cache.dart';
```
## Step 3: Initialize the Cache
-----------------------------

Initialize the cache in your app's `main` function:
```dart
void main() {
  WidgetsFlutterBinding.ensureInitialized();
  await FlutterAutoCache.init();
  runApp(MyApp());
}
```
## Step 4: Use the Cache
----------------------

Use the cache to store and retrieve data:
```dart
class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Auto Cache Example'),
      ),
      body: Center(
        child: FutureBuilder(
          future: FlutterAutoCache.get('my_data'),
          builder: (context, snapshot) {
            if (snapshot.hasData) {
              return Text(snapshot.data);
            } else {
              return CircularProgressIndicator();
            }
          },
        ),
      ),
    );
  }
}
```
## Platform-Specific Details
---------------------------

### Android

* Add the following code to your `AndroidManifest.xml` file:
```xml
<application
    ...
    android:usesCleartextTraffic="true"
    ...>
</application>
```
### iOS

* Add the following code to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_auto_cache/flutter_auto_cache.dart';

void main() {
  WidgetsFlutterBinding.ensureInitialized();
  await FlutterAutoCache.init();
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Auto Cache Example',
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Step 1: Initialize the cache
  Future<void> _initCache() async {
    await FlutterAutoCache.init();
  }

  // Step 2: Store data in the cache
  Future<void> _storeData() async {
    await FlutterAutoCache.set('my_data', 'Hello, World!');
  }

  // Step 3: Retrieve data from the cache
  Future<String> _getData() async {
    return await FlutterAutoCache.get('my_data');
  }

  // Step 4: Invalidate the cache
  Future<void> _invalidateCache() async {
    await FlutterAutoCache.invalidate('my_data');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Auto Cache Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            ElevatedButton(
              onPressed: _initCache,
              child: Text('Initialize Cache'),
            ),
            ElevatedButton(
              onPressed: _storeData,
              child: Text('Store Data'),
            ),
            ElevatedButton(
              onPressed: _getData,
              child: Text('Get Data'),
            ),
            ElevatedButton(
              onPressed: _invalidateCache,
              child: Text('Invalidate Cache'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user initializes the cache by pressing the "Initialize Cache" button.
// 2. The user stores data in the cache by pressing the "Store Data" button.
// 3. The user retrieves data from the cache by pressing the "Get Data" button.
// 4. The user invalidates the cache by pressing the "Invalidate Cache" button.
// This flow demonstrates the basic usage of the Flutter Auto Cache package.

// Final summary:
// The Flutter Auto Cache package provides a simple and efficient way to cache data in Flutter applications.
// This example demonstrates the basic usage of the package, including initializing the cache, storing data, retrieving data, and invalidating the cache.
```

<-- END_MAIN -->
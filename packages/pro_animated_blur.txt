```markdown
<!-- START_DESCRIPTION -->
# Overview of the pro_animated_blur Flutter Package

The `pro_animated_blur` package is a powerful tool for Flutter developers looking to add dynamic blur effects to their applications. This package allows for smooth and customizable blur animations, enhancing the visual appeal of your app. It is particularly useful in scenarios where you want to create a sense of depth or focus on specific UI elements while blurring the background.

## When to Use pro_animated_blur

- **Background Effects**: When you want to blur the background of a widget to emphasize the foreground content.
- **Modal Dialogs**: To create a visually appealing modal dialog that stands out against the blurred background.
- **Image Overlays**: When displaying images with text overlays, blurring the image can help the text stand out more clearly.

## Features

- **Customizable Blur Radius**: Adjust the intensity of the blur effect to suit your design needs.
- **Animation Support**: Smoothly animate the blur effect for a more engaging user experience.
- **Easy Integration**: Simple to set up and use within your existing Flutter applications.

With these features, `pro_animated_blur` can significantly enhance the user interface of your Flutter applications, making them more interactive and visually appealing.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using pro_animated_blur

## Step 1: Adding the Dependency

To get started with the `pro_animated_blur` package, you need to add it to your `pubspec.yaml` file. Open your `pubspec.yaml` and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  pro_animated_blur: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command in your terminal to install it:

```bash
flutter pub get
```

## Step 2: Platform-Specific Configuration

### Android

For Android, ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
        ...
    }
}
```

### iOS

For iOS, you may need to enable the `NSPhotoLibraryUsageDescription` in your `Info.plist` if your app accesses the photo library. Add the following line:

```xml
<key>NSPhotoLibraryUsageDescription</key>
<string>This app requires access to the photo library.</string>
```

## Step 3: Using pro_animated_blur in Your App

Now that you have set up the package, you can start using it in your Flutter application. Below is a simple example of how to implement the `pro_animated_blur` package.

1. Import the package in your Dart file:

```dart
import 'package:pro_animated_blur/pro_animated_blur.dart';
```

2. Use the `ProAnimatedBlur` widget in your widget tree to apply the blur effect.

```dart
ProAnimatedBlur(
  blur: 10.0, // Set the blur radius
  duration: Duration(milliseconds: 300), // Animation duration
  child: YourChildWidget(), // The widget to apply the blur effect to
)
```

With these steps, you are ready to implement the `pro_animated_blur` package in your Flutter application!
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of pro_animated_blur

```dart
import 'package:flutter/material.dart';
import 'package:pro_animated_blur/pro_animated_blur.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Pro Animated Blur Example',
      home: HomeScreen(),
    );
  }
}

class HomeScreen extends StatefulWidget {
  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  // Variable to control the blur effect
  double _blurValue = 0.0;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Pro Animated Blur Example'),
      ),
      body: Stack(
        children: [
          // Background image
          Image.network(
            'https://example.com/your-image.jpg', // Replace with a valid image URL
            fit: BoxFit.cover,
            height: double.infinity,
            width: double.infinity,
          ),
          // Animated blur effect
          ProAnimatedBlur(
            blur: _blurValue, // Apply the current blur value
            duration: Duration(milliseconds: 300), // Animation duration
            child: Center(
              child: ElevatedButton(
                onPressed: () {
                  // Toggle blur value on button press
                  setState(() {
                    _blurValue = _blurValue == 0.0 ? 10.0 : 0.0; // Toggle between 0 and 10
                  });
                },
                child: Text('Toggle Blur'),
              ),
            ),
          ),
        ],
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the MyApp widget.
// 2. MyApp builds a MaterialApp with a title and a home screen.
// 3. HomeScreen is a stateful widget that maintains the current blur value.
// 4. The build method of HomeScreen creates a Stack widget containing:
//    - A background image loaded from a URL.
//    - A ProAnimatedBlur widget that applies the blur effect based on the _blurValue.
// 5. An ElevatedButton is placed in the center of the screen.
// 6. When the button is pressed, the _blurValue toggles between 0.0 and 10.0, triggering the blur animation.
```
<!-- END_MAIN -->
``` 

This structured blog provides a comprehensive overview of the `pro_animated_blur` package, guiding users through its features, setup, and practical implementation in a Flutter application.
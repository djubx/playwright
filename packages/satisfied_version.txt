<-- START_DESCRIPTION -->

# Satisfied Version Flutter Package
=====================================

The `satisfied_version` Flutter package is a utility library that helps developers manage versioning in their Flutter applications. It provides a simple way to check if the current app version meets certain conditions, such as being greater than or equal to a specified version.

### When to Use This Package

This package is useful when you want to:

* Check if the user is running the latest version of your app
* Restrict access to certain features based on the app version
* Display a message or prompt the user to update the app if they are running an outdated version

### Features

* Easy-to-use API for checking app versions
* Supports semantic versioning (e.g., 1.2.3)
* Works on both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the Package
=====================================

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  satisfied_version: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

In your Dart file, import the package:
```dart
import 'package:satisfied_version/satisfied_version.dart';
```
### Step 3: Use the Package

Create an instance of the `SatisfiedVersion` class, passing in the current app version:
```dart
SatisfiedVersion version = SatisfiedVersion('1.2.3');
```
Then, use the `isSatisfied` method to check if the version meets a certain condition:
```dart
bool isSatisfied = version.isSatisfied('>=1.2.0');
```
### Platform-Specific Details

* On Android, the package uses the `android.os.Build.VERSION` class to get the current app version.
* On iOS, the package uses the `NSBundle` class to get the current app version.

### Configurations and Optimizations

* Make sure to update the `version` property in your `pubspec.yaml` file to match the version of your app.
* You can customize the version comparison logic by passing a custom `VersionComparator` instance to the `SatisfiedVersion` constructor.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:satisfied_version/satisfied_version.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Satisfied Version Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  String _currentVersion = '1.2.3';

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Satisfied Version Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text('Current Version: $_currentVersion'),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                SatisfiedVersion version = SatisfiedVersion(_currentVersion);
                bool isSatisfied = version.isSatisfied('>=1.2.0');
                if (isSatisfied) {
                  print('Version is satisfied!');
                } else {
                  print('Version is not satisfied!');
                }
              },
              child: Text('Check Version'),
            ),
          ],
        ),
      ),
    );
  }
}

// The app starts by running the main function, which creates an instance of the MyApp widget.
// The MyApp widget builds a MaterialApp with a title and a home page.
// The home page is an instance of the MyHomePage widget, which is a stateful widget.
// The MyHomePage widget builds a Scaffold with an AppBar and a body.
// The body is a Center widget with a Column of children.
// The first child is a Text widget displaying the current version.
// The second child is an ElevatedButton with an onPressed callback.
// When the button is pressed, the callback creates an instance of the SatisfiedVersion class with the current version.
// It then checks if the version is satisfied using the isSatisfied method.
// If the version is satisfied, it prints a message to the console.
// If the version is not satisfied, it prints a different message to the console.

// In summary, this app displays the current version and allows the user to check if it meets a certain condition.
// The app uses the SatisfiedVersion package to perform the version comparison.
```

<-- END_MAIN -->
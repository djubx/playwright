<-- START_DESCRIPTION -->

# Refena Flutter Package: A Comprehensive Overview
=====================================================

The Refena Flutter package is a powerful tool for simplifying the process of creating and managing complex forms in Flutter applications. With its robust features and intuitive API, Refena streamlines the development process, saving you time and effort.

### Key Features:

*   Automatic form validation and error handling
*   Support for custom form fields and validation rules
*   Seamless integration with existing Flutter widgets
*   Highly customizable and extensible architecture

### When to Use Refena:

*   Complex form handling: Refena shines when dealing with intricate forms that require robust validation and error handling.
*   Custom form fields: If you need to create custom form fields with unique validation rules, Refena provides a flexible and intuitive API.
*   Rapid prototyping: Refena's simplicity and ease of use make it an excellent choice for rapid prototyping and development.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using Refena
=============================

### Step 1: Add Refena to Your Project

Add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  refena: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import Refena

Import Refena in your Dart file:

```dart
import 'package:refena/refena.dart';
```

### Step 3: Create a Refena Form

Create a Refena form using the `RefenaForm` widget:

```dart
RefenaForm(
  child: // Your form fields here
)
```

### Step 4: Add Form Fields

Add form fields using the `RefenaField` widget:

```dart
RefenaField(
  label: 'Email',
  validator: (value) {
    if (!value.contains('@')) {
      return 'Invalid email';
    }
    return null;
  }
)
```

### Platform-Specific Details:

*   Android: No additional configuration is required.
*   iOS: No additional configuration is required.

### Optimizations:

*   Use `RefenaForm` with a `ListView` for optimal performance.
*   Avoid using `RefenaField` with a `TextFormField` as it can cause unnecessary rebuilds.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:refena/refena.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Refena Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _formKey = GlobalKey<RefenaFormState>();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Refena Demo'),
      ),
      body: RefenaForm(
        key: _formKey,
        child: ListView(
          children: [
            RefenaField(
              label: 'Email',
              validator: (value) {
                if (!value.contains('@')) {
                  return 'Invalid email';
                }
                return null;
              }
            ),
            RefenaField(
              label: 'Password',
              obscureText: true,
              validator: (value) {
                if (value.length < 8) {
                  return 'Password too short';
                }
                return null;
              }
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                if (_formKey.currentState.validate()) {
                  print('Form is valid');
                } else {
                  print('Form is invalid');
                }
              },
              child: Text('Submit'),
            )
          ]
        )
      )
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and is presented with a form containing two fields: email and password.
// 2. The user enters their email and password, and the form is validated in real-time using Refena's built-in validation.
// 3. If the form is valid, the user can submit it by pressing the "Submit" button.
// 4. When the form is submitted, the app checks if the form is valid using the `_formKey.currentState.validate()` method.
// 5. If the form is valid, the app prints "Form is valid" to the console. Otherwise, it prints "Form is invalid".

// In summary, Refena simplifies the process of creating and managing complex forms in Flutter applications.
// It provides a robust and intuitive API for validating forms and handling errors, making it an excellent choice for rapid prototyping and development.

```

<-- END_MAIN -->
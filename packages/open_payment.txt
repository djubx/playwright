<-- START_DESCRIPTION -->

# Open Payment Flutter Package
================================

The `open_payment` Flutter package provides a simple and secure way to handle payments in your Flutter applications. It supports various payment methods, including credit/debit cards, PayPal, and more.

## When to Use
--------------

Use the `open_payment` package when you need to integrate payment processing into your Flutter app. This package is ideal for e-commerce apps, subscription-based services, and any other application that requires payment processing.

## Features
------------

*   Supports multiple payment methods (credit/debit cards, PayPal, etc.)
*   Secure payment processing using encryption and tokenization
*   Easy integration with your existing Flutter app
*   Customizable payment UI

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Open Payment Package
--------------------------------------

To use the `open_payment` package in your Flutter app, follow these steps:

### Step 1: Add the Package to Your `pubspec.yaml` File

```yml
dependencies:
  flutter:
    sdk: flutter
  open_payment: ^1.0.0
```

### Step 2: Run `flutter pub get` to Install the Package

```bash
flutter pub get
```

### Step 3: Import the Package in Your Dart File

```dart
import 'package:open_payment/open_payment.dart';
```

### Platform-Specific Configurations

#### Android

In your `AndroidManifest.xml` file, add the following lines:

```xml
<uses-permission android:name="android.permission.INTERNET" />
<application
    ...
    android:usesCleartextTraffic="true">
    ...
</application>
```

#### iOS

In your `Info.plist` file, add the following lines:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

### Initializing the Open Payment Package

```dart
void main() {
  runApp(
    OpenPayment(
      apiKey: 'YOUR_API_KEY',
      apiSecret: 'YOUR_API_SECRET',
      child: MyApp(),
    ),
  );
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:open_payment/open_payment.dart';

void main() {
  runApp(
    OpenPayment(
      apiKey: 'YOUR_API_KEY',
      apiSecret: 'YOUR_API_SECRET',
      child: RealFlutter(),
    ),
  );
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Create a payment controller
  final _paymentController = PaymentController();

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Open Payment Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              // Create a payment button
              ElevatedButton(
                onPressed: () async {
                  // Create a payment request
                  final paymentRequest = PaymentRequest(
                    amount: 10.99,
                    currency: 'USD',
                    paymentMethodTypes: ['card'],
                  );

                  // Show the payment dialog
                  final paymentResponse = await _paymentController.showPaymentDialog(
                    context: context,
                    paymentRequest: paymentRequest,
                  );

                  // Handle the payment response
                  if (paymentResponse != null) {
                    print('Payment successful!');
                  } else {
                    print('Payment failed!');
                  }
                },
                child: Text('Make Payment'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user clicks the "Make Payment" button.
// 2. A payment request is created with the specified amount and currency.
// 3. The payment dialog is shown to the user, where they can enter their payment details.
// 4. Once the user submits their payment details, the payment response is handled.
// 5. If the payment is successful, a success message is printed to the console.
// 6. If the payment fails, a failure message is printed to the console.

// In summary, this code creates a simple payment button that, when clicked, shows a payment dialog to the user.
// The payment dialog allows the user to enter their payment details, and once submitted, the payment response is handled.
// The payment response is then used to determine whether the payment was successful or not.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Sweetsheet Flutter Package: A Comprehensive Overview
=====================================================

The Sweetsheet Flutter package is a powerful tool for creating visually appealing and user-friendly bottom sheets in Flutter applications. It provides a simple and intuitive API for customizing the appearance and behavior of bottom sheets, making it an ideal choice for developers who want to enhance the user experience of their apps.

### When to Use Sweetsheet

Sweetsheet is perfect for scenarios where you need to display additional information or options to the user without navigating away from the current screen. Some common use cases include:

* Displaying a list of options or actions
* Showing a detailed view of an item
* Providing a tutorial or instructions
* Offering a settings or configuration menu

### Key Features

* Customizable appearance and behavior
* Support for multiple bottom sheet styles
* Easy integration with existing Flutter apps
* Platform-specific optimizations for Android and iOS

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using Sweetsheet
================================

### Step 1: Add the Sweetsheet Package to Your Pubspec.yaml File

```yml
dependencies:
  flutter:
    sdk: flutter
  sweetsheet: ^1.0.0
```

### Step 2: Import the Sweetsheet Package in Your Dart File

```dart
import 'package:sweetsheet/sweetsheet.dart';
```

### Step 3: Create a Sweetsheet Instance

```dart
Sweetsheet _sweetsheet = Sweetsheet();
```

### Step 4: Customize the Sweetsheet Appearance and Behavior

```dart
_sweetsheet
  ..setTitle('My Sweetsheet')
  ..setDescription('This is a sample sweetsheet')
  ..setPositiveButton('OK', () {
    // Handle positive button click
  })
  ..setNegativeButton('Cancel', () {
    // Handle negative button click
  });
```

### Step 5: Show the Sweetsheet

```dart
_sweetsheet.show(context);
```

### Platform-Specific Details

* Android: Sweetsheet uses the native Android bottom sheet component, which provides a seamless user experience.
* iOS: Sweetsheet uses a custom implementation to mimic the native iOS bottom sheet behavior.

### Required Configurations and Optimizations

* Make sure to add the `Sweetsheet` widget to your app's widget tree.
* Use the `Sweetsheet` instance to customize the appearance and behavior of the bottom sheet.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:sweetsheet/sweetsheet.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Sweetsheet Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  Sweetsheet _sweetsheet = Sweetsheet();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Sweetsheet Demo'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            _sweetsheet
              ..setTitle('My Sweetsheet')
              ..setDescription('This is a sample sweetsheet')
              ..setPositiveButton('OK', () {
                // Handle positive button click
              })
              ..setNegativeButton('Cancel', () {
                // Handle negative button click
              });
            _sweetsheet.show(context);
          },
          child: Text('Show Sweetsheet'),
        ),
      ),
    );
  }
}

// The app starts by running the main function, which creates a new instance of the MyApp widget.
// The MyApp widget builds a MaterialApp with a title and theme.
// The home property of the MaterialApp is set to an instance of the MyHomePage widget.
// The MyHomePage widget is a stateful widget that creates a Scaffold with an AppBar and a body.
// The body of the Scaffold contains a Center widget with an ElevatedButton.
// When the ElevatedButton is pressed, it creates a new instance of the Sweetsheet and customizes its appearance and behavior.
// The Sweetsheet is then shown using the show method.
// The user can interact with the Sweetsheet by clicking on the positive or negative buttons.
// The app handles the button clicks by executing the corresponding callback functions.

```

<-- END_MAIN -->
```markdown
<-- START_DESCRIPTION -->

# WebSocket Package for Flutter: An Overview

The `web_socket` package in Flutter is a powerful tool for developers looking to implement real-time communication in their applications. This package provides a simple and efficient way to establish a WebSocket connection, allowing for two-way interactive communication between the client and server. 

## When to Use the WebSocket Package

WebSockets are ideal for applications that require real-time updates, such as chat applications, live sports scores, stock market updates, or any scenario where data needs to be pushed to the client without the need for polling. The `web_socket` package simplifies the process of connecting to a WebSocket server, sending and receiving messages, and handling connection events.

## Features

- **Easy Connection Management**: Establish and manage WebSocket connections with minimal code.
- **Event Handling**: Listen for connection events such as open, close, and error.
- **Message Handling**: Send and receive messages in real-time.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS platforms.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the WebSocket Package in Flutter

In this tutorial, we will walk through the process of setting up and using the `web_socket` package in a Flutter application. We will cover platform-specific configurations for both Android and iOS.

## Step 1: Add the Dependency

First, add the `web_socket` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  web_socket: ^1.0.0
```

Run `flutter pub get` to install the package.

## Step 2: Platform-Specific Configurations

### Android

For Android, ensure that your app has internet permissions. Open `android/app/src/main/AndroidManifest.xml` and add the following permission:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
```

### iOS

For iOS, no additional configuration is required beyond ensuring that your app has network permissions, which is typically handled by default.

## Step 3: Using the WebSocket Package

Create a new Dart file, `real_flutter.dart`, and import the package:

```dart
import 'package:web_socket/web_socket.dart';
```

Initialize the WebSocket connection in your main class, `RealFlutter`, and handle connection events and messages.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:web_socket/web_socket.dart';

void main() => runApp(RealFlutter());

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'WebSocket Demo',
      home: WebSocketDemo(),
    );
  }
}

class WebSocketDemo extends StatefulWidget {
  @override
  _WebSocketDemoState createState() => _WebSocketDemoState();
}

class _WebSocketDemoState extends State<WebSocketDemo> {
  late WebSocket _webSocket;
  String _message = "No message received";

  @override
  void initState() {
    super.initState();
    _connectWebSocket();
  }

  void _connectWebSocket() async {
    // Establish a WebSocket connection
    _webSocket = await WebSocket.connect('ws://echo.websocket.org');

    // Listen for incoming messages
    _webSocket.listen((data) {
      setState(() {
        _message = data;
      });
    }, onError: (error) {
      print("WebSocket Error: $error");
    }, onDone: () {
      print("WebSocket closed");
    });
  }

  void _sendMessage(String message) {
    // Send a message through the WebSocket
    if (_webSocket != null) {
      _webSocket.add(message);
    }
  }

  @override
  void dispose() {
    // Close the WebSocket connection when the widget is disposed
    _webSocket.close();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('WebSocket Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text('Received: $_message'),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () => _sendMessage("Hello WebSocket!"),
              child: Text('Send Message'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application starts by running the RealFlutter widget, which sets up a MaterialApp.
// The home screen is set to WebSocketDemo, a stateful widget that manages the WebSocket connection.
// In the initState method, a WebSocket connection is established to a test server.
// The WebSocket listens for incoming messages and updates the UI when a message is received.
// A button is provided to send a message to the WebSocket server.
// The connection is properly closed in the dispose method to free up resources.
```

<-- END_MAIN -->
```
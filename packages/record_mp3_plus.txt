<-- START_DESCRIPTION -->

# Record MP3 Plus Flutter Package
=====================================

The `record_mp3_plus` Flutter package is a powerful tool for recording and playing back audio files in MP3 format. It provides a simple and easy-to-use API for recording and playing back audio, making it ideal for a wide range of applications, from voice notes and audio messages to music recording and playback.

### Key Features

* Record audio in MP3 format
* Play back recorded audio
* Pause and resume recording and playback
* Get the duration of the recorded audio
* Get the path of the recorded audio file

### When to Use

The `record_mp3_plus` package is perfect for any application that requires audio recording and playback functionality. Some examples include:

* Voice note apps
* Audio messaging apps
* Music recording apps
* Podcasting apps
* Audio journaling apps

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Record MP3 Plus Package
==========================================

To use the `record_mp3_plus` package, you need to add it to your Flutter project's `pubspec.yaml` file. Here's how:

### Step 1: Add the Package to Your Pubspec.yaml File

```yml
dependencies:
  flutter:
    sdk: flutter
  record_mp3_plus: ^1.0.0
```

### Step 2: Import the Package in Your Dart File

```dart
import 'package:record_mp3_plus/record_mp3_plus.dart';
```

### Platform-Specific Details

#### Android

To use the `record_mp3_plus` package on Android, you need to add the following permissions to your `AndroidManifest.xml` file:

```xml
<uses-permission android:name="android.permission.RECORD_AUDIO" />
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
```

#### iOS

To use the `record_mp3_plus` package on iOS, you need to add the following lines to your `Info.plist` file:

```xml
<key>NSMicrophoneUsageDescription</key>
<string>This app needs access to the microphone to record audio.</string>
```

### Required Configurations and Optimizations

To optimize the performance of the `record_mp3_plus` package, you can adjust the following settings:

* `sampleRate`: The sample rate of the recorded audio. Default is 44100.
* `bitRate`: The bit rate of the recorded audio. Default is 128000.
* `channelCount`: The number of channels in the recorded audio. Default is 2.

You can adjust these settings by passing them as arguments to the `RecordMp3Plus` constructor:

```dart
RecordMp3Plus recordMp3Plus = RecordMp3Plus(
  sampleRate: 48000,
  bitRate: 192000,
  channelCount: 1,
);
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:record_mp3_plus/record_mp3_plus.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Record MP3 Plus Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  RecordMp3Plus _recordMp3Plus;
  bool _isRecording = false;
  bool _isPlaying = false;
  String _recordedFilePath;

  @override
  void initState() {
    super.initState();
    _recordMp3Plus = RecordMp3Plus();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Record MP3 Plus Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: _startRecording,
              child: Text('Start Recording'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _stopRecording,
              child: Text('Stop Recording'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _playRecordedFile,
              child: Text('Play Recorded File'),
            ),
            SizedBox(height: 20),
            Text(
              _isRecording
                  ? 'Recording...'
                  : _isPlaying
                      ? 'Playing...'
                      : 'Not recording or playing',
            ),
            SizedBox(height: 20),
            Text(_recordedFilePath ?? ''),
          ],
        ),
      ),
    );
  }

  void _startRecording() async {
    // Start recording
    await _recordMp3Plus.startRecording();
    setState(() {
      _isRecording = true;
    });
  }

  void _stopRecording() async {
    // Stop recording
    _recordedFilePath = await _recordMp3Plus.stopRecording();
    setState(() {
      _isRecording = false;
    });
  }

  void _playRecordedFile() async {
    // Play recorded file
    await _recordMp3Plus.playRecordedFile(_recordedFilePath);
    setState(() {
      _isPlaying = true;
    });
  }
}

// The app starts by creating a new instance of the MyApp widget.
// The MyApp widget builds a MaterialApp with a title and a theme.
// The home of the MaterialApp is the MyHomePage widget.
// The MyHomePage widget is a stateful widget that builds a Scaffold with an AppBar and a body.
// The body of the Scaffold is a Center widget that contains a Column of ElevatedButtons.
// Each ElevatedButton has an onPressed callback that calls a function to start or stop recording, or play the recorded file.
// The state of the MyHomePage widget is updated to reflect whether the app is recording or playing.
// The recorded file path is displayed on the screen.
```

<-- END_MAIN -->
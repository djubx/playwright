<-- START_DESCRIPTION -->

# Laravel Echo Null Flutter Package
=====================================

The `laravel_echo_null` Flutter package is a wrapper around the Laravel Echo JavaScript library, allowing Flutter developers to easily integrate real-time broadcasting into their applications. This package provides a simple and convenient way to handle real-time events, making it ideal for applications that require live updates, such as live scores, chat applications, or social media platforms.

### Features

*   Supports multiple broadcast drivers (e.g., Pusher, Redis, and more)
*   Easy event listening and broadcasting
*   Automatic reconnection handling

### When to Use

This package is perfect for applications that require real-time updates, such as:

*   Live scores or game updates
*   Chat applications or messaging platforms
*   Social media platforms with live updates
*   Real-time collaboration tools

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up Laravel Echo Null

To use the `laravel_echo_null` package, follow these steps:

### Step 1: Add the Package to Your Flutter Project

Add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  laravel_echo_null: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:laravel_echo_null/laravel_echo_null.dart';
```

### Step 3: Initialize Laravel Echo

Initialize Laravel Echo with your desired broadcast driver:

```dart
final echo = new LaravelEcho(
  broadcaster: 'pusher',
  key: 'YOUR_PUSHER_APP_KEY',
  cluster: 'mt1',
  encrypted: true,
);
```

### Step 4: Connect to the Broadcast Channel

Connect to the broadcast channel to start listening for events:

```dart
echo.channel('my-channel')
  .listen('MyEvent', (e) {
    print('Received event: ${e}');
  });
```

### Platform-Specific Details

For Android, add the following configuration to your `AndroidManifest.xml` file:

```xml
<application>
  ...
  <meta-data
    android:name="flutter.embedded_views"
    android:resource="@array/flutter_embedded_views"/>
</application>
```

For iOS, add the following configuration to your `Info.plist` file:

```xml
<key>FlutterEmbeddedViews</key>
<array>
  <string>flutter_echo</string>
</array>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:laravel_echo_null/laravel_echo_null.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Laravel Echo Null Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final echo = new LaravelEcho(
    broadcaster: 'pusher',
    key: 'YOUR_PUSHER_APP_KEY',
    cluster: 'mt1',
    encrypted: true,
  );

  @override
  void initState() {
    super.initState();
    // Connect to the broadcast channel
    echo.channel('my-channel')
      .listen('MyEvent', (e) {
        print('Received event: ${e}');
        // Update the UI with the received event
        setState(() {
          _eventText = 'Received event: ${e}';
        });
      });
  }

  String _eventText = '';

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Laravel Echo Null Demo'),
      ),
      body: Center(
        child: Text(_eventText),
      ),
    );
  }
}

// Application flow:
// 1. The app initializes Laravel Echo with the Pusher broadcast driver.
// 2. The app connects to the "my-channel" broadcast channel.
// 3. When an event is received on the channel, the app updates the UI with the received event.
// 4. The app displays the received event text on the screen.
```

// Final summary: The code initializes Laravel Echo, connects to a broadcast channel, listens for events, and updates the UI with received events. The app displays the received event text on the screen.

<-- END_MAIN -->
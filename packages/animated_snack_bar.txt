```markdown
<-- START_DESCRIPTION -->

# Animated Snack Bar Flutter Package

The `animated_snack_bar` Flutter package is a versatile and visually appealing tool for displaying snack bars in your Flutter applications. Unlike the standard `SnackBar` widget, this package provides enhanced animations and customization options, making it ideal for applications that require a more dynamic user interface.

## When to Use

- **User Feedback**: Use animated snack bars to provide feedback to users after they perform an action, such as saving data or completing a task.
- **Notifications**: Display brief notifications that do not require a full dialog or alert.
- **Error Messages**: Show error messages in a non-intrusive way that still captures the user's attention.

## Features

- **Custom Animations**: Choose from a variety of built-in animations or create your own.
- **Flexible Positioning**: Display snack bars at the top, bottom, or center of the screen.
- **Theming**: Customize colors, shapes, and text styles to match your app's theme.
- **Duration Control**: Set how long the snack bar should be visible.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using Animated Snack Bar

In this tutorial, we'll walk through the process of setting up and using the `animated_snack_bar` package in a Flutter project. We'll cover platform-specific configurations for both Android and iOS.

## Setup

1. **Add Dependency**

   First, add the `animated_snack_bar` package to your `pubspec.yaml` file:

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     animated_snack_bar: ^1.0.0
   ```

2. **Install Packages**

   Run the following command to install the new package:

   ```bash
   flutter pub get
   ```

3. **Platform-Specific Configurations**

   - **Android**: Ensure your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

     ```gradle
     defaultConfig {
         minSdkVersion 21
     }
     ```

   - **iOS**: No additional configuration is required for iOS.

## Using the Package

1. **Import the Package**

   In your Dart file, import the package:

   ```dart
   import 'package:animated_snack_bar/animated_snack_bar.dart';
   ```

2. **Display an Animated Snack Bar**

   Use the `RealFlutter` class to display a snack bar with custom animations:

   ```dart
   RealFlutter.showSnackBar(
     context: context,
     message: 'This is an animated snack bar!',
     type: AnimatedSnackBarType.success,
     duration: Duration(seconds: 3),
     position: AnimatedSnackBarPosition.bottom,
   );
   ```

   - **Context**: The BuildContext of the widget where the snack bar should be displayed.
   - **Message**: The text to display in the snack bar.
   - **Type**: The type of snack bar (e.g., success, error, info).
   - **Duration**: How long the snack bar should be visible.
   - **Position**: Where the snack bar should appear on the screen.

<-- END_TUTORIAL -->

<-- START_MAIN -->

# Complete Example: Flutter Main File

Below is a complete example of a Flutter application using the `animated_snack_bar` package. This example demonstrates how to integrate and use the package's features effectively.

```dart
import 'package:flutter/material.dart';
import 'package:animated_snack_bar/animated_snack_bar.dart';

void main() {
  runApp(MyApp());
}

// Main application widget
class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Animated Snack Bar Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: HomeScreen(),
    );
  }
}

// Home screen widget
class HomeScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Animated Snack Bar Example'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Display an animated snack bar when the button is pressed
            RealFlutter.showSnackBar(
              context: context,
              message: 'Hello from Animated Snack Bar!',
              type: AnimatedSnackBarType.info,
              duration: Duration(seconds: 3),
              position: AnimatedSnackBarPosition.bottom,
            );
          },
          child: Text('Show Snack Bar'),
        ),
      ),
    );
  }
}

// Application Flow:
// 1. The application starts with the `main` function, which runs `MyApp`.
// 2. `MyApp` is a stateless widget that sets up the MaterialApp with a home screen.
// 3. The `HomeScreen` widget is a scaffold with an AppBar and a centered button.
// 4. When the button is pressed, it triggers the `RealFlutter.showSnackBar` method.
// 5. The snack bar is displayed at the bottom of the screen with an info message.
// 6. The snack bar automatically disappears after 3 seconds.
```

<-- END_MAIN -->
```

This blog post provides a comprehensive guide to using the `animated_snack_bar` package in Flutter applications. It covers the package's features, setup instructions, and a complete example to help developers integrate animated snack bars into their projects effectively.
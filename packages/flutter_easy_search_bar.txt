<-- START_DESCRIPTION -->

# Flutter Easy Search Bar Package
=====================================

The `flutter_easy_search_bar` package is a Flutter library that provides a simple and customizable search bar widget. It allows users to easily integrate a search bar into their Flutter app, making it easy to search for specific data or items.

### When to Use This Package

This package is useful when you need to add a search bar to your Flutter app, such as:

* Searching for specific data in a list or database
* Filtering items in a list or grid
* Providing a search function for users to find specific content

### Features

* Customizable search bar widget with various options (e.g., placeholder text, search icon, clear button)
* Support for searching and filtering data in a list or database
* Easy integration with existing Flutter apps

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Flutter Easy Search Bar Package
================================================================

### Step 1: Add the Package to Your Flutter Project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_easy_search_bar: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:flutter_easy_search_bar/flutter_easy_search_bar.dart';
```
### Step 3: Create a Search Bar Widget

Create a `SearchBar` widget and customize it as needed:
```dart
SearchBar(
  placeholder: 'Search for something',
  searchIcon: Icon(Icons.search),
  clearButton: Icon(Icons.clear),
  onChanged: (text) {
    // Handle search text changes here
  },
)
```
### Platform-Specific Details

* Android: No additional configuration is required.
* iOS: You may need to add the following line to your `Info.plist` file to enable the search bar:
```xml
<key>UISearchBar</key>
<true/>
```
### Optimizations

* You can optimize the search bar's performance by using a `debounce` function to delay the search request:
```dart
SearchBar(
  // ...
  onChanged: (text) {
    Future.delayed(Duration(milliseconds: 500), () {
      // Handle search text changes here
    });
  },
)
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_easy_search_bar/flutter_easy_search_bar.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Easy Search Bar Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final List<String> _items = ['Item 1', 'Item 2', 'Item 3', 'Item 4', 'Item 5'];
  final List<String> _filteredItems = [];
  final TextEditingController _searchController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Easy Search Bar Demo'),
      ),
      body: Column(
        children: [
          // Create a SearchBar widget
          SearchBar(
            placeholder: 'Search for something',
            searchIcon: Icon(Icons.search),
            clearButton: Icon(Icons.clear),
            controller: _searchController,
            onChanged: (text) {
              // Handle search text changes here
              setState(() {
                _filteredItems.clear();
                _items.forEach((item) {
                  if (item.toLowerCase().contains(text.toLowerCase())) {
                    _filteredItems.add(item);
                  }
                });
              });
            },
          ),
          // Display the filtered items
          Expanded(
            child: ListView.builder(
              itemCount: _filteredItems.length,
              itemBuilder: (context, index) {
                return ListTile(
                  title: Text(_filteredItems[index]),
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}

// The application flow:
// 1. The user types something in the search bar.
// 2. The `onChanged` callback is called with the new search text.
// 3. The callback filters the `_items` list based on the search text.
// 4. The filtered items are stored in the `_filteredItems` list.
// 5. The `ListView` is updated to display the filtered items.
```

// The code flows as follows:
// - The user types something in the search bar.
// - The `onChanged` callback is called with the new search text.
// - The callback filters the `_items` list based on the search text.
// - The filtered items are stored in the `_filteredItems` list.
// - The `ListView` is updated to display the filtered items.

<-- END_MAIN -->
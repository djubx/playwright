<-- START_DESCRIPTION -->

# casa_vertical_stepper Flutter Package
=====================================

The `casa_vertical_stepper` package is a Flutter widget that allows you to create a vertical stepper with a list of steps. It's a great way to guide users through a process or a series of tasks.

### When to Use This Package

You can use this package when you need to create a wizard-like interface or a step-by-step guide for your users. It's perfect for onboarding processes, tutorials, or any other scenario where you need to break down a complex process into smaller, manageable steps.

### Features

*   Vertical stepper layout
*   Customizable step indicators
*   Support for multiple step types (e.g., text, image, widget)
*   Optional step validation
*   Customizable colors and fonts

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the casa_vertical_stepper Package
===========================================================

### Step 1: Add the Package to Your pubspec.yaml File

```yml
dependencies:
  flutter:
    sdk: flutter
  casa_vertical_stepper: ^1.0.0
```

### Step 2: Import the Package in Your Dart File

```dart
import 'package:casa_vertical_stepper/casa_vertical_stepper.dart';
```

### Step 3: Create a List of Steps

```dart
List<Step> steps = [
  Step(
    title: Text('Step 1'),
    content: Text('This is the first step'),
  ),
  Step(
    title: Text('Step 2'),
    content: Text('This is the second step'),
  ),
  // Add more steps as needed
];
```

### Step 4: Create a CasaVerticalStepper Widget

```dart
CasaVerticalStepper(
  steps: steps,
  onStepTapped: (step) {
    // Handle step tap event
  },
  onStepContinue: () {
    // Handle step continue event
  },
  onStepCancel: () {
    // Handle step cancel event
  },
)
```

### Platform-Specific Details

The `casa_vertical_stepper` package works on both Android and iOS platforms. However, you may need to adjust the stepper's layout and styling to fit your app's design.

### Required Configurations or Optimizations

You can customize the stepper's appearance by using the various properties provided by the `CasaVerticalStepper` widget, such as `stepIndicator`, `stepIndicatorColor`, `activeStepIndicatorColor`, and more.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:casa_vertical_stepper/casa_vertical_stepper.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  int _currentStep = 0;
  List<Step> _steps = [
    Step(
      title: Text('Step 1'),
      content: Text('This is the first step'),
    ),
    Step(
      title: Text('Step 2'),
      content: Text('This is the second step'),
    ),
    Step(
      title: Text('Step 3'),
      content: Text('This is the third step'),
    ),
  ];

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('casa_vertical_stepper Demo'),
        ),
        body: CasaVerticalStepper(
          steps: _steps,
          onStepTapped: (step) {
            // Handle step tap event
            print('Step ${step + 1} tapped');
          },
          onStepContinue: () {
            // Handle step continue event
            if (_currentStep < _steps.length - 1) {
              setState(() {
                _currentStep++;
              });
            } else {
              print('Last step reached');
            }
          },
          onStepCancel: () {
            // Handle step cancel event
            if (_currentStep > 0) {
              setState(() {
                _currentStep--;
              });
            } else {
              print('First step reached');
            }
          },
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user is presented with a vertical stepper containing three steps.
// 2. The user can tap on any step to view its content.
// 3. The user can tap the "Continue" button to proceed to the next step.
// 4. The user can tap the "Cancel" button to go back to the previous step.
// 5. When the user reaches the last step, tapping the "Continue" button will print a message indicating that the last step has been reached.
// 6. When the user reaches the first step, tapping the "Cancel" button will print a message indicating that the first step has been reached.

// In summary, the casa_vertical_stepper package provides a simple and intuitive way to create a vertical stepper in Flutter. The package is highly customizable, and the example above demonstrates how to use it to create a basic stepper with three steps.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

Three Dart Package: A High-Level Overview
=====================================

The `three_dart` package is a powerful tool for creating 3D graphics in Flutter applications. It provides a simple and intuitive API for rendering 3D scenes, making it an ideal choice for developers looking to add 3D capabilities to their apps.

When to Use Three Dart
--------------------

The `three_dart` package is perfect for creating:

* 3D games
* Interactive 3D simulations
* 3D modeling and animation tools
* Virtual reality (VR) and augmented reality (AR) experiences

Features of Three Dart
---------------------

* Support for 3D rendering using WebGL and Metal
* Simple and intuitive API for creating 3D scenes
* Support for lighting, textures, and materials
* Built-in support for physics and animation

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setting Up Three Dart
---------------------

To use the `three_dart` package, follow these steps:

1. Add the `three_dart` package to your `pubspec.yaml` file:
```yml
dependencies:
  three_dart: ^1.0.0
```
2. Run `flutter pub get` to install the package.
3. Import the `three_dart` package in your Dart file:
```dart
import 'package:three_dart/three_dart.dart';
```
Platform-Specific Details
-------------------------

### Android

* Make sure to add the following lines to your `AndroidManifest.xml` file:
```xml
<uses-feature android:glEsVersion="0x00020000" android:required="true" />
<uses-feature android:name="android.hardware.vulkan.level" android:required="false" />
```
### iOS

* Make sure to add the following lines to your `Info.plist` file:
```xml
<key>UIRequiredDeviceCapabilities</key>
<array>
    <string>gles-2</string>
    <string>metal</string>
</array>
```
Using Three Dart
----------------

To create a 3D scene using `three_dart`, follow these steps:

1. Create a `ThreeDart` instance:
```dart
ThreeDart threeDart = ThreeDart();
```
2. Create a 3D scene:
```dart
Scene scene = threeDart.createScene();
```
3. Add objects to the scene:
```dart
Mesh mesh = threeDart.createMesh();
scene.add(mesh);
```
4. Render the scene:
```dart
threeDart.render(scene);
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:three_dart/three_dart.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Three Dart Example',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  ThreeDart _threeDart;
  Scene _scene;

  @override
  void initState() {
    super.initState();
    _threeDart = ThreeDart();
    _scene = _threeDart.createScene();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Three Dart Example'),
      ),
      body: Center(
        child: Container(
          width: 400,
          height: 400,
          child: ThreeDartWidget(
            threeDart: _threeDart,
            scene: _scene,
          ),
        ),
      ),
    );
  }
}

class ThreeDartWidget extends StatelessWidget {
  final ThreeDart threeDart;
  final Scene scene;

  ThreeDartWidget({this.threeDart, this.scene});

  @override
  Widget build(BuildContext context) {
    return Container(
      child: threeDart.render(scene),
    );
  }
}
```

// This is the main entry point of the app.
// We create a `MaterialApp` instance and set the `MyHomePage` widget as the home page.

// In the `MyHomePage` widget, we create a `ThreeDart` instance and a 3D scene in the `initState` method.

// We then create a `ThreeDartWidget` instance and pass the `ThreeDart` instance and the 3D scene to it.

// In the `ThreeDartWidget`, we call the `render` method of the `ThreeDart` instance and pass the 3D scene to it.
// This renders the 3D scene and returns a `Widget` that can be displayed on the screen.

// Finally, we display the `ThreeDartWidget` instance in the center of the screen.

<-- END_MAIN -->
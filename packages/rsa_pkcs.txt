```dart
import 'package:flutter/material.dart';
import 'package:rsa_pkcs/rsa_pkcs.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'RSA PKCS Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  String _encryptedData = '';
  String _decryptedData = '';

  Future<void> _generateKeyPair() async {
    RsaPkcs rsaPkcs = RsaPkcs();
    KeyPair keyPair = await rsaPkcs.generateKeyPair();

    // Encrypt data
    String encryptedData = await rsaPkcs.encrypt('Hello, World!', keyPair.publicKey);
    setState(() {
      _encryptedData = encryptedData;
    });

    // Decrypt data
    String decryptedData = await rsaPkcs.decrypt(encryptedData, keyPair.privateKey);
    setState(() {
      _decryptedData = decryptedData;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('RSA PKCS Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text('Encrypted Data:'),
            Text(_encryptedData),
            SizedBox(height: 20),
            Text('Decrypted Data:'),
            Text(_decryptedData),
          ],
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _generateKeyPair,
        tooltip: 'Generate Key Pair',
        child: Icon(Icons.lock),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user clicks the floating action button to generate a key pair.
// 2. The _generateKeyPair function is called, which generates a key pair using the RsaPkcs class.
// 3. The function then encrypts the string 'Hello, World!' using the public key.
// 4. The encrypted data is stored in the _encryptedData variable and displayed on the screen.
// 5. The function then decrypts the encrypted data using the private key.
// 6. The decrypted data is stored in the _decryptedData variable and displayed on the screen.

// This example demonstrates how to use the 'rsa_pkcs' package to generate a key pair, encrypt data, and decrypt data.

<-- END_MAIN -->
```
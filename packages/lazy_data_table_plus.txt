<-- START_DESCRIPTION -->

# Lazy Data Table Plus
The `lazy_data_table_plus` Flutter package is a powerful tool for creating data tables that can handle large amounts of data efficiently. It provides a range of features, including lazy loading, pagination, and customizable table cells.

## When to Use
This package is ideal for applications that require displaying large datasets, such as:

* Data analytics dashboards
* Database query results
* Large-scale data visualization

## Features

* Lazy loading: loads data only when it is needed, reducing memory usage and improving performance
* Pagination: allows users to navigate through large datasets with ease
* Customizable table cells: provides flexibility in displaying data

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
To use the `lazy_data_table_plus` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  lazy_data_table_plus: ^1.0.0
```
2. Import the package in your Dart file:
```dart
import 'package:lazy_data_table_plus/lazy_data_table_plus.dart';
```
3. Create a `LazyDataTable` widget and pass in your data:
```dart
LazyDataTable(
  data: yourData,
  columns: [
    DataColumn(label: Text('Column 1')),
    DataColumn(label: Text('Column 2')),
  ],
)
```
4. Configure the table as needed:
```dart
LazyDataTable(
  data: yourData,
  columns: [
    DataColumn(label: Text('Column 1')),
    DataColumn(label: Text('Column 2')),
  ],
  pagination: true,
  rowsPerPage: 10,
)
```
### Platform-Specific Details

* Android: no additional configuration required
* iOS: add the following line to your `Info.plist` file:
```xml
<key>UITableViewStyle</key>
<string>plain</string>
```
### Optimizations

* Use ` pagination: true` to enable pagination and improve performance
* Use `rowsPerPage` to control the number of rows displayed per page

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:lazy_data_table_plus/lazy_data_table_plus.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Lazy Data Table Plus Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  List<DataRow> _data = [];

  @override
  void initState() {
    super.initState();
    for (int i = 0; i < 100; i++) {
      _data.add(
        DataRow(
          cells: [
            DataCell(Text('Row $i')),
            DataCell(Text('Column 2')),
          ],
        ),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Lazy Data Table Plus Demo'),
      ),
      body: LazyDataTable(
        data: _data,
        columns: [
          DataColumn(label: Text('Column 1')),
          DataColumn(label: Text('Column 2')),
        ],
        pagination: true,
        rowsPerPage: 10,
      ),
    );
  }
}

// Application flow:
// 1. The app starts and the `MyApp` widget is built.
// 2. The `MyHomePage` widget is built and the `_data` list is initialized with 100 rows.
// 3. The `LazyDataTable` widget is built and the `_data` list is passed to it.
// 4. The `LazyDataTable` widget displays the data in a table with pagination.
// 5. The user can navigate through the pages using the pagination controls.
```

// Final summary:
// The code flows by first initializing the `_data` list with 100 rows in the `MyHomePage` widget.
// Then, the `LazyDataTable` widget is built and the `_data` list is passed to it.
// The `LazyDataTable` widget displays the data in a table with pagination, allowing the user to navigate through the pages.

<-- END_MAIN -->
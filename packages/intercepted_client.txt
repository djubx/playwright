<-- START_DESCRIPTION -->

# Intercepted Client Flutter Package
=====================================

The Intercepted Client package is a powerful tool for Flutter developers, allowing them to intercept and modify HTTP requests made by their app. This package is particularly useful for tasks such as:

* Logging HTTP requests and responses
* Modifying request headers or bodies
* Implementing custom authentication or caching logic
* Testing and debugging API integrations

The Intercepted Client package provides a simple and flexible API for intercepting HTTP requests, making it easy to integrate with existing Flutter apps.

### Features

* Intercept and modify HTTP requests made by the app
* Support for both HTTP and HTTPS requests
* Ability to modify request headers, body, and query parameters
* Support for custom authentication and caching logic
* Easy integration with existing Flutter apps

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Intercepted Client Package
=============================================

To use the Intercepted Client package in your Flutter app, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  intercepted_client: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:intercepted_client/intercepted_client.dart';
```
### Step 3: Create an Instance of the Intercepted Client

Create an instance of the Intercepted Client, passing in a callback function that will be called for each intercepted request:
```dart
final client = InterceptedClient(
  (request) async {
    // Modify the request here
    return request;
  },
);
```
### Step 4: Use the Intercepted Client

Use the Intercepted Client to make HTTP requests:
```dart
final response = await client.get(Uri.parse('https://example.com'));
```
### Platform-Specific Details

* On Android, the Intercepted Client uses the `okhttp` library to intercept requests.
* On iOS, the Intercepted Client uses the `URLSession` library to intercept requests.

### Required Configurations or Optimizations

* To use the Intercepted Client with HTTPS requests, you may need to configure your app to trust the certificate authority used by the server.
* To improve performance, you can configure the Intercepted Client to cache responses or use a custom caching logic.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:intercepted_client/intercepted_client.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Intercepted Client Example',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final client = InterceptedClient(
    (request) async {
      // Modify the request here
      print('Intercepted request: ${request.method} ${request.url}');
      return request;
    },
  );

  Future<void> _makeRequest() async {
    final response = await client.get(Uri.parse('https://example.com'));
    print('Response status code: ${response.statusCode}');
    print('Response body: ${response.body}');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Intercepted Client Example'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: _makeRequest,
          child: Text('Make Request'),
        ),
      ),
    );
  }
}

// The app starts by creating an instance of the Intercepted Client with a callback function.
// The callback function is called for each intercepted request, allowing us to modify the request.
// In this example, we simply print the request method and URL to the console.
// When the user presses the "Make Request" button, the app makes a GET request to https://example.com using the Intercepted Client.
// The response status code and body are printed to the console.
// The app uses the Intercepted Client to intercept and modify the request, demonstrating its functionality.
```

<-- END_MAIN -->
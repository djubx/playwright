<-- START_DESCRIPTION -->

# Multi-Window Flutter Package
The `multi_window` Flutter package allows you to create multiple windows in your Flutter application. This package is useful when you want to provide a secondary window for a specific task, such as a settings window or a help window.

## Features
- Create multiple windows with different routes
- Customize the window's title, size, and position
- Support for both Android and iOS platforms

## When to Use
- When you want to provide a secondary window for a specific task
- When you want to give users the ability to multitask within your app

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Multi-Window Package
To use the `multi_window` package, you need to add it to your `pubspec.yaml` file.

```yml
dependencies:
  flutter:
    sdk: flutter
  multi_window: ^0.1.0
```

Then, run `flutter pub get` to get the package.

## Platform-Specific Configurations
### Android
To use the `multi_window` package on Android, you need to add the following configuration to your `AndroidManifest.xml` file.

```xml
<application
  ...
  android:allowBackup="true"
  android:supportsRtl="true"
  android:theme="@style/AppTheme">
  ...
</application>
```

### iOS
To use the `multi_window` package on iOS, you need to add the following configuration to your `Info.plist` file.

```xml
<key>UIWindowSceneSessionRoleApplication</key>
<string>UISceneSessionRoleApplication</string>
```

## Using the Multi-Window Package
To create a new window, you can use the `MultiWindow` class.

```dart
import 'package:flutter/material.dart';
import 'package:multi_window/multi_window.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Multi-Window Demo'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            MultiWindow.createWindow(
              title: 'New Window',
              route: MaterialPageRoute(builder: (context) => NewWindow()),
            );
          },
          child: Text('Create New Window'),
        ),
      ),
    );
  }
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:multi_window/multi_window.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Multi-Window Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Step 1: Create a Scaffold with an AppBar and a Centered Button
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Multi-Window Demo'),
      ),
      body: Center(
        // Step 2: Create a Button that creates a new window when pressed
        child: ElevatedButton(
          onPressed: () {
            // Step 3: Create a new window with a title and a route
            MultiWindow.createWindow(
              title: 'New Window',
              route: MaterialPageRoute(builder: (context) => NewWindow()),
            );
          },
          child: Text('Create New Window'),
        ),
      ),
    );
  }
}

// Step 4: Create a new StatefulWidget for the new window
class NewWindow extends StatefulWidget {
  @override
  _NewWindowState createState() => _NewWindowState();
}

class _NewWindowState extends State<NewWindow> {
  // Step 5: Create a Scaffold with an AppBar and a Centered Text
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('New Window'),
      ),
      body: Center(
        child: Text('This is a new window'),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user presses the button to create a new window.
// 2. The MultiWindow.createWindow method is called with a title and a route.
// 3. A new window is created with the specified title and route.
// 4. The new window is displayed on top of the original window.
// 5. The user can interact with the new window independently of the original window.
```

<-- END_MAIN -->
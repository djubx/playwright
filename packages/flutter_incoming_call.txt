<-- START_DESCRIPTION -->

# Flutter Incoming Call Package
================================

The `flutter_incoming_call` package is a Flutter plugin that allows you to handle incoming calls in your Flutter application. It provides a simple and efficient way to manage incoming calls, allowing you to customize the call screen and handle call events.

## When to Use This Package
---------------------------

This package is useful when you want to integrate call functionality into your Flutter application, such as:

* Building a VoIP (Voice over Internet Protocol) app
* Creating a video conferencing app
* Integrating call functionality into a messaging app

## Features
------------

* Handle incoming calls
* Customize the call screen
* Handle call events (e.g., answer, reject, hang up)

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `flutter_incoming_call` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_incoming_call: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:flutter_incoming_call/flutter_incoming_call.dart';
```
### Step 3: Configure the Package (Android)

For Android, you need to add the following permissions to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.READ_PHONE_STATE" />
<uses-permission android:name="android.permission.CALL_PHONE" />
```
### Step 4: Configure the Package (iOS)

For iOS, you need to add the following lines to your `Info.plist` file:
```xml
<key>UIBackgroundModes</key>
<array>
    <string>voip</string>
</array>
```
### Step 5: Initialize the Package

Initialize the package in your Dart file:
```dart
FlutterIncomingCall.initialize();
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_incoming_call/flutter_incoming_call.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Initialize the package
  @override
  void initState() {
    super.initState();
    FlutterIncomingCall.initialize();
  }

  // Handle incoming calls
  Future<void> _handleIncomingCall() async {
    // Get the call data
    final callData = await FlutterIncomingCall.getCallData();

    // Show the call screen
    Navigator.push(
      context,
      MaterialPageRoute(builder: (context) => CallScreen(callData: callData)),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Real Flutter'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: _handleIncomingCall,
          child: Text('Handle Incoming Call'),
        ),
      ),
    );
  }
}

// Call screen widget
class CallScreen extends StatelessWidget {
  final Map<String, dynamic> callData;

  CallScreen({required this.callData});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Call Screen'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text('Call from: ${callData['callerName']}'),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () async {
                // Answer the call
                await FlutterIncomingCall.answerCall();
              },
              child: Text('Answer'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () async {
                // Reject the call
                await FlutterIncomingCall.rejectCall();
              },
              child: Text('Reject'),
            ),
          ],
        ),
      ),
    );
  }
}
```

// Application flow:
// 1. The user opens the app and clicks the "Handle Incoming Call" button.
// 2. The `_handleIncomingCall` function is called, which gets the call data using `FlutterIncomingCall.getCallData()`.
// 3. The call data is passed to the `CallScreen` widget, which displays the call screen.
// 4. The user can answer or reject the call using the buttons on the call screen.
// 5. When the user answers or rejects the call, the corresponding function is called using `FlutterIncomingCall.answerCall()` or `FlutterIncomingCall.rejectCall()`.

<-- END_MAIN -->
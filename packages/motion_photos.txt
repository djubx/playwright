<-- START_DESCRIPTION -->

# Motion Photos Flutter Package
================================

The `motion_photos` Flutter package allows you to create and display motion photos, which are a combination of a static image and a short video clip. This package provides a simple and easy-to-use API for creating and displaying motion photos in your Flutter app.

## Features

* Create motion photos from a static image and a short video clip
* Display motion photos in a widget
* Customize the appearance of the motion photo widget
* Support for both Android and iOS platforms

## When to Use

You can use this package in a variety of scenarios, such as:

* Creating a photo gallery app that displays motion photos
* Adding motion photos to a social media app
* Creating a camera app that captures motion photos

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

## Setup

To use the `motion_photos` package, you need to add it to your `pubspec.yaml` file:
```yml
dependencies:
  motion_photos: ^1.0.0
```
Then, run `flutter pub get` to install the package.

## Platform-Specific Configurations

### Android

To use the `motion_photos` package on Android, you need to add the following permissions to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
```
### iOS

To use the `motion_photos` package on iOS, you need to add the following permissions to your `Info.plist` file:
```xml
<key>NSPhotoLibraryUsageDescription</key>
<string>This app needs access to your photo library to display motion photos.</string>
```
## Using the Package

To create a motion photo, you need to provide a static image and a short video clip. You can use the `MotionPhoto` widget to display the motion photo:
```dart
import 'package:motion_photos/motion_photos.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    return MotionPhoto(
      image: Image.asset('assets/image.jpg'),
      video: Video.asset('assets/video.mp4'),
    );
  }
}
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:motion_photos/motion_photos.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Motion Photos Demo',
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Step 1: Create a motion photo object
  MotionPhotoController _controller;

  @override
  void initState() {
    super.initState();
    _controller = MotionPhotoController();
  }

  @override
  Widget build(BuildContext context) {
    // Step 2: Create a motion photo widget
    return Scaffold(
      appBar: AppBar(
        title: Text('Motion Photos Demo'),
      ),
      body: Center(
        child: MotionPhoto(
          // Step 3: Provide a static image
          image: Image.asset('assets/image.jpg'),
          // Step 4: Provide a short video clip
          video: Video.asset('assets/video.mp4'),
          // Step 5: Customize the appearance of the motion photo widget
          controller: _controller,
          width: 300,
          height: 400,
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app and the RealFlutter widget is displayed.
// 2. The RealFlutter widget creates a motion photo object and a motion photo widget.
// 3. The motion photo widget displays the static image and the short video clip.
// 4. The user can customize the appearance of the motion photo widget by using the controller.
// 5. The motion photo widget plays the short video clip when the user interacts with it.
```

// In summary, the code flows as follows:
// 1. The user runs the app and the RealFlutter widget is displayed.
// 2. The RealFlutter widget creates a motion photo object and a motion photo widget.
// 3. The motion photo widget displays the static image and the short video clip.
// 4. The user can customize the appearance of the motion photo widget by using the controller.
// 5. The motion photo widget plays the short video clip when the user interacts with it.

<-- END_MAIN -->
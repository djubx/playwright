<-- START_DESCRIPTION -->

# Figma Frame Inspector Package
The `figma_frame_inspector` package is a powerful tool for Flutter developers that allows them to inspect and debug their app's UI components. It provides a simple and intuitive way to visualize the layout of your app's widgets, making it easier to identify and fix layout-related issues.

## When to Use This Package
This package is particularly useful when:

* You need to debug complex layouts and identify issues with widget positioning or sizing.
* You want to visualize the layout of your app's widgets to better understand how they are arranged.
* You need to test and verify the layout of your app on different devices and screen sizes.

## Features
The `figma_frame_inspector` package provides the following features:

* Visualize the layout of your app's widgets in a tree-like structure.
* Inspect the properties of individual widgets, such as their size, position, and padding.
* Test and verify the layout of your app on different devices and screen sizes.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
To use the `figma_frame_inspector` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  figma_frame_inspector: ^1.0.0
```
2. Run `flutter pub get` to install the package.
3. Import the package in your Dart file:
```dart
import 'package:figma_frame_inspector/figma_frame_inspector.dart';
```

## Platform-Specific Details
The `figma_frame_inspector` package works on both Android and iOS platforms. However, there are some platform-specific details to keep in mind:

* On Android, the package uses the `AndroidView` widget to render the layout tree. This means that you need to add the `android.permission.INTERNET` permission to your `AndroidManifest.xml` file.
* On iOS, the package uses the `UIView` widget to render the layout tree. This means that you need to add the `NSAppTransportSecurity` key to your `Info.plist` file.

## Configurations and Optimizations
To get the most out of the `figma_frame_inspector` package, you can configure the following settings:

* `showLayoutTree`: This setting determines whether the layout tree is displayed or not. You can set this to `true` or `false` depending on your needs.
* `showWidgetProperties`: This setting determines whether the properties of individual widgets are displayed or not. You can set this to `true` or `false` depending on your needs.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:figma_frame_inspector/figma_frame_inspector.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Figma Frame Inspector Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  bool _showLayoutTree = true;
  bool _showWidgetProperties = true;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Figma Frame Inspector Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: () {
                setState(() {
                  _showLayoutTree = !_showLayoutTree;
                });
              },
              child: Text('Toggle Layout Tree'),
            ),
            ElevatedButton(
              onPressed: () {
                setState(() {
                  _showWidgetProperties = !_showWidgetProperties;
                });
              },
              child: Text('Toggle Widget Properties'),
            ),
            FigmaFrameInspector(
              showLayoutTree: _showLayoutTree,
              showWidgetProperties: _showWidgetProperties,
              child: Container(
                width: 200,
                height: 200,
                color: Colors.blue,
                child: Center(
                  child: Text('Hello World'),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app and is presented with a screen containing two buttons and a blue container.
// 2. The user can toggle the layout tree and widget properties by pressing the corresponding buttons.
// 3. When the layout tree is enabled, the FigmaFrameInspector widget displays the layout tree of the blue container.
// 4. When the widget properties are enabled, the FigmaFrameInspector widget displays the properties of the blue container.
// 5. The user can inspect the layout tree and widget properties to understand how the UI components are arranged.

// In summary, the code flows as follows:
// 1. The user interacts with the app by pressing buttons.
// 2. The app responds to the user's interactions by updating the state of the FigmaFrameInspector widget.
// 3. The FigmaFrameInspector widget displays the layout tree and widget properties based on the current state.
```

<-- END_MAIN -->
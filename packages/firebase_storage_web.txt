<-- START_DESCRIPTION -->

# Segmented Button Slide Flutter Package
=====================================

The `segmented_button_slide` Flutter package provides a customizable segmented button widget that can be used to create a variety of button styles, including slide-in buttons. This package is ideal for creating navigation menus, tab bars, or any other type of button that requires a segmented design.

### Features

* Customizable button styles, including colors, fonts, and borders
* Support for slide-in animations
* Optional divider between buttons
* Compatible with both Android and iOS platforms

### When to Use

This package is perfect for creating navigation menus, tab bars, or any other type of button that requires a segmented design. It's also great for creating custom button styles that match your app's brand and design.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Segmented Button Slide Package
===========================================================

### Step 1: Add the Package to Your Pubspec.yaml File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  segmented_button_slide: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:segmented_button_slide/segmented_button_slide.dart';
```
### Step 3: Create a Segmented Button

Create a segmented button using the `SegmentedButton` widget:
```dart
SegmentedButton(
  buttons: [
    Button(
      label: 'Button 1',
      onPressed: () {
        print('Button 1 pressed');
      },
    ),
    Button(
      label: 'Button 2',
      onPressed: () {
        print('Button 2 pressed');
      },
    ),
  ],
)
```
### Step 4: Customize the Button Styles

Customize the button styles using the `SegmentedButton` widget's properties:
```dart
SegmentedButton(
  buttons: [
    Button(
      label: 'Button 1',
      onPressed: () {
        print('Button 1 pressed');
      },
    ),
    Button(
      label: 'Button 2',
      onPressed: () {
        print('Button 2 pressed');
      },
    ),
  ],
  selectedColor: Colors.blue,
  unselectedColor: Colors.grey,
  dividerColor: Colors.white,
)
```
### Platform-Specific Details

* On Android, the segmented button will use the default Android button style.
* On iOS, the segmented button will use the default iOS button style.

### Required Configurations or Optimizations

* Make sure to add the `segmented_button_slide` package to your `pubspec.yaml` file and run `flutter pub get` to install the package.
* Import the package in your Dart file using `import 'package:segmented_button_slide/segmented_button_slide.dart';`.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:segmented_button_slide/segmented_button_slide.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Segmented Button Slide Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  int _currentIndex = 0;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Segmented Button Slide Demo'),
      ),
      body: Center(
        child: SegmentedButton(
          buttons: [
            Button(
              label: 'Button 1',
              onPressed: () {
                setState(() {
                  _currentIndex = 0;
                });
              },
            ),
            Button(
              label: 'Button 2',
              onPressed: () {
                setState(() {
                  _currentIndex = 1;
                });
              },
            ),
            Button(
              label: 'Button 3',
              onPressed: () {
                setState(() {
                  _currentIndex = 2;
                });
              },
            ),
          ],
          selectedColor: Colors.blue,
          unselectedColor: Colors.grey,
          dividerColor: Colors.white,
        ),
      ),
      bottomNavigationBar: BottomNavigationBar(
        currentIndex: _currentIndex,
        onTap: (index) {
          setState(() {
            _currentIndex = index;
          });
        },
        items: [
          BottomNavigationBarItem(
            icon: Icon(Icons.home),
            label: 'Home',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.settings),
            label: 'Settings',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.info),
            label: 'Info',
          ),
        ],
      ),
    );
  }
}

// The app starts by running the main function, which creates a new instance of the MyApp widget.
// The MyApp widget is a stateless widget that returns a MaterialApp widget.
// The MaterialApp widget is the top-level widget for the app, and it provides a basic material design visual layout structure.
// The home property of the MaterialApp widget is set to the MyHomePage widget, which is a stateful widget.
// The MyHomePage widget returns a Scaffold widget, which provides a basic material design visual layout structure.
// The body property of the Scaffold widget is set to a Center widget, which centers its child widget.
// The child widget of the Center widget is a SegmentedButton widget, which is a custom widget that displays a segmented button.
// The SegmentedButton widget takes a list of Button widgets as its children, and it displays them in a horizontal row.
// Each Button widget has a label property that is displayed as the text of the button, and an onPressed property that is called when the button is pressed.
// The selectedColor, unselectedColor, and dividerColor properties of the SegmentedButton widget are used to customize the appearance of the button.
// The bottomNavigationBar property of the Scaffold widget is set to a BottomNavigationBar widget, which displays a bottom navigation bar.
// The BottomNavigationBar widget takes a list of BottomNavigationBarItem widgets as its children, and it displays them in a horizontal row.
// Each BottomNavigationBarItem widget has an icon property that is displayed as the icon of the item, and a label property that is displayed as the text of the item.
// The onTap property of the BottomNavigationBar widget is called when an item is tapped, and it updates the _currentIndex variable to the index of the tapped item.
```

<-- END_MAIN -->
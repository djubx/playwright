```markdown
<!-- START_DESCRIPTION -->
# json_extractor Flutter Package

The `json_extractor` package is a powerful tool for Flutter developers that simplifies the process of extracting and manipulating JSON data. It provides a straightforward API to parse JSON strings and convert them into Dart objects, making it easier to work with data from APIs or local JSON files. 

## When to Use

You should consider using `json_extractor` when:
- You need to handle complex JSON structures.
- You want to reduce boilerplate code when parsing JSON.
- You are working with APIs that return nested JSON data.

## Features

- **Easy JSON Parsing**: Convert JSON strings into Dart objects with minimal code.
- **Support for Nested Structures**: Handle complex and nested JSON data effortlessly.
- **Type Safety**: Ensures that the extracted data matches the expected types.
- **Custom Mappers**: Allows for custom mapping of JSON fields to Dart properties.

Overall, `json_extractor` streamlines the process of working with JSON in Flutter applications, making it a valuable addition to your toolkit.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using json_extractor

## Installation

To add the `json_extractor` package to your Flutter project, include it in your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  json_extractor: ^1.0.0  # Check for the latest version on pub.dev
```

Run `flutter pub get` to install the package.

## Platform-Specific Details

### Android

No additional configuration is required for Android. Just ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file.

### iOS

For iOS, ensure that your deployment target is set to at least 10.0 in your `ios/Podfile`:

```ruby
platform :ios, '10.0'
```

## Basic Usage

To use the `json_extractor` package, follow these steps:

1. Import the package in your Dart file:

```dart
import 'package:json_extractor/json_extractor.dart';
```

2. Create a model class that represents the structure of your JSON data. For example:

```dart
class User {
  final String name;
  final int age;

  User({required this.name, required this.age});
}
```

3. Use the `JsonExtractor` to parse the JSON string:

```dart
void main() {
  String jsonString = '{"name": "John Doe", "age": 30}';
  var user = JsonExtractor<User>(jsonString, (json) => User(
    name: json['name'],
    age: json['age'],
  )).extract();

  print('User Name: ${user.name}, Age: ${user.age}');
}
```

This will output:
```
User Name: John Doe, Age: 30
```

With these steps, you can easily extract and manipulate JSON data in your Flutter applications.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of json_extractor

```dart
import 'package:flutter/material.dart';
import 'package:json_extractor/json_extractor.dart';

// Define a User model class to represent the JSON structure
class User {
  final String name;
  final int age;

  User({required this.name, required this.age});
}

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'JSON Extractor Example',
      home: UserScreen(),
    );
  }
}

class UserScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Sample JSON string
    String jsonString = '{"name": "John Doe", "age": 30}';

    // Extracting User data from JSON
    var user = JsonExtractor<User>(jsonString, (json) => User(
      name: json['name'],
      age: json['age'],
    )).extract();

    return Scaffold(
      appBar: AppBar(
        title: Text('User Information'),
      ),
      body: Center(
        child: Text('User Name: ${user.name}, Age: ${user.age}'),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function starts the app by calling runApp with RealFlutter.
// 2. RealFlutter is a StatelessWidget that builds a MaterialApp.
// 3. The UserScreen widget is set as the home of the MaterialApp.
// 4. In UserScreen, a JSON string representing a user is defined.
// 5. JsonExtractor is used to parse the JSON string and create a User object.
// 6. The User's name and age are displayed in the center of the screen.
```
<!-- END_MAIN -->
```

### Summary of Application Flow
The application starts with the `main` function, which initializes the Flutter app. The `RealFlutter` widget sets up the main structure, including the app title and the home screen. The `UserScreen` widget handles the JSON extraction using the `json_extractor` package, parsing a predefined JSON string to create a `User` object. Finally, the user's name and age are displayed on the screen, demonstrating the package's functionality in a simple yet effective manner.
<-- START_DESCRIPTION -->

# win32_gamepad Flutter Package
=====================================

The `win32_gamepad` Flutter package provides a simple and easy-to-use API for accessing gamepad input on Windows platforms. This package is ideal for game developers who want to create games that support gamepad input.

### Features

*   Supports multiple gamepads
*   Easy-to-use API for accessing gamepad buttons, axes, and directional pads
*   Supports both 32-bit and 64-bit architectures

### When to Use

This package is suitable for game development projects that require gamepad input support on Windows platforms. It can be used for various types of games, including action, adventure, racing, and more.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the win32_gamepad Package
===========================================================

### Step 1: Add the Package to Your Project

To use the `win32_gamepad` package, you need to add it to your project's `pubspec.yaml` file. Open the file and add the following line under the `dependencies` section:

```yml
dependencies:
  flutter:
    sdk: flutter
  win32_gamepad: ^1.0.0
```

Then, run `flutter pub get` in your terminal to get the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:win32_gamepad/win32_gamepad.dart';
```

### Step 3: Initialize the Gamepad

To start using the gamepad, you need to initialize it. You can do this by calling the `Gamepad.init()` method:

```dart
Gamepad.init();
```

### Step 4: Listen for Gamepad Events

To receive gamepad input events, you need to listen for them. You can do this by calling the `Gamepad.listen()` method:

```dart
Gamepad.listen((event) {
  // Handle the gamepad event
});
```

### Platform-Specific Details

The `win32_gamepad` package only supports Windows platforms. If you want to support other platforms, you need to use a different package.

### Required Configurations or Optimizations

There are no required configurations or optimizations for using the `win32_gamepad` package.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:win32_gamepad/win32_gamepad.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Gamepad Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  // Initialize the gamepad
  @override
  void initState() {
    super.initState();
    Gamepad.init();
  }

  // Dispose of the gamepad
  @override
  void dispose() {
    Gamepad.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Gamepad Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            // Listen for gamepad events
            GamepadListener(
              onButtonPressed: (button) {
                print('Button pressed: $button');
              },
              onButtonReleased: (button) {
                print('Button released: $button');
              },
              onAxisChanged: (axis, value) {
                print('Axis changed: $axis, value: $value');
              },
              onDirectionalPadChanged: (direction) {
                print('Directional pad changed: $direction');
              },
            ),
          ],
        ),
      ),
    );
  }
}

// The flow of the application:
// 
// 1. The user starts the application.
// 
// 2. The application initializes the gamepad using `Gamepad.init()`.
// 
// 3. The application listens for gamepad events using `GamepadListener`.
// 
// 4. When a gamepad event occurs, the application handles it.
// 
// 5. When the user closes the application, the application disposes of the gamepad using `Gamepad.dispose()`.

// Summary: The code initializes the gamepad, listens for gamepad events, and handles them. When the application is closed, it disposes of the gamepad.
```

<-- END_MAIN -->
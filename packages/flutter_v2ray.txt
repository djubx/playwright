```markdown
<-- START_DESCRIPTION -->

# Overview of the `flutter_v2ray` Package

The `flutter_v2ray` package is a powerful tool for Flutter developers who need to integrate V2Ray, a platform for building proxies to bypass network restrictions, into their applications. This package provides a seamless way to manage network traffic through V2Ray's robust proxy capabilities, making it ideal for applications that require secure and private internet access.

## When to Use `flutter_v2ray`

- **Bypassing Network Restrictions**: If your application needs to operate in environments with restricted internet access, `flutter_v2ray` can help route traffic through proxy servers.
- **Enhancing Privacy**: For applications that prioritize user privacy, using V2Ray can help obscure user traffic and protect data from prying eyes.
- **Custom Network Configurations**: Applications that require custom network routing or need to connect to specific servers can benefit from the flexibility offered by V2Ray.

## Key Features

- **Cross-Platform Support**: Works seamlessly on both Android and iOS platforms.
- **Customizable Configurations**: Allows detailed configuration of proxy settings to suit various network environments.
- **Integration with Flutter**: Easy to integrate with existing Flutter applications, providing a straightforward API for managing V2Ray instances.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up `flutter_v2ray` in Your Flutter Project

In this tutorial, we will walk through the process of setting up and using the `flutter_v2ray` package in a Flutter application. We will cover platform-specific configurations for both Android and iOS.

## Step 1: Add Dependency

First, add the `flutter_v2ray` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  flutter_v2ray: ^1.0.0
```

Run `flutter pub get` to install the package.

## Step 2: Platform-Specific Setup

### Android

1. **Permissions**: Ensure that your `AndroidManifest.xml` includes the necessary permissions for internet access:

   ```xml
   <uses-permission android:name="android.permission.INTERNET"/>
   ```

2. **Network Security Config**: If targeting Android 9 (API level 28) or higher, ensure that your app's network security configuration allows cleartext traffic if needed:

   ```xml
   <application
       android:networkSecurityConfig="@xml/network_security_config">
   </application>
   ```

   Create a `res/xml/network_security_config.xml` file if necessary.

### iOS

1. **Permissions**: Update your `Info.plist` to include permissions for network access:

   ```xml
   <key>NSAppTransportSecurity</key>
   <dict>
       <key>NSAllowsArbitraryLoads</key>
       <true/>
   </dict>
   ```

2. **Podfile**: Ensure your `ios/Podfile` is set to use frameworks:

   ```ruby
   use_frameworks!
   ```

## Step 3: Using `flutter_v2ray`

Create a new instance of the `RealFlutter` class and configure it with your desired settings. Here's a basic setup:

```dart
import 'package:flutter_v2ray/flutter_v2ray.dart';

class RealFlutter {
  final V2Ray v2ray;

  RealFlutter() : v2ray = V2Ray();

  void startV2Ray() {
    v2ray.start(config: 'path_to_v2ray_config.json');
  }

  void stopV2Ray() {
    v2ray.stop();
  }
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_v2ray/flutter_v2ray.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter V2Ray Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: V2RayHomePage(),
    );
  }
}

class V2RayHomePage extends StatefulWidget {
  @override
  _V2RayHomePageState createState() => _V2RayHomePageState();
}

class _V2RayHomePageState extends State<V2RayHomePage> {
  final RealFlutter realFlutter = RealFlutter();

  @override
  void initState() {
    super.initState();
    // Start V2Ray when the app initializes
    realFlutter.startV2Ray();
  }

  @override
  void dispose() {
    // Stop V2Ray when the app is disposed
    realFlutter.stopV2Ray();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('V2Ray Example'),
      ),
      body: Center(
        child: Text('V2Ray is running...'),
      ),
    );
  }
}

// The RealFlutter class manages the V2Ray instance
class RealFlutter {
  final V2Ray v2ray;

  RealFlutter() : v2ray = V2Ray();

  // Starts the V2Ray service with a specified configuration
  void startV2Ray() {
    v2ray.start(config: 'path_to_v2ray_config.json');
  }

  // Stops the V2Ray service
  void stopV2Ray() {
    v2ray.stop();
  }
}

// Application Flow:
// 1. The application starts and initializes the MyApp widget.
// 2. MyApp builds the MaterialApp with a home page of V2RayHomePage.
// 3. V2RayHomePage initializes and starts the V2Ray service using RealFlutter.
// 4. The app displays a simple UI indicating that V2Ray is running.
// 5. When the app is closed, V2Ray is stopped to free resources.
```

<-- END_MAIN -->
```
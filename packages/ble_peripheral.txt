<-- START_DESCRIPTION -->

# Introduction to ble_peripheral
The ble_peripheral package is a Flutter library that allows you to create a Bluetooth Low Energy (BLE) peripheral on both Android and iOS devices. This package is useful when you want to create a Flutter app that can advertise its presence and allow other BLE devices to connect to it.

## Features
- Create a BLE peripheral on Android and iOS devices
- Advertise the peripheral's presence
- Allow other BLE devices to connect to the peripheral
- Send and receive data between the peripheral and connected devices

## When to use this package
You can use this package in various scenarios, such as:
- Creating a smart home device that can be controlled using a BLE-enabled smartphone
- Developing a wearable device that can send data to a connected smartphone
- Building a BLE-enabled sensor that can send data to a connected device

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting up the ble_peripheral package
To use the ble_peripheral package, you need to add it to your pubspec.yaml file:
```yml
dependencies:
  flutter:
    sdk: flutter
  ble_peripheral: ^0.1.0
```
Then, run `flutter pub get` to get the package.

## Platform-specific setup
### Android
On Android, you need to add the following permissions to your AndroidManifest.xml file:
```xml
<uses-permission android:name="android.permission.BLUETOOTH" />
<uses-permission android:name="android.permission.BLUETOOTH_ADMIN" />
```
### iOS
On iOS, you need to add the following lines to your Info.plist file:
```xml
<key>UIBackgroundModes</key>
<array>
  <string>bluetooth-peripheral</string>
</array>
```
## Using the package
To use the package, you need to create a `BlePeripheral` instance and start advertising:
```dart
import 'package:ble_peripheral/ble_peripheral.dart';

class RealFlutter {
  Future<void> startAdvertising() async {
    final blePeripheral = BlePeripheral();
    await blePeripheral.startAdvertising(
      'My Peripheral',
      ['My Service'],
    );
  }
}
```
<-- END_TUTORIAL -->

<-- START_MAIN -->
```dart
import 'package:flutter/material.dart';
import 'package:ble_peripheral/ble_peripheral.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'BLE Peripheral Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final RealFlutter _realFlutter = RealFlutter();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('BLE Peripheral Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: _realFlutter.startAdvertising,
              child: Text('Start Advertising'),
            ),
            ElevatedButton(
              onPressed: _realFlutter.stopAdvertising,
              child: Text('Stop Advertising'),
            ),
          ],
        ),
      ),
    );
  }
}

class RealFlutter {
  final BlePeripheral _blePeripheral = BlePeripheral();

  Future<void> startAdvertising() async {
    // Start advertising the peripheral's presence
    await _blePeripheral.startAdvertising(
      'My Peripheral',
      ['My Service'],
    );
    print('Advertising started');
  }

  Future<void> stopAdvertising() async {
    // Stop advertising the peripheral's presence
    await _blePeripheral.stopAdvertising();
    print('Advertising stopped');
  }
}

// Application flow:
// 1. The user opens the app and is presented with a screen containing two buttons: "Start Advertising" and "Stop Advertising".
// 2. When the user presses the "Start Advertising" button, the `startAdvertising` method is called, which starts advertising the peripheral's presence.
// 3. When the user presses the "Stop Advertising" button, the `stopAdvertising` method is called, which stops advertising the peripheral's presence.
// 4. The app continues to run and advertise the peripheral's presence until the user closes the app or stops advertising.
```
<-- END_MAIN -->

In summary, this code creates a simple Flutter app that allows the user to start and stop advertising a BLE peripheral's presence. The app uses the `ble_peripheral` package to create a `BlePeripheral` instance and start advertising. The app also includes a simple UI with two buttons to start and stop advertising.
```markdown
<!-- START_DESCRIPTION -->
# Omise Flutter Package: A Comprehensive Overview

The **omise_flutter** package is a powerful tool for integrating payment processing into Flutter applications. It provides a seamless way to handle online payments, making it an excellent choice for developers looking to implement payment solutions in their apps. 

## When to Use This Package
You should consider using the **omise_flutter** package when:
- You need to accept online payments in your Flutter application.
- You want to provide a smooth and secure payment experience for your users.
- You are targeting markets where Omise is a supported payment gateway, such as Southeast Asia.

## Key Features
- **Multiple Payment Methods**: Supports various payment methods including credit cards, bank transfers, and e-wallets.
- **Secure Transactions**: Ensures that all transactions are processed securely, adhering to PCI compliance.
- **Easy Integration**: Simple API that allows for quick setup and integration into existing Flutter applications.
- **Customizable UI**: Offers customizable UI components to match your app's design.

Overall, the **omise_flutter** package is an excellent choice for developers looking to implement a robust payment solution in their Flutter applications.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Setting Up the Omise Flutter Package

In this section, we will walk through the setup process for the **omise_flutter** package, including platform-specific configurations for both Android and iOS.

## Installation

To add the **omise_flutter** package to your Flutter project, include it in your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  omise_flutter: ^latest_version
```

Make sure to replace `^latest_version` with the latest version available on [pub.dev](https://pub.dev/packages/omise_flutter).

## Platform-Specific Configuration

### Android
1. Open your `android/app/build.gradle` file and ensure you have the following configurations:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21 // Ensure this is set to at least 21
    }
}
```

2. Add the necessary permissions in your `AndroidManifest.xml`:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
```

### iOS
1. Open your `ios/Runner/Info.plist` file and add the following:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

2. Ensure you have the correct deployment target set in your `ios/Podfile`:

```ruby
platform :ios, '10.0'
```

## Initializing the Package

To initialize the Omise package, you will need to set up your public key. This can be done in your main application file:

```dart
import 'package:omise_flutter/omise_flutter.dart';

void main() {
  OmiseFlutter.init('YOUR_PUBLIC_KEY');
  runApp(MyApp());
}
```

Replace `'YOUR_PUBLIC_KEY'` with your actual Omise public key.

With these steps completed, you are now ready to start using the **omise_flutter** package in your Flutter application.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using Omise Flutter Package

```dart
import 'package:flutter/material.dart';
import 'package:omise_flutter/omise_flutter.dart';

void main() {
  // Initialize the Omise package with your public key
  OmiseFlutter.init('YOUR_PUBLIC_KEY');
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Omise Payment Example',
      home: PaymentScreen(),
    );
  }
}

class PaymentScreen extends StatefulWidget {
  @override
  _PaymentScreenState createState() => _PaymentScreenState();
}

class _PaymentScreenState extends State<PaymentScreen> {
  // This function will be called when the user initiates a payment
  void _startPayment() async {
    // Create a payment request
    final payment = await OmiseFlutter.createPayment(
      amount: 10000, // Amount in the smallest currency unit (e.g., cents)
      currency: 'THB', // Currency code
      returnUrl: 'https://your-return-url.com', // URL to redirect after payment
    );

    // Check if the payment was successful
    if (payment != null && payment.isSuccess) {
      // Handle successful payment
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Payment Successful!')),
      );
    } else {
      // Handle payment failure
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Payment Failed!')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Omise Payment'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: _startPayment, // Start payment on button press
          child: Text('Pay Now'),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app initializes the Omise package with the public key.
// 2. The main screen displays a button labeled "Pay Now".
// 3. When the button is pressed, the _startPayment function is called.
// 4. A payment request is created with the specified amount and currency.
// 5. The app waits for the payment response.
// 6. If the payment is successful, a success message is shown; otherwise, a failure message is displayed.
```
<!-- END_MAIN -->
```

### Summary
In this blog post, we explored the **omise_flutter** package, detailing its features, setup process, and providing a complete example of how to implement it in a Flutter application. The application flow was clearly explained through comments, making it easy for developers to understand how to integrate payment processing into their apps. This package is a robust solution for handling payments, especially in regions where Omise operates.
<-- START_DESCRIPTION -->

# Blowfish ECB Flutter Package
================================

The `blowfish_ecb` package is a Flutter library that provides a simple and efficient way to encrypt and decrypt data using the Blowfish algorithm in Electronic Codebook (ECB) mode.

## When to Use
--------------

This package is ideal for situations where you need to encrypt and decrypt data in a Flutter application, such as:

* Storing sensitive data securely on the device
* Transmitting encrypted data over a network
* Protecting user data from unauthorized access

## Features
------------

* Fast and efficient encryption and decryption using the Blowfish algorithm
* Support for ECB mode, which is suitable for encrypting small amounts of data
* Easy-to-use API with simple encryption and decryption methods

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
-----------------

To use the `blowfish_ecb` package in your Flutter application, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  blowfish_ecb: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:blowfish_ecb/blowfish_ecb.dart';
```
### Step 3: Initialize the Blowfish ECB Instance

Create a new instance of the `BlowfishECB` class, passing in a secret key:
```dart
final blowfishECB = BlowfishECB(key: 'your_secret_key_here');
```
### Step 4: Encrypt and Decrypt Data

Use the `encrypt` and `decrypt` methods to encrypt and decrypt data:
```dart
final encryptedData = blowfishECB.encrypt('Hello, World!');
final decryptedData = blowfishECB.decrypt(encryptedData);
```
### Platform-Specific Details

* On Android, the package uses the `android.security` library to perform encryption and decryption.
* On iOS, the package uses the `CommonCrypto` library to perform encryption and decryption.

### Required Configurations and Optimizations

* Make sure to handle errors and exceptions properly when using the package.
* Use a secure secret key to prevent unauthorized access to your encrypted data.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:blowfish_ecb/blowfish_ecb.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Blowfish ECB Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _blowfishECB = BlowfishECB(key: 'my_secret_key_here');
  String _encryptedData = '';
  String _decryptedData = '';

  void _encryptData() {
    final dataToEncrypt = 'Hello, World!';
    final encryptedData = _blowfishECB.encrypt(dataToEncrypt);
    setState(() {
      _encryptedData = encryptedData;
    });
  }

  void _decryptData() {
    final decryptedData = _blowfishECB.decrypt(_encryptedData);
    setState(() {
      _decryptedData = decryptedData;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Blowfish ECB Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text('Encrypted Data: $_encryptedData'),
            Text('Decrypted Data: $_decryptedData'),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _encryptData,
              child: Text('Encrypt Data'),
            ),
            SizedBox(height: 10),
            ElevatedButton(
              onPressed: _decryptData,
              child: Text('Decrypt Data'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user clicks the "Encrypt Data" button, which calls the _encryptData method.
// 2. The _encryptData method encrypts the data using the BlowfishECB instance and updates the _encryptedData state.
// 3. The user clicks the "Decrypt Data" button, which calls the _decryptData method.
// 4. The _decryptData method decrypts the encrypted data using the BlowfishECB instance and updates the _decryptedData state.
// 5. The decrypted data is displayed on the screen.

// This code demonstrates the basic usage of the Blowfish ECB package in a Flutter application.
// It shows how to encrypt and decrypt data using the package, and how to handle errors and exceptions.
```

<-- END_MAIN -->
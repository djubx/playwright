```markdown
<-- START_DESCRIPTION -->

# Reactive Date Time Picker Flutter Package

The `reactive_date_time_picker` Flutter package is a powerful tool designed to simplify the process of selecting dates and times within a Flutter application. This package is particularly useful in applications that require user input for scheduling, booking, or any feature that involves date and time selection. 

## Features

- **Reactive Programming**: Integrates seamlessly with reactive programming paradigms, making it ideal for applications using state management solutions like BLoC or Provider.
- **Customizable UI**: Offers a highly customizable user interface, allowing developers to tailor the look and feel to match their application's theme.
- **Cross-Platform Support**: Works on both Android and iOS, providing a consistent experience across platforms.
- **Ease of Use**: Simplifies the process of date and time selection with intuitive widgets and straightforward API.

### When to Use

- **Event Scheduling**: Perfect for apps that require users to schedule events or appointments.
- **Reminders and Alarms**: Useful in applications that set reminders or alarms based on user-selected times.
- **Booking Systems**: Ideal for booking systems where users need to select dates and times for reservations.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using Reactive Date Time Picker

In this tutorial, we will walk through the setup and usage of the `reactive_date_time_picker` package in a Flutter application. We will cover platform-specific configurations for both Android and iOS.

## Setup

### Step 1: Add Dependency

Add the `reactive_date_time_picker` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  reactive_date_time_picker: ^1.0.0
```

### Step 2: Platform-Specific Configuration

#### Android

Ensure that your `android/app/build.gradle` file has the following configuration:

```gradle
android {
    compileSdkVersion 33

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 33
    }
}
```

#### iOS

For iOS, ensure that your `ios/Podfile` is configured to use a platform version of at least 11.0:

```ruby
platform :ios, '11.0'
```

### Step 3: Import the Package

In your Dart file, import the package:

```dart
import 'package:reactive_date_time_picker/reactive_date_time_picker.dart';
```

## Using the Package

To use the `reactive_date_time_picker`, you need to integrate it into your widget tree. Below is a simple example of how to use the package within a `RealFlutter` class.

```dart
class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return ReactiveDateTimePicker(
      formControlName: 'dateTime',
      decoration: InputDecoration(
        labelText: 'Select Date and Time',
        suffixIcon: Icon(Icons.calendar_today),
      ),
      firstDate: DateTime(2020),
      lastDate: DateTime(2030),
    );
  }
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

# Complete Example: Flutter Main File

Below is a complete example of a Flutter application using the `reactive_date_time_picker` package.

```dart
import 'package:flutter/material.dart';
import 'package:reactive_forms/reactive_forms.dart';
import 'package:reactive_date_time_picker/reactive_date_time_picker.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Reactive Date Time Picker Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatelessWidget {
  // Define a form with a single control for date and time
  final form = FormGroup({
    'dateTime': FormControl<DateTime>(),
  });

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Date Time Picker Example'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: ReactiveForm(
          formGroup: form,
          child: Column(
            children: <Widget>[
              // Reactive Date Time Picker widget
              ReactiveDateTimePicker(
                formControlName: 'dateTime',
                decoration: InputDecoration(
                  labelText: 'Select Date and Time',
                  suffixIcon: Icon(Icons.calendar_today),
                ),
                firstDate: DateTime(2020),
                lastDate: DateTime(2030),
              ),
              SizedBox(height: 16),
              // Button to submit the form
              ElevatedButton(
                onPressed: () {
                  if (form.valid) {
                    // Access the selected date and time
                    final selectedDateTime = form.control('dateTime').value;
                    // Display the selected date and time
                    ScaffoldMessenger.of(context).showSnackBar(
                      SnackBar(
                        content: Text('Selected: $selectedDateTime'),
                      ),
                    );
                  }
                },
                child: Text('Submit'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
```

// Application Flow Explanation
// 1. The `MyApp` class sets up the MaterialApp and specifies `RealFlutter` as the home widget.
// 2. `RealFlutter` is a stateless widget that contains a reactive form with a single control for date and time.
// 3. The `ReactiveDateTimePicker` widget is used to allow users to select a date and time.
// 4. The form is validated when the "Submit" button is pressed. If valid, the selected date and time are retrieved and displayed using a SnackBar.

<-- END_MAIN -->
```
<-- START_DESCRIPTION -->

Dynamic Utils Flutter Package
=============================

The `dynamicutils` Flutter package is a utility library that provides a set of dynamic utility functions to simplify the development process. It offers a range of features, including dynamic theme switching, locale management, and screen size handling.

When to Use
------------

This package is ideal for applications that require dynamic theme switching, locale management, or screen size handling. For example:

*   Applications with multiple themes (e.g., light and dark modes)
*   Applications that support multiple languages
*   Applications that need to adapt to different screen sizes

Features
--------

*   Dynamic theme switching
*   Locale management
*   Screen size handling

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
----------------

### Step 1: Add the Package to Your Project

Add the `dynamicutils` package to your `pubspec.yaml` file:

```yml
dependencies:
  dynamicutils: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:dynamicutils/dynamicutils.dart';
```

### Step 3: Initialize the Package

Initialize the package in your `main` function:

```dart
void main() {
  DynamicUtils.init(
    theme: ThemeMode.light,
    locale: Locale('en', 'US'),
  );
  runApp(MyApp());
}
```

### Step 4: Use the Package

Use the package's features in your application:

```dart
class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return DynamicTheme(
      theme: ThemeMode.light,
      child: MaterialApp(
        title: 'Dynamic Utils Demo',
        home: MyHomePage(),
      ),
    );
  }
}
```

Platform-Specific Details
-------------------------

### Android

No additional configuration is required for Android.

### iOS

No additional configuration is required for iOS.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:dynamicutils/dynamicutils.dart';

void main() {
  // Initialize the DynamicUtils package
  DynamicUtils.init(
    theme: ThemeMode.light,
    locale: Locale('en', 'US'),
  );
  
  // Run the application
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Use the DynamicTheme widget to enable dynamic theme switching
    return DynamicTheme(
      theme: ThemeMode.light,
      child: MaterialApp(
        title: 'Dynamic Utils Demo',
        home: MyHomePage(),
      ),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  Widget build(BuildContext context) {
    // Use the DynamicLocale widget to enable locale management
    return DynamicLocale(
      locale: Locale('en', 'US'),
      child: Scaffold(
        appBar: AppBar(
          title: Text('Dynamic Utils Demo'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Text(
                'Dynamic Utils Demo',
                style: TextStyle(fontSize: 24),
              ),
              SizedBox(height: 20),
              // Use the DynamicScreenSize widget to enable screen size handling
              DynamicScreenSize(
                child: Text(
                  'Screen size: ${MediaQuery.of(context).size.width}x${MediaQuery.of(context).size.height}',
                  style: TextStyle(fontSize: 18),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Application flow:
// 1. The application is initialized with the DynamicUtils package.
// 2. The DynamicTheme widget is used to enable dynamic theme switching.
// 3. The DynamicLocale widget is used to enable locale management.
// 4. The DynamicScreenSize widget is used to enable screen size handling.
// 5. The application displays the current screen size.

// Final summary:
// The code flows by initializing the DynamicUtils package, then using the DynamicTheme, DynamicLocale, and DynamicScreenSize widgets to enable dynamic theme switching, locale management, and screen size handling. The application then displays the current screen size.
```

<-- END_MAIN -->
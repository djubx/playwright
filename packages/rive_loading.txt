# Rive Loading Flutter Package

## <-- START_DESCRIPTION -->

### Overview

The `rive_loading` package is a Flutter library that allows developers to easily integrate Rive animations as loading indicators in their applications. Rive is a powerful animation tool that enables designers to create interactive animations that can be used in mobile applications. The `rive_loading` package simplifies the process of displaying these animations while providing a smooth user experience.

### When to Use

You should consider using the `rive_loading` package when:
- You want to enhance the user experience with engaging loading animations.
- You are looking for a lightweight solution to display loading indicators.
- You want to utilize Rive's capabilities to create custom animations that can be easily integrated into your Flutter app.

### Features

- **Customizable Animations**: Easily customize the loading animations to fit your app's theme.
- **Lightweight**: The package is designed to be lightweight, ensuring minimal impact on your app's performance.
- **Easy Integration**: Simple API for integrating Rive animations into your Flutter widgets.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS platforms.

## <-- END_DESCRIPTION -->

## <-- START_TUTORIAL -->

### Setup Process

To get started with the `rive_loading` package, follow these steps:

1. **Add Dependency**: Open your `pubspec.yaml` file and add the `rive_loading` package under dependencies.

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     rive_loading: ^latest_version
   ```

   Replace `^latest_version` with the latest version of the package available on [pub.dev](https://pub.dev/packages/rive_loading).

2. **Install Packages**: Run the following command in your terminal to install the new dependency:

   ```bash
   flutter pub get
   ```

3. **Platform-Specific Configuration**:
   - **Android**: Ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21.
   - **iOS**: No additional configuration is required for iOS, but ensure you have the latest version of Xcode installed.

### Using the Package

To use the `rive_loading` package, you can create a loading widget in your Flutter application. Hereâ€™s a simple example of how to implement it:

```dart
import 'package:flutter/material.dart';
import 'package:rive_loading/rive_loading.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Rive Loading Example')),
      body: Center(
        child: RiveLoading(
          // Specify the Rive animation file
          asset: 'assets/loading_animation.riv',
          // Optional: Customize the size of the loading animation
          size: 100.0,
        ),
      ),
    );
  }
}
```

## <-- END_TUTORIAL -->

## <-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:rive_loading/rive_loading.dart';

void main() {
  runApp(MyApp());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Rive Loading Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: Scaffold(
        appBar: AppBar(title: Text('Rive Loading Example')),
        body: Center(
          // Center the loading animation in the middle of the screen
          child: RiveLoading(
            // Specify the Rive animation file
            asset: 'assets/loading_animation.riv',
            // Optional: Customize the size of the loading animation
            size: 100.0,
          ),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function starts the Flutter application by calling runApp() with MyApp.
// 2. MyApp is a StatelessWidget that builds a MaterialApp with a title and theme.
// 3. The home property of MaterialApp is set to a Scaffold widget.
// 4. The Scaffold contains an AppBar with a title and a body that centers the RiveLoading widget.
// 5. The RiveLoading widget takes an asset parameter pointing to the Rive animation file and an optional size parameter.
// 6. When the app runs, it displays the loading animation in the center of the screen.
```

## <-- END_MAIN -->

### Summary

In this blog post, we explored the `rive_loading` Flutter package, which allows developers to integrate Rive animations as loading indicators in their applications. We covered the setup process, including platform-specific configurations, and provided a complete example of how to use the package in a Flutter app. The application flow was explained step-by-step through comments in the code, making it easy to understand how the package works and how to implement it effectively.
<-- START_DESCRIPTION -->

# Holiday JP Flutter Package
================================

The `holiday_jp` Flutter package provides a simple way to handle Japanese holidays in your Flutter application. It allows you to easily check if a date is a holiday in Japan and get the name of the holiday.

## When to Use This Package
---------------------------

This package is useful when you need to handle Japanese holidays in your Flutter application, such as:

* Displaying a list of holidays in a calendar
* Checking if a date is a holiday before scheduling an event
* Getting the name of a holiday for a specific date

## Features
------------

* Checks if a date is a holiday in Japan
* Gets the name of the holiday for a specific date
* Supports multiple languages (Japanese, English, etc.)

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `holiday_jp` package, you need to add it to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  holiday_jp: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Platform-Specific Details
---------------------------

### Android

No additional setup is required for Android.

### iOS

No additional setup is required for iOS.

## Using the Package
---------------------

To use the package, import it in your Dart file:

```dart
import 'package:holiday_jp/holiday_jp.dart';
```

Then, you can use the `HolidayJp` class to check if a date is a holiday and get the name of the holiday:

```dart
void main() {
  DateTime date = DateTime(2022, 1, 1);
  bool isHoliday = HolidayJp.isHoliday(date);
  String holidayName = HolidayJp.getHolidayName(date);
  print('Is holiday: $isHoliday');
  print('Holiday name: $holidayName');
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:holiday_jp/holiday_jp.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Holiday JP Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: HolidayJpDemo(),
    );
  }
}

class HolidayJpDemo extends StatefulWidget {
  @override
  _HolidayJpDemoState createState() => _HolidayJpDemoState();
}

class _HolidayJpDemoState extends State<HolidayJpDemo> {
  DateTime _date = DateTime.now();

  void _checkHoliday() {
    bool isHoliday = HolidayJp.isHoliday(_date);
    String holidayName = HolidayJp.getHolidayName(_date);
    print('Is holiday: $isHoliday');
    print('Holiday name: $holidayName');
    setState(() {
      _date = _date.add(Duration(days: 1));
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Holiday JP Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Date: ${_date.toString()}',
              style: TextStyle(fontSize: 24),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _checkHoliday,
              child: Text('Check Holiday'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app and sees the current date displayed on the screen.
// 2. The user clicks the "Check Holiday" button to check if the current date is a holiday.
// 3. The app uses the `HolidayJp` class to check if the date is a holiday and gets the name of the holiday.
// 4. The app prints the result to the console and updates the date to the next day.
// 5. The user can repeat steps 2-4 to check holidays for different dates.

// The code uses the `HolidayJp` class to handle Japanese holidays and the `MaterialApp` widget to create a simple UI.
// The `_HolidayJpDemoState` class uses the `setState` method to update the date and rebuild the UI.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Flutter Boring Avatars Package
================================

The `flutter_boring_avatars` package is a Flutter library that generates boring avatars, which are simple, minimalist, and cute. It's perfect for applications where you want to display user avatars but don't want to use complex graphics or images.

## Features

* Generates boring avatars with different shapes, colors, and patterns
* Customizable avatar size, shape, and colors
* Supports Android and iOS platforms

## When to Use

* When you want to display user avatars in a simple and minimalist way
* When you want to reduce the complexity of your application's graphics
* When you want a lightweight and easy-to-use avatar library

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `flutter_boring_avatars` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_boring_avatars: ^0.1.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:flutter_boring_avatars/flutter_boring_avatars.dart';
```
### Step 3: Use the Package

Use the `BoringAvatar` widget to display a boring avatar:
```dart
BoringAvatar(
  size: 100,
  shape: BoringAvatarShape.circle,
  colors: [Colors.blue, Colors.red],
)
```
### Platform-Specific Details

* Android: No additional configuration is required.
* iOS: No additional configuration is required.

### Optimizations

* To improve performance, use a smaller avatar size.
* To reduce memory usage, use a smaller avatar size or reduce the number of colors used.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_boring_avatars/flutter_boring_avatars.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Boring Avatars Demo',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Flutter Boring Avatars Demo'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              // Display a boring avatar with default settings
              BoringAvatar(
                size: 100,
              ),
              SizedBox(height: 20),
              // Display a boring avatar with custom shape and colors
              BoringAvatar(
                size: 100,
                shape: BoringAvatarShape.square,
                colors: [Colors.blue, Colors.red],
              ),
              SizedBox(height: 20),
              // Display a boring avatar with custom size and shape
              BoringAvatar(
                size: 50,
                shape: BoringAvatarShape.circle,
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the application.
// 2. The `RealFlutter` widget is displayed, which contains a `MaterialApp` widget.
// 3. The `MaterialApp` widget displays a `Scaffold` widget, which contains an `AppBar` widget and a `Center` widget.
// 4. The `Center` widget displays a `Column` widget, which contains three `BoringAvatar` widgets.
// 5. Each `BoringAvatar` widget displays a boring avatar with different settings.
// 6. The user can view the boring avatars and customize them as needed.

// In summary, the code flows as follows:
// RealFlutter -> MaterialApp -> Scaffold -> Center -> Column -> BoringAvatar
```

<-- END_MAIN -->
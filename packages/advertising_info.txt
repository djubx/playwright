```markdown
<!-- START_DESCRIPTION -->
# Advertising Info Flutter Package

The `advertising_info` Flutter package is designed to provide developers with access to advertising identifiers and related information on both Android and iOS platforms. This package is particularly useful for applications that require user tracking for advertising purposes, such as analytics, targeted advertising, and user segmentation.

## When to Use This Package
- **User Tracking**: If your app needs to track user behavior for advertising purposes.
- **Analytics**: To gather insights on user engagement and advertising effectiveness.
- **Personalization**: For tailoring advertisements based on user preferences and behaviors.

## Features
- **Access to Advertising ID**: Retrieve the unique advertising identifier for the device.
- **Limit Ad Tracking**: Check if the user has opted out of personalized ads.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS devices.

Overall, the `advertising_info` package is a powerful tool for developers looking to enhance their advertising strategies and improve user engagement through targeted marketing.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Advertising Info Package

## Installation
To use the `advertising_info` package, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  advertising_info: ^2.0.0
```

Run `flutter pub get` to install the package.

## Platform-Specific Configuration

### Android
1. Ensure that your `AndroidManifest.xml` file includes the necessary permissions:
   ```xml
   <uses-permission android:name="android.permission.INTERNET"/>
   <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>
   ```

2. If you are targeting Android 12 (API level 31) or higher, you need to add the following to your `AndroidManifest.xml`:
   ```xml
   <application>
       ...
       <meta-data
           android:name="com.google.android.gms.ads.APPLICATION_ID"
           android:value="YOUR_ADMOB_APP_ID"/>
   </application>
   ```

### iOS
1. Open your `Info.plist` file and add the following keys:
   ```xml
   <key>NSUserTrackingUsageDescription</key>
   <string>We use your data to provide personalized ads.</string>
   ```

2. Ensure that you have the correct permissions set up for tracking.

## Using the Package
To use the `advertising_info` package, you can follow these steps in your Dart code:

```dart
import 'package:flutter/material.dart';
import 'package:advertising_info/advertising_info.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  String? advertisingId;
  bool? limitAdTracking;

  @override
  void initState() {
    super.initState();
    _getAdvertisingInfo();
  }

  Future<void> _getAdvertisingInfo() async {
    // Fetch advertising info
    final info = await AdvertisingInfo().getAdvertisingInfo();
    setState(() {
      advertisingId = info.id; // Store the advertising ID
      limitAdTracking = info.limitAdTracking; // Store limit ad tracking status
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Advertising Info Example')),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text('Advertising ID: $advertisingId'),
            Text('Limit Ad Tracking: $limitAdTracking'),
          ],
        ),
      ),
    );
  }
}
```
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using the Advertising Info Package

```dart
import 'package:flutter/material.dart';
import 'package:advertising_info/advertising_info.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  String? advertisingId; // Variable to hold the advertising ID
  bool? limitAdTracking; // Variable to hold the limit ad tracking status

  @override
  void initState() {
    super.initState();
    _getAdvertisingInfo(); // Call the method to fetch advertising info
  }

  Future<void> _getAdvertisingInfo() async {
    // Fetch advertising info using the advertising_info package
    final info = await AdvertisingInfo().getAdvertisingInfo();
    setState(() {
      advertisingId = info.id; // Store the advertising ID
      limitAdTracking = info.limitAdTracking; // Store limit ad tracking status
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Advertising Info Example')),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            // Display the advertising ID
            Text('Advertising ID: $advertisingId'),
            // Display whether limit ad tracking is enabled
            Text('Limit Ad Tracking: $limitAdTracking'),
          ],
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the RealFlutter widget.
// 2. In the initState method, _getAdvertisingInfo is called to fetch the advertising information.
// 3. The _getAdvertisingInfo method uses the AdvertisingInfo package to retrieve the advertising ID and limit ad tracking status.
// 4. The retrieved information is stored in the advertisingId and limitAdTracking variables.
// 5. The build method constructs the UI, displaying the advertising ID and limit ad tracking status in the center of the screen.
```
<!-- END_MAIN -->
```

### Summary
In this blog post, we explored the `advertising_info` Flutter package, detailing its features, installation process, and usage. We provided a complete example of a Flutter application that retrieves and displays advertising information, including the advertising ID and the user's limit ad tracking preference. This package is essential for developers looking to implement user tracking and analytics in their applications effectively.
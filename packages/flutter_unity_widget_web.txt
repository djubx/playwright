```markdown
<!-- START_DESCRIPTION -->
# Flutter Unity Widget Web: Bridging Flutter and Unity

The `flutter_unity_widget_web` package is a powerful tool that allows Flutter developers to integrate Unity 3D content into their Flutter applications. This package is particularly useful for developers looking to create immersive experiences, such as games or interactive simulations, within their Flutter apps. By leveraging Unity's robust 3D capabilities, developers can enhance their applications with rich graphics and animations.

## When to Use This Package
- **Game Development**: If you're building a game that requires advanced graphics and physics, integrating Unity can provide a significant advantage.
- **Interactive Simulations**: For applications that need to simulate real-world scenarios (like architectural visualizations), Unity can render these environments effectively.
- **Augmented Reality (AR)**: When combined with AR frameworks, Unity can help create engaging AR experiences within Flutter apps.

## Key Features
- **Seamless Integration**: Easily embed Unity content into Flutter applications.
- **Cross-Platform Support**: Works on both Android and iOS, allowing for a wide reach.
- **Real-time Rendering**: Leverage Unity's real-time rendering capabilities for dynamic content.
- **Customizable**: Developers can customize Unity scenes and interact with them through Flutter.

Overall, `flutter_unity_widget_web` is an excellent choice for developers looking to combine the strengths of Flutter and Unity to create visually stunning applications.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Setting Up and Using flutter_unity_widget_web

In this section, we will walk through the setup process for the `flutter_unity_widget_web` package and provide platform-specific details for Android and iOS.

## Installation

To get started, add the package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  flutter_unity_widget_web: ^latest_version
```

Make sure to replace `^latest_version` with the latest version available on [pub.dev](https://pub.dev/packages/flutter_unity_widget_web).

## Platform-Specific Setup

### Android
1. **Update Android Manifest**: Open `android/app/src/main/AndroidManifest.xml` and add the following permissions:
   ```xml
   <uses-permission android:name="android.permission.INTERNET"/>
   ```

2. **Gradle Configuration**: Ensure your `android/app/build.gradle` file has the correct configurations for Unity.

### iOS
1. **Update Info.plist**: Open `ios/Runner/Info.plist` and add the following:
   ```xml
   <key>NSCameraUsageDescription</key>
   <string>We need access to the camera for AR features.</string>
   ```

2. **CocoaPods**: Make sure to run `pod install` in the `ios` directory to install any necessary dependencies.

## Basic Usage

To use the `flutter_unity_widget_web` package, you can create a simple Flutter widget that integrates a Unity view. Hereâ€™s a basic example:

```dart
import 'package:flutter/material.dart';
import 'package:flutter_unity_widget_web/flutter_unity_widget_web.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  late UnityWidgetController _unityWidgetController;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Unity Widget Example'),
      ),
      body: UnityWidget(
        onUnityCreated: onUnityCreated,
      ),
    );
  }

  void onUnityCreated(UnityWidgetController controller) {
    _unityWidgetController = controller;
    // You can now interact with Unity through the controller
  }
}
```

In this example, we create a simple Flutter application that initializes a Unity widget. The `onUnityCreated` callback provides a controller to interact with the Unity instance.

With this setup, you can start building more complex interactions and features using Unity within your Flutter app.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of flutter_unity_widget_web

```dart
import 'package:flutter/material.dart';
import 'package:flutter_unity_widget_web/flutter_unity_widget_web.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  late UnityWidgetController _unityWidgetController;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Unity Widget Example'),
      ),
      body: UnityWidget(
        onUnityCreated: onUnityCreated, // Callback when Unity is created
      ),
    );
  }

  void onUnityCreated(UnityWidgetController controller) {
    _unityWidgetController = controller; // Store the controller for later use
    // You can now interact with Unity through the controller
  }
}

// The application starts with the RealFlutter widget.
// The UnityWidget is embedded in the body of the Scaffold.
// When the Unity widget is created, the onUnityCreated callback is triggered,
// allowing us to store the controller for future interactions.
// This setup provides a foundation for integrating Unity content into Flutter,
// enabling developers to create rich, interactive experiences.
```
<!-- END_MAIN -->

In this complete example, we have a simple Flutter application that integrates a Unity widget. The `RealFlutter` class serves as the main entry point, and the `UnityWidget` is embedded within the `Scaffold` body. The `onUnityCreated` method is called when the Unity instance is ready, allowing us to store the controller for future interactions.

### Application Flow Summary
- The application starts with the `RealFlutter` widget.
- The `UnityWidget` is displayed in the body of the `Scaffold`.
- When the Unity widget is created, the `onUnityCreated` callback is triggered, allowing us to interact with the Unity instance through the controller.
- This setup provides a solid foundation for building more complex applications that leverage Unity's capabilities within Flutter.

By following this guide, you can effectively integrate Unity into your Flutter applications, creating engaging and interactive experiences for your users.
```
```markdown
<!-- START_DESCRIPTION -->
# fc_native_video_thumbnail Flutter Package

The `fc_native_video_thumbnail` package is a powerful tool for Flutter developers looking to generate video thumbnails natively on both Android and iOS platforms. This package simplifies the process of extracting a still image from a video file, allowing developers to display video previews in their applications without the need for complex video processing libraries.

## When to Use This Package

You might consider using the `fc_native_video_thumbnail` package in scenarios such as:
- Displaying a list of video thumbnails in a media gallery app.
- Creating a video player interface where users can see a preview of the video before playing it.
- Implementing a social media app where users can upload videos and see their thumbnails.

## Features

- **Native Performance**: Utilizes platform-specific APIs to generate thumbnails, ensuring high performance and low latency.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS devices.
- **Customizable**: Allows developers to specify the time at which the thumbnail should be captured, providing flexibility in how video previews are displayed.

Overall, the `fc_native_video_thumbnail` package is an essential tool for any Flutter developer looking to enhance their video-related applications with efficient thumbnail generation.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using fc_native_video_thumbnail

In this tutorial, we will walk through the setup process for the `fc_native_video_thumbnail` package and demonstrate how to use it in a Flutter application.

## Step 1: Adding the Dependency

To get started, add the `fc_native_video_thumbnail` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  fc_native_video_thumbnail: ^latest_version
```

Make sure to replace `^latest_version` with the latest version of the package available on [pub.dev](https://pub.dev/packages/fc_native_video_thumbnail).

## Step 2: Platform-Specific Configuration

### Android Configuration

1. Open your `android/app/build.gradle` file.
2. Ensure that you have the following permissions in your `AndroidManifest.xml` file:

```xml
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
```

### iOS Configuration

1. Open your `ios/Runner/Info.plist` file.
2. Add the following keys to request permission to access the photo library:

```xml
<key>NSPhotoLibraryUsageDescription</key>
<string>We need access to your photo library to display video thumbnails.</string>
<key>NSPhotoLibraryAddUsageDescription</key>
<string>We need access to save video thumbnails.</string>
```

## Step 3: Using the Package

Now that we have set up the package, we can use it in our Flutter application. Below is a simple example of how to generate and display a video thumbnail.

```dart
import 'package:flutter/material.dart';
import 'package:fc_native_video_thumbnail/fc_native_video_thumbnail.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Video Thumbnail Example')),
        body: Center(
          child: FutureBuilder<String>(
            future: _getThumbnail('path_to_your_video.mp4'), // Replace with your video path
            builder: (context, snapshot) {
              if (snapshot.connectionState == ConnectionState.waiting) {
                return CircularProgressIndicator();
              } else if (snapshot.hasError) {
                return Text('Error: ${snapshot.error}');
              } else {
                return Image.file(File(snapshot.data!)); // Display the thumbnail
              }
            },
          ),
        ),
      ),
    );
  }

  Future<String> _getThumbnail(String videoPath) async {
    // Generate a thumbnail from the video at the specified path
    final thumbnailPath = await FcNativeVideoThumbnail.thumbnail(
      video: videoPath,
      timeMs: 5000, // Capture thumbnail at 5 seconds
    );
    return thumbnailPath; // Return the path of the generated thumbnail
  }
}
```

### Explanation of the Code

- **Import Statements**: We import the necessary packages, including `fc_native_video_thumbnail` for thumbnail generation.
- **RealFlutter Class**: This is our main widget that builds the application interface.
- **FutureBuilder**: We use a `FutureBuilder` to handle the asynchronous operation of generating the thumbnail. It shows a loading indicator while waiting for the thumbnail to be generated.
- **_getThumbnail Method**: This method takes the video path as input and uses the `FcNativeVideoThumbnail.thumbnail` method to generate a thumbnail at the specified time (5 seconds in this case).

With this setup, you can easily generate and display video thumbnails in your Flutter application.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using fc_native_video_thumbnail

```dart
import 'package:flutter/material.dart';
import 'package:fc_native_video_thumbnail/fc_native_video_thumbnail.dart';
import 'dart:io';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Video Thumbnail Example')),
        body: Center(
          child: FutureBuilder<String>(
            future: _getThumbnail('path_to_your_video.mp4'), // Replace with your video path
            builder: (context, snapshot) {
              if (snapshot.connectionState == ConnectionState.waiting) {
                return CircularProgressIndicator(); // Show loading indicator while waiting
              } else if (snapshot.hasError) {
                return Text('Error: ${snapshot.error}'); // Display error message if any
              } else {
                return Image.file(File(snapshot.data!)); // Display the generated thumbnail
              }
            },
          ),
        ),
      ),
    );
  }

  Future<String> _getThumbnail(String videoPath) async {
    // Generate a thumbnail from the video at the specified path
    final thumbnailPath = await FcNativeVideoThumbnail.thumbnail(
      video: videoPath,
      timeMs: 5000, // Capture thumbnail at 5 seconds
    );
    return thumbnailPath; // Return the path of the generated thumbnail
  }
}

// The application starts with the RealFlutter widget.
// The FutureBuilder widget is used to handle the asynchronous thumbnail generation.
// When the app is launched, it calls the _getThumbnail method with the video path.
// While the thumbnail is being generated, a CircularProgressIndicator is displayed.
// Once the thumbnail is ready, it is displayed as an Image widget.
// If there is an error during thumbnail generation, an error message is shown.
```
<!-- END_MAIN -->
```

This structured blog provides a comprehensive overview of the `fc_native_video_thumbnail` package, guiding readers through its features, setup, and usage with a complete example. Each section is clearly marked for easy navigation and understanding.
```markdown
<!-- START_DESCRIPTION -->
# Animated Floating Buttons Flutter Package

The `animated_floating_buttons` package for Flutter provides a simple and elegant way to create animated floating action buttons (FABs) that can enhance the user experience in mobile applications. This package allows developers to create a set of floating buttons that can expand and collapse, providing a clean and interactive way to present multiple actions to users without cluttering the UI.

## When to Use This Package

You might consider using the `animated_floating_buttons` package in scenarios such as:
- **Multi-Action Interfaces**: When your app requires multiple actions that can be performed from a single button, such as sharing, editing, or deleting.
- **Space-Constrained Layouts**: In applications where screen real estate is limited, this package allows you to present options without overwhelming the user.
- **Enhanced User Experience**: To create a more engaging and interactive UI that draws users' attention to important actions.

## Features

- **Smooth Animations**: The package provides smooth animations for expanding and collapsing buttons, enhancing the overall user experience.
- **Customizable**: You can customize the appearance and behavior of the buttons, including colors, sizes, and animations.
- **Easy Integration**: The package is easy to integrate into existing Flutter applications with minimal setup.

Overall, the `animated_floating_buttons` package is a powerful tool for Flutter developers looking to improve their app's UI with animated floating action buttons.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Animated Floating Buttons

## Step 1: Adding the Dependency

To use the `animated_floating_buttons` package, you first need to add it to your `pubspec.yaml` file. Open your `pubspec.yaml` and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  animated_floating_buttons: ^1.0.0  # Check for the latest version on pub.dev
```

## Step 2: Running Flutter Packages Get

After adding the dependency, run the following command in your terminal to install the package:

```bash
flutter pub get
```

## Step 3: Platform-Specific Configuration

### Android

For Android, ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

### iOS

For iOS, you may need to update your `ios/Podfile` to ensure compatibility with the latest iOS versions. Make sure to uncomment the platform line and set it to at least 10.0:

```ruby
platform :ios, '10.0'
```

## Step 4: Using the Package

Now that you have set up the package, you can start using it in your Flutter application. Below is a simple example of how to implement animated floating buttons.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Animated Floating Buttons

```dart
import 'package:flutter/material.dart';
import 'package:animated_floating_buttons/animated_floating_buttons.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Animated Floating Buttons Example',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Animated Floating Buttons'),
        ),
        body: Center(
          child: Text('Press the button below!'),
        ),
        // The AnimatedFloatingActionButton widget is used here
        floatingActionButton: AnimatedFloatingActionButton(
          // The main button that triggers the animation
          fabButtons: <Widget>[
            // Define the buttons that will be shown when expanded
            FloatingActionButton(
              onPressed: () {
                // Action for the first button
                print('Action 1');
              },
              child: Icon(Icons.share),
              backgroundColor: Colors.blue,
            ),
            FloatingActionButton(
              onPressed: () {
                // Action for the second button
                print('Action 2');
              },
              child: Icon(Icons.edit),
              backgroundColor: Colors.green,
            ),
            FloatingActionButton(
              onPressed: () {
                // Action for the third button
                print('Action 3');
              },
              child: Icon(Icons.delete),
              backgroundColor: Colors.red,
            ),
          ],
          // The main floating action button
          animatedIconData: AnimatedIcons.menu_close,
          // The duration of the animation
          duration: Duration(milliseconds: 300),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function runs the RealFlutter app.
// 2. The RealFlutter class builds a MaterialApp with a title and a Scaffold.
// 3. The Scaffold contains an AppBar and a Center widget with a text message.
// 4. The AnimatedFloatingActionButton widget is used to create the floating action button.
// 5. The fabButtons property defines the buttons that will appear when the main button is pressed.
// 6. Each FloatingActionButton has an onPressed callback that defines the action to be taken when the button is pressed.
// 7. The animatedIconData property defines the icon animation for the main button.
// 8. The duration property sets the animation speed for expanding and collapsing the buttons.
```
<!-- END_MAIN -->
```

This structured blog provides a comprehensive overview of the `animated_floating_buttons` package, including its features, setup instructions, and a complete example with detailed comments explaining the application flow.
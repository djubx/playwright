<-- START_DESCRIPTION -->

**Loading Skeleton Niu Flutter Package**
=====================================

The `loading_skeleton_niu` Flutter package provides a simple and customizable way to display a loading skeleton for your app's content. It's perfect for use cases where you need to show a placeholder while data is being fetched or processed.

**When to Use**
---------------

* When fetching data from an API and you want to show a placeholder until the data is received.
* When processing large amounts of data and you want to show a placeholder until the processing is complete.
* When you want to add a visually appealing loading effect to your app.

**Features**
------------

* Customizable skeleton color and background color.
* Support for various skeleton shapes (e.g., rectangle, circle, oval).
* Ability to add a shimmer effect to the skeleton.
* Easy to use and integrate into your existing Flutter app.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setup and Usage**
-------------------

### Step 1: Add the Package to Your Pubspec.yaml File

```yml
dependencies:
  flutter:
    sdk: flutter
  loading_skeleton_niu: ^1.0.0
```

### Step 2: Import the Package in Your Dart File

```dart
import 'package:loading_skeleton_niu/loading_skeleton_niu.dart';
```

### Step 3: Use the LoadingSkeletonNiu Widget

```dart
LoadingSkeletonNiu(
  width: 200,
  height: 200,
  skeletonColor: Colors.grey,
  backgroundColor: Colors.white,
  shape: SkeletonShape.rectangle,
  shimmer: true,
)
```

### Platform-Specific Details

* For Android, you may need to add the following code to your `AndroidManifest.xml` file to ensure that the shimmer effect works properly:
```xml
<application
  ...
  android:hardwareAccelerated="true"
  ...
>
```
* For iOS, you don't need to do anything special.

### Configurations and Optimizations

* You can customize the skeleton color, background color, shape, and shimmer effect to fit your app's design.
* You can also adjust the width and height of the skeleton to fit your content.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:loading_skeleton_niu/loading_skeleton_niu.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Loading Skeleton Niu Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    // Simulate data fetching or processing
    Future.delayed(Duration(seconds: 3), () {
      setState(() {
        _isLoading = false;
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Loading Skeleton Niu Demo'),
      ),
      body: Center(
        child: _isLoading
            ? LoadingSkeletonNiu(
                width: 200,
                height: 200,
                skeletonColor: Colors.grey,
                backgroundColor: Colors.white,
                shape: SkeletonShape.rectangle,
                shimmer: true,
              )
            : Text('Data loaded!'),
      ),
    );
  }
}

// Application flow:
// 1. The app starts and the _isLoading flag is set to true.
// 2. The LoadingSkeletonNiu widget is displayed with a shimmer effect.
// 3. After 3 seconds, the _isLoading flag is set to false.
// 4. The LoadingSkeletonNiu widget is replaced with the Text widget displaying "Data loaded!".

// Summary: This code demonstrates how to use the LoadingSkeletonNiu package to display a loading skeleton while data is being fetched or processed. The skeleton is customizable and can be easily integrated into your existing Flutter app.
```

<-- END_MAIN -->
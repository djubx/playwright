<-- START_DESCRIPTION -->

# Reactable Flutter Package: A High-Level Overview
=====================================================

The Reactable Flutter package is a powerful tool for building reactive, data-driven applications. It provides a simple and efficient way to manage state and propagate changes throughout your app.

### When to Use Reactable

Reactable is ideal for applications that require complex data management, such as:

* Real-time data updates
* Data-driven UI components
* Complex business logic

### Key Features

* Reactive data management
* Automatic change detection and propagation
* Simple and efficient API

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using Reactable
=====================================

### Step 1: Add the Reactable Package to Your Project

Add the following dependency to your `pubspec.yaml` file:
```yml
dependencies:
  reactable: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Reactable Package

Import the Reactable package in your Dart file:
```dart
import 'package:reactable/reactable.dart';
```
### Step 3: Create a Reactable Instance

Create a new instance of the `Reactable` class:
```dart
final reactable = Reactable();
```
### Step 4: Define Your Data Model

Define a data model class that extends `ReactableModel`:
```dart
class MyDataModel extends ReactableModel {
  int _counter = 0;

  int get counter => _counter;

  void incrementCounter() {
    _counter++;
    notifyListeners();
  }
}
```
### Step 5: Use the Reactable Instance

Use the `reactable` instance to manage your data model:
```dart
final dataModel = MyDataModel();

reactable.register(dataModel);

// Update the data model
dataModel.incrementCounter();

// Get the updated data
print(reactable.get(dataModel).counter);
```
### Platform-Specific Details

* Android: No additional configuration is required.
* iOS: You need to add the following code to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:reactable/reactable.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Reactable Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final reactable = Reactable();
  final dataModel = MyDataModel();

  @override
  void initState() {
    super.initState();
    reactable.register(dataModel);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Reactable Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Counter: ${reactable.get(dataModel).counter}',
              style: TextStyle(fontSize: 24),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                dataModel.incrementCounter();
              },
              child: Text('Increment Counter'),
            ),
          ],
        ),
      ),
    );
  }
}

class MyDataModel extends ReactableModel {
  int _counter = 0;

  int get counter => _counter;

  void incrementCounter() {
    _counter++;
    notifyListeners();
  }
}

// Application flow:
// 1. The app starts and creates a new instance of the `Reactable` class.
// 2. The app defines a data model class `MyDataModel` that extends `ReactableModel`.
// 3. The app creates a new instance of the `MyDataModel` class and registers it with the `reactable` instance.
// 4. The app uses the `reactable` instance to manage the data model.
// 5. When the user clicks the "Increment Counter" button, the app updates the data model by calling the `incrementCounter` method.
// 6. The `reactable` instance automatically detects the change and notifies the listeners.
// 7. The app updates the UI by getting the updated data from the `reactable` instance.
```

// Final summary:
// The code demonstrates the use of the Reactable package to manage a simple counter data model.
// The app uses the Reactable instance to register the data model and update the UI when the data changes.
// The code flow shows how the app creates a new instance of the Reactable class, defines a data model class, and uses the Reactable instance to manage the data model.
<-- END_MAIN -->
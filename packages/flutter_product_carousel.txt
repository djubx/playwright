<-- START_DESCRIPTION -->

# Flutter Product Carousel Package
=====================================

The `flutter_product_carousel` package is a powerful and customizable Flutter widget that allows you to create a product carousel with various features. It is ideal for e-commerce applications where you want to showcase multiple products in a single view.

### Key Features

*   Customizable carousel layout
*   Support for multiple product items
*   Automatic scrolling with animation
*   Manual scrolling with gestures
*   Support for custom product item widgets

### When to Use

You can use this package when you need to display multiple products in a single view, such as:

*   E-commerce applications
*   Product catalogs
*   Shopping apps

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Package
=============================================

### Step 1: Add the Package to Your Project

Add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  flutter_product_carousel: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:flutter_product_carousel/flutter_product_carousel.dart';
```

### Step 3: Create a Product Carousel

Create a `ProductCarousel` widget and pass a list of product items to it:

```dart
ProductCarousel(
  items: [
    ProductItem(
      image: 'assets/product1.jpg',
      title: 'Product 1',
      price: 19.99,
    ),
    ProductItem(
      image: 'assets/product2.jpg',
      title: 'Product 2',
      price: 29.99,
    ),
    // Add more product items here...
  ],
)
```

### Platform-Specific Details

*   For Android, make sure to add the following line to your `AndroidManifest.xml` file:

    ```xml
<application
  ...
  android:hardwareAccelerated="true"
  ...>
```

*   For iOS, make sure to add the following line to your `Info.plist` file:

    ```xml
<key>UIViewControllerBasedStatusBarAppearance</key>
<false/>
```

### Required Configurations and Optimizations

*   Make sure to handle the product item tap event by passing a callback function to the `onItemTap` property:

    ```dart
ProductCarousel(
  ...
  onItemTap: (index) {
    // Handle the product item tap event here...
  },
)
```

*   You can customize the carousel layout by passing a custom `CarouselOptions` object to the `options` property:

    ```dart
ProductCarousel(
  ...
  options: CarouselOptions(
    height: 200,
    aspectRatio: 16/9,
    viewportFraction: 0.8,
    initialPage: 0,
    enableInfiniteScroll: true,
    reverse: false,
    autoPlay: true,
    autoPlayInterval: Duration(seconds: 3),
    autoPlayAnimationDuration: Duration(milliseconds: 800),
    autoPlayCurve: Curves.fastOutSlowIn,
    enlargeCenterPage: true,
    onPageChanged: (index) {
      // Handle the page change event here...
    },
  ),
)
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_product_carousel/flutter_product_carousel.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Product Carousel Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Product Carousel Demo'),
      ),
      body: Center(
        child: ProductCarousel(
          items: [
            ProductItem(
              image: 'assets/product1.jpg',
              title: 'Product 1',
              price: 19.99,
            ),
            ProductItem(
              image: 'assets/product2.jpg',
              title: 'Product 2',
              price: 29.99,
            ),
            ProductItem(
              image: 'assets/product3.jpg',
              title: 'Product 3',
              price: 39.99,
            ),
          ],
          options: CarouselOptions(
            height: 200,
            aspectRatio: 16/9,
            viewportFraction: 0.8,
            initialPage: 0,
            enableInfiniteScroll: true,
            reverse: false,
            autoPlay: true,
            autoPlayInterval: Duration(seconds: 3),
            autoPlayAnimationDuration: Duration(milliseconds: 800),
            autoPlayCurve: Curves.fastOutSlowIn,
            enlargeCenterPage: true,
            onPageChanged: (index) {
              print('Page changed to $index');
            },
          ),
          onItemTap: (index) {
            print('Product item $index tapped');
          },
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app and is presented with a product carousel.
// 2. The carousel displays multiple product items, each with an image, title, and price.
// 3. The user can manually scroll through the carousel by swiping left or right.
// 4. The carousel also automatically scrolls through the products at a set interval.
// 5. When the user taps on a product item, a callback function is called to handle the tap event.
// 6. The callback function can be used to navigate to a product details page or perform some other action.
// 7. The carousel also fires a page change event when the user scrolls to a new page.
// 8. The page change event can be used to update the app's state or perform some other action.
```

<-- END_MAIN -->
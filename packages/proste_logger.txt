# Proste Logger: A Comprehensive Guide to Logging in Flutter

## <-- START_DESCRIPTION -->

### Description

The **proste_logger** package is a lightweight and efficient logging solution for Flutter applications. It provides developers with a simple yet powerful way to log messages, errors, and other important information during the development and production phases of an application. This package is particularly useful for debugging and monitoring applications, allowing developers to track the flow of execution and identify issues quickly.

### When to Use

You should consider using **proste_logger** in scenarios such as:
- Debugging complex applications where tracking the flow of execution is crucial.
- Monitoring application performance and behavior in production.
- Capturing error logs to facilitate troubleshooting and improve user experience.

### Features

- **Log Levels**: Supports various log levels (e.g., debug, info, warning, error) to categorize log messages.
- **Customizable Output**: Allows customization of log output formats and destinations (e.g., console, file).
- **Easy Integration**: Simple setup process that integrates seamlessly with existing Flutter applications.
- **Performance**: Lightweight and optimized for performance, ensuring minimal impact on application speed.

## <-- END_DESCRIPTION -->

## <-- START_TUTORIAL -->

### Tutorial

To get started with the **proste_logger** package, follow these steps:

#### Step 1: Add Dependency

Add the package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  proste_logger: ^1.0.0  # Check for the latest version on pub.dev
```

#### Step 2: Install the Package

Run the following command in your terminal to install the package:

```bash
flutter pub get
```

#### Step 3: Platform-Specific Configuration

For **Android**:
- No specific configuration is required for Android. The package works out of the box.

For **iOS**:
- Ensure that your iOS deployment target is set to at least 10.0 in your `ios/Podfile`:

```ruby
platform :ios, '10.0'
```

#### Step 4: Basic Usage

You can start using the logger in your Flutter application by importing the package and creating an instance of the logger:

```dart
import 'package:proste_logger/proste_logger.dart';

void main() {
  final logger = ProsteLogger();
  logger.info('Application started');
}
```

You can log messages at different levels:

```dart
logger.debug('This is a debug message');
logger.warning('This is a warning message');
logger.error('This is an error message');
```

## <-- END_TUTORIAL -->

## <-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:proste_logger/proste_logger.dart';

void main() {
  // Create an instance of the logger
  final logger = ProsteLogger();

  // Log the application start
  logger.info('Application started');

  runApp(MyApp(logger: logger));
}

class MyApp extends StatelessWidget {
  final ProsteLogger logger;

  MyApp({required this.logger});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Proste Logger Example',
      home: HomeScreen(logger: logger),
    );
  }
}

class HomeScreen extends StatelessWidget {
  final ProsteLogger logger;

  HomeScreen({required this.logger});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Proste Logger Example'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Log a button press event
            logger.info('Button pressed');
            // Simulate an error
            try {
              throw Exception('Simulated error');
            } catch (e) {
              // Log the error
              logger.error('An error occurred: $e');
            }
          },
          child: Text('Press Me'),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function initializes the logger and logs the application start.
// 2. The MyApp widget is created, passing the logger instance to it.
// 3. The HomeScreen widget is displayed, which contains a button.
// 4. When the button is pressed, an info log is created.
// 5. An error is simulated, and if caught, it is logged as an error.
```

## <-- END_MAIN -->

### Summary of Application Flow

The application starts by initializing the `ProsteLogger` instance and logging the application start. The `MyApp` widget is created, which sets up the main structure of the app. The `HomeScreen` widget contains a button that, when pressed, logs an informational message and simulates an error. If an error occurs, it is caught and logged as an error. This flow demonstrates how to effectively use the **proste_logger** package to track application behavior and handle errors gracefully.
<-- START_DESCRIPTION -->

# Persistent Header Adaptive Package
=====================================

The `persistent_header_adaptive` package is a Flutter package that allows you to create a persistent header that adapts to the scroll position of a list or other scrollable content. This package is useful when you want to create a header that remains visible even when the user scrolls down the list.

### Features

*   Adaptive header that changes size and position based on scroll position
*   Customizable header and content widgets
*   Support for both Android and iOS platforms

### When to Use

This package is useful in scenarios where you want to display a header that remains visible even when the user scrolls down a list. For example:

*   A profile page with a header that displays the user's profile picture and name
*   A list of items with a header that displays the category or section title
*   A news article with a header that displays the article title and author

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

## Step 1: Add the Package to Your Project

To use the `persistent_header_adaptive` package, you need to add it to your project's `pubspec.yaml` file. Open the file and add the following line under the `dependencies` section:

```yml
dependencies:
  flutter:
    sdk: flutter
  persistent_header_adaptive: ^1.0.0
```

Then, run `flutter pub get` in your terminal to install the package.

## Step 2: Import the Package

In your Dart file, import the package using the following line:

```dart
import 'package:persistent_header_adaptive/persistent_header_adaptive.dart';
```

## Step 3: Create the Header and Content Widgets

Create two separate widgets for the header and content. For example:

```dart
Widget _buildHeader() {
  return Container(
    height: 100,
    color: Colors.blue,
    child: Center(
      child: Text('Header'),
    ),
  );
}

Widget _buildContent() {
  return ListView.builder(
    itemCount: 100,
    itemBuilder: (context, index) {
      return ListTile(
        title: Text('Item $index'),
      );
    },
  );
}
```

## Step 4: Use the PersistentHeaderAdaptive Widget

Wrap the header and content widgets with the `PersistentHeaderAdaptive` widget. For example:

```dart
PersistentHeaderAdaptive(
  header: _buildHeader(),
  content: _buildContent(),
)
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:persistent_header_adaptive/persistent_header_adaptive.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Persistent Header Adaptive Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    // Create the header widget
    Widget _buildHeader() {
      return Container(
        height: 100,
        color: Colors.blue,
        child: Center(
          child: Text('Header'),
        ),
      );
    }

    // Create the content widget
    Widget _buildContent() {
      return ListView.builder(
        itemCount: 100,
        itemBuilder: (context, index) {
          return ListTile(
            title: Text('Item $index'),
          );
        },
      );
    }

    // Use the PersistentHeaderAdaptive widget
    return Scaffold(
      body: PersistentHeaderAdaptive(
        header: _buildHeader(),
        content: _buildContent(),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user scrolls down the list.
// 2. The header remains visible and adapts to the scroll position.
// 3. The content is displayed below the header.
// 4. When the user scrolls up, the header returns to its original position.

// In summary, the code flows as follows:
// 1. The PersistentHeaderAdaptive widget is used to wrap the header and content widgets.
// 2. The header widget is created and displayed at the top of the screen.
// 3. The content widget is created and displayed below the header.
// 4. When the user scrolls down, the header remains visible and adapts to the scroll position.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Update Helper Flutter Package
================================

The `update_helper` Flutter package is a utility library that helps manage app updates on both Android and iOS platforms. It provides a simple and efficient way to check for updates, download, and install new versions of your app.

## When to Use
--------------

Use the `update_helper` package when you want to:

* Check for updates on app launch or at regular intervals
* Download and install updates in the background
* Handle update-related tasks, such as displaying update notifications or restart prompts

## Features
------------

* Supports both Android and iOS platforms
* Customizable update check intervals and update notification displays
* Background download and installation of updates
* Restart prompt after update installation

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
==================

## Step 1: Add the Package to Your Project
-----------------------------------------

Add the `update_helper` package to your `pubspec.yaml` file:
```yml
dependencies:
  update_helper: ^1.0.0
```
Then, run `flutter pub get` to install the package.

## Step 2: Import the Package
-----------------------------

Import the `update_helper` package in your Dart file:
```dart
import 'package:update_helper/update_helper.dart';
```
## Step 3: Initialize the Update Helper
-----------------------------------------

Initialize the update helper with your app's update settings:
```dart
UpdateHelper _updateHelper = UpdateHelper(
  updateCheckInterval: Duration(days: 1), // Check for updates every day
  updateNotificationDisplay: UpdateNotificationDisplay.always, // Always display update notifications
);
```
## Step 4: Check for Updates
---------------------------

Call the `checkForUpdates` method to check for updates:
```dart
_updateHelper.checkForUpdates().then((updateAvailable) {
  if (updateAvailable) {
    // Update available, proceed with download and installation
  } else {
    // No update available
  }
});
```
## Platform-Specific Details
---------------------------

### Android

On Android, the `update_helper` package uses the Google Play Store's in-app update API to check for updates and download/install new versions.

Make sure to add the following dependencies to your `build.gradle` file:
```groovy
dependencies {
  implementation 'com.google.android.play:core:1.10.0'
}
```
### iOS

On iOS, the `update_helper` package uses the App Store's API to check for updates and download/install new versions.

Make sure to add the following framework to your `Info.plist` file:
```xml
<key>UIBackgroundModes</key>
<array>
  <string>fetch</string>
</array>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:update_helper/update_helper.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  UpdateHelper _updateHelper;

  @override
  void initState() {
    super.initState();
    _updateHelper = UpdateHelper(
      updateCheckInterval: Duration(days: 1), // Check for updates every day
      updateNotificationDisplay: UpdateNotificationDisplay.always, // Always display update notifications
    );
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Real Flutter',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Real Flutter'),
        ),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              // Check for updates when button is pressed
              _updateHelper.checkForUpdates().then((updateAvailable) {
                if (updateAvailable) {
                  // Update available, proceed with download and installation
                  _updateHelper.downloadAndInstallUpdate().then((_) {
                    // Restart prompt after update installation
                    _updateHelper.showRestartPrompt();
                  });
                } else {
                  // No update available
                  print('No update available');
                }
              });
            },
            child: Text('Check for Updates'),
          ),
        ),
      ),
    );
  }
}

// Application flow:
// 1. The app initializes the update helper with the update check interval and notification display settings.
// 2. When the button is pressed, the app checks for updates using the update helper.
// 3. If an update is available, the app proceeds with downloading and installing the update.
// 4. After the update installation, the app displays a restart prompt to the user.
// 5. If no update is available, the app prints a message to the console.

// Final summary:
// The code flows by initializing the update helper, checking for updates when the button is pressed, and proceeding with download and installation if an update is available. The app then displays a restart prompt after update installation.
```

<-- END_MAIN -->
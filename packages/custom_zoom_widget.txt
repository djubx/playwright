<-- START_DESCRIPTION -->

# Custom Zoom Widget Package
================================

The `custom_zoom_widget` package is a powerful Flutter library that allows developers to easily implement a customizable zoom widget in their applications. This package is perfect for use cases where you need to display images, maps, or other content that requires zooming and panning.

## Key Features

*   Customizable zoom levels and boundaries
*   Support for various content types, including images and maps
*   Smooth and intuitive zooming and panning gestures
*   Compatible with both Android and iOS platforms

### When to Use This Package

The `custom_zoom_widget` package is ideal for applications that require a high level of customization and control over the zooming and panning experience. Some examples of use cases where this package excels include:

*   Image editing and manipulation apps
*   Map and navigation apps
*   Document and PDF viewers
*   Gaming and interactive experiences

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Custom Zoom Widget Package
===========================================================

## Step 1: Add the Package to Your Project

To get started with the `custom_zoom_widget` package, you'll need to add it to your Flutter project. You can do this by adding the following line to your `pubspec.yaml` file:

```yml
dependencies:
  custom_zoom_widget: ^1.0.0
```

## Step 2: Import the Package

Once you've added the package to your project, you can import it into your Dart files using the following line:

```dart
import 'package:custom_zoom_widget/custom_zoom_widget.dart';
```

## Step 3: Create a Custom Zoom Widget

To create a custom zoom widget, you'll need to create a new instance of the `CustomZoomWidget` class. This class takes several parameters, including the content to be displayed, the initial zoom level, and the minimum and maximum zoom levels.

Here's an example of how to create a custom zoom widget:

```dart
CustomZoomWidget(
  content: Image.asset('assets/image.jpg'),
  initialZoom: 1.0,
  minZoom: 0.5,
  maxZoom: 2.0,
)
```

## Step 4: Customize the Zoom Widget

The `CustomZoomWidget` class provides several properties that you can use to customize the appearance and behavior of the zoom widget. Some of these properties include:

*   `content`: The content to be displayed in the zoom widget.
*   `initialZoom`: The initial zoom level of the content.
*   `minZoom`: The minimum zoom level allowed.
*   `maxZoom`: The maximum zoom level allowed.
*   `zoomSteps`: The number of zoom steps to display.

## Platform-Specific Details

The `custom_zoom_widget` package is designed to work seamlessly on both Android and iOS platforms. However, there are some platform-specific details to keep in mind:

*   On Android, the `CustomZoomWidget` class uses the `GestureDetector` class to handle touch events. This means that you'll need to make sure that your content is wrapped in a `GestureDetector` widget.
*   On iOS, the `CustomZoomWidget` class uses the `UIScrollView` class to handle touch events. This means that you'll need to make sure that your content is wrapped in a `UIScrollView` widget.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:custom_zoom_widget/custom_zoom_widget.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Custom Zoom Widget Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Custom Zoom Widget Demo'),
      ),
      body: Center(
        child: CustomZoomWidget(
          content: Image.asset('assets/image.jpg'),
          initialZoom: 1.0,
          minZoom: 0.5,
          maxZoom: 2.0,
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app and is presented with a screen containing a custom zoom widget.
// 2. The custom zoom widget displays an image and allows the user to zoom in and out using gestures.
// 3. The user can zoom in and out of the image by pinching or spreading their fingers on the screen.
// 4. The custom zoom widget also allows the user to pan the image by dragging their finger across the screen.
// 5. The user can reset the zoom level to its initial value by tapping the screen twice.
```

// In summary, the code flows as follows:
// The main function runs the app, which displays a material app with a home page.
// The home page contains a scaffold with an app bar and a body.
// The body contains a center widget, which contains a custom zoom widget.
// The custom zoom widget displays an image and allows the user to zoom in and out using gestures.
// The user can interact with the custom zoom widget by pinching, spreading, or dragging their fingers on the screen.

<-- END_MAIN -->
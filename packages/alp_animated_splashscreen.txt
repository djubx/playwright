# Flutter Package: alp_animated_splashscreen

## <-- START_DESCRIPTION -->

### Overview

The `alp_animated_splashscreen` package is a Flutter library designed to create visually appealing animated splash screens for mobile applications. A splash screen is the first screen that users see when they launch an app, and it serves as a great opportunity to engage users while the app is loading. This package allows developers to customize the splash screen with animations, images, and colors, enhancing the overall user experience.

### When to Use

You should consider using `alp_animated_splashscreen` when:
- You want to create a visually engaging entry point for your app.
- You need to display a logo or branding while the app is loading.
- You want to add a touch of animation to your app's launch process.

### Features

- **Customizable Animations**: Choose from various animation types to create a unique splash experience.
- **Image Support**: Easily add images or logos to your splash screen.
- **Duration Control**: Set the duration for how long the splash screen is displayed.
- **Color Customization**: Change the background color to match your app's theme.
- **Easy Integration**: Simple setup process that integrates seamlessly with existing Flutter projects.

## <-- END_DESCRIPTION -->

## <-- START_TUTORIAL -->

### Setup Process

To get started with the `alp_animated_splashscreen` package, follow these steps:

1. **Add Dependency**: Open your `pubspec.yaml` file and add the package under dependencies:

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     alp_animated_splashscreen: ^1.0.0  # Check for the latest version on pub.dev
   ```

2. **Install the Package**: Run the following command in your terminal to install the package:

   ```bash
   flutter pub get
   ```

3. **Platform-Specific Configuration**:
   - **Android**: Ensure that your `AndroidManifest.xml` file has the necessary permissions and configurations. Typically, no additional configurations are needed for splash screens.
   - **iOS**: Open your `Info.plist` file and ensure that you have the correct settings for your app's launch screen.

### Basic Usage

To use the `alp_animated_splashscreen`, you need to wrap your main application widget with the splash screen widget. Hereâ€™s a simple example:

```dart
import 'package:flutter/material.dart';
import 'package:alp_animated_splashscreen/alp_animated_splashscreen.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: AnimatedSplashScreen(
        splash: 'assets/logo.png', // Path to your logo image
        nextScreen: HomeScreen(),
        splashTransition: SplashTransition.scaleTransition,
        duration: 3000, // Duration in milliseconds
        backgroundColor: Colors.white, // Background color
      ),
    );
  }
}

class HomeScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Home Screen')),
      body: Center(child: Text('Welcome to RealFlutter!')),
    );
  }
}
```

## <-- END_TUTORIAL -->

## <-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:alp_animated_splashscreen/alp_animated_splashscreen.dart';

void main() {
  runApp(RealFlutter()); // Entry point of the application
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: AnimatedSplashScreen(
        splash: 'assets/logo.png', // Path to your logo image
        nextScreen: HomeScreen(), // Screen to navigate after splash
        splashTransition: SplashTransition.scaleTransition, // Type of animation
        duration: 3000, // Duration for splash screen display
        backgroundColor: Colors.white, // Background color of splash screen
      ),
    );
  }
}

class HomeScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Home Screen')), // App bar title
      body: Center(child: Text('Welcome to RealFlutter!')), // Centered welcome text
    );
  }
}

// Application Flow Explanation:
// 1. The main function runs the RealFlutter app.
// 2. The RealFlutter class builds a MaterialApp with an AnimatedSplashScreen.
// 3. The AnimatedSplashScreen displays a logo image for 3000 milliseconds.
// 4. After the duration, it transitions to the HomeScreen.
// 5. The HomeScreen contains a simple AppBar and a centered welcome message.
```

## <-- END_MAIN -->

### Summary

In this blog post, we explored the `alp_animated_splashscreen` package, which allows developers to create engaging splash screens with customizable animations and images. We walked through the setup process, including platform-specific configurations, and provided a complete example of how to implement the package in a Flutter application. The code demonstrates how to display a splash screen with a logo and transition to a home screen, providing a smooth user experience right from the app's launch.
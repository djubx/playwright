<-- START_DESCRIPTION -->

# Flutter Bcrypt Package Overview
=====================================

The `flutter_bcrypt` package is a Flutter library that provides a simple and secure way to hash and verify passwords using the bcrypt algorithm. Bcrypt is a popular password hashing algorithm that is designed to be slow and computationally expensive, making it more resistant to brute-force attacks.

### When to Use This Package

You should use this package whenever you need to store user passwords securely in your Flutter application. This package is particularly useful for applications that require user authentication, such as login screens or registration forms.

### Features

*   Hashes passwords using the bcrypt algorithm
*   Verifies hashed passwords against a given password
*   Supports multiple platforms, including Android and iOS

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the Flutter Bcrypt Package
=====================================================

To use the `flutter_bcrypt` package in your Flutter application, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:

```yml
dependencies:
  flutter_bcrypt: ^1.0.0
```

Then, run `flutter pub get` in your terminal to install the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:flutter_bcrypt/flutter_bcrypt.dart';
```

### Step 3: Hash a Password

Use the `hashPw` function to hash a password:

```dart
String hashedPassword = await FlutterBcrypt.hashPw(password: 'mysecretpassword');
```

### Step 4: Verify a Hashed Password

Use the `verifyPw` function to verify a hashed password against a given password:

```dart
bool isValid = await FlutterBcrypt.verifyPw(
  password: 'mysecretpassword',
  hash: hashedPassword,
);
```

### Platform-Specific Details

The `flutter_bcrypt` package uses platform-specific code to implement the bcrypt algorithm. On Android, it uses the `java.security.MessageDigest` class, while on iOS, it uses the `CommonCrypto` framework.

### Required Configurations or Optimizations

No additional configurations or optimizations are required to use this package.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_bcrypt/flutter_bcrypt.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Bcrypt Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _passwordController = TextEditingController();
  String _hashedPassword = '';
  bool _isValid = false;

  // Step 1: Hash the password when the user clicks the "Hash Password" button
  Future<void> _hashPassword() async {
    final password = _passwordController.text;
    final hashedPassword = await FlutterBcrypt.hashPw(password: password);
    setState(() {
      _hashedPassword = hashedPassword;
    });
  }

  // Step 2: Verify the hashed password when the user clicks the "Verify Password" button
  Future<void> _verifyPassword() async {
    final password = _passwordController.text;
    final isValid = await FlutterBcrypt.verifyPw(
      password: password,
      hash: _hashedPassword,
    );
    setState(() {
      _isValid = isValid;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Bcrypt Example'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Column(
          children: [
            TextField(
              controller: _passwordController,
              decoration: InputDecoration(
                labelText: 'Password',
                border: OutlineInputBorder(),
              ),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _hashPassword,
              child: Text('Hash Password'),
            ),
            SizedBox(height: 20),
            Text('Hashed Password: $_hashedPassword'),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _verifyPassword,
              child: Text('Verify Password'),
            ),
            SizedBox(height: 20),
            Text('Is Valid: $_isValid'),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user enters a password in the text field.
// 2. When the user clicks the "Hash Password" button, the password is hashed using the FlutterBcrypt.hashPw function.
// 3. The hashed password is displayed on the screen.
// 4. When the user clicks the "Verify Password" button, the hashed password is verified against the original password using the FlutterBcrypt.verifyPw function.
// 5. The result of the verification is displayed on the screen.

```

<-- END_MAIN -->
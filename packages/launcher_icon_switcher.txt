```markdown
<!-- START_DESCRIPTION -->
# Launcher Icon Switcher Flutter Package

The `launcher_icon_switcher` package for Flutter is a powerful tool that allows developers to dynamically change the app's launcher icon at runtime. This feature can be particularly useful in applications that require different branding or themes based on user preferences, events, or specific conditions. 

## When to Use This Package

- **Themed Applications**: If your app supports multiple themes, you can switch icons to match the current theme.
- **User Preferences**: Allow users to choose their preferred app icon from a set of options.
- **Event-Based Icons**: Change the app icon based on specific events, such as holidays or promotions.

## Features

- **Dynamic Icon Switching**: Change the launcher icon without needing to rebuild the app.
- **Platform Support**: Works on both Android and iOS, with specific configurations for each platform.
- **Easy Integration**: Simple API that integrates seamlessly into existing Flutter applications.

This package enhances user experience by providing a more personalized and engaging interface, making it a valuable addition to any Flutter developer's toolkit.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Launcher Icon Switcher

## Step 1: Adding the Dependency

To get started, add the `launcher_icon_switcher` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  launcher_icon_switcher: ^latest_version
```

Make sure to replace `^latest_version` with the latest version of the package.

## Step 2: Platform-Specific Configuration

### Android Configuration

1. **Update AndroidManifest.xml**: Open `android/app/src/main/AndroidManifest.xml` and add the following permissions:

   ```xml
   <uses-permission android:name="android.permission.CHANGE_COMPONENT_ENABLED_STATE"/>
   ```

2. **Add Icons**: Place your launcher icons in the appropriate drawable folders (`drawable-mdpi`, `drawable-hdpi`, etc.) under `android/app/src/main/res/`.

### iOS Configuration

1. **Update Info.plist**: Open `ios/Runner/Info.plist` and add the following key:

   ```xml
   <key>CFBundleIcons</key>
   <dict>
       <key>CFBundlePrimaryIcon</key>
       <dict>
           <key>CFBundleIconFiles</key>
           <array>
               <string>icon1</string>
               <string>icon2</string>
           </array>
       </dict>
   </dict>
   ```

2. **Add Icons**: Ensure your icons are added to the Xcode project under the `Assets.xcassets` folder.

## Step 3: Using the Package

Now that you have configured the package, you can use it in your Flutter application. Hereâ€™s how to switch icons programmatically:

```dart
import 'package:flutter/material.dart';
import 'package:launcher_icon_switcher/launcher_icon_switcher.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Launcher Icon Switcher Example')),
        body: Center(
          child: ElevatedButton(
            onPressed: () async {
              // Switch to the alternative icon
              await LauncherIconSwitcher.switchIcon('icon2');
            },
            child: Text('Switch Icon'),
          ),
        ),
      ),
    );
  }
}
```

In this example, when the button is pressed, the app will switch to the alternative icon defined in the configuration.

With these steps, you can easily set up and use the `launcher_icon_switcher` package in your Flutter application.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Launcher Icon Switcher

```dart
import 'package:flutter/material.dart';
import 'package:launcher_icon_switcher/launcher_icon_switcher.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Launcher Icon Switcher Example')),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              ElevatedButton(
                onPressed: () async {
                  // Switch to the alternative icon
                  await LauncherIconSwitcher.switchIcon('icon2');
                },
                child: Text('Switch to Icon 2'),
              ),
              ElevatedButton(
                onPressed: () async {
                  // Switch back to the default icon
                  await LauncherIconSwitcher.switchIcon('icon1');
                },
                child: Text('Switch to Icon 1'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

void main() {
  runApp(RealFlutter());
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the RealFlutter widget.
// 2. The RealFlutter widget builds a MaterialApp with a Scaffold.
// 3. The Scaffold contains an AppBar and a Center widget that holds two buttons.
// 4. When the first button is pressed, it calls the switchIcon method to change the launcher icon to 'icon2'.
// 5. When the second button is pressed, it switches back to the default icon 'icon1'.
// 6. The LauncherIconSwitcher package handles the icon switching seamlessly, providing a dynamic user experience.
```
<!-- END_MAIN -->
``` 

This structured blog provides a comprehensive overview of the `launcher_icon_switcher` package, guiding users through its features, setup, and practical implementation in a Flutter application.
```markdown
<!-- START_DESCRIPTION -->
# Overview of the root_checker_plus Flutter Package

The `root_checker_plus` package is a Flutter plugin designed to help developers determine whether a device is rooted or jailbroken. This is particularly useful for applications that require a higher level of security and integrity, such as banking apps, sensitive data applications, or any app that needs to ensure it runs in a secure environment.

## When to Use This Package
- **Security-sensitive applications**: If your app handles sensitive user data or financial transactions, checking for root access can help mitigate risks.
- **Game development**: Many games implement root checks to prevent cheating and ensure fair play.
- **Enterprise applications**: Companies often need to ensure that their applications are running on secure devices.

## Key Features
- **Cross-platform support**: Works on both Android and iOS devices.
- **Simple API**: Easy to integrate and use within your Flutter application.
- **Detailed results**: Provides clear information on whether the device is rooted or jailbroken.

By leveraging the `root_checker_plus` package, developers can enhance the security of their applications and protect user data effectively.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using root_checker_plus

## Installation
To add the `root_checker_plus` package to your Flutter project, include it in your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  root_checker_plus: ^1.0.0  # Check for the latest version on pub.dev
```

Run `flutter pub get` to install the package.

## Platform-Specific Configuration

### Android
1. Ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file:
   ```groovy
   android {
       ...
       defaultConfig {
           ...
           minSdkVersion 21
           ...
       }
   }
   ```

### iOS
1. For iOS, you may need to add permissions in your `Info.plist` file if you are accessing sensitive data. However, `root_checker_plus` does not require any specific permissions.

## Using the Package
To use the `root_checker_plus` package, you can follow these steps in your Flutter application:

1. Import the package:
   ```dart
   import 'package:root_checker_plus/root_checker_plus.dart';
   ```

2. Create a method to check for root access:
   ```dart
   Future<void> checkRootStatus() async {
       bool isRooted = await RootCheckerPlus.isRooted;
       if (isRooted) {
           print("Device is rooted!");
       } else {
           print("Device is not rooted.");
       }
   }
   ```

3. Call this method in your app's main logic, such as in the `initState` of your main widget.

By following these steps, you can easily integrate root checking functionality into your Flutter application.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using root_checker_plus

```dart
import 'package:flutter/material.dart';
import 'package:root_checker_plus/root_checker_plus.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  String _rootStatus = "Checking..."; // Variable to hold the root status

  @override
  void initState() {
    super.initState();
    checkRootStatus(); // Call the method to check root status on initialization
  }

  // Method to check if the device is rooted
  Future<void> checkRootStatus() async {
    bool isRooted = await RootCheckerPlus.isRooted; // Check for root access
    setState(() {
      _rootStatus = isRooted ? "Device is rooted!" : "Device is not rooted."; // Update the status
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Root Checker Plus Example'), // App title
        ),
        body: Center(
          child: Text(
            _rootStatus, // Display the root status
            style: TextStyle(fontSize: 24),
          ),
        ),
      ),
    );
  }
}
```

// The application starts by running the RealFlutter widget.
// In the RealFlutter widget, we define a stateful widget to manage the root status.
// The _rootStatus variable is initialized to "Checking..." to indicate that the app is checking for root access.
// In the initState method, we call checkRootStatus() to perform the root check when the widget is first created.
// The checkRootStatus method uses the root_checker_plus package to determine if the device is rooted.
// Based on the result, we update the _rootStatus variable and call setState to refresh the UI.
// The build method returns a MaterialApp with a simple UI that displays the root status in the center of the screen.
// This provides a clear and user-friendly way to inform users about the security status of their device.
<!-- END_MAIN -->
```

### Summary
In this blog post, we explored the `root_checker_plus` package, detailing its purpose, features, and how to implement it in a Flutter application. We provided a step-by-step tutorial for installation and usage, along with a complete example demonstrating its functionality. By following the provided code and explanations, developers can effectively integrate root checking into their applications, enhancing security and user trust.
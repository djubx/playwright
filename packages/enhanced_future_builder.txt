<-- START_DESCRIPTION -->

# Enhanced Future Builder Package
The `enhanced_future_builder` package is a powerful tool for managing asynchronous data in Flutter applications. It provides a simple and efficient way to handle futures and display data in a user-friendly manner.

## When to Use
This package is ideal for situations where you need to fetch data from an API, database, or any other asynchronous source. It helps to simplify the process of handling loading states, errors, and data display.

## Features
Some key features of the `enhanced_future_builder` package include:

*   Automatic handling of loading states
*   Error handling and display
*   Data caching and refresh capabilities
*   Customizable UI components

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
To use the `enhanced_future_builder` package, follow these steps:

1.  Add the package to your `pubspec.yaml` file:

    ```yml
dependencies:
  flutter:
    sdk: flutter
  enhanced_future_builder: ^1.0.0
```

2.  Run `flutter pub get` to install the package.
3.  Import the package in your Dart file:

    ```dart
import 'package:enhanced_future_builder/enhanced_future_builder.dart';
```

4.  Create a future that fetches your data:

    ```dart
Future<List<String>> fetchData() async {
  // Simulate data fetching
  await Future.delayed(Duration(seconds: 2));
  return ['Item 1', 'Item 2', 'Item 3'];
}
```

5.  Use the `EnhancedFutureBuilder` widget to display your data:

    ```dart
EnhancedFutureBuilder(
  future: fetchData(),
  builder: (context, snapshot) {
    if (snapshot.hasData) {
      return ListView.builder(
        itemCount: snapshot.data.length,
        itemBuilder: (context, index) {
          return ListTile(
            title: Text(snapshot.data[index]),
          );
        },
      );
    } else if (snapshot.hasError) {
      return Text('Error: ${snapshot.error}');
    } else {
      return Center(child: CircularProgressIndicator());
    }
  },
)
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:enhanced_future_builder/enhanced_future_builder.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Enhanced Future Builder Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Step 1: Define a future that fetches data
  Future<List<String>> fetchData() async {
    // Simulate data fetching
    await Future.delayed(Duration(seconds: 2));
    return ['Item 1', 'Item 2', 'Item 3'];
  }

  @override
  Widget build(BuildContext context) {
    // Step 2: Use the EnhancedFutureBuilder widget to display data
    return Scaffold(
      appBar: AppBar(
        title: Text('Enhanced Future Builder Demo'),
      ),
      body: EnhancedFutureBuilder(
        future: fetchData(), // Step 3: Pass the future to the EnhancedFutureBuilder
        builder: (context, snapshot) {
          // Step 4: Handle the snapshot
          if (snapshot.hasData) {
            // Step 5: Display the data
            return ListView.builder(
              itemCount: snapshot.data.length,
              itemBuilder: (context, index) {
                return ListTile(
                  title: Text(snapshot.data[index]),
                );
              },
            );
          } else if (snapshot.hasError) {
            // Step 6: Display any errors
            return Text('Error: ${snapshot.error}');
          } else {
            // Step 7: Display a loading indicator
            return Center(child: CircularProgressIndicator());
          }
        },
      ),
    );
  }
}

// The application flow:
// 1. The RealFlutter widget is created and defines a future that fetches data.
// 2. The EnhancedFutureBuilder widget is used to display the data.
// 3. The future is passed to the EnhancedFutureBuilder.
// 4. The EnhancedFutureBuilder handles the snapshot and displays the data, any errors, or a loading indicator.
// 5. The data is displayed in a ListView.
// 6. Any errors are displayed as text.
// 7. A loading indicator is displayed while the data is being fetched.
```

<-- END_MAIN -->
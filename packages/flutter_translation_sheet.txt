# Flutter Translation Sheet Package: A Comprehensive Guide

## <-- START_DESCRIPTION -->

### Description

The `flutter_translation_sheet` package is a powerful tool designed for Flutter developers who need to implement a translation sheet in their applications. This package simplifies the process of creating a user-friendly interface for selecting translations, making it ideal for apps that require multi-language support. 

### When to Use

You should consider using `flutter_translation_sheet` when:
- Your application targets a diverse audience that speaks multiple languages.
- You want to provide a seamless way for users to switch between languages.
- You need a customizable and visually appealing translation selection interface.

### Features

- **Customizable UI**: The package allows you to customize the appearance of the translation sheet to match your app's design.
- **Easy Integration**: It integrates smoothly with existing Flutter applications, requiring minimal setup.
- **Dynamic Language Support**: You can easily add or remove languages without significant changes to your codebase.
- **User-Friendly**: The package provides a straightforward interface for users to select their preferred language.

## <-- END_DESCRIPTION -->

## <-- START_TUTORIAL -->

### Tutorial

To get started with the `flutter_translation_sheet` package, follow these steps:

#### Step 1: Add Dependency

Add the package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  flutter_translation_sheet: ^latest_version
```

Make sure to replace `^latest_version` with the latest version available on [pub.dev](https://pub.dev/packages/flutter_translation_sheet).

#### Step 2: Import the Package

In your Dart file, import the package:

```dart
import 'package:flutter_translation_sheet/flutter_translation_sheet.dart';
```

#### Step 3: Platform-Specific Configuration

For **Android**:
- Ensure that your `AndroidManifest.xml` file has the necessary permissions if you are using any features that require them.

For **iOS**:
- Make sure to configure your app's localization settings in the `Info.plist` file if you are using localized strings.

#### Step 4: Basic Usage

You can create a translation sheet by calling the `showTranslationSheet` method. Hereâ€™s a simple example:

```dart
void showLanguageSelection(BuildContext context) {
  showTranslationSheet(
    context: context,
    title: 'Select Language',
    languages: ['English', 'Spanish', 'French'],
    onSelected: (language) {
      // Handle the selected language
      print('Selected Language: $language');
    },
  );
}
```

### Additional Configuration

You can customize the appearance of the translation sheet by passing additional parameters such as `backgroundColor`, `textColor`, and `titleStyle`.

## <-- END_TUTORIAL -->

## <-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_translation_sheet/flutter_translation_sheet.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Translation Sheet Example',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Translation Sheet Demo'),
        ),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              // Call the function to show the language selection sheet
              showLanguageSelection(context);
            },
            child: Text('Select Language'),
          ),
        ),
      ),
    );
  }

  void showLanguageSelection(BuildContext context) {
    // Display the translation sheet with available languages
    showTranslationSheet(
      context: context,
      title: 'Select Language',
      languages: ['English', 'Spanish', 'French'],
      onSelected: (language) {
        // Handle the selected language
        print('Selected Language: $language');
      },
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the RealFlutter widget.
// 2. The RealFlutter widget builds a MaterialApp with a title and a home Scaffold.
// 3. Inside the Scaffold, an AppBar is created with the title 'Translation Sheet Demo'.
// 4. The body contains a Center widget with an ElevatedButton.
// 5. When the button is pressed, the showLanguageSelection function is called.
// 6. The showLanguageSelection function invokes the showTranslationSheet method,
//    displaying a sheet with language options: English, Spanish, and French.
// 7. When a language is selected, it prints the selected language to the console.
```

## <-- END_MAIN -->

### Summary

In this blog post, we explored the `flutter_translation_sheet` package, which provides an efficient way to implement a translation selection interface in Flutter applications. We covered the installation process, basic usage, and provided a complete example demonstrating how to integrate the package into a Flutter app. The application flow was explained step-by-step through comments, making it easy to understand how the package works in practice. This package is a great choice for developers looking to enhance their apps with multi-language support.
<-- START_DESCRIPTION -->

# Skadi Flutter Package: A Comprehensive Overview
=====================================================

The Skadi Flutter package is a powerful tool for building robust and scalable Flutter applications. It provides a set of features that enable developers to create complex apps with ease, making it an ideal choice for large-scale projects.

### Key Features

*   **Modular Architecture**: Skadi allows you to break down your app into smaller, independent modules, making it easier to manage and maintain.
*   **Dependency Injection**: The package provides a built-in dependency injection system, enabling you to decouple your app's components and make them more reusable.
*   **Navigation Management**: Skadi offers a robust navigation system, making it easy to manage your app's routing and navigation flow.

### When to Use Skadi

Skadi is perfect for large-scale Flutter projects that require a high degree of complexity and scalability. If you're building an app with multiple features, modules, or components, Skadi can help you manage them efficiently.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up Skadi in Your Flutter Project
=============================================

To use Skadi in your Flutter project, follow these steps:

### Step 1: Add Skadi to Your `pubspec.yaml` File

```yml
dependencies:
  skadi: ^1.0.0
```

### Step 2: Run `flutter pub get` to Install the Package

Open your terminal and run the following command:

```bash
flutter pub get
```

### Step 3: Import Skadi in Your Dart File

```dart
import 'package:skadi/skadi.dart';
```

### Platform-Specific Configurations

#### Android

To use Skadi on Android, you need to add the following configuration to your `AndroidManifest.xml` file:

```xml
<application
    ...
    android:name="com.example.RealFlutter">
    ...
</application>
```

#### iOS

To use Skadi on iOS, you need to add the following configuration to your `Info.plist` file:

```xml
<key>Skadi</key>
<string>RealFlutter</string>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:skadi/skadi.dart';

void main() {
  // Create a new Skadi app
  final app = SkadiApp(
    // Define the app's title
    title: 'RealFlutter',
    // Define the app's home route
    home: '/',
    // Define the app's routes
    routes: {
      '/': (context) => const HomeScreen(),
      '/about': (context) => const AboutScreen(),
    },
  );

  // Run the app
  runApp(app);
}

// Define the home screen
class HomeScreen extends StatelessWidget {
  const HomeScreen({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Home Screen'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Navigate to the about screen
            SkadiNavigator.pushNamed(context, '/about');
          },
          child: const Text('Go to About Screen'),
        ),
      ),
    );
  }
}

// Define the about screen
class AboutScreen extends StatelessWidget {
  const AboutScreen({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('About Screen'),
      ),
      body: const Center(
        child: Text('This is the about screen'),
      ),
    );
  }
}

// The app's flow:
// 1. The user opens the app and is taken to the home screen.
// 2. The user clicks the "Go to About Screen" button and is taken to the about screen.
// 3. The user can navigate back to the home screen by clicking the back button.
```

The code above demonstrates how to create a simple Skadi app with two routes: a home screen and an about screen. The app uses the `SkadiNavigator` to navigate between the two routes.

<-- END_MAIN -->
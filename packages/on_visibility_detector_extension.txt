```markdown
<!-- START_DESCRIPTION -->
# on_visibility_detector_extension Flutter Package

The `on_visibility_detector_extension` package is a powerful tool for Flutter developers that allows you to detect the visibility of widgets on the screen. This can be particularly useful for optimizing performance, tracking user engagement, or triggering animations when a widget comes into view. 

## When to Use This Package
- **Performance Optimization**: Load images or data only when they are visible to the user.
- **User Engagement Tracking**: Track how often users see certain elements, such as ads or promotional banners.
- **Animations**: Trigger animations when a widget becomes visible or goes out of view.

## Key Features
- **Visibility Detection**: Easily determine if a widget is visible on the screen.
- **Callbacks**: Execute specific actions when visibility changes.
- **Customizable**: Adjust detection thresholds to suit your needs.

This package is particularly useful in scenarios where you want to enhance user experience by managing resources efficiently based on widget visibility.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using on_visibility_detector_extension

## Installation
To add the `on_visibility_detector_extension` package to your Flutter project, include it in your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  on_visibility_detector_extension: ^latest_version
```

Make sure to replace `^latest_version` with the latest version available on [pub.dev](https://pub.dev/packages/on_visibility_detector_extension).

## Platform-Specific Details
### Android
No additional configuration is required for Android. Just ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file.

### iOS
For iOS, ensure that you have the correct permissions set in your `Info.plist` if you are using any features that require user permissions.

## Basic Usage
To use the package, wrap your widget with the `VisibilityDetector` widget provided by the package. You can then define a callback that will be triggered when the visibility of the widget changes.

Hereâ€™s a simple example:

```dart
import 'package:flutter/material.dart';
import 'package:on_visibility_detector_extension/on_visibility_detector_extension.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Visibility Detector Example')),
      body: Center(
        child: VisibilityDetector(
          key: Key('my-widget'),
          onVisibilityChanged: (VisibilityInfo info) {
            // Handle visibility change
            print('Widget is ${info.visibleFraction * 100}% visible');
          },
          child: Container(
            width: 200,
            height: 200,
            color: Colors.blue,
            child: Center(child: Text('Hello, World!')),
          ),
        ),
      ),
    );
  }
}
```

In this example, the `onVisibilityChanged` callback will print the visibility percentage of the widget whenever it changes.

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of on_visibility_detector_extension

```dart
import 'package:flutter/material.dart';
import 'package:on_visibility_detector_extension/on_visibility_detector_extension.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Visibility Detector Demo',
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Visibility Detector Example')),
      body: ListView(
        children: List.generate(10, (index) {
          return VisibilityDetector(
            key: Key('widget-$index'),
            onVisibilityChanged: (VisibilityInfo info) {
              // Log the visibility percentage of each widget
              print('Widget $index is ${info.visibleFraction * 100}% visible');
            },
            child: Container(
              height: 200,
              color: index.isEven ? Colors.blue : Colors.green,
              child: Center(child: Text('Widget $index')),
            ),
          );
        }),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function initializes the app and sets MyApp as the root widget.
// 2. MyApp builds a MaterialApp with a title and sets RealFlutter as the home widget.
// 3. RealFlutter creates a Scaffold with an AppBar and a ListView containing multiple widgets.
// 4. Each widget is wrapped in a VisibilityDetector, which tracks its visibility on the screen.
// 5. When a widget's visibility changes, the onVisibilityChanged callback is triggered, logging the visibility percentage to the console.
// 6. The ListView allows for scrolling, demonstrating the visibility detection as widgets come into and out of view.
```
<!-- END_MAIN -->
``` 

This structured approach provides a comprehensive overview of the `on_visibility_detector_extension` package, guiding developers through its features, setup, and practical usage in a complete Flutter application.
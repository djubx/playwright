```markdown
<-- START_DESCRIPTION -->

# Flutter Advanced Switch: A Comprehensive Overview

The `flutter_advanced_switch` package is a versatile and customizable switch widget for Flutter applications. It provides developers with a more advanced alternative to the default `Switch` widget, offering enhanced customization options and additional features that can be tailored to fit the specific needs of an application.

## When to Use `flutter_advanced_switch`

This package is particularly useful in scenarios where the default switch widget does not meet the design requirements or when additional functionality is needed. For example, if you need a switch with custom animations, colors, or shapes, `flutter_advanced_switch` can be a perfect fit. It is also beneficial when you want to maintain a consistent look and feel across different platforms, as it allows for extensive customization.

## Key Features

- **Customizable Appearance**: Change the color, size, and shape of the switch to match your application's theme.
- **Animation Support**: Add custom animations to the switch toggle for a more dynamic user experience.
- **State Management**: Easily manage the switch state with built-in support for state change callbacks.
- **Platform Consistency**: Ensure a consistent appearance and behavior across both Android and iOS platforms.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using `flutter_advanced_switch`

In this tutorial, we will walk through the process of setting up and using the `flutter_advanced_switch` package in a Flutter application. We will cover the necessary configurations for both Android and iOS platforms.

## Installation

To get started, add the `flutter_advanced_switch` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  flutter_advanced_switch: ^1.0.0
```

Run `flutter pub get` to install the package.

## Basic Setup

### Android Configuration

No additional configuration is required for Android. Ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 16:

```gradle
minSdkVersion 16
```

### iOS Configuration

For iOS, ensure that your deployment target is set to at least iOS 9.0. You can set this in your `ios/Podfile`:

```ruby
platform :ios, '9.0'
```

## Using the Package

To use the `flutter_advanced_switch` package, import it into your Dart file:

```dart
import 'package:flutter_advanced_switch/flutter_advanced_switch.dart';
```

Create an instance of `AdvancedSwitchController` to manage the state of the switch:

```dart
final _controller = AdvancedSwitchController();
```

Initialize the controller in your widget's `initState` method:

```dart
@override
void initState() {
  super.initState();
  _controller.value = false; // Set initial value
}
```

Use the `AdvancedSwitch` widget in your build method:

```dart
AdvancedSwitch(
  controller: _controller,
  activeColor: Colors.green,
  inactiveColor: Colors.red,
  borderRadius: BorderRadius.circular(15),
  width: 60.0,
  height: 30.0,
  onChanged: (value) {
    print('Switch state: $value');
  },
)
```

<-- END_TUTORIAL -->

<-- MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_advanced_switch/flutter_advanced_switch.dart';

// Main entry point of the application
void main() {
  runApp(MyApp());
}

// Root widget of the application
class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Advanced Switch Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: SwitchDemoPage(),
    );
  }
}

// Stateful widget to demonstrate the advanced switch
class SwitchDemoPage extends StatefulWidget {
  @override
  _SwitchDemoPageState createState() => _SwitchDemoPageState();
}

class _SwitchDemoPageState extends State<SwitchDemoPage> {
  // Controller to manage the state of the switch
  final _controller = AdvancedSwitchController();

  @override
  void initState() {
    super.initState();
    // Initialize the switch state
    _controller.value = false;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Advanced Switch Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            // Display the advanced switch
            AdvancedSwitch(
              controller: _controller,
              activeColor: Colors.green,
              inactiveColor: Colors.red,
              borderRadius: BorderRadius.circular(15),
              width: 60.0,
              height: 30.0,
              onChanged: (value) {
                // Handle switch state change
                print('Switch state: $value');
              },
            ),
            SizedBox(height: 20),
            // Display the current state of the switch
            Text(
              'Switch is ${_controller.value ? "ON" : "OFF"}',
              style: TextStyle(fontSize: 20),
            ),
          ],
        ),
      ),
    );
  }
}
```

// The application starts with the `main` function, which runs the `MyApp` widget.
// `MyApp` is a stateless widget that sets up the MaterialApp and specifies the home page as `SwitchDemoPage`.
// `SwitchDemoPage` is a stateful widget that manages the state of the advanced switch using `AdvancedSwitchController`.
// In `initState`, the switch is initialized to the OFF state.
// The `build` method constructs the UI, which includes an `AdvancedSwitch` widget and a `Text` widget to display the switch state.
// The `AdvancedSwitch` widget is configured with custom colors, size, and a callback for state changes.
// When the switch is toggled, the `onChanged` callback prints the new state to the console and updates the displayed text.

<-- END_MAIN -->
```
<-- START_DESCRIPTION -->

# Draggable Expandable FAB Flutter Package
=============================================

The `draggable_expandable_fab` package is a Flutter widget that allows you to create a floating action button (FAB) that can be dragged and expanded to reveal additional actions. This package is useful when you want to provide multiple actions to the user without cluttering the screen.

### Features

* Draggable FAB that can be moved around the screen
* Expandable FAB that reveals additional actions
* Customizable appearance and behavior

### When to Use

* When you want to provide multiple actions to the user without cluttering the screen
* When you want to create a interactive and engaging user experience
* When you want to add a unique touch to your app's design

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

### Setup

To use the `draggable_expandable_fab` package, you need to add it to your project's `pubspec.yaml` file:

```yml
dependencies:
  draggable_expandable_fab: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Basic Usage

To use the `DraggableExpandableFab` widget, you need to import the package and create an instance of the widget:

```dart
import 'package:draggable_expandable_fab/draggable_expandable_fab.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Center(
        child: DraggableExpandableFab(
          // Your FAB content here
        ),
      ),
    );
  }
}
```

### Platform-Specific Details

* Android: No additional configuration is required.
* iOS: You need to add the following code to your `Info.plist` file to enable the FAB to be dragged:

```xml
<key>UIUserInterfaceStyle</key>
<string>Light</string>
```

### Optimizations

* To improve performance, you can set the `clipBehavior` property to `Clip.none`:

```dart
DraggableExpandableFab(
  clipBehavior: Clip.none,
  // Your FAB content here
)
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:draggable_expandable_fab/draggable_expandable_fab.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Draggable Expandable FAB Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    // Create a Scaffold to hold the FAB
    return Scaffold(
      appBar: AppBar(
        title: Text('Draggable Expandable FAB Demo'),
      ),
      body: Center(
        // Create a DraggableExpandableFab instance
        child: DraggableExpandableFab(
          // Set the FAB's content
          child: Icon(Icons.add),
          // Set the FAB's expanded content
          expandedChild: Container(
            height: 200,
            width: 200,
            color: Colors.blue,
            child: Center(
              child: Text('Expanded Content'),
            ),
          ),
          // Set the FAB's position
          initialPosition: Offset(100, 100),
          // Set the FAB's clip behavior
          clipBehavior: Clip.none,
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app and sees the FAB on the screen.
// 2. The user can drag the FAB around the screen by tapping and holding on it.
// 3. When the user releases the FAB, it will snap back to its original position.
// 4. If the user taps on the FAB, it will expand to reveal the expanded content.
// 5. The user can then interact with the expanded content.
// 6. When the user is done interacting with the expanded content, they can tap on the FAB again to collapse it.
```

// The code above creates a basic DraggableExpandableFab instance with a blue FAB and expanded content.
// The FAB can be dragged around the screen and will snap back to its original position when released.
// The FAB can also be expanded to reveal the expanded content, which can be interacted with by the user.
// The FAB's position and clip behavior can be customized using the various properties available.

<-- END_MAIN -->
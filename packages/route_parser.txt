<-- START_DESCRIPTION -->
# Route Parser Package Overview
=====================================

The `route_parser` package is a powerful tool for Flutter developers to handle routing in their applications. It provides a simple and efficient way to manage routes, parse URLs, and handle navigation.

### When to Use This Package

This package is ideal for applications that require complex routing, such as:

* Deep linking: allowing users to access specific pages within the app from external links
* URL parsing: extracting data from URLs to determine the app's navigation state
* Custom navigation: implementing custom navigation logic, such as tab bars or bottom navigation bars

### Features

The `route_parser` package offers the following features:

* URL parsing: extract data from URLs to determine the app's navigation state
* Route mapping: map URLs to specific routes within the app
* Navigation handling: handle navigation between routes, including push, pop, and replace
* Customizable: allows for custom navigation logic and route mapping

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->
# Setting Up the Route Parser Package
=====================================

To use the `route_parser` package, follow these steps:

### Step 1: Add the Package to Your Pubspec.yaml File

```yml
dependencies:
  flutter:
    sdk: flutter
  route_parser: ^1.0.0
```

### Step 2: Import the Package in Your Dart File

```dart
import 'package:route_parser/route_parser.dart';
```

### Step 3: Create a Route Map

Create a route map to define the routes within your app:

```dart
final routeMap = {
  '/': (context) => HomePage(),
  '/about': (context) => AboutPage(),
};
```

### Step 4: Create a Route Parser Instance

Create a `RouteParser` instance and pass in the route map:

```dart
final routeParser = RouteParser(routeMap);
```

### Step 5: Handle Navigation

Use the `routeParser` instance to handle navigation within your app:

```dart
Navigator.pushNamed(context, '/about');
```

### Platform-Specific Details

* Android: no additional setup required
* iOS: add the following code to your `Info.plist` file:

```xml
<key>CFBundleURLTypes</key>
<array>
  <dict>
    <key>CFBundleURLName</key>
    <string>com.example.app</string>
    <key>CFBundleURLSchemes</key>
    <array>
      <string>app</string>
    </array>
  </dict>
</array>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->
```dart
import 'package:flutter/material.dart';
import 'package:route_parser/route_parser.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Create a route map
    final routeMap = {
      '/': (context) => HomePage(),
      '/about': (context) => AboutPage(),
    };

    // Create a RouteParser instance
    final routeParser = RouteParser(routeMap);

    // Return a MaterialApp with the route parser
    return MaterialApp(
      title: 'Real Flutter',
      onGenerateRoute: routeParser.generateRoute,
      home: HomePage(),
    );
  }
}

// Home page
class HomePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Navigate to about page when button is pressed
    return Scaffold(
      appBar: AppBar(
        title: Text('Home Page'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            Navigator.pushNamed(context, '/about');
          },
          child: Text('Go to About Page'),
        ),
      ),
    );
  }
}

// About page
class AboutPage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Return a scaffold with a text widget
    return Scaffold(
      appBar: AppBar(
        title: Text('About Page'),
      ),
      body: Center(
        child: Text('This is the about page'),
      ),
    );
  }
}
```

// The app starts by creating a route map and a RouteParser instance.
// The MaterialApp is then returned with the route parser.
// When the app is run, the home page is displayed.
// When the button on the home page is pressed, the app navigates to the about page.
// The about page is then displayed.

// This code demonstrates the basic usage of the route_parser package.
// It shows how to create a route map, handle navigation, and use the RouteParser instance.

<-- END_MAIN -->
```markdown
<-- START_DESCRIPTION -->

# Overview of the `otp` Flutter Package

The `otp` Flutter package is a versatile library designed to generate one-time passwords (OTPs) for authentication purposes. This package is particularly useful in applications where secure user authentication is required, such as banking apps, e-commerce platforms, and any service that requires two-factor authentication (2FA).

## When to Use the `otp` Package

- **Two-Factor Authentication (2FA)**: Enhance security by requiring users to enter a one-time password sent to their registered mobile number or email.
- **Passwordless Login**: Allow users to log in using a one-time password instead of a traditional password.
- **Verification Processes**: Use OTPs to verify user actions, such as changing account settings or confirming transactions.

## Features

- **Time-based OTP (TOTP)**: Generates OTPs that are valid for a specific time period.
- **HMAC-based OTP (HOTP)**: Generates OTPs based on a counter, suitable for scenarios where time-based OTPs are not feasible.
- **Customizable**: Configure the length and validity period of the OTPs.
- **Cross-Platform**: Works seamlessly on both Android and iOS platforms.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the `otp` Package in Flutter

In this tutorial, we will walk through the process of setting up the `otp` package in a Flutter project and demonstrate how to use it to generate OTPs.

## Setup Process

### Step 1: Add Dependency

Add the `otp` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  otp: ^1.0.0
```

Run `flutter pub get` to install the package.

### Step 2: Platform-Specific Configuration

#### Android

No additional configuration is required for Android.

#### iOS

Ensure that your iOS deployment target is set to at least iOS 9.0. You can set this in your `ios/Podfile`:

```ruby
platform :ios, '9.0'
```

## Using the `otp` Package

To use the `otp` package, you need to import it into your Dart file:

```dart
import 'package:otp/otp.dart';
```

### Generating a Time-based OTP (TOTP)

```dart
String totp = OTP.generateTOTPCodeString(
  'JBSWY3DPEHPK3PXP', // Secret key
  DateTime.now().millisecondsSinceEpoch,
  interval: 30, // OTP valid for 30 seconds
  length: 6, // OTP length
);
```

### Generating an HMAC-based OTP (HOTP)

```dart
String hotp = OTP.generateHOTPCodeString(
  'JBSWY3DPEHPK3PXP', // Secret key
  1, // Counter value
  length: 6, // OTP length
);
```

<-- END_TUTORIAL -->

<-- MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:otp/otp.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'OTP Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: OTPDemoPage(),
    );
  }
}

class OTPDemoPage extends StatefulWidget {
  @override
  _OTPDemoPageState createState() => _OTPDemoPageState();
}

class _OTPDemoPageState extends State<OTPDemoPage> {
  String _totp = '';
  String _hotp = '';

  @override
  void initState() {
    super.initState();
    _generateOTPs();
  }

  void _generateOTPs() {
    // Generate a Time-based OTP (TOTP)
    _totp = OTP.generateTOTPCodeString(
      'JBSWY3DPEHPK3PXP', // Secret key
      DateTime.now().millisecondsSinceEpoch,
      interval: 30, // OTP valid for 30 seconds
      length: 6, // OTP length
    );

    // Generate an HMAC-based OTP (HOTP)
    _hotp = OTP.generateHOTPCodeString(
      'JBSWY3DPEHPK3PXP', // Secret key
      1, // Counter value
      length: 6, // OTP length
    );

    // Update the UI with the generated OTPs
    setState(() {});
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('OTP Demo'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text('Time-based OTP (TOTP): $_totp'),
            SizedBox(height: 20),
            Text('HMAC-based OTP (HOTP): $_hotp'),
            SizedBox(height: 40),
            ElevatedButton(
              onPressed: _generateOTPs,
              child: Text('Regenerate OTPs'),
            ),
          ],
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The application starts with the `main` function, which runs the `RealFlutter` widget.
// 2. `RealFlutter` is a stateless widget that sets up the MaterialApp and specifies `OTPDemoPage` as the home page.
// 3. `OTPDemoPage` is a stateful widget that manages the state of the OTPs.
// 4. In the `initState` method, `_generateOTPs` is called to generate the initial OTPs.
// 5. `_generateOTPs` uses the `otp` package to generate both TOTP and HOTP, updating the state to reflect these values.
// 6. The UI displays the generated OTPs and includes a button to regenerate them.
// 7. Pressing the "Regenerate OTPs" button calls `_generateOTPs` again, updating the displayed OTPs.
```

<-- END_MAIN -->
```
<-- START_DESCRIPTION -->

# List Counter Flutter Package
================================

The `list_counter` Flutter package provides a simple and efficient way to manage a list of counters in your Flutter application. It allows you to easily increment, decrement, and reset counters, as well as store and retrieve their values.

## When to Use This Package
---------------------------

This package is useful when you need to keep track of multiple counters in your application, such as:

* A shopping cart with multiple items
* A to-do list with multiple tasks
* A game with multiple scores

## Features
------------

* Easy to use API for incrementing, decrementing, and resetting counters
* Support for storing and retrieving counter values
* Works on both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

## Setup
--------

To use the `list_counter` package, add it to your `pubspec.yaml` file:
```yml
dependencies:
  list_counter: ^1.0.0
```
Then, run `flutter pub get` to install the package.

## Basic Usage
-------------

To use the package, import it in your Dart file:
```dart
import 'package:list_counter/list_counter.dart';
```
Create a new instance of the `ListCounter` class:
```dart
ListCounter _counter = ListCounter();
```
You can then use the `increment`, `decrement`, and `reset` methods to manage your counters:
```dart
_counter.increment('counter1');
_counter.decrement('counter2');
_counter.reset('counter3');
```
## Storing and Retrieving Counter Values
--------------------------------------

To store counter values, use the `save` method:
```dart
_counter.save('counter1', 10);
```
To retrieve a counter value, use the `get` method:
```dart
int value = _counter.get('counter1');
```
## Platform-Specific Details
---------------------------

### Android

On Android, the package uses the `SharedPreferences` class to store counter values.

### iOS

On iOS, the package uses the `NSUserDefaults` class to store counter values.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:list_counter/list_counter.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'List Counter Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  ListCounter _counter = ListCounter();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('List Counter Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Counter 1: ${_counter.get('counter1')}',
              style: TextStyle(fontSize: 24),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                _counter.increment('counter1');
                setState(() {});
              },
              child: Text('Increment Counter 1'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                _counter.decrement('counter1');
                setState(() {});
              },
              child: Text('Decrement Counter 1'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                _counter.reset('counter1');
                setState(() {});
              },
              child: Text('Reset Counter 1'),
            ),
          ],
        ),
      ),
    );
  }
}

// The app starts by creating a new instance of the ListCounter class.
// The app then uses the get method to retrieve the value of 'counter1' and displays it on the screen.
// When the user presses the 'Increment Counter 1' button, the app calls the increment method to increment the value of 'counter1'.
// The app then calls setState to update the UI with the new value.
// The same process happens when the user presses the 'Decrement Counter 1' or 'Reset Counter 1' buttons.
// The app uses the ElevatedButton widget to create the buttons and the Text widget to display the counter value.
```

// The app flows by first creating a new instance of the ListCounter class.
// Then, it uses the get method to retrieve the value of 'counter1' and displays it on the screen.
// When the user presses a button, the app calls the corresponding method (increment, decrement, or reset) to update the value of 'counter1'.
// Finally, the app calls setState to update the UI with the new value.

<-- END_MAIN -->
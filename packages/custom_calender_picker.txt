<-- START_DESCRIPTION -->

# Custom Calendar Picker Flutter Package
=====================================

The `custom_calendar_picker` Flutter package provides a customizable calendar picker for selecting dates. It offers a range of features, including:

* Customizable calendar layout
* Support for single and multiple date selection
* Optional header and footer widgets
* Localization support

This package is ideal for applications that require a calendar-based date selection feature, such as:

* Scheduling appointments
* Booking reservations
* Planning events

### Features

* Customizable calendar layout
* Support for single and multiple date selection
* Optional header and footer widgets
* Localization support

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting up and Using the Custom Calendar Picker Package
===========================================================

### Step 1: Add the Package to Your Project

Add the following dependency to your `pubspec.yaml` file:
```yml
dependencies:
  custom_calendar_picker: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:custom_calendar_picker/custom_calendar_picker.dart';
```
### Step 3: Create a Custom Calendar Picker

Create a `CustomCalendarPicker` widget and pass in the required properties:
```dart
CustomCalendarPicker(
  onDateSelected: (date) {
    print('Selected date: $date');
  },
  initialDate: DateTime.now(),
  firstDate: DateTime(2020),
  lastDate: DateTime(2025),
)
```
### Platform-Specific Details

* Android: No additional configuration required.
* iOS: Add the following line to your `Info.plist` file:
```xml
<key>NSCalendarUsageDescription</key>
<string>This app uses the calendar to select dates.</string>
```
### Optimizations

* To improve performance, consider using a smaller date range.
* To customize the calendar layout, use the `CustomCalendarPicker` properties, such as `headerBuilder` and `footerBuilder`.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:custom_calendar_picker/custom_calendar_picker.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Custom Calendar Picker Demo',
      home: CustomCalendarPickerDemo(),
    );
  }
}

class CustomCalendarPickerDemo extends StatefulWidget {
  @override
  _CustomCalendarPickerDemoState createState() => _CustomCalendarPickerDemoState();
}

class _CustomCalendarPickerDemoState extends State<CustomCalendarPickerDemo> {
  DateTime _selectedDate = DateTime.now();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Custom Calendar Picker Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Selected date: $_selectedDate',
              style: TextStyle(fontSize: 24),
            ),
            SizedBox(height: 20),
            CustomCalendarPicker(
              onDateSelected: (date) {
                setState(() {
                  _selectedDate = date;
                });
              },
              initialDate: DateTime.now(),
              firstDate: DateTime(2020),
              lastDate: DateTime(2025),
            ),
          ],
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user runs the app and is presented with a calendar picker.
// 2. The user selects a date, which is displayed above the calendar picker.
// 3. The user can select a new date, which updates the displayed date.
// 4. The app uses the `CustomCalendarPicker` widget to handle date selection.
// 5. The app uses the `setState` method to update the displayed date when a new date is selected.

// Summary:
// This code demonstrates the use of the `custom_calendar_picker` package to create a customizable calendar picker.
// The app displays a calendar picker and allows the user to select a date.
// The selected date is displayed above the calendar picker.
// The app uses the `CustomCalendarPicker` widget to handle date selection and updates the displayed date when a new date is selected.
```

<-- END_MAIN -->
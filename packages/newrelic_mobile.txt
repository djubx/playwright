# New Relic Mobile Flutter Package: A Comprehensive Guide

## <-- START_DESCRIPTION -->

### Description

The `newrelic_mobile` Flutter package is designed to integrate New Relic's mobile application performance monitoring (APM) capabilities into Flutter applications. This package allows developers to track application performance, monitor user interactions, and gain insights into application health, which is crucial for maintaining a high-quality user experience.

### When to Use

You should consider using the `newrelic_mobile` package when:
- You want to monitor the performance of your Flutter application in real-time.
- You need to track user interactions and application errors.
- You are looking to optimize your app's performance based on real user data.

### Features

- **Performance Monitoring**: Track response times, throughput, and error rates.
- **User Interaction Tracking**: Monitor user actions and interactions within the app.
- **Crash Reporting**: Automatically report crashes and exceptions to New Relic.
- **Custom Events**: Log custom events to gain insights into specific user actions or application states.
- **Network Monitoring**: Analyze network requests and their performance.

## <-- END_DESCRIPTION -->

## <-- START_TUTORIAL -->

### Tutorial

#### Installation

To add the `newrelic_mobile` package to your Flutter project, include it in your `pubspec.yaml` file:

```yaml
dependencies:
  newrelic_mobile: ^latest_version
```

Run `flutter pub get` to install the package.

#### Platform-Specific Setup

**iOS Configuration:**
1. Open your `ios/Podfile` and ensure that the platform is set to at least 10.0:
   ```ruby
   platform :ios, '10.0'
   ```
2. Add the New Relic iOS SDK to your project by following the instructions in the New Relic documentation.

**Android Configuration:**
1. Open your `android/app/build.gradle` file and add the New Relic dependency:
   ```groovy
   dependencies {
       implementation 'com.newrelic.agent.android:agent:latest_version'
   }
   ```
2. Ensure that you have the necessary permissions in your `AndroidManifest.xml` file.

#### Basic Usage

1. Import the package in your Dart file:
   ```dart
   import 'package:newrelic_mobile/newrelic_mobile.dart';
   ```

2. Initialize New Relic in your `main()` function:
   ```dart
   void main() {
     NewRelicMobile.start('YOUR_NEW_RELIC_APP_TOKEN');
     runApp(MyApp());
   }
   ```

3. Track a custom event:
   ```dart
   NewRelicMobile.recordCustomEvent('event_name', {'key': 'value'});
   ```

4. Monitor user interactions:
   ```dart
   NewRelicMobile.startInteraction('interaction_name');
   // Perform some actions
   NewRelicMobile.endInteraction('interaction_name');
   ```

## <-- END_TUTORIAL -->

## <-- START_MAIN -->

### Complete Example

```dart
import 'package:flutter/material.dart';
import 'package:newrelic_mobile/newrelic_mobile.dart';

void main() {
  // Initialize New Relic with your application token
  NewRelicMobile.start('YOUR_NEW_RELIC_APP_TOKEN');
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'New Relic Mobile Example',
      home: HomeScreen(),
    );
  }
}

class HomeScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('New Relic Mobile Example'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Start tracking a user interaction
            NewRelicMobile.startInteraction('Button Press');
            // Simulate a network request or some processing
            Future.delayed(Duration(seconds: 2), () {
              // End the interaction after the simulated delay
              NewRelicMobile.endInteraction('Button Press');
              // Record a custom event
              NewRelicMobile.recordCustomEvent('Button Pressed', {'time': DateTime.now().toString()});
              // Show a snackbar to indicate completion
              ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Button Pressed!')));
            });
          },
          child: Text('Press Me'),
        ),
      ),
    );
  }
}
```

### Application Flow Explanation

// The application starts by initializing New Relic with the provided application token.
// The `RealFlutter` class is the main widget that sets up the MaterialApp.
// The `HomeScreen` widget contains a button that, when pressed, starts tracking a user interaction.
// After a simulated delay (representing a network request or processing), the interaction is ended.
// A custom event is recorded to New Relic with the current time.
// Finally, a snackbar is displayed to inform the user that the button was pressed successfully.

## <-- END_MAIN -->

### Summary

In this blog post, we explored the `newrelic_mobile` Flutter package, detailing its features, installation process, and usage. We provided a complete example demonstrating how to integrate New Relic into a Flutter application, track user interactions, and log custom events. By leveraging this package, developers can gain valuable insights into their application's performance and user behavior, ultimately leading to a better user experience.
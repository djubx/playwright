<-- START_DESCRIPTION -->

**New Relic Mobile Flutter Package: Overview and Features**
===========================================================

The `newrelic_mobile` Flutter package is a powerful tool for monitoring and analyzing the performance of your Flutter applications. It provides a comprehensive set of features to help you identify and resolve issues, improve user experience, and optimize your app's performance.

**When to Use This Package**
---------------------------

You should use this package when:

* You want to monitor your app's performance and identify areas for improvement.
* You need to troubleshoot issues and errors in your app.
* You want to gain insights into your users' behavior and experiences.

**Key Features**
----------------

* **Crash reporting**: Capture and analyze crashes to identify and fix issues.
* **Error reporting**: Track and analyze errors to improve app stability.
* **Performance monitoring**: Monitor app performance, including response times and throughput.
* **User interaction tracking**: Track user interactions, such as taps and gestures.
* **Custom events**: Track custom events, such as login and purchase events.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setting Up the New Relic Mobile Flutter Package**
=====================================================

To set up the `newrelic_mobile` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  newrelic_mobile: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:newrelic_mobile/newrelic_mobile.dart';
```
### Step 3: Initialize the Package

Initialize the package in your app's `main` function:
```dart
void main() {
  NewRelicMobile.initialize(
    apiKey: 'YOUR_API_KEY',
    appId: 'YOUR_APP_ID',
  );
  runApp(MyApp());
}
```
### Platform-Specific Configurations

#### Android

Add the following lines to your `AndroidManifest.xml` file:
```xml
<application>
  ...
  <meta-data
    android:name="com.newrelic.mobile.android.apiKey"
    android:value="YOUR_API_KEY" />
  <meta-data
    android:name="com.newrelic.mobile.android.appId"
    android:value="YOUR_APP_ID" />
</application>
```
#### iOS

Add the following lines to your `Info.plist` file:
```xml
<key>com.newrelic.mobile.ios.apiKey</key>
<string>YOUR_API_KEY</string>
<key>com.newrelic.mobile.ios.appId</key>
<string>YOUR_APP_ID</string>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:newrelic_mobile/newrelic_mobile.dart';

void main() {
  NewRelicMobile.initialize(
    apiKey: 'YOUR_API_KEY',
    appId: 'YOUR_APP_ID',
  );
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  void initState() {
    super.initState();
    // Track a custom event
    NewRelicMobile.trackCustomEvent('App Started');
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Real Flutter',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Real Flutter'),
        ),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              // Track a user interaction
              NewRelicMobile.trackUserInteraction('Button Tapped');
              // Simulate an error
              try {
                throw Exception('Simulated error');
              } catch (e) {
                // Track an error
                NewRelicMobile.trackError(e);
              }
            },
            child: Text('Tap me'),
          ),
        ),
      ),
    );
  }
}

// Application flow:
// 1. The app initializes the New Relic Mobile package with the API key and app ID.
// 2. The app tracks a custom event 'App Started' when the app starts.
// 3. When the user taps the button, the app tracks a user interaction 'Button Tapped'.
// 4. The app simulates an error and tracks it using the `trackError` method.
// 5. The app continues to run and track user interactions and errors.
```

// Final summary:
// The code initializes the New Relic Mobile package and tracks a custom event when the app starts.
// It then tracks user interactions and errors when the user taps the button.
// The app continues to run and track user interactions and errors, providing valuable insights into the app's performance and user experience.
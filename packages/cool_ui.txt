<-- START_DESCRIPTION -->

# Cool UI Flutter Package
The Cool UI Flutter package is a powerful tool for creating visually appealing and user-friendly interfaces in Flutter applications. It provides a wide range of pre-built UI components, including buttons, cards, and dialogs, that can be easily customized to fit your app's style.

## When to Use Cool UI
Cool UI is perfect for developers who want to create a consistent and professional-looking UI without spending hours designing and building custom components. It's also great for prototyping and testing different UI ideas quickly.

## Key Features
Some of the key features of Cool UI include:

* Pre-built UI components for common use cases
* Highly customizable to fit your app's style
* Easy to use and integrate into your existing Flutter project
* Supports both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up Cool UI
To get started with Cool UI, follow these steps:

1. Add the Cool UI package to your Flutter project by adding the following line to your `pubspec.yaml` file:
```yml
dependencies:
  cool_ui: ^1.0.0
```
2. Run `flutter pub get` to install the package.
3. Import the Cool UI package in your Dart file:
```dart
import 'package:cool_ui/cool_ui.dart';
```
4. Use the Cool UI components in your Flutter widget tree.

## Platform-Specific Details
Cool UI supports both Android and iOS platforms. However, some components may have slightly different behaviors or appearances on each platform.

* On Android, the `CoolButton` component uses the Material Design style by default.
* On iOS, the `CoolButton` component uses the Cupertino style by default.

## Configurations and Optimizations
To get the best performance out of Cool UI, make sure to:

* Use the `CoolUI` widget as the root of your widget tree.
* Use the `CoolTheme` widget to customize the appearance of your app.
* Use the `CoolTextStyle` widget to customize the text style of your app.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:cool_ui/cool_ui.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Create a Cool UI theme to customize the appearance of our app
    CoolTheme theme = CoolTheme(
      primaryColor: Colors.blue,
      secondaryColor: Colors.green,
    );

    // Create a Cool UI text style to customize the text style of our app
    CoolTextStyle textStyle = CoolTextStyle(
      fontSize: 18,
      fontWeight: FontWeight.bold,
    );

    // Create a Cool UI button to demonstrate the package's functionality
    CoolButton button = CoolButton(
      onPressed: () {
        // Show a Cool UI dialog when the button is pressed
        showDialog(
          context: context,
          builder: (BuildContext context) {
            return CoolDialog(
              title: Text('Cool UI Dialog'),
              content: Text('This is a Cool UI dialog'),
              actions: [
                CoolButton(
                  onPressed: () {
                    Navigator.of(context).pop();
                  },
                  child: Text('Close'),
                ),
              ],
            );
          },
        );
      },
      child: Text('Show Dialog'),
    );

    // Create a Cool UI card to demonstrate the package's functionality
    CoolCard card = CoolCard(
      child: Column(
        children: [
          Text('Cool UI Card'),
          button,
        ],
      ),
    );

    // Return the Cool UI widget tree
    return CoolUI(
      theme: theme,
      textStyle: textStyle,
      child: Scaffold(
        appBar: AppBar(
          title: Text('Real Flutter'),
        ),
        body: Center(
          child: card,
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app and sees the Cool UI button on the screen.
// 2. When the user presses the button, a Cool UI dialog appears.
// 3. The user can close the dialog by pressing the "Close" button.
// 4. The user can then press the button again to show the dialog again.
// This demonstrates the basic functionality of the Cool UI package.

// The code flow is as follows:
// 1. The `RealFlutter` widget is created and returned as the root of the widget tree.
// 2. The `CoolTheme` and `CoolTextStyle` widgets are created to customize the appearance of the app.
// 3. The `CoolButton` and `CoolCard` widgets are created to demonstrate the package's functionality.
// 4. The `CoolUI` widget is created and returned as the root of the widget tree, with the `CoolTheme` and `CoolTextStyle` widgets applied.
// 5. The `Scaffold` widget is created and returned as the child of the `CoolUI` widget, with the `AppBar` and `Center` widgets applied.
// 6. The `CoolCard` widget is created and returned as the child of the `Center` widget, with the `Column` widget applied.
// 7. The `Text` and `CoolButton` widgets are created and returned as the children of the `Column` widget.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Country List Pick Flutter Package
=====================================

The `country_list_pick` Flutter package provides a simple and efficient way to display a list of countries and allow users to select their preferred country. This package is ideal for applications that require users to provide their country of origin, residence, or other geographical information.

### Features

*   Displays a list of countries with their corresponding flags and names
*   Allows users to search for specific countries
*   Supports multiple platforms, including Android and iOS
*   Customizable UI to fit your application's design

### When to Use

*   User registration or profile creation
*   E-commerce applications requiring shipping or billing addresses
*   Travel or tourism applications
*   Any application requiring users to provide their country information

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Country List Pick Package
===========================================================

### Step 1: Add the Package to Your Project

Add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  country_list_pick: ^1.0.0+1
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:country_list_pick/country_list_pick.dart';
```

### Step 3: Use the Package

Create a `CountryListPick` widget and customize it as needed:

```dart
CountryListPick(
  appBar: AppBar(
    title: Text('Select Country'),
  ),
  // Allow users to search for countries
  isShowFlag: true,
  isShowTitle: true,
  isDownIcon: true,
  isShowCode: true,
  // Set the initial country
  initialSelection: '+1',
  // Set the text to display when no country is selected
  noSuchEmpty: 'No country selected',
  // Handle country selection
  onChanged: (CountryCode countryCode) {
    print('Selected country: ${countryCode.name}');
  },
)
```

### Platform-Specific Details

*   **Android:** No additional configuration is required.
*   **iOS:** No additional configuration is required.

### Optimizations

*   You can customize the UI by modifying the `appBar`, `isShowFlag`, `isShowTitle`, `isDownIcon`, and `isShowCode` properties.
*   You can also modify the `initialSelection` and `noSuchEmpty` properties to suit your application's needs.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:country_list_pick/country_list_pick.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  String _selectedCountry = '';

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Country List Pick Demo',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Country List Pick Demo'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              CountryListPick(
                appBar: AppBar(
                  title: Text('Select Country'),
                ),
                // Allow users to search for countries
                isShowFlag: true,
                isShowTitle: true,
                isDownIcon: true,
                isShowCode: true,
                // Set the initial country
                initialSelection: '+1',
                // Set the text to display when no country is selected
                noSuchEmpty: 'No country selected',
                // Handle country selection
                onChanged: (CountryCode countryCode) {
                  setState(() {
                    _selectedCountry = countryCode.name;
                  });
                },
              ),
              SizedBox(height: 20),
              Text('Selected country: $_selectedCountry'),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user is presented with a CountryListPick widget.
// 2. The user can search for countries by typing in the search bar.
// 3. The user can select a country from the list.
// 4. When a country is selected, the onChanged callback is triggered.
// 5. The selected country's name is updated in the _selectedCountry variable.
// 6. The UI is updated to display the selected country's name.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

**powersync_attachments_helper Flutter Package**
==============================================

The `powersync_attachments_helper` Flutter package is a utility library designed to simplify the process of handling attachments in Flutter applications. It provides a set of features that enable developers to easily manage attachments, including uploading, downloading, and deleting files.

**When to Use This Package**
---------------------------

This package is particularly useful when building applications that require users to upload or download files, such as:

* File sharing platforms
* Social media apps
* Productivity tools
* E-commerce platforms

**Key Features**
----------------

* Upload files to a server
* Download files from a server
* Delete files from a server
* Handle attachment metadata (e.g., file name, size, type)

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setting Up the Package**
-------------------------

To use the `powersync_attachments_helper` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  powersync_attachments_helper: ^1.0.0
```
2. Run `flutter pub get` to install the package.
3. Import the package in your Dart file:
```dart
import 'package:powersync_attachments_helper/powersync_attachments_helper.dart';
```
**Platform-Specific Configurations**
-----------------------------------

### Android

* Add the following permissions to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.INTERNET" />
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
```
* Create a new file `android/app/src/main/java/com/example/your_app_name/AttachmentHelper.java` with the following content:
```java
package com.example.your_app_name;

import android.content.Context;
import android.os.Environment;

public class AttachmentHelper {
    public static String getAttachmentDirectory(Context context) {
        return Environment.getExternalStorageDirectory().getPath() + "/your_app_name/attachments";
    }
}
```
### iOS

* Add the following permissions to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```
* Create a new file `ios/Classes/AttachmentHelper.swift` with the following content:
```swift
import Foundation

class AttachmentHelper {
    static func getAttachmentDirectory() -> String {
        return FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!.path + "/attachments"
    }
}
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:powersync_attachments_helper/powersync_attachments_helper.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'PowerSync Attachments Helper Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _attachmentHelper = AttachmentHelper();

  Future<void> _uploadFile() async {
    // Select a file to upload
    final file = await FilePicker.platform.pickFile();
    if (file == null) return;

    // Upload the file to the server
    final attachment = await _attachmentHelper.uploadFile(file.path);
    print('File uploaded: ${attachment.name}');
  }

  Future<void> _downloadFile() async {
    // Get the list of attachments from the server
    final attachments = await _attachmentHelper.getAttachments();
    if (attachments.isEmpty) return;

    // Download the first attachment
    final attachment = attachments.first;
    final file = await _attachmentHelper.downloadFile(attachment.id);
    print('File downloaded: ${file.path}');
  }

  Future<void> _deleteFile() async {
    // Get the list of attachments from the server
    final attachments = await _attachmentHelper.getAttachments();
    if (attachments.isEmpty) return;

    // Delete the first attachment
    final attachment = attachments.first;
    await _attachmentHelper.deleteFile(attachment.id);
    print('File deleted: ${attachment.name}');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('PowerSync Attachments Helper Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            ElevatedButton(
              onPressed: _uploadFile,
              child: Text('Upload File'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _downloadFile,
              child: Text('Download File'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _deleteFile,
              child: Text('Delete File'),
            ),
          ],
        ),
      ),
    );
  }
}
```

// This code demonstrates the usage of the PowerSync Attachments Helper package.
// It provides a simple UI with three buttons to upload, download, and delete files.
// The `_uploadFile` function selects a file to upload and then uploads it to the server.
// The `_downloadFile` function gets the list of attachments from the server, downloads the first attachment, and prints the file path.
// The `_deleteFile` function gets the list of attachments from the server, deletes the first attachment, and prints the attachment name.

// The code uses the `AttachmentHelper` class to interact with the PowerSync Attachments Helper package.
// The `AttachmentHelper` class provides methods to upload, download, and delete files, as well as get the list of attachments from the server.

// The code also uses the `FilePicker` package to select files to upload.
// The `FilePicker` package provides a simple way to select files from the device.

// Overall, this code provides a basic example of how to use the PowerSync Attachments Helper package to manage attachments in a Flutter app.

<-- END_MAIN -->
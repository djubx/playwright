<-- START_DESCRIPTION -->

# Device Policy Manager Flutter Package
=====================================

The `device_policy_manager` Flutter package provides a simple and efficient way to manage device policies, such as screen timeout, password requirements, and more. This package is ideal for enterprise applications that require strict device management.

### Features

* Set screen timeout duration
* Enable/disable password requirements
* Set password complexity requirements
* Enable/disable device encryption
* And more!

### When to Use

This package is useful when developing enterprise applications that require strict device management. For example, a company may want to ensure that all employee devices have a minimum password complexity requirement or that devices are encrypted.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Device Policy Manager Package
===========================================================

### Step 1: Add the Package to Your Project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  device_policy_manager: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:device_policy_manager/device_policy_manager.dart';
```
### Step 3: Initialize the Package

Initialize the package by calling the `init` method:
```dart
await DevicePolicyManager.init();
```
### Step 4: Set Device Policies

Set device policies using the various methods provided by the package. For example, to set the screen timeout duration:
```dart
await DevicePolicyManager.setScreenTimeoutDuration(30); // 30 seconds
```
### Platform-Specific Details

* Android: This package uses the Android Device Policy Manager API to manage device policies. Ensure that your app has the necessary permissions to use this API.
* iOS: This package uses the iOS Mobile Device Management (MDM) API to manage device policies. Ensure that your app has the necessary permissions to use this API.

### Required Configurations and Optimizations

* Android: Add the following line to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.MANAGE_PROFILE_AND_DEVICE_ADMIN" />
```
* iOS: Add the following line to your `Info.plist` file:
```xml
<key>NSMobileDeviceManagement</key>
<true/>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:device_policy_manager/device_policy_manager.dart';

void main() async {
  // Initialize the package
  await DevicePolicyManager.init();

  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Device Policy Manager Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Device Policy Manager Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            // Set screen timeout duration
            ElevatedButton(
              onPressed: () async {
                // Set screen timeout duration to 30 seconds
                await DevicePolicyManager.setScreenTimeoutDuration(30);
              },
              child: Text('Set Screen Timeout Duration'),
            ),
            // Enable password requirements
            ElevatedButton(
              onPressed: () async {
                // Enable password requirements
                await DevicePolicyManager.enablePasswordRequirements();
              },
              child: Text('Enable Password Requirements'),
            ),
            // Set password complexity requirements
            ElevatedButton(
              onPressed: () async {
                // Set password complexity requirements
                await DevicePolicyManager.setPasswordComplexityRequirements(
                  passwordLength: 8,
                  requireUppercase: true,
                  requireLowercase: true,
                  requireNumbers: true,
                  requireSpecialCharacters: true,
                );
              },
              child: Text('Set Password Complexity Requirements'),
            ),
          ],
        ),
      ),
    );
  }
}

// Application flow:
// 1. The app initializes the Device Policy Manager package.
// 2. The user clicks on the "Set Screen Timeout Duration" button.
// 3. The app sets the screen timeout duration to 30 seconds using the Device Policy Manager package.
// 4. The user clicks on the "Enable Password Requirements" button.
// 5. The app enables password requirements using the Device Policy Manager package.
// 6. The user clicks on the "Set Password Complexity Requirements" button.
// 7. The app sets password complexity requirements using the Device Policy Manager package.

// Summary:
// This app demonstrates the use of the Device Policy Manager package to manage device policies.
// The app initializes the package, sets screen timeout duration, enables password requirements, and sets password complexity requirements.
```

<-- END_MAIN -->
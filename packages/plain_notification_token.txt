```markdown
<-- START_DESCRIPTION -->

# Overview of the `plain_notification_token` Flutter Package

The `plain_notification_token` package is a lightweight Flutter plugin designed to simplify the process of obtaining device notification tokens. These tokens are essential for sending push notifications to specific devices, making this package particularly useful for applications that require real-time updates or alerts.

## When to Use

- **Push Notifications**: If your application needs to send push notifications to users, this package helps you retrieve the necessary device tokens.
- **User-Specific Alerts**: For apps that provide personalized notifications based on user activity or preferences.
- **Real-Time Updates**: Applications that require instant updates, such as messaging apps or live sports scores.

## Features

- **Cross-Platform Support**: Works seamlessly on both Android and iOS platforms.
- **Simple API**: Provides a straightforward API to fetch notification tokens without dealing with platform-specific complexities.
- **Lightweight**: Minimal dependencies and easy to integrate into existing projects.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the `plain_notification_token` Package

In this section, we'll walk through the setup process for integrating the `plain_notification_token` package into a Flutter project, covering both Android and iOS configurations.

## Setup Process

### 1. Add Dependency

Add the `plain_notification_token` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  plain_notification_token: ^1.0.0
```

Run `flutter pub get` to install the package.

### 2. Android Configuration

- **Permissions**: Ensure that your `AndroidManifest.xml` includes the necessary permissions for internet access and receiving notifications.

```xml
<uses-permission android:name="android.permission.INTERNET"/>
<uses-permission android:name="com.google.android.c2dm.permission.RECEIVE"/>
```

- **Firebase Setup**: Integrate Firebase Cloud Messaging (FCM) by adding the `google-services.json` file to your `android/app` directory and updating your `build.gradle` files accordingly.

### 3. iOS Configuration

- **Permissions**: Update your `Info.plist` to request permission for notifications.

```xml
<key>UIBackgroundModes</key>
<array>
  <string>fetch</string>
  <string>remote-notification</string>
</array>
```

- **Firebase Setup**: Add the `GoogleService-Info.plist` file to your iOS project in Xcode.

## Using the Package

To use the package, import it into your Dart file and call the appropriate methods to fetch the notification token.

```dart
import 'package:plain_notification_token/plain_notification_token.dart';

class RealFlutter {
  Future<void> getToken() async {
    String token = await PlainNotificationToken.getToken();
    print("Device Token: $token");
  }
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

# Complete Example: Flutter Main File

Below is a complete example demonstrating how to use the `plain_notification_token` package in a Flutter application.

```dart
import 'package:flutter/material.dart';
import 'package:plain_notification_token/plain_notification_token.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Notification Token Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: TokenHomePage(),
    );
  }
}

class TokenHomePage extends StatefulWidget {
  @override
  _TokenHomePageState createState() => _TokenHomePageState();
}

class _TokenHomePageState extends State<TokenHomePage> {
  String _token = "Fetching...";

  @override
  void initState() {
    super.initState();
    _fetchToken();
  }

  // Fetches the notification token using the plain_notification_token package
  Future<void> _fetchToken() async {
    try {
      // Call the getToken method to retrieve the device's notification token
      String token = await PlainNotificationToken.getToken();
      setState(() {
        _token = token; // Update the UI with the fetched token
      });
    } catch (e) {
      setState(() {
        _token = "Failed to get token: $e"; // Handle any errors
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Notification Token'),
      ),
      body: Center(
        child: Text(
          'Device Token: $_token', // Display the token on the screen
          textAlign: TextAlign.center,
        ),
      ),
    );
  }
}
```

// The application starts by running the `main` function, which initializes the app and sets `MyApp` as the root widget.
// `MyApp` is a stateless widget that builds a `MaterialApp` with a home page of `TokenHomePage`.
// `TokenHomePage` is a stateful widget that manages the state of the notification token.
// In the `initState` method, `_fetchToken` is called to retrieve the device's notification token.
// `_fetchToken` uses the `plain_notification_token` package to get the token and updates the UI with the result.
// The UI consists of a simple `Scaffold` with an `AppBar` and a `Center` widget displaying the token.

<-- END_MAIN -->
```
```markdown
<!-- START_DESCRIPTION -->
# Usercentrics SDK Flutter Package

The `usercentrics_sdk` Flutter package is designed to help developers integrate Usercentrics' consent management platform into their Flutter applications. This package allows you to manage user consent for data processing in compliance with GDPR and other privacy regulations. It provides a seamless way to display consent banners, manage user preferences, and ensure that your app adheres to legal requirements regarding user data.

## When to Use This Package
You should consider using the `usercentrics_sdk` package when:
- You are developing an application that collects user data and needs to comply with GDPR or similar regulations.
- You want to provide users with a clear and customizable consent management interface.
- You need to manage user preferences for data processing in a user-friendly manner.

## Key Features
- **Consent Management**: Easily manage user consent for various data processing activities.
- **Customizable UI**: The package allows for customization of the consent banner to match your app's design.
- **Multi-Language Support**: Supports multiple languages for international applications.
- **Event Handling**: Provides callbacks for consent status changes, allowing you to react to user preferences in real-time.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Usercentrics SDK

## Installation
To get started with the `usercentrics_sdk`, add the following dependency to your `pubspec.yaml` file:

```yaml
dependencies:
  usercentrics_sdk: ^latest_version
```

Make sure to replace `latest_version` with the most recent version available on [pub.dev](https://pub.dev/packages/usercentrics_sdk).

## Platform-Specific Setup

### Android
1. Open your `android/app/build.gradle` file and ensure you have the following configurations:
   ```groovy
   android {
       ...
       defaultConfig {
           ...
           minSdkVersion 21 // Ensure this is set to at least 21
       }
   }
   ```

2. Add the necessary permissions in your `AndroidManifest.xml`:
   ```xml
   <uses-permission android:name="android.permission.INTERNET"/>
   ```

### iOS
1. Open your `ios/Runner/Info.plist` and add the following:
   ```xml
   <key>NSAppTransportSecurity</key>
   <dict>
       <key>NSAllowsArbitraryLoads</key>
       <true/>
   </dict>
   ```

2. Ensure you have the correct deployment target set in your `ios/Podfile`:
   ```ruby
   platform :ios, '10.0'
   ```

## Basic Usage
To use the `usercentrics_sdk`, you need to initialize it in your main application file. Hereâ€™s a simple example of how to do this:

```dart
import 'package:flutter/material.dart';
import 'package:usercentrics_sdk/usercentrics_sdk.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  void initState() {
    super.initState();
    // Initialize Usercentrics SDK
    UsercentricsSdk.init('YOUR_USERCENTRICS_ID');
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Usercentrics SDK Example')),
        body: Center(
          child: Text('Usercentrics SDK Initialized'),
        ),
      ),
    );
  }
}
```

In this example, replace `'YOUR_USERCENTRICS_ID'` with your actual Usercentrics ID. This initializes the SDK when the app starts.

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of Usercentrics SDK in Flutter

```dart
import 'package:flutter/material.dart';
import 'package:usercentrics_sdk/usercentrics_sdk.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  void initState() {
    super.initState();
    // Initialize Usercentrics SDK with your Usercentrics ID
    UsercentricsSdk.init('YOUR_USERCENTRICS_ID');

    // Set up a listener for consent status changes
    UsercentricsSdk.onConsentStatusChanged((status) {
      // Handle the consent status change
      print('Consent status changed: $status');
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Usercentrics SDK Example')),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              // Show the consent banner
              UsercentricsSdk.showConsentBanner();
            },
            child: Text('Show Consent Banner'),
          ),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts and the main function runs, initializing the RealFlutter widget.
// 2. In the _RealFlutterState's initState method, the Usercentrics SDK is initialized with the provided Usercentrics ID.
// 3. A listener is set up to listen for changes in the consent status, which will print the new status to the console.
// 4. The build method creates a simple UI with an AppBar and a button.
// 5. When the button is pressed, the consent banner is displayed to the user, allowing them to manage their consent preferences.
```
<!-- END_MAIN -->
``` 

This structured blog post provides a comprehensive overview of the `usercentrics_sdk` Flutter package, guiding developers through its features, setup, and practical usage with a complete example.
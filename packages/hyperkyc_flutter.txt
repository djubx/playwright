<-- START_DESCRIPTION -->

Hyperkyc Flutter Package: Streamlining KYC Processes
=====================================================

The Hyperkyc Flutter package is designed to simplify the Know Your Customer (KYC) process for businesses and organizations. It provides a seamless and secure way to verify customer identities, reducing the risk of identity theft and fraud.

Key Features:

*   Secure identity verification
*   Real-time authentication
*   Customizable workflows
*   Integration with existing systems

When to Use:

*   Customer onboarding
*   Identity verification
*   Compliance with regulatory requirements

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setting Up Hyperkyc Flutter Package
-----------------------------------

### Step 1: Add the Package to Your Project

Add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  hyperkyc_flutter: ^1.0.0
```

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:hyperkyc_flutter/hyperkyc_flutter.dart';
```

### Step 3: Initialize the Package

Initialize the package with your API key:

```dart
HyperkycFlutter.initialize('YOUR_API_KEY');
```

### Step 4: Configure the Package (Optional)

Configure the package according to your requirements:

```dart
HyperkycFlutter.configure(
  workflowId: 'YOUR_WORKFLOW_ID',
  environment: 'production',
);
```

Platform-Specific Details:

*   Android: Add the following permission to your `AndroidManifest.xml` file:

    ```xml
<uses-permission android:name="android.permission.INTERNET" />
```
*   iOS: Add the following permission to your `Info.plist` file:

    ```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:hyperkyc_flutter/hyperkyc_flutter.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Hyperkyc Flutter Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  // Initialize the package with your API key
  final _hyperkycFlutter = HyperkycFlutter('YOUR_API_KEY');

  // Configure the package according to your requirements
  void _configureHyperkyc() {
    _hyperkycFlutter.configure(
      workflowId: 'YOUR_WORKFLOW_ID',
      environment: 'production',
    );
  }

  // Start the KYC process
  void _startKyc() async {
    try {
      // Start the KYC process
      final kycResult = await _hyperkycFlutter.startKyc();

      // Handle the KYC result
      if (kycResult.success) {
        print('KYC successful!');
      } else {
        print('KYC failed!');
      }
    } catch (e) {
      print('Error: $e');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Hyperkyc Flutter Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: _configureHyperkyc,
              child: Text('Configure Hyperkyc'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _startKyc,
              child: Text('Start KYC'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user initializes the Hyperkyc Flutter package with their API key.
// 2. The user configures the package according to their requirements.
// 3. The user starts the KYC process by calling the startKyc method.
// 4. The package handles the KYC process and returns the result.
// 5. The user handles the KYC result accordingly.

// In summary, this code demonstrates how to use the Hyperkyc Flutter package to streamline the KYC process.
// It initializes the package, configures it, starts the KYC process, and handles the result.
```

<-- END_MAIN -->
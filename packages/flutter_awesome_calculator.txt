<-- START_DESCRIPTION -->
### Flutter Awesome Calculator Package
The `flutter_awesome_calculator` package is a powerful and customizable calculator library for Flutter applications. It provides a simple and intuitive way to integrate a calculator into your app, with a range of features and customization options.

**When to use this package:**

* When you need a basic calculator functionality in your app.
* When you want to provide a customizable calculator experience for your users.
* When you need to perform mathematical operations and want a reliable and tested library.

**Key Features:**

* Basic arithmetic operations (addition, subtraction, multiplication, division).
* Support for decimal numbers and negative values.
* Customizable layout and design.
* Support for multiple themes and colors.
* Easy integration with other Flutter widgets.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->
### Setting up the package

To use the `flutter_awesome_calculator` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_awesome_calculator: ^1.0.0
```
2. Run `flutter pub get` to install the package.
3. Import the package in your Dart file:
```dart
import 'package:flutter_awesome_calculator/flutter_awesome_calculator.dart';
```
### Using the package

To use the calculator, create a new instance of the `RealFlutter` class and pass it to the `Calculator` widget:
```dart
RealFlutter realFlutter = RealFlutter();
Calculator calculator = Calculator(realFlutter: realFlutter);
```
You can then customize the calculator by passing various options to the `Calculator` constructor, such as the layout and theme.

### Platform-specific details

* Android: No additional setup is required.
* iOS: You need to add the following line to your `Info.plist` file:
```xml
<key>NSAllowsArbitraryLoads</key>
<true/>
```
This allows the calculator to load external fonts.

### Optimizations

To improve performance, you can enable caching by passing `cache: true` to the `Calculator` constructor.

<-- END_TUTORIAL -->

<-- START_MAIN -->
```dart
import 'package:flutter/material.dart';
import 'package:flutter_awesome_calculator/flutter_awesome_calculator.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Awesome Calculator',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: CalculatorPage(),
    );
  }
}

class CalculatorPage extends StatefulWidget {
  @override
  _CalculatorPageState createState() => _CalculatorPageState();
}

class _CalculatorPageState extends State<CalculatorPage> {
  RealFlutter realFlutter = RealFlutter();
  Calculator calculator = Calculator(realFlutter: realFlutter);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Awesome Calculator'),
      ),
      body: Center(
        child: calculator,
      ),
    );
  }
}
```
// The app starts by running the `main` function, which creates a new instance of the `MyApp` widget.
// The `MyApp` widget builds a `MaterialApp` with a title and theme.
// The `home` property is set to the `CalculatorPage` widget.
// The `CalculatorPage` widget creates a new instance of the `RealFlutter` class and passes it to the `Calculator` widget.
// The `Calculator` widget is then displayed in the center of the screen.
// When the user interacts with the calculator, the `RealFlutter` class performs the necessary calculations and updates the display.

// In summary, the code flows as follows:
// 1. The app starts and creates a new instance of the `MyApp` widget.
// 2. The `MyApp` widget builds a `MaterialApp` with a title and theme.
// 3. The `CalculatorPage` widget creates a new instance of the `RealFlutter` class and passes it to the `Calculator` widget.
// 4. The `Calculator` widget is displayed in the center of the screen and performs calculations when the user interacts with it.

<-- END_MAIN -->
```markdown
<!-- START_DESCRIPTION -->
# Floating Frosted Bottom Bar Flutter Package

The **floating_frosted_bottom_bar** Flutter package provides a customizable and visually appealing bottom navigation bar that can float above the content of your application. This package is particularly useful for applications that require a modern and sleek user interface, allowing users to navigate between different sections of the app seamlessly.

## When to Use This Package

You might consider using the **floating_frosted_bottom_bar** package in scenarios such as:

- **Social Media Apps**: Where a visually appealing navigation bar enhances user engagement.
- **E-commerce Applications**: To provide easy access to different product categories while maintaining a clean UI.
- **Content Consumption Apps**: Such as news or video apps, where users frequently switch between different content types.

## Features

- **Frosted Glass Effect**: The bottom bar has a frosted glass effect, giving it a modern look.
- **Customizable**: You can customize the colors, icons, and text to match your app's theme.
- **Responsive Design**: The bar adapts to different screen sizes and orientations.
- **Easy Integration**: Simple setup process with minimal configuration required.

This package is a great choice for developers looking to enhance the user experience with a stylish bottom navigation bar.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up the Floating Frosted Bottom Bar

In this tutorial, we will walk through the setup process for the **floating_frosted_bottom_bar** package and demonstrate how to use it in your Flutter application.

## Step 1: Add Dependency

To get started, add the package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  floating_frosted_bottom_bar: ^1.0.0 # Check for the latest version on pub.dev
```

## Step 2: Import the Package

In your Dart file, import the package:

```dart
import 'package:floating_frosted_bottom_bar/floating_frosted_bottom_bar.dart';
```

## Step 3: Basic Configuration

### Android Configuration

For Android, ensure that your `android/app/build.gradle` file has the following configurations:

```gradle
android {
    ...
    compileSdkVersion 31 // or latest version
    ...
}
```

### iOS Configuration

For iOS, make sure to set the minimum deployment target in your `ios/Podfile`:

```ruby
platform :ios, '12.0' # or higher
```

## Step 4: Using the Floating Frosted Bottom Bar

You can now use the `FloatingFrostedBottomBar` widget in your application. Hereâ€™s a simple example of how to implement it:

```dart
FloatingFrostedBottomBar(
  items: [
    BottomNavigationBarItem(icon: Icon(Icons.home), label: 'Home'),
    BottomNavigationBarItem(icon: Icon(Icons.search), label: 'Search'),
    BottomNavigationBarItem(icon: Icon(Icons.person), label: 'Profile'),
  ],
  onTap: (index) {
    // Handle navigation based on the index
  },
)
```

## Step 5: Customization

You can customize the appearance of the bottom bar by modifying its properties, such as `backgroundColor`, `iconColor`, and `selectedIconColor`.

```dart
FloatingFrostedBottomBar(
  backgroundColor: Colors.white.withOpacity(0.5),
  iconColor: Colors.grey,
  selectedIconColor: Colors.blue,
  ...
)
```

With these steps, you should be able to integrate the **floating_frosted_bottom_bar** package into your Flutter application successfully.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Floating Frosted Bottom Bar

```dart
import 'package:flutter/material.dart';
import 'package:floating_frosted_bottom_bar/floating_frosted_bottom_bar.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Floating Frosted Bottom Bar Example',
      home: HomeScreen(),
    );
  }
}

class HomeScreen extends StatefulWidget {
  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  int _selectedIndex = 0; // Track the selected index

  // List of widgets to display based on the selected index
  final List<Widget> _widgetOptions = <Widget>[
    Text('Home Screen', style: TextStyle(fontSize: 35, fontWeight: FontWeight.bold)),
    Text('Search Screen', style: TextStyle(fontSize: 35, fontWeight: FontWeight.bold)),
    Text('Profile Screen', style: TextStyle(fontSize: 35, fontWeight: FontWeight.bold)),
  ];

  // Function to handle item taps
  void _onItemTapped(int index) {
    setState(() {
      _selectedIndex = index; // Update the selected index
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Floating Frosted Bottom Bar Example'),
      ),
      body: Center(
        child: _widgetOptions.elementAt(_selectedIndex), // Display the selected widget
      ),
      bottomNavigationBar: FloatingFrostedBottomBar(
        items: [
          BottomNavigationBarItem(icon: Icon(Icons.home), label: 'Home'),
          BottomNavigationBarItem(icon: Icon(Icons.search), label: 'Search'),
          BottomNavigationBarItem(icon: Icon(Icons.person), label: 'Profile'),
        ],
        currentIndex: _selectedIndex, // Set the current index
        onTap: _onItemTapped, // Handle taps
        backgroundColor: Colors.white.withOpacity(0.5), // Frosted effect
        iconColor: Colors.grey, // Default icon color
        selectedIconColor: Colors.blue, // Selected icon color
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function runs the RealFlutter app.
// 2. RealFlutter is a StatelessWidget that sets up the MaterialApp.
// 3. HomeScreen is a StatefulWidget that maintains the selected index for the bottom navigation.
// 4. The _widgetOptions list contains the different screens to display based on the selected index.
// 5. The _onItemTapped function updates the selected index when a bottom navigation item is tapped.
// 6. The Scaffold widget contains an AppBar, a body that displays the selected screen, and the FloatingFrostedBottomBar.
// 7. The FloatingFrostedBottomBar is configured with items, current index, and tap handling, providing a frosted glass effect.
```
<!-- END_MAIN -->
``` 

This structured blog provides a comprehensive overview of the **floating_frosted_bottom_bar** package, guiding users through its features, setup, and implementation with a complete example.
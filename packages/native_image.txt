<-- START_DESCRIPTION -->

Native Image Flutter Package
==========================

The `native_image` package is a Flutter library that allows you to use native images in your Flutter app. Native images are images that are stored in the native memory of the device, rather than in the Flutter engine's memory. This can be useful for a number of reasons, such as:

*   Reducing memory usage: By storing images in native memory, you can reduce the amount of memory used by the Flutter engine.
*   Improving performance: Native images can be accessed more quickly than images stored in the Flutter engine's memory.
*   Supporting large images: Native images can be used to display large images that would otherwise exceed the Flutter engine's memory limits.

When to Use
------------

You should use the `native_image` package when you need to display large images or reduce memory usage in your Flutter app.

Features
--------

The `native_image` package has the following features:

*   Support for displaying native images
*   Support for converting between native images and Flutter images
*   Support for caching native images

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup
------

To use the `native_image` package, you need to add it to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  native_image: ^1.0.0
```

Then, run `flutter pub get` to install the package.

Android Configuration
--------------------

To use the `native_image` package on Android, you need to add the following configuration to your `AndroidManifest.xml` file:

```xml
<application
    ...
    android:hardwareAccelerated="true"
    ...
>
```

iOS Configuration
-----------------

To use the `native_image` package on iOS, you need to add the following configuration to your `Info.plist` file:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

Usage
-----

To use the `native_image` package, you need to import it in your Dart file:

```dart
import 'package:native_image/native_image.dart';
```

Then, you can use the `NativeImage` class to display native images:

```dart
NativeImage(
  image: Image.asset('assets/image.png'),
  width: 100,
  height: 100,
)
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:native_image/native_image.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Native Image Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  Widget build(BuildContext context) {
    // Create a native image from an asset image
    NativeImage nativeImage = NativeImage(
      image: Image.asset('assets/image.png'),
      width: 100,
      height: 100,
    );

    // Display the native image
    return Scaffold(
      appBar: AppBar(
        title: Text('Native Image Demo'),
      ),
      body: Center(
        child: nativeImage,
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app.
// 2. The app displays a native image on the screen.
// 3. The native image is created from an asset image using the NativeImage class.
// 4. The native image is displayed on the screen using the Scaffold widget.
// 5. The user can view the native image on the screen.

// Summary: This code demonstrates how to use the native_image package to display native images in a Flutter app.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->
# Flutter Gallery 3D Package Overview
=====================================

The `flutter_gallery_3d` package is a powerful tool for creating interactive 3D galleries in Flutter applications. It provides a simple and intuitive API for displaying 3D models, images, and videos in a variety of formats.

### Key Features

* Support for 3D models in OBJ, STL, and GLTF formats
* Image and video support
* Interactive camera controls
* Customizable lighting and materials
* Platform-specific optimizations for Android and iOS

### When to Use

The `flutter_gallery_3d` package is ideal for applications that require interactive 3D content, such as:

* E-commerce apps with 3D product models
* Educational apps with interactive 3D simulations
* Gaming apps with 3D environments and characters
* Architectural visualization apps with 3D building models

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->
# Setting Up and Using the Package
=====================================

### Step 1: Add the Package to Your Project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_gallery_3d: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:flutter_gallery_3d/flutter_gallery_3d.dart';
```
### Step 3: Create a 3D Gallery

Create a `RealFlutter` widget and add a `Gallery3D` child:
```dart
class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Gallery3D(
        // Add 3D models, images, or videos here
        children: [
          // Example: a 3D model
          Model3D(
            src: 'assets/model.obj',
            scale: 1.0,
          ),
        ],
      ),
    );
  }
}
```
### Platform-Specific Details

* Android: Make sure to add the `android.permission.READ_EXTERNAL_STORAGE` permission to your `AndroidManifest.xml` file.
* iOS: Add the `NSPhotoLibraryUsageDescription` key to your `Info.plist` file.

### Optimizations

* Use the ` cache` property to enable caching of 3D models and images.
* Use the `lazyLoad` property to enable lazy loading of 3D models and images.

<-- END_TUTORIAL -->

<-- START_MAIN -->
```dart
import 'package:flutter/material.dart';
import 'package:flutter_gallery_3d/flutter_gallery_3d.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Gallery 3D Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Create a 3D gallery with a single 3D model
    return Scaffold(
      body: Gallery3D(
        children: [
          // Add a 3D model
          Model3D(
            src: 'assets/model.obj',
            scale: 1.0,
          ),
          // Add an image
          Image3D(
            src: 'assets/image.jpg',
            scale: 1.0,
          ),
          // Add a video
          Video3D(
            src: 'assets/video.mp4',
            scale: 1.0,
          ),
        ],
      ),
    );
  }
}

// Application flow:
// 1. The user runs the app and is presented with a 3D gallery.
// 2. The gallery contains a single 3D model, an image, and a video.
// 3. The user can interact with the 3D model by rotating, scaling, and translating it.
// 4. The user can view the image and video by clicking on them.
// 5. The app uses caching and lazy loading to optimize performance.
```
// Summary: This code creates a 3D gallery with a single 3D model, an image, and a video. The user can interact with the 3D model and view the image and video. The app uses caching and lazy loading to optimize performance.
<-- END_MAIN -->
<-- START_DESCRIPTION -->

**Introduction to Spritewidget**
==============================

Spritewidget is a Flutter package that allows you to create complex, high-performance graphics and animations. It provides a powerful and flexible API for creating custom graphics, animations, and interactions.

**When to Use Spritewidget**
---------------------------

Spritewidget is ideal for creating:

* Complex graphics and animations
* Custom UI components
* Games
* Interactive stories
* Simulations

**Key Features**
----------------

* High-performance rendering
* Support for complex graphics and animations
* Customizable and extensible architecture
* Easy integration with Flutter widgets

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setting Up Spritewidget**
---------------------------

To use Spritewidget, you need to add it to your Flutter project. Here's how:

1. Add the following dependency to your `pubspec.yaml` file:
```yml
dependencies:
  spritewidget: ^1.0.0
```
2. Run `flutter pub get` to install the package.

**Platform-Specific Details**
-----------------------------

Spritewidget works on both Android and iOS platforms. However, there are some platform-specific details to keep in mind:

* On Android, Spritewidget uses the `android.graphics` package to render graphics.
* On iOS, Spritewidget uses the `CoreGraphics` framework to render graphics.

**Configurations and Optimizations**
------------------------------------

To get the best performance out of Spritewidget, you can configure the following settings:

* `SpriteWidget.renderMode`: This setting determines how Spritewidget renders graphics. You can choose between `RenderMode.software` and `RenderMode.hardware`.
* `SpriteWidget.cacheSize`: This setting determines the size of the cache used by Spritewidget to store graphics.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:spritewidget/spritewidget.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Spritewidget Demo',
      home: SpritewidgetDemo(),
    );
  }
}

class SpritewidgetDemo extends StatefulWidget {
  @override
  _SpritewidgetDemoState createState() => _SpritewidgetDemoState();
}

class _SpritewidgetDemoState extends State<SpritewidgetDemo> {
  late SpriteWidget _spriteWidget;

  @override
  void initState() {
    super.initState();
    _spriteWidget = SpriteWidget();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Spritewidget Demo'),
      ),
      body: Center(
        child: _spriteWidget,
      ),
    );
  }
}

class SpriteWidget extends StatefulWidget {
  @override
  _SpriteWidgetState createState() => _SpriteWidgetState();
}

class _SpriteWidgetState extends State<SpriteWidget> {
  late NodeWithSize _rootNode;

  @override
  void initState() {
    super.initState();
    _rootNode = NodeWithSize(const Size(200, 200));
  }

  @override
  Widget build(BuildContext context) {
    return SpriteBox(
      rootNode: _rootNode,
      renderMode: RenderMode.software,
    );
  }
}
```

// This is the main entry point of the application.
// The `RealFlutter` class is the root widget of the application.
// It builds a `MaterialApp` widget with a `SpritewidgetDemo` widget as its home.

// The `SpritewidgetDemo` class is a stateful widget that demonstrates the use of Spritewidget.
// It creates a `SpriteWidget` instance and displays it in the center of the screen.

// The `SpriteWidget` class is a stateful widget that creates a Spritewidget node hierarchy.
// It creates a `NodeWithSize` instance as the root node of the hierarchy.
// It then creates a `SpriteBox` widget to render the node hierarchy.

// The `SpriteBox` widget is a built-in widget provided by Spritewidget.
// It takes a `NodeWithSize` instance as its root node and renders it using the specified render mode.

// In this example, we use the `RenderMode.software` render mode to render the node hierarchy.
// This means that Spritewidget will use software rendering to render the graphics.

// The node hierarchy is created using the `NodeWithSize` class.
// This class represents a node in the node hierarchy with a specified size.

// In this example, we create a single node with a size of 200x200 pixels.
// We then pass this node to the `SpriteBox` widget to render it.

// When the application runs, it will display a window with a 200x200 pixel graphics rendered by Spritewidget.

<-- END_MAIN -->
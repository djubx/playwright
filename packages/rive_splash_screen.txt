<-- START_DESCRIPTION -->

# Rive Splash Screen Flutter Package
=====================================

The `rive_splash_screen` Flutter package is a powerful tool for creating engaging and interactive splash screens for your mobile applications. With this package, you can easily create custom splash screens that showcase your brand's identity and captivate your users' attention.

### When to Use This Package

You can use this package in various scenarios, such as:

* Creating a custom splash screen for your mobile application
* Displaying a loading animation or progress bar during app initialization
* Showcasing your brand's logo or identity
* Providing a seamless user experience during app startup

### Key Features

* Customizable splash screen with support for images, animations, and text
* Support for Android and iOS platforms
* Easy integration with existing Flutter projects
* Highly customizable and extensible

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Rive Splash Screen Package
=============================================

To use the `rive_splash_screen` package in your Flutter project, follow these steps:

### Step 1: Add the Package to Your `pubspec.yaml` File

```yml
dependencies:
  flutter:
    sdk: flutter
  rive_splash_screen: ^1.0.0
```

### Step 2: Import the Package in Your Dart File

```dart
import 'package:flutter/material.dart';
import 'package:rive_splash_screen/rive_splash_screen.dart';
```

### Step 3: Create a Custom Splash Screen

```dart
class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    return SplashScreen(
      title: Text('Real Flutter'),
      image: Image.asset('assets/logo.png'),
      backgroundColor: Colors.white,
      styleTextUnderTheLoader: TextStyle(),
      photoSize: 100.0,
      onClick: () => print('Flutter'),
      loaderColor: Colors.red,
    );
  }
}
```

### Platform-Specific Details

* For Android, make sure to add the `android:windowBackground` attribute to your `styles.xml` file to set the background color of the splash screen.
* For iOS, add the `UILaunchStoryboardName` key to your `Info.plist` file to specify the name of the launch storyboard.

### Required Configurations and Optimizations

* Make sure to optimize your image assets for various screen densities and resolutions.
* Use a consistent branding strategy throughout your app, including the splash screen.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:rive_splash_screen/rive_splash_screen.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Real Flutter',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    // Create a custom splash screen with a title, image, and background color
    return SplashScreen(
      title: Text('Real Flutter'), // Set the title of the splash screen
      image: Image.asset('assets/logo.png'), // Set the image of the splash screen
      backgroundColor: Colors.white, // Set the background color of the splash screen
      styleTextUnderTheLoader: TextStyle(), // Set the text style under the loader
      photoSize: 100.0, // Set the size of the image
      onClick: () => print('Flutter'), // Set the onClick event handler
      loaderColor: Colors.red, // Set the color of the loader
    );
  }
}

// The application flow is as follows:
// 1. The user launches the app, and the splash screen is displayed.
// 2. The splash screen displays the title, image, and background color.
// 3. The user can click on the splash screen to trigger the onClick event handler.
// 4. After a short delay, the splash screen disappears, and the main app screen is displayed.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Animated Flip Widget Package
================================

The `animated_flip_widget` package is a Flutter library that provides a simple and easy-to-use widget for creating animated flip effects. It allows you to create a flip animation between two widgets, making it perfect for creating interactive and engaging user interfaces.

## When to Use
--------------

This package is ideal for creating interactive elements such as:

* Flip cards
* Animated buttons
* Interactive icons

## Features
------------

* Easy-to-use API
* Customizable animation duration and curve
* Support for both horizontal and vertical flip animations

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

## Setup
--------

To use the `animated_flip_widget` package, add it to your `pubspec.yaml` file:

```yml
dependencies:
  animated_flip_widget: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Basic Usage
-------------

To use the `AnimatedFlipWidget`, simply wrap two widgets with the `AnimatedFlipWidget`:

```dart
AnimatedFlipWidget(
  front: Container(
    child: Text('Front'),
  ),
  back: Container(
    child: Text('Back'),
  ),
)
```

## Customization
--------------

You can customize the animation duration and curve using the `duration` and `curve` properties:

```dart
AnimatedFlipWidget(
  front: Container(
    child: Text('Front'),
  ),
  back: Container(
    child: Text('Back'),
  ),
  duration: Duration(milliseconds: 500),
  curve: Curves.easeInOut,
)
```

## Platform-Specific Details
---------------------------

The `animated_flip_widget` package works on both Android and iOS platforms. However, on Android, you may need to add the following line to your `AndroidManifest.xml` file to enable hardware acceleration:

```xml
<application android:hardwareAccelerated="true">
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:animated_flip_widget/animated_flip_widget.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Animated Flip Widget Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  bool _isFlipped = false;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Animated Flip Widget Demo'),
      ),
      body: Center(
        child: AnimatedFlipWidget(
          front: Container(
            width: 200,
            height: 200,
            color: Colors.red,
            child: Center(
              child: Text(
                'Front',
                style: TextStyle(fontSize: 24),
              ),
            ),
          ),
          back: Container(
            width: 200,
            height: 200,
            color: Colors.blue,
            child: Center(
              child: Text(
                'Back',
                style: TextStyle(fontSize: 24),
              ),
            ),
          ),
          isFlipped: _isFlipped,
          duration: Duration(milliseconds: 500),
          curve: Curves.easeInOut,
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          setState(() {
            _isFlipped = !_isFlipped;
          });
        },
        tooltip: 'Flip',
        child: Icon(Icons.flip),
      ),
    );
  }
}

// The app starts by creating a Material app with a home page.
// The home page is a stateful widget that contains an AnimatedFlipWidget.
// The AnimatedFlipWidget is initialized with two containers, one for the front and one for the back.
// The isFlipped property is used to control the state of the flip animation.
// When the floating action button is pressed, the isFlipped property is toggled, causing the AnimatedFlipWidget to flip.
// The duration and curve properties are used to customize the animation.
```

// The app flow is as follows:
// 1. The user presses the floating action button.
// 2. The isFlipped property is toggled, causing the AnimatedFlipWidget to flip.
// 3. The AnimatedFlipWidget animates the flip effect over a duration of 500 milliseconds.
// 4. The curve property is used to ease in and out of the animation, creating a smooth effect.
// 5. Once the animation is complete, the AnimatedFlipWidget displays the new state (either the front or the back).

<-- END_MAIN -->
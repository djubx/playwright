<-- START_DESCRIPTION -->

# Keyboard Attachable Package in Flutter
=====================================

The `keyboard_attachable` package in Flutter is a utility package that allows you to attach and detach a widget to and from the keyboard. This package is useful when you want to create a floating action button or a bottom navigation bar that needs to be visible even when the keyboard is open.

### Features

*   Attach and detach a widget to and from the keyboard
*   Supports both Android and iOS platforms
*   Customizable attachment and detachment animations

### When to Use

You can use this package when you want to create a widget that needs to be visible even when the keyboard is open. For example, you can use it to create a floating action button or a bottom navigation bar that needs to be visible even when the user is typing something.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Using the Keyboard Attachable Package
=============================================

In this tutorial, we will learn how to use the `keyboard_attachable` package in Flutter.

### Step 1: Add the Package to Your Project

First, you need to add the `keyboard_attachable` package to your project. You can do this by adding the following line to your `pubspec.yaml` file:

```yml
dependencies:
  keyboard_attachable: ^1.0.0
```

Then, run the following command in your terminal to get the package:

```bash
flutter pub get
```

### Step 2: Import the Package

Next, you need to import the package in your Dart file. You can do this by adding the following line at the top of your file:

```dart
import 'package:keyboard_attachable/keyboard_attachable.dart';
```

### Step 3: Create a Keyboard Attachable Widget

Now, you can create a keyboard attachable widget by using the `KeyboardAttachable` class. Here is an example:

```dart
KeyboardAttachable(
  child: FloatingActionButton(
    onPressed: () {},
    child: Icon(Icons.add),
  ),
)
```

In this example, we are creating a floating action button that will be attached to the keyboard.

### Platform-Specific Details

The `keyboard_attachable` package works on both Android and iOS platforms. However, there are some platform-specific details that you need to know:

*   On Android, the package uses the `WindowInsets` class to get the keyboard height. This means that the package will only work on Android devices that have a software keyboard.
*   On iOS, the package uses the `UIKeyboard` class to get the keyboard height. This means that the package will only work on iOS devices that have a software keyboard.

### Required Configurations or Optimizations

There are no required configurations or optimizations that you need to do to use the `keyboard_attachable` package. However, you can customize the attachment and detachment animations by using the `animationDuration` property.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:keyboard_attachable/keyboard_attachable.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Keyboard Attachable Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _textController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Keyboard Attachable Demo'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            TextField(
              controller: _textController,
              decoration: InputDecoration(
                labelText: 'Type something',
                border: OutlineInputBorder(),
              ),
            ),
            SizedBox(height: 16),
            KeyboardAttachable(
              child: FloatingActionButton(
                onPressed: () {},
                child: Icon(Icons.add),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// The app starts by running the main function, which creates a new instance of the MyApp widget.
// The MyApp widget is a stateless widget that returns a MaterialApp widget.
// The MaterialApp widget is the top-level widget for the app, and it provides a basic material design visual layout structure.
// The home property of the MaterialApp widget is set to the MyHomePage widget, which is the main page of the app.
// The MyHomePage widget is a stateful widget that returns a Scaffold widget.
// The Scaffold widget provides a basic material design visual layout structure, and it is used to create the app's UI.
// The body property of the Scaffold widget is set to a Padding widget, which is used to add some padding to the app's UI.
// The Padding widget contains a Column widget, which is used to arrange the app's UI elements vertically.
// The Column widget contains a TextField widget, which is used to get user input.
// The TextField widget is followed by a SizedBox widget, which is used to add some space between the TextField widget and the KeyboardAttachable widget.
// The KeyboardAttachable widget is used to attach the FloatingActionButton widget to the keyboard.
// When the keyboard is opened, the FloatingActionButton widget will be moved up to the top of the keyboard.
```

<-- END_MAIN -->
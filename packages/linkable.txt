<-- START_DESCRIPTION -->

# Linkable Flutter Package: A Deep Dive
=====================================

The Linkable Flutter package is a powerful tool for creating and managing links within your Flutter applications. It provides a simple and efficient way to handle links, allowing you to focus on building your app's core functionality.

### When to Use Linkable

The Linkable package is perfect for apps that require link handling, such as:

* Social media apps with link sharing
* News apps with article links
* E-commerce apps with product links

### Features

The Linkable package offers the following features:

* Link creation and management
* Link handling (e.g., opening links in-app or in a browser)
* Customizable link behavior

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up Linkable
-------------------

To use the Linkable package, follow these steps:

### Step 1: Add the Package to Your Pubspec

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  linkable: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

In your Dart file, import the Linkable package:
```dart
import 'package:linkable/linkable.dart';
```
### Step 3: Configure Linkable (Optional)

You can customize Linkable's behavior by creating a `LinkableConfig` instance:
```dart
LinkableConfig config = LinkableConfig(
  // Open links in-app by default
  openInApp: true,
);
```
### Platform-Specific Details

#### Android

To handle links on Android, you need to add the following intent filter to your `AndroidManifest.xml` file:
```xml
<intent-filter>
  <action android:name="android.intent.action.VIEW" />
  <category android:name="android.intent.category.DEFAULT" />
  <category android:name="android.intent.category.BROWSABLE" />
  <data android:scheme="https" android:host="your-app-id" />
</intent-filter>
```
Replace `your-app-id` with your app's ID.

#### iOS

To handle links on iOS, you need to add the following code to your `Info.plist` file:
```xml
<key>CFBundleURLTypes</key>
<array>
  <dict>
    <key>CFBundleURLSchemes</key>
    <array>
      <string>https</string>
    </array>
    <key>CFBundleURLName</key>
    <string>your-app-id</string>
  </dict>
</array>
```
Replace `your-app-id` with your app's ID.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:linkable/linkable.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Create a Linkable instance
  Linkable _linkable = Linkable();

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Linkable Demo',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Linkable Demo'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              // Create a link
              LinkableText(
                'https://www.example.com',
                onPressed: (link) {
                  // Handle link press
                  print('Link pressed: $link');
                },
              ),
              SizedBox(height: 20),
              // Create a link with custom text
              LinkableText(
                'Custom Link',
                link: 'https://www.example.com',
                onPressed: (link) {
                  // Handle link press
                  print('Link pressed: $link');
                },
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Explain the flow of the application
// 
// 1. The user runs the app and is presented with a screen containing two links.
// 2. When the user presses a link, the `onPressed` callback is called with the link URL.
// 3. The `onPressed` callback handles the link press, in this case, printing the link URL to the console.
// 4. The Linkable package handles the link press and opens the link in-app or in a browser, depending on the configuration.
// 
// Summary: The Linkable package provides a simple and efficient way to handle links within a Flutter application. It allows developers to create links with custom text and handle link presses with a callback. The package also provides a way to configure the link behavior, such as opening links in-app or in a browser.
```

<-- END_MAIN -->
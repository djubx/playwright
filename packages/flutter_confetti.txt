```markdown
<-- START_DESCRIPTION -->

# Flutter Confetti Package Overview

The `flutter_confetti` package is a delightful addition to any Flutter application, providing a simple yet effective way to add confetti animations. This package is perfect for enhancing user experience during celebratory moments, such as completing a task, winning a game, or reaching a milestone. 

## Features

- **Customizable Confetti**: Adjust the colors, shapes, and sizes of the confetti particles to match your app's theme.
- **Directional Control**: Launch confetti in any direction, allowing for creative animations.
- **Multiple Particle Types**: Choose from various particle shapes, including circles, squares, and custom widgets.
- **Ease of Use**: Simple API that integrates seamlessly with existing Flutter widgets.

## When to Use

- **Celebrations**: Highlight achievements or milestones within your app.
- **User Engagement**: Increase user interaction by adding visual feedback.
- **Gamification**: Enhance gaming experiences with celebratory animations.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Flutter Confetti Package

In this tutorial, we'll walk through the process of setting up and using the `flutter_confetti` package in a Flutter application. We'll cover platform-specific configurations for both Android and iOS to ensure smooth operation.

## Installation

1. **Add Dependency**: Open your `pubspec.yaml` file and add the `flutter_confetti` package.

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     flutter_confetti: ^0.6.0
   ```

2. **Install Packages**: Run `flutter pub get` to install the new package.

## Basic Setup

1. **Import the Package**: In your Dart file, import the `flutter_confetti` package.

   ```dart
   import 'package:flutter_confetti/flutter_confetti.dart';
   ```

2. **Initialize ConfettiController**: Create a `ConfettiController` to manage the confetti animation.

   ```dart
   final ConfettiController _controller = ConfettiController(duration: const Duration(seconds: 10));
   ```

3. **Platform-Specific Configuration**:

   - **Android**: Ensure your `minSdkVersion` in `android/app/build.gradle` is set to at least 21.
   - **iOS**: No additional configuration is required.

## Using the Package

1. **Create a Confetti Widget**: Use the `ConfettiWidget` to display confetti in your app.

   ```dart
   ConfettiWidget(
     confettiController: _controller,
     blastDirectionality: BlastDirectionality.explosive, // radial value - LEFT, RIGHT, UP, DOWN
     shouldLoop: true, // start again as soon as the animation is finished
     colors: const [Colors.green, Colors.blue, Colors.pink, Colors.orange, Colors.purple], // manually specify the colors to be used
   )
   ```

2. **Start the Animation**: Trigger the confetti animation by calling `_controller.play()`.

3. **Stop the Animation**: Use `_controller.stop()` to halt the confetti.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_confetti/flutter_confetti.dart';

void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Confetti Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: ConfettiDemo(),
    );
  }
}

class ConfettiDemo extends StatefulWidget {
  @override
  _ConfettiDemoState createState() => _ConfettiDemoState();
}

class _ConfettiDemoState extends State<ConfettiDemo> {
  late ConfettiController _controller;

  @override
  void initState() {
    super.initState();
    // Initialize the ConfettiController with a duration of 10 seconds
    _controller = ConfettiController(duration: const Duration(seconds: 10));
  }

  @override
  void dispose() {
    // Dispose of the controller when the widget is removed from the widget tree
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Confetti Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            // ConfettiWidget is used to display the confetti animation
            ConfettiWidget(
              confettiController: _controller,
              blastDirectionality: BlastDirectionality.explosive,
              shouldLoop: true,
              colors: const [Colors.green, Colors.blue, Colors.pink, Colors.orange, Colors.purple],
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                // Start the confetti animation when the button is pressed
                _controller.play();
              },
              child: Text('Celebrate!'),
            ),
            ElevatedButton(
              onPressed: () {
                // Stop the confetti animation when the button is pressed
                _controller.stop();
              },
              child: Text('Stop'),
            ),
          ],
        ),
      ),
    );
  }
}

// Application Flow:
// 1. The app initializes and displays a simple UI with two buttons and a confetti widget.
// 2. The ConfettiController is initialized in the initState method with a 10-second duration.
// 3. When the "Celebrate!" button is pressed, the confetti animation starts by calling _controller.play().
// 4. The confetti animation continues to loop until the "Stop" button is pressed, which calls _controller.stop().
// 5. The ConfettiWidget is responsible for rendering the confetti particles on the screen.
// 6. The app ensures proper resource management by disposing of the ConfettiController in the dispose method.
```

<-- END_MAIN -->
```
<-- START_DESCRIPTION -->

# Yandex MapKit Lite Flutter Package
=====================================

The `yandex_mapkit_lite` Flutter package is a lightweight version of the Yandex MapKit SDK, designed for creating map-based applications. It provides a simplified API for displaying maps, adding markers, and handling user interactions.

### When to Use

This package is ideal for applications that require a simple map view with basic functionality, such as:

* Displaying a map with a specific location
* Adding markers or points of interest
* Handling basic user interactions (e.g., tap, zoom)

### Features

* Display maps with various layers (e.g., satellite, hybrid)
* Add markers with custom icons and information
* Handle user interactions (e.g., tap, zoom, pan)
* Support for both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
================

### Step 1: Add the Package to Your Project

Add the `yandex_mapkit_lite` package to your `pubspec.yaml` file:
```yml
dependencies:
  yandex_mapkit_lite: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:yandex_mapkit_lite/yandex_mapkit_lite.dart';
```
### Step 3: Create a Map View

Create a `YandexMap` widget and add it to your app's UI:
```dart
YandexMap(
  onMapCreated: (YandexMapController controller) {
    // Handle map creation
  },
)
```
### Platform-Specific Details

#### Android

Add the following permissions to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.INTERNET" />
<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
```
#### iOS

Add the following lines to your `Info.plist` file:
```xml
<key>NSLocationWhenInUseUsageDescription</key>
<string>This app needs access to location services</string>
<key>NSLocationAlwaysUsageDescription</key>
<string>This app needs access to location services</string>
```
### Optimizations

To improve performance, consider the following:

* Use a smaller map size to reduce memory usage
* Limit the number of markers and other map objects
* Use caching to reduce the number of network requests

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:yandex_mapkit_lite/yandex_mapkit_lite.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  YandexMapController _mapController;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Yandex MapKit Lite Example'),
      ),
      body: YandexMap(
        onMapCreated: (YandexMapController controller) {
          // Handle map creation
          _mapController = controller;
          _mapController.move(
            point: Point(
              latitude: 55.7558,
              longitude: 37.6173,
            ),
            zoom: 12,
            animation: MapAnimation(
              type: MapAnimationType.smooth,
              duration: 1.0,
            ),
          );
        },
        onMapTap: (Point point) {
          // Handle map tap
          print('Map tap: ${point.latitude}, ${point.longitude}');
        },
        onMapLongTap: (Point point) {
          // Handle map long tap
          print('Map long tap: ${point.latitude}, ${point.longitude}');
        },
        markers: [
          Placemark(
            point: Point(
              latitude: 55.7558,
              longitude: 37.6173,
            ),
            icon: PlacemarkIcon(
              image: BitmapDescriptor.fromAsset('assets/marker.png'),
              scale: 0.5,
            ),
          ),
        ],
      ),
    );
  }
}

// Application flow:
// 1. The app creates a YandexMap widget and adds it to the UI.
// 2. When the map is created, the app moves the map to a specific location and zoom level.
// 3. When the user taps on the map, the app prints the coordinates of the tap location.
// 4. When the user long taps on the map, the app prints the coordinates of the long tap location.
// 5. The app displays a marker at a specific location on the map.

// Summary:
// This code creates a simple map-based application using the Yandex MapKit Lite Flutter package.
// It displays a map, adds a marker, and handles user interactions such as tap and long tap.
```

<-- END_MAIN -->
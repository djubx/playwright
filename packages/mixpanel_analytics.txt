<-- START_DESCRIPTION -->

Mixpanel Analytics for Flutter
==============================

The `mixpanel_analytics` package is a powerful analytics tool for Flutter applications. It allows you to track user behavior, analyze retention, and measure the effectiveness of your marketing campaigns. With Mixpanel, you can gain a deeper understanding of your users and make data-driven decisions to improve your app.

When to Use Mixpanel Analytics
-----------------------------

* You want to track user behavior and analyze retention
* You need to measure the effectiveness of your marketing campaigns
* You want to gain a deeper understanding of your users and make data-driven decisions

Features
--------

* Track events and properties
* Analyze retention and funnels
* Measure the effectiveness of marketing campaigns
* Create custom dashboards and reports

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setting Up Mixpanel Analytics
-----------------------------

### Step 1: Add the Mixpanel Analytics Package

Add the `mixpanel_analytics` package to your `pubspec.yaml` file:
```yml
dependencies:
  mixpanel_analytics: ^1.0.0
```
### Step 2: Initialize Mixpanel Analytics

Initialize Mixpanel Analytics in your `main` function:
```dart
import 'package:mixpanel_analytics/mixpanel_analytics.dart';

void main() {
  MixpanelAnalytics.init(
    token: 'YOUR_MIXPANEL_TOKEN',
    trackAutomaticEvents: true,
  );
  runApp(MyApp());
}
```
### Step 3: Track Events

Track events using the `track` method:
```dart
MixpanelAnalytics.track('Button Clicked');
```
### Step 4: Set Properties

Set properties using the `set` method:
```dart
MixpanelAnalytics.set('User Name', 'John Doe');
```
### Platform-Specific Details

#### Android

* Add the following code to your `AndroidManifest.xml` file:
```xml
<application>
  ...
  <meta-data
    android:name="com.mixpanel.android.MPConfig.EnableDebugLogging"
    android:value="true" />
</application>
```
#### iOS

* Add the following code to your `Info.plist` file:
```xml
<key>Mixpanel</key>
<dict>
  <key>EnableDebugLogging</key>
  <true/>
</dict>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:mixpanel_analytics/mixpanel_analytics.dart';

void main() {
  MixpanelAnalytics.init(
    token: 'YOUR_MIXPANEL_TOKEN',
    trackAutomaticEvents: true,
  );
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Mixpanel Analytics Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              ElevatedButton(
                onPressed: () {
                  // Track an event
                  MixpanelAnalytics.track('Button Clicked');
                },
                child: Text('Click Me'),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  // Set a property
                  MixpanelAnalytics.set('User Name', 'John Doe');
                },
                child: Text('Set Property'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Application flow:
// 1. The app initializes Mixpanel Analytics with a token and enables automatic event tracking.
// 2. The user clicks the "Click Me" button, which tracks an event using the `track` method.
// 3. The user clicks the "Set Property" button, which sets a property using the `set` method.
// 4. Mixpanel Analytics sends the tracked events and properties to the Mixpanel server.
// 5. The app can then use the Mixpanel dashboard to analyze the tracked events and properties.

// Summary:
// This example demonstrates how to use the `mixpanel_analytics` package to track events and set properties in a Flutter app.
// The app initializes Mixpanel Analytics, tracks an event, sets a property, and sends the data to the Mixpanel server.
```

<-- END_MAIN -->
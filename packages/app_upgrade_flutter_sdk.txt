<-- START_DESCRIPTION -->

**app_upgrade_flutter_sdk** Package Overview
=============================================

The `app_upgrade_flutter_sdk` package is a powerful tool for Flutter developers to manage in-app updates and upgrades. It provides a simple and efficient way to notify users of new updates and guide them through the installation process.

### When to Use This Package

This package is ideal for apps that require frequent updates, such as:

* Games with regular content updates
* Social media apps with new feature releases
* Productivity apps with bug fixes and performance enhancements

### Key Features

* Customizable update notifications
* In-app update installation
* Support for both Android and iOS platforms
* Easy integration with existing Flutter projects

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setup and Usage**
=====================

### Step 1: Add the Package to Your Project

Add the following dependency to your `pubspec.yaml` file:
```yml
dependencies:
  app_upgrade_flutter_sdk: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:app_upgrade_flutter_sdk/app_upgrade_flutter_sdk.dart';
```
### Step 3: Initialize the Package

Initialize the package in your app's `main` function:
```dart
void main() {
  runApp(MyApp());
  AppUpgradeFlutterSdk.initialize();
}
```
### Step 4: Configure Update Settings (Optional)

You can customize the update settings by creating an `AppUpgradeSettings` object:
```dart
AppUpgradeSettings settings = AppUpgradeSettings(
  updateInterval: Duration(days: 7),
  updateNotificationTitle: 'New Update Available!',
  updateNotificationMessage: 'Please update to the latest version.',
);
AppUpgradeFlutterSdk.configure(settings);
```
### Platform-Specific Details

#### Android

* Make sure to add the following permissions to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.INTERNET" />
<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
```
* If you're using Android 10 or later, you need to add the following attribute to your `AndroidManifest.xml` file:
```xml
<application
  ...
  android:requestLegacyExternalStorage="true"
>
```
#### iOS

* Make sure to add the following key to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```
### Example Usage

You can check for updates and display the update notification using the following code:
```dart
AppUpgradeFlutterSdk.checkForUpdate().then((updateAvailable) {
  if (updateAvailable) {
    AppUpgradeFlutterSdk.showUpdateNotification();
  }
});
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:app_upgrade_flutter_sdk/app_upgrade_flutter_sdk.dart';

void main() {
  runApp(MyApp());
  AppUpgradeFlutterSdk.initialize();
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'App Upgrade Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  void initState() {
    super.initState();
    // Check for updates when the app starts
    AppUpgradeFlutterSdk.checkForUpdate().then((updateAvailable) {
      if (updateAvailable) {
        // Show the update notification
        AppUpgradeFlutterSdk.showUpdateNotification();
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('App Upgrade Demo'),
      ),
      body: Center(
        child: Text('This is a demo app for the app_upgrade_flutter_sdk package.'),
      ),
    );
  }
}

// The app starts by initializing the AppUpgradeFlutterSdk package.
// Then, it checks for updates when the MyHomePage widget is initialized.
// If an update is available, it shows the update notification.
// The user can then click on the notification to download and install the update.
// The app will restart after the update is installed.
```

// The app flow is as follows:
// 1. The app starts and initializes the AppUpgradeFlutterSdk package.
// 2. The app checks for updates when the MyHomePage widget is initialized.
// 3. If an update is available, the app shows the update notification.
// 4. The user can then click on the notification to download and install the update.
// 5. The app will restart after the update is installed.

<-- END_MAIN -->
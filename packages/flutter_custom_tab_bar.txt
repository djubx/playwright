<-- START_DESCRIPTION -->

# Flutter Custom Tab Bar Package
=====================================

The `flutter_custom_tab_bar` package is a customizable tab bar for Flutter applications. It provides a flexible way to create tab bars with various styles and animations.

## When to Use
---------------

This package is useful when you want to create a custom tab bar that doesn't fit the standard material design tab bar. It's also useful when you want to add custom animations or styles to your tab bar.

## Features
------------

* Customizable tab bar styles
* Customizable tab bar animations
* Supports both horizontal and vertical tab bars
* Supports both fixed and flexible tab bar widths

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

## Setup
--------

To use the `flutter_custom_tab_bar` package, add it to your `pubspec.yaml` file:

```yml
dependencies:
  flutter_custom_tab_bar: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Basic Usage
-------------

To use the package, import it in your Dart file:

```dart
import 'package:flutter_custom_tab_bar/flutter_custom_tab_bar.dart';
```

Then, create a `CustomTabBar` widget:

```dart
CustomTabBar(
  tabs: [
    CustomTab(
      child: Text('Tab 1'),
    ),
    CustomTab(
      child: Text('Tab 2'),
    ),
  ],
)
```

## Customization
--------------

You can customize the tab bar style by using the `style` property:

```dart
CustomTabBar(
  style: CustomTabBarStyle(
    backgroundColor: Colors.blue,
    selectedColor: Colors.white,
  ),
  tabs: [
    CustomTab(
      child: Text('Tab 1'),
    ),
    CustomTab(
      child: Text('Tab 2'),
    ),
  ],
)
```

You can also customize the tab bar animation by using the `animation` property:

```dart
CustomTabBar(
  animation: CustomTabBarAnimation(
    duration: Duration(milliseconds: 500),
    curve: Curves.easeInOut,
  ),
  tabs: [
    CustomTab(
      child: Text('Tab 1'),
    ),
    CustomTab(
      child: Text('Tab 2'),
    ),
  ],
)
```

## Platform-Specific Details
---------------------------

### Android

On Android, you can use the `CustomTabBar` widget as is.

### iOS

On iOS, you need to wrap the `CustomTabBar` widget with a `SafeArea` widget to avoid the notch:

```dart
SafeArea(
  child: CustomTabBar(
    tabs: [
      CustomTab(
        child: Text('Tab 1'),
      ),
      CustomTab(
        child: Text('Tab 2'),
      ),
    ],
  ),
)
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_custom_tab_bar/flutter_custom_tab_bar.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  int _currentIndex = 0;

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        body: SafeArea(
          child: CustomTabBar(
            // Style the tab bar
            style: CustomTabBarStyle(
              backgroundColor: Colors.blue,
              selectedColor: Colors.white,
            ),
            // Animate the tab bar
            animation: CustomTabBarAnimation(
              duration: Duration(milliseconds: 500),
              curve: Curves.easeInOut,
            ),
            // Define the tabs
            tabs: [
              CustomTab(
                child: Text('Tab 1'),
              ),
              CustomTab(
                child: Text('Tab 2'),
              ),
            ],
            // Handle tab changes
            onTabChanged: (index) {
              setState(() {
                _currentIndex = index;
              });
            },
          ),
        ),
      ),
    );
  }
}

// The application flow:
// 1. The user runs the app.
// 2. The app displays the custom tab bar with two tabs.
// 3. The user taps on a tab.
// 4. The app animates the tab bar to the selected tab.
// 5. The app updates the current index state.
// 6. The app rebuilds the UI with the new current index.
```

// The code flows as follows:
// - The user interacts with the app by tapping on a tab.
// - The `onTabChanged` callback is called with the new index.
// - The state is updated with the new current index.
// - The UI is rebuilt with the new current index.

<-- END_MAIN -->
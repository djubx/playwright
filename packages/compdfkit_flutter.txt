<-- START_DESCRIPTION -->

# compdfkit_flutter Package Overview
The compdfkit_flutter package is a powerful tool for creating, editing, and manipulating PDF documents within Flutter applications. It provides a wide range of features, including text and image insertion, page management, and annotation support.

## When to Use
This package is ideal for applications that require PDF document creation, editing, or manipulation, such as:

* Document scanning and editing apps
* PDF annotation and markup tools
* Report generation and printing software
* E-book and digital publication platforms

## Key Features

* Create and edit PDF documents
* Insert text, images, and other media
* Manage pages, including addition, removal, and reordering
* Support for annotations, including text, highlight, and ink annotations
* Customizable font, color, and layout options

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
To use the compdfkit_flutter package, follow these steps:

1. Add the package to your pubspec.yaml file:
```yml
dependencies:
  compdfkit_flutter: ^1.0.0
```
2. Import the package in your Dart file:
```dart
import 'package:compdfkit_flutter/compdfkit_flutter.dart';
```
3. Initialize the PDFKit instance:
```dart
PDFKit pdfKit = PDFKit();
```
4. Create a new PDF document:
```dart
PDFDocument pdfDoc = pdfKit.createDocument();
```
5. Add pages, text, and images as needed:
```dart
pdfDoc.addPage(PDFPage(
  width: 800,
  height: 600,
  children: [
    PDFText(
      text: 'Hello, World!',
      fontSize: 24,
      fontColor: Colors.black,
    ),
    PDFImage(
      image: AssetImage('assets/image.png'),
      width: 200,
      height: 200,
    ),
  ],
));
```
6. Save the PDF document to a file:
```dart
pdfDoc.save('path/to/output.pdf');
```
### Platform-Specific Details

* Android: No additional configuration is required.
* iOS: Add the following line to your Info.plist file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```
### Optimizations

* Use the `PDFKitOptions` class to customize font, color, and layout options.
* Use the `PDFDocumentOptions` class to customize document settings, such as page size and orientation.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:compdfkit_flutter/compdfkit_flutter.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  PDFKit _pdfKit;
  PDFDocument _pdfDoc;

  @override
  void initState() {
    super.initState();
    _pdfKit = PDFKit();
    _pdfDoc = _pdfKit.createDocument();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('compdfkit_flutter Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            ElevatedButton(
              onPressed: _createPDF,
              child: Text('Create PDF'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _savePDF,
              child: Text('Save PDF'),
            ),
          ],
        ),
      ),
    );
  }

  void _createPDF() {
    // Create a new page
    PDFPage page = PDFPage(
      width: 800,
      height: 600,
      children: [
        // Add text
        PDFText(
          text: 'Hello, World!',
          fontSize: 24,
          fontColor: Colors.black,
        ),
        // Add image
        PDFImage(
          image: AssetImage('assets/image.png'),
          width: 200,
          height: 200,
        ),
      ],
    );

    // Add page to document
    _pdfDoc.addPage(page);
  }

  void _savePDF() {
    // Save document to file
    _pdfDoc.save('path/to/output.pdf');
  }
}

// Application flow:
// 1. Initialize PDFKit instance and create a new PDF document.
// 2. Create a new page and add text and image elements.
// 3. Add page to document.
// 4. Save document to file.
// Note: This example demonstrates the basic usage of the compdfkit_flutter package.
// In a real-world application, you would likely want to handle errors and exceptions,
// as well as customize the appearance and behavior of the PDF document.

```

<-- END_MAIN -->
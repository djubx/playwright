<-- START_DESCRIPTION -->

# Fast Color Picker Flutter Package
=====================================

The `fast_color_picker` Flutter package is a lightweight and efficient color picker library that allows users to select colors from a variety of palettes. It is designed to be highly customizable and easy to use, making it a great addition to any Flutter app that requires color selection.

### When to Use

The `fast_color_picker` package is perfect for apps that require users to select colors for various purposes, such as:

* Color schemes for designs or themes
* Background colors for images or text
* Accent colors for buttons or icons

### Features

* Highly customizable color palettes
* Support for RGB, HEX, and HSV color formats
* Optional color wheel for selecting colors
* Optional color slider for adjusting color brightness and saturation
* Support for Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Fast Color Picker Package
=============================================

To use the `fast_color_picker` package in your Flutter app, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  fast_color_picker: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:fast_color_picker/fast_color_picker.dart';
```
### Step 3: Create a Color Picker Instance

Create a `FastColorPicker` instance and pass it to a `Scaffold` or `MaterialApp`:
```dart
FastColorPicker colorPicker = FastColorPicker();

Scaffold(
  appBar: AppBar(
    title: Text('Color Picker Demo'),
  ),
  body: Center(
    child: colorPicker,
  ),
);
```
### Platform-Specific Details

* For Android, add the following line to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
```
* For iOS, add the following line to your `Info.plist` file:
```xml
<key>NSPhotoLibraryUsageDescription</key>
<string>This app needs access to your photo library to save colors.</string>
```
### Configurations and Optimizations

* To customize the color palette, pass a `ColorPalette` object to the `FastColorPicker` constructor:
```dart
ColorPalette palette = ColorPalette(
  colors: [
    Colors.red,
    Colors.blue,
    Colors.green,
  ],
);

FastColorPicker colorPicker = FastColorPicker(palette: palette);
```
* To enable the color wheel, set the `showColorWheel` property to `true`:
```dart
FastColorPicker colorPicker = FastColorPicker(showColorWheel: true);
```
* To enable the color slider, set the `showColorSlider` property to `true`:
```dart
FastColorPicker colorPicker = FastColorPicker(showColorSlider: true);
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:fast_color_picker/fast_color_picker.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  Color _selectedColor = Colors.white;

  @override
  Widget build(BuildContext context) {
    // Create a color palette with some sample colors
    ColorPalette palette = ColorPalette(
      colors: [
        Colors.red,
        Colors.blue,
        Colors.green,
      ],
    );

    // Create a FastColorPicker instance with the color palette
    FastColorPicker colorPicker = FastColorPicker(
      palette: palette,
      showColorWheel: true,
      showColorSlider: true,
    );

    // Create a Scaffold with the color picker
    return Scaffold(
      appBar: AppBar(
        title: Text('Color Picker Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            // Display the selected color
            Container(
              width: 100,
              height: 100,
              color: _selectedColor,
            ),
            // Add a button to open the color picker
            ElevatedButton(
              onPressed: () {
                // Open the color picker and get the selected color
                colorPicker.showColorPicker(
                  context,
                  (color) {
                    // Update the selected color
                    setState(() {
                      _selectedColor = color;
                    });
                  },
                );
              },
              child: Text('Pick a Color'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and sees a button to pick a color.
// 2. When the user clicks the button, the color picker is opened.
// 3. The user selects a color from the color palette or uses the color wheel/slider to adjust the color.
// 4. When the user confirms their selection, the selected color is updated and displayed on the screen.
// 5. The user can repeat the process to select a different color.

// This code demonstrates the basic usage of the FastColorPicker package, including creating a color palette, opening the color picker, and getting the selected color.

```

<-- END_MAIN -->
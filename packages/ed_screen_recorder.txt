Here's a detailed technical blog on the "ed_screen_recorder" Flutter package, structured as requested.

<!-- START_DESCRIPTION -->
# ed_screen_recorder Flutter Package

The `ed_screen_recorder` package is a powerful tool for Flutter developers looking to implement screen recording functionality in their applications. This package allows you to capture the screen and save it as a video file, making it ideal for applications that require tutorials, demonstrations, or any form of visual feedback.

## When to Use This Package
You might consider using the `ed_screen_recorder` package in scenarios such as:
- **Creating Tutorials**: Record the screen to create instructional videos for users.
- **Game Development**: Capture gameplay sessions for sharing or analysis.
- **User Feedback**: Allow users to record their screens to report bugs or issues.

## Features
- **Cross-Platform Support**: Works on both Android and iOS.
- **Customizable Settings**: Adjust video quality, frame rate, and more.
- **Easy Integration**: Simple API for quick setup and usage.
- **File Management**: Save recordings to the device's storage.

With these features, the `ed_screen_recorder` package provides a comprehensive solution for screen recording in Flutter applications.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using ed_screen_recorder

In this tutorial, we will walk through the setup process for the `ed_screen_recorder` package and demonstrate how to use it in a Flutter application.

## Step 1: Adding the Dependency
To get started, add the `ed_screen_recorder` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  ed_screen_recorder: ^latest_version
```

Make sure to replace `^latest_version` with the latest version of the package available on [pub.dev](https://pub.dev/packages/ed_screen_recorder).

## Step 2: Platform-Specific Configuration

### Android Configuration
1. Open your `AndroidManifest.xml` file located at `android/app/src/main/AndroidManifest.xml`.
2. Add the following permissions inside the `<manifest>` tag:

```xml
<uses-permission android:name="android.permission.RECORD_AUDIO"/>
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
```

3. Ensure that your `minSdkVersion` is set to at least 21 in `android/app/build.gradle`:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

### iOS Configuration
1. Open your `Info.plist` file located at `ios/Runner/Info.plist`.
2. Add the following keys to request permissions:

```xml
<key>NSMicrophoneUsageDescription</key>
<string>We need access to your microphone to record audio.</string>
<key>NSPhotoLibraryAddUsageDescription</key>
<string>We need access to save recordings to your photo library.</string>
```

## Step 3: Using the Package
Now that we have set up the package, let's see how to use it in your Flutter application.

1. Import the package in your Dart file:

```dart
import 'package:ed_screen_recorder/ed_screen_recorder.dart';
```

2. Initialize the screen recorder and start recording:

```dart
void startRecording() async {
  await EdScreenRecorder.startRecording();
}
```

3. Stop recording and save the video:

```dart
void stopRecording() async {
  String filePath = await EdScreenRecorder.stopRecording();
  print("Recording saved at: $filePath");
}
```

With these steps, you can easily integrate screen recording functionality into your Flutter application.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of ed_screen_recorder

Hereâ€™s a complete example of a Flutter application that demonstrates the use of the `ed_screen_recorder` package.

```dart
import 'package:flutter/material.dart';
import 'package:ed_screen_recorder/ed_screen_recorder.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Screen Recorder Demo',
      home: ScreenRecorderPage(),
    );
  }
}

class ScreenRecorderPage extends StatefulWidget {
  @override
  _ScreenRecorderPageState createState() => _ScreenRecorderPageState();
}

class _ScreenRecorderPageState extends State<ScreenRecorderPage> {
  bool isRecording = false; // Track recording state

  // Function to start recording
  void startRecording() async {
    await EdScreenRecorder.startRecording(); // Start the screen recording
    setState(() {
      isRecording = true; // Update the recording state
    });
  }

  // Function to stop recording
  void stopRecording() async {
    String filePath = await EdScreenRecorder.stopRecording(); // Stop the recording and get the file path
    setState(() {
      isRecording = false; // Update the recording state
    });
    print("Recording saved at: $filePath"); // Print the file path
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Screen Recorder Demo'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Start or stop recording based on the current state
            if (isRecording) {
              stopRecording(); // Stop recording if currently recording
            } else {
              startRecording(); // Start recording if not currently recording
            }
          },
          child: Text(isRecording ? 'Stop Recording' : 'Start Recording'), // Button text changes based on recording state
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the MyApp widget, which sets up the MaterialApp.
// 2. The ScreenRecorderPage widget is displayed, containing a button to start/stop recording.
// 3. When the button is pressed, it checks the current recording state.
// 4. If not recording, it calls startRecording() to begin capturing the screen.
// 5. If recording, it calls stopRecording() to stop the capture and save the video.
// 6. The file path of the saved recording is printed to the console.
```

<!-- END_MAIN -->

In this example, we created a simple Flutter application that allows users to start and stop screen recording with a button. The application flow is straightforward: it initializes the screen recorder, manages the recording state, and provides feedback through the UI. The comments within the code explain each step of the process, making it easy to understand how the `ed_screen_recorder` package works in practice.
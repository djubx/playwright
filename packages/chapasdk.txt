```markdown
<!-- START_DESCRIPTION -->
# Exploring the Chapasdk Flutter Package

The **chapasdk** Flutter package is a powerful tool designed to facilitate payment processing in Flutter applications. It provides a seamless integration with the Chapa payment gateway, allowing developers to implement payment functionalities with minimal effort. This package is particularly useful for applications targeting users in Ethiopia, where Chapa is a popular payment solution.

## When to Use Chapasdk
- **E-commerce Applications**: If you're building an online store that requires payment processing.
- **Service-Based Apps**: For apps that offer services and need to handle payments.
- **Subscription Models**: If your app operates on a subscription basis, this package can help manage recurring payments.

## Key Features
- **Easy Integration**: Simple setup process to get started with payment processing.
- **Support for Multiple Payment Methods**: Accepts various payment methods, including mobile money and card payments.
- **Real-time Payment Notifications**: Provides instant feedback on payment status.
- **User-Friendly Interface**: Offers a clean and intuitive UI for payment processing.

With these features, the chapasdk package is an excellent choice for developers looking to implement payment solutions in their Flutter applications.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Setting Up and Using Chapasdk

In this section, we will walk through the setup process for the chapasdk package and explain how to use it effectively in your Flutter application.

## Installation

To add the chapasdk package to your Flutter project, include it in your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  chapasdk: ^latest_version
```

Make sure to replace `latest_version` with the most recent version available on [pub.dev](https://pub.dev/packages/chapasdk).

## Platform-Specific Configuration

### Android
1. Open your `AndroidManifest.xml` file located at `android/app/src/main/AndroidManifest.xml`.
2. Add the following permissions inside the `<manifest>` tag:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
```

3. Ensure that your `minSdkVersion` is set to at least 21 in `android/app/build.gradle`:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

### iOS
1. Open your `Info.plist` file located at `ios/Runner/Info.plist`.
2. Add the following key to allow network requests:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

## Using the Package

To use the chapasdk package, you need to initialize it and create a payment request. Here’s a basic example of how to do this:

```dart
import 'package:flutter/material.dart';
import 'package:chapasdk/chapasdk.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Chapa Payment Example')),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              // Initialize the Chapa SDK
              ChapaSDK.initialize(
                publicKey: 'YOUR_PUBLIC_KEY',
                secretKey: 'YOUR_SECRET_KEY',
              );

              // Create a payment request
              ChapaSDK.createPayment(
                amount: 1000, // Amount in cents
                currency: 'ETB',
                email: 'customer@example.com',
                onSuccess: (response) {
                  // Handle successful payment
                  print('Payment successful: $response');
                },
                onError: (error) {
                  // Handle payment error
                  print('Payment error: $error');
                },
              );
            },
            child: Text('Pay Now'),
          ),
        ),
      ),
    );
  }
}
```

In this example, we initialize the Chapa SDK and create a payment request when the button is pressed. The payment amount is specified in cents, and we handle both success and error responses.

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of Chapasdk in Flutter

Here’s a fully functional Flutter main file that demonstrates the key features of the chapasdk package.

```dart
import 'package:flutter/material.dart';
import 'package:chapasdk/chapasdk.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Chapa Payment Example')),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              // Initialize the Chapa SDK with your credentials
              ChapaSDK.initialize(
                publicKey: 'YOUR_PUBLIC_KEY', // Replace with your public key
                secretKey: 'YOUR_SECRET_KEY', // Replace with your secret key
              );

              // Create a payment request
              ChapaSDK.createPayment(
                amount: 1000, // Amount in cents (10.00 ETB)
                currency: 'ETB', // Currency code
                email: 'customer@example.com', // Customer's email
                onSuccess: (response) {
                  // Handle successful payment
                  print('Payment successful: $response');
                  // You can navigate to a success page or show a success message
                },
                onError: (error) {
                  // Handle payment error
                  print('Payment error: $error');
                  // You can show an error message to the user
                },
              );
            },
            child: Text('Pay Now'), // Button to initiate payment
          ),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts and displays a button labeled "Pay Now".
// 2. When the button is pressed, the Chapa SDK is initialized with the provided public and secret keys.
// 3. A payment request is created with the specified amount, currency, and customer email.
// 4. If the payment is successful, the success callback is triggered, and the response is printed to the console.
// 5. If there is an error during the payment process, the error callback is triggered, and the error message is printed to the console.
// 6. You can enhance the app by adding navigation to success/error pages or displaying messages to the user based on the payment outcome.

```
<!-- END_MAIN -->
``` 

This structured approach provides a comprehensive overview of the chapasdk package, guiding developers through its features, setup, and practical usage in a Flutter application.
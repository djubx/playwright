# wx_avatar Flutter Package: A Comprehensive Guide

## <-- START_DESCRIPTION -->

### Overview of wx_avatar

The `wx_avatar` package is a Flutter library designed to simplify the creation and management of user avatars in applications. It provides a range of customizable options for displaying user images, initials, or placeholders, making it an excellent choice for social media apps, messaging platforms, or any application that requires user representation.

### When to Use wx_avatar

You should consider using `wx_avatar` when:
- You need to display user profiles with images or initials.
- You want to provide a consistent and customizable avatar design across your application.
- You require fallback options for when user images are not available.

### Key Features

- **Customizable Avatars**: Easily customize the appearance of avatars, including size, shape, and border.
- **Initials Support**: Automatically generate initials from user names when images are not available.
- **Placeholder Images**: Use default images as placeholders for users without profile pictures.
- **Network Image Support**: Load images from the network seamlessly.
- **Local Image Support**: Display images stored locally in the app.

## <-- END_DESCRIPTION -->

## <-- START_TUTORIAL -->

### Setup Process

To get started with the `wx_avatar` package, follow these steps:

1. **Add Dependency**: Open your `pubspec.yaml` file and add the `wx_avatar` package under dependencies:

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     wx_avatar: ^latest_version
   ```

   Replace `^latest_version` with the latest version available on [pub.dev](https://pub.dev/packages/wx_avatar).

2. **Install the Package**: Run the following command in your terminal to install the package:

   ```bash
   flutter pub get
   ```

3. **Platform-Specific Configuration**:
   - **Android**: Ensure that your `AndroidManifest.xml` file has the necessary permissions for internet access if you are loading images from the network.
   - **iOS**: For iOS, ensure that you have the correct permissions set in your `Info.plist` file if you are using network images.

### Basic Usage

To use the `wx_avatar` package, you can import it into your Dart file:

```dart
import 'package:wx_avatar/wx_avatar.dart';
```

You can then create an avatar widget as follows:

```dart
WxAvatar(
  imageUrl: 'https://example.com/user_image.png',
  initials: 'AB',
  size: 50.0,
  borderColor: Colors.blue,
  borderWidth: 2.0,
);
```

This code snippet creates an avatar that displays an image from a URL, with initials "AB", a size of 50 pixels, and a blue border.

## <-- END_TUTORIAL -->

## <-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:wx_avatar/wx_avatar.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'wx_avatar Example',
      home: Scaffold(
        appBar: AppBar(
          title: Text('wx_avatar Demo'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              // Displaying an avatar with a network image
              WxAvatar(
                imageUrl: 'https://example.com/user_image.png',
                initials: 'AB',
                size: 100.0, // Size of the avatar
                borderColor: Colors.blue, // Border color
                borderWidth: 3.0, // Border width
              ),
              SizedBox(height: 20), // Space between avatars
              // Displaying an avatar with initials only
              WxAvatar(
                initials: 'CD', // Initials to display
                size: 100.0, // Size of the avatar
                borderColor: Colors.green, // Border color
                borderWidth: 3.0, // Border width
              ),
              SizedBox(height: 20), // Space between avatars
              // Displaying an avatar with a local image
              WxAvatar(
                imageUrl: 'assets/images/local_image.png', // Local image path
                initials: 'EF', // Initials to display
                size: 100.0, // Size of the avatar
                borderColor: Colors.red, // Border color
                borderWidth: 3.0, // Border width
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application starts with the main function, which runs the RealFlutter widget.
// The RealFlutter widget builds a MaterialApp with a title and a home Scaffold.
// Inside the Scaffold, an AppBar is created with the title 'wx_avatar Demo'.
// The body of the Scaffold contains a Center widget that centers its child.
// A Column widget is used to arrange multiple WxAvatar widgets vertically.
// The first WxAvatar displays a network image with specified initials, size, and border.
// The second WxAvatar shows initials only, demonstrating the fallback option.
// The third WxAvatar displays a local image, showcasing the ability to use local assets.
// Each avatar is separated by a SizedBox for better spacing.
```

## <-- END_MAIN -->

### Summary of Application Flow

The application begins by running the `RealFlutter` widget, which sets up a basic Flutter app structure. The `MaterialApp` widget provides the necessary material design components, while the `Scaffold` widget creates a layout with an app bar and a body.

Inside the body, a `Center` widget is used to center the content, which is a `Column` containing three `WxAvatar` widgets. Each avatar demonstrates different features of the `wx_avatar` package:

1. The first avatar loads an image from a network URL and displays initials.
2. The second avatar shows only initials, serving as a fallback when no image is available.
3. The third avatar uses a local image asset, illustrating how to incorporate local resources.

This structure allows for easy customization and scalability, making it a great starting point for applications that require user avatars.
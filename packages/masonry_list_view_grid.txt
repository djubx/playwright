<-- START_DESCRIPTION -->

Masonry List View Grid Package
==============================

The `masonry_list_view_grid` package is a Flutter package that allows you to create a masonry-style list view with a grid layout. It is useful when you want to display a list of items with varying heights in a grid layout.

Features
--------

*   Supports both Android and iOS platforms
*   Customizable grid layout with adjustable column count and spacing
*   Supports loading more items when the user scrolls to the end of the list
*   Supports pull-to-refresh functionality

When to Use
------------

You can use this package when you want to display a list of items with varying heights in a grid layout, such as:

*   Displaying a list of images with different heights
*   Displaying a list of cards with varying content
*   Displaying a list of items with different sizes

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
----------------

To use the `masonry_list_view_grid` package, follow these steps:

### Step 1: Add the Package to Your Project

Add the following line to your `pubspec.yaml` file:

```yml
dependencies:
  masonry_list_view_grid: ^1.0.0
```

Then, run `flutter pub get` to get the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:masonry_list_view_grid/masonry_list_view_grid.dart';
```

### Step 3: Create a Masonry List View Grid

Create a `MasonryListViewGrid` widget and pass the required parameters:

```dart
MasonryListViewGrid(
  itemCount: 10,
  itemBuilder: (context, index) {
    return Container(
      height: 100,
      color: Colors.grey,
      child: Center(
        child: Text('Item $index'),
      ),
    );
  },
  columnCount: 2,
  mainAxisSpacing: 10,
  crossAxisSpacing: 10,
)
```

### Platform-Specific Details

*   Android: No additional setup is required.
*   iOS: No additional setup is required.

### Configurations and Optimizations

*   You can adjust the `columnCount` parameter to change the number of columns in the grid.
*   You can adjust the `mainAxisSpacing` and `crossAxisSpacing` parameters to change the spacing between items.
*   You can use the `loadMore` parameter to load more items when the user scrolls to the end of the list.
*   You can use the `refresh` parameter to enable pull-to-refresh functionality.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:masonry_list_view_grid/masonry_list_view_grid.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Masonry List View Grid Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  List<int> _items = List<int>.generate(10, (index) => index);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Masonry List View Grid Demo'),
      ),
      body: MasonryListViewGrid(
        itemCount: _items.length,
        itemBuilder: (context, index) {
          // Create a container with a random height
          return Container(
            height: (index % 3 + 1) * 100,
            color: Colors.grey,
            child: Center(
              child: Text('Item ${_items[index]}'),
            ),
          );
        },
        columnCount: 2,
        mainAxisSpacing: 10,
        crossAxisSpacing: 10,
        // Load more items when the user scrolls to the end of the list
        loadMore: () {
          setState(() {
            _items.addAll(List<int>.generate(10, (index) => _items.length + index));
          });
        },
        // Enable pull-to-refresh functionality
        refresh: () {
          setState(() {
            _items = List<int>.generate(10, (index) => index);
          });
        },
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and sees a list of items with varying heights.
// 2. The user scrolls to the end of the list and sees a loading indicator.
// 3. The app loads more items and adds them to the list.
// 4. The user can pull-to-refresh the list to reset it to its original state.
// 5. The user can adjust the column count and spacing between items by modifying the parameters of the MasonryListViewGrid widget.

// This code demonstrates the key features of the Masonry List View Grid package, including loading more items and pull-to-refresh functionality.
```

<-- END_MAIN -->
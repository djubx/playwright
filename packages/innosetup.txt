<-- START_DESCRIPTION -->

InnoSetup Flutter Package
==========================

The InnoSetup package is a powerful tool for creating installers for Windows applications. It allows developers to create custom installers with a wide range of features, including support for multiple languages, customizable UI, and more.

When to Use InnoSetup
--------------------

InnoSetup is ideal for creating installers for Windows applications, especially those built with Flutter. It provides a high degree of customization and control over the installation process, making it a popular choice among developers.

Features of InnoSetup
--------------------

*   Support for multiple languages
*   Customizable UI
*   Support for multiple installation types (e.g., full, minimal, custom)
*   Ability to create shortcuts and registry entries
*   Support for password protection and encryption

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setting Up InnoSetup
--------------------

To use InnoSetup with Flutter, follow these steps:

1.  Add the InnoSetup package to your `pubspec.yaml` file:

    ```yml
dependencies:
  innosetup: ^1.0.0
```

2.  Run `flutter pub get` to install the package.
3.  Import the package in your Dart file:

    ```dart
import 'package:innosetup/innosetup.dart';
```

Creating an Installer
---------------------

To create an installer, you'll need to create a configuration file (`setup.iss`) that defines the installation settings. Here's an example configuration file:

```iss
[Setup]
AppName=MyApp
AppVersion=1.0
OutputDir=output

[Files]
Source: "path/to/your/app.exe"; DestDir: "{app}"; Flags: ignoreversion

[Icons]
Name: "{group}\MyApp"; Filename: "{app}\myapp.exe"
```

This configuration file defines the app name, version, and output directory. It also specifies the files to be included in the installation and creates a shortcut in the start menu.

Building the Installer
----------------------

To build the installer, run the following command:

```bash
flutter pub run innosetup:build
```

This will create an installer executable in the `output` directory.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
// Import the InnoSetup package
import 'package:innosetup/innosetup.dart';

// Import the Flutter package
import 'package:flutter/material.dart';

// Define the main class
class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Define the installation configuration
  String _setupConfig = '''
[Setup]
AppName=MyApp
AppVersion=1.0
OutputDir=output

[Files]
Source: "path/to/your/app.exe"; DestDir: "{app}"; Flags: ignoreversion

[Icons]
Name: "{group}\\MyApp"; Filename: "{app}\\myapp.exe"
''';

  // Build the installer
  Future<void> _buildInstaller() async {
    // Create a new InnoSetup instance
    final innosetup = InnoSetup();

    // Set the configuration
    innosetup.setConfig(_setupConfig);

    // Build the installer
    await innosetup.build();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('InnoSetup Example'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: _buildInstaller,
          child: Text('Build Installer'),
        ),
      ),
    );
  }
}

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'InnoSetup Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}
```

// The application flow is as follows:
// 1. The user clicks the "Build Installer" button.
// 2. The `_buildInstaller` function is called, which creates a new InnoSetup instance.
// 3. The configuration is set using the `_setupConfig` string.
// 4. The `build` method is called to build the installer.
// 5. The installer is created in the `output` directory.

// This example demonstrates how to use the InnoSetup package to create an installer for a Windows application.

<-- END_MAIN -->
```markdown
<!-- START_DESCRIPTION -->
# Fluid Bottom Navigation Bar in Flutter

The `fluid_bottom_nav_bar` package is a powerful and flexible Flutter package that allows developers to create beautiful and customizable bottom navigation bars. This package is particularly useful for applications that require a modern and fluid user interface, enhancing the overall user experience.

## When to Use This Package

You should consider using the `fluid_bottom_nav_bar` package when:
- You want to implement a bottom navigation bar that is visually appealing and fluid in its animations.
- Your application has multiple sections or pages that users can navigate between, and you want to provide a seamless transition.
- You need a customizable navigation bar that can adapt to different themes and styles.

## Key Features
- **Fluid Animations**: The package provides smooth animations that enhance the user experience.
- **Customizable Icons and Labels**: You can easily customize the icons and labels for each navigation item.
- **Responsive Design**: The navigation bar adapts well to different screen sizes and orientations.
- **Easy Integration**: The package is straightforward to integrate into existing Flutter applications.

Overall, the `fluid_bottom_nav_bar` package is an excellent choice for developers looking to enhance their Flutter applications with a modern navigation experience.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using fluid_bottom_nav_bar

## Step 1: Adding the Dependency

To get started, you need to add the `fluid_bottom_nav_bar` package to your Flutter project. Open your `pubspec.yaml` file and add the following line under dependencies:

```yaml
dependencies:
  fluid_bottom_nav_bar: ^0.1.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command to install it:

```bash
flutter pub get
```

## Step 2: Importing the Package

In your Dart file where you want to use the bottom navigation bar, import the package:

```dart
import 'package:fluid_bottom_nav_bar/fluid_bottom_nav_bar.dart';
```

## Step 3: Basic Setup

You can now set up the `FluidBottomNavBar` in your main widget. Below is a simple example of how to implement it:

### Android Configuration

For Android, ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```gradle
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

### iOS Configuration

For iOS, you may need to ensure that your deployment target is set to at least 10.0 in your `ios/Podfile`:

```ruby
platform :ios, '10.0'
```

## Step 4: Using the Fluid Bottom Navigation Bar

Hereâ€™s a basic example of how to use the `FluidBottomNavBar` in your Flutter application:

```dart
FluidBottomNavBar(
  icons: [
    Icons.home,
    Icons.search,
    Icons.notifications,
    Icons.person,
  ],
  onChange: (index) {
    // Handle navigation based on the selected index
  },
)
```

This setup will create a bottom navigation bar with four icons. You can handle the navigation logic in the `onChange` callback.

## Conclusion

The `fluid_bottom_nav_bar` package is easy to set up and provides a modern navigation experience for your Flutter applications. By following the steps above, you can integrate it seamlessly into your project.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of fluid_bottom_nav_bar

```dart
import 'package:flutter/material.dart';
import 'package:fluid_bottom_nav_bar/fluid_bottom_nav_bar.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Fluid Bottom Nav Bar Example',
      home: HomeScreen(),
    );
  }
}

class HomeScreen extends StatefulWidget {
  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  // Current index of the selected tab
  int _currentIndex = 0;

  // List of widgets to display for each tab
  final List<Widget> _children = [
    Center(child: Text('Home')),
    Center(child: Text('Search')),
    Center(child: Text('Notifications')),
    Center(child: Text('Profile')),
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Fluid Bottom Navigation Bar'),
      ),
      body: _children[_currentIndex], // Display the selected tab's content
      bottomNavigationBar: FluidBottomNavBar(
        icons: [
          Icons.home,
          Icons.search,
          Icons.notifications,
          Icons.person,
        ],
        onChange: (index) {
          // Update the current index when a tab is selected
          setState(() {
            _currentIndex = index;
          });
        },
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function runs the RealFlutter app.
// 2. RealFlutter is a StatelessWidget that sets up the MaterialApp.
// 3. The HomeScreen is a StatefulWidget that maintains the current index of the selected tab.
// 4. The _children list contains the widgets to display for each tab.
// 5. The Scaffold widget provides the structure for the app, including the AppBar and body.
// 6. The FluidBottomNavBar is used as the bottom navigation bar, with an onChange callback to update the current index.
// 7. When a tab is selected, the body of the Scaffold updates to show the corresponding widget from the _children list.
```
<!-- END_MAIN -->
``` 

This structured blog provides a comprehensive overview of the `fluid_bottom_nav_bar` package, guiding readers through its features, setup, and implementation in a complete Flutter application.
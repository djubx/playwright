<-- START_DESCRIPTION -->

# Fullscreen Image Viewer Package in Flutter
=============================================

The `fullscreen_image_viewer` package in Flutter is a powerful tool for displaying images in a fullscreen mode. It provides a simple and intuitive way to view images in a fullscreen mode, with features such as zooming, panning, and rotating.

When to Use This Package
------------------------

This package is ideal for applications that require displaying images in a fullscreen mode, such as:

* Image galleries
* Photo viewers
* Image editors

Features
--------

* Fullscreen image viewing
* Zooming and panning
* Rotating
* Double-tap to zoom in and out
* Swipe to navigate between images

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Fullscreen Image Viewer Package
----------------------------------------------

To use the `fullscreen_image_viewer` package, follow these steps:

### Step 1: Add the Package to Your Project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  fullscreen_image_viewer: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:fullscreen_image_viewer/fullscreen_image_viewer.dart';
```
### Step 3: Use the Package

Create a `FullscreenImageViewer` widget and pass the image URL or asset path to the `image` property:
```dart
FullscreenImageViewer(
  image: 'https://example.com/image.jpg',
)
```
### Platform-Specific Details

* Android: No additional configuration is required.
* iOS: Add the following line to your `Info.plist` file:
```xml
<key>NSPhotoLibraryUsageDescription</key>
<string>This app needs access to your photo library to display images.</string>
```
### Optimizations

* Use a caching mechanism, such as `cached_network_image`, to improve image loading performance.
* Use a placeholder image to display while the image is loading.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:fullscreen_image_viewer/fullscreen_image_viewer.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Fullscreen Image Viewer Demo',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Fullscreen Image Viewer Demo'),
        ),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              Navigator.push(
                context,
                MaterialPageRoute(builder: (context) => FullscreenImageViewerPage()),
              );
            },
            child: Text('View Image'),
          ),
        ),
      ),
    );
  }
}

class FullscreenImageViewerPage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: FullscreenImageViewer(
        image: 'https://example.com/image.jpg',
        // Optional parameters
        placeholder: Center(child: CircularProgressIndicator()),
        errorBuilder: (context, error) => Center(child: Text('Error loading image')),
      ),
    );
  }
}
```

// This is the main entry point of the application.
// The RealFlutter widget is the root of the application.
// It uses the MaterialApp widget to provide a Material Design theme to the application.
// The home property is set to a Scaffold widget, which provides a basic material design layout structure.
// The Scaffold widget has an AppBar widget as its child, which displays the title of the application.
// The body property of the Scaffold widget is set to a Center widget, which centers its child horizontally and vertically.
// The child of the Center widget is an ElevatedButton widget, which displays a button with a label.
// When the button is pressed, it navigates to a new page using the Navigator.push method.
// The new page is created using the MaterialPageRoute builder, which builds a new route with the given builder.
// The builder returns a FullscreenImageViewerPage widget, which displays the image in fullscreen mode.

// The FullscreenImageViewerPage widget uses the Scaffold widget to provide a basic material design layout structure.
// The body property of the Scaffold widget is set to a FullscreenImageViewer widget, which displays the image in fullscreen mode.
// The image property of the FullscreenImageViewer widget is set to the URL of the image to be displayed.
// Optional parameters, such as placeholder and errorBuilder, can be used to customize the behavior of the FullscreenImageViewer widget.

<-- END_MAIN -->
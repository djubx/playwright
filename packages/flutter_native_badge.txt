<-- START_DESCRIPTION -->

# Flutter Native Badge Package
================================

The `flutter_native_badge` package is a Flutter plugin that allows you to display native badges on Android and iOS devices. Badges are small, circular icons that appear on top of an app's icon, typically indicating the number of unread notifications or messages.

## When to Use
--------------

You can use this package in various scenarios, such as:

* Displaying the number of unread notifications or messages
* Indicating the number of pending tasks or actions
* Showing the number of new updates or features

## Features
------------

The `flutter_native_badge` package offers the following features:

* Display native badges on Android and iOS devices
* Customize the badge color, text color, and font size
* Support for multiple badge styles (e.g., circle, rectangle)
* Ability to clear or remove badges

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
-----------------

To use the `flutter_native_badge` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_native_badge: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:flutter_native_badge/flutter_native_badge.dart';
```
### Step 3: Initialize the Badge

Initialize the badge by calling the `initBadge` method:
```dart
FlutterNativeBadge.initBadge(
  androidSettings: AndroidSettings(
    // Customize the badge color, text color, and font size for Android
    color: Colors.red,
    textColor: Colors.white,
    fontSize: 12,
  ),
  iosSettings: IOSSettings(
    // Customize the badge color, text color, and font size for iOS
    color: Colors.red,
    textColor: Colors.white,
    fontSize: 12,
  ),
);
```
### Step 4: Display the Badge

Display the badge by calling the `showBadge` method:
```dart
FlutterNativeBadge.showBadge(
  badgeCount: 5, // Display the badge with a count of 5
);
```
### Step 5: Clear the Badge

Clear the badge by calling the `clearBadge` method:
```dart
FlutterNativeBadge.clearBadge();
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_native_badge/flutter_native_badge.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Native Badge Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  int _badgeCount = 0;

  @override
  void initState() {
    super.initState();
    // Initialize the badge
    FlutterNativeBadge.initBadge(
      androidSettings: AndroidSettings(
        color: Colors.red,
        textColor: Colors.white,
        fontSize: 12,
      ),
      iosSettings: IOSSettings(
        color: Colors.red,
        textColor: Colors.white,
        fontSize: 12,
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Native Badge Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Badge Count: $_badgeCount',
              style: TextStyle(fontSize: 24),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                // Increment the badge count
                setState(() {
                  _badgeCount++;
                });
                // Display the badge
                FlutterNativeBadge.showBadge(
                  badgeCount: _badgeCount,
                );
              },
              child: Text('Increment Badge Count'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                // Clear the badge
                FlutterNativeBadge.clearBadge();
                // Reset the badge count
                setState(() {
                  _badgeCount = 0;
                });
              },
              child: Text('Clear Badge'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and the badge is initialized with a count of 0.
// 2. The user clicks the "Increment Badge Count" button, which increments the badge count and displays the badge.
// 3. The user can continue to click the "Increment Badge Count" button to increment the badge count and update the badge.
// 4. The user can click the "Clear Badge" button to clear the badge and reset the badge count to 0.
// 5. The badge is updated in real-time as the user interacts with the app.

// The code flow is as follows:
// 1. The `MyHomePage` widget is created and the badge is initialized in the `initState` method.
// 2. The `build` method is called to render the UI, which includes the badge count and two buttons.
// 3. The user interacts with the buttons, which triggers the `onPressed` callbacks.
// 4. The `onPressed` callbacks update the badge count and display the badge using the `FlutterNativeBadge` package.
// 5. The badge is updated in real-time as the user interacts with the app.
```
<-- END_MAIN -->
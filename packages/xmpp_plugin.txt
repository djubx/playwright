<-- START_DESCRIPTION -->
# XMPP Plugin for Flutter
The `xmpp_plugin` is a Flutter package that allows developers to integrate XMPP (Extensible Messaging and Presence Protocol) functionality into their applications. XMPP is an open-standard communications protocol for message-oriented middleware based on XML.
## When to Use
This plugin is useful for building applications that require real-time communication, such as:
* Instant messaging apps
* Live updates and notifications
* Multi-user collaboration tools
* Gaming platforms
## Features
The `xmpp_plugin` offers the following features:
* Connection management (connect, disconnect, reconnect)
* Authentication (login, logout)
* Presence management (set presence, get presence)
* Message sending and receiving
* Support for multiple XMPP servers
<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->
# Setup and Usage
To use the `xmpp_plugin` in your Flutter project, follow these steps:
### Step 1: Add the Plugin to Your Project
Add the `xmpp_plugin` to your `pubspec.yaml` file:
```yml
dependencies:
  xmpp_plugin: ^1.0.0
```
Then, run `flutter pub get` to install the plugin.
### Step 2: Import the Plugin
Import the `xmpp_plugin` in your Dart file:
```dart
import 'package:xmpp_plugin/xmpp_plugin.dart';
```
### Step 3: Initialize the Plugin
Initialize the plugin with your XMPP server details:
```dart
XmppPlugin xmpp = XmppPlugin(
  jid: 'your_jid',
  password: 'your_password',
  host: 'your_host',
  port: 5222,
);
```
### Step 4: Connect to the XMPP Server
Connect to the XMPP server:
```dart
xmpp.connect();
```
### Step 5: Send and Receive Messages
Send a message:
```dart
xmpp.sendMessage('hello@example.com', 'Hello, world!');
```
Receive messages:
```dart
xmpp.onMessage.listen((message) {
  print('Received message: ${message.body}');
});
```
### Platform-Specific Details
#### Android
Add the following permissions to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.INTERNET" />
<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
```
#### iOS
Add the following lines to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->
```dart
import 'package:flutter/material.dart';
import 'package:xmpp_plugin/xmpp_plugin.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  XmppPlugin _xmpp;
  String _connectionStatus = 'Disconnected';
  String _message = '';

  @override
  void initState() {
    super.initState();
    _xmpp = XmppPlugin(
      jid: 'your_jid',
      password: 'your_password',
      host: 'your_host',
      port: 5222,
    );
    _xmpp.onConnectionStatus.listen((status) {
      setState(() {
        _connectionStatus = status.toString();
      });
    });
    _xmpp.onMessage.listen((message) {
      setState(() {
        _message = message.body;
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('XMPP Plugin Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(_connectionStatus),
            Text(_message),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                _xmpp.connect();
              },
              child: Text('Connect'),
            ),
            SizedBox(height: 10),
            ElevatedButton(
              onPressed: () {
                _xmpp.sendMessage('hello@example.com', 'Hello, world!');
              },
              child: Text('Send Message'),
            ),
          ],
        ),
      ),
    );
  }
}

// Application flow:
// 1. The app initializes the XmppPlugin with the user's JID, password, host, and port.
// 2. The app connects to the XMPP server using the `connect` method.
// 3. The app listens for connection status updates and displays the current status on the screen.
// 4. The app listens for incoming messages and displays the message body on the screen.
// 5. The user can send a message to another user by pressing the "Send Message" button.
// 6. The app sends the message using the `sendMessage` method.
```
// Summary: This code demonstrates the basic usage of the XmppPlugin in a Flutter app. It initializes the plugin, connects to the XMPP server, listens for connection status updates and incoming messages, and sends a message to another user.
<-- END_MAIN -->
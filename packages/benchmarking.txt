<-- START_DESCRIPTION -->

# Benchmarking Flutter Package
================================

The `benchmarking` Flutter package is a powerful tool for measuring the performance of your Flutter application. It provides a simple and easy-to-use API for running benchmarks and collecting performance data.

## When to Use This Package
---------------------------

You should use this package when you want to:

* Measure the performance of your application's critical code paths
* Identify performance bottlenecks in your application
* Compare the performance of different algorithms or implementations
* Monitor the performance of your application over time

## Features
------------

The `benchmarking` package provides the following features:

* Simple and easy-to-use API for running benchmarks
* Support for measuring CPU time, wall clock time, and memory usage
* Support for running benchmarks on both Android and iOS platforms
* Support for collecting performance data and storing it in a database

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Benchmarking Package
--------------------------------------

To use the `benchmarking` package, you need to add it to your `pubspec.yaml` file:
```yml
dependencies:
  benchmarking: ^1.0.0
```
Then, run `flutter pub get` to install the package.

## Platform-Specific Setup
---------------------------

### Android

To use the `benchmarking` package on Android, you need to add the following code to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
```
This permission is required to store the performance data in a database.

### iOS

To use the `benchmarking` package on iOS, you need to add the following code to your `Info.plist` file:
```xml
<key>NSFileProtectionKey</key>
<string>NSFileProtectionNone</string>
```
This setting is required to allow the package to store the performance data in a database.

## Using the Package
---------------------

To use the package, you need to create a `Benchmark` object and call its `run` method:
```dart
import 'package:benchmarking/benchmarking.dart';

class RealFlutter {
  void runBenchmark() {
    Benchmark benchmark = Benchmark('my_benchmark');
    benchmark.run(() {
      // Code to be benchmarked
    });
  }
}
```
This will run the benchmark and collect performance data.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:benchmarking/benchmarking.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Benchmarking Example',
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  String _benchmarkResult = '';

  void _runBenchmark() {
    Benchmark benchmark = Benchmark('my_benchmark');
    benchmark.run(() {
      // Code to be benchmarked
      for (int i = 0; i < 1000000; i++) {
        // Simulate some work
      }
    }).then((result) {
      setState(() {
        _benchmarkResult = 'Benchmark result: ${result.cpuTime}ms';
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Benchmarking Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(_benchmarkResult),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _runBenchmark,
              child: Text('Run Benchmark'),
            ),
          ],
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user clicks the "Run Benchmark" button.
// 2. The _runBenchmark method is called, which creates a Benchmark object and calls its run method.
// 3. The run method runs the benchmark and collects performance data.
// 4. The performance data is stored in a database.
// 5. The benchmark result is displayed on the screen.

// Summary:
// This code demonstrates how to use the benchmarking package to measure the performance of a Flutter application.
// It creates a Benchmark object and calls its run method to run the benchmark and collect performance data.
// The performance data is then stored in a database and displayed on the screen.
```

<-- END_MAIN -->
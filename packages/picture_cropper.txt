# Picture Cropper Flutter Package

## <-- START_DESCRIPTION -->

### Overview

The `picture_cropper` Flutter package is a powerful tool that allows developers to easily integrate image cropping functionality into their applications. This package is particularly useful when you need users to upload or select images and want to provide them with the ability to crop those images to fit specific dimensions or aspect ratios. 

### When to Use

You might want to use the `picture_cropper` package in scenarios such as:
- Allowing users to upload profile pictures.
- Enabling image editing features in a photo gallery app.
- Providing a way to crop images before uploading them to a server.

### Features

- **Customizable Aspect Ratios**: Users can crop images to specific aspect ratios.
- **Image Rotation**: Users can rotate images before cropping.
- **Multiple Image Sources**: Supports picking images from the gallery or taking new photos with the camera.
- **Easy Integration**: Simple API that integrates seamlessly with Flutter applications.

## <-- END_DESCRIPTION -->

## <-- START_TUTORIAL -->

### Setup Process

To get started with the `picture_cropper` package, follow these steps:

1. **Add Dependency**: Open your `pubspec.yaml` file and add the `picture_cropper` package.

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     picture_cropper: ^1.0.0  # Check for the latest version on pub.dev
   ```

2. **Install the Package**: Run the following command in your terminal to install the package:

   ```bash
   flutter pub get
   ```

3. **Platform-Specific Configuration**:
   - **Android**: Ensure that you have the necessary permissions in your `AndroidManifest.xml` file:

     ```xml
     <uses-permission android:name="android.permission.CAMERA"/>
     <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
     ```

   - **iOS**: Add the following keys to your `Info.plist` file to request permission for camera and photo library access:

     ```xml
     <key>NSCameraUsageDescription</key>
     <string>We need access to your camera to take photos.</string>
     <key>NSPhotoLibraryUsageDescription</key>
     <string>We need access to your photo library to select photos.</string>
     ```

### Using the Package

To use the `picture_cropper` package, you can follow this simple example:

1. Import the package in your Dart file:

   ```dart
   import 'package:picture_cropper/picture_cropper.dart';
   ```

2. Create a function to pick and crop an image:

   ```dart
   Future<void> _pickAndCropImage() async {
     // Pick an image from the gallery
     final pickedFile = await ImagePicker().getImage(source: ImageSource.gallery);
     
     if (pickedFile != null) {
       // Crop the picked image
       final croppedFile = await PictureCropper.cropImage(
         sourcePath: pickedFile.path,
         aspectRatioPresets: [
           CropAspectRatioPreset.square,
           CropAspectRatioPreset.ratio3x2,
           CropAspectRatioPreset.original,
         ],
         androidUiSettings: AndroidUiSettings(
           toolbarTitle: 'Cropper',
           toolbarColor: Colors.deepOrange,
           toolbarWidgetColor: Colors.white,
           initAspectRatio: CropAspectRatioPreset.original,
           lockAspectRatio: false,
         ),
         iosUiSettings: IOSUiSettings(
           minimumAspectRatio: 1.0,
         ),
       );

       // Use the cropped image
       if (croppedFile != null) {
         setState(() {
           _imageFile = File(croppedFile.path);
         });
       }
     }
   }
   ```

## <-- END_TUTORIAL -->

## <-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'package:picture_cropper/picture_cropper.dart';
import 'dart:io';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  File? _imageFile; // Variable to hold the cropped image file

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Picture Cropper Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              // Display the cropped image if available
              _imageFile != null
                  ? Image.file(_imageFile!)
                  : Text('No image selected.'),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _pickAndCropImage, // Call the image picker and cropper
                child: Text('Pick and Crop Image'),
              ),
            ],
          ),
        ),
      ),
    );
  }

  // Function to pick and crop an image
  Future<void> _pickAndCropImage() async {
    // Pick an image from the gallery
    final pickedFile = await ImagePicker().getImage(source: ImageSource.gallery);
    
    if (pickedFile != null) {
      // Crop the picked image
      final croppedFile = await PictureCropper.cropImage(
        sourcePath: pickedFile.path,
        aspectRatioPresets: [
          CropAspectRatioPreset.square,
          CropAspectRatioPreset.ratio3x2,
          CropAspectRatioPreset.original,
        ],
        androidUiSettings: AndroidUiSettings(
          toolbarTitle: 'Cropper',
          toolbarColor: Colors.deepOrange,
          toolbarWidgetColor: Colors.white,
          initAspectRatio: CropAspectRatioPreset.original,
          lockAspectRatio: false,
        ),
        iosUiSettings: IOSUiSettings(
          minimumAspectRatio: 1.0,
        ),
      );

      // Use the cropped image
      if (croppedFile != null) {
        setState(() {
          _imageFile = File(croppedFile.path); // Update the state with the cropped image
        });
      }
    }
  }
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the RealFlutter widget.
// 2. The RealFlutter widget is a StatefulWidget that maintains the state of the selected image.
// 3. In the build method, a simple UI is created with an AppBar, an Image widget to display the cropped image, and a button to pick and crop an image.
// 4. When the button is pressed, the _pickAndCropImage function is called.
// 5. This function uses the ImagePicker to select an image from the gallery.
// 6. If an image is selected, it is passed to the PictureCropper for cropping.
// 7. The user can choose from different aspect ratios for cropping.
// 8. After cropping, the cropped image is displayed in the Image widget.
// 9. The app updates the UI using setState to reflect the newly cropped image.
```

## <-- END_MAIN -->

### Summary

In this blog post, we explored the `picture_cropper` Flutter package, which provides a straightforward way to implement image cropping functionality in your applications. We covered the setup process, including platform-specific configurations for Android and iOS, and provided a complete example of a Flutter application that demonstrates how to pick and crop images. The application flow was explained step-by-step through comments in the code, making it easy to understand how the package works in practice. This package is ideal for any Flutter developer looking to enhance their app's image handling capabilities.
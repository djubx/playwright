```markdown
<!-- START_DESCRIPTION -->
# Native Drag and Drop Flutter Package

The `native_drag_n_drop` package is a powerful Flutter library that enables developers to implement native drag-and-drop functionality in their applications. This package is particularly useful for applications that require users to rearrange items, move files, or perform similar actions that benefit from intuitive drag-and-drop interactions.

## When to Use This Package
- **Rearranging Lists**: When you need to allow users to reorder items in a list.
- **File Management**: For applications that involve moving files or images between different folders or sections.
- **Custom UI Interactions**: When creating custom UI components that require drag-and-drop capabilities.

## Features
- **Cross-Platform Support**: Works seamlessly on both Android and iOS.
- **Native Performance**: Utilizes native drag-and-drop APIs for smooth interactions.
- **Customizable**: Offers various customization options for drag-and-drop behavior.
- **Event Handling**: Provides callbacks for drag start, drag update, and drag end events.

This package is ideal for developers looking to enhance user experience through intuitive interactions in their Flutter applications.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Native Drag and Drop

## Installation
To add the `native_drag_n_drop` package to your Flutter project, include it in your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  native_drag_n_drop: ^latest_version
```

Make sure to replace `^latest_version` with the most recent version available on [pub.dev](https://pub.dev/packages/native_drag_n_drop).

## Platform-Specific Configuration

### Android
For Android, ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

### iOS
For iOS, you may need to enable drag-and-drop capabilities in your `Info.plist` file. Add the following key:

```xml
<key>UIBackgroundModes</key>
<array>
    <string>fetch</string>
    <string>remote-notification</string>
</array>
```

## Basic Usage
To use the `native_drag_n_drop` package, you can create a simple widget that allows users to drag and drop items. Below is a basic example of how to implement this functionality.

```dart
import 'package:flutter/material.dart';
import 'package:native_drag_n_drop/native_drag_n_drop.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Drag and Drop Example')),
        body: DragAndDropList(),
      ),
    );
  }
}

class DragAndDropList extends StatefulWidget {
  @override
  _DragAndDropListState createState() => _DragAndDropListState();
}

class _DragAndDropListState extends State<DragAndDropList> {
  List<String> items = ['Item 1', 'Item 2', 'Item 3', 'Item 4'];

  @override
  Widget build(BuildContext context) {
    return NativeDragAndDrop(
      items: items,
      onDragCompleted: (newItems) {
        setState(() {
          items = newItems;
        });
      },
      builder: (context, item, index) {
        return ListTile(
          title: Text(item),
        );
      },
    );
  }
}
```

This code sets up a simple drag-and-drop list where users can rearrange items. The `onDragCompleted` callback updates the state with the new order of items after a drag-and-drop operation.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Native Drag and Drop

```dart
import 'package:flutter/material.dart';
import 'package:native_drag_n_drop/native_drag_n_drop.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Drag and Drop Example')),
        body: DragAndDropList(),
      );
    });
  }
}

class DragAndDropList extends StatefulWidget {
  @override
  _DragAndDropListState createState() => _DragAndDropListState();
}

class _DragAndDropListState extends State<DragAndDropList> {
  // List of items to be displayed
  List<String> items = ['Item 1', 'Item 2', 'Item 3', 'Item 4'];

  @override
  Widget build(BuildContext context) {
    return NativeDragAndDrop(
      // Pass the list of items to the NativeDragAndDrop widget
      items: items,
      // Callback when drag is completed
      onDragCompleted: (newItems) {
        // Update the state with the new order of items
        setState(() {
          items = newItems;
        });
      },
      // Builder function to create the UI for each item
      builder: (context, item, index) {
        return ListTile(
          title: Text(item), // Display the item text
        );
      },
    );
  }
}

// Application Flow Explanation:
// 1. The main function runs the RealFlutter app.
// 2. RealFlutter builds a MaterialApp with a Scaffold containing an AppBar and the DragAndDropList widget.
// 3. DragAndDropList maintains a list of items and uses the NativeDragAndDrop widget to enable drag-and-drop functionality.
// 4. When an item is dragged and dropped, the onDragCompleted callback is triggered, updating the items list.
// 5. The UI is rebuilt with the new order of items, reflecting the changes made by the user.
```
<!-- END_MAIN -->
```

This structured blog post provides a comprehensive overview of the `native_drag_n_drop` Flutter package, including its features, setup instructions, and a complete example with detailed comments explaining the application flow.
```markdown
<!-- START_DESCRIPTION -->
# Overview of the cli_repl Flutter Package

The `cli_repl` package is a powerful tool designed for Flutter developers who want to create command-line interfaces (CLI) with a Read-Eval-Print Loop (REPL) functionality. This package allows developers to build interactive command-line applications that can evaluate user input in real-time, making it ideal for debugging, scripting, or creating interactive tools.

## When to Use `cli_repl`

- **Interactive Command-Line Tools**: If you need to create a tool that requires user input and immediate feedback, `cli_repl` is a great choice.
- **Scripting and Automation**: For automating tasks or creating scripts that require user interaction, this package simplifies the process.
- **Debugging**: It can be used to test snippets of code quickly without needing to run a full application.

## Key Features

- **Real-time Input Evaluation**: Users can input commands, and the package evaluates them immediately.
- **Custom Command Handling**: You can define custom commands and their corresponding actions.
- **Extensible**: Easily extend the functionality to suit your specific needs.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS platforms.

Overall, `cli_repl` is a versatile package that enhances the interactivity of Flutter applications, especially for developers looking to implement command-line features.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Setting Up and Using the cli_repl Package

## Installation

To get started with the `cli_repl` package, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  cli_repl: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command to install it:

```bash
flutter pub get
```

## Platform-Specific Details

### Android

For Android, ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file:

```gradle
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

### iOS

For iOS, you may need to configure your `Info.plist` to allow for command-line interactions, but generally, no special configurations are required for basic usage.

## Basic Usage

Hereâ€™s how to set up a simple REPL using the `cli_repl` package:

1. Import the package in your Dart file:
   ```dart
   import 'package:cli_repl/cli_repl.dart';
   ```

2. Create an instance of the REPL and define your commands:
   ```dart
   void main() {
     final repl = RealFlutter();

     // Define a simple command
     repl.addCommand('hello', (args) {
       print('Hello, ${args.isNotEmpty ? args[0] : 'World'}!');
     });

     // Start the REPL
     repl.start();
   }
   ```

This basic setup allows you to create a command that responds to user input. You can expand this by adding more commands and functionalities as needed.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using cli_repl

```dart
import 'package:flutter/material.dart';
import 'package:cli_repl/cli_repl.dart';

void main() {
  // Create an instance of the RealFlutter class
  final repl = RealFlutter();

  // Define a command 'hello' that takes an argument
  repl.addCommand('hello', (args) {
    // Print a greeting message based on user input
    print('Hello, ${args.isNotEmpty ? args[0] : 'World'}!');
  });

  // Define another command 'add' that adds two numbers
  repl.addCommand('add', (args) {
    if (args.length == 2) {
      // Parse the arguments as integers and print their sum
      final sum = int.parse(args[0]) + int.parse(args[1]);
      print('The sum is: $sum');
    } else {
      print('Usage: add <num1> <num2>');
    }
  });

  // Start the REPL to listen for user commands
  repl.start();
}

// Application Flow Explanation:
// 1. The main function initializes the REPL by creating an instance of RealFlutter.
// 2. Two commands are defined: 'hello' and 'add'.
// 3. The 'hello' command prints a greeting message, optionally using a user-provided name.
// 4. The 'add' command takes two numbers as input, adds them, and prints the result.
// 5. Finally, the REPL starts, allowing users to input commands and receive immediate feedback.
```

<!-- END_MAIN -->
```

### Summary of the Code Flow
The provided code initializes a REPL using the `cli_repl` package. It defines two commands: `hello`, which greets the user, and `add`, which sums two numbers. The REPL starts listening for user input, allowing for interactive command execution. This setup is ideal for creating command-line tools or debugging scripts in a Flutter environment.
```markdown
<-- START_DESCRIPTION -->

# Easy Image Viewer Flutter Package

The `easy_image_viewer` Flutter package is a powerful and user-friendly tool designed to simplify the process of displaying images in a Flutter application. It provides a straightforward way to implement image viewing features, such as zooming and panning, without the need for extensive boilerplate code. This package is particularly useful in applications where image galleries, photo viewers, or any feature requiring detailed image inspection are needed.

## When to Use

- **Photo Gallery Apps**: Ideal for apps that need to display a collection of images with zoom and pan capabilities.
- **E-commerce Apps**: Useful for viewing product images in detail.
- **Social Media Apps**: Enhances user experience by allowing users to view images in full screen with interactive controls.

## Features

- **Zoom and Pan**: Users can zoom in and out of images and pan around to view different parts.
- **Full-Screen Mode**: Images can be viewed in full-screen mode for better visibility.
- **Customizable Controls**: Developers can customize the viewer controls to fit the app's design.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS platforms.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using Easy Image Viewer

In this tutorial, we will walk through the process of setting up the `easy_image_viewer` package in a Flutter project and demonstrate how to use its features effectively.

## Setup Process

### Step 1: Add Dependency

Add the `easy_image_viewer` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  easy_image_viewer: ^1.0.0
```

Run `flutter pub get` to install the package.

### Step 2: Platform-Specific Configuration

#### Android

Ensure that your `android/app/src/main/AndroidManifest.xml` file has the necessary permissions to access the internet if you are loading images from a network:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
```

#### iOS

For iOS, make sure your `ios/Runner/Info.plist` includes permissions for accessing the internet:

```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```

### Step 3: Basic Usage

To use the `easy_image_viewer`, import it into your Dart file:

```dart
import 'package:easy_image_viewer/easy_image_viewer.dart';
```

You can now use the `RealFlutter` class to display images with zoom and pan capabilities.

<-- END_TUTORIAL -->

<-- MAIN -->

# Complete Example: Flutter Main File

Below is a complete example demonstrating the key features of the `easy_image_viewer` package.

```dart
import 'package:flutter/material.dart';
import 'package:easy_image_viewer/easy_image_viewer.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Easy Image Viewer Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: ImageGalleryScreen(),
    );
  }
}

class ImageGalleryScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Image Gallery'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Load and display an image using the RealFlutter class
            final imageProvider = NetworkImage('https://example.com/sample.jpg');
            showImageViewer(
              context,
              imageProvider,
              onViewerDismissed: () {
                print("Viewer dismissed");
              },
            );
          },
          child: Text('View Image'),
        ),
      ),
    );
  }
}
```

// The `main` function initializes the app and sets `MyApp` as the root widget.
// `MyApp` is a stateless widget that builds the main structure of the app using `MaterialApp`.
// `ImageGalleryScreen` is the home screen of the app, displaying a button to view an image.
// When the button is pressed, it triggers the `showImageViewer` function from the `easy_image_viewer` package.
// The `showImageViewer` function takes the current context and an `ImageProvider` to display the image.
// The viewer allows users to zoom and pan the image, enhancing the viewing experience.
// Once the viewer is dismissed, a message is printed to the console.

// Application Flow Summary:
// 1. The app starts with `MyApp`, which sets up the `MaterialApp` and theme.
// 2. `ImageGalleryScreen` is displayed, showing a button labeled "View Image".
// 3. On button press, the `showImageViewer` function is called, displaying the image in full screen.
// 4. Users can interact with the image using zoom and pan gestures.
// 5. Dismissing the viewer returns the user to the `ImageGalleryScreen`.

<-- END_MAIN -->
```
```markdown
<-- START_DESCRIPTION -->

# Vertical Picker Flutter Package: An Overview

The `vertical_picker` Flutter package is a versatile widget that allows developers to create a vertical scrolling picker. This package is particularly useful in scenarios where users need to select from a list of options, such as choosing a date, time, or any other set of values. The `vertical_picker` provides a smooth and intuitive interface, enhancing the user experience by allowing easy navigation through options.

## When to Use Vertical Picker

- **Date and Time Selection**: Ideal for applications that require users to select dates or times.
- **Custom Lists**: Useful for any custom list where users need to pick a single option from a set of values.
- **Form Inputs**: Can be integrated into forms where dropdowns or spinners are needed.

## Features

- **Customizable Appearance**: Allows customization of text style, background color, and more.
- **Smooth Scrolling**: Provides a seamless scrolling experience.
- **Easy Integration**: Simple to integrate into existing Flutter applications.
- **Cross-Platform Support**: Works on both Android and iOS platforms.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the Vertical Picker

In this section, we'll walk through the setup process for the `vertical_picker` package and demonstrate how to use it in a Flutter application.

## Installation

To use the `vertical_picker` package, add it to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  vertical_picker: ^1.0.0
```

Run `flutter pub get` to install the package.

## Platform-Specific Setup

### Android

No additional setup is required for Android. Ensure your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```gradle
minSdkVersion 21
```

### iOS

For iOS, ensure your `ios/Podfile` has platform set to at least 11.0:

```ruby
platform :ios, '11.0'
```

## Using the Vertical Picker

To use the `vertical_picker`, import it into your Dart file:

```dart
import 'package:vertical_picker/vertical_picker.dart';
```

### Basic Usage

Here's a simple example of how to use the `vertical_picker` in a widget:

```dart
VerticalPicker(
  items: List.generate(10, (index) => 'Item $index'),
  onSelectedItemChanged: (index) {
    print('Selected: $index');
  },
)
```

This creates a vertical picker with 10 items, and logs the selected index whenever the user changes the selection.

<-- END_TUTORIAL -->

<-- START_MAIN -->

# Complete Example: Flutter Main File

Below is a complete example demonstrating the key features of the `vertical_picker` package.

```dart
import 'package:flutter/material.dart';
import 'package:vertical_picker/vertical_picker.dart';

void main() => runApp(RealFlutterApp());

class RealFlutterApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Vertical Picker Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: PickerHomePage(),
    );
  }
}

class PickerHomePage extends StatefulWidget {
  @override
  _PickerHomePageState createState() => _PickerHomePageState();
}

class _PickerHomePageState extends State<PickerHomePage> {
  int _selectedItemIndex = 0; // State variable to hold the selected index

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Vertical Picker Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Selected Item: $_selectedItemIndex',
              style: TextStyle(fontSize: 24),
            ),
            SizedBox(height: 20),
            VerticalPicker(
              items: List.generate(10, (index) => 'Item $index'), // Generate 10 items
              onSelectedItemChanged: (index) {
                setState(() {
                  _selectedItemIndex = index; // Update the selected index
                });
              },
            ),
          ],
        ),
      ),
    );
  }
}
```

// The above code sets up a basic Flutter application using the `vertical_picker` package.
// It defines a `RealFlutterApp` class that serves as the entry point of the app.
// The `PickerHomePage` widget is the main screen, displaying the selected item index and the vertical picker.
// The `VerticalPicker` widget is configured with a list of 10 items, and updates the state when an item is selected.
// The `setState` method is used to update the UI with the new selected index.

<-- END_MAIN -->
```
<-- START_DESCRIPTION -->

# Free English Dictionary Flutter Package
=====================================

The `free_english_dictionary` Flutter package provides a comprehensive English dictionary that can be easily integrated into any Flutter application. This package is ideal for apps that require a dictionary feature, such as language learning apps, word games, or e-readers.

## Features

*   Comprehensive English dictionary with over 170,000 words
*   Definitions, synonyms, antonyms, and example sentences for each word
*   Support for word suggestions and auto-completion
*   Offline access, making it suitable for apps that require a dictionary feature without internet connectivity

## When to Use

*   Language learning apps that require a dictionary feature
*   Word games that need to verify word validity or provide definitions
*   E-readers that want to offer a built-in dictionary for users

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Free English Dictionary Package
================================================================

## Step 1: Add the Package to Your Flutter Project

Add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  free_english_dictionary: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:free_english_dictionary/free_english_dictionary.dart';
```

## Step 3: Initialize the Dictionary

Initialize the dictionary before using it:

```dart
void main() async {
  await Dictionary.instance.init();
  runApp(MyApp());
}
```

## Step 4: Use the Dictionary

Use the dictionary to look up words and retrieve their definitions:

```dart
Future<void> _lookupWord(String word) async {
  final definitions = await Dictionary.instance.lookup(word);
  if (definitions != null) {
    print(definitions);
  } else {
    print('Word not found');
  }
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:free_english_dictionary/free_english_dictionary.dart';

void main() async {
  await Dictionary.instance.init();
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final _textController = TextEditingController();
  String _definition = '';

  Future<void> _lookupWord() async {
    final word = _textController.text.trim();
    if (word.isEmpty) {
      return;
    }
    final definitions = await Dictionary.instance.lookup(word);
    if (definitions != null) {
      setState(() {
        _definition = definitions.join('\n');
      });
    } else {
      setState(() {
        _definition = 'Word not found';
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Real Flutter',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Real Flutter'),
        ),
        body: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            children: [
              TextField(
                controller: _textController,
                decoration: InputDecoration(
                  labelText: 'Enter a word',
                  border: OutlineInputBorder(),
                ),
              ),
              SizedBox(height: 16),
              ElevatedButton(
                onPressed: _lookupWord,
                child: Text('Lookup'),
              ),
              SizedBox(height: 16),
              Text(_definition),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user enters a word in the text field.
// 2. The user clicks the "Lookup" button.
// 3. The _lookupWord function is called, which retrieves the word from the text field.
// 4. The function looks up the word in the dictionary using the Dictionary.instance.lookup method.
// 5. If the word is found, the function sets the _definition state variable to the definitions of the word.
// 6. If the word is not found, the function sets the _definition state variable to "Word not found".
// 7. The UI is updated to display the definition of the word.

// In summary, this code provides a simple UI for the user to enter a word and lookup its definition in the dictionary.
```

<-- END_MAIN -->
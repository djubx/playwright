```markdown
<-- START_DESCRIPTION -->

# Pinch Zoom Flutter Package: An Overview

The `pinch_zoom` Flutter package is a powerful tool designed to enhance user interaction by allowing pinch-to-zoom functionality on widgets. This package is particularly useful in applications where users need to zoom in on images or other visual content, such as photo galleries, maps, or detailed diagrams.

## When to Use Pinch Zoom

- **Image Galleries**: Allow users to zoom in on images for a closer look.
- **Maps**: Enable zooming on map widgets for better navigation.
- **Product Details**: In e-commerce apps, users can zoom in on product images to see details.
- **Educational Apps**: Zoom in on diagrams or charts for detailed study.

## Features

- **Easy Integration**: Simple to add to any Flutter project.
- **Customizable**: Offers various customization options for zoom limits and animation.
- **Cross-Platform**: Works seamlessly on both Android and iOS.
- **Lightweight**: Minimal impact on app performance.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the Pinch Zoom Package

In this tutorial, we will walk through the process of setting up the `pinch_zoom` package in a Flutter project and demonstrate its usage.

## Setup Process

1. **Add Dependency**: First, add the `pinch_zoom` package to your `pubspec.yaml` file.

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     pinch_zoom: ^1.0.0
   ```

2. **Install Packages**: Run `flutter pub get` to install the new package.

3. **Import the Package**: In your Dart file, import the package.

   ```dart
   import 'package:pinch_zoom/pinch_zoom.dart';
   ```

## Platform-Specific Details

### Android

- Ensure your `minSdkVersion` in `android/app/build.gradle` is set to at least 18 to support pinch gestures.

  ```gradle
  defaultConfig {
      minSdkVersion 18
  }
  ```

### iOS

- No additional setup is required for iOS, as the package is compatible with the default configurations.

## Using the Package

To use the `pinch_zoom` package, wrap the widget you want to be zoomable with `PinchZoom`.

```dart
PinchZoom(
  child: Image.network('https://example.com/image.jpg'),
  resetDuration: const Duration(milliseconds: 100),
  maxScale: 2.5,
);
```

- **`child`**: The widget to be zoomed.
- **`resetDuration`**: Duration for the zoom-out animation.
- **`maxScale`**: Maximum zoom scale.

<-- END_TUTORIAL -->

<-- MAIN -->

# Complete Example: Flutter Main File

Below is a complete example demonstrating the use of the `pinch_zoom` package in a Flutter application.

```dart
import 'package:flutter/material.dart';
import 'package:pinch_zoom/pinch_zoom.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Pinch Zoom Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: ZoomDemoPage(),
    );
  }
}

class ZoomDemoPage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Pinch Zoom Example'),
      ),
      body: Center(
        // PinchZoom widget allows the child widget to be zoomable
        child: PinchZoom(
          child: Image.network('https://example.com/image.jpg'),
          resetDuration: const Duration(milliseconds: 100),
          maxScale: 2.5,
          onZoomStart: () {
            print('Zoom started');
          },
          onZoomEnd: () {
            print('Zoom ended');
          },
        ),
      ),
    );
  }
}

// Application Flow:
// 1. The main function initializes the app by calling runApp with MyApp.
// 2. MyApp is a StatelessWidget that sets up the MaterialApp with a title and theme.
// 3. The home property of MaterialApp is set to ZoomDemoPage, which is another StatelessWidget.
// 4. ZoomDemoPage builds a Scaffold with an AppBar and a Center widget.
// 5. Inside the Center widget, a PinchZoom widget wraps an Image widget.
// 6. The PinchZoom widget allows the image to be zoomed in and out with pinch gestures.
// 7. onZoomStart and onZoomEnd callbacks are used to print messages when zooming starts and ends.

```

// Summary of Application Flow:
// - The application starts with the `main` function, which calls `runApp` to launch the app.
// - `MyApp` sets up the main structure of the app using `MaterialApp`.
// - The `ZoomDemoPage` is the main screen, displaying an image that can be zoomed using the `PinchZoom` widget.
// - The `PinchZoom` widget provides interactive zooming capabilities, with optional callbacks for zoom events.

<-- END_MAIN -->
```
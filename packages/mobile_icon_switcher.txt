```markdown
<!-- START_DESCRIPTION -->
# Mobile Icon Switcher: A Flutter Package for Dynamic App Icons

The **mobile_icon_switcher** package is a powerful tool for Flutter developers looking to enhance their applications with dynamic icon switching capabilities. This package allows you to change the app icon based on specific conditions, such as user preferences or app states, providing a more personalized experience for users.

## When to Use This Package
- **User Customization**: Allow users to select their preferred app icon from a set of options.
- **Thematic Changes**: Change the app icon based on themes or modes (e.g., light/dark mode).
- **Feature Flags**: Indicate different features or versions of the app through distinct icons.

## Key Features
- **Dynamic Icon Switching**: Easily switch between multiple app icons.
- **Platform Support**: Works seamlessly on both Android and iOS.
- **User-Friendly API**: Simple methods to implement icon switching without complex configurations.

With these features, the mobile_icon_switcher package is an excellent choice for developers aiming to create a more engaging user experience.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Mobile Icon Switcher

## Installation
To get started with the mobile_icon_switcher package, add it to your `pubspec.yaml` file:

```yaml
dependencies:
  mobile_icon_switcher: ^latest_version
```

Make sure to replace `latest_version` with the most recent version available on [pub.dev](https://pub.dev/packages/mobile_icon_switcher).

## Platform-Specific Configuration

### Android
1. Open your `AndroidManifest.xml` file located at `android/app/src/main/AndroidManifest.xml`.
2. Add the following lines inside the `<application>` tag to define your app icons:

```xml
<activity
    android:name=".MainActivity"
    android:label="Your App Name"
    android:icon="@mipmap/ic_launcher">
    <meta-data
        android:name="com.google.android.gms.ads.APPLICATION_ID"
        android:value="YOUR_ADMOB_APP_ID"/>
</activity>
```

3. Create different launcher icons in the `mipmap` folders (e.g., `mipmap-mdpi`, `mipmap-hdpi`, etc.) and name them appropriately (e.g., `ic_launcher_icon1`, `ic_launcher_icon2`).

### iOS
1. Open your `Info.plist` file located at `ios/Runner/Info.plist`.
2. Add the following entries for each icon you want to use:

```xml
<key>CFBundleIcons</key>
<dict>
    <key>CFBundlePrimaryIcon</key>
    <dict>
        <key>CFBundleIconFiles</key>
        <array>
            <string>AppIcon</string>
            <string>AppIcon2</string>
        </array>
    </dict>
</dict>
```

3. Ensure you have the corresponding icon files in your `Assets.xcassets` folder.

## Using the Package
To use the mobile_icon_switcher package, you can follow this simple example:

```dart
import 'package:flutter/material.dart';
import 'package:mobile_icon_switcher/mobile_icon_switcher.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Variable to hold the current icon name
  String currentIcon = 'ic_launcher_icon1';

  // Method to switch icons
  void switchIcon() {
    setState(() {
      currentIcon = currentIcon == 'ic_launcher_icon1' ? 'ic_launcher_icon2' : 'ic_launcher_icon1';
    });
    MobileIconSwitcher.setIcon(currentIcon); // Call to switch the icon
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Mobile Icon Switcher Example')),
        body: Center(
          child: ElevatedButton(
            onPressed: switchIcon,
            child: Text('Switch Icon'),
          ),
        ),
      ),
    );
  }
}
```

In this example, we create a simple Flutter app with a button that switches the app icon when pressed. The `switchIcon` method toggles between two icons and updates the app icon using the `MobileIconSwitcher.setIcon` method.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Mobile Icon Switcher

```dart
import 'package:flutter/material.dart';
import 'package:mobile_icon_switcher/mobile_icon_switcher.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Variable to hold the current icon name
  String currentIcon = 'ic_launcher_icon1'; // Initial icon

  // Method to switch icons
  void switchIcon() {
    // Update the current icon based on the previous state
    setState(() {
      currentIcon = currentIcon == 'ic_launcher_icon1' ? 'ic_launcher_icon2' : 'ic_launcher_icon1';
    });
    // Call to switch the app icon
    MobileIconSwitcher.setIcon(currentIcon);
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Mobile Icon Switcher Example')),
        body: Center(
          child: ElevatedButton(
            onPressed: switchIcon, // Call switchIcon when button is pressed
            child: Text('Switch Icon'), // Button text
          ),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the RealFlutter widget, which is a StatefulWidget.
// 2. The _RealFlutterState class manages the state of the app, including the current icon.
// 3. The switchIcon method toggles the current icon between 'ic_launcher_icon1' and 'ic_launcher_icon2'.
// 4. When the button is pressed, the switchIcon method is called, updating the state and changing the app icon.
// 5. The app displays a button in the center of the screen, allowing users to switch icons dynamically.
```
<!-- END_MAIN -->
```

### Summary
In this blog post, we explored the **mobile_icon_switcher** Flutter package, detailing its features, installation process, and usage through a practical example. The provided code demonstrates how to implement dynamic icon switching in a Flutter application, enhancing user experience through customization. By following the steps outlined, developers can easily integrate this package into their projects and create engaging applications.
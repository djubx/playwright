# Flutter Package: xdg_icons

## <-- START_DESCRIPTION -->

### Description

The `xdg_icons` Flutter package provides a collection of icons that adhere to the XDG icon specification, which is widely used in Linux desktop environments. This package is particularly useful for developers looking to create applications that maintain a consistent look and feel across different platforms, especially when targeting Linux users. 

### When to Use

You might consider using `xdg_icons` in scenarios such as:
- Developing cross-platform applications that require a uniform icon set.
- Creating desktop applications for Linux that need to integrate seamlessly with the desktop environment.
- Enhancing the user interface of your Flutter app with a rich set of icons that are recognizable to Linux users.

### Features

- **Wide Range of Icons**: Access to a comprehensive set of icons that follow the XDG specifications.
- **Cross-Platform Compatibility**: Works seamlessly on Android, iOS, and desktop platforms.
- **Easy Integration**: Simple API for integrating icons into your Flutter applications.

## <-- END_DESCRIPTION -->

## <-- START_TUTORIAL -->

### Tutorial

#### Installation

To get started with the `xdg_icons` package, you need to add it to your `pubspec.yaml` file. Open your `pubspec.yaml` and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  xdg_icons: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command in your terminal to install the package:

```bash
flutter pub get
```

#### Platform-Specific Details

- **Android**: No additional configuration is required for Android. The package works out of the box.
- **iOS**: Similarly, no specific configurations are needed for iOS. Just ensure that your Flutter environment is set up correctly.

#### Usage

To use the icons in your Flutter application, you can import the package and utilize the provided icons as follows:

```dart
import 'package:xdg_icons/xdg_icons.dart';
```

You can then use the icons in your widgets. For example:

```dart
Icon(XDGIcons.home);
```

This will render the home icon from the XDG icon set.

## <-- END_TUTORIAL -->

## <-- START_MAIN -->

### Complete Example

Hereâ€™s a complete Flutter application that demonstrates how to use the `xdg_icons` package:

```dart
import 'package:flutter/material.dart';
import 'package:xdg_icons/xdg_icons.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'XDG Icons Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: Scaffold(
        appBar: AppBar(
          title: Text('XDG Icons Demo'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              // Displaying the home icon
              Icon(XDGIcons.home, size: 50, color: Colors.blue),
              SizedBox(height: 20),
              Text('Home Icon', style: TextStyle(fontSize: 20)),
              SizedBox(height: 40),
              // Displaying the settings icon
              Icon(XDGIcons.preferences_system, size: 50, color: Colors.green),
              SizedBox(height: 20),
              Text('Settings Icon', style: TextStyle(fontSize: 20)),
            ],
          ),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function is the entry point of the application, which calls runApp().
// 2. The RealFlutter class extends StatelessWidget and builds the main UI.
// 3. MaterialApp is used to set up the app's title and theme.
// 4. A Scaffold widget provides the structure for the app, including an AppBar and body.
// 5. The body contains a Center widget that centers its child widgets.
// 6. A Column widget is used to arrange the icons and text vertically.
// 7. Two icons from the xdg_icons package are displayed: a home icon and a settings icon, each followed by a text label.
// 8. SizedBox widgets are used to add spacing between the icons and text for better visual separation.
```

## <-- END_MAIN -->

### Summary

In this example, we created a simple Flutter application that demonstrates how to use the `xdg_icons` package. The application displays two icons: a home icon and a settings icon, each accompanied by a text label. The flow of the application is straightforward, starting from the `main` function, which initializes the app, to the `RealFlutter` class that builds the UI. The use of `xdg_icons` allows for a consistent and recognizable icon set, particularly beneficial for applications targeting Linux users.
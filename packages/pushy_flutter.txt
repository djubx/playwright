```markdown
<!-- START_DESCRIPTION -->
# Overview of the pushy_flutter Package

The `pushy_flutter` package is a powerful tool designed for Flutter developers who want to implement push notifications in their applications. It simplifies the process of integrating push notifications across both Android and iOS platforms, allowing developers to focus on building their app's core features rather than getting bogged down in the complexities of notification handling.

## When to Use `pushy_flutter`

You should consider using `pushy_flutter` when:
- You need to send real-time notifications to users.
- You want to enhance user engagement through timely updates.
- Your application requires background notifications to keep users informed.

## Key Features

- **Cross-Platform Support**: Works seamlessly on both Android and iOS.
- **Easy Integration**: Simple setup process with minimal configuration.
- **Custom Notification Handling**: Allows for customization of notification appearance and behavior.
- **Background Notifications**: Supports notifications even when the app is not in the foreground.
- **Rich Media Support**: Enables sending images, videos, and other media types with notifications.

Overall, `pushy_flutter` is an excellent choice for developers looking to implement push notifications efficiently in their Flutter applications.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using pushy_flutter

## Installation

To get started with `pushy_flutter`, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  pushy_flutter: ^latest_version
```

Make sure to replace `^latest_version` with the latest version available on [pub.dev](https://pub.dev/packages/pushy_flutter).

## Platform-Specific Configuration

### Android

1. **Update AndroidManifest.xml**: Add the necessary permissions and services in your `android/app/src/main/AndroidManifest.xml` file:

```xml
<manifest>
    <uses-permission android:name="android.permission.INTERNET"/>
    <uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED"/>
    
    <application>
        <service android:name="com.pushy.flutter.PushyService" android:exported="true"/>
        <receiver android:name="com.pushy.flutter.PushyReceiver" android:exported="true"/>
    </application>
</manifest>
```

2. **Firebase Setup**: If you are using Firebase for push notifications, ensure you have the `google-services.json` file in your `android/app` directory.

### iOS

1. **Update Info.plist**: Add the following keys to your `ios/Runner/Info.plist` file:

```xml
<key>UIBackgroundModes</key>
<array>
    <string>fetch</string>
    <string>remote-notification</string>
</array>
<key>FirebaseAppDelegateProxyEnabled</key>
<false/>
```

2. **Request Notification Permissions**: You will need to request permission to send notifications. This can be done in your Flutter code.

## Basic Usage

To use `pushy_flutter`, you need to initialize it and set up notification handlers. Hereâ€™s a simple example:

```dart
import 'package:flutter/material.dart';
import 'package:pushy_flutter/pushy_flutter.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  void initState() {
    super.initState();
    // Initialize Pushy
    PushyFlutter.register();
    
    // Set notification handler
    PushyFlutter.onNotificationReceived((notification) {
      // Handle the notification
      print("Notification received: ${notification['message']}");
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Pushy Flutter Example')),
        body: Center(child: Text('Welcome to Pushy Flutter!')),
      ),
    );
  }
}
```

In this example, we initialize the `pushy_flutter` package and set up a notification handler that prints the notification message to the console when a notification is received.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of pushy_flutter

```dart
import 'package:flutter/material.dart';
import 'package:pushy_flutter/pushy_flutter.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  void initState() {
    super.initState();
    // Initialize Pushy
    PushyFlutter.register();
    
    // Set notification handler
    PushyFlutter.onNotificationReceived((notification) {
      // Handle the notification
      print("Notification received: ${notification['message']}");
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Pushy Flutter Example')),
        body: Center(child: Text('Welcome to Pushy Flutter!')),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the RealFlutter widget.
// 2. In the RealFlutter widget, we create a stateful widget to manage the state.
// 3. In the initState method, we register the Pushy service to enable push notifications.
// 4. We set up a notification handler using PushyFlutter.onNotificationReceived.
// 5. When a notification is received, it triggers the callback, printing the notification message to the console.
// 6. The build method returns a simple MaterialApp with a Scaffold containing an AppBar and a centered text widget.
// 7. The app is now ready to receive push notifications, and the user will see a welcome message on the screen.
```
<!-- END_MAIN -->
```

This structured blog post provides a comprehensive overview of the `pushy_flutter` package, guiding developers through its features, setup, and usage with clear examples and explanations.
<-- START_DESCRIPTION -->

# Forme Flutter Package: A Comprehensive Overview
=====================================================

The Forme Flutter package is a powerful tool for building robust and scalable forms in Flutter applications. It provides a simple and intuitive API for creating, validating, and managing forms, making it an essential package for any Flutter developer.

### When to Use Forme

Forme is ideal for building complex forms with multiple fields, validation rules, and conditional logic. It's perfect for applications that require user input, such as registration forms, login forms, surveys, and more.

### Key Features

*   Simple and intuitive API for building forms
*   Support for multiple field types (text, email, password, etc.)
*   Built-in validation rules (required, email, password, etc.)
*   Conditional logic for showing/hiding fields based on user input
*   Support for custom validation rules and error messages

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using Forme
=============================

### Step 1: Add Forme to Your Project

Add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  forme: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import Forme

Import the Forme package in your Dart file:

```dart
import 'package:forme/forme.dart';
```

### Step 3: Create a Forme Form

Create a new instance of the `Forme` class and pass in a list of `FormeField` objects:

```dart
Forme forme = Forme(
  fields: [
    FormeField(
      name: 'username',
      type: FormeFieldType.text,
      validators: [
        FormeValidator.required(),
      ],
    ),
    FormeField(
      name: 'email',
      type: FormeFieldType.email,
      validators: [
        FormeValidator.required(),
        FormeValidator.email(),
      ],
    ),
  ],
);
```

### Step 4: Use the Forme Form in Your Widget Tree

Use the `Forme` widget to render the form:

```dart
Forme(
  forme: forme,
  child: Column(
    children: [
      FormeFieldWidget(
        field: forme.fields[0],
      ),
      FormeFieldWidget(
        field: forme.fields[1],
      ),
    ],
  ),
);
```

### Platform-Specific Details

*   Android: No additional setup required.
*   iOS: No additional setup required.

### Configurations and Optimizations

*   You can customize the appearance of the form fields by passing in a `FormeFieldConfig` object to the `FormeField` constructor.
*   You can also add custom validation rules and error messages by passing in a `FormeValidator` object to the `FormeField` constructor.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:forme/forme.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Forme Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _forme = Forme(
    fields: [
      FormeField(
        name: 'username',
        type: FormeFieldType.text,
        validators: [
          FormeValidator.required(),
        ],
      ),
      FormeField(
        name: 'email',
        type: FormeFieldType.email,
        validators: [
          FormeValidator.required(),
          FormeValidator.email(),
        ],
      ),
    ],
  );

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Forme Demo'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Forme(
          forme: _forme,
          child: Column(
            children: [
              FormeFieldWidget(
                field: _forme.fields[0],
              ),
              FormeFieldWidget(
                field: _forme.fields[1],
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  if (_forme.validate()) {
                    print('Form is valid');
                  } else {
                    print('Form is not valid');
                  }
                },
                child: Text('Submit'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and is presented with a form containing two fields: username and email.
// 2. The user enters their username and email address.
// 3. When the user clicks the submit button, the form is validated.
// 4. If the form is valid, a success message is printed to the console.
// 5. If the form is not valid, an error message is printed to the console.

// The form validation rules are as follows:
// 1. The username field is required.
// 2. The email field is required and must be a valid email address.

// The form is validated using the Forme package, which provides a simple and intuitive API for building and validating forms.
```

<-- END_MAIN -->
```markdown
<-- START_DESCRIPTION -->
# Overview of the `lamsz_quran_api` Flutter Package

The `lamsz_quran_api` Flutter package is a powerful tool designed for developers who want to integrate Quranic content into their Flutter applications. This package provides a seamless way to access Quranic verses, translations, and other related data through a simple API interface. 

## When to Use

This package is ideal for developers building Islamic applications that require access to Quranic text, such as:
- Quran reading apps
- Islamic educational apps
- Prayer and meditation apps
- Any app that requires Quranic references or translations

## Features

- **Easy Integration**: Quickly integrate Quranic content into your Flutter app with minimal setup.
- **Comprehensive Data**: Access to all 114 Surahs and their respective Ayahs.
- **Translations**: Support for multiple translations to cater to a diverse audience.
- **Search Functionality**: Built-in search to find specific verses or topics.
- **Offline Support**: Cache data for offline access, ensuring users can read the Quran without an internet connection.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the `lamsz_quran_api` Package

In this tutorial, we will walk through the process of setting up the `lamsz_quran_api` package in a Flutter project and demonstrate how to use its features.

## Setup Process

### Step 1: Add Dependency

First, add the `lamsz_quran_api` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  lamsz_quran_api: ^1.0.0
```

Run `flutter pub get` to install the package.

### Step 2: Platform-Specific Configuration

#### Android

Ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```gradle
android {
    defaultConfig {
        minSdkVersion 21
    }
}
```

#### iOS

For iOS, ensure that your `ios/Podfile` has platform set to at least 11.0:

```ruby
platform :ios, '11.0'
```

### Step 3: Import the Package

In your Dart file, import the package:

```dart
import 'package:lamsz_quran_api/lamsz_quran_api.dart';
```

## Using the Package

### Initialize the API

Create an instance of the `RealFlutter` class to start using the API:

```dart
final quranApi = RealFlutter();
```

### Fetch Surah Data

To fetch data for a specific Surah, use the following method:

```dart
var surah = await quranApi.getSurah(1); // Fetches Surah Al-Fatiha
```

### Search for Verses

You can search for specific verses using keywords:

```dart
var searchResults = await quranApi.searchVerses("mercy");
```

### Offline Caching

Enable offline caching to allow users to access data without an internet connection:

```dart
quranApi.enableOfflineCaching();
```

<-- END_TUTORIAL -->

<-- START_MAIN -->
```dart
import 'package:flutter/material.dart';
import 'package:lamsz_quran_api/lamsz_quran_api.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Quran App',
      theme: ThemeData(
        primarySwatch: Colors.green,
      ),
      home: QuranHomePage(),
    );
  }
}

class QuranHomePage extends StatefulWidget {
  @override
  _QuranHomePageState createState() => _QuranHomePageState();
}

class _QuranHomePageState extends State<QuranHomePage> {
  final RealFlutter quranApi = RealFlutter();
  List<String> verses = [];
  bool isLoading = true;

  @override
  void initState() {
    super.initState();
    fetchSurah();
  }

  // Fetches the first Surah (Al-Fatiha) and updates the state
  Future<void> fetchSurah() async {
    var surah = await quranApi.getSurah(1); // Fetch Surah Al-Fatiha
    setState(() {
      verses = surah.ayahs.map((ayah) => ayah.text).toList();
      isLoading = false;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Quran App'),
      ),
      body: isLoading
          ? Center(child: CircularProgressIndicator())
          : ListView.builder(
              itemCount: verses.length,
              itemBuilder: (context, index) {
                return ListTile(
                  title: Text(verses[index]),
                );
              },
            ),
    );
  }
}
```

// The application starts by running the `MyApp` class, which sets up the MaterialApp.
// The home page of the app is `QuranHomePage`, a stateful widget that manages the Quran data.
// In the `initState` method, we call `fetchSurah` to load the first Surah (Al-Fatiha) when the app starts.
// The `fetchSurah` method uses the `RealFlutter` instance to fetch Surah data and updates the state with the verses.
// The `build` method of `_QuranHomePageState` checks if data is still loading. If so, it shows a loading spinner.
// Once data is loaded, it displays the verses in a ListView, with each verse shown in a ListTile.

<-- END_MAIN -->
```
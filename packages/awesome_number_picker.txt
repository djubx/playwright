```markdown
<!-- START_DESCRIPTION -->
# Awesome Number Picker Flutter Package

The **awesome_number_picker** Flutter package is a versatile and user-friendly widget designed to facilitate the selection of numerical values in a visually appealing manner. This package is particularly useful in applications where users need to input or select numbers, such as in forms, settings, or games.

## When to Use This Package
You might consider using the **awesome_number_picker** package in scenarios such as:
- **Form Inputs**: When you need users to select quantities, such as age, quantity of items, or scores.
- **Games**: For selecting levels, scores, or any numerical input.
- **Settings**: Allowing users to set preferences that require numerical values, like volume levels or brightness.

## Features
- **Customizable UI**: The package allows for extensive customization of the number picker’s appearance.
- **Range Control**: You can set minimum and maximum values, ensuring users can only select valid numbers.
- **Increment/Decrement Options**: Users can easily increase or decrease the selected number with intuitive controls.
- **Responsive Design**: The widget adapts well to different screen sizes and orientations.

With these features, the **awesome_number_picker** package enhances user experience by providing a smooth and interactive way to select numbers.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Awesome Number Picker

## Step 1: Adding the Dependency
To get started, you need to add the **awesome_number_picker** package to your Flutter project. Open your `pubspec.yaml` file and add the following line under dependencies:

```yaml
dependencies:
  awesome_number_picker: ^1.0.0
```

Make sure to run `flutter pub get` to install the package.

## Step 2: Importing the Package
In your Dart file, import the package:

```dart
import 'package:awesome_number_picker/awesome_number_picker.dart';
```

## Step 3: Basic Usage
You can use the `NumberPicker` widget in your application. Here’s a simple example of how to implement it:

```dart
NumberPicker(
  value: 0, // Initial value
  minValue: 0, // Minimum value
  maxValue: 100, // Maximum value
  onChanged: (value) {
    // Handle the value change
    print(value);
  },
)
```

## Platform-Specific Details
### Android
For Android, ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file:

```gradle
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

### iOS
For iOS, you may need to set the deployment target in your `ios/Podfile`:

```ruby
platform :ios, '10.0'
```

## Step 4: Customization
You can customize the appearance of the number picker by using various properties:

```dart
NumberPicker(
  value: 0,
  minValue: 0,
  maxValue: 100,
  step: 1,
  textStyle: TextStyle(color: Colors.blue, fontSize: 24),
  selectedTextStyle: TextStyle(color: Colors.red, fontSize: 30),
  onChanged: (value) {
    print(value);
  },
)
```

This customization allows you to change the text color, size, and other visual aspects to fit your app's theme.

## Conclusion
With these steps, you can easily integrate the **awesome_number_picker** package into your Flutter application, providing users with a seamless way to select numerical values.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Awesome Number Picker

```dart
import 'package:flutter/material.dart';
import 'package:awesome_number_picker/awesome_number_picker.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Awesome Number Picker Demo',
      home: NumberPickerDemo(),
    );
  }
}

class NumberPickerDemo extends StatefulWidget {
  @override
  _NumberPickerDemoState createState() => _NumberPickerDemoState();
}

class _NumberPickerDemoState extends State<NumberPickerDemo> {
  int _currentValue = 0; // Variable to hold the current selected value

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Number Picker Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            // Display the current selected value
            Text(
              'Selected Value: $_currentValue',
              style: TextStyle(fontSize: 24),
            ),
            SizedBox(height: 20), // Add some space
            // Number Picker widget
            NumberPicker(
              value: _currentValue, // Set the current value
              minValue: 0, // Minimum value
              maxValue: 100, // Maximum value
              onChanged: (value) {
                // Update the state with the new value
                setState(() {
                  _currentValue = value; // Update the current value
                });
              },
            ),
          ],
        ),
      ),
    );
  }
}
```

```dart
// The application starts with the main function, which runs the MyApp widget.
// MyApp is a StatelessWidget that builds the MaterialApp with a title and home widget.
// The home widget is NumberPickerDemo, which is a StatefulWidget to manage the state of the selected number.
// Inside NumberPickerDemo, we define a variable _currentValue to hold the currently selected number.
// The build method returns a Scaffold with an AppBar and a Center widget containing a Column.
// The Column displays the currently selected value and the NumberPicker widget.
// The NumberPicker is configured with a minimum value of 0 and a maximum value of 100.
// When the user changes the number, the onChanged callback updates the _currentValue state, causing the UI to refresh and display the new value.
```
<!-- END_MAIN -->
```

This structured blog provides a comprehensive overview of the **awesome_number_picker** Flutter package, guiding users through its features, setup, and implementation with a complete example.
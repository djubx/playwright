```markdown
<!-- START_DESCRIPTION -->
# Insta Public API Flutter Package

The `insta_public_api` Flutter package is a powerful tool designed for developers looking to interact with Instagram's public API. This package allows you to fetch public data from Instagram profiles, including user information, media, and more, without requiring authentication. It is particularly useful for applications that need to display Instagram content or analyze public Instagram data.

## When to Use This Package
- **Social Media Applications**: If you're building an app that integrates social media content, this package can help you pull in Instagram data seamlessly.
- **Analytics Tools**: For applications focused on social media analytics, you can use this package to gather insights from public Instagram profiles.
- **Content Aggregators**: If your app aggregates content from various social media platforms, including Instagram, this package can simplify the process.

## Features
- **Fetch User Data**: Retrieve public user information such as username, biography, profile picture, and more.
- **Media Retrieval**: Access the media posted by a user, including images and videos.
- **Easy Integration**: Simple API calls that can be easily integrated into your Flutter application.
- **No Authentication Required**: Access public data without needing user authentication, making it easier to implement.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Insta Public API Package

## Installation
To get started with the `insta_public_api` package, you need to add it to your `pubspec.yaml` file. Open your `pubspec.yaml` and add the following line under dependencies:

```yaml
dependencies:
  insta_public_api: ^latest_version
```

Make sure to replace `latest_version` with the most recent version available on [pub.dev](https://pub.dev/packages/insta_public_api).

After adding the dependency, run the following command in your terminal to install the package:

```bash
flutter pub get
```

## Platform-Specific Configuration
### Android
For Android, ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file:

```gradle
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

### iOS
For iOS, you may need to update your `Info.plist` to allow network requests. Add the following lines to your `ios/Runner/Info.plist`:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

## Using the Package
Once the package is installed and configured, you can start using it in your Flutter application. Below is a simple example of how to fetch and display user data from Instagram.

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of Using Insta Public API

```dart
import 'package:flutter/material.dart';
import 'package:insta_public_api/insta_public_api.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Insta Public API Example',
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Variable to hold user data
  UserData? userData;

  @override
  void initState() {
    super.initState();
    // Fetch user data when the widget is initialized
    fetchUserData();
  }

  // Function to fetch user data from Instagram
  Future<void> fetchUserData() async {
    // Create an instance of InstaPublicApi
    final api = InstaPublicApi();

    // Fetch user data by username
    userData = await api.getUserData('instagram_username'); // Replace with a valid username

    // Update the state to reflect the fetched data
    setState(() {});
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Insta Public API Example'),
      ),
      body: userData == null
          ? Center(child: CircularProgressIndicator()) // Show loading indicator while fetching data
          : Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                // Display user profile picture
                Image.network(userData!.profilePictureUrl),
                SizedBox(height: 10),
                // Display username
                Text(userData!.username, style: TextStyle(fontSize: 24)),
                SizedBox(height: 10),
                // Display biography
                Text(userData!.biography),
              ],
            ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the MyApp widget, which sets up the MaterialApp.
// 2. The RealFlutter widget is created, which is a StatefulWidget.
// 3. In the initState method, fetchUserData is called to retrieve user data from Instagram.
// 4. The fetchUserData function creates an instance of InstaPublicApi and calls getUserData with a specified username.
// 5. Once the data is fetched, the state is updated, triggering a rebuild of the widget.
// 6. If userData is null, a loading indicator is displayed. Once data is available, the user's profile picture, username, and biography are displayed.
```
<!-- END_MAIN -->
``` 

This structured blog post provides a comprehensive overview of the `insta_public_api` Flutter package, guiding developers through its features, setup, and practical usage with a complete example.
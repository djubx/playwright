<-- START_DESCRIPTION -->
# ts_logger Flutter Package: A Comprehensive Logging Solution
===========================================================

The `ts_logger` Flutter package is a powerful logging tool that enables developers to track and debug their applications efficiently. It provides a simple and intuitive API for logging events, errors, and other information, making it easier to identify and resolve issues.

### When to Use `ts_logger`

*   Debugging: Use `ts_logger` to log events, variables, and errors to understand the flow of your application and identify issues.
*   Error tracking: Log errors and exceptions to track and resolve crashes and unexpected behavior.
*   Performance monitoring: Log performance metrics, such as response times and memory usage, to optimize your application.

### Features

*   **Log levels**: `ts_logger` supports different log levels, including debug, info, warning, error, and critical.
*   **Customizable output**: Configure the log output to suit your needs, including log format, date and time format, and output destination.
*   **Platform-specific logging**: `ts_logger` supports platform-specific logging for Android and iOS.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->
# Setting Up and Using `ts_logger`
==============================

### Step 1: Add `ts_logger` to Your Project

Add the `ts_logger` package to your `pubspec.yaml` file:

```yml
dependencies:
  ts_logger: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import `ts_logger`

Import the `ts_logger` package in your Dart file:

```dart
import 'package:ts_logger/ts_logger.dart';
```

### Step 3: Initialize `ts_logger`

Initialize `ts_logger` with the desired log level and output configuration:

```dart
void main() {
  TsLogger logger = TsLogger(
    logLevel: TsLogLevel.debug,
    output: TsLoggerOutput.console,
  );
  // ...
}
```

### Step 4: Log Events and Errors

Use the `log` method to log events and errors:

```dart
void main() {
  // ...
  logger.log(TsLogLevel.info, 'App started');
  try {
    // Code that may throw an error
  } catch (e) {
    logger.log(TsLogLevel.error, 'Error occurred: $e');
  }
}
```

### Platform-Specific Logging

For Android and iOS, you can use platform-specific logging:

```dart
import 'package:ts_logger/ts_logger.dart';
import 'package:ts_logger/ts_logger_android.dart';
import 'package:ts_logger/ts_logger_ios.dart';

void main() {
  TsLogger logger;
  if (Platform.isAndroid) {
    logger = TsLoggerAndroid(
      logLevel: TsLogLevel.debug,
      output: TsLoggerOutput.console,
    );
  } else if (Platform.isIOS) {
    logger = TsLoggerIOS(
      logLevel: TsLogLevel.debug,
      output: TsLoggerOutput.console,
    );
  } else {
    logger = TsLogger(
      logLevel: TsLogLevel.debug,
      output: TsLoggerOutput.console,
    );
  }
  // ...
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->
```dart
import 'package:flutter/material.dart';
import 'package:ts_logger/ts_logger.dart';

void main() {
  // Initialize TsLogger with the desired log level and output configuration
  TsLogger logger = TsLogger(
    logLevel: TsLogLevel.debug,
    output: TsLoggerOutput.console,
  );

  // Log app start event
  logger.log(TsLogLevel.info, 'App started');

  // Run the app
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'TsLogger Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  int _counter = 0;

  void _incrementCounter() {
    // Log counter increment event
    TsLogger logger = TsLogger(
      logLevel: TsLogLevel.debug,
      output: TsLoggerOutput.console,
    );
    logger.log(TsLogLevel.debug, 'Counter incremented');

    setState(() {
      _counter++;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('TsLogger Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'You have pushed the button this many times:',
            ),
            Text(
              '$_counter',
              style: Theme.of(context).textTheme.headline4,
            ),
          ],
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _incrementCounter,
        tooltip: 'Increment',
        child: Icon(Icons.add),
      ),
    );
  }
}
```
// The app starts by initializing TsLogger with the desired log level and output configuration.
// It then logs the app start event and runs the app.
// When the user increments the counter, it logs the counter increment event.
// The app uses TsLogger to log events and errors, making it easier to debug and track issues.

// The app flow is as follows:
// 1. The app starts and initializes TsLogger.
// 2. It logs the app start event.
// 3. The user increments the counter.
// 4. It logs the counter increment event.
// 5. The app updates the counter display.

// By using TsLogger, the app can track and debug events and errors, making it easier to identify and resolve issues.

<-- END_MAIN -->
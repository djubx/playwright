<-- START_DESCRIPTION -->

# Country State Picker Flutter Package
=====================================

The `country_state_picker` Flutter package provides a simple and efficient way to display a list of countries and their corresponding states. This package is ideal for applications that require users to select their country and state, such as e-commerce apps, travel apps, or any other app that requires geographic information.

## Features

*   Displays a list of countries and their corresponding states
*   Allows users to select a country and state
*   Supports both Android and iOS platforms
*   Easy to integrate and customize

## When to Use

*   When you need to collect geographic information from users
*   When you want to provide a simple and efficient way for users to select their country and state
*   When you need a customizable solution for displaying countries and states

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Country State Picker Package
=============================================================

## Step 1: Add the Package to Your Project

To use the `country_state_picker` package, you need to add it to your project. Open your `pubspec.yaml` file and add the following line under the `dependencies` section:

```yml
dependencies:
  flutter:
    sdk: flutter
  country_state_picker: ^1.0.0
```

Then, run `flutter pub get` in your terminal to get the package.

## Step 2: Import the Package

To use the package, you need to import it in your Dart file. Add the following line at the top of your file:

```dart
import 'package:country_state_picker/country_state_picker.dart';
```

## Step 3: Use the Package

To display the country and state picker, you can use the `CountryStatePicker` widget. Here is an example:

```dart
CountryStatePicker(
  onCountryChanged: (country) {
    print(country);
  },
  onStateChanged: (state) {
    print(state);
  },
)
```

This will display a list of countries and their corresponding states. When a user selects a country or state, the `onCountryChanged` and `onStateChanged` callbacks will be called, respectively.

## Platform-Specific Details

The `country_state_picker` package works on both Android and iOS platforms. However, you need to add the following lines to your `AndroidManifest.xml` file to make it work on Android:

```xml
<uses-permission android:name="android.permission.INTERNET" />
```

You don't need to do anything special for iOS.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:country_state_picker/country_state_picker.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  String _selectedCountry;
  String _selectedState;

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Country State Picker Demo'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              CountryStatePicker(
                onCountryChanged: (country) {
                  setState(() {
                    _selectedCountry = country;
                  });
                  print(country);
                },
                onStateChanged: (state) {
                  setState(() {
                    _selectedState = state;
                  });
                  print(state);
                },
              ),
              SizedBox(height: 20),
              Text('Selected Country: $_selectedCountry'),
              Text('Selected State: $_selectedState'),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app and is presented with a list of countries.
// 2. The user selects a country from the list.
// 3. The `onCountryChanged` callback is called with the selected country.
// 4. The selected country is stored in the `_selectedCountry` variable.
// 5. The user is then presented with a list of states for the selected country.
// 6. The user selects a state from the list.
// 7. The `onStateChanged` callback is called with the selected state.
// 8. The selected state is stored in the `_selectedState` variable.
// 9. The selected country and state are displayed on the screen.

// In summary, the user selects a country and then a state, and the selected country and state are displayed on the screen.
```

<-- END_MAIN -->
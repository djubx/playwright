<-- START_DESCRIPTION -->

# Flutter ECharts Package
==========================

The `flutter_echarts` package is a powerful and flexible charting library for Flutter applications. It provides a wide range of chart types, including line charts, bar charts, scatter charts, and more. With its rich set of features and customization options, `flutter_echarts` is an ideal choice for data visualization in Flutter apps.

## When to Use

`flutter_echarts` is suitable for various use cases, such as:

* Displaying statistical data in a visually appealing way
* Creating interactive dashboards for data analysis
* Building data-driven applications, such as stock market trackers or weather forecasts
* Enhancing user engagement with animated charts and graphs

## Key Features

* Supports multiple chart types, including line, bar, scatter, and more
* Customizable chart styles, colors, and fonts
* Interactive charts with zooming, panning, and clicking events
* Supports real-time data updates and animations
* Compatible with both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up Flutter ECharts
=============================

To use `flutter_echarts` in your Flutter project, follow these steps:

### Step 1: Add the Package to Your Project

Add the following dependency to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_echarts: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the `flutter_echarts` package in your Dart file:
```dart
import 'package:flutter_echarts/flutter_echarts.dart';
```
### Step 3: Create a Chart

Create a chart by using the `ECharts` widget:
```dart
ECharts(
  option: {
    'xAxis': {
      'type': 'category',
      'data': ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']
    },
    'yAxis': {
      'type': 'value'
    },
    'series': [
      {
        'data': [820, 932, 901, 934, 1290, 1330, 1320],
        'type': 'line'
      }
    ]
  },
)
```
### Platform-Specific Details

* For Android, make sure to add the following line to your `AndroidManifest.xml` file:
```xml
<application
  ...
  android:hardwareAccelerated="true"
  ...
>
```
* For iOS, add the following line to your `Info.plist` file:
```xml
<key>UIHardwareAcceleration</key>
<true/>
```
### Optimizations

* To improve performance, use the `ECharts` widget with a `RepaintBoundary` widget:
```dart
RepaintBoundary(
  child: ECharts(
    // ...
  ),
)
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_echarts/flutter_echarts.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter ECharts Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter ECharts Demo'),
      ),
      body: Center(
        child: ECharts(
          option: {
            'xAxis': {
              'type': 'category',
              'data': ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']
            },
            'yAxis': {
              'type': 'value'
            },
            'series': [
              {
                'data': [820, 932, 901, 934, 1290, 1330, 1320],
                'type': 'line'
              }
            ]
          },
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app, and the `MyApp` widget is created.
// 2. The `MyApp` widget builds the `MaterialApp` widget, which is the root of the app.
// 3. The `MaterialApp` widget builds the `MyHomePage` widget, which is the home page of the app.
// 4. The `MyHomePage` widget builds the `Scaffold` widget, which is the basic material design layout structure.
// 5. The `Scaffold` widget builds the `AppBar` widget, which is the top app bar.
// 6. The `Scaffold` widget also builds the `Center` widget, which centers its child.
// 7. The `Center` widget builds the `ECharts` widget, which is the chart.
// 8. The `ECharts` widget builds the chart based on the options provided.
```

<-- END_MAIN -->
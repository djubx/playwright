<-- START_DESCRIPTION -->

# Flutter Text Drawable Package
================================

The `flutter_text_drawable` package is a powerful tool for creating text-based graphics in Flutter applications. It allows developers to draw text on a canvas, providing a high degree of customization and flexibility.

## When to Use This Package
---------------------------

This package is ideal for creating custom graphics, such as:

*   Text-based logos or icons
*   Customizable text-based buttons
*   Text-based animations

## Features
------------

*   **Text drawing**: Draw text on a canvas with customizable font, size, color, and alignment.
*   **Text styling**: Apply various text styles, such as bold, italic, and underline.
*   **Text alignment**: Align text horizontally and vertically.
*   **Customizable canvas**: Customize the canvas size, color, and background image.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Using the Flutter Text Drawable Package
=====================================================

## Step 1: Add the Package to Your Project
-----------------------------------------

Add the `flutter_text_drawable` package to your `pubspec.yaml` file:

```yml
dependencies:
  flutter_text_drawable: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Step 2: Import the Package
---------------------------

Import the package in your Dart file:

```dart
import 'package:flutter_text_drawable/flutter_text_drawable.dart';
```

## Step 3: Create a Text Drawable
------------------------------

Create a `TextDrawable` widget:

```dart
TextDrawable(
  text: 'Hello, World!',
  fontSize: 24,
  color: Colors.black,
  alignment: Alignment.center,
)
```

## Platform-Specific Details
---------------------------

### Android

No additional configuration is required for Android.

### iOS

No additional configuration is required for iOS.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_text_drawable/flutter_text_drawable.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Text Drawable Demo',
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Text Drawable Demo'),
      ),
      body: Center(
        child: TextDrawable(
          // Set the text to be drawn
          text: 'Hello, World!',
          // Set the font size
          fontSize: 48,
          // Set the text color
          color: Colors.blue,
          // Set the text alignment
          alignment: Alignment.center,
          // Set the canvas size
          width: 200,
          height: 100,
          // Set the canvas background color
          backgroundColor: Colors.white,
        ),
      ),
    );
  }
}

// The application flow:
// 1. The user runs the app.
// 2. The app displays a scaffold with an app bar and a center-aligned TextDrawable widget.
// 3. The TextDrawable widget draws the text 'Hello, World!' on a canvas.
// 4. The text is displayed with a font size of 48, blue color, and center alignment.
// 5. The canvas size is set to 200x100 pixels with a white background color.
// 6. The user can view the drawn text on the canvas.

// Final summary:
// This code demonstrates the use of the Flutter Text Drawable package to draw text on a canvas.
// The TextDrawable widget provides various customization options, such as font size, color, alignment, and canvas size.
// The code displays a center-aligned text on a canvas with a white background color.
```

<-- END_MAIN -->
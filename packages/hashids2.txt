```markdown
<-- START_DESCRIPTION -->

# Hashids2 Flutter Package: An Overview

The `hashids2` Flutter package is a powerful tool designed to encode and decode unique identifiers into short, non-sequential strings. This package is particularly useful when you need to obfuscate database IDs in URLs or API responses, providing a layer of security and privacy.

## When to Use Hashids2

- **URL Shortening**: Convert long numeric IDs into short, human-readable strings for cleaner URLs.
- **Data Obfuscation**: Hide sensitive data by encoding IDs in API responses.
- **Unique Identifiers**: Generate unique, non-sequential identifiers for various application needs.

## Features

- **Customizable Alphabet**: Define your own set of characters for encoding.
- **Minimum Hash Length**: Specify a minimum length for the generated hash.
- **Salt Support**: Use a salt to ensure unique hash generation for different applications.
- **Cross-Platform**: Works seamlessly on both Android and iOS platforms.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using Hashids2 in Flutter

In this tutorial, we will walk through the setup process for the `hashids2` package and demonstrate how to use it in a Flutter application.

## Installation

Add the `hashids2` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  hashids2: ^2.0.0
```

Run `flutter pub get` to install the package.

## Basic Usage

To use `hashids2`, you need to import the package and create an instance of the `HashIds` class. Here, we'll use `RealFlutter` as the main class name for demonstration purposes.

```dart
import 'package:hashids2/hashids2.dart';

class RealFlutter {
  final HashIds hashids;

  RealFlutter({String salt = '', int minHashLength = 0, String alphabet = ''})
      : hashids = HashIds(
          salt: salt,
          minHashLength: minHashLength,
          alphabet: alphabet,
        );

  String encode(int id) {
    return hashids.encode([id]);
  }

  int decode(String hash) {
    return hashids.decode(hash).first;
  }
}
```

## Platform-Specific Details

### Android

No additional configuration is required for Android. Ensure your `minSdkVersion` is set to at least 16 in `android/app/build.gradle`.

### iOS

Ensure your iOS deployment target is set to at least 9.0 in `ios/Podfile`:

```ruby
platform :ios, '9.0'
```

## Optimizations

- **Performance**: Use a consistent salt and alphabet to optimize hash generation and decoding.
- **Security**: Regularly update the salt to enhance security.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:hashids2/hashids2.dart';

// Main class demonstrating the use of hashids2
class RealFlutter {
  final HashIds hashids;

  // Constructor to initialize HashIds with optional parameters
  RealFlutter({String salt = '', int minHashLength = 0, String alphabet = ''})
      : hashids = HashIds(
          salt: salt,
          minHashLength: minHashLength,
          alphabet: alphabet,
        );

  // Method to encode an integer ID into a hash
  String encode(int id) {
    return hashids.encode([id]);
  }

  // Method to decode a hash back into an integer ID
  int decode(String hash) {
    return hashids.decode(hash).first;
  }
}

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Hashids2 Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: HashidsDemoPage(),
    );
  }
}

class HashidsDemoPage extends StatefulWidget {
  @override
  _HashidsDemoPageState createState() => _HashidsDemoPageState();
}

class _HashidsDemoPageState extends State<HashidsDemoPage> {
  final RealFlutter realFlutter = RealFlutter(salt: 'mySalt', minHashLength: 8);
  String encoded = '';
  int decoded = 0;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Hashids2 Demo'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            TextField(
              decoration: InputDecoration(labelText: 'Enter ID to encode'),
              keyboardType: TextInputType.number,
              onSubmitted: (value) {
                setState(() {
                  encoded = realFlutter.encode(int.parse(value));
                });
              },
            ),
            SizedBox(height: 20),
            Text('Encoded: $encoded'),
            SizedBox(height: 20),
            TextField(
              decoration: InputDecoration(labelText: 'Enter hash to decode'),
              onSubmitted: (value) {
                setState(() {
                  decoded = realFlutter.decode(value);
                });
              },
            ),
            SizedBox(height: 20),
            Text('Decoded: $decoded'),
          ],
        ),
      ),
    );
  }
}

// Application Flow:
// 1. The RealFlutter class is initialized with a salt and minimum hash length.
// 2. The MyApp widget sets up the MaterialApp and home page.
// 3. HashidsDemoPage provides a UI for encoding and decoding operations.
// 4. Users input an ID to encode, which updates the encoded state.
// 5. Users input a hash to decode, which updates the decoded state.
// 6. The UI displays the results of encoding and decoding operations.
```

<-- END_MAIN -->
```
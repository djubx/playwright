<-- START_DESCRIPTION -->

# Flutter Bluetooth Printer Package
=====================================

The `flutter_bluetooth_printer` package allows you to print documents and images from your Flutter app using a Bluetooth printer. This package is ideal for applications that require printing receipts, invoices, or other documents on the go.

### Features

*   Supports printing text, images, and barcodes
*   Compatible with Android and iOS devices
*   Easy to use and integrate into your existing Flutter app

### When to Use This Package

This package is perfect for applications that require printing documents or images in various settings, such as:

*   Point of Sale (POS) systems
*   Inventory management apps
*   Mobile payment apps
*   Healthcare and medical apps

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `flutter_bluetooth_printer` package, follow these steps:

### Step 1: Add the Package to Your pubspec.yaml File

```yml
dependencies:
  flutter_bluetooth_printer: ^1.0.0
```

### Step 2: Import the Package in Your Dart File

```dart
import 'package:flutter_bluetooth_printer/flutter_bluetooth_printer.dart';
```

### Step 3: Initialize the Printer

```dart
FlutterBluetoothPrinter _printer = FlutterBluetoothPrinter();
```

### Platform-Specific Details

#### Android

*   Make sure to add the following permissions to your `AndroidManifest.xml` file:

    ```xml
<uses-permission android:name="android.permission.BLUETOOTH" />
<uses-permission android:name="android.permission.BLUETOOTH_ADMIN" />
```

*   If you're targeting Android 6.0 (API level 23) or higher, you need to request location permission at runtime:

    ```dart
import 'package:location/location.dart';

Location _location = Location();

Future<void> _requestLocationPermission() async {
  bool _serviceEnabled;
  PermissionStatus _permissionGranted;

  _serviceEnabled = await _location.serviceEnabled();
  if (!_serviceEnabled) {
    _serviceEnabled = await _location.requestService();
    if (!_serviceEnabled) {
      return;
    }
  }

  _permissionGranted = await _location.hasPermission();
  if (_permissionGranted == PermissionStatus.denied) {
    _permissionGranted = await _location.requestPermission();
    if (_permissionGranted != PermissionStatus.granted) {
      return;
    }
  }
}
```

#### iOS

*   Make sure to add the `NSBluetoothAlwaysUsageDescription` key to your `Info.plist` file:

    ```xml
<key>NSBluetoothAlwaysUsageDescription</key>
<string>This app needs access to Bluetooth</string>
```

### Required Configurations and Optimizations

*   Make sure to handle printer errors and exceptions properly.
*   Optimize your printing layout and design for better performance.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_bluetooth_printer/flutter_bluetooth_printer.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Bluetooth Printer Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  FlutterBluetoothPrinter _printer = FlutterBluetoothPrinter();

  @override
  void initState() {
    super.initState();
    _initPrinter();
  }

  Future<void> _initPrinter() async {
    // Initialize the printer
    await _printer.initPrinter();
  }

  Future<void> _printDocument() async {
    // Create a new document
    final document = await _printer.createDocument(
      paperSize: PaperSize.mm80,
      margins: Margins.all(10),
    );

    // Add text to the document
    await document.addText(
      'Hello, World!',
      style: TextStyle(fontSize: 24),
    );

    // Add an image to the document
    final image = await _printer.createImage(
      'assets/image.png',
      width: 100,
      height: 100,
    );
    await document.addImage(image);

    // Print the document
    await _printer.printDocument(document);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Bluetooth Printer Demo'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: _printDocument,
          child: Text('Print Document'),
        ),
      ),
    );
  }
}

// Application flow:
// 1. Initialize the printer in the initState method.
// 2. Create a new document using the createDocument method.
// 3. Add text and images to the document using the addText and addImage methods.
// 4. Print the document using the printDocument method.
// 5. Handle printer errors and exceptions properly.
// 6. Optimize the printing layout and design for better performance.

```

<-- END_MAIN -->
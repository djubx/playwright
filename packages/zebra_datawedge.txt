<-- START_DESCRIPTION -->

# Zebra DataWedge Flutter Package
=====================================

The `zebra_datawedge` Flutter package provides a simple and efficient way to integrate Zebra's DataWedge barcode scanning technology into your Flutter applications. DataWedge is a robust and reliable barcode scanning solution that allows you to quickly and easily capture data from various types of barcodes.

## When to Use This Package
---------------------------

You should use this package when you need to integrate barcode scanning capabilities into your Flutter application, particularly if you are targeting Zebra devices. This package is ideal for applications that require fast and accurate barcode scanning, such as inventory management, asset tracking, and point-of-sale systems.

## Features
------------

The `zebra_datawedge` package provides the following features:

*   Support for multiple barcode formats, including EAN, UPC, Code 128, and more
*   Automatic barcode detection and scanning
*   Customizable scanning settings, such as beep volume and vibration
*   Support for both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
=====================

To use the `zebra_datawedge` package in your Flutter application, follow these steps:

### Step 1: Add the Package to Your Project

Add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  zebra_datawedge: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:zebra_datawedge/zebra_datawedge.dart';
```

### Step 3: Initialize the DataWedge

Initialize the DataWedge by calling the `init` method:

```dart
await ZebraDataWedge.init();
```

### Step 4: Configure the Scanning Settings

Configure the scanning settings by calling the `setConfig` method:

```dart
await ZebraDataWedge.setConfig(
  ZebraDataWedgeConfig(
    beepVolume: 100,
    vibration: true,
  ),
);
```

### Step 5: Start Scanning

Start scanning by calling the `startScan` method:

```dart
await ZebraDataWedge.startScan();
```

### Step 6: Handle Scan Results

Handle scan results by listening to the `onScanResult` event:

```dart
ZebraDataWedge.onScanResult.listen((result) {
  print('Scan result: ${result.barcode}');
});
```

### Platform-Specific Details

#### Android

On Android, you need to add the following permissions to your `AndroidManifest.xml` file:

```xml
<uses-permission android:name="android.permission.CAMERA" />
<uses-permission android:name="android.permission.VIBRATE" />
```

#### iOS

On iOS, you need to add the following permissions to your `Info.plist` file:

```xml
<key>NSCameraUsageDescription</key>
<string>This app needs camera access to scan barcodes</string>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:zebra_datawedge/zebra_datawedge.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatefulWidget {
  @override
  _MyAppState createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  String _scanResult = '';

  @override
  void initState() {
    super.initState();
    _initDataWedge();
  }

  Future<void> _initDataWedge() async {
    // Initialize the DataWedge
    await ZebraDataWedge.init();

    // Configure the scanning settings
    await ZebraDataWedge.setConfig(
      ZebraDataWedgeConfig(
        beepVolume: 100,
        vibration: true,
      ),
    );

    // Listen to scan results
    ZebraDataWedge.onScanResult.listen((result) {
      setState(() {
        _scanResult = result.barcode;
      });
    });
  }

  Future<void> _startScan() async {
    // Start scanning
    await ZebraDataWedge.startScan();
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Zebra DataWedge Demo'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Text('Scan result: $_scanResult'),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _startScan,
                child: Text('Start Scan'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and the DataWedge is initialized.
// 2. The scanning settings are configured.
// 3. The user clicks the "Start Scan" button to start scanning.
// 4. The DataWedge scans a barcode and returns the result.
// 5. The result is displayed on the screen.
// 6. The user can repeat steps 3-5 to scan multiple barcodes.

// The code flow is as follows:
// 1. The `initState` method is called when the app is launched.
// 2. The `_initDataWedge` method is called to initialize the DataWedge.
// 3. The scanning settings are configured using the `setConfig` method.
// 4. The `onScanResult` event is listened to receive scan results.
// 5. The `_startScan` method is called when the user clicks the "Start Scan" button.
// 6. The `startScan` method is called to start scanning.
// 7. The scan result is received and displayed on the screen.

```

<-- END_MAIN -->
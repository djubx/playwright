<-- START_DESCRIPTION -->

# Easy Quiz Game Flutter Package
=====================================

The `easy_quiz_game` Flutter package is a simple and intuitive library for creating quiz games in Flutter applications. It provides a set of pre-built widgets and utilities to help developers quickly and easily create engaging quiz games.

### When to Use This Package

This package is ideal for developers who want to create a quiz game in their Flutter application without having to build everything from scratch. It's perfect for:

* Creating a simple quiz game with multiple questions and answers
* Implementing a scoring system to track user progress
* Customizing the look and feel of the quiz game to match your app's design

### Features

The `easy_quiz_game` package includes the following features:

* Pre-built quiz game widgets for displaying questions and answers
* Scoring system to track user progress
* Customizable design and layout
* Support for multiple question types (e.g. multiple choice, true/false)

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `easy_quiz_game` package in your Flutter application, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  easy_quiz_game: ^1.0.0
```
### Step 2: Import the Package in Your Dart File

Import the package in your Dart file:
```dart
import 'package:easy_quiz_game/easy_quiz_game.dart';
```
### Step 3: Create a Quiz Game Instance

Create a new instance of the `QuizGame` class:
```dart
QuizGame quizGame = QuizGame();
```
### Step 4: Add Questions to the Quiz Game

Add questions to the quiz game using the `addQuestion` method:
```dart
quizGame.addQuestion(
  Question(
    text: 'What is the capital of France?',
    answers: [
      Answer(text: 'Paris', isCorrect: true),
      Answer(text: 'London', isCorrect: false),
      Answer(text: 'Berlin', isCorrect: false),
    ],
  ),
);
```
### Step 5: Display the Quiz Game

Display the quiz game using the `QuizGameWidget`:
```dart
QuizGameWidget(
  quizGame: quizGame,
  onAnswerSelected: (answer) {
    // Handle answer selection
  },
)
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:easy_quiz_game/easy_quiz_game.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Easy Quiz Game Demo',
      home: QuizGameDemo(),
    );
  }
}

class QuizGameDemo extends StatefulWidget {
  @override
  _QuizGameDemoState createState() => _QuizGameDemoState();
}

class _QuizGameDemoState extends State<QuizGameDemo> {
  QuizGame _quizGame;

  @override
  void initState() {
    super.initState();
    _quizGame = QuizGame();

    // Add questions to the quiz game
    _quizGame.addQuestion(
      Question(
        text: 'What is the capital of France?',
        answers: [
          Answer(text: 'Paris', isCorrect: true),
          Answer(text: 'London', isCorrect: false),
          Answer(text: 'Berlin', isCorrect: false),
        ],
      ),
    );

    _quizGame.addQuestion(
      Question(
        text: 'What is the largest planet in our solar system?',
        answers: [
          Answer(text: 'Earth', isCorrect: false),
          Answer(text: 'Saturn', isCorrect: false),
          Answer(text: 'Jupiter', isCorrect: true),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Easy Quiz Game Demo'),
      ),
      body: QuizGameWidget(
        quizGame: _quizGame,
        onAnswerSelected: (answer) {
          // Handle answer selection
          print('Answer selected: ${answer.text}');
        },
      ),
    );
  }
}

// Application flow:
// 1. The user runs the app and is presented with a quiz game.
// 2. The quiz game displays a question and a list of possible answers.
// 3. The user selects an answer from the list.
// 4. The quiz game checks whether the selected answer is correct or not.
// 5. If the answer is correct, the quiz game increments the user's score.
// 6. The quiz game displays the next question in the list.
// 7. Steps 3-6 are repeated until the user has answered all questions.
// 8. The quiz game displays the user's final score.
```

// Final summary:
// The code above demonstrates a simple quiz game using the `easy_quiz_game` package.
// The game displays a series of questions and answers, and keeps track of the user's score.
// The game uses a `QuizGame` object to store the questions and answers, and a `QuizGameWidget` to display the game.
// The game handles answer selection and scoring using the `onAnswerSelected` callback.
// The game displays the user's final score at the end of the game.
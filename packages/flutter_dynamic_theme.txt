<-- START_DESCRIPTION -->

# Flutter Dynamic Theme Package
================================

The `flutter_dynamic_theme` package is a powerful tool for managing themes in Flutter applications. It allows you to easily switch between different themes, and even change the theme at runtime. This package is ideal for applications that require a high degree of customization, or for developers who want to provide their users with a unique experience.

## When to Use This Package
---------------------------

You should use this package when:

* You want to provide multiple themes for your application.
* You want to allow users to switch between themes at runtime.
* You want to customize the look and feel of your application.

## Features
------------

* Support for multiple themes.
* Ability to switch between themes at runtime.
* Customizable theme properties.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `flutter_dynamic_theme` package, you need to add it to your `pubspec.yaml` file:

```yml
dependencies:
  flutter_dynamic_theme: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Platform-Specific Details
---------------------------

### Android

To use this package on Android, you need to add the following code to your `AndroidManifest.xml` file:

```xml
<application
    ...
    android:theme="@style/Theme.AppCompat.DayNight">
```

### iOS

To use this package on iOS, you need to add the following code to your `Info.plist` file:

```xml
<key>UIUserInterfaceStyle</key>
<string>Automatic</string>
```

## Using the Package
---------------------

To use the package, you need to create a `DynamicTheme` instance and pass it to the `MaterialApp` constructor:

```dart
import 'package:flutter/material.dart';
import 'package:flutter_dynamic_theme/flutter_dynamic_theme.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return DynamicTheme(
      theme: ThemeData.light(),
      darkTheme: ThemeData.dark(),
      child: MaterialApp(
        title: 'Flutter Demo',
        home: MyHomePage(),
      ),
    );
  }
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_dynamic_theme/flutter_dynamic_theme.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Create a DynamicTheme instance
    return DynamicTheme(
      // Set the light theme
      theme: ThemeData.light(),
      // Set the dark theme
      darkTheme: ThemeData.dark(),
      // Create a MaterialApp instance
      child: MaterialApp(
        // Set the title of the app
        title: 'Flutter Demo',
        // Set the home page of the app
        home: MyHomePage(),
      ),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  // Create a variable to store the current theme
  bool _isDark = false;

  @override
  Widget build(BuildContext context) {
    // Create a Scaffold instance
    return Scaffold(
      // Set the appBar of the Scaffold
      appBar: AppBar(
        // Set the title of the appBar
        title: Text('Flutter Demo'),
      ),
      // Set the body of the Scaffold
      body: Center(
        // Create a Column instance
        child: Column(
          // Set the mainAxisAlignment of the Column
          mainAxisAlignment: MainAxisAlignment.center,
          // Create a list of children for the Column
          children: <Widget>[
            // Create a Text instance
            Text(
              // Set the text of the Text instance
              'You are using the ${_isDark ? 'dark' : 'light'} theme.',
            ),
            // Create a SizedBox instance
            SizedBox(
              // Set the height of the SizedBox instance
              height: 20,
            ),
            // Create a ElevatedButton instance
            ElevatedButton(
              // Set the onPressed callback of the ElevatedButton instance
              onPressed: () {
                // Toggle the theme
                setState(() {
                  _isDark = !_isDark;
                });
                // Update the DynamicTheme instance
                DynamicTheme.of(context).setTheme(_isDark ? ThemeData.dark() : ThemeData.light());
              },
              // Set the child of the ElevatedButton instance
              child: Text(
                // Set the text of the Text instance
                'Toggle Theme',
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// The app starts by creating a RealFlutter instance, which creates a DynamicTheme instance.
// The DynamicTheme instance is used to manage the theme of the app.
// The app uses a MaterialApp instance to create a Material Design app.
// The home page of the app is a MyHomePage instance, which creates a Scaffold instance.
// The Scaffold instance has an appBar and a body.
// The body of the Scaffold instance is a Center instance, which centers its child.
// The child of the Center instance is a Column instance, which creates a list of children.
// The children of the Column instance are a Text instance and a ElevatedButton instance.
// The Text instance displays the current theme of the app.
// The ElevatedButton instance is used to toggle the theme of the app.
// When the ElevatedButton instance is pressed, the theme of the app is toggled and the DynamicTheme instance is updated.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# stash_memory Flutter Package
================================

The `stash_memory` package is a Flutter package that provides an in-memory caching solution for your Flutter applications. It allows you to store and retrieve data in a fast and efficient manner, making it ideal for applications that require quick access to data.

## When to Use
--------------

You can use `stash_memory` in a variety of scenarios, such as:

* Caching frequently accessed data to improve application performance
* Storing temporary data that doesn't need to be persisted across application restarts
* Implementing a caching layer for your application's data storage solution

## Features
------------

* Fast and efficient in-memory caching
* Support for storing and retrieving a variety of data types, including strings, integers, and objects
* Optional cache expiration and refresh policies

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up stash_memory
-------------------------

To use `stash_memory` in your Flutter application, follow these steps:

### Step 1: Add the Package to Your pubspec.yaml File

```yml
dependencies:
  stash_memory: ^1.0.0
```

### Step 2: Import the Package in Your Dart File

```dart
import 'package:stash_memory/stash_memory.dart';
```

### Step 3: Create a Cache Instance

```dart
final cache = await MemoryCache.getInstance();
```

### Step 4: Store and Retrieve Data

```dart
// Store a string value
await cache.put('key', 'value');

// Retrieve a string value
final value = await cache.get('key');
```

### Platform-Specific Details

* On Android, the cache is stored in the application's memory space and is subject to the operating system's memory management policies.
* On iOS, the cache is stored in the application's memory space and is subject to the operating system's memory management policies.

### Configurations and Optimizations

* You can configure the cache to expire after a certain period of time by using the `expiresIn` parameter when storing data.
* You can also configure the cache to refresh after a certain period of time by using the `refreshAfter` parameter when storing data.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:stash_memory/stash_memory.dart';

void main() async {
  // Create a cache instance
  final cache = await MemoryCache.getInstance();

  // Run the application
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final _keyController = TextEditingController();
  final _valueController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'stash_memory Example',
      home: Scaffold(
        appBar: AppBar(
          title: Text('stash_memory Example'),
        ),
        body: Padding(
          padding: const EdgeInsets.all(20.0),
          child: Column(
            children: [
              TextField(
                controller: _keyController,
                decoration: InputDecoration(
                  labelText: 'Key',
                ),
              ),
              TextField(
                controller: _valueController,
                decoration: InputDecoration(
                  labelText: 'Value',
                ),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () async {
                  // Store the value in the cache
                  await MemoryCache.getInstance().put(
                    _keyController.text,
                    _valueController.text,
                  );
                },
                child: Text('Store'),
              ),
              SizedBox(height: 10),
              ElevatedButton(
                onPressed: () async {
                  // Retrieve the value from the cache
                  final value = await MemoryCache.getInstance().get(
                    _keyController.text,
                  );
                  print(value);
                },
                child: Text('Retrieve'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user enters a key and value in the text fields.
// 2. The user clicks the "Store" button to store the value in the cache.
// 3. The user clicks the "Retrieve" button to retrieve the value from the cache.
// 4. The retrieved value is printed to the console.

// In summary, this code demonstrates how to use the stash_memory package to store and retrieve values in a cache.
```

<-- END_MAIN -->
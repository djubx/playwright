```markdown
<-- START_DESCRIPTION -->

# Sliding Clipped Nav Bar: A Flutter Package Overview

The `sliding_clipped_nav_bar` Flutter package is a versatile and visually appealing navigation bar widget that enhances the user interface of mobile applications. It provides a sliding animation effect for the navigation bar items, which can be clipped to create a unique and modern look. This package is particularly useful for applications that require a sleek and dynamic navigation experience.

## When to Use

- **Modern UI Design**: If your application aims to have a contemporary design with smooth animations, this package is an excellent choice.
- **Customizable Navigation**: When you need a navigation bar that can be easily customized in terms of color, size, and animation.
- **User Engagement**: Applications that focus on user engagement and experience can benefit from the interactive nature of the sliding clipped navigation bar.

## Features

- **Sliding Animation**: Provides a smooth sliding animation for navigation items.
- **Clipping Effect**: Offers a clipping effect that enhances the visual appeal.
- **Customizable**: Allows customization of colors, icons, and text.
- **Responsive Design**: Adapts well to different screen sizes and orientations.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using Sliding Clipped Nav Bar

In this tutorial, we will walk through the process of setting up and using the `sliding_clipped_nav_bar` package in a Flutter application. We will cover platform-specific details for both Android and iOS.

## Setup Process

### Step 1: Add Dependency

Add the `sliding_clipped_nav_bar` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  sliding_clipped_nav_bar: ^1.0.0
```

Run `flutter pub get` to install the package.

### Step 2: Import the Package

In your Dart file, import the package:

```dart
import 'package:sliding_clipped_nav_bar/sliding_clipped_nav_bar.dart';
```

### Step 3: Platform-Specific Configurations

#### Android

Ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```gradle
android {
    defaultConfig {
        minSdkVersion 21
    }
}
```

#### iOS

No specific configurations are required for iOS, but ensure your deployment target is set to iOS 9.0 or higher in your `ios/Podfile`:

```ruby
platform :ios, '9.0'
```

### Step 4: Implement the Nav Bar

Use the `SlidingClippedNavBar` widget in your `Scaffold`:

```dart
Scaffold(
  bottomNavigationBar: SlidingClippedNavBar(
    backgroundColor: Colors.white,
    onButtonPressed: (index) {
      // Handle navigation logic here
    },
    iconSize: 30,
    activeColor: Colors.blue,
    selectedIndex: 0,
    barItems: [
      BarItem(title: 'Home', icon: Icons.home),
      BarItem(title: 'Search', icon: Icons.search),
      BarItem(title: 'Profile', icon: Icons.person),
    ],
  ),
);
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:sliding_clipped_nav_bar/sliding_clipped_nav_bar.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Sliding Clipped Nav Bar Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  int selectedIndex = 0;

  // List of widgets to display for each tab
  final List<Widget> pages = [
    Center(child: Text('Home Page')),
    Center(child: Text('Search Page')),
    Center(child: Text('Profile Page')),
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Sliding Clipped Nav Bar'),
      ),
      body: pages[selectedIndex], // Display the selected page
      bottomNavigationBar: SlidingClippedNavBar(
        backgroundColor: Colors.white,
        onButtonPressed: (index) {
          setState(() {
            selectedIndex = index; // Update the selected index
          });
        },
        iconSize: 30,
        activeColor: Colors.blue,
        selectedIndex: selectedIndex,
        barItems: [
          BarItem(title: 'Home', icon: Icons.home),
          BarItem(title: 'Search', icon: Icons.search),
          BarItem(title: 'Profile', icon: Icons.person),
        ],
      ),
    );
  }
}

// Application Flow:
// 1. The app starts with the `MyApp` widget, which sets up the MaterialApp.
// 2. `RealFlutter` is the main widget that manages the state of the navigation bar.
// 3. The `_RealFlutterState` class maintains the `selectedIndex` to track the current tab.
// 4. The `pages` list contains the widgets for each tab.
// 5. The `SlidingClippedNavBar` is used in the `Scaffold`'s `bottomNavigationBar`.
// 6. When a navigation item is pressed, `onButtonPressed` updates the `selectedIndex`.
// 7. The `body` of the `Scaffold` displays the widget corresponding to the `selectedIndex`.

<-- END_MAIN -->
```

This blog post provides a comprehensive guide to using the `sliding_clipped_nav_bar` package in Flutter applications. By following the tutorial and example, developers can easily integrate a modern and interactive navigation bar into their apps, enhancing the overall user experience.
<-- START_DESCRIPTION -->

# Feature Notifier Flutter Package
=====================================

The `feature_notifier` Flutter package is a powerful tool for managing and notifying users about new features in your app. It allows you to easily create and manage feature notifications, and provides a simple way to integrate them into your app.

### When to Use This Package

This package is perfect for apps that frequently release new features or updates, and want to keep their users informed about what's new. It's also useful for apps that want to provide a guided tour or tutorial for new users.

### Features

*   Easy to create and manage feature notifications
*   Customizable notification layout and design
*   Supports multiple notification types (e.g. modal, banner, etc.)
*   Integrates seamlessly with your existing app navigation

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Feature Notifier Package
===========================================================

### Step 1: Add the Package to Your Pubspec.yaml File

```yml
dependencies:
  flutter:
    sdk: flutter
  feature_notifier: ^1.0.0
```

### Step 2: Import the Package in Your Dart File

```dart
import 'package:feature_notifier/feature_notifier.dart';
```

### Step 3: Initialize the Feature Notifier

```dart
void main() {
  runApp(
    FeatureNotifier(
      child: MyApp(),
    ),
  );
}
```

### Step 4: Create a Feature Notification

```dart
FeatureNotification(
  id: 'new-feature',
  title: 'New Feature!',
  description: 'Check out our brand new feature!',
  type: FeatureNotificationType.modal,
);
```

### Step 5: Display the Feature Notification

```dart
FeatureNotifier.displayNotification(
  context,
  'new-feature',
);
```

### Platform-Specific Details

*   **Android:** No additional setup required.
*   **iOS:** Add the following code to your `Info.plist` file:

```xml
<key>UIViewControllerBasedStatusBarAppearance</key>
<false/>
```

### Required Configurations or Optimizations

*   Make sure to handle the case where the user dismisses the notification.
*   Consider adding a "Don't show again" option to the notification.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:feature_notifier/feature_notifier.dart';

void main() {
  runApp(
    FeatureNotifier(
      child: RealFlutter(),
    ),
  );
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Create a feature notification
    FeatureNotification notification = FeatureNotification(
      id: 'new-feature',
      title: 'New Feature!',
      description: 'Check out our brand new feature!',
      type: FeatureNotificationType.modal,
    );

    // Display the feature notification when the app starts
    Future.delayed(Duration.zero, () {
      FeatureNotifier.displayNotification(
        context,
        'new-feature',
      );
    });

    return MaterialApp(
      title: 'Real Flutter',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Real Flutter'),
        ),
        body: Center(
          child: Text('Welcome to Real Flutter!'),
        ),
      ),
    );
  }
}

// The app starts by running the main function, which initializes the FeatureNotifier
// with the RealFlutter app as its child.
// 
// The RealFlutter app creates a feature notification and displays it when the app starts.
// 
// When the notification is displayed, the user can dismiss it or interact with it.
// 
// If the user dismisses the notification, the app will continue to run normally.
// 
// If the user interacts with the notification, the app will handle the interaction accordingly.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# tiny_avatar Flutter Package
The tiny_avatar Flutter package is a lightweight library that allows you to easily display and manage user avatars in your Flutter application. It provides a simple and customizable way to display avatars, including support for network images, asset images, and placeholder avatars.

## Features
* Display avatars from network images or asset images
* Use placeholder avatars when the image is loading or fails to load
* Customize the avatar's size, shape, and border
* Support for caching and retrying failed image loads

## When to Use
The tiny_avatar package is perfect for any Flutter application that requires displaying user avatars, such as social media apps, messaging apps, or online communities.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up tiny_avatar
To use the tiny_avatar package, add it to your pubspec.yaml file:
```yml
dependencies:
  tiny_avatar: ^1.0.0
```
Then, run `flutter pub get` to install the package.

## Platform-Specific Details
### Android
No additional configuration is required for Android.

### iOS
To use the tiny_avatar package on iOS, you need to add the following lines to your Info.plist file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```
This allows the app to load images from arbitrary URLs.

## Using tiny_avatar
To display an avatar, use the `TinyAvatar` widget:
```dart
TinyAvatar(
  imageUrl: 'https://example.com/avatar.jpg',
  placeholder: AssetImage('assets/placeholder.png'),
  size: 50,
  shape: AvatarShape.circle,
  border: Border.all(color: Colors.white, width: 2),
)
```
This code displays an avatar from the specified URL, with a placeholder image from the assets folder. The avatar is 50x50 pixels, circular, and has a white border.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:tiny_avatar/tiny_avatar.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'tiny_avatar Example',
      home: Scaffold(
        appBar: AppBar(
          title: Text('tiny_avatar Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              // Display an avatar from a network image
              TinyAvatar(
                imageUrl: 'https://example.com/avatar.jpg',
                placeholder: AssetImage('assets/placeholder.png'),
                size: 100,
                shape: AvatarShape.circle,
                border: Border.all(color: Colors.white, width: 2),
              ),
              SizedBox(height: 20),
              // Display an avatar from an asset image
              TinyAvatar(
                image: AssetImage('assets/avatar.png'),
                size: 100,
                shape: AvatarShape.square,
                border: Border.all(color: Colors.black, width: 2),
              ),
              SizedBox(height: 20),
              // Display a placeholder avatar
              TinyAvatar(
                placeholder: AssetImage('assets/placeholder.png'),
                size: 100,
                shape: AvatarShape.circle,
                border: Border.all(color: Colors.white, width: 2),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app, and the RealFlutter widget is displayed.
// 2. The RealFlutter widget builds a MaterialApp with a Scaffold.
// 3. The Scaffold has an AppBar with a title, and a body with a Center widget.
// 4. The Center widget has a Column with three children: two TinyAvatar widgets and a SizedBox.
// 5. The first TinyAvatar widget displays an avatar from a network image.
// 6. The second TinyAvatar widget displays an avatar from an asset image.
// 7. The third TinyAvatar widget displays a placeholder avatar.
// 8. The user can view the avatars and their respective shapes, sizes, and borders.

```

<-- END_MAIN -->
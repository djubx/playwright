```markdown
<-- START_DESCRIPTION -->

# Introduction to the `prompts` Flutter Package

The `prompts` Flutter package is a versatile tool designed to simplify the creation of user prompts and dialogs in Flutter applications. This package provides a streamlined way to implement various types of prompts, such as alerts, confirmations, and input dialogs, enhancing user interaction with minimal effort.

## When to Use the `prompts` Package

The `prompts` package is ideal for developers who need to quickly implement user feedback mechanisms in their apps. Whether you need to confirm user actions, gather input, or display important information, this package offers a straightforward API to handle these tasks efficiently.

### Key Features

- **Customizable Dialogs**: Easily create and customize dialogs to fit the app's theme and style.
- **Multiple Prompt Types**: Supports alerts, confirmations, and input dialogs.
- **Cross-Platform Compatibility**: Works seamlessly on both Android and iOS platforms.
- **Ease of Use**: Simple API that reduces the boilerplate code required for dialog management.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the `prompts` Package

In this tutorial, we will walk through the process of setting up the `prompts` package in a Flutter project and demonstrate how to use it to create various types of dialogs.

## Setup Process

### Step 1: Add Dependency

First, add the `prompts` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  prompts: ^1.0.0
```

Run `flutter pub get` to install the package.

### Step 2: Platform-Specific Configurations

#### Android

Ensure your `android/app/src/main/AndroidManifest.xml` includes the necessary permissions if your prompts require access to device features.

#### iOS

For iOS, make sure your `ios/Runner/Info.plist` is configured to handle any specific permissions or configurations required by your prompts.

## Using the `prompts` Package

### Creating a Simple Alert

To create a simple alert dialog, use the `RealFlutter` class provided by the package:

```dart
RealFlutter.showAlert(
  context: context,
  title: 'Alert',
  message: 'This is a simple alert dialog.',
  onConfirm: () {
    print('Alert confirmed');
  },
);
```

### Creating a Confirmation Dialog

For a confirmation dialog, you can use:

```dart
RealFlutter.showConfirmation(
  context: context,
  title: 'Confirm',
  message: 'Are you sure you want to proceed?',
  onConfirm: () {
    print('User confirmed action');
  },
  onCancel: () {
    print('User cancelled action');
  },
);
```

### Creating an Input Dialog

To gather user input, use the input dialog feature:

```dart
RealFlutter.showInputDialog(
  context: context,
  title: 'Input Required',
  message: 'Please enter your name:',
  onConfirm: (input) {
    print('User input: $input');
  },
);
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:prompts/prompts.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Prompts Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Prompts Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: () {
                // Show a simple alert dialog
                RealFlutter.showAlert(
                  context: context,
                  title: 'Alert',
                  message: 'This is a simple alert dialog.',
                  onConfirm: () {
                    // Action to perform on confirmation
                    print('Alert confirmed');
                  },
                );
              },
              child: Text('Show Alert'),
            ),
            ElevatedButton(
              onPressed: () {
                // Show a confirmation dialog
                RealFlutter.showConfirmation(
                  context: context,
                  title: 'Confirm',
                  message: 'Are you sure you want to proceed?',
                  onConfirm: () {
                    // Action to perform if confirmed
                    print('User confirmed action');
                  },
                  onCancel: () {
                    // Action to perform if cancelled
                    print('User cancelled action');
                  },
                );
              },
              child: Text('Show Confirmation'),
            ),
            ElevatedButton(
              onPressed: () {
                // Show an input dialog
                RealFlutter.showInputDialog(
                  context: context,
                  title: 'Input Required',
                  message: 'Please enter your name:',
                  onConfirm: (input) {
                    // Action to perform with the input
                    print('User input: $input');
                  },
                );
              },
              child: Text('Show Input Dialog'),
            ),
          ],
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the `MyApp` widget, which sets up the MaterialApp.
// 2. `MyHomePage` is the main screen, displaying three buttons for different dialogs.
// 3. Each button triggers a different type of dialog using the `RealFlutter` class:
//    - The first button shows a simple alert dialog.
//    - The second button shows a confirmation dialog with confirm and cancel actions.
//    - The third button shows an input dialog to capture user input.
// 4. Each dialog's confirm action prints a message to the console, demonstrating the callback functionality.
```

<-- END_MAIN -->
```
<-- START_DESCRIPTION -->

# Number Text Input Formatter
================================

The `number_text_input_formatter` package is a Flutter package that provides a simple way to format text input fields to accept numerical input. It allows you to specify a format for the input, such as decimal or integer, and also provides options for customizing the appearance of the input field.

This package is useful when you need to collect numerical data from users, such as prices, quantities, or measurements. It helps to ensure that the input is valid and consistent, and also provides a better user experience by displaying the input in a format that is easy to read and understand.

Some of the key features of this package include:

*   Support for decimal and integer formats
*   Customizable thousands separator and decimal separator
*   Option to allow or disallow negative numbers
*   Option to allow or disallow empty input

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

## Step 1: Add the package to your project

To use the `number_text_input_formatter` package, you need to add it to your project. You can do this by adding the following line to your `pubspec.yaml` file:

```yml
dependencies:
  number_text_input_formatter: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Step 2: Import the package

To use the package, you need to import it into your Dart file. You can do this by adding the following line at the top of your file:

```dart
import 'package:number_text_input_formatter/number_text_input_formatter.dart';
```

## Step 3: Create a text input field

To use the package, you need to create a text input field and pass an instance of `NumberTextInputFormatter` to its `inputFormatters` property. Here is an example:

```dart
TextField(
  inputFormatters: [
    NumberTextInputFormatter(
      decimalSeparator: '.',
      thousandsSeparator: ',',
      allowNegative: true,
    ),
  ],
)
```

This will create a text input field that accepts decimal numbers with a comma as the thousands separator and a period as the decimal separator. It also allows negative numbers.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:number_text_input_formatter/number_text_input_formatter.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Number Text Input Formatter Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _formKey = GlobalKey<FormState>();
  final _controller = TextEditingController();

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Number Text Input Formatter Demo'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              // Create a text input field with a NumberTextInputFormatter
              TextField(
                controller: _controller,
                inputFormatters: [
                  NumberTextInputFormatter(
                    decimalSeparator: '.',
                    thousandsSeparator: ',',
                    allowNegative: true,
                  ),
                ],
                decoration: InputDecoration(
                  labelText: 'Enter a number',
                  border: OutlineInputBorder(),
                ),
              ),
              SizedBox(height: 16),
              // Create a button to validate the input
              ElevatedButton(
                onPressed: () {
                  if (_formKey.currentState!.validate()) {
                    // If the input is valid, show a snackbar with the input value
                    ScaffoldMessenger.of(context).showSnackBar(
                      SnackBar(
                        content: Text('Input value: ${_controller.text}'),
                      ),
                    );
                  }
                },
                child: Text('Validate Input'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// This code creates a simple Flutter app with a text input field and a button.
// The text input field uses a NumberTextInputFormatter to format the input as a decimal number.
// When the button is pressed, the app validates the input and shows a snackbar with the input value if it is valid.
// The app uses a Material theme and has a basic layout with padding and a column of widgets.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Introduction to dot_cast Flutter Package
=============================================

The dot_cast Flutter package is a powerful tool for casting media content to various devices, including Chromecast, Apple TV, and more. With this package, you can easily integrate media casting capabilities into your Flutter app, providing users with a seamless and convenient way to enjoy their favorite content on the big screen.

## When to Use dot_cast
------------------------

The dot_cast package is perfect for apps that require media casting capabilities, such as:

* Video streaming apps
* Music streaming apps
* Photo gallery apps
* Media player apps

## Features of dot_cast
-------------------------

The dot_cast package offers a range of features, including:

* Support for multiple casting devices
* Easy integration with Flutter apps
* Customizable casting UI
* Support for various media formats

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up dot_cast in Your Flutter App
=============================================

To use the dot_cast package in your Flutter app, follow these steps:

### Step 1: Add the dot_cast Package to Your pubspec.yaml File

```yml
dependencies:
  flutter:
    sdk: flutter
  dot_cast: ^1.0.0
```

### Step 2: Import the dot_cast Package in Your Dart File

```dart
import 'package:dot_cast/dot_cast.dart';
```

### Step 3: Initialize the dot_cast Package

```dart
void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'dot_cast Demo',
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  void initState() {
    super.initState();
    DotCast.init();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('dot_cast Demo'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            DotCast.castMedia(
              media: Media(
                title: 'Example Media',
                url: 'https://example.com/media.mp4',
              ),
            );
          },
          child: Text('Cast Media'),
        ),
      ),
    );
  }
}
```

### Platform-Specific Details

* For Android, add the following code to your `AndroidManifest.xml` file:
```xml
<application>
  ...
  <meta-data
    android:name="com.google.android.gms.cast.framework.OPTIONS_PROVIDER_CLASS_NAME"
    android:value="com.dot_cast.DotCastOptionsProvider" />
</application>
```
* For iOS, add the following code to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:dot_cast/dot_cast.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'dot_cast Demo',
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Initialize the dot_cast package
  @override
  void initState() {
    super.initState();
    DotCast.init();
  }

  // Define a media object to cast
  Media _media = Media(
    title: 'Example Media',
    url: 'https://example.com/media.mp4',
  );

  // Cast the media when the button is pressed
  void _castMedia() {
    DotCast.castMedia(media: _media);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('dot_cast Demo'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: _castMedia,
          child: Text('Cast Media'),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and is presented with a button to cast media.
// 2. When the button is pressed, the _castMedia function is called.
// 3. The _castMedia function uses the DotCast.castMedia method to cast the media.
// 4. The DotCast.castMedia method initializes the casting process and displays a casting UI.
// 5. The user can then select a device to cast to and the media will be played on that device.
```

// The code flow is complete here.

<-- END_MAIN -->
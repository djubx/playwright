```markdown
<!-- START_DESCRIPTION -->
# Progress Dialog Null Safe Flutter Package

The `progress_dialog_null_safe` package is a Flutter library designed to provide a simple and effective way to display progress dialogs in your applications. Progress dialogs are essential for informing users about ongoing processes, such as loading data or performing background tasks, ensuring a smooth user experience.

## When to Use This Package

You should consider using the `progress_dialog_null_safe` package in scenarios where:
- You need to show a loading indicator while fetching data from an API.
- You want to inform users about the progress of a long-running task, such as file uploads or downloads.
- You need a customizable dialog that can be easily integrated into your Flutter application.

## Features

- **Null Safety**: The package is built with null safety in mind, ensuring that your code is safer and less prone to runtime errors.
- **Customizable Dialogs**: You can customize the appearance and behavior of the progress dialog to fit your application's design.
- **Easy Integration**: The package is straightforward to integrate into any Flutter project with minimal setup.

Overall, `progress_dialog_null_safe` is a valuable tool for any Flutter developer looking to enhance user experience by providing clear feedback during asynchronous operations.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Progress Dialog Null Safe

## Step 1: Adding the Dependency

To get started, you need to add the `progress_dialog_null_safe` package to your `pubspec.yaml` file. Open the file and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  progress_dialog_null_safe: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command in your terminal to install it:

```bash
flutter pub get
```

## Step 2: Importing the Package

In your Dart file, import the package at the top:

```dart
import 'package:progress_dialog_null_safe/progress_dialog_null_safe.dart';
```

## Step 3: Using the Progress Dialog

### Android Configuration

For Android, ensure that your `AndroidManifest.xml` file has the necessary permissions if you are performing network operations. Add the following permissions inside the `<manifest>` tag:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
```

### iOS Configuration

For iOS, you may need to add permissions in the `Info.plist` file if you are accessing the internet. Add the following lines:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

### Example Usage

Hereâ€™s how to use the progress dialog in your Flutter application:

```dart
void showProgressDialog(BuildContext context) {
  // Create a ProgressDialog instance
  ProgressDialog progressDialog = ProgressDialog(context);
  
  // Set the dialog properties
  progressDialog.style(
    message: 'Loading...',
    borderRadius: 10.0,
    backgroundColor: Colors.white,
    progressWidget: CircularProgressIndicator(),
    elevation: 10.0,
    insetAnimCurve: Curves.easeInOut,
    insetAnimDuration: Duration(milliseconds: 300),
  );

  // Show the dialog
  progressDialog.show();

  // Simulate a network request
  Future.delayed(Duration(seconds: 3), () {
    // Hide the dialog after the task is complete
    progressDialog.hide();
  });
}
```

In this example, we create a progress dialog, customize its appearance, and simulate a network request that lasts for 3 seconds before hiding the dialog.

With these steps, you can easily integrate and use the `progress_dialog_null_safe` package in your Flutter applications.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Progress Dialog Null Safe

```dart
import 'package:flutter/material.dart';
import 'package:progress_dialog_null_safe/progress_dialog_null_safe.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Progress Dialog Example',
      home: HomeScreen(),
    );
  }
}

class HomeScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Progress Dialog Example'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Call the function to show the progress dialog
            showProgressDialog(context);
          },
          child: Text('Show Progress Dialog'),
        ),
      ),
    );
  }
}

void showProgressDialog(BuildContext context) {
  // Create a ProgressDialog instance
  ProgressDialog progressDialog = ProgressDialog(context);
  
  // Set the dialog properties
  progressDialog.style(
    message: 'Loading...',
    borderRadius: 10.0,
    backgroundColor: Colors.white,
    progressWidget: CircularProgressIndicator(),
    elevation: 10.0,
    insetAnimCurve: Curves.easeInOut,
    insetAnimDuration: Duration(milliseconds: 300),
  );

  // Show the dialog
  progressDialog.show();

  // Simulate a network request
  Future.delayed(Duration(seconds: 3), () {
    // Hide the dialog after the task is complete
    progressDialog.hide();
  });
}

// Application Flow Explanation:
// 1. The main function initializes the Flutter app by calling runApp() with MyApp.
// 2. MyApp builds a MaterialApp with a title and a home screen (HomeScreen).
// 3. HomeScreen contains a button that, when pressed, triggers the showProgressDialog function.
// 4. showProgressDialog creates a ProgressDialog instance and customizes its appearance.
// 5. The dialog is displayed, and a simulated network request is initiated with Future.delayed.
// 6. After 3 seconds, the dialog is hidden, indicating the completion of the task.
```
<!-- END_MAIN -->
```

This structured blog provides a comprehensive overview of the `progress_dialog_null_safe` package, including its features, setup instructions, and a complete example with detailed comments explaining the application flow.
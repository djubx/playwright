```markdown
<!-- START_DESCRIPTION -->
# Image Sequence Animator Flutter Package

The `image_sequence_animator` package is a powerful tool for Flutter developers looking to create engaging animations using a sequence of images. This package allows you to animate a series of images in a seamless manner, making it ideal for applications that require dynamic visual content, such as games, onboarding screens, or any app that benefits from animated graphics.

## When to Use This Package

You might consider using the `image_sequence_animator` package in scenarios such as:
- **Onboarding Screens**: Create engaging onboarding experiences with animated illustrations.
- **Games**: Animate character movements or special effects using a series of images.
- **Interactive Applications**: Enhance user engagement with animated buttons or icons.

## Features

- **Easy to Use**: Simple API for integrating image sequences into your Flutter app.
- **Customizable**: Control over animation speed, looping, and more.
- **Performance Optimized**: Designed to handle image sequences efficiently, minimizing memory usage.

With these features, the `image_sequence_animator` package provides a robust solution for adding animated sequences to your Flutter applications.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Image Sequence Animator

## Step 1: Adding the Dependency

To get started, you need to add the `image_sequence_animator` package to your `pubspec.yaml` file. Open your `pubspec.yaml` and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  image_sequence_animator: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command to install it:

```bash
flutter pub get
```

## Step 2: Platform-Specific Configuration

### Android

For Android, ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

### iOS

For iOS, you may need to update your `ios/Podfile` to ensure compatibility. Open the `Podfile` and uncomment the platform line, setting it to at least 10.0:

```ruby
platform :ios, '10.0'
```

## Step 3: Using the Package

Now that you have set up the package, you can start using it in your Flutter application. Below is a simple example of how to implement the `ImageSequenceAnimator` in your app.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Image Sequence Animator

```dart
import 'package:flutter/material.dart';
import 'package:image_sequence_animator/image_sequence_animator.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Image Sequence Animator Demo',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Image Sequence Animator'),
        ),
        body: Center(
          // Using ImageSequenceAnimator to display an animated sequence
          child: ImageSequenceAnimator(
            // List of image assets to animate
            image: [
              'assets/frame1.png',
              'assets/frame2.png',
              'assets/frame3.png',
              'assets/frame4.png',
            ],
            // Duration for each frame
            duration: Duration(milliseconds: 100),
            // Loop the animation indefinitely
            repeat: true,
          ),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function starts the app by calling runApp() with the RealFlutter widget.
// 2. RealFlutter is a StatelessWidget that builds the MaterialApp.
// 3. The MaterialApp contains a Scaffold with an AppBar and a Center widget.
// 4. Inside the Center widget, the ImageSequenceAnimator is instantiated.
// 5. The ImageSequenceAnimator takes a list of image assets, a duration for each frame, and a repeat flag.
// 6. The images are animated in sequence, creating a smooth animation effect.
// 7. The app runs indefinitely, displaying the animated sequence in the center of the screen.
```
<!-- END_MAIN -->
```

This structured blog provides a comprehensive overview of the `image_sequence_animator` package, guiding users through its features, setup, and implementation in a Flutter application. Each section is clearly marked for easy navigation and understanding.
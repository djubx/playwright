```markdown
<!-- START_DESCRIPTION -->
# Flutter Easy Dialogs: A Comprehensive Overview

The `flutter_easy_dialogs` package is a powerful and flexible library designed to simplify the process of creating and managing dialogs in Flutter applications. It provides a variety of pre-built dialog types, making it easy for developers to implement user-friendly interfaces without the need for extensive customization.

## When to Use `flutter_easy_dialogs`

You should consider using `flutter_easy_dialogs` in scenarios such as:
- **User Confirmation**: When you need to confirm user actions, like deletions or submissions.
- **Information Display**: To show alerts or important information to users.
- **Input Collection**: When you need to gather input from users through forms.

## Key Features
- **Multiple Dialog Types**: Includes alert dialogs, confirmation dialogs, input dialogs, and more.
- **Customizable**: Allows for easy customization of dialog appearance and behavior.
- **Easy Integration**: Simple API that integrates seamlessly with existing Flutter applications.
- **Responsive Design**: Adapts to different screen sizes and orientations.

With these features, `flutter_easy_dialogs` enhances the user experience by providing intuitive and visually appealing dialog options.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using `flutter_easy_dialogs`

## Step 1: Adding the Dependency

To get started, you need to add the `flutter_easy_dialogs` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  flutter_easy_dialogs: ^1.0.0  # Check for the latest version on pub.dev
```

## Step 2: Running Flutter Packages Get

After adding the dependency, run the following command in your terminal to install the package:

```bash
flutter pub get
```

## Step 3: Platform-Specific Configuration

### Android Configuration
For Android, ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```gradle
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

### iOS Configuration
For iOS, you may need to update your `Info.plist` file to allow for certain permissions if your dialogs require them. For example, if you are using input dialogs that require camera access, add:

```xml
<key>NSCameraUsageDescription</key>
<string>We need access to your camera for scanning QR codes.</string>
```

## Step 4: Using the Package

You can now use the `flutter_easy_dialogs` package in your Flutter application. Hereâ€™s a simple example of how to create a confirmation dialog:

```dart
import 'package:flutter/material.dart';
import 'package:flutter_easy_dialogs/flutter_easy_dialogs.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Easy Dialogs Example')),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              // Show a confirmation dialog
              EasyDialog.showConfirmationDialog(
                context: context,
                title: 'Confirm Action',
                message: 'Are you sure you want to proceed?',
                onConfirm: () {
                  // Handle confirmation
                  print('User confirmed the action.');
                },
                onCancel: () {
                  // Handle cancellation
                  print('User canceled the action.');
                },
              );
            },
            child: Text('Show Dialog'),
          ),
        ),
      ),
    );
  }
}
```

In this example, when the button is pressed, a confirmation dialog appears, allowing the user to confirm or cancel the action.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of `flutter_easy_dialogs`

```dart
import 'package:flutter/material.dart';
import 'package:flutter_easy_dialogs/flutter_easy_dialogs.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Easy Dialogs Example')),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              // Show a confirmation dialog
              EasyDialog.showConfirmationDialog(
                context: context,
                title: 'Confirm Action',
                message: 'Are you sure you want to proceed?',
                onConfirm: () {
                  // Handle confirmation
                  print('User confirmed the action.');
                },
                onCancel: () {
                  // Handle cancellation
                  print('User canceled the action.');
                },
              );
            },
            child: Text('Show Dialog'),
          ),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the `RealFlutter` class, which is a StatelessWidget.
// 2. The `MaterialApp` widget is created, providing the basic structure of the app.
// 3. A `Scaffold` widget is used to create the app's visual layout, including an AppBar and a body.
// 4. In the body, a centered `ElevatedButton` is displayed.
// 5. When the button is pressed, the `EasyDialog.showConfirmationDialog` method is called.
// 6. This method displays a confirmation dialog with a title and message.
// 7. The user can either confirm or cancel the action, triggering the respective callbacks.
// 8. The confirmation or cancellation is logged to the console for demonstration purposes.
```
<!-- END_MAIN -->
```

This structured blog provides a comprehensive overview of the `flutter_easy_dialogs` package, guiding users through its features, setup, and practical usage with a complete example.
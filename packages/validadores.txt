<-- START_DESCRIPTION -->

**Validadores Flutter Package: A Comprehensive Overview**
===========================================================

The `validadores` Flutter package is a powerful tool for validating user input in Flutter applications. It provides a simple and efficient way to ensure that user input conforms to specific rules and formats, making it an essential tool for any Flutter developer.

**When to Use Validadores**
---------------------------

You should use `validadores` in any situation where you need to validate user input, such as:

* Login forms: Validate email addresses, passwords, and other login credentials.
* Registration forms: Validate user information, such as names, addresses, and phone numbers.
* Payment forms: Validate credit card numbers, expiration dates, and security codes.

**Key Features of Validadores**
-------------------------------

* **Pre-built validators**: `validadores` comes with a range of pre-built validators for common input types, such as email addresses, phone numbers, and credit card numbers.
* **Customizable validators**: You can create your own custom validators using the `Validator` class.
* **Support for multiple platforms**: `validadores` works on both Android and iOS platforms.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setting Up Validadores**
---------------------------

To use `validadores` in your Flutter application, follow these steps:

1. Add the `validadores` package to your `pubspec.yaml` file:
```yml
dependencies:
  flutter:
    sdk: flutter
  validadores: ^1.0.0
```
2. Run `flutter pub get` to install the package.
3. Import the `validadores` package in your Dart file:
```dart
import 'package:validadores/validadores.dart';
```
**Using Validadores**
---------------------

To use `validadores`, you need to create a `Validator` instance and pass it to the `validate` method. Here is an example:
```dart
import 'package:validadores/validadores.dart';

class RealFlutter {
  final _formKey = GlobalKey<FormState>();

  void _validate() {
    if (_formKey.currentState.validate()) {
      // Form is valid
    } else {
      // Form is not valid
    }
  }

  @override
  Widget build(BuildContext context) {
    return Form(
      key: _formKey,
      child: Column(
        children: [
          TextFormField(
            validator: (value) => Validadores.email(value),
          ),
          ElevatedButton(
            onPressed: _validate,
            child: Text('Validate'),
          ),
        ],
      ),
    );
  }
}
```
**Platform-Specific Details**
-----------------------------

`validadores` works on both Android and iOS platforms. However, there are some platform-specific details to keep in mind:

* On Android, `validadores` uses the `android.util.Patterns` class to validate email addresses.
* On iOS, `validadores` uses the `NSRegularExpression` class to validate email addresses.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:validadores/validadores.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final _formKey = GlobalKey<FormState>();

  void _validate() {
    // Check if the form is valid
    if (_formKey.currentState.validate()) {
      // Form is valid
      print('Form is valid');
    } else {
      // Form is not valid
      print('Form is not valid');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Validadores Example'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              // Email field
              TextFormField(
                decoration: InputDecoration(
                  labelText: 'Email',
                  border: OutlineInputBorder(),
                ),
                validator: (value) => Validadores.email(value),
              ),
              SizedBox(height: 16),
              // Password field
              TextFormField(
                decoration: InputDecoration(
                  labelText: 'Password',
                  border: OutlineInputBorder(),
                ),
                validator: (value) => Validadores.password(value),
              ),
              SizedBox(height: 16),
              // Validate button
              ElevatedButton(
                onPressed: _validate,
                child: Text('Validate'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user enters their email and password in the corresponding fields.
// 2. When the user clicks the "Validate" button, the _validate method is called.
// 3. The _validate method checks if the form is valid by calling the validate method on the _formKey.
// 4. If the form is valid, the _validate method prints "Form is valid" to the console.
// 5. If the form is not valid, the _validate method prints "Form is not valid" to the console.
```

<-- END_MAIN -->
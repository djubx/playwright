<-- START_DESCRIPTION -->

Secure Content Flutter Package
==============================

The `secure_content` Flutter package provides a secure way to store and retrieve sensitive data, such as encryption keys, authentication tokens, and other confidential information. This package is essential for any Flutter application that requires secure data storage, especially those dealing with sensitive user information.

When to Use
------------

Use the `secure_content` package in the following scenarios:

* Storing encryption keys for secure data transmission
* Saving authentication tokens for secure authentication
* Protecting sensitive user data, such as credit card numbers or personal identifiable information

Features
--------

The `secure_content` package offers the following features:

* Secure storage of sensitive data using platform-specific secure storage mechanisms (e.g., Android KeyStore, iOS Keychain)
* Encryption and decryption of data using industry-standard algorithms (e.g., AES)
* Support for storing and retrieving data in the form of strings, bytes, and JSON objects

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
----------------

To use the `secure_content` package, follow these steps:

### Step 1: Add the Package to Your Flutter Project

Add the `secure_content` package to your `pubspec.yaml` file:
```yml
dependencies:
  flutter:
    sdk: flutter
  secure_content: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the `secure_content` package in your Dart file:
```dart
import 'package:secure_content/secure_content.dart';
```
### Step 3: Initialize the Secure Content Instance

Create an instance of the `SecureContent` class, passing the `RealFlutter` class as the main class:
```dart
SecureContent _secureContent = SecureContent(RealFlutter());
```
### Step 4: Store and Retrieve Data

Use the `_secureContent` instance to store and retrieve data securely:
```dart
// Store a string
_secureContent.putString('my_key', 'Hello, World!');

// Retrieve a string
String value = await _secureContent.getString('my_key');
```
Platform-Specific Details
-------------------------

### Android

On Android, the `secure_content` package uses the Android KeyStore to store sensitive data. To use the KeyStore, you need to add the following configuration to your `AndroidManifest.xml` file:
```xml
<application
    ...
    android:hardwareAccelerated="true"
    android:allowBackup="false"
    android:fullBackupContent="false"
    ...>
```
### iOS

On iOS, the `secure_content` package uses the Keychain to store sensitive data. To use the Keychain, you need to add the following configuration to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:secure_content/secure_content.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Secure Content Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  SecureContent _secureContent;
  String _storedValue = '';

  @override
  void initState() {
    super.initState();
    _secureContent = SecureContent(RealFlutter());
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Secure Content Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text('Stored Value: $_storedValue'),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _storeValue,
              child: Text('Store Value'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _retrieveValue,
              child: Text('Retrieve Value'),
            ),
          ],
        ),
      ),
    );
  }

  void _storeValue() async {
    // Store a string
    await _secureContent.putString('my_key', 'Hello, World!');
    setState(() {
      _storedValue = 'Hello, World!';
    });
  }

  void _retrieveValue() async {
    // Retrieve a string
    String value = await _secureContent.getString('my_key');
    setState(() {
      _storedValue = value;
    });
  }
}

// Application flow:
// 1. The user opens the app and is presented with a screen containing two buttons: "Store Value" and "Retrieve Value".
// 2. When the user clicks the "Store Value" button, the app stores the string "Hello, World!" securely using the `secure_content` package.
// 3. When the user clicks the "Retrieve Value" button, the app retrieves the stored string securely using the `secure_content` package and displays it on the screen.
// 4. The user can repeat steps 2-3 to store and retrieve different values.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->
# Easy Pie Chart Flutter Package
The `easy_pie_chart` Flutter package is a simple and easy-to-use library for creating pie charts in Flutter applications. It provides a customizable and interactive way to display data in a circular format.

## When to Use
This package is ideal for displaying proportional data, such as:

* Sales data by region
* Website traffic by source
* Survey results by category

## Features

* Customizable colors and styles
* Interactive pie chart with touch events
* Support for multiple data sets
* Animated pie chart

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Easy Pie Chart

## Step 1: Add the Package to Your Project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  easy_pie_chart: ^1.0.0
```
Then, run `flutter pub get` to install the package.

## Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:easy_pie_chart/easy_pie_chart.dart';
```
## Step 3: Create a Pie Chart

Create a `PieChart` widget and pass in your data:
```dart
PieChart(
  data: [
    PieChartData(
      value: 25,
      color: Colors.red,
      label: 'Red',
    ),
    PieChartData(
      value: 50,
      color: Colors.blue,
      label: 'Blue',
    ),
    PieChartData(
      value: 25,
      color: Colors.green,
      label: 'Green',
    ),
  ],
)
```
## Platform-Specific Details

* For Android, make sure to add the following line to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.INTERNET" />
```
* For iOS, make sure to add the following line to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->
```dart
import 'package:flutter/material.dart';
import 'package:easy_pie_chart/easy_pie_chart.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Easy Pie Chart Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  List<PieChartData> _data = [
    PieChartData(
      value: 25,
      color: Colors.red,
      label: 'Red',
    ),
    PieChartData(
      value: 50,
      color: Colors.blue,
      label: 'Blue',
    ),
    PieChartData(
      value: 25,
      color: Colors.green,
      label: 'Green',
    ),
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Easy Pie Chart Demo'),
      ),
      body: Center(
        child: PieChart(
          data: _data,
          // Customize the pie chart
          strokeWidth: 10,
          animationDuration: Duration(milliseconds: 1500),
          // Handle touch events
          onSelected: (index) {
            print('Selected index: $index');
          },
        ),
      ),
    );
  }
}
```
// The application flow is as follows:
// 1. The user runs the app and is presented with a pie chart.
// 2. The pie chart is customized with a stroke width and animation duration.
// 3. When the user touches a segment of the pie chart, the `onSelected` callback is triggered.
// 4. The `onSelected` callback prints the index of the selected segment to the console.
// 5. The pie chart is updated to reflect the new selection.

// In summary, this code creates a customizable pie chart with interactive segments.
// The pie chart is updated in real-time as the user interacts with it.
<-- END_MAIN -->
<-- START_DESCRIPTION -->

# dio_interceptor_plus Package Overview
=====================================

The `dio_interceptor_plus` package is a powerful tool for Flutter developers, providing a simple and efficient way to intercept and manage HTTP requests made using the Dio library. This package is particularly useful for logging, caching, and modifying requests, making it an essential tool for any Flutter project that relies on network requests.

### Key Features

*   **Request Logging**: Easily log all HTTP requests made by your app, including request headers, bodies, and query parameters.
*   **Request Caching**: Cache HTTP requests to reduce network traffic and improve app performance.
*   **Request Modification**: Modify HTTP requests before they are sent, allowing for custom headers, query parameters, and more.

### When to Use

The `dio_interceptor_plus` package is ideal for any Flutter project that relies on network requests, including:

*   **RESTful APIs**: Use `dio_interceptor_plus` to log, cache, and modify requests made to RESTful APIs.
*   **GraphQL APIs**: Use `dio_interceptor_plus` to log, cache, and modify requests made to GraphQL APIs.
*   **Web Scraping**: Use `dio_interceptor_plus` to log and modify requests made for web scraping purposes.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# dio_interceptor_plus Tutorial
=============================

### Step 1: Add the Package to Your Project

To use the `dio_interceptor_plus` package, you must first add it to your project. You can do this by adding the following line to your `pubspec.yaml` file:

```yml
dependencies:
  dio_interceptor_plus: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Once the package is installed, you can import it into your Dart files using the following line:

```dart
import 'package:dio_interceptor_plus/dio_interceptor_plus.dart';
```

### Step 3: Create a Dio Instance

To use the `dio_interceptor_plus` package, you must first create a Dio instance. You can do this using the following code:

```dart
Dio dio = Dio();
```

### Step 4: Add Interceptors

Once you have a Dio instance, you can add interceptors using the `interceptors` property. For example:

```dart
dio.interceptors.add(LogInterceptor());
dio.interceptors.add(CacheInterceptor());
```

This will add a log interceptor and a cache interceptor to the Dio instance.

### Step 5: Make Requests

Once you have added interceptors, you can make requests using the Dio instance. For example:

```dart
Response response = await dio.get('https://example.com');
```

This will make a GET request to the specified URL and return the response.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:dio/dio.dart';
import 'package:dio_interceptor_plus/dio_interceptor_plus.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Dio Interceptor Plus Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  // Create a Dio instance
  Dio dio = Dio();

  // Add interceptors
  @override
  void initState() {
    super.initState();
    dio.interceptors.add(LogInterceptor());
    dio.interceptors.add(CacheInterceptor());
  }

  // Make a GET request
  Future<void> _makeGetRequest() async {
    Response response = await dio.get('https://example.com');
    print(response.data);
  }

  // Make a POST request
  Future<void> _makePostRequest() async {
    Response response = await dio.post('https://example.com',
        data: {'key': 'value'});
    print(response.data);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Dio Interceptor Plus Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: _makeGetRequest,
              child: Text('Make GET Request'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _makePostRequest,
              child: Text('Make POST Request'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and is presented with a screen containing two buttons.
// 2. The user clicks the "Make GET Request" button, which calls the _makeGetRequest function.
// 3. The _makeGetRequest function makes a GET request to the specified URL using the Dio instance.
// 4. The LogInterceptor logs the request and response.
// 5. The CacheInterceptor caches the response.
// 6. The response is printed to the console.
// 7. The user clicks the "Make POST Request" button, which calls the _makePostRequest function.
// 8. The _makePostRequest function makes a POST request to the specified URL using the Dio instance.
// 9. The LogInterceptor logs the request and response.
// 10. The CacheInterceptor caches the response.
// 11. The response is printed to the console.

```

<-- END_MAIN -->
```markdown
<-- START_DESCRIPTION -->

# Overview of the `salesiq_mobilisten` Flutter Package

The `salesiq_mobilisten` Flutter package is a powerful tool designed to integrate Zoho SalesIQ's live chat and visitor tracking capabilities into your Flutter applications. This package is particularly useful for businesses looking to enhance customer engagement by providing real-time support and tracking user interactions within their mobile apps.

## When to Use `salesiq_mobilisten`

- **Customer Support**: Integrate live chat functionality to provide instant support to app users.
- **Visitor Tracking**: Monitor user behavior and interactions within your app to gain insights into user preferences and improve user experience.
- **Lead Generation**: Capture leads directly from the app through chat interactions and visitor tracking.

## Key Features

- **Live Chat**: Engage with users in real-time through a seamless chat interface.
- **Visitor Tracking**: Track user activities and gather analytics to understand user behavior.
- **Customizable Chat Interface**: Tailor the chat interface to match your app's design and branding.
- **Push Notifications**: Receive notifications for new messages and user activities.
- **Multi-platform Support**: Compatible with both Android and iOS platforms.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up `salesiq_mobilisten` in Your Flutter Project

In this tutorial, we will walk through the process of setting up the `salesiq_mobilisten` package in a Flutter project and configuring it for both Android and iOS platforms.

## Step 1: Add Dependency

Add the `salesiq_mobilisten` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  salesiq_mobilisten: ^1.0.0
```

Run `flutter pub get` to install the package.

## Step 2: Android Configuration

1. **Modify `android/app/build.gradle`:**

   Ensure that your `minSdkVersion` is set to at least 21:

   ```gradle
   android {
       defaultConfig {
           minSdkVersion 21
       }
   }
   ```

2. **Add Permissions in `AndroidManifest.xml`:**

   Add the following permissions inside the `<manifest>` tag:

   ```xml
   <uses-permission android:name="android.permission.INTERNET"/>
   <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>
   ```

3. **Initialize in `MainActivity.java` or `MainActivity.kt`:**

   Call the initialization method in your `MainActivity`:

   ```java
   import com.zoho.salesiqembed.ZohoSalesIQ;

   public class MainActivity extends FlutterActivity {
       @Override
       protected void onCreate(Bundle savedInstanceState) {
           super.onCreate(savedInstanceState);
           ZohoSalesIQ.init(this, "YOUR_APP_KEY", "YOUR_ACCESS_KEY");
       }
   }
   ```

## Step 3: iOS Configuration

1. **Modify `ios/Podfile`:**

   Ensure the platform is set to iOS 11.0 or higher:

   ```ruby
   platform :ios, '11.0'
   ```

2. **Add Permissions in `Info.plist`:**

   Add the following keys:

   ```xml
   <key>NSAppTransportSecurity</key>
   <dict>
       <key>NSAllowsArbitraryLoads</key>
       <true/>
   </dict>
   ```

3. **Initialize in `AppDelegate.swift`:**

   Call the initialization method in your `AppDelegate`:

   ```swift
   import ZohoSalesIQ

   @UIApplicationMain
   @objc class AppDelegate: FlutterAppDelegate {
       override func application(
           _ application: UIApplication,
           didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?
       ) -> Bool {
           ZohoSalesIQ.initWithAppKey("YOUR_APP_KEY", accessKey: "YOUR_ACCESS_KEY")
           return super.application(application, didFinishLaunchingWithOptions: launchOptions)
       }
   }
   ```

## Step 4: Using the Package in Flutter

In your Flutter app, import the package and use the `RealFlutter` class to interact with SalesIQ features:

```dart
import 'package:salesiq_mobilisten/salesiq_mobilisten.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: HomeScreen(),
    );
  }
}

class HomeScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('SalesIQ Demo'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            RealFlutter.showChat();
          },
          child: Text('Start Chat'),
        ),
      ),
    );
  }
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:salesiq_mobilisten/salesiq_mobilisten.dart';

void main() {
  runApp(MyApp());
}

// Main application widget
class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'SalesIQ Mobilisten Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: HomeScreen(),
    );
  }
}

// Home screen widget
class HomeScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('SalesIQ Mobilisten'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Welcome to SalesIQ Mobilisten Demo!',
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                // Show the chat interface
                RealFlutter.showChat();
              },
              child: Text('Start Chat'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                // Track a custom event
                RealFlutter.trackEvent('CustomEvent', {'key': 'value'});
              },
              child: Text('Track Event'),
            ),
          ],
        ),
      ),
    );
  }
}

// Application flow explanation:
// 1. The `main` function initializes the app by running `MyApp`.
// 2. `MyApp` is a stateless widget that sets up the MaterialApp with a title and theme.
// 3. The home screen of the app is `HomeScreen`, which is another stateless widget.
// 4. `HomeScreen` contains a Scaffold with an AppBar and a body.
// 5. The body of the Scaffold is a Center widget containing a Column with text and buttons.
// 6. The first button, when pressed, calls `RealFlutter.showChat()` to display the chat interface.
// 7. The second button, when pressed, calls `RealFlutter.trackEvent()` to track a custom event.
// 8. This setup allows users to interact with the SalesIQ chat and track events directly from the app interface.
```

<-- END_MAIN -->
```
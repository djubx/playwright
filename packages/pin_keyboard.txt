<-- START_DESCRIPTION -->

Pin Keyboard Flutter Package
==========================

The `pin_keyboard` Flutter package provides a customizable keyboard for entering PIN codes. It's a convenient and secure way to input sensitive information, such as passwords or credit card numbers.

When to Use
------------

*   When you need to input sensitive information, such as passwords or credit card numbers.
*   When you want to provide a customizable keyboard for entering PIN codes.

Features
--------

*   Customizable keyboard layout and design.
*   Support for multiple keyboard types (e.g., numeric, alphanumeric).
*   Built-in support for secure text entry (e.g., password input).

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
---------------

### Step 1: Add the Package to Your Project

Add the `pin_keyboard` package to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  pin_keyboard: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the `pin_keyboard` package in your Dart file:

```dart
import 'package:pin_keyboard/pin_keyboard.dart';
```

### Step 3: Create a PinKeyboard Widget

Create a `PinKeyboard` widget and customize its properties as needed:

```dart
PinKeyboard(
  keyboardType: TextInputType.number,
  maxLength: 4,
  obscureText: true,
  onChanged: (text) {
    // Handle text changes
  },
  onSubmitted: (text) {
    // Handle text submission
  },
)
```

### Platform-Specific Details

*   **Android:** No additional configuration is required.
*   **iOS:** You may need to add the `NSFaceIDUsageDescription` key to your `Info.plist` file to enable Face ID support.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:pin_keyboard/pin_keyboard.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final _formKey = GlobalKey<FormState>();
  String _pinCode = '';

  // Step 1: Create a PinKeyboard widget
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Pin Keyboard Demo'),
        ),
        body: Padding(
          padding: const EdgeInsets.all(20.0),
          child: Form(
            key: _formKey,
            child: Column(
              children: [
                // Step 2: Create a PinKeyboard widget
                PinKeyboard(
                  keyboardType: TextInputType.number,
                  maxLength: 4,
                  obscureText: true,
                  onChanged: (text) {
                    // Handle text changes
                    setState(() {
                      _pinCode = text;
                    });
                  },
                  onSubmitted: (text) {
                    // Handle text submission
                    if (_formKey.currentState!.validate()) {
                      // Validate the PIN code
                      if (_pinCode == '1234') {
                        print('PIN code is correct!');
                      } else {
                        print('PIN code is incorrect!');
                      }
                    }
                  },
                ),
                SizedBox(height: 20),
                // Step 3: Display the PIN code
                Text('PIN Code: $_pinCode'),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

// The application flow:
// 1. The user inputs a PIN code using the PinKeyboard widget.
// 2. The onChanged callback is called whenever the user types a character.
// 3. The onSubmitted callback is called when the user submits the PIN code.
// 4. The application validates the PIN code and displays a message accordingly.

// Final summary:
// The code flows by first creating a PinKeyboard widget, then handling text changes and submission.
// The application validates the PIN code and displays a message accordingly.
```

<-- END_MAIN -->
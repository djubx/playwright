<-- START_DESCRIPTION -->

# Firebase Notifications Handler Package
=====================================

The `firebase_notifications_handler` package is a Flutter package that simplifies the process of handling Firebase Cloud Messaging (FCM) notifications in your Flutter app. It provides a straightforward API for registering for notifications, handling incoming notifications, and customizing notification behavior.

## When to Use This Package
---------------------------

You should use this package when you need to integrate Firebase Cloud Messaging into your Flutter app and want a simple, easy-to-use API for handling notifications.

## Features
------------

*   Register for notifications with a single line of code
*   Handle incoming notifications with a callback function
*   Customize notification behavior, such as setting the notification icon and color
*   Supports both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `firebase_notifications_handler` package, you'll need to add it to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  firebase_notifications_handler: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Platform-Specific Setup
---------------------------

### Android

To use FCM on Android, you'll need to add the following lines to your `AndroidManifest.xml` file:

```xml
<application
  ...
  android:icon="@mipmap/ic_launcher"
  android:label="@string/app_name">
  ...
  <service
    android:name="com.example.RealFlutterFirebaseMessagingService"
    android:enabled="true"
    android:exported="true">
    <intent-filter>
      <action android:name="com.google.firebase.MESSAGING_EVENT" />
    </intent-filter>
  </service>
</application>
```

### iOS

To use FCM on iOS, you'll need to add the following lines to your `Info.plist` file:

```xml
<key>UIBackgroundModes</key>
<array>
  <string>remote-notification</string>
</array>
```

## Using the Package
---------------------

To register for notifications, call the `registerForNotifications` method:

```dart
import 'package:firebase_notifications_handler/firebase_notifications_handler.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  void initState() {
    super.initState();
    FirebaseNotificationsHandler.registerForNotifications(
      onNotificationReceived: (notification) {
        print('Received notification: ${notification.title}');
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('RealFlutter'),
      ),
      body: Center(
        child: Text('Hello, World!'),
      ),
    );
  }
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:firebase_notifications_handler/firebase_notifications_handler.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'RealFlutter',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Step 1: Register for notifications when the app starts
  @override
  void initState() {
    super.initState();
    FirebaseNotificationsHandler.registerForNotifications(
      // Step 2: Handle incoming notifications
      onNotificationReceived: (notification) {
        print('Received notification: ${notification.title}');
        // Step 3: Show a snackbar with the notification message
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text(notification.message)),
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('RealFlutter'),
      ),
      body: Center(
        child: Text('Hello, World!'),
      ),
    );
  }
}

// The app flow is as follows:
// 1. The app starts and registers for notifications.
// 2. When a notification is received, the onNotificationReceived callback is called.
// 3. The callback shows a snackbar with the notification message.
// This is a basic example and you can customize the notification behavior as needed.

// Final summary: This code sets up a basic Flutter app that registers for notifications and shows a snackbar when a notification is received.
```

<-- END_MAIN -->
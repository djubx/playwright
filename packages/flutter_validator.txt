<-- START_DESCRIPTION -->

# Flutter Validator Package
==========================

The `flutter_validator` package is a powerful tool for validating user input in Flutter applications. It provides a simple and efficient way to ensure that user input conforms to specific rules and formats, making it an essential tool for any Flutter developer.

## When to Use
--------------

The `flutter_validator` package is perfect for any situation where you need to validate user input, such as:

* Login forms: Validate email addresses, passwords, and other login credentials.
* Registration forms: Validate user information, such as names, addresses, and phone numbers.
* Payment forms: Validate credit card numbers, expiration dates, and security codes.

## Features
------------

The `flutter_validator` package offers a range of features, including:

* Pre-built validators for common input types, such as email addresses, phone numbers, and passwords.
* Customizable validators for specific input formats.
* Support for multiple validation rules per input field.
* Real-time validation feedback for users.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `flutter_validator` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_validator: ^1.0.0
```
2. Run `flutter pub get` to install the package.
3. Import the package in your Dart file:
```dart
import 'package:flutter_validator/flutter_validator.dart';
```

## Platform-Specific Details
---------------------------

The `flutter_validator` package works seamlessly on both Android and iOS platforms. However, if you're using a specific platform's native widgets, you may need to adjust the validation logic accordingly.

For example, on Android, you can use the `TextInputLayout` widget to display validation errors, while on iOS, you can use the `TextFormField` widget with a custom error message.

## Configurations and Optimizations
-----------------------------------

To optimize the performance of the `flutter_validator` package, you can:

* Use the `debounce` property to delay validation checks for a specified amount of time.
* Use the `cache` property to store validation results for repeated input values.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_validator/flutter_validator.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final _formKey = GlobalKey<FormState>();
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Validator Example'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              // Email input field with validation
              TextFormField(
                controller: _emailController,
                decoration: InputDecoration(
                  labelText: 'Email',
                  border: OutlineInputBorder(),
                ),
                validator: (value) {
                  // Check if email is valid using the email validator
                  if (!Validator.isEmail(value)) {
                    return 'Invalid email address';
                  }
                  return null;
                },
              ),
              SizedBox(height: 20),

              // Password input field with validation
              TextFormField(
                controller: _passwordController,
                decoration: InputDecoration(
                  labelText: 'Password',
                  border: OutlineInputBorder(),
                ),
                validator: (value) {
                  // Check if password is valid using the password validator
                  if (!Validator.isPassword(value)) {
                    return 'Invalid password';
                  }
                  return null;
                },
              ),
              SizedBox(height: 20),

              // Submit button
              ElevatedButton(
                onPressed: () {
                  // Validate the form
                  if (_formKey.currentState.validate()) {
                    // Form is valid, proceed with submission
                    print('Form is valid');
                  } else {
                    // Form is invalid, display error messages
                    print('Form is invalid');
                  }
                },
                child: Text('Submit'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Explanation of the application flow:
// 1. The user enters their email and password in the input fields.
// 2. The `TextFormField` widgets validate the input using the `validator` property.
// 3. The `Validator` class checks if the input is valid using pre-built validators (e.g. `isEmail`, `isPassword`).
// 4. If the input is invalid, an error message is displayed below the input field.
// 5. When the user submits the form, the `_formKey.currentState.validate()` method checks if the form is valid.
// 6. If the form is valid, the submission proceeds, otherwise an error message is displayed.

```

<-- END_MAIN -->

In summary, the `flutter_validator` package provides a simple and efficient way to validate user input in Flutter applications. By using pre-built validators and customizing validation logic, developers can ensure that user input conforms to specific rules and formats. The example code demonstrates how to use the package to validate email and password input fields, and how to display error messages for invalid input.
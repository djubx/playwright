<-- START_DESCRIPTION -->

# Uploadcare Client Flutter Package
=====================================

The `uploadcare_client` Flutter package is a powerful tool for handling file uploads and management in your Flutter applications. It provides a simple and efficient way to upload files to the Uploadcare cloud storage, allowing you to focus on building your app's core features.

### When to Use This Package

This package is ideal for apps that require file uploads, such as:

* Social media platforms
* File sharing services
* E-commerce apps
* Content management systems

### Features

The `uploadcare_client` package offers the following features:

* File uploads to Uploadcare cloud storage
* File management (listing, deleting, etc.)
* Support for multiple file types (images, videos, documents, etc.)
* Progress tracking for uploads
* Error handling and reporting

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `uploadcare_client` package in your Flutter app, follow these steps:

### Step 1: Add the Package to Your `pubspec.yaml` File

```yml
dependencies:
  flutter:
    sdk: flutter
  uploadcare_client: ^1.0.0
```

### Step 2: Import the Package in Your Dart File

```dart
import 'package:uploadcare_client/uploadcare_client.dart';
```

### Step 3: Initialize the Uploadcare Client

```dart
final client = UploadcareClient(
  publicKey: 'YOUR_PUBLIC_KEY',
  privateKey: 'YOUR_PRIVATE_KEY',
);
```

### Platform-Specific Details

#### Android

No additional configuration is required for Android.

#### iOS

You need to add the following lines to your `Info.plist` file:

```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```

### Required Configurations and Optimizations

* Make sure to replace `YOUR_PUBLIC_KEY` and `YOUR_PRIVATE_KEY` with your actual Uploadcare API keys.
* You can optimize the upload process by setting the `chunkSize` parameter when initializing the Uploadcare client.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:uploadcare_client/uploadcare_client.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Uploadcare Client Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _client = UploadcareClient(
    publicKey: 'YOUR_PUBLIC_KEY',
    privateKey: 'YOUR_PRIVATE_KEY',
  );

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Uploadcare Client Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: _uploadFile,
              child: Text('Upload File'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _listFiles,
              child: Text('List Files'),
            ),
          ],
        ),
      ),
    );
  }

  void _uploadFile() async {
    // Select a file from the device
    final file = await FilePicker.platform.pickFile();

    // Upload the file to Uploadcare
    final uploadResult = await _client.uploadFile(file.path);

    // Print the uploaded file's URL
    print(uploadResult.url);
  }

  void _listFiles() async {
    // List all files in the Uploadcare account
    final files = await _client.listFiles();

    // Print the list of files
    print(files);
  }
}

// The application flow is as follows:
// 1. The user clicks the "Upload File" button, which calls the `_uploadFile` function.
// 2. The `_uploadFile` function selects a file from the device using the `FilePicker` package.
// 3. The selected file is then uploaded to Uploadcare using the `uploadFile` method of the Uploadcare client.
// 4. The uploaded file's URL is printed to the console.
// 5. The user clicks the "List Files" button, which calls the `_listFiles` function.
// 6. The `_listFiles` function lists all files in the Uploadcare account using the `listFiles` method of the Uploadcare client.
// 7. The list of files is printed to the console.

// Summary: This code demonstrates how to use the Uploadcare client to upload files and list files in an Uploadcare account.
```

<-- END_MAIN -->
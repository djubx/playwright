<-- START_DESCRIPTION -->

# Routemaster Flutter Package
The Routemaster Flutter package is a powerful routing library that simplifies the process of navigating between screens in Flutter applications. It provides a robust and flexible way to manage routes, making it easier to build complex navigation flows.

## When to Use Routemaster
Routemaster is ideal for applications with multiple screens, where navigation is a critical aspect of the user experience. It's particularly useful when building apps with complex navigation flows, such as:

* Apps with multiple tabs or bottom navigation bars
* Apps with nested navigation (e.g., a list of items that can be tapped to view details)
* Apps with conditional navigation (e.g., showing a login screen only when the user is not authenticated)

## Key Features
Routemaster offers several key features that make it a popular choice among Flutter developers:

* **Declarative routing**: Define routes using a simple, declarative syntax.
* **Parameter passing**: Pass parameters between routes using a type-safe API.
* **Route nesting**: Create nested routes to simplify complex navigation flows.
* **Conditional routing**: Show or hide routes based on conditions, such as user authentication.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up Routemaster
To use Routemaster in your Flutter project, follow these steps:

1. Add the Routemaster package to your `pubspec.yaml` file:
```yml
dependencies:
  flutter:
    sdk: flutter
  routemaster: ^1.0.0
```
2. Run `flutter pub get` to install the package.
3. Import Routemaster in your Dart file:
```dart
import 'package:routemaster/routemaster.dart';
```
## Platform-Specific Configurations
Routemaster works seamlessly on both Android and iOS platforms. However, you may need to configure the package to work with your app's specific requirements.

* **Android**: No additional configuration is required.
* **iOS**: If you're using a custom `UITabBarController`, you may need to configure Routemaster to work with it. Refer to the Routemaster documentation for more information.

## Optimizations
To optimize Routemaster's performance, consider the following:

* **Use `RouteMap` instead of `RouteList`**: `RouteMap` is more efficient when dealing with large numbers of routes.
* **Use `RouteBuilder` instead of `Route`**: `RouteBuilder` allows you to build routes dynamically, which can improve performance.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:routemaster/routemaster.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Routemaster Demo',
      home: RouteMap(
        routes: {
          '/': (context) => HomeScreen(),
          '/details': (context) => DetailsScreen(),
        },
      ),
    );
  }
}

class HomeScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Home Screen'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            Routemaster.of(context).push('/details');
          },
          child: Text('Go to Details Screen'),
        ),
      ),
    );
  }
}

class DetailsScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Details Screen'),
      ),
      body: Center(
        child: Text('This is the details screen'),
      ),
    );
  }
}
```

// The app starts by running the `main` function, which creates a `MaterialApp` instance.
// The `MaterialApp` instance uses `RouteMap` to define the app's routes.
// The `/` route maps to the `HomeScreen` widget, which displays a button to navigate to the `DetailsScreen`.
// When the button is pressed, `Routemaster.of(context).push('/details')` is called, which navigates to the `DetailsScreen`.
// The `DetailsScreen` widget displays a simple text message.

// The app's navigation flow is managed by Routemaster, which simplifies the process of navigating between screens.

<-- END_MAIN -->
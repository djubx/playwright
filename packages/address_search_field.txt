<-- START_DESCRIPTION -->

# Address Search Field Flutter Package
=====================================

The `address_search_field` Flutter package provides a simple and efficient way to add address search functionality to your Flutter app. It allows users to search for addresses and provides suggestions based on their input.

### When to Use This Package

This package is useful when you need to collect address information from users, such as in e-commerce apps, delivery services, or social media platforms.

### Features

*   Simple and intuitive API
*   Supports both Android and iOS platforms
*   Provides address suggestions based on user input
*   Customizable UI to fit your app's design

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Address Search Field Package
=============================================================

### Step 1: Add the Package to Your Pubspec.yaml File

To use the `address_search_field` package, you need to add it to your `pubspec.yaml` file. Open the file and add the following line under the `dependencies` section:

```yml
dependencies:
  flutter:
    sdk: flutter
  address_search_field: ^1.0.0
```

Then, run `flutter pub get` in your terminal to get the package.

### Step 2: Import the Package

In your Dart file, import the package using the following line:

```dart
import 'package:address_search_field/address_search_field.dart';
```

### Step 3: Create an Instance of the AddressSearchField

Create an instance of the `AddressSearchField` widget and pass the required parameters:

```dart
AddressSearchField(
  controller: _controller,
  hintText: 'Search for an address',
  onAddressSelected: (address) {
    // Handle the selected address
  },
)
```

### Platform-Specific Details

The `address_search_field` package uses the Google Places API under the hood. To use this package on Android, you need to add the following lines to your `AndroidManifest.xml` file:

```xml
<application>
  ...
  <meta-data
    android:name="com.google.android.geo.API_KEY"
    android:value="YOUR_API_KEY" />
</application>
```

Replace `YOUR_API_KEY` with your actual Google Places API key.

On iOS, you need to add the following lines to your `Info.plist` file:

```xml
<key>NSLocationWhenInUseUsageDescription</key>
<string>This app needs access to your location to work properly</string>
<key>NSLocationAlwaysAndWhenInUseUsageDescription</key>
<string>This app needs access to your location to work properly</string>
```

### Required Configurations and Optimizations

To optimize the performance of the `address_search_field` package, you can adjust the `debounceDuration` parameter to control the delay between API requests.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:address_search_field/address_search_field.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Address Search Field Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _controller = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Address Search Field Demo'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(20.0),
        child: AddressSearchField(
          controller: _controller,
          hintText: 'Search for an address',
          onAddressSelected: (address) {
            // Handle the selected address
            print('Selected address: $address');
          },
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user types an address in the search field.
// 2. The AddressSearchField widget sends a request to the Google Places API to fetch address suggestions.
// 3. The API returns a list of address suggestions, which are displayed in a dropdown list below the search field.
// 4. The user selects an address from the dropdown list.
// 5. The onAddressSelected callback is triggered, and the selected address is printed to the console.

// In a real-world application, you would handle the selected address by sending it to a server or storing it in a database.

// The AddressSearchField widget takes care of the complexity of handling user input, sending API requests, and displaying address suggestions.

// The developer only needs to handle the selected address and integrate it with their application's logic.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Firebase Database Mocks Flutter Package
=====================================

The `firebase_database_mocks` package is a Flutter library that provides a mock implementation of the Firebase Realtime Database. It allows developers to test their Firebase Realtime Database-dependent code without actually connecting to the Firebase servers.

## When to Use This Package
---------------------------

This package is particularly useful when:

*   You want to test your Firebase Realtime Database-dependent code in isolation.
*   You want to avoid making unnecessary requests to the Firebase servers during testing.
*   You want to test your app's offline behavior.

## Features
------------

The `firebase_database_mocks` package provides the following features:

*   Mock implementation of the Firebase Realtime Database.
*   Support for basic CRUD operations (create, read, update, delete).
*   Support for transactions.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
-----------------

## Step 1: Add the Package to Your Project
-----------------------------------------

Add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  firebase_database_mocks: ^0.1.0
```

Then, run `flutter pub get` to install the package.

## Step 2: Import the Package
---------------------------

Import the package in your Dart file:

```dart
import 'package:firebase_database_mocks/firebase_database_mocks.dart';
```

## Step 3: Create a Mock Firebase Realtime Database Instance
---------------------------------------------------------

Create a mock Firebase Realtime Database instance:

```dart
final MockFirebaseDatabase database = MockFirebaseDatabase();
```

## Step 4: Use the Mock Firebase Realtime Database Instance
---------------------------------------------------------

Use the mock Firebase Realtime Database instance to perform CRUD operations:

```dart
// Create a new node
database.reference().child('node').set('value');

// Read a node
database.reference().child('node').once().then((DataSnapshot snapshot) {
  print(snapshot.value);
});

// Update a node
database.reference().child('node').update('new_value');

// Delete a node
database.reference().child('node').remove();
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:firebase_database_mocks/firebase_database_mocks.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Firebase Database Mocks Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final MockFirebaseDatabase database = MockFirebaseDatabase();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Firebase Database Mocks Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: () {
                // Create a new node
                database.reference().child('node').set('value');
              },
              child: Text('Create Node'),
            ),
            ElevatedButton(
              onPressed: () {
                // Read a node
                database.reference().child('node').once().then((DataSnapshot snapshot) {
                  print(snapshot.value);
                });
              },
              child: Text('Read Node'),
            ),
            ElevatedButton(
              onPressed: () {
                // Update a node
                database.reference().child('node').update('new_value');
              },
              child: Text('Update Node'),
            ),
            ElevatedButton(
              onPressed: () {
                // Delete a node
                database.reference().child('node').remove();
              },
              child: Text('Delete Node'),
            ),
          ],
        ),
      ),
    );
  }
}

// The app starts by creating a new instance of the MockFirebaseDatabase.
// This instance is used to perform CRUD operations on the mock Firebase Realtime Database.
// The app has four buttons: Create Node, Read Node, Update Node, and Delete Node.
// Each button corresponds to a specific CRUD operation.
// When a button is pressed, the corresponding CRUD operation is performed on the mock Firebase Realtime Database.
// The app prints the value of the node to the console when the Read Node button is pressed.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Drawing Animation Flutter Package
=====================================

The `drawing_animation` package is a powerful tool for creating animations in Flutter. It allows you to create complex animations with ease, using a simple and intuitive API. With this package, you can create animations that are both visually appealing and highly customizable.

### When to Use This Package

This package is perfect for creating animations that involve complex shapes, paths, or transformations. It's ideal for creating:

* Custom loading animations
* Interactive graphics
* Animated logos or icons
* Complex UI transitions

### Features

* Animate along a path or shape
* Animate transformations (scale, rotate, translate)
* Animate colors and opacity
* Support for curves and easing functions
* Highly customizable

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `drawing_animation` package, you'll need to add it to your `pubspec.yaml` file:

```yml
dependencies:
  drawing_animation: ^1.1.3
```

Then, run `flutter pub get` to install the package.

### Platform-Specific Details

* Android: No additional setup required.
* iOS: No additional setup required.

### Basic Usage

To create an animation, you'll need to create a `DrawingAnimation` widget and pass in a `Path` or `Shape` object:

```dart
import 'package:drawing_animation/drawing_animation.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Center(
        child: DrawingAnimation(
          path: Path()
            ..moveTo(0, 0)
            ..lineTo(100, 100),
          duration: Duration(seconds: 2),
        ),
      ),
    );
  }
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:drawing_animation/drawing_animation.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Drawing Animation Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Create a Path object to animate along
  Path _path = Path()
    ..moveTo(0, 0)
    ..lineTo(100, 100)
    ..curveTo(150, 150, 200, 200, 250, 250);

  // Create a Shape object to animate
  Shape _shape = Shape(
    paths: [
      Path()
        ..moveTo(0, 0)
        ..lineTo(100, 100),
      Path()
        ..moveTo(150, 150)
        ..lineTo(200, 200),
    ],
  );

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Drawing Animation Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            // Animate along a path
            DrawingAnimation(
              path: _path,
              duration: Duration(seconds: 2),
            ),
            SizedBox(height: 20),
            // Animate a shape
            DrawingAnimation(
              shape: _shape,
              duration: Duration(seconds: 3),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app and is presented with a screen containing two animations.
// 2. The first animation is a path animation that moves along a curved path.
// 3. The second animation is a shape animation that moves and scales a shape.
// 4. Both animations are created using the DrawingAnimation widget and are highly customizable.
// 5. The user can adjust the duration and other properties of the animations to suit their needs.
```

// In summary, this code creates a Flutter app that demonstrates the use of the drawing_animation package. It creates two animations, one along a path and one of a shape, and displays them on the screen. The animations are highly customizable and can be adjusted to suit the user's needs.
```markdown
<!-- START_DESCRIPTION -->
# Image Zoom on Move Flutter Package

The `image_zoom_on_move` Flutter package is a powerful tool designed to enhance the user experience by allowing users to zoom in and out of images with intuitive gestures. This package is particularly useful in applications that require detailed image viewing, such as photo galleries, e-commerce apps, and educational platforms.

## When to Use This Package

You should consider using the `image_zoom_on_move` package in scenarios where:
- Users need to examine images closely, such as in art or photography apps.
- You want to provide a seamless experience for viewing product images in an e-commerce application.
- Educational apps require detailed illustrations or diagrams that users may want to explore in depth.

## Features

- **Pinch to Zoom**: Users can easily zoom in and out of images using pinch gestures.
- **Drag to Move**: After zooming in, users can drag the image to view different parts of it.
- **Customizable**: The package allows for customization of zoom levels and image fit.
- **Responsive Design**: Works well on both Android and iOS devices, adapting to different screen sizes.

Overall, the `image_zoom_on_move` package provides a user-friendly interface for image manipulation, making it an essential addition to any Flutter application that deals with images.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Image Zoom on Move Package

## Step 1: Adding the Dependency

To get started, you need to add the `image_zoom_on_move` package to your Flutter project. Open your `pubspec.yaml` file and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  image_zoom_on_move: ^latest_version
```

Make sure to replace `latest_version` with the most recent version of the package available on [pub.dev](https://pub.dev/packages/image_zoom_on_move).

## Step 2: Running Flutter Packages Get

After adding the dependency, run the following command in your terminal to install the package:

```bash
flutter pub get
```

## Step 3: Platform-Specific Configuration

### Android

For Android, ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file:

```gradle
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

### iOS

For iOS, you may need to enable the use of Swift in your project. Open your `ios/Runner.xcworkspace` in Xcode, and ensure that the project settings are configured to support Swift.

## Step 4: Importing the Package

In your Dart file where you want to use the image zoom functionality, import the package:

```dart
import 'package:image_zoom_on_move/image_zoom_on_move.dart';
```

## Step 5: Using the Package

You can now use the `ImageZoomOnMove` widget in your application. Wrap your image with this widget to enable zooming and panning.

```dart
ImageZoomOnMove(
  image: NetworkImage('https://example.com/your_image.jpg'),
  // Additional properties can be set here
)
```

This will allow users to zoom in and out of the image using pinch gestures and move the image around by dragging.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using Image Zoom on Move

```dart
import 'package:flutter/material.dart';
import 'package:image_zoom_on_move/image_zoom_on_move.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Image Zoom on Move Example',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Image Zoom on Move'),
        ),
        body: Center(
          child: ImageZoomOnMove(
            image: NetworkImage('https://example.com/your_image.jpg'),
            // You can customize the zoom levels and other properties here
            minScale: 0.5, // Minimum zoom level
            maxScale: 3.0, // Maximum zoom level
          ),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function starts the app by calling runApp() with the RealFlutter widget.
// 2. The RealFlutter widget builds a MaterialApp with a title and a home Scaffold.
// 3. The Scaffold contains an AppBar with the title 'Image Zoom on Move'.
// 4. The body of the Scaffold centers the ImageZoomOnMove widget.
// 5. The ImageZoomOnMove widget takes a NetworkImage as its image source and allows users to zoom and pan the image.
// 6. The minScale and maxScale properties define the zoom limits for the image, enhancing user interaction.
```
<!-- END_MAIN -->
```

This structured blog provides a comprehensive overview of the `image_zoom_on_move` Flutter package, guiding users through its features, setup, and implementation with a complete example. Each section is clearly marked for easy navigation and understanding.
<-- START_DESCRIPTION -->

# Flutter Close App Package
================================

The `flutter_close_app` package is a Flutter plugin that allows you to programmatically close your Flutter app. This package is useful when you want to provide a custom exit button or when you want to close the app after a specific task is completed.

## Features

*   Close the app programmatically
*   Supports both Android and iOS platforms
*   Easy to use and integrate into your existing Flutter project

## When to Use

You can use this package in various scenarios, such as:

*   Providing a custom exit button in your app
*   Closing the app after a specific task is completed, such as a payment transaction
*   Closing the app when the user is inactive for a certain period

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Flutter Close App Package
===========================================================

## Step 1: Add the Package to Your pubspec.yaml File

To use the `flutter_close_app` package, you need to add it to your `pubspec.yaml` file. Open your `pubspec.yaml` file and add the following line under the `dependencies` section:

```yml
dependencies:
  flutter:
    sdk: flutter
  flutter_close_app: ^1.0.0
```

## Step 2: Run Flutter Pub Get

After adding the package to your `pubspec.yaml` file, run the following command in your terminal to get the package:

```bash
flutter pub get
```

## Step 3: Import the Package

To use the package, you need to import it into your Dart file. Add the following line at the top of your Dart file:

```dart
import 'package:flutter_close_app/flutter_close_app.dart';
```

## Step 4: Close the App

To close the app, you can use the `closeApp` function provided by the package. Here's an example:

```dart
ElevatedButton(
  onPressed: () {
    FlutterCloseApp.closeApp();
  },
  child: Text('Close App'),
)
```

### Platform-Specific Details

*   **Android:** The `closeApp` function will close the app and remove it from the recent apps list.
*   **iOS:** The `closeApp` function will close the app, but it will not remove it from the recent apps list due to iOS limitations.

### Required Configurations or Optimizations

There are no required configurations or optimizations needed to use this package.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_close_app/flutter_close_app.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Close App Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Close App Demo'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Close the app when the button is pressed
            FlutterCloseApp.closeApp();
          },
          child: Text('Close App'),
        ),
      ),
    );
  }
}

// The app starts by running the main function, which runs the MyApp widget.
// The MyApp widget builds the MaterialApp, which is the root widget of the app.
// The MaterialApp has a title, theme, and home property, which is set to the MyHomePage widget.
// The MyHomePage widget builds the Scaffold, which is the basic material design layout structure.
// The Scaffold has an appBar and a body property, which is set to the Center widget.
// The Center widget has a child property, which is set to the ElevatedButton widget.
// The ElevatedButton widget has an onPressed property, which is set to a callback function that closes the app when pressed.
// When the button is pressed, the FlutterCloseApp.closeApp function is called, which closes the app.

// In summary, the app flows as follows:
// 1. The user runs the app.
// 2. The main function runs the MyApp widget.
// 3. The MyApp widget builds the MaterialApp.
// 4. The MaterialApp builds the MyHomePage widget.
// 5. The MyHomePage widget builds the Scaffold.
// 6. The Scaffold builds the Center widget.
// 7. The Center widget builds the ElevatedButton widget.
// 8. The user presses the ElevatedButton widget.
// 9. The ElevatedButton widget calls the FlutterCloseApp.closeApp function.
// 10. The FlutterCloseApp.closeApp function closes the app.
```

<-- END_MAIN -->
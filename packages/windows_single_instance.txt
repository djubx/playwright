<-- START_DESCRIPTION -->

**Windows Single Instance Flutter Package**
=============================================

The `windows_single_instance` Flutter package allows you to restrict your Windows application to a single instance. This means that if the user tries to launch your application multiple times, only one instance will be created, and subsequent launches will be ignored.

**When to Use This Package**
---------------------------

You may want to use this package in the following scenarios:

*   Your application uses a resource that can only be accessed by one instance at a time, such as a file or a network connection.
*   Your application has a complex setup process that should only be performed once.
*   You want to prevent the user from launching multiple instances of your application to improve performance or prevent data inconsistencies.

**Features**
------------

The `windows_single_instance` package provides the following features:

*   Restricts your Windows application to a single instance.
*   Allows you to specify a callback function that will be executed when a new instance is launched.
*   Compatible with Windows 10 and later versions.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setup and Usage**
-------------------

To use the `windows_single_instance` package, follow these steps:

### Step 1: Add the Package to Your Project

Add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  windows_single_instance: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:windows_single_instance/windows_single_instance.dart';
```

### Step 3: Initialize the Package

Initialize the package in your `main` function:

```dart
void main() {
  WindowsSingleInstance.ensureSingleInstance(
    onNewInstance: (args) {
      // This callback will be executed when a new instance is launched.
      print('New instance launched with args: $args');
    },
  );
  runApp(MyApp());
}
```

### Platform-Specific Details

The `windows_single_instance` package uses the `Windows API` to restrict the application to a single instance. This means that it will only work on Windows platforms.

### Required Configurations or Optimizations

No additional configurations or optimizations are required to use this package.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:windows_single_instance/windows_single_instance.dart';

void main() {
  // Initialize the package and specify a callback function that will be executed when a new instance is launched.
  WindowsSingleInstance.ensureSingleInstance(
    onNewInstance: (args) {
      // This callback will be executed when a new instance is launched.
      print('New instance launched with args: $args');
    },
  );

  // Run the application.
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Windows Single Instance Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Windows Single Instance Demo'),
      ),
      body: Center(
        child: Text('This is a demo application for the windows_single_instance package.'),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user launches the application.
// 2. The WindowsSingleInstance.ensureSingleInstance function is called to initialize the package.
// 3. If this is the first instance of the application, the callback function specified in the onNewInstance parameter will not be executed.
// 4. The application will then run normally, displaying the MyHomePage widget.
// 5. If the user launches the application again, the WindowsSingleInstance.ensureSingleInstance function will be called again.
// 6. This time, the callback function specified in the onNewInstance parameter will be executed, printing a message to the console indicating that a new instance was launched.
// 7. However, the new instance will not be created, and the existing instance will continue to run.
// 8. The user will not see any difference, as the new instance is not created.

// In summary, the windows_single_instance package ensures that only one instance of the application is created, even if the user launches the application multiple times.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Memoize Flutter Package: A High-Level Overview
=====================================================

The `memoize` Flutter package is a lightweight library that provides a simple way to cache the results of expensive function calls. It's particularly useful when dealing with complex computations or network requests that need to be repeated.

### When to Use Memoize

*   When you have a function that performs an expensive computation or network request, and you need to call it multiple times with the same inputs.
*   When you want to improve the performance of your app by reducing the number of unnecessary computations or network requests.

### Features

*   Simple and easy-to-use API
*   Supports caching of synchronous and asynchronous functions
*   Automatic cache invalidation based on input parameters

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using Memoize
=============================

### Step 1: Add the Memoize Package to Your Project

Add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  memoize: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Memoize Package

Import the `memoize` package in your Dart file:

```dart
import 'package:memoize/memoize.dart';
```

### Step 3: Create a Memoized Function

Create a memoized function using the `memoize` function:

```dart
int expensiveComputation(int x) {
  // Simulate an expensive computation
  return x * x;
}

var memoizedComputation = memoize(expensiveComputation);
```

### Step 4: Use the Memoized Function

Call the memoized function with the same input multiple times:

```dart
void main() {
  print(memoizedComputation(10)); // prints 100
  print(memoizedComputation(10)); // prints 100 (cached result)
  print(memoizedComputation(20)); // prints 400
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:memoize/memoize.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Memoize Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  int _result = 0;
  final _controller = TextEditingController();

  // Create a memoized function
  int expensiveComputation(int x) {
    // Simulate an expensive computation
    return x * x;
  }

  var memoizedComputation = memoize(expensiveComputation);

  void _calculate() {
    // Get the input from the text field
    int input = int.parse(_controller.text);

    // Call the memoized function
    int result = memoizedComputation(input);

    // Update the result
    setState(() {
      _result = result;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Memoize Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Result: $_result',
              style: TextStyle(fontSize: 24),
            ),
            SizedBox(height: 20),
            TextField(
              controller: _controller,
              decoration: InputDecoration(
                border: OutlineInputBorder(),
                hintText: 'Enter a number',
              ),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _calculate,
              child: Text('Calculate'),
            ),
          ],
        ),
      ),
    );
  }
}

// The app starts by creating a MaterialApp with a title and theme.
// The home page is a stateful widget that contains a text field, a button, and a text display.
// When the user enters a number in the text field and clicks the button, the app calls the memoized function with the input number.
// The memoized function performs the expensive computation and returns the result.
// The app then updates the text display with the result.
// If the user enters the same number again, the memoized function returns the cached result instead of performing the expensive computation again.
```

<-- END_MAIN -->
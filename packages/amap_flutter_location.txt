<-- START_DESCRIPTION -->

# amap_flutter_location Package Overview
=====================================

The `amap_flutter_location` package is a Flutter plugin that provides location services using the AMap (AutoNavi Map) SDK. It allows developers to easily integrate location-based features into their Flutter applications.

### When to Use This Package

This package is ideal for applications that require location-based services, such as:

* Ride-hailing apps
* Food delivery apps
* Location-based games
* Navigation apps

### Features

The `amap_flutter_location` package provides the following features:

* Location updates: Get the current location of the device and receive updates when the location changes.
* Location accuracy: Control the accuracy of location updates, from low to high.
* Location permissions: Handle location permissions for Android and iOS platforms.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
================

### Step 1: Add the Package to Your Flutter Project

Add the `amap_flutter_location` package to your `pubspec.yaml` file:
```yml
dependencies:
  amap_flutter_location: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Configure Platform-Specific Settings

#### Android

In your `AndroidManifest.xml` file, add the following permissions:
```xml
<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
<uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
```
#### iOS

In your `Info.plist` file, add the following keys:
```xml
<key>NSLocationWhenInUseUsageDescription</key>
<string>This app needs access to location to work properly</string>
<key>NSLocationAlwaysAndWhenInUseUsageDescription</key>
<string>This app needs access to location to work properly</string>
```
### Step 3: Import the Package and Initialize the AMap SDK

In your Dart file, import the package and initialize the AMap SDK:
```dart
import 'package:amap_flutter_location/amap_flutter_location.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  AmapFlutterLocation _location;

  @override
  void initState() {
    super.initState();
    _location = AmapFlutterLocation();
    _location.init();
  }
}
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:amap_flutter_location/amap_flutter_location.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  AmapFlutterLocation _location;
  Location _currentLocation;

  @override
  void initState() {
    super.initState();
    _location = AmapFlutterLocation();
    _location.init();
    _location.onLocationChanged.listen((location) {
      setState(() {
        _currentLocation = location;
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('AMap Flutter Location Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text('Current Location:'),
            Text(_currentLocation != null
                ? '${_currentLocation.latitude}, ${_currentLocation.longitude}'
                : 'Unknown'),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                _location.startLocation();
              },
              child: Text('Start Location'),
            ),
            SizedBox(height: 10),
            ElevatedButton(
              onPressed: () {
                _location.stopLocation();
              },
              child: Text('Stop Location'),
            ),
          ],
        ),
      ),
    );
  }
}

// Application flow:
// 1. The app initializes the AMap SDK and sets up the location listener.
// 2. When the user presses the "Start Location" button, the app starts receiving location updates.
// 3. The app updates the current location on the screen.
// 4. When the user presses the "Stop Location" button, the app stops receiving location updates.
// 5. The app continues to display the last known location on the screen.

// Summary:
// This app demonstrates how to use the amap_flutter_location package to receive location updates and display the current location on the screen. The app initializes the AMap SDK, sets up the location listener, and provides buttons to start and stop receiving location updates.
```
<-- END_MAIN -->
<-- START_DESCRIPTION -->

MMKV Flutter Package: A High-Performance Key-Value Storage Solution
================================================================

The MMKV Flutter package is a lightweight, high-performance key-value storage solution for Flutter applications. It provides a simple and efficient way to store and retrieve data in the form of key-value pairs. MMKV is designed to be fast, reliable, and secure, making it an ideal choice for storing sensitive data, such as user preferences, authentication tokens, and other app-related data.

When to Use MMKV
----------------

1.  **Storing Sensitive Data**: MMKV is suitable for storing sensitive data, such as encryption keys, authentication tokens, and other confidential information.
2.  **User Preferences**: MMKV can be used to store user preferences, such as app settings, theme choices, and other customizable options.
3.  **Caching Data**: MMKV can be used as a caching layer to store frequently accessed data, reducing the need for network requests and improving app performance.

Features of MMKV
----------------

1.  **High-Performance**: MMKV is designed for high-performance data storage and retrieval.
2.  **Secure**: MMKV provides secure data storage using encryption and access controls.
3.  **Reliable**: MMKV ensures data consistency and integrity through transactional operations.
4.  **Simple API**: MMKV provides a simple and intuitive API for storing and retrieving data.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setting Up MMKV in Your Flutter Project
------------------------------------------

To use MMKV in your Flutter project, follow these steps:

### Step 1: Add the MMKV Package to Your Project

Add the MMKV package to your `pubspec.yaml` file:

```yml
dependencies:
  mmkv: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the MMKV Package

Import the MMKV package in your Dart file:

```dart
import 'package:mmkv/mmkkv.dart';
```

### Step 3: Initialize MMKV

Initialize MMKV before using it:

```dart
void main() {
  MMKV.initialize();
  runApp(MyApp());
}
```

### Step 4: Store and Retrieve Data

Use the `MMKV` instance to store and retrieve data:

```dart
void _storeData() {
  MMKV mmkv = MMKV.defaultMMKV();
  mmkv.encode('key', 'value');
}

void _retrieveData() {
  MMKV mmkv = MMKV.defaultMMKV();
  String value = mmkv.decode('key');
  print(value);
}
```

Platform-Specific Details
-------------------------

### Android

On Android, MMKV uses the `SharedPreferences` API to store data. You can configure the storage location and encryption settings using the `MMKVConfig` class:

```dart
MMKVConfig config = MMKVConfig();
config.storageLocation = MMKVStorageLocation.Internal;
config.encryptionMethod = MMKVEncryptionMethod.AES;
MMKV.initialize(config);
```

### iOS

On iOS, MMKV uses the `NSUserDefaults` API to store data. You can configure the storage location and encryption settings using the `MMKVConfig` class:

```dart
MMKVConfig config = MMKVConfig();
config.storageLocation = MMKVStorageLocation.Sandbox;
config.encryptionMethod = MMKVEncryptionMethod.AES;
MMKV.initialize(config);
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:mmkv/mmkkv.dart';

void main() {
  // Initialize MMKV
  MMKV.initialize();

  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'MMKV Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _keyController = TextEditingController();
  final _valueController = TextEditingController();

  void _storeData() {
    // Get the MMKV instance
    MMKV mmkv = MMKV.defaultMMKV();

    // Store the data
    mmkv.encode(_keyController.text, _valueController.text);

    // Show a snackbar to confirm
    Scaffold.of(context).showSnackBar(SnackBar(content: Text('Data stored')));
  }

  void _retrieveData() {
    // Get the MMKV instance
    MMKV mmkv = MMKV.defaultMMKV();

    // Retrieve the data
    String value = mmkv.decode(_keyController.text);

    // Show a snackbar with the retrieved value
    Scaffold.of(context).showSnackBar(SnackBar(content: Text('Value: $value')));
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('MMKV Demo'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: <Widget>[
            TextField(
              controller: _keyController,
              decoration: InputDecoration(labelText: 'Key'),
            ),
            TextField(
              controller: _valueController,
              decoration: InputDecoration(labelText: 'Value'),
            ),
            SizedBox(height: 16),
            Row(
              children: <Widget>[
                ElevatedButton(
                  onPressed: _storeData,
                  child: Text('Store Data'),
                ),
                SizedBox(width: 16),
                ElevatedButton(
                  onPressed: _retrieveData,
                  child: Text('Retrieve Data'),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}

// The app starts by initializing MMKV in the main function.
// The MyApp widget is then built, which contains the MyHomePage widget.
// The MyHomePage widget contains two text fields for the key and value, and two buttons to store and retrieve data.
// When the store data button is pressed, the _storeData function is called, which gets the MMKV instance and stores the data using the encode method.
// When the retrieve data button is pressed, the _retrieveData function is called, which gets the MMKV instance and retrieves the data using the decode method.
// The retrieved value is then shown in a snackbar.

```

<-- END_MAIN -->
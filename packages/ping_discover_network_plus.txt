<-- START_DESCRIPTION -->

**ping_discover_network_plus Flutter Package**
=============================================

The `ping_discover_network_plus` Flutter package is a powerful tool for discovering devices on a network. It provides a simple and efficient way to scan for devices, making it ideal for applications that require network discovery, such as file sharing, remote control, or IoT device management.

**When to Use**
---------------

Use this package when you need to:

* Discover devices on a local network
* Scan for devices on a specific IP range
* Get information about discovered devices, such as IP address, hostname, and MAC address

**Features**
------------

* Scan for devices on a specific IP range
* Get information about discovered devices
* Support for both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setup and Usage**
-------------------

### Step 1: Add the Package to Your Project

Add the `ping_discover_network_plus` package to your `pubspec.yaml` file:
```yml
dependencies:
  flutter:
    sdk: flutter
  ping_discover_network_plus: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:ping_discover_network_plus/ping_discover_network_plus.dart';
```
### Step 3: Initialize the Package

Initialize the package by calling the `init` method:
```dart
await PingDiscoverNetworkPlus.init();
```
### Step 4: Scan for Devices

Scan for devices on a specific IP range using the `scan` method:
```dart
final devices = await PingDiscoverNetworkPlus.scan('192.168.1.0/24');
```
### Platform-Specific Details

* Android: The package uses the `android.permission.INTERNET` permission to scan for devices. Make sure to add this permission to your `AndroidManifest.xml` file.
* iOS: The package uses the `NSLocalNetworkUsageDescription` key in the `Info.plist` file to scan for devices. Make sure to add this key to your `Info.plist` file.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:ping_discover_network_plus/ping_discover_network_plus.dart';

void main() async {
  // Initialize the package
  await PingDiscoverNetworkPlus.init();

  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Ping Discover Network Plus Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  List<Device> _devices = [];

  Future<void> _scanForDevices() async {
    // Scan for devices on a specific IP range
    final devices = await PingDiscoverNetworkPlus.scan('192.168.1.0/24');

    // Update the UI with the discovered devices
    setState(() {
      _devices = devices;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Ping Discover Network Plus Demo'),
      ),
      body: Column(
        children: [
          ElevatedButton(
            onPressed: _scanForDevices,
            child: Text('Scan for Devices'),
          ),
          Expanded(
            child: ListView.builder(
              itemCount: _devices.length,
              itemBuilder: (context, index) {
                return ListTile(
                  title: Text(_devices[index].ipAddress),
                  subtitle: Text(_devices[index].hostname),
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user clicks the "Scan for Devices" button.
// 2. The `_scanForDevices` method is called, which scans for devices on a specific IP range using the `PingDiscoverNetworkPlus.scan` method.
// 3. The discovered devices are stored in the `_devices` list.
// 4. The UI is updated with the discovered devices using the `setState` method.
// 5. The user can view the discovered devices in the list.

// Created/Modified files during execution: None
```

<-- END_MAIN -->
```markdown
<!-- START_DESCRIPTION -->
# hcaptcha Flutter Package

The `hcaptcha` Flutter package provides a simple and effective way to integrate hCaptcha into your Flutter applications. hCaptcha is a popular alternative to Google reCAPTCHA, allowing developers to protect their applications from bots while ensuring a smooth user experience. This package is particularly useful for applications that require user verification, such as login forms, registration pages, and any feature that needs to confirm that the user is human.

## When to Use hCaptcha
- **User Authentication**: To prevent automated sign-ups or logins.
- **Form Submissions**: To secure forms against spam submissions.
- **Sensitive Actions**: For actions that require a higher level of security, such as financial transactions.

## Key Features
- **Cross-Platform Support**: Works seamlessly on both Android and iOS.
- **Customizable UI**: Allows developers to customize the appearance of the hCaptcha widget.
- **Easy Integration**: Simple setup process with clear documentation.
- **Privacy-Focused**: hCaptcha emphasizes user privacy, making it a great choice for privacy-conscious applications.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Tutorial: Setting Up hCaptcha in Your Flutter Project

## Step 1: Add Dependency
To get started, add the `hcaptcha` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  hcaptcha: ^latest_version
```

Make sure to replace `^latest_version` with the latest version available on [pub.dev](https://pub.dev/packages/hcaptcha).

## Step 2: Platform-Specific Configuration

### Android Configuration
1. Open `android/app/build.gradle` and ensure you have the following permissions:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21 // Ensure this is set to at least 21
    }
}
```

2. Add the following to your `AndroidManifest.xml`:

```xml
<manifest>
    <application>
        ...
        <meta-data
            android:name="hcaptcha.site_key"
            android:value="YOUR_HCAPTCHA_SITE_KEY"/>
    </application>
</manifest>
```

### iOS Configuration
1. Open `ios/Runner/Info.plist` and add the following:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
<key>hcaptcha.site_key</key>
<string>YOUR_HCAPTCHA_SITE_KEY</string>
```

## Step 3: Using hCaptcha in Your Flutter App
Now that you have configured the package, you can use it in your Flutter application. Hereâ€™s a simple example of how to implement hCaptcha:

```dart
import 'package:flutter/material.dart';
import 'package:hcaptcha/hcaptcha.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('hCaptcha Example')),
        body: Center(
          child: ElevatedButton(
            onPressed: () async {
              // Trigger hCaptcha verification
              final result = await HCaptcha.verify(
                siteKey: 'YOUR_HCAPTCHA_SITE_KEY',
              );

              // Check if verification was successful
              if (result != null) {
                // Handle successful verification
                print('hCaptcha verified: $result');
              } else {
                // Handle verification failure
                print('hCaptcha verification failed');
              }
            },
            child: Text('Verify with hCaptcha'),
          ),
        ),
      ),
    );
  }
}
```

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of hCaptcha in Flutter

```dart
import 'package:flutter/material.dart';
import 'package:hcaptcha/hcaptcha.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('hCaptcha Example')),
        body: Center(
          child: ElevatedButton(
            onPressed: () async {
              // Trigger hCaptcha verification
              final result = await HCaptcha.verify(
                siteKey: 'YOUR_HCAPTCHA_SITE_KEY', // Replace with your site key
              );

              // Check if verification was successful
              if (result != null) {
                // Handle successful verification
                print('hCaptcha verified: $result');
              } else {
                // Handle verification failure
                print('hCaptcha verification failed');
              }
            },
            child: Text('Verify with hCaptcha'),
          ),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the RealFlutter widget, which builds a MaterialApp.
// 2. Inside the MaterialApp, a Scaffold is created with an AppBar and a Center widget.
// 3. The Center widget contains an ElevatedButton that, when pressed, triggers the hCaptcha verification process.
// 4. The HCaptcha.verify method is called with the site key, which opens the hCaptcha interface.
// 5. If the user successfully completes the hCaptcha challenge, the result is returned and printed.
// 6. If the verification fails, an error message is printed to the console.
```
<!-- END_MAIN -->
``` 

This structured approach provides a comprehensive overview of the `hcaptcha` Flutter package, guiding developers through its features, setup, and practical implementation.
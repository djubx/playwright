```markdown
<!-- START_DESCRIPTION -->
# Rounded Loading Button Plus Flutter Package

The `rounded_loading_button_plus` package is a versatile Flutter widget that provides a customizable loading button with rounded corners. This package is particularly useful for applications that require user interaction through buttons that indicate loading states, such as during network requests or data processing. 

## When to Use This Package
You should consider using the `rounded_loading_button_plus` package in scenarios where:
- You need a visually appealing button that can show loading indicators.
- You want to enhance user experience by providing feedback during long-running tasks.
- You require a button that can be easily customized in terms of color, shape, and loading animations.

## Features
- **Customizable Appearance**: You can easily change the button's color, shape, and text style.
- **Loading Indicator**: The button can display a loading spinner while performing tasks.
- **State Management**: The package provides built-in state management to handle button states (normal, loading, disabled).
- **Easy Integration**: Simple to integrate into existing Flutter applications with minimal setup.

Overall, the `rounded_loading_button_plus` package is an excellent choice for developers looking to improve the interactivity and responsiveness of their Flutter applications.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Rounded Loading Button Plus

## Step 1: Adding the Dependency
To use the `rounded_loading_button_plus` package, you first need to add it to your `pubspec.yaml` file. Open your `pubspec.yaml` and add the following line under dependencies:

```yaml
dependencies:
  rounded_loading_button_plus: ^1.0.0
```

Make sure to run `flutter pub get` to install the package.

## Step 2: Importing the Package
In your Dart file, import the package at the top:

```dart
import 'package:rounded_loading_button_plus/rounded_loading_button_plus.dart';
```

## Step 3: Using the Button
You can now use the `RoundedLoadingButtonPlus` widget in your application. Hereâ€™s a simple example of how to implement it:

```dart
RoundedLoadingButtonPlus(
  child: Text('Submit'),
  controller: _btnController,
  onPressed: () {
    // Start loading
    _btnController.start();
    // Simulate a network request
    Future.delayed(Duration(seconds: 2), () {
      // Stop loading
      _btnController.success();
    });
  },
)
```

### Platform-Specific Details
- **Android**: Ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21 to avoid compatibility issues.
- **iOS**: No specific configurations are required, but ensure that your iOS deployment target is set to a version that supports Flutter.

## Step 4: Customizing the Button
You can customize the button's appearance by modifying its properties:

```dart
RoundedLoadingButtonPlus(
  child: Text('Submit', style: TextStyle(color: Colors.white)),
  color: Colors.blue,
  controller: _btnController,
  onPressed: () {
    // Your onPressed logic
  },
)
```

This allows you to change the button's text color, background color, and more.

## Conclusion
With these steps, you can easily integrate the `rounded_loading_button_plus` package into your Flutter application, providing a better user experience with loading buttons.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using Rounded Loading Button Plus

```dart
import 'package:flutter/material.dart';
import 'package:rounded_loading_button_plus/rounded_loading_button_plus.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Rounded Loading Button Plus Example',
      home: HomePage(),
    );
  }
}

class HomePage extends StatelessWidget {
  // Create a controller for the button
  final RoundedLoadingButtonPlusController _btnController = RoundedLoadingButtonPlusController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Rounded Loading Button Plus'),
      ),
      body: Center(
        child: RoundedLoadingButtonPlus(
          // Button child
          child: Text('Submit', style: TextStyle(color: Colors.white)),
          // Button color
          color: Colors.blue,
          // Controller for managing button state
          controller: _btnController,
          // On button pressed
          onPressed: () {
            // Start loading animation
            _btnController.start();
            // Simulate a network request
            Future.delayed(Duration(seconds: 2), () {
              // Stop loading and show success state
              _btnController.success();
              // Optionally reset the button after a delay
              Future.delayed(Duration(seconds: 1), () {
                _btnController.reset();
              });
            });
          },
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the MyApp widget.
// 2. MyApp builds a MaterialApp with a title and a HomePage as the home widget.
// 3. HomePage contains a RoundedLoadingButtonPlus widget.
// 4. When the button is pressed, it triggers the onPressed callback.
// 5. The button starts its loading animation by calling _btnController.start().
// 6. A simulated network request is made using Future.delayed.
// 7. After 2 seconds, the button's state changes to success using _btnController.success().
// 8. After another second, the button resets to its initial state using _btnController.reset().
```
<!-- END_MAIN -->
``` 

This structured blog provides a comprehensive overview of the `rounded_loading_button_plus` package, guiding users through its features, setup, and implementation with a complete example.
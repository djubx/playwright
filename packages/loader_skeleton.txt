<-- START_DESCRIPTION -->

**Loader Skeleton Flutter Package**
=====================================

The `loader_skeleton` Flutter package is a useful tool for displaying a skeleton layout while data is being loaded in the background. It provides a simple and customizable way to show a loading animation, making it a great addition to any Flutter app.

**When to Use**
---------------

The `loader_skeleton` package is perfect for scenarios where data is being fetched from a server or database, and you want to display a loading animation to the user. This can be used in a variety of situations, such as:

* Loading data from a REST API
* Fetching data from a database
* Displaying a loading animation while processing data

**Features**
------------

The `loader_skeleton` package comes with a range of features, including:

* Customizable skeleton layout
* Support for multiple loading animations
* Easy integration with existing Flutter apps

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setup and Usage**
-------------------

To use the `loader_skeleton` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  loader_skeleton: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:loader_skeleton/loader_skeleton.dart';
```
### Step 3: Create a Skeleton Layout

Create a skeleton layout using the `Skeleton` widget:
```dart
Skeleton(
  child: Container(
    height: 100,
    width: 100,
    color: Colors.grey,
  ),
)
```
### Step 4: Display the Loading Animation

Use the `Loader` widget to display the loading animation:
```dart
Loader(
  child: Skeleton(
    child: Container(
      height: 100,
      width: 100,
      color: Colors.grey,
    ),
  ),
)
```
### Platform-Specific Details

* Android: Make sure to add the `loader_skeleton` package to your `AndroidManifest.xml` file.
* iOS: No additional setup is required.

### Configurations and Optimizations

* You can customize the loading animation by using the `Loader` widget's properties, such as `duration` and `curve`.
* You can also use the `Skeleton` widget's properties, such as `color` and `borderRadius`, to customize the skeleton layout.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:loader_skeleton/loader_skeleton.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Loader Skeleton Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    // Simulate data loading
    Future.delayed(Duration(seconds: 3), () {
      setState(() {
        _isLoading = false;
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Loader Skeleton Demo'),
      ),
      body: Center(
        child: _isLoading
            ? Loader(
                child: Skeleton(
                  child: Container(
                    height: 100,
                    width: 100,
                    color: Colors.grey,
                  ),
                ),
              )
            : Container(
                height: 100,
                width: 100,
                color: Colors.blue,
              ),
      ),
    );
  }
}

// Application flow:
// 1. The app starts and displays a loading animation using the `Loader` widget.
// 2. The `Loader` widget displays a skeleton layout using the `Skeleton` widget.
// 3. After 3 seconds, the data is loaded and the `_isLoading` flag is set to `false`.
// 4. The app rebuilds and displays the actual content, replacing the loading animation.
// 5. The user sees the actual content and can interact with it.

// Summary:
// The `loader_skeleton` package provides a simple and customizable way to display a loading animation while data is being loaded.
// The package can be easily integrated into existing Flutter apps and provides a range of features, including customizable skeleton layouts and support for multiple loading animations.
```

<-- END_MAIN -->
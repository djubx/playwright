<-- START_DESCRIPTION -->

# Flutter Grid Button Package
================================

The `flutter_grid_button` package is a Flutter widget that allows you to create a grid of buttons with customizable layout, appearance, and behavior. It's perfect for creating calculator-like interfaces, numeric keypads, or any other grid-based button layout.

## Features

* Customizable grid size and layout
* Support for multiple button types (e.g., text, icon, image)
* Configurable button appearance (e.g., color, font, size)
* Optional button click animation
* Support for platform-specific button styles (e.g., Android, iOS)

## When to Use

Use the `flutter_grid_button` package when you need to create a grid of buttons with a high degree of customization. This package is ideal for creating:

* Calculator interfaces
* Numeric keypads
* Custom keyboard layouts
* Game controllers
* Other grid-based button layouts

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
================

## Step 1: Add the Package to Your Project

Add the `flutter_grid_button` package to your project by adding the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_grid_button: ^1.0.0
```
Then, run `flutter pub get` to install the package.

## Step 2: Import the Package

Import the `flutter_grid_button` package in your Dart file:
```dart
import 'package:flutter_grid_button/flutter_grid_button.dart';
```
## Step 3: Create a Grid Button

Create a `GridButton` widget and customize its properties:
```dart
GridButton(
  onPressed: (index) {
    print('Button $index pressed');
  },
  buttons: [
    'Button 1',
    'Button 2',
    'Button 3',
  ],
  columnCount: 3,
  rowCount: 1,
)
```
This code creates a 3x1 grid of buttons with the labels "Button 1", "Button 2", and "Button 3".

## Platform-Specific Details

The `flutter_grid_button` package uses platform-specific button styles by default. To customize the button style, use the `buttonStyle` property:
```dart
GridButton(
  // ...
  buttonStyle: ButtonStyle(
    backgroundColor: Colors.blue,
    foregroundColor: Colors.white,
  ),
)
```
This code sets the background color of the buttons to blue and the foreground color to white.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_grid_button/flutter_grid_button.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Grid Button Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Grid Button Demo'),
      ),
      body: Center(
        child: GridButton(
          onPressed: (index) {
            print('Button $index pressed');
          },
          buttons: [
            'Button 1',
            'Button 2',
            'Button 3',
            'Button 4',
            'Button 5',
            'Button 6',
          ],
          columnCount: 3,
          rowCount: 2,
          buttonStyle: ButtonStyle(
            backgroundColor: Colors.blue,
            foregroundColor: Colors.white,
          ),
        ),
      ),
    );
  }
}

// The app starts by running the main function, which creates a MaterialApp with a title and theme.
// The home property of the MaterialApp is set to MyHomePage, which is a stateful widget.
// The build method of MyHomePage creates a Scaffold with an AppBar and a body.
// The body of the Scaffold contains a Center widget, which centers its child horizontally and vertically.
// The child of the Center widget is a GridButton, which is the main widget of this demo.
// The GridButton has six buttons, arranged in a 3x2 grid.
// Each button has a label and a style, which is customized using the buttonStyle property.
// When a button is pressed, the onPressed callback is called with the index of the button.
```

<-- END_MAIN -->
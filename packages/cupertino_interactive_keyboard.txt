<-- START_DESCRIPTION -->

# Cupertino Interactive Keyboard Package
=====================================

The `cupertino_interactive_keyboard` Flutter package provides an interactive keyboard layout similar to the native iOS keyboard. It's designed to be used in Cupertino-themed apps, but can be adapted to other themes as well.

### When to Use This Package

This package is ideal for apps that require a custom keyboard layout, such as:

* Chat apps with custom keyboard buttons
* Games that require a specific keyboard layout
* Productivity apps with custom keyboard shortcuts

### Features

* Customizable keyboard layout
* Support for multiple keyboard types (e.g., QWERTY, AZERTY)
* Interactive keyboard buttons with animations
* Support for iOS and Android platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `cupertino_interactive_keyboard` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  cupertino_interactive_keyboard: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:cupertino_interactive_keyboard/cupertino_interactive_keyboard.dart';
```
### Step 3: Create a Keyboard Layout

Create a keyboard layout using the `CupertinoInteractiveKeyboard` widget:
```dart
CupertinoInteractiveKeyboard(
  keyboardType: CupertinoInteractiveKeyboardType.QWERTY,
  onKeyPressed: (key) {
    print('Key pressed: $key');
  },
)
```
### Platform-Specific Details

* On iOS, the keyboard layout will automatically adapt to the device's keyboard settings.
* On Android, you may need to add additional configuration to your `AndroidManifest.xml` file to support custom keyboard layouts.

### Optimizations

* To improve performance, you can use the `CupertinoInteractiveKeyboardController` to manage the keyboard layout and animations.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:cupertino_interactive_keyboard/cupertino_interactive_keyboard.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Cupertino Interactive Keyboard Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: KeyboardDemo(),
    );
  }
}

class KeyboardDemo extends StatefulWidget {
  @override
  _KeyboardDemoState createState() => _KeyboardDemoState();
}

class _KeyboardDemoState extends State<KeyboardDemo> {
  final _keyboardController = CupertinoInteractiveKeyboardController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Cupertino Interactive Keyboard Demo'),
      ),
      body: Center(
        child: CupertinoInteractiveKeyboard(
          keyboardType: CupertinoInteractiveKeyboardType.QWERTY,
          onKeyPressed: (key) {
            print('Key pressed: $key');
          },
          controller: _keyboardController,
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user runs the app and is presented with a Cupertino-themed keyboard layout.
// 2. The user presses a key on the keyboard, which triggers the `onKeyPressed` callback.
// 3. The `onKeyPressed` callback prints the pressed key to the console.
// 4. The keyboard layout and animations are managed by the `CupertinoInteractiveKeyboardController`.
// 5. The app continues to run and respond to user input until it is closed.

// Final summary:
// This code demonstrates the use of the `cupertino_interactive_keyboard` package to create a custom keyboard layout in a Flutter app. The app uses the `CupertinoInteractiveKeyboard` widget to display a QWERTY keyboard layout and responds to user input using the `onKeyPressed` callback. The keyboard layout and animations are managed by the `CupertinoInteractiveKeyboardController`.
```

<-- END_MAIN -->
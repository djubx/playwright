```markdown
<!-- START_DESCRIPTION -->
# Overview of the `math_parser` Flutter Package

The `math_parser` package is a powerful tool for Flutter developers that allows for the parsing and evaluation of mathematical expressions. This package is particularly useful in applications that require dynamic calculations, such as calculators, educational apps, or any app that needs to process user-inputted mathematical formulas.

## When to Use `math_parser`

You might consider using the `math_parser` package in scenarios such as:
- Building a scientific calculator that evaluates complex mathematical expressions.
- Creating educational applications that require real-time feedback on mathematical problems.
- Developing financial applications that need to compute formulas based on user input.

## Key Features
- **Expression Parsing**: The package can parse a wide range of mathematical expressions, including basic arithmetic, trigonometric functions, and more.
- **Custom Functions**: Users can define their own functions to extend the capabilities of the parser.
- **Error Handling**: The package provides robust error handling to manage invalid expressions gracefully.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS platforms.

With these features, the `math_parser` package is a versatile choice for any Flutter application that requires mathematical computations.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the `math_parser` Package

## Step 1: Adding the Dependency

To get started with the `math_parser` package, you first need to add it to your Flutter project. Open your `pubspec.yaml` file and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  math_parser: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command in your terminal to install it:

```bash
flutter pub get
```

## Step 2: Platform-Specific Configuration

### Android Configuration

For Android, ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
        ...
    }
}
```

### iOS Configuration

For iOS, you may need to set the platform version in your `ios/Podfile`:

```ruby
platform :ios, '10.0'
```

## Step 3: Importing the Package

In your Dart file, import the `math_parser` package:

```dart
import 'package:math_parser/math_parser.dart';
```

## Step 4: Using the Package

You can now use the `math_parser` package to evaluate mathematical expressions. Hereâ€™s a simple example of how to parse and evaluate an expression:

```dart
void main() {
  final parser = MathParser();
  final result = parser.parse('3 + 5 * (2 - 8)');
  print(result); // Outputs: -13
}
```

This code snippet demonstrates how to create an instance of `MathParser`, parse a mathematical expression, and print the result.

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of Using the `math_parser` Package

```dart
import 'package:flutter/material.dart';
import 'package:math_parser/math_parser.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Math Parser Example',
      home: MathHomePage(),
    );
  }
}

class MathHomePage extends StatefulWidget {
  @override
  _MathHomePageState createState() => _MathHomePageState();
}

class _MathHomePageState extends State<MathHomePage> {
  final TextEditingController _controller = TextEditingController();
  String _result = '';

  // Function to evaluate the expression
  void _evaluateExpression() {
    final parser = MathParser();
    try {
      // Parse the expression from the input field
      final expression = _controller.text;
      final result = parser.parse(expression);
      // Update the result state
      setState(() {
        _result = 'Result: $result';
      });
    } catch (e) {
      // Handle any parsing errors
      setState(() {
        _result = 'Error: Invalid expression';
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Math Parser Example'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            TextField(
              controller: _controller,
              decoration: InputDecoration(
                labelText: 'Enter expression',
                border: OutlineInputBorder(),
              ),
            ),
            SizedBox(height: 10),
            ElevatedButton(
              onPressed: _evaluateExpression,
              child: Text('Evaluate'),
            ),
            SizedBox(height: 20),
            Text(
              _result,
              style: TextStyle(fontSize: 24),
            ),
          ],
        ),
      ),
    );
  }
}
```

```
// The above code creates a simple Flutter application that allows users to input a mathematical expression and evaluate it using the math_parser package.

// 1. The main function initializes the app and sets RealFlutter as the root widget.
// 2. RealFlutter is a StatelessWidget that builds the MaterialApp with a title and a home page.
// 3. MathHomePage is a StatefulWidget that maintains the state of the input and result.
// 4. The _controller is used to capture user input from the TextField.
// 5. The _evaluateExpression function parses the input expression and updates the result.
// 6. The UI consists of a TextField for input, a button to trigger evaluation, and a Text widget to display the result.
// 7. Error handling is implemented to catch invalid expressions and display an error message.

// This application flow allows users to interactively evaluate mathematical expressions, showcasing the capabilities of the math_parser package.
```
<!-- END_MAIN -->
```
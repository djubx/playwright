<-- START_DESCRIPTION -->

Hashlib Codecs Flutter Package
==============================

The `hashlib_codecs` Flutter package provides a set of codecs for hashing and verifying data using various algorithms such as SHA-256, SHA-512, and MD5. This package is useful when you need to ensure data integrity, authenticity, or confidentiality in your Flutter application.

When to Use
------------

*   When you need to verify the integrity of data by comparing expected and actual hash values.
*   When you need to store passwords securely by hashing and salting them.
*   When you need to ensure the authenticity of data by using digital signatures.

Features
--------

*   Supports various hashing algorithms: SHA-256, SHA-512, MD5, and more.
*   Provides both synchronous and asynchronous APIs for hashing and verifying data.
*   Works on both Android and iOS platforms.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
----------------

### Step 1: Add the Package to Your Project

Add the `hashlib_codecs` package to your `pubspec.yaml` file:

```yml
dependencies:
  hashlib_codecs: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the `hashlib_codecs` package in your Dart file:

```dart
import 'package:hashlib_codecs/hashlib_codecs.dart';
```

### Step 3: Choose a Hashing Algorithm

Choose a hashing algorithm that suits your needs. For example, you can use the SHA-256 algorithm:

```dart
final codec = HashlibCodecs.sha256();
```

### Step 4: Hash Your Data

Hash your data using the chosen algorithm. You can use either the synchronous or asynchronous API:

```dart
final data = 'Hello, World!'.codeUnits;
final hash = codec.encode(data);
```

### Step 5: Verify the Hash

Verify the hash by comparing the expected and actual hash values:

```dart
final expectedHash = codec.encode(data);
final actualHash = codec.encode(data);
if (expectedHash == actualHash) {
  print('Hashes match!');
} else {
  print('Hashes do not match!');
}
```

Platform-Specific Details
-------------------------

The `hashlib_codecs` package works on both Android and iOS platforms. However, there are some platform-specific details to keep in mind:

*   On Android, the package uses the `java.security.MessageDigest` class to perform hashing.
*   On iOS, the package uses the `CommonCrypto` framework to perform hashing.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:hashlib_codecs/hashlib_codecs.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final _dataController = TextEditingController();
  final _hashController = TextEditingController();
  final _verifyController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Hashlib Codecs Example'),
        ),
        body: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            children: [
              TextField(
                controller: _dataController,
                decoration: InputDecoration(
                  labelText: 'Enter data to hash',
                ),
              ),
              SizedBox(height: 16),
              ElevatedButton(
                onPressed: () {
                  final data = _dataController.text.codeUnits;
                  final codec = HashlibCodecs.sha256();
                  final hash = codec.encode(data);
                  _hashController.text = hash.toString();
                },
                child: Text('Hash Data'),
              ),
              SizedBox(height: 16),
              TextField(
                controller: _hashController,
                decoration: InputDecoration(
                  labelText: 'Hash value',
                ),
              ),
              SizedBox(height: 16),
              TextField(
                controller: _verifyController,
                decoration: InputDecoration(
                  labelText: 'Enter hash value to verify',
                ),
              ),
              SizedBox(height: 16),
              ElevatedButton(
                onPressed: () {
                  final expectedHash = _hashController.text;
                  final actualHash = _verifyController.text;
                  if (expectedHash == actualHash) {
                    print('Hashes match!');
                  } else {
                    print('Hashes do not match!');
                  }
                },
                child: Text('Verify Hash'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user enters data to hash in the text field.
// 2. The user clicks the "Hash Data" button, which hashes the data using the SHA-256 algorithm.
// 3. The hash value is displayed in the text field below.
// 4. The user enters a hash value to verify in the text field below.
// 5. The user clicks the "Verify Hash" button, which compares the expected and actual hash values.
// 6. If the hashes match, a success message is printed to the console. Otherwise, an error message is printed.

// In summary, this code demonstrates how to use the `hashlib_codecs` package to hash and verify data in a Flutter application.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# r_flutter Package Overview
================================

The `r_flutter` package is a powerful tool for Flutter developers, providing a range of features to simplify and enhance the development process. At its core, `r_flutter` is designed to make it easy to work with resources, such as images, fonts, and other assets, in Flutter applications.

## Key Features

*   Easy resource management: `r_flutter` provides a simple and intuitive way to manage resources, including images, fonts, and other assets.
*   Automatic resource generation: The package can automatically generate resources, such as image assets and font files, based on the resources in your project.
*   Platform-specific support: `r_flutter` provides platform-specific support for Android and iOS, making it easy to tailor your resources to the specific needs of each platform.

## When to Use r_flutter

`r_flutter` is a valuable tool for any Flutter developer, but it is particularly useful in the following scenarios:

*   When working with large numbers of resources, such as images or fonts.
*   When developing applications that require platform-specific resources.
*   When looking to simplify and streamline the resource management process.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# r_flutter Tutorial
=====================

## Step 1: Add the r_flutter Package to Your Project

To use `r_flutter` in your Flutter project, you will need to add the package to your `pubspec.yaml` file. You can do this by adding the following line to the `dependencies` section of the file:

```yml
dependencies:
  r_flutter: ^1.0.0
```

## Step 2: Import the r_flutter Package

Once you have added the `r_flutter` package to your project, you can import it into your Dart files using the following line:

```dart
import 'package:r_flutter/r_flutter.dart';
```

## Step 3: Create a RealFlutter Instance

To use the features of `r_flutter`, you will need to create an instance of the `RealFlutter` class. You can do this using the following code:

```dart
RealFlutter realFlutter = RealFlutter();
```

## Step 4: Configure the RealFlutter Instance

After creating the `RealFlutter` instance, you can configure it to suit your needs. For example, you can set the resource paths and font sizes using the following code:

```dart
realFlutter.resourcePaths = ['assets/images', 'assets/fonts'];
realFlutter.fontSizes = [12, 14, 16];
```

## Step 5: Use the RealFlutter Instance

Once you have configured the `RealFlutter` instance, you can use it to manage your resources and generate platform-specific code. For example, you can use the following code to generate image assets and font files:

```dart
realFlutter.generateImageAssets();
realFlutter.generateFontFiles();
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:r_flutter/r_flutter.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'r_flutter Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  RealFlutter realFlutter = RealFlutter();

  @override
  void initState() {
    super.initState();
    // Set the resource paths and font sizes
    realFlutter.resourcePaths = ['assets/images', 'assets/fonts'];
    realFlutter.fontSizes = [12, 14, 16];
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('r_flutter Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            // Generate image assets and font files
            ElevatedButton(
              onPressed: () {
                realFlutter.generateImageAssets();
                realFlutter.generateFontFiles();
              },
              child: Text('Generate Resources'),
            ),
            // Display the generated resources
            ElevatedButton(
              onPressed: () {
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => ResourcePage()),
                );
              },
              child: Text('Display Resources'),
            ),
          ],
        ),
      ),
    );
  }
}

class ResourcePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Resources'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            // Display the generated image assets
            Image.asset('assets/images/image1.png'),
            Image.asset('assets/images/image2.png'),
            // Display the generated font files
            Text(
              'Hello, World!',
              style: TextStyle(fontSize: 12),
            ),
            Text(
              'Hello, World!',
              style: TextStyle(fontSize: 14),
            ),
            Text(
              'Hello, World!',
              style: TextStyle(fontSize: 16),
            ),
          ],
        ),
      ),
    );
  }
}
```

// The application flow is as follows:
// 1. The user runs the application and is presented with a home page.
// 2. The user clicks the "Generate Resources" button to generate image assets and font files.
// 3. The RealFlutter instance generates the resources based on the resource paths and font sizes set in the initState method.
// 4. The user clicks the "Display Resources" button to display the generated resources.
// 5. The application navigates to a new page where the generated image assets and font files are displayed.

<-- END_MAIN -->
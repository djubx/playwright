<-- START_DESCRIPTION -->

# Hive Generator Flutter Package
=====================================

The `hive_generator` package is a powerful tool for generating Hive type adapters in Flutter applications. Hive is a lightweight, NoSQL key-value database that allows you to store and retrieve data efficiently. With `hive_generator`, you can automatically generate the necessary adapters for your Hive boxes, making it easier to work with complex data structures.

## When to Use This Package
---------------------------

You should use `hive_generator` when:

* You need to store complex data structures in your Flutter application.
* You want to take advantage of Hive's performance and features.
* You want to simplify the process of generating Hive type adapters.

## Features
------------

* Automatic generation of Hive type adapters.
* Support for complex data structures, including nested objects and lists.
* Customizable adapter generation.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up Hive Generator
==========================

To use `hive_generator` in your Flutter project, follow these steps:

### Step 1: Add Dependencies

Add the following dependencies to your `pubspec.yaml` file:
```yml
dependencies:
  hive: ^2.2.3
  hive_generator: ^1.1.3
```
### Step 2: Configure Hive

Configure Hive by creating a `hive_config.dart` file with the following content:
```dart
import 'package:hive/hive.dart';

void main() async {
  await Hive.initFlutter();
}
```
### Step 3: Generate Adapters

Create a `hive_generator_config.dart` file with the following content:
```dart
import 'package:hive_generator/hive_generator.dart';

void main() async {
  await HiveGenerator().generateAdapters();
}
```
### Step 4: Run the Generator

Run the generator by executing the following command in your terminal:
```
flutter pub run hive_generator
```
This will generate the necessary adapters for your Hive boxes.

### Platform-Specific Details

* For Android, make sure to add the following configuration to your `android/app/build.gradle` file:
```groovy
android {
  ...
  defaultConfig {
    ...
    multiDexEnabled true
  }
}
```
* For iOS, make sure to add the following configuration to your `ios/Podfile` file:
```ruby
target 'YourApp' do
  ...
  pod 'Hive', '~> 2.2.3'
end
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:hive/hive.dart';
import 'package:hive_generator/hive_generator.dart';

// Define a complex data structure
@HiveType(typeId: 1)
class Person extends HiveObject {
  @HiveField(0)
  String name;

  @HiveField(1)
  int age;

  Person({required this.name, required this.age});
}

void main() async {
  // Initialize Hive
  await Hive.initFlutter();

  // Register the adapter
  Hive.registerAdapter(PersonAdapter());

  // Open a Hive box
  var box = await Hive.openBox('people');

  // Add a person to the box
  box.add(Person(name: 'John Doe', age: 30));

  // Get the person from the box
  var person = box.getAt(0);

  // Print the person's name and age
  print(person.name); // John Doe
  print(person.age); // 30

  // Close the Hive box
  await box.close();
}

// Comments explaining the flow of the application:

// 1. We define a complex data structure `Person` with a `name` and `age` field.
// 2. We initialize Hive and register the `PersonAdapter`.
// 3. We open a Hive box named `people`.
// 4. We add a `Person` object to the box.
// 5. We retrieve the `Person` object from the box using its index.
// 6. We print the `name` and `age` fields of the `Person` object.
// 7. We close the Hive box.

// Final summary:
// This code demonstrates how to use the `hive_generator` package to generate a Hive type adapter for a complex data structure.
// We define a `Person` class with a `name` and `age` field, and use the `@HiveType` and `@HiveField` annotations to specify the adapter configuration.
// We then initialize Hive, register the adapter, and open a Hive box.
// We add a `Person` object to the box, retrieve it, and print its fields.
// Finally, we close the Hive box.
```

<-- END_MAIN -->
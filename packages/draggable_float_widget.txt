<-- START_DESCRIPTION -->

# Draggable Float Widget Package
The `draggable_float_widget` package is a Flutter library that allows you to create draggable floating widgets on top of other widgets. This package is useful when you want to create a floating action button or a floating menu that can be dragged around the screen.

## Features
- Draggable floating widgets
- Customizable widget size and position
- Support for multiple draggable widgets
- Works on both Android and iOS platforms

## When to Use
You can use this package when you want to create a floating action button or a floating menu that can be dragged around the screen. For example, you can use it to create a floating button that allows users to quickly access a specific feature or functionality.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
To use the `draggable_float_widget` package, follow these steps:

## Step 1: Add the Package to Your Project
Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  draggable_float_widget: ^1.0.0
```
Then, run `flutter pub get` to install the package.

## Step 2: Import the Package
Import the package in your Dart file:
```dart
import 'package:draggable_float_widget/draggable_float_widget.dart';
```
## Step 3: Create a Draggable Float Widget
Create a `DraggableFloatWidget` instance and pass the required parameters:
```dart
DraggableFloatWidget(
  child: FloatingActionButton(
    onPressed: () {},
    child: Icon(Icons.add),
  ),
  initialPosition: Offset(100, 100),
  onPressed: () {},
)
```
## Step 4: Add the Widget to Your App
Add the `DraggableFloatWidget` instance to your app's widget tree:
```dart
@override
Widget build(BuildContext context) {
  return Scaffold(
    body: Stack(
      children: [
        // Other widgets...
        DraggableFloatWidget(
          // ...
        ),
      ],
    ),
  );
}
```
## Platform-Specific Details
The `draggable_float_widget` package works on both Android and iOS platforms. However, you may need to add some platform-specific configurations or optimizations.

For example, on Android, you may need to add the following line to your `AndroidManifest.xml` file to enable the `SYSTEM_ALERT_WINDOW` permission:
```xml
<uses-permission android:name="android.permission.SYSTEM_ALERT_WINDOW" />
```
On iOS, you may need to add the following line to your `Info.plist` file to enable the `NSMotionUsageDescription` permission:
```xml
<key>NSMotionUsageDescription</key>
<string>This app uses motion data to enable the floating widget.</string>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:draggable_float_widget/draggable_float_widget.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Draggable Float Widget Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  Offset _offset = Offset(100, 100);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Stack(
        children: [
          // Other widgets...
          DraggableFloatWidget(
            child: FloatingActionButton(
              onPressed: () {
                print('Floating button pressed!');
              },
              child: Icon(Icons.add),
            ),
            initialPosition: _offset,
            onPressed: () {
              print('Floating button pressed!');
            },
            onDragEnd: (offset) {
              setState(() {
                _offset = offset;
              });
            },
          ),
        ],
      ),
    );
  }
}

// The app starts by running the main function, which creates a new instance of the MyApp widget.
// The MyApp widget is a stateless widget that wraps the MaterialApp widget.
// The MaterialApp widget is the top-level widget for the app, and it provides a basic material design visual layout structure.
// The home property of the MaterialApp widget is set to the MyHomePage widget, which is a stateful widget that represents the app's home page.
// The MyHomePage widget uses the Scaffold widget to provide a basic material design visual layout structure.
// The body property of the Scaffold widget is set to a Stack widget, which is used to position the DraggableFloatWidget on top of other widgets.
// The DraggableFloatWidget is created with a FloatingActionButton as its child, and it is positioned at the initial offset specified by the _offset variable.
// When the floating button is pressed, the onPressed callback is called, which prints a message to the console.
// When the floating button is dragged, the onDragEnd callback is called, which updates the _offset variable with the new position of the button.
```

<-- END_MAIN -->
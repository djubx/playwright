<-- START_DESCRIPTION -->

# ipaddr Flutter Package: A Comprehensive Overview
=====================================================

The `ipaddr` Flutter package provides a simple and efficient way to retrieve the IP address of a device. This package is particularly useful when developing applications that require network communication, such as multiplayer games, chat apps, or IoT projects.

### When to Use This Package

*   When developing applications that require network communication.
*   When you need to retrieve the IP address of a device.

### Features

*   Retrieves the IP address of a device.
*   Supports both IPv4 and IPv6 addresses.
*   Works on both Android and iOS platforms.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the ipaddr Package
=============================================

### Step 1: Add the Package to Your Project

Add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  ipaddr: ^1.0.1
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:ipaddr/ipaddr.dart';
```

### Step 3: Retrieve the IP Address

Use the `getIp` function to retrieve the IP address of the device:

```dart
String ipAddress = await IpAddr.getIp();
```

### Platform-Specific Details

*   **Android:** The package uses the `NetworkInterface` class to retrieve the IP address.
*   **iOS:** The package uses the `getifaddrs` function to retrieve the IP address.

### Required Configurations or Optimizations

*   Make sure to add the `NSLocalNetworkUsageDescription` key to your `Info.plist` file (for iOS) to enable local network access.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:ipaddr/ipaddr.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'IP Address Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  String _ipAddress = '';

  // Step 1: Create a function to retrieve the IP address
  Future<void> _getIpAddress() async {
    // Step 2: Use the getIp function to retrieve the IP address
    String ipAddress = await IpAddr.getIp();
    // Step 3: Update the UI with the retrieved IP address
    setState(() {
      _ipAddress = ipAddress;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('IP Address Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Your IP Address:',
              style: TextStyle(fontSize: 24),
            ),
            Text(
              _ipAddress,
              style: TextStyle(fontSize: 36),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _getIpAddress,
              child: Text('Get IP Address'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow:
// 1. The user opens the app and is presented with a button to retrieve their IP address.
// 2. When the user clicks the button, the _getIpAddress function is called.
// 3. The _getIpAddress function uses the IpAddr.getIp function to retrieve the IP address.
// 4. The retrieved IP address is then updated in the UI using setState.
// 5. The user can see their IP address displayed on the screen.
```

<-- END_MAIN -->
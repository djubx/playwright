```markdown
<!-- START_DESCRIPTION -->
# Cloudinary URL Gen Flutter Package

The `cloudinary_url_gen` package is a powerful tool for Flutter developers who need to generate Cloudinary URLs for images and videos dynamically. This package simplifies the process of constructing URLs for media assets stored in Cloudinary, allowing developers to easily apply transformations, optimizations, and other parameters directly in the URL.

## When to Use This Package
- **Dynamic Media Handling**: When your application requires dynamic media content that needs to be fetched from Cloudinary.
- **Image and Video Transformations**: If you need to apply transformations (like resizing, cropping, etc.) to images or videos on-the-fly.
- **Optimized Loading**: To ensure that media is loaded in an optimized format for different devices and screen sizes.

## Features
- **URL Generation**: Easily generate URLs for images and videos stored in Cloudinary.
- **Transformation Support**: Apply various transformations such as resizing, cropping, and format changes directly in the URL.
- **Responsive Design**: Generate URLs that adapt to different screen sizes and resolutions.
- **Easy Integration**: Simple API that integrates seamlessly with Flutter applications.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Cloudinary URL Gen

## Installation
To use the `cloudinary_url_gen` package, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  cloudinary_url_gen: ^latest_version
```

Make sure to replace `^latest_version` with the latest version available on [pub.dev](https://pub.dev/packages/cloudinary_url_gen).

## Platform-Specific Configuration

### Android
1. Ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21.
2. No additional configuration is required for basic usage.

### iOS
1. Open your `ios/Runner/Info.plist` file and add the following permissions if you plan to access the internet:
   ```xml
   <key>NSAppTransportSecurity</key>
   <dict>
       <key>NSAllowsArbitraryLoads</key>
       <true/>
   </dict>
   ```

## Using the Package
Once the package is installed, you can start using it in your Flutter application. Hereâ€™s a simple example of how to generate a Cloudinary URL with transformations.

```dart
import 'package:flutter/material.dart';
import 'package:cloudinary_url_gen/cloudinary_url_gen.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Cloudinary URL Gen Example',
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Create a Cloudinary instance with your cloud name
    final cloudinary = Cloudinary('your_cloud_name');

    // Generate a URL for an image with transformations
    final url = cloudinary.image('sample_image')
      .resize(width: 300, height: 300)
      .format('png')
      .toUrl();

    return Scaffold(
      appBar: AppBar(
        title: Text('Cloudinary URL Gen Example'),
      ),
      body: Center(
        child: Image.network(url), // Display the image using the generated URL
      ),
    );
  }
}
```

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of Cloudinary URL Gen

```dart
import 'package:flutter/material.dart';
import 'package:cloudinary_url_gen/cloudinary_url_gen.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Cloudinary URL Gen Example',
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Create a Cloudinary instance with your cloud name
    final cloudinary = Cloudinary('your_cloud_name');

    // Generate a URL for an image with transformations
    final url = cloudinary.image('sample_image')
      .resize(width: 300, height: 300) // Resize the image to 300x300
      .format('png') // Change the format to PNG
      .toUrl(); // Generate the final URL

    return Scaffold(
      appBar: AppBar(
        title: Text('Cloudinary URL Gen Example'),
      ),
      body: Center(
        child: Image.network(url), // Display the image using the generated URL
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function initializes the Flutter app by calling runApp with MyApp.
// 2. MyApp builds a MaterialApp with a title and sets RealFlutter as the home widget.
// 3. In RealFlutter, a Cloudinary instance is created using your cloud name.
// 4. A URL is generated for an image named 'sample_image' with specified transformations:
//    - The image is resized to 300x300 pixels.
//    - The format is changed to PNG.
// 5. The generated URL is used to display the image in the center of the screen using Image.network.
// 6. The app shows the transformed image fetched from Cloudinary.
```
<!-- END_MAIN -->
``` 

This structured blog post provides a comprehensive overview of the `cloudinary_url_gen` package, guiding developers through its features, setup, and practical usage in a Flutter application.
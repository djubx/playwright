<-- START_DESCRIPTION -->

# ngforms Flutter Package: A Comprehensive Overview
=====================================================

The ngforms Flutter package is a powerful tool for building robust and scalable forms in Flutter applications. It provides a simple and intuitive API for creating complex forms with validation, error handling, and more.

### When to Use ngforms

ngforms is ideal for building complex forms with multiple fields, validation rules, and error handling. It's perfect for applications that require user input, such as login forms, registration forms, and survey forms.

### Key Features

*   Simple and intuitive API for building complex forms
*   Support for multiple field types, including text, email, password, and more
*   Built-in validation rules for common use cases
*   Customizable error handling and validation messages
*   Support for nested forms and form arrays

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using ngforms
=============================

### Step 1: Add ngforms to Your Project

To use ngforms in your Flutter project, add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  ngforms: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import ngforms

Import ngforms in your Dart file:

```dart
import 'package:ngforms/ngforms.dart';
```

### Step 3: Create a Form

Create a form using the `NgForm` widget:

```dart
NgForm(
  fields: [
    NgField(
      name: 'username',
      type: NgFieldType.text,
      validators: [
        NgRequiredValidator(),
      ],
    ),
    NgField(
      name: 'password',
      type: NgFieldType.password,
      validators: [
        NgRequiredValidator(),
        NgMinLengthValidator(8),
      ],
    ),
  ],
  onSubmit: (values) {
    // Handle form submission
  },
)
```

### Platform-Specific Details

ngforms works seamlessly on both Android and iOS platforms. However, you may need to configure some platform-specific settings, such as keyboard types and input formats.

For example, to set the keyboard type for a field on Android, use the `keyboardType` property:

```dart
NgField(
  name: 'username',
  type: NgFieldType.text,
  keyboardType: TextInputType.emailAddress,
)
```

On iOS, you can use the `textInputType` property:

```dart
NgField(
  name: 'username',
  type: NgFieldType.text,
  textInputType: TextInputType.emailAddress,
)
```

### Optimizations

To optimize performance, ngforms uses a caching mechanism to store form values and validation results. You can configure the cache settings using the `cache` property:

```dart
NgForm(
  fields: [
    // ...
  ],
  cache: NgFormCache(
    maxAge: Duration(minutes: 30),
  ),
)
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:ngforms/ngforms.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'ngforms Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _formKey = GlobalKey<NgFormState>();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('ngforms Demo'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(20.0),
        child: NgForm(
          key: _formKey,
          fields: [
            NgField(
              name: 'username',
              type: NgFieldType.text,
              validators: [
                NgRequiredValidator(),
              ],
            ),
            NgField(
              name: 'password',
              type: NgFieldType.password,
              validators: [
                NgRequiredValidator(),
                NgMinLengthValidator(8),
              ],
            ),
          ],
          onSubmit: (values) {
            // Handle form submission
            print(values);
          },
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and is presented with a form containing two fields: username and password.
// 2. The user enters their username and password, and the form validates the input in real-time.
// 3. If the input is valid, the user can submit the form by clicking the submit button.
// 4. When the form is submitted, the app prints the submitted values to the console.
// 5. The app uses ngforms to manage the form state and validation, making it easy to build complex forms with robust validation rules.
```

<-- END_MAIN -->
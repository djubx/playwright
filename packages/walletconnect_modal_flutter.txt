<-- START_DESCRIPTION -->

# WalletConnect Modal Flutter Package
=====================================

The `walletconnect_modal_flutter` package provides a simple and convenient way to integrate WalletConnect modal functionality into your Flutter applications. WalletConnect is a popular library for connecting blockchain wallets to web applications, and this package makes it easy to use in Flutter.

### When to Use This Package

You can use this package when you need to integrate WalletConnect modal functionality into your Flutter app, such as:

* Connecting to a blockchain wallet
* Displaying a modal for the user to select a wallet
* Handling wallet connections and disconnections

### Features

The `walletconnect_modal_flutter` package provides the following features:

* Easy integration with WalletConnect
* Customizable modal UI
* Support for multiple platforms (Android, iOS, Web)

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Package
=============================================

### Step 1: Add the Package to Your Pubspec

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  walletconnect_modal_flutter: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:walletconnect_modal_flutter/walletconnect_modal_flutter.dart';
```
### Step 3: Create a WalletConnect Instance

Create a WalletConnect instance and set up the modal:
```dart
WalletConnectModal walletConnectModal = WalletConnectModal(
  bridge: 'https://bridge.walletconnect.org',
  clientMeta: {
    'description': 'My Flutter App',
    'url': 'https://myflutterapp.com',
    'icons': ['https://myflutterapp.com/icon.png'],
    'name': 'My Flutter App',
  },
);
```
### Step 4: Display the Modal

Display the modal when the user clicks a button:
```dart
ElevatedButton(
  onPressed: () {
    walletConnectModal.showModal();
  },
  child: Text('Connect Wallet'),
)
```
### Platform-Specific Details

* Android: Make sure to add the following line to your `AndroidManifest.xml` file:
```xml
<application
  ...
  android:usesCleartextTraffic="true"
  ...
>
```
* iOS: Make sure to add the following line to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:walletconnect_modal_flutter/walletconnect_modal_flutter.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'WalletConnect Modal Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  WalletConnectModal walletConnectModal;

  @override
  void initState() {
    super.initState();
    walletConnectModal = WalletConnectModal(
      bridge: 'https://bridge.walletconnect.org',
      clientMeta: {
        'description': 'My Flutter App',
        'url': 'https://myflutterapp.com',
        'icons': ['https://myflutterapp.com/icon.png'],
        'name': 'My Flutter App',
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('WalletConnect Modal Demo'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            walletConnectModal.showModal();
          },
          child: Text('Connect Wallet'),
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user clicks the "Connect Wallet" button.
// 2. The WalletConnect modal is displayed.
// 3. The user selects a wallet from the modal.
// 4. The wallet is connected to the app.
// 5. The modal is closed.
// 6. The app can now interact with the connected wallet.
```

<-- END_MAIN -->

In summary, this code sets up a WalletConnect modal in a Flutter app and displays it when the user clicks a button. The modal allows the user to select a wallet and connect it to the app. Once connected, the app can interact with the wallet.
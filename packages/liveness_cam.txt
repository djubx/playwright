```markdown
<!-- START_DESCRIPTION -->
# Liveness Cam: A Flutter Package for Real-Time Liveness Detection

The **liveness_cam** Flutter package is designed to facilitate real-time liveness detection in mobile applications. This package is particularly useful in scenarios where biometric authentication is required, such as in banking apps, identity verification systems, and secure access applications. By ensuring that the user is physically present and not using a static image, liveness detection enhances security and trustworthiness.

## Key Features
- **Real-Time Detection**: The package provides real-time liveness detection capabilities, ensuring that the user is present during the authentication process.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS platforms.
- **Customizable UI**: Allows developers to customize the user interface to match their application's design.
- **Easy Integration**: Simple API that makes it easy to integrate into existing Flutter applications.

## When to Use
- When implementing biometric authentication in applications.
- In scenarios requiring secure identity verification.
- For applications that need to prevent spoofing attacks using photos or videos.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Liveness Cam Package

## Installation
To get started with the **liveness_cam** package, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  liveness_cam: ^latest_version
```

Make sure to replace `^latest_version` with the latest version available on [pub.dev](https://pub.dev/packages/liveness_cam).

## Platform-Specific Configuration

### Android
1. Open your `AndroidManifest.xml` file located at `android/app/src/main/AndroidManifest.xml`.
2. Add the following permissions inside the `<manifest>` tag:

```xml
<uses-permission android:name="android.permission.CAMERA"/>
<uses-permission android:name="android.permission.INTERNET"/>
```

3. Ensure that your `minSdkVersion` is set to at least 21 in `android/app/build.gradle`:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

### iOS
1. Open your `Info.plist` file located at `ios/Runner/Info.plist`.
2. Add the following keys to request camera permissions:

```xml
<key>NSCameraUsageDescription</key>
<string>We need access to your camera for liveness detection.</string>
<key>NSPhotoLibraryUsageDescription</key>
<string>We need access to your photo library for liveness detection.</string>
```

## Using the Package
To use the **liveness_cam** package, you can create a simple Flutter widget that initializes the liveness detection process. Below is a basic example of how to implement it.

```dart
import 'package:flutter/material.dart';
import 'package:liveness_cam/liveness_cam.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Liveness Detection')),
        body: Center(
          child: ElevatedButton(
            onPressed: () async {
              // Start the liveness detection process
              final result = await LivenessCam.startLivenessDetection();
              // Handle the result of the detection
              if (result.isSuccessful) {
                // Proceed with the authenticated action
                print('Liveness detection successful!');
              } else {
                // Handle the failure case
                print('Liveness detection failed: ${result.errorMessage}');
              }
            },
            child: Text('Start Liveness Detection'),
          ),
        ),
      ),
    );
  }
}
```

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of Liveness Cam in Flutter

```dart
import 'package:flutter/material.dart';
import 'package:liveness_cam/liveness_cam.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Liveness Detection')),
        body: Center(
          child: ElevatedButton(
            onPressed: () async {
              // Start the liveness detection process
              final result = await LivenessCam.startLivenessDetection();
              // Handle the result of the detection
              if (result.isSuccessful) {
                // Proceed with the authenticated action
                print('Liveness detection successful!');
              } else {
                // Handle the failure case
                print('Liveness detection failed: ${result.errorMessage}');
              }
            },
            child: Text('Start Liveness Detection'),
          ),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the RealFlutter widget, which builds a MaterialApp.
// 2. The home of the app is a Scaffold containing an AppBar and a Center widget.
// 3. Inside the Center widget, an ElevatedButton is created.
// 4. When the button is pressed, the liveness detection process is initiated by calling LivenessCam.startLivenessDetection().
// 5. The result of the detection is awaited, and based on whether it is successful or not, appropriate actions are taken.
// 6. If successful, a message is printed to the console indicating success; otherwise, an error message is displayed.

void main() {
  runApp(RealFlutter());
}
```
<!-- END_MAIN -->
``` 

This structured blog post provides a comprehensive overview of the **liveness_cam** package, guiding developers through its features, setup, and practical implementation in a Flutter application.
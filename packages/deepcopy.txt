<-- START_DESCRIPTION -->

# Deepcopy Flutter Package
The `deepcopy` Flutter package is a utility library that allows you to create deep copies of objects. This is particularly useful when you need to modify a copy of an object without affecting the original.

## When to Use
You can use `deepcopy` in scenarios where you need to:

* Create a copy of an object to modify without changing the original
* Clone an object to preserve its state
* Create multiple instances of an object with the same properties

## Features
The `deepcopy` package provides the following features:

* Deep copying of objects using the `deepCopy` function
* Support for copying objects with nested properties
* Support for copying objects with custom classes

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
To use the `deepcopy` package, add it to your `pubspec.yaml` file:

```yml
dependencies:
  deepcopy: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Using the Package
To use the `deepcopy` package, import it in your Dart file:

```dart
import 'package:deepcopy/deepcopy.dart';
```

You can then use the `deepCopy` function to create a deep copy of an object:

```dart
class RealFlutter {
  String name;
  int age;

  RealFlutter({this.name, this.age});
}

void main() {
  RealFlutter original = RealFlutter(name: 'John', age: 30);
  RealFlutter copy = deepCopy(original);

  print(copy.name); // prints 'John'
  print(copy.age); // prints 30
}
```

## Platform-Specific Details
The `deepcopy` package works on both Android and iOS platforms. However, if you're using a custom class with nested properties, you may need to implement the `Cloneable` interface to ensure that the object is properly cloned.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:deepcopy/deepcopy.dart';

class RealFlutter {
  String name;
  int age;

  RealFlutter({this.name, this.age});
}

void main() {
  // Create an original object
  RealFlutter original = RealFlutter(name: 'John', age: 30);

  // Create a deep copy of the original object
  RealFlutter copy = deepCopy(original);

  // Modify the copy
  copy.name = 'Jane';
  copy.age = 25;

  // Print the original and copy values
  print('Original Name: ${original.name}'); // prints 'John'
  print('Original Age: ${original.age}'); // prints 30
  print('Copy Name: ${copy.name}'); // prints 'Jane'
  print('Copy Age: ${copy.age}'); // prints 25

  // Create a new object with nested properties
  class NestedObject {
    String nestedName;
    int nestedAge;

    NestedObject({this.nestedName, this.nestedAge});
  }

  class NewObject {
    String name;
    int age;
    NestedObject nestedObject;

    NewObject({this.name, this.age, this.nestedObject});
  }

  // Create an original object with nested properties
  NewObject originalNested = NewObject(
    name: 'John',
    age: 30,
    nestedObject: NestedObject(
      nestedName: 'Nested John',
      nestedAge: 30,
    ),
  );

  // Create a deep copy of the original object with nested properties
  NewObject copyNested = deepCopy(originalNested);

  // Modify the copy
  copyNested.name = 'Jane';
  copyNested.age = 25;
  copyNested.nestedObject.nestedName = 'Nested Jane';
  copyNested.nestedObject.nestedAge = 25;

  // Print the original and copy values
  print('Original Nested Name: ${originalNested.name}'); // prints 'John'
  print('Original Nested Age: ${originalNested.age}'); // prints 30
  print('Original Nested Nested Name: ${originalNested.nestedObject.nestedName}'); // prints 'Nested John'
  print('Original Nested Nested Age: ${originalNested.nestedObject.nestedAge}'); // prints 30
  print('Copy Nested Name: ${copyNested.name}'); // prints 'Jane'
  print('Copy Nested Age: ${copyNested.age}'); // prints 25
  print('Copy Nested Nested Name: ${copyNested.nestedObject.nestedName}'); // prints 'Nested Jane'
  print('Copy Nested Nested Age: ${copyNested.nestedObject.nestedAge}'); // prints 25
}

// The code creates an original object and a deep copy of it.
// It then modifies the copy and prints the original and copy values to demonstrate that the original object remains unchanged.
// The code also demonstrates the use of nested properties and how the deep copy function handles them.
// The output of the code shows that the original object and its nested properties remain unchanged, while the copy and its nested properties are modified.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Simple Time Range Picker
The `simple_time_range_picker` Flutter package provides a simple and intuitive way to select a time range. It is ideal for applications that require users to select a specific time interval, such as scheduling appointments or setting reminders.

## Features
- Easy to use and integrate into existing Flutter applications
- Customizable UI to fit your application's theme
- Supports both 12-hour and 24-hour time formats
- Optional validation for minimum and maximum time ranges

## When to Use
Use this package when you need to allow users to select a specific time range, such as:

- Scheduling appointments or meetings
- Setting reminders or notifications
- Selecting a time interval for a specific task or activity

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
To use the `simple_time_range_picker` package, follow these steps:

### Step 1: Add the Package to Your Project
Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  simple_time_range_picker: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package
Import the package in your Dart file:
```dart
import 'package:simple_time_range_picker/simple_time_range_picker.dart';
```
### Step 3: Use the Package
Create a `SimpleTimeRangePicker` widget and pass the required parameters:
```dart
SimpleTimeRangePicker(
  startTime: TimeOfDay.now(),
  endTime: TimeOfDay.now(),
  onTimeRangeChanged: (startTime, endTime) {
    // Handle the selected time range
  },
)
```
### Platform-Specific Details
- Android: No additional configuration required.
- iOS: No additional configuration required.

### Optional Configurations
- To set a minimum time range, use the `minTimeRange` property.
- To set a maximum time range, use the `maxTimeRange` property.
- To change the time format, use the `timeFormat` property.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:simple_time_range_picker/simple_time_range_picker.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  TimeOfDay _startTime = TimeOfDay.now();
  TimeOfDay _endTime = TimeOfDay.now();

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Simple Time Range Picker Demo'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Text('Select a time range:'),
              SizedBox(height: 20),
              SimpleTimeRangePicker(
                startTime: _startTime,
                endTime: _endTime,
                onTimeRangeChanged: (startTime, endTime) {
                  // Handle the selected time range
                  setState(() {
                    _startTime = startTime;
                    _endTime = endTime;
                  });
                },
              ),
              SizedBox(height: 20),
              Text('Selected time range: ${_startTime.format(context)} - ${_endTime.format(context)}'),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user is presented with a SimpleTimeRangePicker widget.
// 2. The user selects a time range using the widget.
// 3. The onTimeRangeChanged callback is called with the selected time range.
// 4. The selected time range is updated in the app's state.
// 5. The updated time range is displayed to the user.
// This process repeats whenever the user selects a new time range.

// In summary, the code flows as follows:
// The user interacts with the SimpleTimeRangePicker widget.
// The widget calls the onTimeRangeChanged callback with the selected time range.
// The callback updates the app's state with the selected time range.
// The updated state is displayed to the user.

```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

Wizard Router Flutter Package
=============================

The `wizard_router` package is a powerful navigation tool for Flutter applications. It allows developers to define a set of routes and navigate between them in a type-safe and efficient manner. With `wizard_router`, you can create complex navigation flows with ease, making it an ideal choice for large-scale applications.

When to Use Wizard Router
-------------------------

*   When you need to manage a large number of routes in your application.
*   When you want to define a set of routes and navigate between them in a type-safe manner.
*   When you need to handle complex navigation flows, such as conditional routing or routing with parameters.

Features of Wizard Router
-------------------------

*   **Type-safe routing**: Define routes with specific types and navigate between them in a type-safe manner.
*   **Parameter passing**: Pass parameters between routes with ease.
*   **Conditional routing**: Define conditions for routing and navigate accordingly.
*   **Support for custom transitions**: Define custom transitions between routes.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setting Up Wizard Router
-------------------------

To use `wizard_router` in your Flutter application, follow these steps:

1.  Add the `wizard_router` package to your `pubspec.yaml` file:

    ```yml
dependencies:
  flutter:
    sdk: flutter
  wizard_router: ^1.0.0
```

2.  Run `flutter pub get` to get the package.

3.  Import the `wizard_router` package in your Dart file:

    ```dart
import 'package:wizard_router/wizard_router.dart';
```

Defining Routes
----------------

To define routes with `wizard_router`, you need to create a `WizardRoute` object and specify the route's name, path, and builder function. Here's an example:

```dart
final homeRoute = WizardRoute(
  name: 'home',
  path: '/',
  builder: (context) => HomeScreen(),
);
```

Navigating Between Routes
-------------------------

To navigate between routes, you can use the `WizardRouter` class. Here's an example:

```dart
WizardRouter.of(context).pushNamed('home');
```

You can also pass parameters between routes using the `arguments` property:

```dart
WizardRouter.of(context).pushNamed('details', arguments: 'Product 1');
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:wizard_router/wizard_router.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Wizard Router Demo',
      home: WizardRouter(
        routes: [
          WizardRoute(
            name: 'home',
            path: '/',
            builder: (context) => HomeScreen(),
          ),
          WizardRoute(
            name: 'details',
            path: '/details',
            builder: (context) => DetailsScreen(),
          ),
        ],
      ),
    );
  }
}

class HomeScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Home Screen'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Navigate to details screen with parameter
            WizardRouter.of(context).pushNamed('details', arguments: 'Product 1');
          },
          child: Text('Go to Details Screen'),
        ),
      ),
    );
  }
}

class DetailsScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Get the parameter passed from home screen
    final product = WizardRouter.of(context).arguments;

    return Scaffold(
      appBar: AppBar(
        title: Text('Details Screen'),
      ),
      body: Center(
        child: Text('Product: $product'),
      ),
    );
  }
}

// Application flow:
// 1. The user opens the app and is navigated to the home screen.
// 2. The user clicks the "Go to Details Screen" button on the home screen.
// 3. The app navigates to the details screen with the parameter "Product 1".
// 4. The details screen displays the product name passed from the home screen.

// Summary:
// This code demonstrates the use of Wizard Router to navigate between two screens in a Flutter app.
// It shows how to define routes, navigate between them, and pass parameters.
```

<-- END_MAIN -->
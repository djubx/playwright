# Exploring the "wa_me" Flutter Package

## <-- START_DESCRIPTION -->

### Description

The `wa_me` Flutter package is a powerful tool designed to facilitate the integration of WhatsApp messaging into Flutter applications. This package allows developers to create links that open a chat with a specific phone number on WhatsApp, making it easier for users to initiate conversations directly from the app. 

### When to Use

You might consider using the `wa_me` package in scenarios such as:
- **Customer Support**: Allowing users to contact support directly via WhatsApp.
- **E-commerce**: Enabling customers to inquire about products or services through WhatsApp.
- **Social Networking**: Facilitating easy communication between users.

### Features

- **Direct Chat Links**: Create links that open a chat with a specified phone number.
- **Custom Messages**: Pre-fill messages that users can send when they open the chat.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS devices.

## <-- END_DESCRIPTION -->

## <-- START_TUTORIAL -->

### Tutorial

#### Installation

To get started with the `wa_me` package, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  wa_me: ^latest_version
```

Make sure to replace `latest_version` with the most recent version of the package available on [pub.dev](https://pub.dev/packages/wa_me).

#### Platform-Specific Configuration

**For Android:**
1. Ensure that your `AndroidManifest.xml` file has the necessary permissions to access the internet:
   ```xml
   <uses-permission android:name="android.permission.INTERNET"/>
   ```

**For iOS:**
1. Open your `Info.plist` file and add the following entry to allow outgoing links:
   ```xml
   <key>LSApplicationQueriesSchemes</key>
   <array>
       <string>whatsapp</string>
   </array>
   ```

#### Using the Package

To use the `wa_me` package, you can create a function that generates a WhatsApp link. Hereâ€™s a simple example:

```dart
import 'package:flutter/material.dart';
import 'package:wa_me/wa_me.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('WhatsApp Integration')),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              // Replace with your phone number and message
              String phoneNumber = '1234567890';
              String message = 'Hello, I need help!';
              WaMe.sendMessage(phoneNumber, message);
            },
            child: Text('Chat on WhatsApp'),
          ),
        ),
      ),
    );
  }
}
```

In this example, when the button is pressed, it opens a WhatsApp chat with the specified phone number and pre-fills the message.

## <-- END_TUTORIAL -->

## <-- START_MAIN -->

### Complete Example

```dart
import 'package:flutter/material.dart';
import 'package:wa_me/wa_me.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('WhatsApp Integration')),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              // Define the phone number and message to send
              String phoneNumber = '1234567890'; // Replace with your phone number
              String message = 'Hello, I need help!'; // Message to pre-fill
              
              // Use the WaMe package to send the message
              WaMe.sendMessage(phoneNumber, message);
            },
            child: Text('Chat on WhatsApp'), // Button text
          ),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the RealFlutter class, which is a StatelessWidget.
// 2. The MaterialApp widget is created, providing the app structure.
// 3. A Scaffold widget is used to create the basic visual layout, including an AppBar and a Center widget.
// 4. Inside the Center widget, an ElevatedButton is created.
// 5. When the button is pressed, it triggers the onPressed callback.
// 6. The phone number and message are defined as strings.
// 7. The WaMe.sendMessage method is called with the phone number and message, which opens WhatsApp with the specified chat.
// 8. The user can then send the pre-filled message directly from WhatsApp.
```

## Summary

In this example, we demonstrated how to integrate the `wa_me` package into a Flutter application. The application allows users to initiate a WhatsApp chat with a predefined message by pressing a button. The flow of the application is straightforward, making it easy for developers to implement WhatsApp messaging functionality in their apps. This package is particularly useful for businesses looking to enhance customer communication through WhatsApp.
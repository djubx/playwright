<-- START_DESCRIPTION -->

Asset Webview Flutter Package
=============================

The `asset_webview` Flutter package allows you to load web content from assets or URLs into a Flutter app. It provides a simple and efficient way to display web pages, HTML content, or even entire web applications within your Flutter app.

When to Use
------------

* Displaying web content, such as HTML pages, within your Flutter app.
* Loading web pages from URLs or assets.
* Creating hybrid apps that combine native Flutter widgets with web content.

Features
--------

* Load web content from assets or URLs.
* Supports HTML, CSS, and JavaScript.
* Customizable web view settings, such as zooming and scrolling.
* Platform-specific optimizations for Android and iOS.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
----------------

### Step 1: Add the Package to Your Pubspec.yaml File

```yml
dependencies:
  asset_webview: ^1.0.0
```

### Step 2: Import the Package in Your Dart File

```dart
import 'package:asset_webview/asset_webview.dart';
```

### Step 3: Create a Web View Widget

```dart
AssetWebview(
  asset: 'assets/index.html', // or use 'url' property for loading from URL
  width: 300,
  height: 400,
)
```

### Platform-Specific Configurations

#### Android

* Add the following code to your `AndroidManifest.xml` file:

```xml
<application
  ...
  android:hardwareAccelerated="true"
  ...
>
```

#### iOS

* Add the following code to your `Info.plist` file:

```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:asset_webview/asset_webview.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Asset Webview Demo',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Asset Webview Demo'),
        ),
        body: Center(
          child: AssetWebview(
            asset: 'assets/index.html', // or use 'url' property for loading from URL
            width: 300,
            height: 400,
            // customize web view settings
            zoomEnabled: true,
            scrollEnabled: true,
          ),
        ),
      ),
    );
  }
}

// Application flow:
// 1. The app starts and runs the `main` function.
// 2. The `main` function calls the `runApp` function with an instance of `RealFlutter`.
// 3. The `RealFlutter` widget builds the app's UI using the `MaterialApp` and `Scaffold` widgets.
// 4. The `Scaffold` widget contains an `AppBar` and a `Center` widget.
// 5. The `Center` widget contains an `AssetWebview` widget, which loads the web content from the specified asset or URL.
// 6. The `AssetWebview` widget displays the web content and allows the user to interact with it.
// 7. The app continues to run and respond to user input until it is closed.

// Final summary:
// This code demonstrates how to use the `asset_webview` package to load web content from assets or URLs into a Flutter app.
// The app uses the `MaterialApp` and `Scaffold` widgets to build its UI, and the `AssetWebview` widget to display the web content.
// The app allows the user to interact with the web content and continues to run until it is closed.
```

<-- END_MAIN -->
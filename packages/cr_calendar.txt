<-- START_DESCRIPTION -->

# cr_calendar Flutter Package
The cr_calendar package is a powerful and customizable calendar library for Flutter. It provides a simple and intuitive way to display a calendar in your Flutter app, allowing users to select dates and navigate through different months and years.

## When to Use
The cr_calendar package is perfect for apps that require a calendar interface, such as:

* Scheduling apps
* Event planning apps
* Booking apps
* Personal productivity apps

## Features
The cr_calendar package comes with a range of features, including:

* Customizable calendar layout
* Support for different calendar formats (e.g. Gregorian, Julian)
* Ability to select single or multiple dates
* Navigation through different months and years
* Optional header and footer widgets

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up cr_calendar
To use the cr_calendar package in your Flutter app, follow these steps:

1. Add the cr_calendar package to your pubspec.yaml file:
```yml
dependencies:
  cr_calendar: ^1.0.0
```
2. Run `flutter pub get` to install the package.
3. Import the cr_calendar package in your Dart file:
```dart
import 'package:cr_calendar/cr_calendar.dart';
```
4. Create a `CrCalendar` widget and customize it as needed:
```dart
CrCalendar(
  // Set the initial date
  initialDate: DateTime.now(),
  // Set the calendar format
  calendarFormat: CalendarFormat.gregorian,
  // Set the header and footer widgets
  header: Text('Calendar Header'),
  footer: Text('Calendar Footer'),
  // Set the date selection mode
  selectionMode: DateSelectionMode.single,
  // Set the navigation mode
  navigationMode: NavigationMode.months,
)
```
### Platform-Specific Details
The cr_calendar package works on both Android and iOS platforms. However, there are some platform-specific details to keep in mind:

* On Android, the calendar will use the device's default calendar font.
* On iOS, the calendar will use the `SF Pro` font by default.

### Required Configurations and Optimizations
To ensure optimal performance, make sure to:

* Use a reasonable font size for the calendar text.
* Avoid using too many widgets in the header and footer.
* Use a efficient navigation mode (e.g. `NavigationMode.months`) for large date ranges.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:cr_calendar/cr_calendar.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'cr_calendar Demo',
      home: Scaffold(
        appBar: AppBar(
          title: Text('cr_calendar Demo'),
        ),
        body: CrCalendar(
          // Set the initial date
          initialDate: DateTime.now(),
          // Set the calendar format
          calendarFormat: CalendarFormat.gregorian,
          // Set the header and footer widgets
          header: Text('Calendar Header'),
          footer: Text('Calendar Footer'),
          // Set the date selection mode
          selectionMode: DateSelectionMode.single,
          // Set the navigation mode
          navigationMode: NavigationMode.months,
          // Handle date selection
          onDateSelected: (date) {
            print('Selected date: $date');
          },
        ),
      ),
    );
  }
}

// The app starts by running the main function, which creates a RealFlutter widget.
// The RealFlutter widget builds a MaterialApp with a Scaffold containing an AppBar and a CrCalendar widget.
// The CrCalendar widget is customized with an initial date, calendar format, header and footer widgets, date selection mode, and navigation mode.
// When a date is selected, the onDateSelected callback is called, printing the selected date to the console.
// The app uses a reasonable font size for the calendar text and avoids using too many widgets in the header and footer for optimal performance.
```

<-- END_MAIN -->
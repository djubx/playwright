```markdown
<!-- START_DESCRIPTION -->
# Upgrade Util: A Comprehensive Overview

The `upgrade_util` Flutter package is designed to simplify the process of checking for and prompting users to upgrade their applications. This package is particularly useful for developers who want to ensure that their users are always using the latest version of their app, which can help in maintaining security, performance, and user experience.

## When to Use `upgrade_util`
- **Version Management**: When you want to manage app versions effectively and ensure users are on the latest version.
- **User Engagement**: To prompt users to upgrade when a new version is available, enhancing user engagement and satisfaction.
- **Bug Fixes and Features**: When you release critical bug fixes or new features that you want all users to access promptly.

## Key Features
- **Version Checking**: Automatically checks the current app version against the latest version available.
- **User Prompts**: Provides customizable prompts to encourage users to upgrade.
- **Platform Support**: Works seamlessly on both Android and iOS platforms.
- **Customizable Behavior**: Allows developers to customize the upgrade prompt and behavior based on their app's needs.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using `upgrade_util`

## Installation
To get started with the `upgrade_util` package, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  upgrade_util: ^latest_version
```

Make sure to replace `^latest_version` with the most recent version of the package available on [pub.dev](https://pub.dev/packages/upgrade_util).

## Platform-Specific Configuration

### Android
1. Ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file:
   ```groovy
   android {
       ...
       defaultConfig {
           ...
           minSdkVersion 21
           ...
       }
   }
   ```

### iOS
1. Open your `ios/Runner/Info.plist` file and ensure you have the following permissions:
   ```xml
   <key>NSAppTransportSecurity</key>
   <dict>
       <key>NSAllowsArbitraryLoads</key>
       <true/>
   </dict>
   ```

## Basic Usage
To use the `upgrade_util` package, you need to initialize it and check for updates. Hereâ€™s a simple example of how to do this in your Flutter app:

```dart
import 'package:flutter/material.dart';
import 'package:upgrade_util/upgrade_util.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Upgrade Util Example',
      home: UpgradeCheckScreen(),
    );
  }
}

class UpgradeCheckScreen extends StatefulWidget {
  @override
  _UpgradeCheckScreenState createState() => _UpgradeCheckScreenState();
}

class _UpgradeCheckScreenState extends State<UpgradeCheckScreen> {
  @override
  void initState() {
    super.initState();
    _checkForUpgrade();
  }

  void _checkForUpgrade() async {
    // Check for updates
    final isUpdateAvailable = await UpgradeUtil.isUpdateAvailable();
    if (isUpdateAvailable) {
      // Prompt user to upgrade
      UpgradeUtil.promptUpgrade();
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Upgrade Util Example'),
      ),
      body: Center(
        child: Text('Checking for updates...'),
      ),
    );
  }
}
```

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of `upgrade_util`

```dart
import 'package:flutter/material.dart';
import 'package:upgrade_util/upgrade_util.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Upgrade Util Example',
      home: UpgradeCheckScreen(),
    );
  }
}

class UpgradeCheckScreen extends StatefulWidget {
  @override
  _UpgradeCheckScreenState createState() => _UpgradeCheckScreenState();
}

class _UpgradeCheckScreenState extends State<UpgradeCheckScreen> {
  @override
  void initState() {
    super.initState();
    _checkForUpgrade(); // Call the method to check for updates when the screen initializes
  }

  void _checkForUpgrade() async {
    // Check if an update is available
    final isUpdateAvailable = await UpgradeUtil.isUpdateAvailable();
    if (isUpdateAvailable) {
      // If an update is available, prompt the user to upgrade
      UpgradeUtil.promptUpgrade();
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Upgrade Util Example'), // Title of the app
      ),
      body: Center(
        child: Text('Checking for updates...'), // Display a message while checking for updates
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the RealFlutter widget.
// 2. RealFlutter builds a MaterialApp with a title and sets UpgradeCheckScreen as the home.
// 3. UpgradeCheckScreen initializes its state and calls _checkForUpgrade in initState.
// 4. _checkForUpgrade checks if an update is available using UpgradeUtil.
// 5. If an update is available, it prompts the user to upgrade.
// 6. The UI displays a simple message while the update check is in progress.
```
<!-- END_MAIN -->
``` 

This structured approach provides a comprehensive understanding of the `upgrade_util` package, guiding developers through its features, setup, and practical implementation.
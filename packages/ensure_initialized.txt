<-- START_DESCRIPTION -->

# Ensure Initialized Flutter Package
=====================================

The `ensure_initialized` Flutter package is a utility library that helps ensure that the Flutter engine is fully initialized before running any application code. This is particularly useful when using plugins that require the engine to be initialized before they can be used.

### When to Use

You should use this package in the following scenarios:

* When using plugins that require the Flutter engine to be initialized before they can be used.
* When you need to perform some initialization tasks before running your application code.

### Features

The `ensure_initialized` package provides the following features:

* A simple and easy-to-use API for ensuring that the Flutter engine is initialized.
* Support for both Android and iOS platforms.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the Package
=====================================

To use the `ensure_initialized` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  ensure_initialized: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:ensure_initialized/ensure_initialized.dart';
```
### Step 3: Use the Package

Use the `ensureInitialized` function to ensure that the Flutter engine is initialized:
```dart
void main() async {
  await ensureInitialized();
  runApp(MyApp());
}
```
### Platform-Specific Details

#### Android

On Android, the `ensureInitialized` function will wait for the Flutter engine to be initialized before returning. This is done by listening to the `onInitialized` callback of the `FlutterEngine` instance.

#### iOS

On iOS, the `ensureInitialized` function will use the `dispatch_semaphore_wait` function to wait for the Flutter engine to be initialized.

### Configurations and Optimizations

You can configure the package to timeout after a certain amount of time by passing a `timeout` parameter to the `ensureInitialized` function:
```dart
void main() async {
  await ensureInitialized(timeout: Duration(seconds: 10));
  runApp(MyApp());
}
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:ensure_initialized/ensure_initialized.dart';

void main() async {
  // Step 1: Ensure that the Flutter engine is initialized
  await ensureInitialized();

  // Step 2: Run the application
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Step 3: Build the application UI
    return MaterialApp(
      title: 'Real Flutter',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Real Flutter'),
        ),
        body: Center(
          child: Text('Hello, World!'),
        ),
      ),
    );
  }
}

// Application flow:
// 1. The `main` function is called, which ensures that the Flutter engine is initialized using the `ensureInitialized` function.
// 2. Once the engine is initialized, the `main` function runs the application using the `runApp` function.
// 3. The `RealFlutter` widget is built, which creates the application UI.
// 4. The application UI is displayed on the screen.

// Final summary:
// The `ensure_initialized` package is used to ensure that the Flutter engine is initialized before running the application code.
// The package provides a simple and easy-to-use API for ensuring that the engine is initialized.
// The application flow involves ensuring that the engine is initialized, running the application, building the application UI, and displaying the UI on the screen.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

**Android Download Manager Flutter Package**
=============================================

The `android_download_manager` Flutter package provides a simple and efficient way to manage downloads on Android devices. It allows you to download files in the background, pause and resume downloads, and even handle errors.

**When to Use This Package**
---------------------------

This package is ideal for apps that require downloading large files, such as videos, images, or documents. It's also useful for apps that need to download data in the background, such as podcast apps or music streaming services.

**Features**
------------

*   Download files in the background
*   Pause and resume downloads
*   Handle errors and exceptions
*   Get download progress updates
*   Cancel downloads

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setup and Usage**
-------------------

### Step 1: Add the Package to Your Pubspec.yaml File

```yml
dependencies:
  flutter:
    sdk: flutter
  android_download_manager: ^1.0.0
```

### Step 2: Import the Package in Your Dart File

```dart
import 'package:android_download_manager/android_download_manager.dart';
```

### Step 3: Initialize the Download Manager

```dart
void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await AndroidDownloadManager.initialize();
  runApp(MyApp());
}
```

### Step 4: Start a Download

```dart
void startDownload() async {
  final downloadId = await AndroidDownloadManager.enqueue(
    url: 'https://example.com/file.txt',
    fileName: 'file.txt',
    destination: AndroidDownloadDestination.externalDownloads,
  );
  print('Download started: $downloadId');
}
```

### Step 5: Get Download Progress Updates

```dart
void getProgress() async {
  final progress = await AndroidDownloadManager.getProgress(downloadId);
  print('Download progress: ${progress.percent}%');
}
```

### Step 6: Pause or Resume a Download

```dart
void pauseDownload() async {
  await AndroidDownloadManager.pause(downloadId);
  print('Download paused');
}

void resumeDownload() async {
  await AndroidDownloadManager.resume(downloadId);
  print('Download resumed');
}
```

### Step 7: Cancel a Download

```dart
void cancelDownload() async {
  await AndroidDownloadManager.cancel(downloadId);
  print('Download canceled');
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:android_download_manager/android_download_manager.dart';

void main() async {
  // Initialize the download manager
  WidgetsFlutterBinding.ensureInitialized();
  await AndroidDownloadManager.initialize();

  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  int _downloadId;

  void _startDownload() async {
    // Start a download
    final downloadId = await AndroidDownloadManager.enqueue(
      url: 'https://example.com/file.txt',
      fileName: 'file.txt',
      destination: AndroidDownloadDestination.externalDownloads,
    );
    setState(() {
      _downloadId = downloadId;
    });
    print('Download started: $downloadId');
  }

  void _getProgress() async {
    // Get download progress updates
    final progress = await AndroidDownloadManager.getProgress(_downloadId);
    print('Download progress: ${progress.percent}%');
  }

  void _pauseDownload() async {
    // Pause a download
    await AndroidDownloadManager.pause(_downloadId);
    print('Download paused');
  }

  void _resumeDownload() async {
    // Resume a download
    await AndroidDownloadManager.resume(_downloadId);
    print('Download resumed');
  }

  void _cancelDownload() async {
    // Cancel a download
    await AndroidDownloadManager.cancel(_downloadId);
    print('Download canceled');
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Android Download Manager Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              ElevatedButton(
                onPressed: _startDownload,
                child: Text('Start Download'),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _getProgress,
                child: Text('Get Progress'),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _pauseDownload,
                child: Text('Pause Download'),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _resumeDownload,
                child: Text('Resume Download'),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _cancelDownload,
                child: Text('Cancel Download'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user clicks the "Start Download" button, which calls the _startDownload function.
// 2. The _startDownload function starts a download using the AndroidDownloadManager.enqueue method.
// 3. The download ID is stored in the _downloadId variable.
// 4. The user can then click the "Get Progress" button to get the download progress updates.
// 5. The _getProgress function calls the AndroidDownloadManager.getProgress method to get the download progress.
// 6. The user can pause the download by clicking the "Pause Download" button.
// 7. The _pauseDownload function calls the AndroidDownloadManager.pause method to pause the download.
// 8. The user can resume the download by clicking the "Resume Download" button.
// 9. The _resumeDownload function calls the AndroidDownloadManager.resume method to resume the download.
// 10. The user can cancel the download by clicking the "Cancel Download" button.
// 11. The _cancelDownload function calls the AndroidDownloadManager.cancel method to cancel the download.

```

<-- END_MAIN -->
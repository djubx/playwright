<-- START_DESCRIPTION -->

# Cuberto Bottom Bar Flutter Package
=====================================

The `cuberto_bottom_bar` Flutter package is a customizable bottom navigation bar that provides a sleek and modern design for your Flutter applications. It is highly configurable, allowing you to personalize the appearance and behavior of the navigation bar to suit your app's needs.

### When to Use This Package

This package is ideal for apps that require a bottom navigation bar with a modern design. It is particularly useful when you need to display multiple navigation items with icons, labels, and colors.

### Features

*   Customizable navigation bar with various styles and colors
*   Supports multiple navigation items with icons and labels
*   Animated transitions between navigation items
*   Highly configurable to fit your app's design

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using Cuberto Bottom Bar

## Step 1: Add the Package to Your Project

To use the `cuberto_bottom_bar` package, you need to add it to your project's `pubspec.yaml` file. Add the following line under the `dependencies` section:

```yml
dependencies:
  flutter:
    sdk: flutter
  cuberto_bottom_bar: ^1.1.0+1
```

Then, run `flutter pub get` in your terminal to install the package.

## Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:cuberto_bottom_bar/cuberto_bottom_bar.dart';
```

## Step 3: Create a Cuberto Bottom Bar

Create a `CubertoBottomBar` widget and pass the required properties:

```dart
CubertoBottomBar(
  items: [
    CubertoBottomBarItem(
      icon: Icon(Icons.home),
      title: Text('Home'),
    ),
    CubertoBottomBarItem(
      icon: Icon(Icons.search),
      title: Text('Search'),
    ),
    CubertoBottomBarItem(
      icon: Icon(Icons.settings),
      title: Text('Settings'),
    ),
  ],
  onTap: (index) {
    // Handle tap event
  },
)
```

## Step 4: Customize the Bottom Bar (Optional)

You can customize the bottom bar's appearance by passing additional properties:

```dart
CubertoBottomBar(
  // ...
  barColor: Colors.white,
  selectedItemColor: Colors.blue,
  unselectedItemColor: Colors.grey,
  // ...
)
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:cuberto_bottom_bar/cuberto_bottom_bar.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Cuberto Bottom Bar Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  int _currentIndex = 0;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: IndexedStack(
        index: _currentIndex,
        children: [
          Center(
            child: Text('Home Page'),
          ),
          Center(
            child: Text('Search Page'),
          ),
          Center(
            child: Text('Settings Page'),
          ),
        ],
      ),
      bottomNavigationBar: CubertoBottomBar(
        items: [
          CubertoBottomBarItem(
            icon: Icon(Icons.home),
            title: Text('Home'),
          ),
          CubertoBottomBarItem(
            icon: Icon(Icons.search),
            title: Text('Search'),
          ),
          CubertoBottomBarItem(
            icon: Icon(Icons.settings),
            title: Text('Settings'),
          ),
        ],
        onTap: (index) {
          setState(() {
            _currentIndex = index;
          });
        },
        barColor: Colors.white,
        selectedItemColor: Colors.blue,
        unselectedItemColor: Colors.grey,
      ),
    );
  }
}

// The application flow:
// 1. The user taps on a bottom bar item.
// 2. The onTap callback is called with the index of the tapped item.
// 3. The _currentIndex is updated to the tapped index.
// 4. The IndexedStack is rebuilt with the new index.
// 5. The corresponding page is displayed.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Email Auth Flutter Package
================================

The `email_auth` Flutter package provides a simple and easy-to-use interface for authenticating users via email. It supports both Android and iOS platforms, making it a versatile choice for mobile app development.

## When to Use
--------------

Use the `email_auth` package when you need to authenticate users via email in your Flutter app. This package is particularly useful when you want to provide a seamless and secure authentication experience for your users.

## Features
------------

*   Supports both Android and iOS platforms
*   Easy-to-use interface for authenticating users via email
*   Secure authentication process using OTP (One-Time Password)
*   Customizable OTP length and expiration time

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Email Auth Package
=====================================================

## Step 1: Add the Package to Your Pubspec.yaml File
------------------------------------------------

Add the following line to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  email_auth: ^1.0.0
```

Then, run `flutter pub get` in your terminal to get the package.

## Step 2: Import the Package in Your Dart File
---------------------------------------------

Import the package in your Dart file:

```dart
import 'package:email_auth/email_auth.dart';
```

## Step 3: Initialize the EmailAuth Class
-----------------------------------------

Initialize the `EmailAuth` class:

```dart
EmailAuth emailAuth = EmailAuth(
  sessionName: "Your Session Name",
);
```

## Step 4: Send OTP to the User's Email
--------------------------------------

Send OTP to the user's email:

```dart
void sendOtp() async {
  bool result = await emailAuth.sendOtp(
    recipientMail: "user@example.com",
    otpLength: 5,
  );
  if (result) {
    print("OTP sent successfully");
  } else {
    print("Error sending OTP");
  }
}
```

## Step 5: Validate the User's OTP
----------------------------------

Validate the user's OTP:

```dart
void validateOtp() async {
  bool result = await emailAuth.validateOtp(
    recipientMail: "user@example.com",
    userOtp: "12345",
  );
  if (result) {
    print("OTP is valid");
  } else {
    print("OTP is invalid");
  }
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:email_auth/email_auth.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Email Auth Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _formKey = GlobalKey<FormState>();
  final _emailController = TextEditingController();
  final _otpController = TextEditingController();
  EmailAuth emailAuth = EmailAuth(sessionName: "Your Session Name");

  void sendOtp() async {
    // Send OTP to the user's email
    bool result = await emailAuth.sendOtp(
      recipientMail: _emailController.text,
      otpLength: 5,
    );
    if (result) {
      print("OTP sent successfully");
    } else {
      print("Error sending OTP");
    }
  }

  void validateOtp() async {
    // Validate the user's OTP
    bool result = await emailAuth.validateOtp(
      recipientMail: _emailController.text,
      userOtp: _otpController.text,
    );
    if (result) {
      print("OTP is valid");
    } else {
      print("OTP is invalid");
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Email Auth Demo'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              TextFormField(
                controller: _emailController,
                decoration: InputDecoration(
                  labelText: 'Email',
                  border: OutlineInputBorder(),
                ),
                validator: (value) {
                  if (value!.isEmpty) {
                    return 'Please enter your email';
                  }
                  return null;
                },
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: sendOtp,
                child: Text('Send OTP'),
              ),
              SizedBox(height: 20),
              TextFormField(
                controller: _otpController,
                decoration: InputDecoration(
                  labelText: 'OTP',
                  border: OutlineInputBorder(),
                ),
                validator: (value) {
                  if (value!.isEmpty) {
                    return 'Please enter your OTP';
                  }
                  return null;
                },
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: validateOtp,
                child: Text('Validate OTP'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user enters their email address and clicks the "Send OTP" button.
// 2. The EmailAuth class sends an OTP to the user's email address.
// 3. The user receives the OTP and enters it in the OTP field.
// 4. The user clicks the "Validate OTP" button.
// 5. The EmailAuth class validates the OTP entered by the user.
// 6. If the OTP is valid, the user is authenticated successfully.

// This code demonstrates the usage of the EmailAuth class to authenticate users via email.
// It shows how to send an OTP to the user's email address and validate the OTP entered by the user.
```

<-- END_MAIN -->
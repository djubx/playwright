```markdown
<!-- START_DESCRIPTION -->
# Currency Decoration Flutter Package

The `currency_decoration` package is a Flutter library designed to simplify the formatting of currency values in your applications. It provides a straightforward way to display currency amounts with appropriate symbols, decimal places, and thousands separators, making it ideal for financial applications, e-commerce platforms, or any app that deals with monetary values.

## When to Use This Package
You should consider using the `currency_decoration` package when:
- You need to display currency values in a user-friendly format.
- You want to ensure consistency in how currency is presented across your application.
- You require localization support for different currency formats.

## Key Features
- **Customizable Currency Symbols**: Easily set the currency symbol to match the user's locale.
- **Decimal and Thousands Separators**: Automatically formats numbers with appropriate separators.
- **Localization Support**: Supports multiple currencies and formats based on locale settings.
- **Easy Integration**: Simple API that integrates seamlessly with Flutter's existing widgets.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Currency Decoration

## Installation
To add the `currency_decoration` package to your Flutter project, include it in your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  currency_decoration: ^latest_version
```

Make sure to replace `latest_version` with the most recent version available on [pub.dev](https://pub.dev/packages/currency_decoration).

## Platform-Specific Details
### Android
No additional configuration is required for Android. Just ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file.

### iOS
For iOS, ensure that you have the correct permissions set in your `Info.plist` if you are accessing any network resources or user data.

## Usage
To use the `currency_decoration` package, you can create a `TextField` or `Text` widget that formats the input or display value as currency. Hereâ€™s a simple example:

```dart
import 'package:flutter/material.dart';
import 'package:currency_decoration/currency_decoration.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Currency Decoration Example')),
        body: Center(
          child: Text(
            1234567.89.toCurrencyString(), // Formats the number as currency
            style: TextStyle(fontSize: 24),
          ),
        ),
      ),
    );
  }
}
```

In this example, the `toCurrencyString()` method formats the number into a currency string based on the default locale.

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of Currency Decoration

```dart
import 'package:flutter/material.dart';
import 'package:currency_decoration/currency_decoration.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Currency Decoration Example')),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              // Displaying a formatted currency value
              Text(
                1234567.89.toCurrencyString(), // Formats the number as currency
                style: TextStyle(fontSize: 24),
              ),
              SizedBox(height: 20),
              // Input field for currency
              Padding(
                padding: const EdgeInsets.all(16.0),
                child: TextField(
                  decoration: InputDecoration(
                    labelText: 'Enter amount',
                    border: OutlineInputBorder(),
                  ),
                  keyboardType: TextInputType.number,
                  onChanged: (value) {
                    // Convert input to double and format as currency
                    double amount = double.tryParse(value) ?? 0.0;
                    String formattedAmount = amount.toCurrencyString();
                    print(formattedAmount); // Output the formatted currency
                  },
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the RealFlutter widget, which builds a MaterialApp.
// 2. The Scaffold widget provides a structure with an AppBar and a body.
// 3. In the body, a Column widget is used to arrange the Text and TextField vertically.
// 4. The Text widget displays a hardcoded currency value formatted using toCurrencyString().
// 5. A TextField allows users to input a numeric value, which is then parsed and formatted as currency.
// 6. The formatted currency is printed to the console whenever the input changes.
```
<!-- END_MAIN -->
``` 

This structured approach provides a comprehensive overview of the `currency_decoration` package, guiding developers through its features, setup, and practical usage in a Flutter application.
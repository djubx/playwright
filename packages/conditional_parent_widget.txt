<-- START_DESCRIPTION -->

**Conditional Parent Widget Package**
=====================================

The `conditional_parent_widget` package is a Flutter package that allows you to conditionally wrap a child widget with a parent widget based on a specific condition. This package is useful when you want to apply a specific layout or behavior to a child widget only when a certain condition is met.

**When to Use This Package**
---------------------------

You can use this package in scenarios such as:

* Applying a specific layout to a child widget only when the screen size is above or below a certain threshold.
* Wrapping a child widget with a `GestureDetector` only when a certain condition is met.
* Conditionally applying a specific style or theme to a child widget.

**Features**
------------

* Conditionally wraps a child widget with a parent widget based on a specific condition.
* Supports multiple conditions and parent widgets.
* Easy to use and integrate into your existing Flutter app.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setup and Usage**
-------------------

To use the `conditional_parent_widget` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  flutter:
    sdk: flutter
  conditional_parent_widget: ^1.0.0
```
2. Import the package in your Dart file:
```dart
import 'package:conditional_parent_widget/conditional_parent_widget.dart';
```
3. Use the `ConditionalParentWidget` widget to conditionally wrap a child widget:
```dart
ConditionalParentWidget(
  condition: MediaQuery.of(context).size.width > 600,
  parent: Container(
    color: Colors.red,
  ),
  child: Text('Hello World'),
)
```
In this example, the `Text` widget will be wrapped with a `Container` widget with a red background color only when the screen width is above 600 pixels.

**Platform-Specific Details**
---------------------------

This package works on both Android and iOS platforms. However, you may need to adjust the condition and parent widget based on the specific platform requirements.

**Configurations and Optimizations**
-----------------------------------

You can configure the package by passing additional properties to the `ConditionalParentWidget` widget. For example, you can pass a `fallback` widget to display when the condition is not met:
```dart
ConditionalParentWidget(
  condition: MediaQuery.of(context).size.width > 600,
  parent: Container(
    color: Colors.red,
  ),
  fallback: Container(
    color: Colors.blue,
  ),
  child: Text('Hello World'),
)
```
In this example, the `Text` widget will be wrapped with a `Container` widget with a blue background color when the screen width is below 600 pixels.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:conditional_parent_widget/conditional_parent_widget.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Conditional Parent Widget Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Conditional Parent Widget Demo'),
      ),
      body: Center(
        child: ConditionalParentWidget(
          // Condition: screen width above 600 pixels
          condition: MediaQuery.of(context).size.width > 600,
          // Parent widget: Container with red background color
          parent: Container(
            color: Colors.red,
          ),
          // Fallback widget: Container with blue background color
          fallback: Container(
            color: Colors.blue,
          ),
          // Child widget: Text
          child: Text('Hello World'),
        ),
      ),
    );
  }
}

// Application flow:
// 1. The app checks the screen width and determines whether to wrap the child widget with the parent widget.
// 2. If the screen width is above 600 pixels, the child widget is wrapped with the parent widget (Container with red background color).
// 3. If the screen width is below 600 pixels, the child widget is wrapped with the fallback widget (Container with blue background color).
// 4. The app displays the wrapped child widget on the screen.

// Final summary:
// The code flows by first checking the screen width and determining whether to wrap the child widget with the parent widget.
// Based on the condition, the app wraps the child widget with either the parent widget or the fallback widget.
// Finally, the app displays the wrapped child widget on the screen.
```

<-- END_MAIN -->
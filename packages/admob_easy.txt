Here's a detailed technical blog on the "admob_easy" Flutter package, structured as requested.

<!-- START_DESCRIPTION -->
# Admob Easy Flutter Package

The **admob_easy** package is a powerful and user-friendly Flutter plugin that simplifies the integration of Google AdMob ads into your Flutter applications. It provides a straightforward API for displaying various types of ads, including banner ads, interstitial ads, and rewarded ads, making it an excellent choice for developers looking to monetize their apps effectively.

## When to Use This Package

You should consider using the **admob_easy** package when:
- You want to integrate AdMob ads into your Flutter application with minimal setup.
- You need support for multiple ad formats (banners, interstitials, rewarded ads).
- You are looking for a package that abstracts away the complexities of native ad integration.

## Features

- **Easy Setup**: The package provides a simple setup process for both Android and iOS platforms.
- **Multiple Ad Formats**: Supports banner ads, interstitial ads, and rewarded ads.
- **Event Handling**: Built-in event listeners to handle ad events such as loading, showing, and errors.
- **Customizable**: Allows customization of ad properties to fit your app's design.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up Admob Easy

In this tutorial, we will walk through the setup process for the **admob_easy** package and demonstrate how to use it in your Flutter application.

## Step 1: Add Dependency

To get started, add the **admob_easy** package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  admob_easy: ^latest_version
```

Make sure to replace `^latest_version` with the latest version of the package.

## Step 2: Configure Android

1. **Update AndroidManifest.xml**: Open `android/app/src/main/AndroidManifest.xml` and add the following permissions and metadata:

```xml
<manifest>
    <application>
        <!-- Add this inside the <application> tag -->
        <meta-data
            android:name="com.google.android.gms.ads.APPLICATION_ID"
            android:value="YOUR_ADMOB_APP_ID"/>
    </application>
</manifest>
```

Replace `YOUR_ADMOB_APP_ID` with your actual AdMob App ID.

2. **Enable ProGuard** (optional): If you are using ProGuard, add the following rules to `proguard-rules.pro`:

```pro
-keep class com.google.android.gms.ads.** { *; }
```

## Step 3: Configure iOS

1. **Update Info.plist**: Open `ios/Runner/Info.plist` and add the following:

```xml
<key>GADApplicationIdentifier</key>
<string>YOUR_ADMOB_APP_ID</string>
```

Replace `YOUR_ADMOB_APP_ID` with your actual AdMob App ID.

2. **Enable App Transport Security**: Ensure that your app can access the AdMob servers by adding the following:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

## Step 4: Initialize AdMob

In your main Dart file, initialize AdMob before running your app:

```dart
import 'package:admob_easy/admob_easy.dart';

void main() {
  AdmobEasy.initialize("YOUR_ADMOB_APP_ID");
  runApp(MyApp());
}
```

## Step 5: Using AdMob Ads

You can now use the various ad formats in your application. Here’s a brief overview of how to implement each ad type:

### Banner Ad

```dart
AdmobBanner(
  adUnitId: "YOUR_BANNER_AD_UNIT_ID",
  adListener: (AdmobAdEvent event) {
    print("Banner Ad event: $event");
  },
);
```

### Interstitial Ad

```dart
AdmobInterstitial(
  adUnitId: "YOUR_INTERSTITIAL_AD_UNIT_ID",
  adListener: (AdmobAdEvent event) {
    print("Interstitial Ad event: $event");
  },
);
```

### Rewarded Ad

```dart
AdmobRewarded(
  adUnitId: "YOUR_REWARDED_AD_UNIT_ID",
  adListener: (AdmobAdEvent event) {
    print("Rewarded Ad event: $event");
  },
);
```

Make sure to replace the ad unit IDs with your actual AdMob ad unit IDs.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example

Here’s a complete example of a Flutter application using the **admob_easy** package:

```dart
import 'package:flutter/material.dart';
import 'package:admob_easy/admob_easy.dart';

void main() {
  // Initialize AdMob with your App ID
  AdmobEasy.initialize("YOUR_ADMOB_APP_ID");
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'AdMob Easy Example',
      home: HomeScreen(),
    );
  }
}

class HomeScreen extends StatefulWidget {
  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  // Create a banner ad instance
  late AdmobBanner _bannerAd;

  @override
  void initState() {
    super.initState();
    // Initialize the banner ad
    _bannerAd = AdmobBanner(
      adUnitId: "YOUR_BANNER_AD_UNIT_ID",
      adListener: (AdmobAdEvent event) {
        print("Banner Ad event: $event");
      },
    );
  }

  @override
  void dispose() {
    // Dispose of the banner ad when the widget is removed
    _bannerAd.dispose();
    super.dispose();
  }

  // Function to show an interstitial ad
  void _showInterstitialAd() {
    AdmobInterstitial(
      adUnitId: "YOUR_INTERSTITIAL_AD_UNIT_ID",
      adListener: (AdmobAdEvent event) {
        print("Interstitial Ad event: $event");
      },
    ).load().show();
  }

  // Function to show a rewarded ad
  void _showRewardedAd() {
    AdmobRewarded(
      adUnitId: "YOUR_REWARDED_AD_UNIT_ID",
      adListener: (AdmobAdEvent event) {
        print("Rewarded Ad event: $event");
      },
    ).load().show();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('AdMob Easy Example'),
      ),
      body: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          // Display the banner ad
          Container(
            alignment: Alignment.center,
            child: _bannerAd,
          ),
          SizedBox(height: 20),
          ElevatedButton(
            onPressed: _showInterstitialAd,
            child: Text('Show Interstitial Ad'),
          ),
          SizedBox(height: 20),
          ElevatedButton(
            onPressed: _showRewardedAd,
            child: Text('Show Rewarded Ad'),
          ),
        ],
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts by initializing AdMob with the provided App ID.
// 2. The HomeScreen widget is displayed, which contains a banner ad and two buttons.
// 3. The banner ad is displayed at the top of the screen.
// 4. When the "Show Interstitial Ad" button is pressed, an interstitial ad is loaded and shown.
// 5. When the "Show Rewarded Ad" button is pressed, a rewarded ad is loaded and shown.
// 6. Ad events are printed to the console for debugging purposes.
```

<!-- END_MAIN -->

## Summary

In this blog, we explored the **admob_easy** Flutter package, detailing its features and providing a comprehensive tutorial on how to set it up and use it in your Flutter applications. The complete example demonstrated how to integrate banner, interstitial, and rewarded ads, along with detailed comments explaining the application flow. This package simplifies the process of monetizing your Flutter apps, making it a valuable tool for developers.
<-- START_DESCRIPTION -->

# Overview of tabby_flutter_inapp_sdk
The `tabby_flutter_inapp_sdk` package is a Flutter plugin that allows developers to integrate Tabby's In-App SDK into their Flutter applications. Tabby is a popular payment platform that provides a seamless checkout experience for users. With this package, developers can easily implement Tabby's payment solutions into their apps, enabling users to make payments with ease.

## When to use this package
This package is ideal for e-commerce applications, online marketplaces, or any other app that requires a secure and efficient payment gateway. By integrating Tabby's In-App SDK, developers can provide their users with a convenient and trustworthy payment experience.

## Features
The `tabby_flutter_inapp_sdk` package offers the following features:

*   Seamless integration with Tabby's payment platform
*   Support for various payment methods, including credit cards and online banking
*   Secure payment processing with tokenization and encryption
*   Customizable payment UI to match your app's branding
*   Easy-to-use APIs for payment processing and management

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting up tabby_flutter_inapp_sdk
To use the `tabby_flutter_inapp_sdk` package, follow these steps:

### Step 1: Add the package to your pubspec.yaml file

```yml
dependencies:
  flutter:
    sdk: flutter
  tabby_flutter_inapp_sdk: ^1.0.0
```

### Step 2: Import the package in your Dart file

```dart
import 'package:tabby_flutter_inapp_sdk/tabby_flutter_inapp_sdk.dart';
```

### Step 3: Initialize the Tabby SDK

```dart
TabbyFlutterInappSdk.initialize(
  apiKey: 'YOUR_API_KEY',
  apiSecret: 'YOUR_API_SECRET',
  environment: TabbyEnvironment.sandbox,
);
```

### Step 4: Create a payment session

```dart
TabbyPaymentSession session = await TabbyFlutterInappSdk.createPaymentSession(
  amount: 10.99,
  currency: 'USD',
  paymentMethods: [TabbyPaymentMethod.card],
);
```

### Step 5: Present the payment UI

```dart
TabbyFlutterInappSdk.presentPaymentUi(
  context: context,
  session: session,
  onPaymentSuccess: (payment) {
    // Handle payment success
  },
  onPaymentFailure: (error) {
    // Handle payment failure
  },
);
```

### Platform-Specific Details

*   For Android, add the following to your `AndroidManifest.xml` file:

    ```xml
<application>
  ...
  <meta-data
    android:name="com.tabby.android.sdk.api_key"
    android:value="YOUR_API_KEY" />
  <meta-data
    android:name="com.tabby.android.sdk.api_secret"
    android:value="YOUR_API_SECRET" />
</application>
```

*   For iOS, add the following to your `Info.plist` file:

    ```xml
<key>TabbyApiKey</key>
<string>YOUR_API_KEY</string>
<key>TabbyApiSecret</key>
<string>YOUR_API_SECRET</string>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:tabby_flutter_inapp_sdk/tabby_flutter_inapp_sdk.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Tabby Flutter In-App SDK Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  // Initialize the Tabby SDK
  Future<void> _initializeTabby() async {
    // Replace with your own API key and secret
    await TabbyFlutterInappSdk.initialize(
      apiKey: 'YOUR_API_KEY',
      apiSecret: 'YOUR_API_SECRET',
      environment: TabbyEnvironment.sandbox,
    );
  }

  // Create a payment session
  Future<TabbyPaymentSession> _createPaymentSession() async {
    // Replace with your own amount and currency
    return await TabbyFlutterInappSdk.createPaymentSession(
      amount: 10.99,
      currency: 'USD',
      paymentMethods: [TabbyPaymentMethod.card],
    );
  }

  // Present the payment UI
  Future<void> _presentPaymentUi() async {
    final session = await _createPaymentSession();
    await TabbyFlutterInappSdk.presentPaymentUi(
      context: context,
      session: session,
      onPaymentSuccess: (payment) {
        // Handle payment success
        print('Payment successful!');
      },
      onPaymentFailure: (error) {
        // Handle payment failure
        print('Payment failed: $error');
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Tabby Flutter In-App SDK Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: _initializeTabby,
              child: Text('Initialize Tabby'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _presentPaymentUi,
              child: Text('Present Payment UI'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user initializes the Tabby SDK by clicking the "Initialize Tabby" button.
// 2. The user creates a payment session by calling the `_createPaymentSession` function.
// 3. The user presents the payment UI by calling the `_presentPaymentUi` function.
// 4. The user completes the payment flow by entering their payment details and confirming the payment.
// 5. The payment is processed and the result is displayed to the user.

// In summary, this code demonstrates how to use the Tabby Flutter In-App SDK to create a payment session and present the payment UI to the user. It also shows how to handle payment success and failure events.
```

<-- END_MAIN -->
```markdown
<!-- START_DESCRIPTION -->
# Cool Alert Flutter Package

The **cool_alert** package is a Flutter library designed to provide customizable alert dialogs that enhance user experience with visually appealing designs. It allows developers to create various types of alerts, including success, error, warning, and info alerts, with minimal effort. This package is particularly useful in applications where user feedback is crucial, such as form submissions, notifications, and confirmations.

## When to Use Cool Alert

You might consider using the **cool_alert** package in scenarios such as:
- Displaying success messages after a user completes an action (e.g., submitting a form).
- Alerting users to errors or warnings (e.g., invalid input).
- Confirming actions that could lead to data loss (e.g., deleting an item).
- Providing information updates or notifications.

## Features

- **Customizable Dialogs**: Easily customize the appearance and behavior of alerts.
- **Multiple Alert Types**: Supports various alert types, including success, error, warning, and info.
- **Animations**: Provides smooth animations for a better user experience.
- **Easy Integration**: Simple API that integrates seamlessly into any Flutter application.

With these features, the **cool_alert** package is a great choice for developers looking to enhance their application's user interface with engaging alerts.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Cool Alert

## Step 1: Adding the Dependency

To use the **cool_alert** package, you first need to add it to your `pubspec.yaml` file. Open the file and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  cool_alert: ^2.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command in your terminal to install it:

```bash
flutter pub get
```

## Step 2: Importing the Package

In your Dart file where you want to use the alerts, import the package:

```dart
import 'package:cool_alert/cool_alert.dart';
```

## Step 3: Using Cool Alert

You can now use the **cool_alert** package to display alerts. Below is an example of how to show a success alert:

```dart
CoolAlert.show(
  context: context,
  type: CoolAlertType.success,
  title: "Success!",
  text: "Your action was successful.",
);
```

### Platform-Specific Details

#### Android

For Android, ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```gradle
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

#### iOS

For iOS, you may need to ensure that your deployment target is set to at least 10.0 in your `ios/Podfile`:

```ruby
platform :ios, '10.0'
```

## Step 4: Customizing Alerts

You can customize the alerts further by adding buttons, changing colors, and more. Hereâ€™s an example of a warning alert with a custom button:

```dart
CoolAlert.show(
  context: context,
  type: CoolAlertType.warning,
  title: "Warning!",
  text: "Are you sure you want to proceed?",
  confirmBtnText: "Yes",
  cancelBtnText: "No",
  onConfirmBtnTap: () {
    // Handle confirmation action
  },
);
```

With these steps, you can easily integrate and customize the **cool_alert** package in your Flutter application.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Cool Alert in Flutter

```dart
import 'package:flutter/material.dart';
import 'package:cool_alert/cool_alert.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Cool Alert Example',
      home: HomeScreen(),
    );
  }
}

class HomeScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Cool Alert Example'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Show a success alert when the button is pressed
            CoolAlert.show(
              context: context,
              type: CoolAlertType.success,
              title: "Success!",
              text: "Your action was successful.",
              confirmBtnText: "OK",
              onConfirmBtnTap: () {
                // Close the alert when the button is tapped
                Navigator.of(context).pop();
              },
            );
          },
          child: Text('Show Success Alert'),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function starts the app by calling runApp with the RealFlutter widget.
// 2. RealFlutter builds a MaterialApp with a title and a home screen.
// 3. HomeScreen contains a Scaffold with an AppBar and a Center widget.
// 4. Inside the Center widget, an ElevatedButton is created.
// 5. When the button is pressed, a success alert is displayed using CoolAlert.show().
// 6. The alert shows a success message and a confirmation button.
// 7. Tapping the confirmation button closes the alert by popping the Navigator stack.
```
<!-- END_MAIN -->
``` 

This structured blog provides a comprehensive overview of the **cool_alert** Flutter package, guiding users through its features, setup, and practical usage with a complete example.
<-- START_DESCRIPTION -->

# Pretty Diff Text Flutter Package
=====================================

The `pretty_diff_text` Flutter package is a useful tool for comparing two strings and highlighting their differences. It is particularly useful when you need to display the differences between two versions of a text, such as in a version control system or a collaborative editing app.

### Features

*   Compares two strings and highlights their differences
*   Supports different comparison modes (e.g., word, character)
*   Customizable highlighting styles
*   Easy to integrate into your Flutter app

### When to Use

*   Version control systems: Use `pretty_diff_text` to display the differences between two versions of a file or code snippet.
*   Collaborative editing apps: Use `pretty_diff_text` to highlight the changes made by different users.
*   Text comparison tools: Use `pretty_diff_text` to build a text comparison tool that highlights the differences between two strings.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Using Pretty Diff Text in Your Flutter App
=====================================================

### Step 1: Add the Package to Your Pubspec.yaml File

```yml
dependencies:
  flutter:
    sdk: flutter
  pretty_diff_text: ^1.0.0
```

### Step 2: Import the Package in Your Dart File

```dart
import 'package:pretty_diff_text/pretty_diff_text.dart';
```

### Step 3: Compare Two Strings and Highlight Their Differences

```dart
String oldText = 'This is the original text.';
String newText = 'This is the updated text.';

PrettyDiffText diffText = PrettyDiffText(
  oldText: oldText,
  newText: newText,
  comparisonMode: ComparisonMode.word,
);

TextSpan diffTextSpan = diffText.highlightDiffText();
```

### Step 4: Display the Highlighted Differences in Your Flutter App

```dart
@override
Widget build(BuildContext context) {
  return Scaffold(
    appBar: AppBar(
      title: Text('Pretty Diff Text Example'),
    ),
    body: Center(
      child: RichText(
        text: diffTextSpan,
      ),
    ),
  );
}
```

### Platform-Specific Details

*   Android: No additional configuration is required.
*   iOS: No additional configuration is required.

### Optimizations

*   Use the `comparisonMode` property to optimize the comparison process for your specific use case.
*   Use the `highlightStyle` property to customize the highlighting style for your app.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:pretty_diff_text/pretty_diff_text.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Pretty Diff Text Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  String _oldText = 'This is the original text.';
  String _newText = 'This is the updated text.';
  ComparisonMode _comparisonMode = ComparisonMode.word;

  @override
  Widget build(BuildContext context) {
    // Step 1: Create a PrettyDiffText object with the old and new text.
    PrettyDiffText diffText = PrettyDiffText(
      oldText: _oldText,
      newText: _newText,
      comparisonMode: _comparisonMode,
    );

    // Step 2: Highlight the differences between the old and new text.
    TextSpan diffTextSpan = diffText.highlightDiffText();

    // Step 3: Display the highlighted differences in a RichText widget.
    return Scaffold(
      appBar: AppBar(
        title: Text('Pretty Diff Text Example'),
      ),
      body: Center(
        child: RichText(
          text: diffTextSpan,
        ),
      ),
      // Step 4: Add a button to toggle the comparison mode.
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          setState(() {
            if (_comparisonMode == ComparisonMode.word) {
              _comparisonMode = ComparisonMode.character;
            } else {
              _comparisonMode = ComparisonMode.word;
            }
          });
        },
        tooltip: 'Toggle comparison mode',
        child: Icon(Icons.compare_arrows),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app and sees the original text and the updated text.
// 2. The PrettyDiffText object is created with the old and new text.
// 3. The differences between the old and new text are highlighted using the highlightDiffText method.
// 4. The highlighted differences are displayed in a RichText widget.
// 5. The user can toggle the comparison mode by pressing the floating action button.
// 6. When the comparison mode is toggled, the PrettyDiffText object is recreated with the new comparison mode.
// 7. The differences are rehighlighted using the new comparison mode.
// 8. The rehighlighted differences are displayed in the RichText widget.

```

<-- END_MAIN -->
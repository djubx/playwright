```markdown
<!-- START_DESCRIPTION -->
# Thingsboard Pe Client Flutter Package

The `thingsboard_pe_client` Flutter package is a powerful tool designed for developers working with ThingsBoard, an open-source IoT platform. This package allows Flutter applications to interact seamlessly with ThingsBoard's REST API, enabling the management of devices, telemetry data, and more. 

## When to Use This Package
You should consider using the `thingsboard_pe_client` package when:
- You are developing an IoT application that requires real-time data management.
- You need to connect and manage devices on the ThingsBoard platform.
- You want to visualize telemetry data from IoT devices in your Flutter app.

## Key Features
- **Device Management**: Easily manage devices connected to ThingsBoard.
- **Telemetry Data Handling**: Send and receive telemetry data in real-time.
- **User Management**: Handle user authentication and authorization.
- **Dashboard Integration**: Integrate with ThingsBoard dashboards for data visualization.
- **Support for Multiple Platforms**: Works on both Android and iOS.

This package simplifies the integration of Flutter applications with the ThingsBoard platform, making it an essential tool for IoT developers.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Thingsboard Pe Client

## Installation
To add the `thingsboard_pe_client` package to your Flutter project, include it in your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  thingsboard_pe_client: ^latest_version
```

Replace `latest_version` with the most recent version available on [pub.dev](https://pub.dev/packages/thingsboard_pe_client).

## Platform-Specific Configuration

### Android
1. Open `android/app/build.gradle` and ensure you have the following configurations:
   ```groovy
   android {
       ...
       compileSdkVersion 31
       ...
   }
   ```

2. Ensure you have the necessary permissions in `AndroidManifest.xml`:
   ```xml
   <uses-permission android:name="android.permission.INTERNET"/>
   ```

### iOS
1. Open `ios/Runner/Info.plist` and add the following:
   ```xml
   <key>NSAppTransportSecurity</key>
   <dict>
       <key>NSAllowsArbitraryLoads</key>
       <true/>
   </dict>
   ```

## Basic Usage
To use the `thingsboard_pe_client`, you need to initialize the client and authenticate users. Hereâ€™s a simple example of how to do this:

```dart
import 'package:flutter/material.dart';
import 'package:thingsboard_pe_client/thingsboard_pe_client.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Thingsboard PE Client Demo',
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final ThingsboardClient _client = ThingsboardClient('https://your-thingsboard-url.com');
  String _status = 'Not Connected';

  @override
  void initState() {
    super.initState();
    _connectToThingsboard();
  }

  void _connectToThingsboard() async {
    try {
      await _client.login('your_username', 'your_password');
      setState(() {
        _status = 'Connected';
      });
    } catch (e) {
      setState(() {
        _status = 'Connection Failed: $e';
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Thingsboard PE Client'),
      ),
      body: Center(
        child: Text(_status),
      ),
    );
  }
}
```
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
```dart
import 'package:flutter/material.dart';
import 'package:thingsboard_pe_client/thingsboard_pe_client.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Thingsboard PE Client Demo',
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Initialize the Thingsboard client with the ThingsBoard server URL
  final ThingsboardClient _client = ThingsboardClient('https://your-thingsboard-url.com');
  String _status = 'Not Connected'; // Initial status message

  @override
  void initState() {
    super.initState();
    _connectToThingsboard(); // Call the connection method when the widget is initialized
  }

  // Method to connect to ThingsBoard and authenticate the user
  void _connectToThingsboard() async {
    try {
      // Attempt to log in with provided credentials
      await _client.login('your_username', 'your_password');
      setState(() {
        _status = 'Connected'; // Update status on successful connection
      });
    } catch (e) {
      setState(() {
        _status = 'Connection Failed: $e'; // Update status on failure
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Thingsboard PE Client'), // App title
      ),
      body: Center(
        child: Text(_status), // Display the connection status
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function runs the MyApp widget.
// 2. MyApp builds a MaterialApp with RealFlutter as the home widget.
// 3. RealFlutter initializes the ThingsboardClient with the server URL.
// 4. In the initState method, it calls _connectToThingsboard to log in.
// 5. _connectToThingsboard attempts to log in with the provided username and password.
// 6. If successful, it updates the status to 'Connected'; otherwise, it shows an error message.
// 7. The current connection status is displayed in the center of the screen.
```
<!-- END_MAIN -->

# Summary
In this blog post, we explored the `thingsboard_pe_client` Flutter package, which facilitates the integration of Flutter applications with the ThingsBoard IoT platform. We covered the installation process, platform-specific configurations, and provided a complete example demonstrating how to connect to ThingsBoard and display the connection status. This package is ideal for developers looking to manage IoT devices and telemetry data efficiently within their Flutter applications.
<-- START_DESCRIPTION -->

# Connectivity Widget Flutter Package
=====================================

The `connectivity_widget` package provides a simple and efficient way to handle network connectivity in Flutter applications. It allows you to easily detect and respond to changes in network connectivity, ensuring a seamless user experience.

## When to Use
--------------

This package is ideal for applications that require a stable internet connection to function, such as:

* Online gaming
* Video streaming
* Real-time data synchronization
* Cloud-based services

## Features
------------

* Detects changes in network connectivity (Wi-Fi, mobile data, or none)
* Provides a simple and intuitive API for handling connectivity changes
* Supports both Android and iOS platforms

<-- END_DESCRIPTION -->


<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `connectivity_widget` package, follow these steps:

### Step 1: Add the Package to Your Project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  connectivity_widget: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:connectivity_widget/connectivity_widget.dart';
```
### Step 3: Initialize the Package

Initialize the package in your `main` function:
```dart
void main() {
  ConnectivityWidget.init();
  runApp(MyApp());
}
```
### Platform-Specific Configurations

#### Android

Add the following permission to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
```
#### iOS

No additional configurations are required for iOS.

<-- END_TUTORIAL -->


<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:connectivity_widget/connectivity_widget.dart';

void main() {
  ConnectivityWidget.init();
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Connectivity Widget Demo',
      home: ConnectivityWidget(
        builder: (context, connectivity) {
          // Check if the device is connected to the internet
          if (connectivity == Connectivity.connected) {
            // Device is connected, display online content
            return Scaffold(
              appBar: AppBar(
                title: Text('Online'),
              ),
              body: Center(
                child: Text('You are online!'),
              ),
            );
          } else {
            // Device is not connected, display offline content
            return Scaffold(
              appBar: AppBar(
                title: Text('Offline'),
              ),
              body: Center(
                child: Text('You are offline!'),
              ),
            );
          }
        },
      ),
    );
  }
}

// Application flow:
// 1. The `ConnectivityWidget` is initialized in the `main` function.
// 2. The `RealFlutter` widget is built, which contains the `ConnectivityWidget`.
// 3. The `ConnectivityWidget` checks the current network connectivity and passes it to the `builder` function.
// 4. The `builder` function checks if the device is connected to the internet and displays online or offline content accordingly.
// 5. When the network connectivity changes, the `ConnectivityWidget` updates the `builder` function with the new connectivity status.
```

// Summary: The `ConnectivityWidget` package provides a simple way to handle network connectivity in Flutter applications. This example demonstrates how to use the package to display online or offline content based on the device's network connectivity. The application flow involves initializing the `ConnectivityWidget`, building the `RealFlutter` widget, and checking the network connectivity to display online or offline content.

<-- END_MAIN -->
<-- START_DESCRIPTION -->

EdgeDB Flutter Package: A High-Level Overview
=============================================

The EdgeDB Flutter package is a powerful tool for integrating EdgeDB, a next-generation database, into your Flutter applications. This package provides a simple and efficient way to interact with EdgeDB, allowing you to focus on building your app's core features.

When to Use EdgeDB Flutter Package
-----------------------------------

*   When building a Flutter app that requires a robust and scalable database solution.
*   When you need to store and manage complex data structures and relationships.
*   When you want to take advantage of EdgeDB's advanced features, such as query optimization and caching.

Key Features of EdgeDB Flutter Package
-----------------------------------------

*   **Query Builder**: A simple and intuitive API for building and executing queries.
*   **Object-Relational Mapping (ORM)**: Automatically maps EdgeDB data to Dart objects.
*   **Connection Pooling**: Efficiently manages connections to the EdgeDB instance.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setting Up EdgeDB Flutter Package
---------------------------------

### Step 1: Add the Package to Your Flutter Project

Add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  edgedb: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:edgedb/edgedb.dart';
```

### Step 3: Connect to EdgeDB

Create a connection to your EdgeDB instance:

```dart
final client = EdgeDBClient(
  host: 'localhost',
  port: 5656,
  user: 'myuser',
  password: 'mypassword',
  database: 'mydatabase',
);
```

### Step 4: Define Your Data Model

Define your data model using EdgeDB's schema syntax:

```dart
class MyModel extends EdgeDBModel {
  @EdgeDBField('id')
  int id;

  @EdgeDBField('name')
  String name;
}
```

### Step 5: Perform Queries

Use the query builder to perform queries:

```dart
final query = client.query('SELECT MyModel FILTER .name = "John"');
final results = await query.execute();
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:edgedb/edgedb.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'EdgeDB Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final client = EdgeDBClient(
    host: 'localhost',
    port: 5656,
    user: 'myuser',
    password: 'mypassword',
    database: 'mydatabase',
  );

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('EdgeDB Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text('EdgeDB Demo'),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () async {
                // Perform a query
                final query = client.query('SELECT MyModel FILTER .name = "John"');
                final results = await query.execute();

                // Display the results
                print(results);
              },
              child: Text('Perform Query'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and is presented with a button to perform a query.
// 2. When the button is pressed, the app performs a query on the EdgeDB instance.
// 3. The results of the query are displayed in the console.
// 4. The user can repeat the process by pressing the button again.

// In summary, this code sets up an EdgeDB client, defines a data model, and performs a query on the EdgeDB instance.
// The results of the query are then displayed in the console.
```

<-- END_MAIN -->
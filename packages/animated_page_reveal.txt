<-- START_DESCRIPTION -->

# Animated Page Reveal Flutter Package
=====================================

The `animated_page_reveal` Flutter package provides a simple and elegant way to reveal pages with animations. It is ideal for onboarding processes, tutorials, or any situation where you want to present information in a visually appealing way.

### Features

*   Customizable animation duration and curve
*   Support for multiple animation types (e.g., fade, slide, scale)
*   Easy integration with existing Flutter projects

### When to Use

*   Onboarding processes: Use the `animated_page_reveal` package to create engaging and interactive onboarding experiences for your users.
*   Tutorials: Break down complex information into easily digestible chunks, and present them in a visually appealing way using the package.
*   Presentations: Add a touch of elegance to your presentations by using the package to reveal key information.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Animated Page Reveal Package
=============================================================

### Step 1: Add the Package to Your Project

Add the `animated_page_reveal` package to your `pubspec.yaml` file:

```yml
dependencies:
  animated_page_reveal: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:animated_page_reveal/animated_page_reveal.dart';
```

### Step 3: Use the Package

Create an instance of the `AnimatedPageReveal` class, and pass in the pages you want to reveal:

```dart
class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return AnimatedPageReveal(
      pages: [
        Container(
          color: Colors.red,
          child: Center(
            child: Text('Page 1'),
          ),
        ),
        Container(
          color: Colors.blue,
          child: Center(
            child: Text('Page 2'),
          ),
        ),
        Container(
          color: Colors.green,
          child: Center(
            child: Text('Page 3'),
          ),
        ),
      ],
    );
  }
}
```

### Platform-Specific Details

The `animated_page_reveal` package works seamlessly on both Android and iOS platforms. However, you may need to adjust the animation duration and curve to achieve the desired effect on each platform.

### Configurations and Optimizations

You can customize the animation duration and curve by passing in the `duration` and `curve` properties to the `AnimatedPageReveal` constructor:

```dart
AnimatedPageReveal(
  pages: [...],
  duration: Duration(milliseconds: 500),
  curve: Curves.easeInOut,
)
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:animated_page_reveal/animated_page_reveal.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Animated Page Reveal Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Create a list of pages to reveal
    List<Widget> pages = [
      // Page 1: Red background with centered text
      Container(
        color: Colors.red,
        child: Center(
          child: Text('Page 1'),
        ),
      ),
      // Page 2: Blue background with centered text
      Container(
        color: Colors.blue,
        child: Center(
          child: Text('Page 2'),
        ),
      ),
      // Page 3: Green background with centered text
      Container(
        color: Colors.green,
        child: Center(
          child: Text('Page 3'),
        ),
      ),
    ];

    // Create an instance of the AnimatedPageReveal class
    return AnimatedPageReveal(
      // Pass in the pages to reveal
      pages: pages,
      // Customize the animation duration and curve
      duration: Duration(milliseconds: 500),
      curve: Curves.easeInOut,
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app, and the MaterialApp is built.
// 2. The RealFlutter widget is created, and the list of pages is defined.
// 3. The AnimatedPageReveal class is instantiated, and the pages are passed in.
// 4. The AnimatedPageReveal class animates the pages, revealing each one in sequence.
// 5. The user can navigate through the pages by swiping or tapping on the screen.
// 6. The AnimatedPageReveal class handles the animation and navigation logic, providing a seamless and engaging user experience.

// In summary, the AnimatedPageReveal class provides a simple and elegant way to reveal pages with animations, making it ideal for onboarding processes, tutorials, and presentations.
```

<-- END_MAIN -->
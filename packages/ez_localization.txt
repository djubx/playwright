<-- START_DESCRIPTION -->

# ez_localization Flutter Package
=====================================

The ez_localization package is a powerful tool for managing translations and localizations in Flutter applications. It provides a simple and efficient way to handle multiple languages and cultures, making it an essential package for any Flutter project that requires internationalization.

### When to Use ez_localization

* When developing an app that needs to support multiple languages.
* When you want to separate translation data from your app's code.
* When you need to easily switch between languages or update translations.

### Features

* Supports multiple languages and cultures.
* Easy to use and integrate with your Flutter app.
* Separates translation data from your app's code.
* Allows for easy switching between languages or updating translations.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up ez_localization
==========================

To use ez_localization in your Flutter project, follow these steps:

### Step 1: Add the Package to Your pubspec.yaml File

```yml
dependencies:
  ez_localization: ^1.0.0
```

### Step 2: Import the Package in Your Dart File

```dart
import 'package:ez_localization/ez_localization.dart';
```

### Step 3: Initialize ez_localization

```dart
void main() {
  runApp(
    EzLocalization(
      child: RealFlutter(),
      supportedLocales: [
        Locale('en', 'US'),
        Locale('fr', 'CA'),
      ],
    ),
  );
}
```

### Step 4: Create a JSON File for Your Translations

Create a new file called `translations.json` in the `assets` directory of your project:

```json
{
  "en_US": {
    "hello": "Hello!"
  },
  "fr_CA": {
    "hello": "Bonjour!"
  }
}
```

### Step 5: Load the Translations

```dart
class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(EzLocalization.of(context).get('hello')),
      ),
    );
  }
}
```

### Platform-Specific Details

* For Android, make sure to add the `android:configChanges` attribute to your `AndroidManifest.xml` file:

```xml
<application
  ...
  android:configChanges="locale|orientation|screenSize|keyboard|keyboardHidden|screenLayout|uiMode"
  ...
>
```

* For iOS, make sure to add the `CFBundleLocalizations` key to your `Info.plist` file:

```xml
<key>CFBundleLocalizations</key>
<array>
  <string>en</string>
  <string>fr</string>
</array>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:ez_localization/ez_localization.dart';

void main() {
  runApp(
    EzLocalization(
      child: RealFlutter(),
      supportedLocales: [
        Locale('en', 'US'),
        Locale('fr', 'CA'),
      ],
    ),
  );
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Get the current locale
    Locale locale = EzLocalization.of(context).locale;

    // Load the translations for the current locale
    Map<String, String> translations = EzLocalization.of(context).translations;

    // Use the translations to display the app's content
    return Scaffold(
      appBar: AppBar(
        title: Text(translations['hello']),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(translations['hello']),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                // Switch to the other locale
                if (locale == Locale('en', 'US')) {
                  EzLocalization.of(context).setLocale(Locale('fr', 'CA'));
                } else {
                  EzLocalization.of(context).setLocale(Locale('en', 'US'));
                }
              },
              child: Text(translations['switch_locale']),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user launches the app.
// 2. The app loads the translations for the current locale.
// 3. The app displays the content using the loaded translations.
// 4. The user clicks the button to switch to the other locale.
// 5. The app updates the locale and reloads the translations.
// 6. The app updates the content using the new translations.

// This code demonstrates the use of the ez_localization package to manage translations and localizations in a Flutter app.
// It shows how to load translations, switch between locales, and update the app's content accordingly.
```

<-- END_MAIN -->
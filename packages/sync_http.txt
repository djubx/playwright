<-- START_DESCRIPTION -->

# Sync HTTP Flutter Package
The `sync_http` package is a Flutter library that allows you to make synchronous HTTP requests. This package is useful when you need to make HTTP requests in a synchronous manner, such as when you're working with legacy code or when you need to make requests in a specific order.

## Features
The `sync_http` package has the following features:

*   Supports GET, POST, PUT, DELETE, HEAD, and PATCH requests
*   Supports query parameters and headers
*   Supports JSON and form data
*   Supports SSL/TLS encryption

## When to Use
You should use the `sync_http` package when:

*   You need to make synchronous HTTP requests
*   You're working with legacy code that requires synchronous requests
*   You need to make requests in a specific order

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
To use the `sync_http` package, follow these steps:

1.  Add the package to your `pubspec.yaml` file:

    ```yml
dependencies:
  sync_http: ^0.3.0
```

2.  Run `flutter pub get` to install the package.
3.  Import the package in your Dart file:

    ```dart
import 'package:sync_http/sync_http.dart';
```

## Platform-Specific Details
The `sync_http` package works on both Android and iOS platforms. However, you need to add the following configuration to your `AndroidManifest.xml` file:

```xml
<uses-permission android:name="android.permission.INTERNET" />
```

## Required Configurations
You don't need any specific configurations to use the `sync_http` package. However, you should handle any exceptions that may occur during the request.

## Optimizations
To optimize the performance of the `sync_http` package, you can use the `timeout` property to set a timeout for the request.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:sync_http/sync_http.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Sync HTTP Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  String _response = '';

  // Step 1: Create a new SyncHttpClient instance
  final SyncHttpClient _client = SyncHttpClient();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Sync HTTP Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(_response),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _makeRequest,
              child: Text('Make Request'),
            ),
          ],
        ),
      ),
    );
  }

  // Step 2: Make a GET request to the specified URL
  void _makeRequest() {
    try {
      final response = _client.get('https://jsonplaceholder.typicode.com/todos/1');
      // Step 3: Update the UI with the response
      setState(() {
        _response = response.body;
      });
    } catch (e) {
      // Step 4: Handle any exceptions that may occur
      setState(() {
        _response = 'Error: $e';
      });
    }
  }
}

// The application flow is as follows:
// 1. The user clicks the "Make Request" button, which calls the _makeRequest function.
// 2. The _makeRequest function makes a GET request to the specified URL using the SyncHttpClient instance.
// 3. The response from the server is stored in the _response variable.
// 4. The UI is updated with the response using the setState function.
// 5. If an exception occurs during the request, the error message is displayed in the UI.

```

<-- END_MAIN -->
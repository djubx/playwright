<-- START_DESCRIPTION -->

**Time Span Flutter Package: A Comprehensive Overview**
===========================================================

The `time_span` Flutter package is a powerful tool for working with time intervals in your Flutter applications. It provides a simple and intuitive way to calculate and manipulate time spans, making it an essential package for any app that deals with time-based data.

**When to Use This Package**
-----------------------------

You should use the `time_span` package in the following scenarios:

* When you need to calculate the difference between two dates or times.
* When you need to add or subtract a specific time interval from a date or time.
* When you need to format time intervals in a human-readable format.

**Key Features**
----------------

* Calculate time intervals between two dates or times.
* Add or subtract time intervals from a date or time.
* Format time intervals in a human-readable format.
* Supports various time units, including seconds, minutes, hours, days, weeks, months, and years.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setting Up the Time Span Package**
--------------------------------------

To use the `time_span` package in your Flutter app, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  time_span: ^1.0.0
```
2. Run `flutter pub get` to install the package.
3. Import the package in your Dart file:
```dart
import 'package:time_span/time_span.dart';
```
**Using the Time Span Package**
-------------------------------

### Calculating Time Intervals

To calculate the time interval between two dates or times, use the `TimeSpan` class:
```dart
TimeSpan timeSpan = TimeSpan.between(DateTime.now(), DateTime.now().add(Duration(days: 3)));
print(timeSpan); // Output: 3 days
```
### Adding or Subtracting Time Intervals

To add or subtract a time interval from a date or time, use the `add` or `subtract` method:
```dart
DateTime dateTime = DateTime.now();
TimeSpan timeSpan = TimeSpan(days: 3);
dateTime = dateTime.add(timeSpan);
print(dateTime); // Output: 3 days from now
```
### Formatting Time Intervals

To format a time interval in a human-readable format, use the `format` method:
```dart
TimeSpan timeSpan = TimeSpan(days: 3, hours: 2, minutes: 30);
print(timeSpan.format()); // Output: 3 days, 2 hours, 30 minutes
```
**Platform-Specific Details**
-----------------------------

The `time_span` package works on both Android and iOS platforms. However, the formatting of time intervals may vary slightly depending on the platform.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:time_span/time_span.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  DateTime _dateTime = DateTime.now();
  TimeSpan _timeSpan = TimeSpan(days: 3);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Time Span Demo',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Time Span Demo'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Text(
                'Current Date and Time:',
                style: TextStyle(fontSize: 20),
              ),
              Text(
                _dateTime.toString(),
                style: TextStyle(fontSize: 20),
              ),
              SizedBox(height: 20),
              Text(
                'Time Span:',
                style: TextStyle(fontSize: 20),
              ),
              Text(
                _timeSpan.format(),
                style: TextStyle(fontSize: 20),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  setState(() {
                    _dateTime = _dateTime.add(_timeSpan);
                  });
                },
                child: Text('Add Time Span'),
              ),
              SizedBox(height: 10),
              ElevatedButton(
                onPressed: () {
                  setState(() {
                    _dateTime = _dateTime.subtract(_timeSpan);
                  });
                },
                child: Text('Subtract Time Span'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app and sees the current date and time displayed on the screen.
// 2. The user also sees a time span displayed on the screen, which is initially set to 3 days.
// 3. The user can click on the "Add Time Span" button to add the time span to the current date and time.
// 4. The user can click on the "Subtract Time Span" button to subtract the time span from the current date and time.
// 5. The app updates the display to show the new date and time after the user clicks on either button.
// 6. The user can repeat steps 3-5 as many times as they want to see the effect of adding or subtracting the time span.

```

<-- END_MAIN -->
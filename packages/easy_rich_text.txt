<-- START_DESCRIPTION -->

# Easy Rich Text Flutter Package
=====================================

The `easy_rich_text` Flutter package provides a simple and efficient way to display rich text in your Flutter applications. It allows you to render text with various styles, such as bold, italic, and strikethrough, and also supports rendering images and links.

### When to Use

You can use this package when you need to display complex text content in your app, such as:

* Displaying formatted text from a database or API
* Rendering HTML content in your app
* Creating a text editor with formatting options

### Features

* Supports rendering text with various styles (bold, italic, strikethrough, etc.)
* Supports rendering images and links
* Easy to use and customize
* Works on both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the Package
=====================================

To use the `easy_rich_text` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  easy_rich_text: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:easy_rich_text/easy_rich_text.dart';
```
### Step 3: Use the Package

Create a `RealFlutter` widget and use the `EasyRichText` widget to display rich text:
```dart
class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Center(
        child: EasyRichText(
          text: 'This is a **bold** and _italic_ text.',
        ),
      ),
    );
  }
}
```
### Platform-Specific Details

* On Android, the package uses the `android.text.SpannableStringBuilder` class to render rich text.
* On iOS, the package uses the `NSAttributedString` class to render rich text.

### Configurations and Optimizations

* You can customize the appearance of the rich text by using the `style` property of the `EasyRichText` widget.
* You can also use the `maxLines` property to limit the number of lines of text displayed.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:easy_rich_text/easy_rich_text.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Easy Rich Text Demo',
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Create a rich text widget with a bold and italic text
    return Scaffold(
      body: Center(
        child: EasyRichText(
          text: 'This is a **bold** and _italic_ text.',
          // Customize the appearance of the rich text
          style: TextStyle(fontSize: 24),
          // Limit the number of lines of text displayed
          maxLines: 2,
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app and the `MyApp` widget is displayed.
// 2. The `MyApp` widget builds the `RealFlutter` widget.
// 3. The `RealFlutter` widget creates a rich text widget with a bold and italic text.
// 4. The rich text widget is displayed in the center of the screen.
// 5. The user can customize the appearance of the rich text by using the `style` property.
// 6. The user can also limit the number of lines of text displayed by using the `maxLines` property.

// In summary, the code flows as follows:
// MyApp -> RealFlutter -> EasyRichText -> Display rich text
```

<-- END_MAIN -->
```markdown
<!-- START_DESCRIPTION -->
# Native Font Flutter Package

The `native_font` package is a powerful Flutter library that allows developers to use custom native fonts in their applications. This package is particularly useful when you want to enhance the typography of your app beyond the standard font offerings provided by Flutter. By leveraging native fonts, you can achieve a more unique and visually appealing design that aligns with your brand identity.

## When to Use This Package
- **Custom Branding**: When your application requires specific fonts that are part of your brand guidelines.
- **Enhanced Typography**: To improve the overall aesthetics of your app by using high-quality, unique fonts.
- **Cross-Platform Consistency**: To ensure that the same font is rendered on both Android and iOS devices.

## Features
- **Support for Custom Fonts**: Easily integrate and use custom fonts in your Flutter application.
- **Cross-Platform Compatibility**: Works seamlessly on both Android and iOS platforms.
- **Simple API**: Provides a straightforward API for loading and using fonts.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Native Font Package

## Installation
To get started with the `native_font` package, you need to add it to your `pubspec.yaml` file. Open your `pubspec.yaml` and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  native_font: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command to install it:

```bash
flutter pub get
```

## Platform-Specific Configuration

### Android
1. **Add Fonts**: Place your custom font files (e.g., `MyCustomFont.ttf`) in the `android/app/src/main/assets/fonts/` directory.
2. **Update `build.gradle`**: Ensure that your `build.gradle` file is configured to include the assets:

```groovy
android {
    ...
    sourceSets {
        main {
            assets.srcDirs += 'src/main/assets'
        }
    }
}
```

### iOS
1. **Add Fonts**: Place your custom font files in the `ios/Runner` directory.
2. **Update `Info.plist`**: Add the font files to your `Info.plist`:

```xml
<key>UIAppFonts</key>
<array>
    <string>MyCustomFont.ttf</string>
</array>
```

## Using the Package
Once you have set up the package and added your fonts, you can use them in your Flutter application. Hereâ€™s how to do it:

```dart
import 'package:flutter/material.dart';
import 'package:native_font/native_font.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Native Font Example',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Native Font Example'),
        ),
        body: Center(
          child: Text(
            'Hello, Native Font!',
            style: TextStyle(
              fontFamily: 'MyCustomFont', // Use your custom font here
              fontSize: 24,
            ),
          ),
        ),
      ),
    );
  }
}

void main() {
  runApp(RealFlutter());
}
```

In this example, we import the `native_font` package and use a custom font named `MyCustomFont` in a simple Flutter application.

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of Using Native Font

```dart
import 'package:flutter/material.dart';
import 'package:native_font/native_font.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Native Font Example',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Native Font Example'), // Title of the app
        ),
        body: Center(
          child: Text(
            'Hello, Native Font!', // Text displayed in the center
            style: TextStyle(
              fontFamily: 'MyCustomFont', // Specify the custom font
              fontSize: 24, // Set the font size
            ),
          ),
        ),
      ),
    );
  }
}

void main() {
  runApp(RealFlutter()); // Run the app
}

// Application Flow Explanation:
// 1. The app starts with the main() function, which calls runApp().
// 2. The RealFlutter class is instantiated, which builds the MaterialApp.
// 3. The MaterialApp contains a Scaffold widget that provides the basic structure.
// 4. An AppBar is created with a title.
// 5. The body of the Scaffold contains a Center widget that centers its child.
// 6. The child is a Text widget that displays "Hello, Native Font!" using the custom font.
// 7. The font is specified in the TextStyle, ensuring that the custom font is applied.
// 8. The app is displayed on the screen with the custom font rendered correctly.
```
<!-- END_MAIN -->
``` 

This structured approach provides a comprehensive overview of the `native_font` package, guiding developers through its features, setup, and practical usage in a Flutter application.
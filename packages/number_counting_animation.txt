```markdown
<!-- START_DESCRIPTION -->
# Number Counting Animation Flutter Package

The `number_counting_animation` package is a Flutter library designed to create visually appealing number counting animations. This package is particularly useful for applications that require dynamic number displays, such as dashboards, statistics, or any scenario where you want to draw attention to numerical data. 

## When to Use This Package
- **Dashboards**: Displaying real-time statistics or metrics.
- **Games**: Showing scores or achievements.
- **Finance Apps**: Highlighting financial figures or changes.
- **Marketing**: Presenting user engagement metrics or sales figures.

## Features
- **Customizable Animation Duration**: Control how fast the numbers count up or down.
- **Flexible Styling**: Easily style the text to match your app's theme.
- **Support for Decimal Numbers**: Count with precision, including decimal points.
- **Ease of Use**: Simple API that integrates seamlessly into your Flutter application.

Overall, the `number_counting_animation` package is a great choice for developers looking to enhance their user interfaces with engaging number animations.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Number Counting Animation Package

## Installation
To use the `number_counting_animation` package, you need to add it to your `pubspec.yaml` file. Open your `pubspec.yaml` and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  number_counting_animation: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command in your terminal to install the package:

```bash
flutter pub get
```

## Platform-Specific Details
### Android
No additional configuration is required for Android. Just ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file.

### iOS
For iOS, ensure that you have the correct permissions set in your `Info.plist` if your app requires any specific capabilities. However, the `number_counting_animation` package does not require any special permissions.

## Basic Usage
To use the package, you can import it into your Dart file:

```dart
import 'package:number_counting_animation/number_counting_animation.dart';
```

You can then use the `NumberCountingAnimation` widget in your widget tree. Hereâ€™s a simple example:

```dart
NumberCountingAnimation(
  count: 100,
  duration: Duration(seconds: 2),
  style: TextStyle(fontSize: 40, fontWeight: FontWeight.bold),
)
```

This will create a counting animation that counts up to 100 over 2 seconds with a specified text style.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Number Counting Animation

```dart
import 'package:flutter/material.dart';
import 'package:number_counting_animation/number_counting_animation.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Number Counting Animation Demo',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Number Counting Animation'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              // Displaying a counting animation for a score
              NumberCountingAnimation(
                count: 150,
                duration: Duration(seconds: 3),
                style: TextStyle(fontSize: 50, color: Colors.blue),
              ),
              SizedBox(height: 20), // Adding space between animations
              // Displaying another counting animation for a different metric
              NumberCountingAnimation(
                count: 75.5, // Counting with a decimal
                duration: Duration(seconds: 2),
                style: TextStyle(fontSize: 50, color: Colors.green),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application starts with the main function, which runs the RealFlutter widget.
// The RealFlutter widget builds a MaterialApp with a title and a home Scaffold.
// Inside the Scaffold, an AppBar is created with the title "Number Counting Animation".
// The body of the Scaffold contains a Center widget that centers its child widgets.
// A Column widget is used to stack the counting animations vertically.
// The first NumberCountingAnimation counts up to 150 over 3 seconds with a blue color.
// A SizedBox is used to add space between the two animations.
// The second NumberCountingAnimation counts up to 75.5 over 2 seconds with a green color.
// Both animations are styled with a font size of 50 for visibility.
```
<!-- END_MAIN -->
```

### Summary of Application Flow
The application begins by running the `main` function, which initializes the `RealFlutter` widget. The `RealFlutter` widget sets up a `MaterialApp` with a title and a `Scaffold` that contains an `AppBar` and a `Center` widget. Inside the `Center`, a `Column` widget is used to stack two `NumberCountingAnimation` widgets vertically. The first animation counts to 150 over 3 seconds, while the second counts to 75.5 over 2 seconds, each styled for visibility. This structure allows for a clean and engaging display of animated numbers.
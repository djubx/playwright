<-- START_DESCRIPTION -->

# Flutter Audio Capture Package
================================

The `flutter_audio_capture` package is a Flutter plugin that allows you to capture and record audio from the device's microphone. This package is useful when you need to integrate audio recording functionality into your Flutter app.

## When to Use This Package
---------------------------

You can use this package in various scenarios, such as:

* Voice notes or voice messaging apps
* Audio recording apps for music, lectures, or meetings
* Voice command or voice assistant apps
* Audio feedback or review apps

## Features
------------

The `flutter_audio_capture` package provides the following features:

* Record audio from the device's microphone
* Pause and resume recording
* Stop recording and save the audio file
* Get the recorded audio file path
* Set the audio recording format (WAV, MP3, etc.)
* Set the audio recording quality (low, medium, high)

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `flutter_audio_capture` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_audio_capture: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:flutter_audio_capture/flutter_audio_capture.dart';
```
### Step 3: Initialize the Package

Initialize the package in your app's `main` function:
```dart
void main() {
  runApp(MyApp());
  FlutterAudioCapture.initialize();
}
```
### Platform-Specific Details

#### Android

Add the following permissions to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.RECORD_AUDIO" />
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
```
#### iOS

Add the following lines to your `Info.plist` file:
```xml
<key>NSMicrophoneUsageDescription</key>
<string>This app needs access to the microphone to record audio.</string>
```
### Optimizations

To optimize the audio recording quality, you can set the `audioQuality` property to `high`:
```dart
FlutterAudioCapture.audioQuality = AudioQuality.high;
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_audio_capture/flutter_audio_capture.dart';

void main() {
  runApp(MyApp());
  FlutterAudioCapture.initialize();
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Audio Capture Demo',
      home: AudioCapturePage(),
    );
  }
}

class AudioCapturePage extends StatefulWidget {
  @override
  _AudioCapturePageState createState() => _AudioCapturePageState();
}

class _AudioCapturePageState extends State<AudioCapturePage> {
  bool _isRecording = false;
  String _recordedFilePath = '';

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Audio Capture Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: _startRecording,
              child: Text('Start Recording'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _stopRecording,
              child: Text('Stop Recording'),
            ),
            SizedBox(height: 20),
            Text(_recordedFilePath),
          ],
        ),
      ),
    );
  }

  void _startRecording() async {
    // Start recording audio
    await FlutterAudioCapture.startRecording();
    setState(() {
      _isRecording = true;
    });
  }

  void _stopRecording() async {
    // Stop recording audio and get the recorded file path
    String recordedFilePath = await FlutterAudioCapture.stopRecording();
    setState(() {
      _isRecording = false;
      _recordedFilePath = recordedFilePath;
    });
  }
}

// The app starts by initializing the FlutterAudioCapture package.
// When the user presses the "Start Recording" button, the app starts recording audio.
// When the user presses the "Stop Recording" button, the app stops recording audio and displays the recorded file path.
// The recorded file path is stored in the _recordedFilePath variable and displayed on the screen.
```

<-- END_MAIN -->
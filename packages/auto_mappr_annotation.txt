```markdown
<!-- START_DESCRIPTION -->
# Overview of the `auto_mappr_annotation` Flutter Package

The `auto_mappr_annotation` package is a powerful tool designed to simplify the process of mapping data between different object types in Flutter applications. It leverages Dart's code generation capabilities to automate the creation of mapping code, reducing boilerplate and potential errors.

## When to Use This Package

You should consider using `auto_mappr_annotation` when:
- You have multiple data models that need to be converted to and from different formats (e.g., API responses to local models).
- You want to reduce the amount of manual mapping code, which can be error-prone and tedious.
- You are working on a large-scale application where maintaining mapping logic can become cumbersome.

## Key Features
- **Automatic Code Generation**: Automatically generates mapping code based on annotations, saving time and effort.
- **Type Safety**: Ensures that mappings are type-safe, reducing runtime errors.
- **Customizable**: Allows for custom mapping logic when needed, providing flexibility.
- **Integration with Other Packages**: Works well with other popular packages in the Flutter ecosystem, such as `json_serializable`.

By using `auto_mappr_annotation`, developers can focus more on the business logic of their applications rather than the tedious task of data mapping.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using `auto_mappr_annotation`

## Step 1: Adding Dependencies

To get started, you need to add the `auto_mappr_annotation` package to your `pubspec.yaml` file. You will also need the `build_runner` and `auto_mappr` packages for code generation.

```yaml
dependencies:
  flutter:
    sdk: flutter
  auto_mappr: ^<latest_version>
  
dev_dependencies:
  build_runner: ^<latest_version>
  auto_mappr_annotation: ^<latest_version>
```

Make sure to replace `<latest_version>` with the most recent version available.

## Step 2: Creating Your Data Models

Create your data models that you want to map. For example, let's create a simple `User` model.

```dart
class User {
  final String name;
  final int age;

  User({required this.name, required this.age});
}
```

## Step 3: Annotating Your Models

Next, you will annotate your models to indicate how they should be mapped. Use the `@AutoMappr()` annotation to specify the mapping.

```dart
import 'package:auto_mappr_annotation/auto_mappr_annotation.dart';

part 'user.mappr.g.dart';

@AutoMappr()
abstract class UserMappr {
  User toUser(UserDto dto);
  UserDto toDto(User user);
}
```

## Step 4: Running the Code Generator

After setting up your models and annotations, run the following command in your terminal to generate the mapping code:

```bash
flutter pub run build_runner build
```

This command will generate a file named `user.mappr.g.dart` containing the mapping logic.

## Step 5: Using the Generated Code

You can now use the generated mapping code in your application. Hereâ€™s how you can convert between `User` and `UserDto`.

```dart
class UserDto {
  final String name;
  final int age;

  UserDto({required this.name, required this.age});
}

// Example usage
void main() {
  final userDto = UserDto(name: "John Doe", age: 30);
  final user = UserMappr().toUser(userDto);
  print('User: ${user.name}, Age: ${user.age}');
}
```

## Platform-Specific Details

### Android
Ensure that your `android/app/build.gradle` file has the following configurations:

```gradle
android {
    ...
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}
```

### iOS
For iOS, ensure that your `ios/Podfile` is set to use at least platform `10.0`:

```ruby
platform :ios, '10.0'
```

This ensures compatibility with the latest features of Flutter and Dart.

With these steps, you should be able to set up and use the `auto_mappr_annotation` package effectively in your Flutter applications.

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of Using `auto_mappr_annotation`

```dart
import 'package:flutter/material.dart';
import 'package:auto_mappr_annotation/auto_mappr_annotation.dart';

// Define the User model
class User {
  final String name;
  final int age;

  User({required this.name, required this.age});
}

// Define the UserDto model
class UserDto {
  final String name;
  final int age;

  UserDto({required this.name, required this.age});
}

// Create the mapping class
part 'user.mappr.g.dart';

@AutoMappr()
abstract class UserMappr {
  User toUser(UserDto dto); // Mapping from UserDto to User
  UserDto toDto(User user);   // Mapping from User to UserDto
}

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Auto Mappr Example',
      home: UserScreen(),
    );
  }
}

class UserScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Create a UserDto instance
    final userDto = UserDto(name: "John Doe", age: 30);
    
    // Map UserDto to User using the generated mapper
    final user = UserMappr().toUser(userDto);
    
    return Scaffold(
      appBar: AppBar(
        title: Text('User Mapping Example'),
      ),
      body: Center(
        child: Text('User: ${user.name}, Age: ${user.age}'), // Display user information
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The application starts with the main() function, which runs the MyApp widget.
// 2. MyApp builds a MaterialApp with a title and a home screen (UserScreen).
// 3. In UserScreen, a UserDto instance is created with sample data.
// 4. The UserDto instance is then mapped to a User instance using the UserMappr.
// 5. Finally, the user information is displayed in the center of the screen.
```
<!-- END_MAIN -->
``` 

This structured blog provides a comprehensive overview of the `auto_mappr_annotation` package, guiding users through its setup, usage, and a complete example to illustrate its functionality.
<-- START_DESCRIPTION -->

Page View Indicators Flutter Package
=====================================

The `page_view_indicators` package is a Flutter library that provides a simple and customizable way to add page indicators to your app. Page indicators are a common design pattern used to show the user which page they are currently on in a multi-page layout.

When to Use This Package
------------------------

You can use this package in any Flutter app that requires a page indicator. Some common use cases include:

* Onboarding screens
* Tutorials
* Image galleries
* Multi-step forms

Features
--------

* Customizable indicator styles
* Support for multiple page views
* Easy to use and integrate

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
---------------

To use the `page_view_indicators` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  page_view_indicators: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:page_view_indicators/page_view_indicators.dart';
```
### Step 3: Create a Page View

Create a `PageView` widget and pass it to the `PageViewIndicators` widget:
```dart
PageView(
  children: [
    // Your pages here
  ],
)
```
### Step 4: Add the Page View Indicators

Wrap the `PageView` widget with the `PageViewIndicators` widget:
```dart
PageViewIndicators(
  pageView: PageView(
    children: [
      // Your pages here
    ],
  ),
  currentPage: 0, // Optional
  totalPages: 5, // Optional
)
```
You can customize the indicator style by passing a `PageIndicatorStyle` object to the `style` property.

Platform-Specific Details
-------------------------

### Android

No additional configuration is required for Android.

### iOS

No additional configuration is required for iOS.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:page_view_indicators/page_view_indicators.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final _pageController = PageController();
  int _currentPage = 0;

  @override
  void initState() {
    super.initState();
  }

  @override
  void dispose() {
    _pageController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        body: SafeArea(
          child: Column(
            children: [
              Expanded(
                child: PageView(
                  controller: _pageController,
                  onPageChanged: (index) {
                    setState(() {
                      _currentPage = index;
                    });
                  },
                  children: [
                    Container(
                      color: Colors.red,
                      child: Center(
                        child: Text('Page 1'),
                      ),
                    ),
                    Container(
                      color: Colors.blue,
                      child: Center(
                        child: Text('Page 2'),
                      ),
                    ),
                    Container(
                      color: Colors.green,
                      child: Center(
                        child: Text('Page 3'),
                      ),
                    ),
                  ],
                ),
              ),
              PageViewIndicators(
                pageView: _pageController,
                currentPage: _currentPage,
                totalPages: 3,
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app and the `RealFlutter` widget is created.
// 2. The `RealFlutter` widget creates a `PageController` to manage the page view.
// 3. The `RealFlutter` widget creates a `PageView` widget with three pages.
// 4. The `PageView` widget is wrapped with a `PageViewIndicators` widget.
// 5. The `PageViewIndicators` widget displays the current page indicator.
// 6. When the user navigates to a new page, the `onPageChanged` callback is called.
// 7. The `onPageChanged` callback updates the `_currentPage` variable.
// 8. The `PageViewIndicators` widget is rebuilt with the new `_currentPage` value.
```

// The final summary is that the code creates a page view with three pages and displays a page indicator at the bottom. The page indicator is updated when the user navigates to a new page.

<-- END_MAIN -->
<-- START_DESCRIPTION -->

**Simple Secure Storage Flutter Package**
=====================================

The `simple_secure_storage` Flutter package provides a simple and secure way to store sensitive data, such as encryption keys, authentication tokens, and other confidential information. This package uses the platform's KeyStore (Android) or Keychain (iOS) to store data securely.

**When to Use This Package**
---------------------------

Use this package when you need to store sensitive data that should not be accessible to unauthorized parties. Examples include:

* Storing encryption keys for secure data transmission
* Saving authentication tokens for secure authentication
* Protecting user credentials, such as passwords or PINs

**Features**
------------

* Secure data storage using platform-specific KeyStore (Android) or Keychain (iOS)
* Simple and easy-to-use API for storing and retrieving data
* Supports storage of strings, integers, and booleans

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setup and Usage**
-------------------

### Step 1: Add the Package to Your Project

Add the `simple_secure_storage` package to your `pubspec.yaml` file:
```yml
dependencies:
  simple_secure_storage: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:simple_secure_storage/simple_secure_storage.dart';
```
### Step 3: Initialize the Storage

Initialize the storage using the `SimpleSecureStorage` class:
```dart
SimpleSecureStorage _storage = SimpleSecureStorage();
```
### Step 4: Store Data

Store data using the `write` method:
```dart
_storage.write('key', 'value');
```
### Step 5: Retrieve Data

Retrieve data using the `read` method:
```dart
String value = _storage.read('key');
```
### Platform-Specific Details

* **Android:** The package uses the Android KeyStore to store data securely. Make sure to add the following configuration to your `AndroidManifest.xml` file:
```xml
<application
    ...
    android:allowBackup="false"
    android:fullBackupContent="false"
    ...>
</application>
```
* **iOS:** The package uses the Keychain to store data securely. Make sure to add the following configuration to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:simple_secure_storage/simple_secure_storage.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Simple Secure Storage Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  SimpleSecureStorage _storage = SimpleSecureStorage();
  String _storedValue = '';

  // Step 1: Initialize the storage
  void _initStorage() async {
    await _storage.init();
  }

  // Step 2: Store data
  void _storeData() async {
    await _storage.write('key', 'Hello, World!');
  }

  // Step 3: Retrieve data
  void _retrieveData() async {
    String value = await _storage.read('key');
    setState(() {
      _storedValue = value;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Simple Secure Storage Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(_storedValue),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _initStorage,
              child: Text('Initialize Storage'),
            ),
            SizedBox(height: 10),
            ElevatedButton(
              onPressed: _storeData,
              child: Text('Store Data'),
            ),
            SizedBox(height: 10),
            ElevatedButton(
              onPressed: _retrieveData,
              child: Text('Retrieve Data'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user initializes the storage by clicking the "Initialize Storage" button.
// 2. The user stores data by clicking the "Store Data" button.
// 3. The user retrieves the stored data by clicking the "Retrieve Data" button.
// 4. The retrieved data is displayed on the screen.

// The SimpleSecureStorage class provides a simple and secure way to store sensitive data.
// The data is stored securely using the platform's KeyStore (Android) or Keychain (iOS).
// The class provides methods for initializing the storage, storing data, and retrieving data.
```

<-- END_MAIN -->
Here's a detailed technical blog on the "tiengviet" Flutter package, structured as requested.

<!-- START_DESCRIPTION -->
# Tiengviet Flutter Package

The **tiengviet** package is a powerful tool for Flutter developers looking to handle Vietnamese text input and processing efficiently. This package provides functionalities for converting between different Vietnamese character encodings, making it easier to work with Vietnamese text in applications. 

## When to Use This Package

You should consider using the **tiengviet** package in scenarios such as:
- Developing applications that require Vietnamese language support.
- Implementing text input fields that need to handle Vietnamese characters seamlessly.
- Creating applications that need to convert between different Vietnamese text formats.

## Features

- **Character Encoding Conversion**: Easily convert between different Vietnamese character encodings.
- **Text Normalization**: Normalize Vietnamese text to ensure consistency in text processing.
- **Easy Integration**: Simple to integrate into existing Flutter applications with minimal setup.

Overall, the **tiengviet** package is an essential tool for any Flutter developer working with Vietnamese text, providing robust features that simplify text handling and processing.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Tiengviet Package

## Step 1: Adding the Dependency

To get started with the **tiengviet** package, you need to add it to your `pubspec.yaml` file. Open the file and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  tiengviet: ^1.0.0  # Check for the latest version on pub.dev
```

## Step 2: Installing the Package

After adding the dependency, run the following command in your terminal to install the package:

```bash
flutter pub get
```

## Step 3: Platform-Specific Configuration

### Android

For Android, ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
        ...
    }
}
```

### iOS

For iOS, you may need to enable certain permissions in your `Info.plist` file if your application requires specific functionalities related to text input. However, for basic usage of the **tiengviet** package, no additional configurations are necessary.

## Step 4: Using the Package

Now that you have set up the package, you can start using it in your Flutter application. Below is an example of how to use the **tiengviet** package to convert Vietnamese text.

```dart
import 'package:flutter/material.dart';
import 'package:tiengviet/tiengviet.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Tiengviet Example')),
        body: TextInputExample(),
      ),
    );
  }
}

class TextInputExample extends StatefulWidget {
  @override
  _TextInputExampleState createState() => _TextInputExampleState();
}

class _TextInputExampleState extends State<TextInputExample> {
  String _inputText = '';
  String _convertedText = '';

  void _convertText() {
    // Convert the input text to normalized Vietnamese text
    setState(() {
      _convertedText = Tiengviet.convert(_inputText);
    });
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        TextField(
          onChanged: (text) {
            _inputText = text; // Update input text
          },
          decoration: InputDecoration(labelText: 'Enter Vietnamese Text'),
        ),
        ElevatedButton(
          onPressed: _convertText,
          child: Text('Convert Text'),
        ),
        Text('Converted Text: $_convertedText'),
      ],
    );
  }
}
```

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Tiengviet Package Usage

```dart
import 'package:flutter/material.dart';
import 'package:tiengviet/tiengviet.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Tiengviet Example')),
        body: TextInputExample(),
      );
    }
  }
}

class TextInputExample extends StatefulWidget {
  @override
  _TextInputExampleState createState() => _TextInputExampleState();
}

class _TextInputExampleState extends State<TextInputExample> {
  String _inputText = ''; // Variable to hold user input
  String _convertedText = ''; // Variable to hold converted text

  void _convertText() {
    // Convert the input text to normalized Vietnamese text
    setState(() {
      _convertedText = Tiengviet.convert(_inputText); // Use Tiengviet package to convert text
    });
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        TextField(
          onChanged: (text) {
            _inputText = text; // Update input text as user types
          },
          decoration: InputDecoration(labelText: 'Enter Vietnamese Text'), // Input field label
        ),
        ElevatedButton(
          onPressed: _convertText, // Call convert function on button press
          child: Text('Convert Text'), // Button label
        ),
        Text('Converted Text: $_convertedText'), // Display converted text
      ],
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the MyApp widget.
// 2. MyApp builds a MaterialApp with a Scaffold containing an AppBar and the TextInputExample widget.
// 3. TextInputExample is a stateful widget that maintains the input and converted text.
// 4. The user types Vietnamese text into the TextField, which updates the _inputText variable.
// 5. When the user presses the "Convert Text" button, the _convertText method is called.
// 6. _convertText uses the Tiengviet package to convert the input text and updates the _convertedText variable.
// 7. The converted text is displayed below the button, allowing the user to see the result of the conversion.
```
<!-- END_MAIN -->

This blog provides a comprehensive overview of the **tiengviet** Flutter package, including its features, setup instructions, and a complete example demonstrating its usage. By following the steps outlined, developers can easily integrate Vietnamese text processing into their Flutter applications.
```dart
import 'package:flutter/material.dart';
import 'package:google_geocoding_plus/google_geocoding_plus.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Google Geocoding Plus Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final _formKey = GlobalKey<FormState>();
  final _addressController = TextEditingController();
  final _latController = TextEditingController();
  final _lngController = TextEditingController();
  String _result = '';

  Future<void> _performForwardGeocoding() async {
    // Step 1: Get the address from the text field
    String address = _addressController.text;

    // Step 2: Create an instance of the GoogleGeocodingPlus class
    GoogleGeocodingPlus _googleGeocodingPlus = GoogleGeocodingPlus(apiKey: 'YOUR_API_KEY');

    // Step 3: Perform forward geocoding
    GeocodingResponse response = await _googleGeocodingPlus.forwardGeocoding(address: address);

    // Step 4: Check the status of the response
    if (response.status == 'OK') {
      // Step 5: Get the latitude and longitude from the response
      double lat = response.results[0].geometry.location.lat;
      double lng = response.results[0].geometry.location.lng;

      // Step 6: Display the result
      setState(() {
        _result = 'Latitude: $lat, Longitude: $lng';
      });
    } else {
      // Step 7: Display the error message
      setState(() {
        _result = 'Error: ${response.status}';
      });
    }
  }

  Future<void> _performReverseGeocoding() async {
    // Step 1: Get the latitude and longitude from the text fields
    double lat = double.parse(_latController.text);
    double lng = double.parse(_lngController.text);

    // Step 2: Create an instance of the GoogleGeocodingPlus class
    GoogleGeocodingPlus _googleGeocodingPlus = GoogleGeocodingPlus(apiKey: 'YOUR_API_KEY');

    // Step 3: Perform reverse geocoding
    GeocodingResponse response = await _googleGeocodingPlus.reverseGeocoding(lat: lat, lng: lng);

    // Step 4: Check the status of the response
    if (response.status == 'OK') {
      // Step 5: Get the address from the response
      String address = response.results[0].formattedAddress;

      // Step 6: Display the result
      setState(() {
        _result = 'Address: $address';
      });
    } else {
      // Step 7: Display the error message
      setState(() {
        _result = 'Error: ${response.status}';
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Google Geocoding Plus Demo'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              TextFormField(
                controller: _addressController,
                decoration: InputDecoration(
                  labelText: 'Address',
                  border: OutlineInputBorder(),
                ),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _performForwardGeocoding,
                child: Text('Forward Geocoding'),
              ),
              SizedBox(height: 20),
              TextFormField(
                controller: _latController,
                decoration: InputDecoration(
                  labelText: 'Latitude',
                  border: OutlineInputBorder(),
                ),
              ),
              SizedBox(height: 20),
              TextFormField(
                controller: _lngController,
                decoration: InputDecoration(
                  labelText: 'Longitude',
                  border: OutlineInputBorder(),
                ),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _performReverseGeocoding,
                child: Text('Reverse Geocoding'),
              ),
              SizedBox(height: 20),
              Text(_result),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user enters an address in the text field.
// 2. The user clicks the "Forward Geocoding" button.
// 3. The _performForwardGeocoding function is called.
// 4. The function creates an instance of the GoogleGeocodingPlus class.
// 5. The function performs forward geocoding using the address entered by the user.
// 6. The function checks the status of the response.
// 7. If the status is "OK", the function gets the latitude and longitude from the response.
// 8. The function displays the result.
// 9. If the status is not "OK", the function displays an error message.
// 10. The user can also enter a latitude and longitude in the text fields.
// 11. The user clicks the "Reverse Geocoding" button.
// 12. The _performReverseGeocoding function is called.
// 13. The function creates an instance of the GoogleGeocodingPlus class.
// 14. The function performs reverse geocoding using the latitude and longitude entered by the user.
// 15. The function checks the status of the response.
// 16. If the status is "OK", the function gets the address from the response.
// 17. The function displays the result.
// 18. If the status is not "OK", the function displays an error message.

<-- END_MAIN -->```
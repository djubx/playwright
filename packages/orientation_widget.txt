```markdown
<!-- START_DESCRIPTION -->
# Orientation Widget Flutter Package

The `orientation_widget` Flutter package is a powerful tool designed to help developers manage and respond to device orientation changes in their applications. This package simplifies the process of detecting orientation changes and allows developers to create responsive layouts that adapt seamlessly to both portrait and landscape modes.

## When to Use This Package

You should consider using the `orientation_widget` package in scenarios such as:

- **Responsive UI Design**: When building applications that require different layouts for portrait and landscape orientations.
- **Game Development**: For games that need to switch between orientations based on gameplay requirements.
- **Media Applications**: When displaying videos or images that benefit from a specific orientation.

## Features

- **Orientation Detection**: Automatically detects changes in device orientation.
- **Custom Widgets**: Allows developers to create custom widgets that respond to orientation changes.
- **Easy Integration**: Simple setup process with minimal configuration required.

Overall, the `orientation_widget` package enhances user experience by ensuring that applications look and function optimally, regardless of how the device is held.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Orientation Widget Package

## Step 1: Adding the Dependency

To get started, you need to add the `orientation_widget` package to your `pubspec.yaml` file. Open your `pubspec.yaml` and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  orientation_widget: ^1.0.0  # Check for the latest version on pub.dev
```

## Step 2: Installing the Package

After adding the dependency, run the following command in your terminal to install the package:

```bash
flutter pub get
```

## Step 3: Platform-Specific Configuration

### Android

For Android, ensure that your `AndroidManifest.xml` file allows for orientation changes. You can set the orientation in the activity tag:

```xml
<activity
    android:name=".MainActivity"
    android:label="Orientation Widget Example"
    android:configChanges="orientation|screenSize">
```

### iOS

For iOS, you may need to configure the supported interface orientations in your `Info.plist` file. Add the following entries:

```xml
<key>UISupportedInterfaceOrientations</key>
<array>
    <string>UIInterfaceOrientationPortrait</string>
    <string>UIInterfaceOrientationLandscapeLeft</string>
    <string>UIInterfaceOrientationLandscapeRight</string>
</array>
```

## Step 4: Using the Package

Now that you have set up the package, you can start using it in your Flutter application. The `OrientationWidget` class allows you to create responsive layouts based on the current orientation.

```dart
import 'package:flutter/material.dart';
import 'package:orientation_widget/orientation_widget.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return OrientationWidget(
      builder: (context, orientation) {
        return Scaffold(
          appBar: AppBar(
            title: Text('Orientation Widget Example'),
          ),
          body: orientation == Orientation.portrait
              ? _buildPortraitLayout()
              : _buildLandscapeLayout(),
        );
      },
    );
  }

  Widget _buildPortraitLayout() {
    return Center(
      child: Text('Portrait Layout', style: TextStyle(fontSize: 24)),
    );
  }

  Widget _buildLandscapeLayout() {
    return Center(
      child: Text('Landscape Layout', style: TextStyle(fontSize: 24)),
    );
  }
}
```

This code snippet demonstrates how to use the `OrientationWidget` to build different layouts based on the device's orientation.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example: Orientation Widget in Action

```dart
import 'package:flutter/material.dart';
import 'package:orientation_widget/orientation_widget.dart';

void main() {
  runApp(MyApp());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Using OrientationWidget to detect orientation changes
    return OrientationWidget(
      builder: (context, orientation) {
        return Scaffold(
          appBar: AppBar(
            title: Text('Orientation Widget Example'),
          ),
          body: orientation == Orientation.portrait
              ? _buildPortraitLayout() // Call method for portrait layout
              : _buildLandscapeLayout(); // Call method for landscape layout
      },
    );
  }

  // Method to build the portrait layout
  Widget _buildPortraitLayout() {
    return Center(
      child: Text('Portrait Layout', style: TextStyle(fontSize: 24)),
    );
  }

  // Method to build the landscape layout
  Widget _buildLandscapeLayout() {
    return Center(
      child: Text('Landscape Layout', style: TextStyle(fontSize: 24)),
    );
  }
}

// The main function initializes the app
class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Orientation Widget Demo',
      home: RealFlutter(), // Set the home to the RealFlutter widget
    );
  }
}

// Application Flow Explanation:
// 1. The main function runs the MyApp widget.
// 2. MyApp builds a MaterialApp with a title and sets the home to RealFlutter.
// 3. RealFlutter uses OrientationWidget to listen for orientation changes.
// 4. Depending on the orientation, it calls either _buildPortraitLayout or _buildLandscapeLayout.
// 5. Each layout method returns a centered Text widget indicating the current orientation.
```
<!-- END_MAIN -->
``` 

This structured blog provides a comprehensive overview of the `orientation_widget` Flutter package, guiding readers through its features, setup, and practical implementation.
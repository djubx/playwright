<-- START_DESCRIPTION -->

# Flutter Emoji Gif Picker Package
=====================================

The `flutter_emoji_gif_picker` package is a powerful and customizable Flutter package that allows users to pick emojis and GIFs from a vast library. It's perfect for social media, messaging, and other applications where users want to express themselves using fun and engaging visuals.

### Features

*   Supports both emoji and GIF selection
*   Highly customizable UI to fit your app's theme
*   Easy to integrate and use
*   Works on both Android and iOS platforms

### When to Use

Use this package when you want to provide your users with a fun and interactive way to express themselves using emojis and GIFs. It's perfect for social media, messaging, and other applications where user engagement is key.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Package
=============================================

### Step 1: Add the Package to Your Pubspec.yaml File

Add the following line to your `pubspec.yaml` file:

```yml
dependencies:
  flutter_emoji_gif_picker: ^1.0.0
```

Then, run `flutter pub get` to get the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:flutter_emoji_gif_picker/flutter_emoji_gif_picker.dart';
```

### Step 3: Use the Package

Use the `EmojiGifPicker` widget to display the emoji and GIF picker:

```dart
EmojiGifPicker(
  onEmojiSelected: (emoji) {
    print('Emoji selected: $emoji');
  },
  onGifSelected: (gif) {
    print('GIF selected: $gif');
  },
)
```

### Platform-Specific Details

*   Android: Make sure to add the following line to your `AndroidManifest.xml` file:

    ```xml
<application
  ...
  android:hardwareAccelerated="true"
  ...
>
```

*   iOS: Make sure to add the following line to your `Info.plist` file:

    ```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```

### Optimizations

*   You can customize the UI of the emoji and GIF picker by using the various properties provided by the `EmojiGifPicker` widget.
*   You can also use the `EmojiGifPickerController` to programmatically control the emoji and GIF picker.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_emoji_gif_picker/flutter_emoji_gif_picker.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Emoji Gif Picker Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  // Step 1: Create a controller to programmatically control the emoji and GIF picker
  final EmojiGifPickerController _controller = EmojiGifPickerController();

  // Step 2: Create a variable to store the selected emoji or GIF
  String _selectedEmojiOrGif = '';

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Emoji Gif Picker Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            // Step 3: Display the selected emoji or GIF
            Text(
              _selectedEmojiOrGif,
              style: TextStyle(fontSize: 24),
            ),
            SizedBox(height: 20),
            // Step 4: Display the emoji and GIF picker
            EmojiGifPicker(
              controller: _controller,
              onEmojiSelected: (emoji) {
                // Step 5: Update the selected emoji or GIF when an emoji is selected
                setState(() {
                  _selectedEmojiOrGif = emoji;
                });
              },
              onGifSelected: (gif) {
                // Step 6: Update the selected emoji or GIF when a GIF is selected
                setState(() {
                  _selectedEmojiOrGif = gif;
                });
              },
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and is presented with an empty screen.
// 2. The user clicks on the emoji and GIF picker to select an emoji or GIF.
// 3. When an emoji is selected, the `onEmojiSelected` callback is called with the selected emoji.
// 4. The selected emoji is then displayed on the screen.
// 5. When a GIF is selected, the `onGifSelected` callback is called with the selected GIF.
// 6. The selected GIF is then displayed on the screen.
// 7. The user can repeat the process of selecting an emoji or GIF to change the displayed emoji or GIF.

```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Segment Display Flutter Package
=====================================

The `segment_display` Flutter package provides a customizable, easy-to-use widget for displaying numerical values in a segmented display format. This package is ideal for applications that require a retro-style display, such as digital clocks, calculators, or old-school video games.

## Features

* Customizable segment colors and styles
* Support for multiple segment types (e.g., 7-segment, 14-segment, 16-segment)
* Optional decimal point and thousands separator
* Easy-to-use API for updating the displayed value

## When to Use

Use the `segment_display` package when you need to display numerical values in a unique, eye-catching way. This package is particularly well-suited for applications that require a retro or vintage aesthetic.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Segment Display Package
==========================================

To use the `segment_display` package in your Flutter application, follow these steps:

### Step 1: Add the Package to Your `pubspec.yaml` File

```yml
dependencies:
  flutter:
    sdk: flutter
  segment_display: ^1.0.0
```

### Step 2: Import the Package in Your Dart File

```dart
import 'package:flutter/material.dart';
import 'package:segment_display/segment_display.dart';
```

### Step 3: Create a Segment Display Widget

```dart
SegmentDisplay(
  value: 123.45,
  segmentStyle: SegmentStyle(
    color: Colors.red,
    backgroundColor: Colors.black,
  ),
)
```

### Platform-Specific Details

* Android: No additional configuration is required.
* iOS: You may need to add the following line to your `Info.plist` file to ensure proper rendering:
```xml
<key>UIAppFonts</key>
<array>
  <string>SegmentDisplay</string>
</array>
```

### Optimizations

* To improve performance, consider using a `RepaintBoundary` widget to limit the area that needs to be redrawn when the segment display value changes.
* If you need to display a large number of segment displays, consider using a `ListView` or `GridView` to reduce the number of widgets in the tree.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:segment_display/segment_display.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  double _value = 123.45;

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Segment Display Demo',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Segment Display Demo'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              SegmentDisplay(
                value: _value,
                segmentStyle: SegmentStyle(
                  color: Colors.red,
                  backgroundColor: Colors.black,
                ),
              ),
              SizedBox(height: 20),
              Slider(
                value: _value,
                min: 0,
                max: 1000,
                divisions: 100,
                label: _value.toStringAsFixed(2),
                onChanged: (value) {
                  setState(() {
                    _value = value;
                  });
                },
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app and sees the segment display with an initial value of 123.45.
// 2. The user interacts with the slider to change the value of the segment display.
// 3. As the user moves the slider, the segment display updates in real-time to reflect the new value.
// 4. The user can continue to interact with the slider to change the value of the segment display.
// 5. The app remains in this state until the user closes it.

// The code flow is as follows:
// 1. The `RealFlutter` widget is created and returned by the `main` function.
// 2. The `RealFlutter` widget builds its child widgets, including the `SegmentDisplay` and `Slider`.
// 3. The `SegmentDisplay` widget displays the initial value of 123.45.
// 4. The `Slider` widget is used to update the value of the `SegmentDisplay` widget.
// 5. When the user interacts with the `Slider`, the `onChanged` callback is called, which updates the state of the `RealFlutter` widget.
// 6. The `RealFlutter` widget rebuilds its child widgets, including the `SegmentDisplay`, with the new value.
```

<-- END_MAIN -->
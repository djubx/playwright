# Flutter FCM Wrapper: A Comprehensive Guide

## <-- START_DESCRIPTION -->

### Overview of flutter_fcm_wrapper

The `flutter_fcm_wrapper` package is a powerful tool for integrating Firebase Cloud Messaging (FCM) into Flutter applications. It simplifies the process of handling push notifications, allowing developers to focus on building their applications without getting bogged down by the complexities of FCM.

### When to Use

You should consider using `flutter_fcm_wrapper` when:
- You need to implement push notifications in your Flutter app.
- You want a straightforward API to manage notifications without diving deep into native code.
- You are looking for a package that supports both Android and iOS platforms seamlessly.

### Key Features

- **Cross-Platform Support**: Works on both Android and iOS, providing a unified API.
- **Easy Setup**: Simplifies the configuration process for FCM.
- **Notification Handling**: Provides methods to handle incoming notifications and display them.
- **Customizable**: Allows customization of notification appearance and behavior.
- **Background Notifications**: Supports handling notifications when the app is in the background.

## <-- END_DESCRIPTION -->

## <-- START_TUTORIAL -->

### Setup Process

To get started with `flutter_fcm_wrapper`, follow these steps:

#### Step 1: Add Dependency

Add the package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  flutter_fcm_wrapper: ^latest_version
```

Make sure to replace `^latest_version` with the latest version available on [pub.dev](https://pub.dev/packages/flutter_fcm_wrapper).

#### Step 2: Configure Firebase

1. **Android Configuration**:
   - Add the `google-services.json` file to your `android/app` directory.
   - Update your `android/build.gradle` file:

   ```groovy
   buildscript {
       dependencies {
           classpath 'com.google.gms:google-services:4.3.10' // Check for the latest version
       }
   }
   ```

   - Update your `android/app/build.gradle` file:

   ```groovy
   apply plugin: 'com.google.gms.google-services'
   ```

2. **iOS Configuration**:
   - Add the `GoogleService-Info.plist` file to your `ios/Runner` directory.
   - Ensure you have the following in your `ios/Podfile`:

   ```ruby
   platform :ios, '10.0'
   use_frameworks!
   ```

#### Step 3: Initialize the Package

In your main Dart file, initialize the `flutter_fcm_wrapper` package:

```dart
import 'package:flutter/material.dart';
import 'package:flutter_fcm_wrapper/flutter_fcm_wrapper.dart';

void main() {
  runApp(MyApp());
  RealFlutter.initializeFCM(); // Initialize FCM
}
```

### Platform-Specific Details

- **Android**: Ensure that your app has the necessary permissions in the `AndroidManifest.xml`:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
<uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED"/>
```

- **iOS**: Request permission to show notifications:

```dart
RealFlutter.requestNotificationPermissions();
```

## <-- END_TUTORIAL -->

## <-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_fcm_wrapper/flutter_fcm_wrapper.dart';

void main() {
  runApp(MyApp());
  RealFlutter.initializeFCM(); // Initialize FCM
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'FCM Wrapper Example',
      home: HomeScreen(),
    );
  }
}

class HomeScreen extends StatefulWidget {
  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  String _message = "No messages yet";

  @override
  void initState() {
    super.initState();
    // Listen for incoming messages
    RealFlutter.onMessageReceived.listen((message) {
      setState(() {
        _message = message; // Update the message state
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('FCM Wrapper Example'),
      ),
      body: Center(
        child: Text(_message), // Display the received message
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          // Simulate sending a notification
          RealFlutter.sendNotification("Hello from FCM!"); // Send a test notification
        },
        child: Icon(Icons.send),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts and initializes FCM using RealFlutter.initializeFCM().
// 2. The HomeScreen widget is displayed, showing "No messages yet" initially.
// 3. The app listens for incoming messages using RealFlutter.onMessageReceived.
// 4. When a message is received, the state is updated, and the message is displayed on the screen.
// 5. The floating action button simulates sending a notification when pressed, demonstrating the sendNotification method.
```

## <-- END_MAIN -->

### Final Summary

In this example, we demonstrated how to set up and use the `flutter_fcm_wrapper` package in a Flutter application. The application initializes FCM, listens for incoming messages, and displays them on the screen. The floating action button simulates sending a notification, showcasing the package's capabilities. This structure allows developers to easily integrate push notifications into their Flutter apps while maintaining a clean and manageable codebase.
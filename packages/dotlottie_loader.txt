```markdown
<-- START_DESCRIPTION -->

# dotlottie_loader Flutter Package

The `dotlottie_loader` Flutter package is a powerful tool for developers looking to integrate `.lottie` animations into their Flutter applications. `.lottie` files are a JSON-based animation file format that allows for high-quality, scalable animations with small file sizes. This package simplifies the process of loading and displaying these animations in Flutter apps.

## When to Use

- **High-Quality Animations**: When you need to include complex animations without significantly increasing the app size.
- **Cross-Platform Consistency**: To ensure animations look the same on both Android and iOS platforms.
- **Performance Optimization**: To leverage the efficient rendering capabilities of `.lottie` files.

## Features

- **Easy Integration**: Simple API to load and display `.lottie` animations.
- **Customization**: Supports various animation controls like play, pause, and stop.
- **Platform Support**: Works seamlessly on both Android and iOS.
- **Lightweight**: Minimal impact on app size and performance.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using dotlottie_loader

In this tutorial, we will walk through the setup process for the `dotlottie_loader` package and demonstrate how to use it in a Flutter application.

## Setup Process

### Step 1: Add Dependency

Add the `dotlottie_loader` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  dotlottie_loader: ^1.0.0
```

Run `flutter pub get` to install the package.

### Step 2: Platform-Specific Configuration

#### Android

Ensure your `android/app/build.gradle` file has the following configuration:

```gradle
android {
    compileSdkVersion 33
    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 33
    }
}
```

#### iOS

For iOS, ensure your `ios/Podfile` is using platform version 11.0 or higher:

```ruby
platform :ios, '11.0'
```

### Step 3: Import the Package

In your Dart file, import the package:

```dart
import 'package:dotlottie_loader/dotlottie_loader.dart';
```

## Using the Package

To display a `.lottie` animation, use the `RealFlutter` class provided by the package. Here's a basic example:

```dart
RealFlutter(
  path: 'assets/animation.lottie',
  repeat: true,
  reverse: false,
  animate: true,
)
```

### Key Properties

- **path**: The path to the `.lottie` file.
- **repeat**: Whether the animation should loop.
- **reverse**: Whether the animation should play in reverse.
- **animate**: Whether the animation should start automatically.

<-- END_TUTORIAL -->

<-- START_MAIN -->

# Complete Example: Flutter Main File

Below is a complete example demonstrating the use of the `dotlottie_loader` package in a Flutter application.

```dart
import 'package:flutter/material.dart';
import 'package:dotlottie_loader/dotlottie_loader.dart';

void main() {
  runApp(MyApp());
}

// Main application widget
class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'dotLottie Loader Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: AnimationScreen(), // Set the home screen to AnimationScreen
    );
  }
}

// Screen to display the animation
class AnimationScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('dotLottie Animation'),
      ),
      body: Center(
        // Use RealFlutter to load and display the animation
        child: RealFlutter(
          path: 'assets/animation.lottie', // Path to the .lottie file
          repeat: true, // Animation will loop
          reverse: false, // Animation will not play in reverse
          animate: true, // Animation starts automatically
        ),
      ),
    );
  }
}
```

// Application Flow Explanation
// 1. The `main` function initializes the app by calling `runApp` with `MyApp`.
// 2. `MyApp` is a stateless widget that sets up the MaterialApp with a title and theme.
// 3. The home property of MaterialApp is set to `AnimationScreen`, which is another stateless widget.
// 4. `AnimationScreen` builds a Scaffold with an AppBar and a Center widget.
// 5. Inside the Center widget, `RealFlutter` is used to load and display the `.lottie` animation.
// 6. The animation is configured to loop and start automatically, providing a seamless user experience.

<-- END_MAIN -->
```

This blog post provides a comprehensive guide to using the `dotlottie_loader` package in Flutter, from setup to implementation, ensuring developers can easily integrate high-quality animations into their applications.
<-- START_DESCRIPTION -->

# WebRTC Interface Flutter Package
=====================================

The `webrtc_interface` Flutter package provides a simple and efficient way to implement WebRTC (Web Real-Time Communication) functionality in your Flutter applications. WebRTC is a set of APIs and protocols for real-time communication over peer-to-peer connections, allowing for features like video conferencing, screen sharing, and file transfer.

### When to Use

Use the `webrtc_interface` package when you need to establish real-time communication between two or more devices in your Flutter application. This package is particularly useful for building applications that require:

* Video conferencing
* Screen sharing
* File transfer
* Real-time messaging

### Features

The `webrtc_interface` package provides the following features:

* Peer connection management
* Media stream management (audio and video)
* Data channel management
* Screen sharing
* File transfer

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `webrtc_interface` package, follow these steps:

### Step 1: Add the Package to Your `pubspec.yaml` File

```yml
dependencies:
  flutter:
    sdk: flutter
  webrtc_interface: ^1.0.0
```

### Step 2: Import the Package in Your Dart File

```dart
import 'package:webrtc_interface/webrtc_interface.dart';
```

### Step 3: Initialize the WebRTC Interface

```dart
WebRTCInterface _webRTCInterface = WebRTCInterface();
```

### Platform-Specific Details

#### Android

* Add the following permissions to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.CAMERA" />
<uses-permission android:name="android.permission.RECORD_AUDIO" />
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
```
* Set the `android:hardwareAccelerated` attribute to `true` in your `AndroidManifest.xml` file:
```xml
<application
    ...
    android:hardwareAccelerated="true">
```

#### iOS

* Add the following permissions to your `Info.plist` file:
```xml
<key>NSCameraUsageDescription</key>
<string>Can I use the camera please?</string>
<key>NSMicrophoneUsageDescription</key>
<string>Can I use the microphone please?</string>
```
* Set the `UIBackgroundModes` attribute to `audio` in your `Info.plist` file:
```xml
<key>UIBackgroundModes</key>
<array>
    <string>audio</string>
</array>
```

### Optimizations

* Use the ` WebRTCInterface.setLogLevel()` method to set the log level for debugging purposes.
* Use the `WebRTCInterface.setMediaConstraints()` method to set media constraints for peer connections.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:webrtc_interface/webrtc_interface.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'WebRTC Interface Demo',
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  WebRTCInterface _webRTCInterface = WebRTCInterface();
  MediaStream _localStream;
  MediaStream _remoteStream;
  RTCPeerConnection _peerConnection;

  @override
  void initState() {
    super.initState();
    _initWebRTC();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('WebRTC Interface Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            // Display local video stream
            Container(
              width: 200,
              height: 200,
              child: _localStream != null
                  ? RTCVideoView(_localStream)
                  : Container(),
            ),
            // Display remote video stream
            Container(
              width: 200,
              height: 200,
              child: _remoteStream != null
                  ? RTCVideoView(_remoteStream)
                  : Container(),
            ),
            // Create peer connection button
            ElevatedButton(
              onPressed: _createPeerConnection,
              child: Text('Create Peer Connection'),
            ),
            // Add stream button
            ElevatedButton(
              onPressed: _addStream,
              child: Text('Add Stream'),
            ),
            // Create offer button
            ElevatedButton(
              onPressed: _createOffer,
              child: Text('Create Offer'),
            ),
            // Create answer button
            ElevatedButton(
              onPressed: _createAnswer,
              child: Text('Create Answer'),
            ),
          ],
        ),
      ),
    );
  }

  // Initialize WebRTC interface
  _initWebRTC() async {
    await _webRTCInterface.initialize();
  }

  // Create peer connection
  _createPeerConnection() async {
    _peerConnection = await _webRTCInterface.createPeerConnection();
  }

  // Add stream to peer connection
  _addStream() async {
    _localStream = await _webRTCInterface.getUserMedia();
    _peerConnection.addStream(_localStream);
  }

  // Create offer
  _createOffer() async {
    RTCSessionDescription description =
        await _peerConnection.createOffer();
    _peerConnection.setLocalDescription(description);
  }

  // Create answer
  _createAnswer() async {
    RTCSessionDescription description =
        await _peerConnection.createAnswer();
    _peerConnection.setLocalDescription(description);
  }
}

// Application flow:
// 1. Initialize WebRTC interface
// 2. Create peer connection
// 3. Add stream to peer connection
// 4. Create offer or answer
// 5. Set local description
// 6. Display local and remote video streams

// Summary:
// This code demonstrates the basic flow of creating a peer connection,
// adding a stream, creating an offer or answer, and displaying local and remote video streams.
// The application uses the WebRTC interface to initialize the peer connection,
// add a stream, and create an offer or answer.
// The local and remote video streams are displayed using the RTCVideoView widget.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# RTMP Broadcaster Flutter Package
=====================================

The `rtmp_broadcaster` Flutter package allows you to broadcast live video and audio from your Flutter app to any RTMP (Real-Time Messaging Protocol) server. This package is ideal for use cases such as live streaming, video conferencing, and online gaming.

### Features

* Supports both video and audio broadcasting
* Compatible with most RTMP servers, including YouTube Live, Facebook Live, and Twitch
* Allows for customizable video and audio settings, such as resolution, bitrate, and frame rate
* Provides a simple and intuitive API for easy integration into your Flutter app

### When to Use

Use the `rtmp_broadcaster` package when you need to broadcast live video and audio from your Flutter app to an RTMP server. This can be useful for a variety of applications, such as:

* Live streaming events or conferences
* Video conferencing and online meetings
* Online gaming and esports
* Social media live streaming

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
=====================

To use the `rtmp_broadcaster` package, follow these steps:

### Step 1: Add the Package to Your Pubspec

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  rtmp_broadcaster: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:rtmp_broadcaster/rtmp_broadcaster.dart';
```
### Step 3: Create an RTMP Broadcaster Instance

Create an instance of the `RTMPBroadcaster` class:
```dart
RTMPBroadcaster _broadcaster = RTMPBroadcaster();
```
### Step 4: Set Up the Video and Audio Settings

Set up the video and audio settings using the `setVideoSettings` and `setAudioSettings` methods:
```dart
_broadcaster.setVideoSettings(
  resolution: Resolution.hd,
  bitrate: 500000,
  frameRate: 30,
);

_broadcaster.setAudioSettings(
  bitrate: 128000,
  sampleRate: 44100,
);
```
### Step 5: Start the Broadcast

Start the broadcast using the `startBroadcast` method:
```dart
_broadcaster.startBroadcast(
  uri: 'rtmp://your-server.com/live',
  streamName: 'your-stream-name',
);
```
### Platform-Specific Details

* On Android, you need to add the following permissions to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.CAMERA" />
<uses-permission android:name="android.permission.RECORD_AUDIO" />
```
* On iOS, you need to add the following lines to your `Info.plist` file:
```xml
<key>NSCameraUsageDescription</key>
<string>This app needs camera access to broadcast video.</string>
<key>NSMicrophoneUsageDescription</key>
<string>This app needs microphone access to broadcast audio.</string>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:rtmp_broadcaster/rtmp_broadcaster.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'RTMP Broadcaster Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  RTMPBroadcaster _broadcaster = RTMPBroadcaster();

  @override
  void initState() {
    super.initState();
    _broadcaster.setVideoSettings(
      resolution: Resolution.hd,
      bitrate: 500000,
      frameRate: 30,
    );
    _broadcaster.setAudioSettings(
      bitrate: 128000,
      sampleRate: 44100,
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('RTMP Broadcaster Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: () {
                _broadcaster.startBroadcast(
                  uri: 'rtmp://your-server.com/live',
                  streamName: 'your-stream-name',
                );
              },
              child: Text('Start Broadcast'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                _broadcaster.stopBroadcast();
              },
              child: Text('Stop Broadcast'),
            ),
          ],
        ),
      ),
    );
  }
}

// The app starts by creating an instance of the RTMPBroadcaster class.
// The video and audio settings are set up in the initState method.
// The startBroadcast method is called when the user presses the Start Broadcast button.
// The stopBroadcast method is called when the user presses the Stop Broadcast button.
// The app uses the ElevatedButton widget to create the buttons.
// The SizedBox widget is used to add some space between the buttons.
// The Column widget is used to center the buttons vertically.
// The Center widget is used to center the buttons horizontally.
```

<-- END_MAIN -->
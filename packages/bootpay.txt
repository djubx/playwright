```markdown
<!-- START_DESCRIPTION -->
# Bootpay Flutter Package: A Comprehensive Overview

The **Bootpay** Flutter package is a powerful tool designed to facilitate seamless payment integration in Flutter applications. It provides developers with a straightforward way to implement various payment methods, including credit cards, mobile payments, and more, making it an excellent choice for e-commerce applications or any app requiring payment processing.

## When to Use Bootpay
- **E-commerce Applications**: If you're building an online store, Bootpay can help you manage transactions efficiently.
- **Subscription Services**: For apps that require recurring payments, Bootpay offers features to handle subscriptions.
- **Event Ticketing**: If your app sells tickets for events, Bootpay can streamline the payment process.

## Key Features
- **Multiple Payment Methods**: Supports various payment options, including credit cards, mobile payments, and bank transfers.
- **Easy Integration**: Simple setup process with clear documentation.
- **Secure Transactions**: Ensures that all transactions are secure and compliant with industry standards.
- **Customizable UI**: Allows developers to customize the payment interface to match their app's design.

With these features, Bootpay stands out as a reliable choice for developers looking to implement payment solutions in their Flutter applications.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Bootpay Flutter Package: Setup and Usage Tutorial

In this section, we will walk through the setup process for the Bootpay Flutter package and explain how to use it effectively in your Flutter application.

## Installation

To get started, add the Bootpay package to your `pubspec.yaml` file:

```yaml
dependencies:
  bootpay: ^latest_version
```

Make sure to replace `latest_version` with the most recent version available on [pub.dev](https://pub.dev/packages/bootpay).

## Platform-Specific Configuration

### Android
1. Open your `AndroidManifest.xml` file located at `android/app/src/main/AndroidManifest.xml`.
2. Add the following permissions inside the `<manifest>` tag:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>
```

3. Ensure you have the correct Bootpay credentials set up in your application.

### iOS
1. Open your `Info.plist` file located at `ios/Runner/Info.plist`.
2. Add the following entries to allow network access:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

3. Make sure to configure your Bootpay credentials for iOS as well.

## Using Bootpay in Your Application

To use Bootpay, you will typically create an instance of the `RealFlutter` class and call its methods to initiate payments. Hereâ€™s a basic example of how to do this:

```dart
import 'package:flutter/material.dart';
import 'package:bootpay/bootpay.dart';

class RealFlutter {
  void initiatePayment() {
    // Initialize Bootpay with your application ID
    Bootpay.init('YOUR_APPLICATION_ID');

    // Set the payment details
    Bootpay.requestPayment(
      title: 'Product Title',
      price: 10000, // Price in the smallest currency unit (e.g., cents)
      user: {
        'username': 'John Doe',
        'email': 'john.doe@example.com',
      },
      onDone: (data) {
        // Handle successful payment
        print('Payment successful: $data');
      },
      onError: (error) {
        // Handle payment error
        print('Payment error: $error');
      },
      onCancel: () {
        // Handle payment cancellation
        print('Payment cancelled');
      },
    );
  }
}
```

In this example, we initialize Bootpay with our application ID and set up the payment details, including the title and price. We also define callbacks for handling the payment result.

With this setup, you are ready to start processing payments in your Flutter application!
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Bootpay Integration in Flutter

```dart
import 'package:flutter/material.dart';
import 'package:bootpay/bootpay.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Bootpay Example',
      home: PaymentScreen(),
    );
  }
}

class PaymentScreen extends StatelessWidget {
  final RealFlutter bootpay = RealFlutter();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Bootpay Payment Example'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Initiate the payment process when the button is pressed
            bootpay.initiatePayment();
          },
          child: Text('Pay Now'),
        ),
      ),
    );
  }
}

class RealFlutter {
  void initiatePayment() {
    // Initialize Bootpay with your application ID
    Bootpay.init('YOUR_APPLICATION_ID');

    // Set the payment details
    Bootpay.requestPayment(
      title: 'Product Title',
      price: 10000, // Price in the smallest currency unit (e.g., cents)
      user: {
        'username': 'John Doe',
        'email': 'john.doe@example.com',
      },
      onDone: (data) {
        // Handle successful payment
        print('Payment successful: $data');
      },
      onError: (error) {
        // Handle payment error
        print('Payment error: $error');
      },
      onCancel: () {
        // Handle payment cancellation
        print('Payment cancelled');
      },
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the MyApp widget, which sets up the MaterialApp.
// 2. The PaymentScreen widget is displayed, containing a button labeled "Pay Now."
// 3. When the user presses the button, the initiatePayment method of the RealFlutter class is called.
// 4. Inside initiatePayment, Bootpay is initialized with the application ID.
// 5. The payment request is made with the specified title, price, and user details.
// 6. Callbacks are defined to handle the payment result: onDone for success, onError for errors, and onCancel for cancellations.
// 7. The user will see the Bootpay payment interface, and upon completion, the appropriate callback will be triggered.
```
<!-- END_MAIN -->
```

This structured blog post provides a comprehensive overview of the Bootpay Flutter package, including its features, setup instructions, and a complete example with detailed comments explaining the application flow.
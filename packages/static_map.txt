<-- START_DESCRIPTION -->

Static Map Flutter Package
==========================

The `static_map` Flutter package is a powerful tool for displaying static maps within your Flutter applications. It allows you to generate map images with markers, polygons, and other overlays, making it ideal for a wide range of use cases, such as:

* Displaying a map with a specific location marked
* Creating a map with a route or path highlighted
* Showing a map with multiple markers or points of interest

Key Features:

* Supports both Android and iOS platforms
* Allows for customization of map style, markers, and overlays
* Generates map images as a byte array, making it easy to display in a Flutter widget

When to Use:

* When you need to display a static map with specific markers or overlays
* When you want to generate a map image for use in a Flutter widget
* When you need a lightweight and efficient way to display a map

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
---------------

To use the `static_map` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  static_map: ^1.0.0
```
2. Import the package in your Dart file:
```dart
import 'package:static_map/static_map.dart';
```
3. Create a `StaticMap` instance and set the API key:
```dart
StaticMap _staticMap = StaticMap(
  apiKey: 'YOUR_API_KEY',
);
```
4. Set the map style and markers:
```dart
_staticMap.setMapStyle(
  MapStyle(
    mapType: MapType.roadmap,
  ),
);

_staticMap.addMarker(
  Marker(
    latitude: 37.7749,
    longitude: -122.4194,
  ),
);
```
5. Generate the map image:
```dart
Uint8List mapImage = await _staticMap.generateMapImage();
```
6. Display the map image in a Flutter widget:
```dart
Image image = Image.memory(mapImage);
```
Platform-Specific Details:

* Android: Make sure to add the `com.google.android.gms.maps` package to your `AndroidManifest.xml` file.
* iOS: Make sure to add the `GoogleMaps` framework to your `Info.plist` file.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:static_map/static_map.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  StaticMap _staticMap;
  Uint8List _mapImage;

  @override
  void initState() {
    super.initState();
    _staticMap = StaticMap(
      apiKey: 'YOUR_API_KEY',
    );
    _generateMapImage();
  }

  Future<void> _generateMapImage() async {
    // Set the map style
    _staticMap.setMapStyle(
      MapStyle(
        mapType: MapType.roadmap,
      ),
    );

    // Add a marker
    _staticMap.addMarker(
      Marker(
        latitude: 37.7749,
        longitude: -122.4194,
      ),
    );

    // Generate the map image
    _mapImage = await _staticMap.generateMapImage();

    // Update the UI
    setState(() {});
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Static Map Example'),
        ),
        body: Center(
          child: _mapImage != null
              ? Image.memory(_mapImage)
              : CircularProgressIndicator(),
        ),
      ),
    );
  }
}

// Application flow:
// 1. The app starts and creates a `RealFlutter` instance.
// 2. The `RealFlutter` instance creates a `StaticMap` instance and sets the API key.
// 3. The `RealFlutter` instance generates the map image using the `_generateMapImage` method.
// 4. The `_generateMapImage` method sets the map style and adds a marker.
// 5. The `_generateMapImage` method generates the map image using the `generateMapImage` method.
// 6. The `_generateMapImage` method updates the UI with the generated map image.
// 7. The app displays the map image in a Flutter widget.

// Final summary:
// The app uses the `static_map` package to generate a static map image with a marker.
// The app displays the map image in a Flutter widget.
// The app updates the UI with the generated map image.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->
# Flutter Screen Wake Package
================================

The `flutter_screen_wake` package is a Flutter plugin that allows you to keep the screen awake and prevent it from going to sleep. This is useful in applications where you need to keep the screen on for a prolonged period, such as in video players, games, or navigation apps.

## Features

* Keep the screen awake and prevent it from going to sleep
* Supports both Android and iOS platforms
* Easy to use and integrate into your Flutter app

## When to Use

You can use this package in any situation where you need to keep the screen on for a prolonged period. Some examples include:

* Video players: Keep the screen on while playing videos to prevent the screen from going to sleep.
* Games: Keep the screen on while playing games to prevent the screen from going to sleep.
* Navigation apps: Keep the screen on while navigating to prevent the screen from going to sleep.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->
# Tutorial
==========

## Step 1: Add the Package to Your Pubspec.yaml File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_screen_wake: ^0.1.0
```
Then run `flutter pub get` to get the package.

## Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:flutter_screen_wake/flutter_screen_wake.dart';
```
## Step 3: Use the Package

To keep the screen awake, use the `keepScreenOn` method:
```dart
FlutterScreenWake.keepScreenOn();
```
To let the screen go to sleep again, use the `allowScreenToSleep` method:
```dart
FlutterScreenWake.allowScreenToSleep();
```
## Platform-Specific Details

### Android

On Android, you need to add the following permission to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.WAKE_LOCK" />
```
### iOS

On iOS, you don't need to add any permissions or configurations.

<-- END_TUTORIAL -->

<-- START_MAIN -->
```dart
import 'package:flutter/material.dart';
import 'package:flutter_screen_wake/flutter_screen_wake.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Screen Wake Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  bool _isScreenOn = false;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Screen Wake Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              _isScreenOn ? 'Screen is on' : 'Screen is off',
              style: TextStyle(fontSize: 24),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                // Keep the screen on
                FlutterScreenWake.keepScreenOn();
                setState(() {
                  _isScreenOn = true;
                });
              },
              child: Text('Keep screen on'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                // Let the screen go to sleep
                FlutterScreenWake.allowScreenToSleep();
                setState(() {
                  _isScreenOn = false;
                });
              },
              child: Text('Let screen sleep'),
            ),
          ],
        ),
      ),
    );
  }
}
```
// This is the main file of the Flutter app.
// It uses the `flutter_screen_wake` package to keep the screen awake.
// The app has two buttons: one to keep the screen on and one to let the screen sleep.
// When the user presses the "Keep screen on" button, the app calls the `keepScreenOn` method of the `FlutterScreenWake` class.
// This method keeps the screen awake and prevents it from going to sleep.
// When the user presses the "Let screen sleep" button, the app calls the `allowScreenToSleep` method of the `FlutterScreenWake` class.
// This method lets the screen go to sleep again.
// The app uses a boolean variable `_isScreenOn` to keep track of whether the screen is on or off.
// The app updates the text on the screen based on the value of `_isScreenOn`.
<-- END_MAIN -->
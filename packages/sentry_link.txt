<-- START_DESCRIPTION -->

# Sentry Link Flutter Package
================================

The Sentry Link Flutter package is a powerful tool for error tracking and monitoring in Flutter applications. It allows developers to capture and report errors, exceptions, and crashes, providing valuable insights into the performance and reliability of their apps.

## When to Use
--------------

The Sentry Link package is ideal for use in production environments, where error tracking and monitoring are crucial for ensuring the quality and reliability of the app. It is also useful during development, allowing developers to identify and fix issues early on.

## Features
------------

*   Error tracking: Capture and report errors, exceptions, and crashes
*   Event tracking: Track custom events and user interactions
*   User feedback: Collect user feedback and comments
*   Crash reporting: Report crashes and exceptions
*   Performance monitoring: Monitor app performance and identify bottlenecks

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up Sentry Link
-------------------------

To use the Sentry Link package in your Flutter app, follow these steps:

### Step 1: Add the Package to Your Pubspec.yaml File

```yml
dependencies:
  sentry_link: ^1.0.0
```

### Step 2: Import the Package in Your Dart File

```dart
import 'package:sentry_link/sentry_link.dart';
```

### Step 3: Initialize Sentry Link

```dart
void main() {
  SentryLink.init(
    dsn: 'https://examplePublicKey@o0.ingest.sentry.io/0',
    environment: 'production',
  );
  runApp(MyApp());
}
```

### Step 4: Track Events and Errors

```dart
SentryLink.captureEvent(
  SentryEvent(
    message: 'Hello, world!',
    level: SentryLevel.info,
  ),
);

try {
  // Code that might throw an error
} catch (error, stackTrace) {
  SentryLink.captureException(
    error,
    stackTrace: stackTrace,
  );
}
```

### Platform-Specific Details

#### Android

To use Sentry Link on Android, you need to add the following configuration to your `AndroidManifest.xml` file:

```xml
<application>
  <meta-data
    android:name="io.sentry.dsn"
    android:value="https://examplePublicKey@o0.ingest.sentry.io/0" />
</application>
```

#### iOS

To use Sentry Link on iOS, you need to add the following configuration to your `Info.plist` file:

```xml
<key>io.sentry.dsn</key>
<string>https://examplePublicKey@o0.ingest.sentry.io/0</string>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:sentry_link/sentry_link.dart';

void main() {
  // Initialize Sentry Link
  SentryLink.init(
    dsn: 'https://examplePublicKey@o0.ingest.sentry.io/0',
    environment: 'production',
  );

  // Run the app
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Sentry Link Example',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  void _trackEvent() {
    // Track a custom event
    SentryLink.captureEvent(
      SentryEvent(
        message: 'Button clicked!',
        level: SentryLevel.info,
      ),
    );
  }

  void _trackError() {
    try {
      // Code that might throw an error
      throw Exception('Something went wrong!');
    } catch (error, stackTrace) {
      // Track the error
      SentryLink.captureException(
        error,
        stackTrace: stackTrace,
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Sentry Link Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: _trackEvent,
              child: Text('Track Event'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _trackError,
              child: Text('Track Error'),
            ),
          ],
        ),
      ),
    );
  }
}

// The app starts by initializing Sentry Link with the DSN and environment.
// Then, it runs the app using runApp.
// The app has two buttons: "Track Event" and "Track Error".
// When the "Track Event" button is clicked, it tracks a custom event using SentryLink.captureEvent.
// When the "Track Error" button is clicked, it tries to throw an error and tracks it using SentryLink.captureException.

// This example demonstrates how to use Sentry Link to track events and errors in a Flutter app.
// It shows how to initialize Sentry Link, track custom events, and track errors.
```

<-- END_MAIN -->
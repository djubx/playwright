```markdown
<!-- START_DESCRIPTION -->
# Flutter Persian Calendar Package

The `flutter_persian_calendar` package is a powerful tool for Flutter developers who need to work with the Persian calendar system. This package provides a comprehensive set of features that allow developers to easily integrate Persian date functionalities into their applications. 

## When to Use This Package
You might consider using the `flutter_persian_calendar` package in scenarios such as:
- Developing applications for Persian-speaking regions where the Persian calendar is the standard.
- Creating date pickers that need to support Persian dates.
- Building applications that require conversion between Gregorian and Persian dates.

## Features
- **Date Conversion**: Easily convert between Gregorian and Persian dates.
- **Date Formatting**: Format dates in a way that is culturally appropriate for Persian users.
- **Widgets**: Pre-built widgets for displaying and selecting Persian dates.
- **Localization**: Support for Persian language and culture.

This package is particularly useful for applications that require accurate date handling in the context of Persian culture, making it an essential tool for developers targeting this demographic.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using flutter_persian_calendar

## Step 1: Adding the Dependency
To get started, you need to add the `flutter_persian_calendar` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  flutter_persian_calendar: ^1.0.0  # Check for the latest version on pub.dev
```

## Step 2: Platform-Specific Configuration

### Android
For Android, ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
        ...
    }
}
```

### iOS
For iOS, you may need to set the deployment target in your `ios/Podfile`:

```ruby
platform :ios, '10.0'
```

## Step 3: Importing the Package
In your Dart files, import the package:

```dart
import 'package:flutter_persian_calendar/flutter_persian_calendar.dart';
```

## Step 4: Using the Package
You can now use the package to create a simple date picker. Hereâ€™s a basic example of how to implement a Persian date picker in your Flutter app.

```dart
// Example of using the Persian Calendar
PersianCalendar persianCalendar = PersianCalendar();
DateTime currentDate = DateTime.now();
String persianDate = persianCalendar.toPersianDate(currentDate);
print("Current Persian Date: $persianDate");
```

This code snippet converts the current Gregorian date to the Persian date format.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of flutter_persian_calendar

```dart
import 'package:flutter/material.dart';
import 'package:flutter_persian_calendar/flutter_persian_calendar.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Persian Calendar Example',
      home: PersianCalendarHome(),
    );
  }
}

class PersianCalendarHome extends StatefulWidget {
  @override
  _PersianCalendarHomeState createState() => _PersianCalendarHomeState();
}

class _PersianCalendarHomeState extends State<PersianCalendarHome> {
  // Variable to hold the selected Persian date
  String _selectedDate = '';

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Persian Calendar Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            // Display the selected Persian date
            Text(
              _selectedDate.isEmpty ? 'Select a date' : _selectedDate,
              style: TextStyle(fontSize: 24),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _pickDate,
              child: Text('Pick Persian Date'),
            ),
          ],
        ),
      ),
    );
  }

  // Function to pick a Persian date
  void _pickDate() async {
    // Show the date picker dialog
    final PersianDateTime? picked = await showPersianDatePicker(
      context: context,
      initialDate: PersianDateTime.now(),
      firstDate: PersianDateTime(1400, 1, 1),
      lastDate: PersianDateTime(1500, 12, 30),
    );

    // If a date is picked, update the state
    if (picked != null) {
      setState(() {
        _selectedDate = picked.toString(); // Convert to string for display
      });
    }
  }
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the RealFlutter widget.
// 2. RealFlutter builds a MaterialApp with a title and a home widget.
// 3. The PersianCalendarHome widget is a stateful widget that manages the selected date.
// 4. In the build method, it displays the selected date or prompts the user to select one.
// 5. When the user taps the button, the _pickDate function is called.
// 6. This function opens a Persian date picker dialog.
// 7. If the user selects a date, it updates the _selectedDate state variable.
// 8. The UI is rebuilt to display the selected Persian date.
```
<!-- END_MAIN -->
```

This structured blog provides a comprehensive overview of the `flutter_persian_calendar` package, guiding users through its features, setup, and practical implementation in a Flutter application.
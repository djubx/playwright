<-- START_DESCRIPTION -->

# Desktop Webview Auth Package
================================

The `desktop_webview_auth` package is a Flutter plugin that allows you to authenticate users using a webview on desktop platforms. This package is particularly useful when you need to authenticate users using OAuth or other web-based authentication flows.

## Features

* Supports OAuth 2.0 authentication flows
* Works on Windows, macOS, and Linux platforms
* Allows customization of the webview's appearance and behavior

## When to Use

You should use this package when you need to authenticate users using a web-based authentication flow on desktop platforms. This package is ideal for applications that require OAuth 2.0 authentication, such as those that integrate with Google, Facebook, or GitHub APIs.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `desktop_webview_auth` package, you need to add it to your Flutter project's `pubspec.yaml` file:

```yml
dependencies:
  desktop_webview_auth: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Platform-Specific Configurations

### Windows

On Windows, you need to add the following configuration to your `pubspec.yaml` file:

```yml
windows:
  desktop_webview_auth:
    executable_name: your_app_name
```

Replace `your_app_name` with the name of your executable file.

### macOS

On macOS, you need to add the following configuration to your `pubspec.yaml` file:

```yml
macos:
  desktop_webview_auth:
    bundle_identifier: com.yourcompany.yourapp
```

Replace `com.yourcompany.yourapp` with your app's bundle identifier.

### Linux

On Linux, you don't need to add any specific configuration.

## Using the Package

To use the package, you need to import it in your Dart file:

```dart
import 'package:desktop_webview_auth/desktop_webview_auth.dart';
```

Then, you can use the `DesktopWebviewAuth` class to authenticate users:

```dart
final auth = DesktopWebviewAuth(
  clientId: 'your_client_id',
  clientSecret: 'your_client_secret',
  redirectUri: 'your_redirect_uri',
  scope: 'your_scope',
);

final token = await auth.authenticate();
```

Replace the placeholders with your actual OAuth 2.0 credentials and settings.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:desktop_webview_auth/desktop_webview_auth.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final _auth = DesktopWebviewAuth(
    clientId: 'your_client_id',
    clientSecret: 'your_client_secret',
    redirectUri: 'your_redirect_uri',
    scope: 'your_scope',
  );

  String _token = '';

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Desktop Webview Auth Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              ElevatedButton(
                onPressed: _authenticate,
                child: Text('Authenticate'),
              ),
              Text(_token),
            ],
          ),
        ),
      ),
    );
  }

  Future<void> _authenticate() async {
    // 1. Start the authentication flow
    final token = await _auth.authenticate();

    // 2. Set the token to the UI
    setState(() {
      _token = token;
    });
  }
}

// The application flow is as follows:
// 1. The user clicks the "Authenticate" button.
// 2. The `_authenticate` function is called, which starts the authentication flow using the `DesktopWebviewAuth` class.
// 3. The user is redirected to the OAuth 2.0 authorization page.
// 4. The user grants or denies access to the application.
// 5. The user is redirected back to the application with an authorization code.
// 6. The `DesktopWebviewAuth` class exchanges the authorization code for an access token.
// 7. The access token is returned to the application and set to the UI.

// The final summary is that the code flows as follows:
// The user initiates the authentication flow by clicking the "Authenticate" button.
// The application uses the `DesktopWebviewAuth` class to start the authentication flow.
// The user grants or denies access to the application.
// The application receives an access token and sets it to the UI.
```

<-- END_MAIN -->
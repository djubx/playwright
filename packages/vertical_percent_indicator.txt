```markdown
<!-- START_DESCRIPTION -->
# Vertical Percent Indicator Flutter Package

The `vertical_percent_indicator` Flutter package is a versatile widget designed to visually represent progress or completion in a vertical format. This package is particularly useful in scenarios where you want to display a percentage of completion, such as in loading screens, progress tracking, or any application that requires a visual representation of data.

## When to Use This Package

You might consider using the `vertical_percent_indicator` package in the following scenarios:

- **Loading Indicators**: When you want to show the progress of a task, such as file uploads or downloads.
- **Progress Tracking**: For applications that track user progress, such as fitness apps or learning platforms.
- **Data Visualization**: To represent data in a more engaging way, making it easier for users to understand their progress.

## Features

- **Customizable Appearance**: You can easily customize the colors, sizes, and styles of the indicator to match your app's theme.
- **Animation Support**: The package supports smooth animations, enhancing the user experience.
- **Flexible Usage**: It can be used in various layouts and is responsive to different screen sizes.

Overall, the `vertical_percent_indicator` package is a powerful tool for developers looking to enhance their Flutter applications with visually appealing progress indicators.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Vertical Percent Indicator

## Step 1: Adding the Dependency

To use the `vertical_percent_indicator` package, you first need to add it to your `pubspec.yaml` file. Open the file and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  vertical_percent_indicator: ^1.0.0  # Check for the latest version on pub.dev
```

## Step 2: Installing the Package

After adding the dependency, run the following command in your terminal to install the package:

```bash
flutter pub get
```

## Step 3: Platform-Specific Configuration

### Android

For Android, ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
        ...
    }
}
```

### iOS

For iOS, you may need to update your `ios/Podfile` to ensure compatibility with the latest Flutter versions. Make sure to uncomment the platform line and set it to at least 10.0:

```ruby
platform :ios, '10.0'
```

## Step 4: Using the Vertical Percent Indicator

Now that you have set up the package, you can start using it in your Flutter application. Hereâ€™s a simple example of how to implement the `VerticalPercentIndicator` in your widget tree:

```dart
import 'package:flutter/material.dart';
import 'package:vertical_percent_indicator/vertical_percent_indicator.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Vertical Percent Indicator Example'),
      ),
      body: Center(
        child: VerticalPercentIndicator(
          percent: 0.75, // 75% completion
          width: 100.0,
          lineHeight: 20.0,
          backgroundColor: Colors.grey[300],
          progressColor: Colors.blue,
          animation: true,
          animationDuration: 1000, // 1 second
        ),
      ),
    );
  }
}
```

This code creates a simple app with a vertical progress indicator that shows 75% completion. You can customize the `percent`, `width`, `lineHeight`, `backgroundColor`, and `progressColor` properties to fit your design needs.

With these steps, you should be able to successfully integrate and use the `vertical_percent_indicator` package in your Flutter application.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Vertical Percent Indicator

```dart
import 'package:flutter/material.dart';
import 'package:vertical_percent_indicator/vertical_percent_indicator.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Vertical Percent Indicator Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  double _percent = 0.0; // Initialize the percent variable

  @override
  void initState() {
    super.initState();
    _startProgress(); // Start the progress when the widget is initialized
  }

  void _startProgress() {
    // Simulate a progress update over time
    Future.delayed(Duration(seconds: 1), () {
      setState(() {
        _percent = 0.25; // Update to 25% after 1 second
      });
    });
    Future.delayed(Duration(seconds: 2), () {
      setState(() {
        _percent = 0.50; // Update to 50% after 2 seconds
      });
    });
    Future.delayed(Duration(seconds: 3), () {
      setState(() {
        _percent = 0.75; // Update to 75% after 3 seconds
      });
    });
    Future.delayed(Duration(seconds: 4), () {
      setState(() {
        _percent = 1.0; // Complete the progress after 4 seconds
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Vertical Percent Indicator Example'),
      ),
      body: Center(
        child: VerticalPercentIndicator(
          percent: _percent, // Use the updated percent value
          width: 100.0,
          lineHeight: 20.0,
          backgroundColor: Colors.grey[300],
          progressColor: Colors.blue,
          animation: true,
          animationDuration: 1000, // 1 second
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the MyApp widget.
// 2. MyApp sets up the MaterialApp and defines the home as RealFlutter.
// 3. RealFlutter is a StatefulWidget that manages the progress state.
// 4. In the initState method, _startProgress is called to simulate progress updates.
// 5. The _startProgress method uses Future.delayed to update the _percent variable at intervals.
// 6. The build method returns a Scaffold with a VerticalPercentIndicator that reflects the current _percent value.
// 7. As the _percent variable updates, the UI automatically rebuilds to show the new progress.
```
<!-- END_MAIN -->
``` 

This structured blog provides a comprehensive overview of the `vertical_percent_indicator` Flutter package, including its features, setup instructions, and a complete example with detailed comments explaining the application flow.
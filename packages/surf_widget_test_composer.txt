<-- START_DESCRIPTION -->

# Surf Widget Test Composer
The `surf_widget_test_composer` Flutter package is a powerful tool for testing and composing widgets in isolation. It provides a simple and efficient way to test widgets without having to create a full-fledged app. With this package, you can easily test your widgets' layout, behavior, and interactions.

When to use this package:

* When you want to test a specific widget in isolation without affecting the rest of the app.
* When you want to test a widget's layout and behavior without having to create a full-fledged app.
* When you want to compose multiple widgets together to test their interactions.

Features:

* Test widgets in isolation without affecting the rest of the app.
* Compose multiple widgets together to test their interactions.
* Supports both Android and iOS platforms.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
To use the `surf_widget_test_composer` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  surf_widget_test_composer: ^1.0.0
```
2. Import the package in your Dart file:
```dart
import 'package:surf_widget_test_composer/surf_widget_test_composer.dart';
```
3. Create a new instance of the `SurfWidgetTestComposer` class:
```dart
final composer = SurfWidgetTestComposer();
```
4. Use the `composer` instance to test your widgets:
```dart
composer.testWidget(MyWidget());
```
Platform-specific details:

* Android: No additional configuration is required.
* iOS: You need to add the following line to your `Info.plist` file:
```xml
<key>UIViewControllerBasedStatusBarAppearance</key>
<false/>
```
This is required to enable the status bar appearance to be controlled by the view controller.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:surf_widget_test_composer/surf_widget_test_composer.dart';

void main() {
  // Create a new instance of the SurfWidgetTestComposer class
  final composer = SurfWidgetTestComposer();

  // Define a new widget to test
  class MyWidget extends StatelessWidget {
    @override
    Widget build(BuildContext context) {
      return Scaffold(
        appBar: AppBar(
          title: Text('My Widget'),
        ),
        body: Center(
          child: Text('Hello, World!'),
        ),
      );
    }
  }

  // Use the composer instance to test the MyWidget widget
  composer.testWidget(MyWidget());

  // Compose multiple widgets together to test their interactions
  composer.testWidgets(
    [
      MyWidget(),
      Text('Hello, World!'),
      ElevatedButton(
        onPressed: () {},
        child: Text('Click me'),
      ),
    ],
  );
}

// The application flow is as follows:
// 1. The SurfWidgetTestComposer instance is created.
// 2. The MyWidget widget is defined and tested using the testWidget method.
// 3. Multiple widgets are composed together using the testWidgets method.
// 4. The composed widgets are tested and their interactions are verified.

// Final summary: The code flows by creating a SurfWidgetTestComposer instance,
// defining and testing a widget, composing multiple widgets together, and testing their interactions.
```

<-- END_MAIN -->
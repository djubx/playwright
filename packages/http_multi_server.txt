```markdown
<!-- START_DESCRIPTION -->
# Overview of the `http_multi_server` Flutter Package

The `http_multi_server` package is a powerful tool for Flutter developers looking to create multi-server applications. This package allows you to handle multiple HTTP servers simultaneously, making it ideal for applications that require real-time data processing, such as chat applications, live updates, or any service that needs to manage multiple connections efficiently.

## When to Use `http_multi_server`

You should consider using the `http_multi_server` package in scenarios such as:

- **Real-time Applications**: Applications that require real-time data updates, like chat apps or live sports scores.
- **Microservices Architecture**: When your application architecture is based on microservices, and you need to manage multiple endpoints.
- **Testing and Development**: For developers who need to simulate multiple server responses during testing.

## Features

- **Multiple Server Management**: Easily manage multiple HTTP servers within a single application.
- **Asynchronous Handling**: Built on Dart's asynchronous capabilities, allowing for non-blocking operations.
- **Customizable**: Offers flexibility in configuring server settings and handling requests.

With these features, `http_multi_server` provides a robust solution for developers looking to enhance their Flutter applications with multi-server capabilities.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using `http_multi_server`

## Step 1: Adding the Dependency

To get started, you need to add the `http_multi_server` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  http_multi_server: ^latest_version
```

Make sure to replace `^latest_version` with the latest version available on [pub.dev](https://pub.dev/packages/http_multi_server).

## Step 2: Platform-Specific Configuration

### Android Configuration

For Android, ensure that your `AndroidManifest.xml` file has the necessary permissions. Open `android/app/src/main/AndroidManifest.xml` and add:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
```

### iOS Configuration

For iOS, you may need to add permissions in your `Info.plist` file. Open `ios/Runner/Info.plist` and add:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

## Step 3: Basic Usage

Now that you have set up the package, you can start using it in your Flutter application. Below is a simple example of how to create a multi-server application.

1. Import the package in your Dart file:

```dart
import 'package:http_multi_server/http_multi_server.dart';
```

2. Create an instance of `RealFlutter` to manage your servers.

3. Start the servers and handle requests.

This will be demonstrated in the complete example section below.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of `http_multi_server`

```dart
import 'dart:io';
import 'package:http_multi_server/http_multi_server.dart';

void main() async {
  // Create an instance of RealFlutter to manage multiple servers
  final RealFlutter serverManager = RealFlutter();

  // Start the first server on port 8080
  HttpServer server1 = await HttpMultiServer.loopback(8080);
  print('Server 1 running on http://127.0.0.1:8080');

  // Handle requests for server 1
  server1.listen((HttpRequest request) {
    request.response
      ..write('Hello from Server 1!')
      ..close();
  });

  // Start the second server on port 8081
  HttpServer server2 = await HttpMultiServer.loopback(8081);
  print('Server 2 running on http://127.0.0.1:8081');

  // Handle requests for server 2
  server2.listen((HttpRequest request) {
    request.response
      ..write('Hello from Server 2!')
      ..close();
  });

  // Keep the servers running
  await Future.delayed(Duration(days: 365));
}

// Application Flow Explanation:
// 1. The main function is the entry point of the application.
// 2. An instance of RealFlutter is created to manage the servers.
// 3. The first server is started on port 8080, and a listener is set up to handle incoming requests.
// 4. When a request is received on server 1, it responds with "Hello from Server 1!".
// 5. The second server is started on port 8081, with a similar listener.
// 6. Requests to server 2 receive the response "Hello from Server 2!".
// 7. The servers are kept running indefinitely using a delayed future.
```
<!-- END_MAIN -->
```

### Summary of the Code Flow

The provided code demonstrates how to set up and manage multiple HTTP servers using the `http_multi_server` package in Flutter. The `main` function initializes two servers on different ports (8080 and 8081). Each server listens for incoming HTTP requests and responds with a simple message indicating which server handled the request. The servers are kept alive indefinitely to allow continuous handling of requests. This structure is ideal for applications that require real-time data processing or need to manage multiple endpoints efficiently.
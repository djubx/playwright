<-- START_DESCRIPTION -->

# Introduction to dart_spawner
The dart_spawner package is a powerful tool for Flutter developers that allows them to spawn new processes and execute Dart code in isolation. This package is particularly useful when you need to perform computationally intensive tasks or execute code that may crash or freeze the main application.

## Features
- Spawn new processes and execute Dart code in isolation
- Support for both Android and iOS platforms
- Ability to pass data between the main process and spawned processes
- Error handling and logging mechanisms

## When to use dart_spawner
- Performing computationally intensive tasks, such as data compression or encryption
- Executing code that may crash or freeze the main application
- Improving overall application performance and responsiveness

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting up dart_spawner
To use the dart_spawner package, you need to add it to your pubspec.yaml file:

```yml
dependencies:
  dart_spawner: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Platform-specific configurations
### Android
No additional configurations are required for Android.

### iOS
You need to add the following lines to your Info.plist file:

```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```

## Using dart_spawner
To spawn a new process, you need to create a new instance of the `RealFlutter` class and call the `spawn` method:

```dart
import 'package:dart_spawner/dart_spawner.dart';

void main() {
  RealFlutter realFlutter = RealFlutter();
  realFlutter.spawn();
}
```

You can pass data between the main process and spawned processes using the `send` and `receive` methods:

```dart
realFlutter.send('Hello, world!');
realFlutter.receive().then((data) {
  print(data);
});
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:dart_spawner/dart_spawner.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Dart Spawner Example',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  RealFlutter realFlutter = RealFlutter();

  void _spawnProcess() {
    // Spawn a new process
    realFlutter.spawn();
  }

  void _sendData() {
    // Send data to the spawned process
    realFlutter.send('Hello, world!');
  }

  void _receiveData() {
    // Receive data from the spawned process
    realFlutter.receive().then((data) {
      print(data);
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Dart Spawner Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: _spawnProcess,
              child: Text('Spawn Process'),
            ),
            ElevatedButton(
              onPressed: _sendData,
              child: Text('Send Data'),
            ),
            ElevatedButton(
              onPressed: _receiveData,
              child: Text('Receive Data'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user clicks the "Spawn Process" button, which calls the _spawnProcess method.
// 2. The _spawnProcess method spawns a new process using the RealFlutter class.
// 3. The user clicks the "Send Data" button, which calls the _sendData method.
// 4. The _sendData method sends data to the spawned process using the send method.
// 5. The user clicks the "Receive Data" button, which calls the _receiveData method.
// 6. The _receiveData method receives data from the spawned process using the receive method.
// 7. The received data is printed to the console.

// This example demonstrates how to use the dart_spawner package to spawn new processes and pass data between them.
```

<-- END_MAIN -->
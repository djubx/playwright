<-- START_DESCRIPTION -->

# agconnect_crash Flutter Package
=====================================

The `agconnect_crash` Flutter package is a powerful tool for tracking and analyzing crashes in your Flutter applications. It provides a simple and efficient way to collect and report crash data, helping you identify and fix issues quickly.

### When to Use This Package

This package is ideal for:

*   Debugging and testing your Flutter applications
*   Identifying and fixing crashes in your production environment
*   Improving the overall stability and performance of your app

### Features

The `agconnect_crash` package offers the following features:

*   **Crash reporting**: Collects and reports crash data, including stack traces and device information
*   **Customizable reporting**: Allows you to customize the reporting process, including filtering and prioritizing crashes
*   **Integration with Huawei services**: Seamlessly integrates with Huawei services, such as AppGallery and Huawei Analytics

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the agconnect_crash Package
=============================================

To use the `agconnect_crash` package in your Flutter application, follow these steps:

### Step 1: Add the Package to Your pubspec.yaml File

Add the following line to your `pubspec.yaml` file:

```yml
dependencies:
  agconnect_crash: ^1.0.0
```

### Step 2: Import the Package in Your Dart File

Import the package in your Dart file:

```dart
import 'package:agconnect_crash/agconnect_crash.dart';
```

### Step 3: Initialize the Package

Initialize the package in your `main` function:

```dart
void main() {
  AgconnectCrash.instance.initialize(
    appId: 'YOUR_APP_ID',
    clientSecret: 'YOUR_CLIENT_SECRET',
    clientId: 'YOUR_CLIENT_ID',
  );
  runApp(MyApp());
}
```

### Platform-Specific Details

*   **Android**: Add the following lines to your `AndroidManifest.xml` file:

    ```xml
<application>
  <meta-data
    android:name="com.huawei.agconnect.crash.AppId"
    android:value="YOUR_APP_ID" />
  <meta-data
    android:name="com.huawei.agconnect.crash.ClientSecret"
    android:value="YOUR_CLIENT_SECRET" />
  <meta-data
    android:name="com.huawei.agconnect.crash.ClientId"
    android:value="YOUR_CLIENT_ID" />
</application>
```

*   **iOS**: Add the following lines to your `Info.plist` file:

    ```xml
<key>AGCCrashAppId</key>
<string>YOUR_APP_ID</string>
<key>AGCCrashClientSecret</key>
<string>YOUR_CLIENT_SECRET</string>
<key>AGCCrashClientId</key>
<string>YOUR_CLIENT_ID</string>
```

### Required Configurations and Optimizations

*   **Enable Crash Reporting**: Call the `enableCrashReporting` method to enable crash reporting:

    ```dart
AgconnectCrash.instance.enableCrashReporting(true);
```

*   **Set Custom Crash Reporting**: Call the `setCustomCrashReporting` method to set custom crash reporting:

    ```dart
AgconnectCrash.instance.setCustomCrashReporting(
  (crashReport) {
    // Handle custom crash reporting
  },
);
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:agconnect_crash/agconnect_crash.dart';

void main() {
  // Initialize the package
  AgconnectCrash.instance.initialize(
    appId: 'YOUR_APP_ID',
    clientSecret: 'YOUR_CLIENT_SECRET',
    clientId: 'YOUR_CLIENT_ID',
  );

  // Enable crash reporting
  AgconnectCrash.instance.enableCrashReporting(true);

  // Set custom crash reporting
  AgconnectCrash.instance.setCustomCrashReporting(
    (crashReport) {
      // Handle custom crash reporting
      print('Custom crash reporting: $crashReport');
    },
  );

  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Agconnect Crash Demo'),
        ),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              // Simulate a crash
              throw Exception('Simulated crash');
            },
            child: Text('Simulate Crash'),
          ),
        ),
      ),
    );
  }
}
```

// This is the main entry point of the application.
// The AgconnectCrash package is initialized with the app ID, client secret, and client ID.
// Crash reporting is enabled and custom crash reporting is set.
// The MyApp widget is rendered, which contains a button to simulate a crash.
// When the button is pressed, an exception is thrown to simulate a crash.
// The AgconnectCrash package will catch the exception and report the crash.
// The custom crash reporting callback will be called with the crash report.

// The application flow is as follows:
// 1. The user presses the "Simulate Crash" button.
// 2. An exception is thrown to simulate a crash.
// 3. The AgconnectCrash package catches the exception and reports the crash.
// 4. The custom crash reporting callback is called with the crash report.
// 5. The crash report is handled by the custom crash reporting callback.

<-- END_MAIN -->
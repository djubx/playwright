```markdown
<!-- START_DESCRIPTION -->
# Chatwoot SDK Flutter Package

The **Chatwoot SDK** is a powerful Flutter package that allows developers to integrate Chatwoot's customer support features into their Flutter applications. Chatwoot is an open-source customer support tool that provides a unified inbox for managing customer interactions across various channels. This package enables seamless integration of Chatwoot's functionalities, allowing developers to enhance their applications with live chat support, ticketing systems, and more.

## When to Use This Package
- **Customer Support**: If your application requires real-time customer support, integrating Chatwoot can streamline communication.
- **User Engagement**: Enhance user engagement by providing instant support and feedback mechanisms.
- **Multi-Channel Support**: Manage customer interactions from various channels in one place.

## Features
- **Real-time Messaging**: Enables real-time chat capabilities within your Flutter app.
- **User Authentication**: Supports user authentication to ensure secure communication.
- **Customizable UI**: Offers customizable UI components to match your app's design.
- **Multi-Platform Support**: Works seamlessly on both Android and iOS platforms.

By leveraging the Chatwoot SDK, developers can create a more interactive and supportive user experience, ultimately leading to higher customer satisfaction.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up Chatwoot SDK in Flutter

In this section, we will walk through the setup process for integrating the Chatwoot SDK into your Flutter application.

## Step 1: Add Dependency
To get started, add the `chatwoot_sdk` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  chatwoot_sdk: ^latest_version
```

Make sure to replace `^latest_version` with the latest version available on [pub.dev](https://pub.dev/packages/chatwoot_sdk).

## Step 2: Platform-Specific Configuration

### Android Configuration
1. Open `android/app/build.gradle` and ensure you have the following configurations:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21 // Ensure this is set to at least 21
    }
}
```

2. Add the necessary permissions in `AndroidManifest.xml`:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
```

### iOS Configuration
1. Open `ios/Runner/Info.plist` and add the following:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

2. Ensure your iOS deployment target is set to at least 10.0 in `ios/Podfile`:

```ruby
platform :ios, '10.0'
```

## Step 3: Initialize Chatwoot SDK
In your main application file, initialize the Chatwoot SDK with your Chatwoot account details:

```dart
import 'package:chatwoot_sdk/chatwoot_sdk.dart';

void main() {
  WidgetsFlutterBinding.ensureInitialized();
  ChatwootSDK.initialize(
    accountId: 'YOUR_ACCOUNT_ID',
    websiteToken: 'YOUR_WEBSITE_TOKEN',
  );
  runApp(MyApp());
}
```

Replace `YOUR_ACCOUNT_ID` and `YOUR_WEBSITE_TOKEN` with your actual Chatwoot account credentials.

## Step 4: Using the SDK
You can now use the Chatwoot SDK in your application. For example, to open the chat widget, you can use:

```dart
ChatwootSDK.showChat();
```

This will display the chat interface to the user.

With these steps, you have successfully integrated the Chatwoot SDK into your Flutter application. You can now utilize its features to enhance customer support.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Chatwoot SDK in Flutter

```dart
import 'package:flutter/material.dart';
import 'package:chatwoot_sdk/chatwoot_sdk.dart';

void main() {
  WidgetsFlutterBinding.ensureInitialized();
  // Initialize the Chatwoot SDK with your account details
  ChatwootSDK.initialize(
    accountId: 'YOUR_ACCOUNT_ID', // Replace with your Chatwoot account ID
    websiteToken: 'YOUR_WEBSITE_TOKEN', // Replace with your Chatwoot website token
  );
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Chatwoot SDK Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: HomeScreen(),
    );
  }
}

class HomeScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Chatwoot SDK Example'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Show the Chatwoot chat interface when the button is pressed
            ChatwootSDK.showChat();
          },
          child: Text('Open Chat'),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function initializes the Flutter app and the Chatwoot SDK with the provided account details.
// 2. The MyApp class sets up the MaterialApp with a title and theme.
// 3. The HomeScreen class builds the main screen with an AppBar and a button.
// 4. When the button is pressed, the Chatwoot chat interface is displayed, allowing users to interact with customer support.
// 5. The integration provides a seamless experience for users to get assistance directly from the app.
```

<!-- END_MAIN -->
```

This structured blog post provides a comprehensive overview of the Chatwoot SDK Flutter package, guiding developers through its features, setup, and practical usage with a complete example.
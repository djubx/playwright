```markdown
<!-- START_DESCRIPTION -->
# OGP Data Extract Flutter Package

The `ogp_data_extract` Flutter package is a powerful tool designed to extract Open Graph Protocol (OGP) metadata from web pages. This package is particularly useful for developers who want to fetch and display rich media content from URLs, such as images, titles, and descriptions, which are essential for social media sharing and link previews.

## When to Use This Package

You might consider using the `ogp_data_extract` package in scenarios such as:
- Building a social media application that requires link previews.
- Creating a content aggregator that displays articles with rich metadata.
- Developing a blogging platform where users can share links with enhanced previews.

## Features

- **Easy Integration**: Simple to add to your Flutter project with minimal setup.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS.
- **Rich Metadata Extraction**: Fetches title, description, image, and other OGP metadata.
- **Asynchronous Operations**: Utilizes Dart's async/await for non-blocking operations.

With these features, the `ogp_data_extract` package simplifies the process of fetching and displaying OGP data, enhancing user experience in applications that rely on web content.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the OGP Data Extract Package

## Step 1: Adding the Dependency

To get started, add the `ogp_data_extract` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  ogp_data_extract: ^1.0.0  # Check for the latest version on pub.dev
```

## Step 2: Platform-Specific Configuration

### Android Configuration

1. Open `android/app/build.gradle`.
2. Ensure that the `minSdkVersion` is set to at least 21:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
        ...
    }
}
```

### iOS Configuration

1. Open `ios/Runner/Info.plist`.
2. Add the following permissions to allow network access:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

## Step 3: Importing the Package

In your Dart file, import the package:

```dart
import 'package:ogp_data_extract/ogp_data_extract.dart';
```

## Step 4: Using the Package

You can now use the `ogp_data_extract` package to fetch OGP data. Hereâ€™s a simple example of how to do this:

```dart
void fetchOgpData(String url) async {
  try {
    // Create an instance of the OGP extractor
    final ogpData = await OGPDataExtract.extract(url);
    
    // Print the extracted data
    print('Title: ${ogpData.title}');
    print('Description: ${ogpData.description}');
    print('Image: ${ogpData.image}');
  } catch (e) {
    print('Error fetching OGP data: $e');
  }
}
```

This function takes a URL as input, extracts the OGP data, and prints the title, description, and image URL.

With these steps, you are now ready to integrate the `ogp_data_extract` package into your Flutter application!

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using OGP Data Extract

```dart
import 'package:flutter/material.dart';
import 'package:ogp_data_extract/ogp_data_extract.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'OGP Data Extract Example',
      home: OGPDataScreen(),
    );
  }
}

class OGPDataScreen extends StatefulWidget {
  @override
  _OGPDataScreenState createState() => _OGPDataScreenState();
}

class _OGPDataScreenState extends State<OGPDataScreen> {
  String _url = 'https://example.com'; // URL to fetch OGP data from
  OGPData? _ogpData; // Variable to hold the fetched OGP data
  String _errorMessage = ''; // Variable to hold error messages

  // Function to fetch OGP data
  void _fetchOgpData() async {
    setState(() {
      _errorMessage = ''; // Reset error message
    });
    try {
      // Extract OGP data from the URL
      final ogpData = await OGPDataExtract.extract(_url);
      setState(() {
        _ogpData = ogpData; // Update state with fetched OGP data
      });
    } catch (e) {
      setState(() {
        _errorMessage = 'Error fetching OGP data: $e'; // Update error message
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('OGP Data Extract Example'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            TextField(
              decoration: InputDecoration(labelText: 'Enter URL'),
              onChanged: (value) {
                _url = value; // Update URL from text field
              },
            ),
            SizedBox(height: 10),
            ElevatedButton(
              onPressed: _fetchOgpData, // Fetch OGP data on button press
              child: Text('Fetch OGP Data'),
            ),
            SizedBox(height: 20),
            if (_ogpData != null) ...[
              Text('Title: ${_ogpData!.title}'),
              Text('Description: ${_ogpData!.description}'),
              Image.network(_ogpData!.image), // Display fetched image
            ],
            if (_errorMessage.isNotEmpty) ...[
              Text(_errorMessage, style: TextStyle(color: Colors.red)),
            ],
          ],
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the MyApp class, which sets up the MaterialApp.
// 2. The OGPDataScreen widget is displayed, containing a TextField for URL input and a button to fetch OGP data.
// 3. When the button is pressed, the _fetchOgpData function is called.
// 4. This function attempts to extract OGP data from the provided URL.
// 5. If successful, the title, description, and image are displayed; if an error occurs, an error message is shown.
```
<!-- END_MAIN -->
```

This structured blog provides a comprehensive overview of the `ogp_data_extract` Flutter package, guiding users through its features, setup, and practical usage with a complete example.
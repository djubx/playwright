<-- START_DESCRIPTION -->
# Image Cropper for Web Flutter Package
=====================================

The `image_cropper_for_web` Flutter package provides a simple and efficient way to crop images in web applications. It offers a customizable and user-friendly interface for selecting and cropping images.

### When to Use This Package

This package is ideal for web applications that require image cropping functionality, such as:

* Profile picture editing
* Image editing tools
* Social media platforms

### Features

* Customizable cropping aspect ratio
* Support for various image formats (JPEG, PNG, GIF, etc.)
* User-friendly interface for selecting and cropping images
* Compatible with Flutter web applications

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Package
=============================================

### Step 1: Add the Package to Your Project

Add the following dependency to your `pubspec.yaml` file:
```yml
dependencies:
  image_cropper_for_web: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:image_cropper_for_web/image_cropper_for_web.dart';
```
### Step 3: Use the Package

Create an instance of the `ImageCropper` widget and pass the required parameters:
```dart
ImageCropper(
  image: File('path/to/image.jpg'),
  aspectRatio: 1 / 1, // Optional
  onCrop: (croppedImage) {
    // Handle the cropped image
  },
)
```
### Platform-Specific Details

* For Android, add the following permission to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
```
* For iOS, add the following permission to your `Info.plist` file:
```xml
<key>NSPhotoLibraryUsageDescription</key>
<string>This app needs access to your photo library to crop images.</string>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->
```dart
import 'package:flutter/material.dart';
import 'package:image_cropper_for_web/image_cropper_for_web.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Image Cropper Demo',
      home: ImageCropperDemo(),
    );
  }
}

class ImageCropperDemo extends StatefulWidget {
  @override
  _ImageCropperDemoState createState() => _ImageCropperDemoState();
}

class _ImageCropperDemoState extends State<ImageCropperDemo> {
  File _image;

  Future<void> _selectImage() async {
    final pickedFile = await ImagePicker().getImage(source: ImageSource.gallery);
    setState(() {
      if (pickedFile != null) {
        _image = File(pickedFile.path);
      } else {
        _image = null;
      }
    });
  }

  Future<void> _cropImage() async {
    if (_image != null) {
      final croppedImage = await ImageCropper.crop(
        image: _image,
        aspectRatio: 1 / 1,
      );
      setState(() {
        _image = croppedImage;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Image Cropper Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            if (_image != null)
              Image.file(_image)
            else
              Text('No image selected'),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _selectImage,
              child: Text('Select Image'),
            ),
            SizedBox(height: 10),
            ElevatedButton(
              onPressed: _cropImage,
              child: Text('Crop Image'),
            ),
          ],
        ),
      ),
    );
  }
}
```
// This is the main entry point of the application.
// The `MyApp` widget is the root of the application.
// It uses the `MaterialApp` widget to provide a material design theme.
// The `ImageCropperDemo` widget is the home screen of the application.
// It uses the `Scaffold` widget to provide a basic material design layout.
// The `ImageCropper` widget is used to crop the selected image.
// The `Image.file` widget is used to display the selected image.
// The `ElevatedButton` widgets are used to select and crop the image.

// When the user selects an image, the `_selectImage` function is called.
// This function uses the `ImagePicker` widget to select an image from the gallery.
// The selected image is then stored in the `_image` variable.

// When the user clicks the "Crop Image" button, the `_cropImage` function is called.
// This function uses the `ImageCropper` widget to crop the selected image.
// The cropped image is then stored in the `_image` variable.

// The application then displays the cropped image using the `Image.file` widget.

<-- END_MAIN -->
<-- START_DESCRIPTION -->

**Khalti Flutter Package: A Comprehensive Overview**
=====================================================

The Khalti Flutter package is a popular payment gateway integration library for Flutter applications. It allows developers to easily integrate Khalti payment services into their apps, providing a seamless payment experience for users. In this blog, we will delve into the features, setup process, and usage of the Khalti Flutter package.

**When to Use Khalti Flutter Package?**
--------------------------------------

The Khalti Flutter package is ideal for Flutter applications that require payment gateway integration, particularly for businesses operating in Nepal. With Khalti, you can accept payments from users through various channels, including e-banking, mobile banking, and wallet services.

**Key Features of Khalti Flutter Package**
-----------------------------------------

*   Easy integration with Khalti payment services
*   Support for various payment channels (e-banking, mobile banking, wallet services)
*   Secure payment processing
*   Customizable payment interface

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setting Up Khalti Flutter Package**
=====================================

To use the Khalti Flutter package, follow these steps:

### Step 1: Add the Package to Your Flutter Project

Add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  khalti_flutter: ^2.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:khalti_flutter/khalti_flutter.dart';
```

### Step 3: Initialize Khalti

Initialize Khalti with your public key:

```dart
Khalti _khalti = Khalti(
  publicKey: 'your_public_key',
);
```

### Step 4: Create a Payment Config

Create a payment config object:

```dart
PaymentConfig _paymentConfig = PaymentConfig(
  amount: 1000, // amount in paisa
  productIdentity: 'your_product_identity',
  productName: 'your_product_name',
);
```

### Step 5: Start the Payment Process

Start the payment process using the `_khalti` object:

```dart
_khalti.startPayment(
  paymentConfig: _paymentConfig,
  onSuccess: (successModel) {
    // handle success
  },
  onFailure: (failureModel) {
    // handle failure
  },
);
```

### Platform-Specific Details

For Android, add the following code to your `AndroidManifest.xml` file:

```xml
<application>
  ...
  <meta-data
    android:name="com.khalti.public_key"
    android:value="your_public_key" />
</application>
```

For iOS, add the following code to your `Info.plist` file:

```xml
<key>com.khalti.public_key</key>
<string>your_public_key</string>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:khalti_flutter/khalti_flutter.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Khalti Payment Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  Khalti _khalti;
  PaymentConfig _paymentConfig;

  @override
  void initState() {
    super.initState();
    _khalti = Khalti(
      publicKey: 'your_public_key',
    );
    _paymentConfig = PaymentConfig(
      amount: 1000, // amount in paisa
      productIdentity: 'your_product_identity',
      productName: 'your_product_name',
    );
  }

  void _startPayment() {
    _khalti.startPayment(
      paymentConfig: _paymentConfig,
      onSuccess: (successModel) {
        // handle success
        print('Payment successful');
      },
      onFailure: (failureModel) {
        // handle failure
        print('Payment failed');
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Khalti Payment Demo'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: _startPayment,
          child: Text('Start Payment'),
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user clicks the "Start Payment" button.
// 2. The _startPayment function is called, which starts the payment process using the _khalti object.
// 3. The user is redirected to the Khalti payment interface.
// 4. The user completes the payment process.
// 5. If the payment is successful, the onSuccess callback is called.
// 6. If the payment fails, the onFailure callback is called.
// 7. The user is redirected back to the app.

// Summary:
// This code demonstrates how to integrate Khalti payment services into a Flutter app.
// It shows how to create a payment config object, start the payment process, and handle success and failure callbacks.
// The application flow is explained in the comments above.
```

<-- END_MAIN -->
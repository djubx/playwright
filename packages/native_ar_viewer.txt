<-- START_DESCRIPTION -->

Native AR Viewer Flutter Package
================================

The `native_ar_viewer` Flutter package allows developers to easily integrate augmented reality (AR) features into their Flutter applications. This package provides a simple and intuitive API for displaying 3D models in AR, making it perfect for e-commerce, education, and entertainment applications.

When to Use
------------

Use the `native_ar_viewer` package when you need to:

* Display 3D models in augmented reality
* Provide an immersive and interactive experience for users
* Enhance product visualization in e-commerce applications
* Create engaging educational experiences

Features
--------

* Supports 3D models in OBJ, STL, and GLTF formats
* Provides a simple and intuitive API for displaying 3D models in AR
* Supports both Android and iOS platforms
* Includes example code and documentation for easy integration

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
---------------

To use the `native_ar_viewer` package, follow these steps:

### Step 1: Add the Package to Your Flutter Project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  native_ar_viewer: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:native_ar_viewer/native_ar_viewer.dart';
```
### Step 3: Create an AR View

Create an instance of the `ARView` widget:
```dart
ARView(
  model: 'path/to/model.obj',
  width: 300,
  height: 300,
)
```
Replace `'path/to/model.obj'` with the path to your 3D model file.

### Platform-Specific Details

#### Android

* Make sure to add the following lines to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.CAMERA" />
<uses-feature android:name="android.hardware.camera.ar" android:required="true" />
```
* Also, add the following line to your `build.gradle` file:
```groovy
android {
  ...
  defaultConfig {
    ...
    ndk {
      abiFilters 'armeabi-v7l', 'arm64-v8a', 'x86', 'x86_64'
    }
  }
}
```
#### iOS

* Make sure to add the following lines to your `Info.plist` file:
```xml
<key>NSCameraUsageDescription</key>
<string>This app needs camera access to display AR content</string>
<key>UIRequiredDeviceCapabilities</key>
<array>
  <string>arkit</string>
</array>
```
### Example Code

Here is a complete example of using the `native_ar_viewer` package:
```dart
import 'package:flutter/material.dart';
import 'package:native_ar_viewer/native_ar_viewer.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Native AR Viewer Example'),
      ),
      body: Center(
        child: ARView(
          model: 'path/to/model.obj',
          width: 300,
          height: 300,
        ),
      ),
    );
  }
}
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:native_ar_viewer/native_ar_viewer.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Step 1: Create a scaffold with an app bar and a body
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Native AR Viewer Example'),
      ),
      body: Center(
        // Step 2: Create an AR view with a 3D model
        child: ARView(
          model: 'path/to/model.obj',
          width: 300,
          height: 300,
        ),
      ),
    );
  }
}

// Step 3: Run the app
void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Native AR Viewer Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}
```

// Here is a step-by-step explanation of the code flow:
// 1. The app starts by running the `main` function, which creates a `MaterialApp` instance.
// 2. The `MaterialApp` instance creates a `RealFlutter` instance, which is a stateful widget.
// 3. The `RealFlutter` instance creates a scaffold with an app bar and a body.
// 4. The body of the scaffold contains an `ARView` instance, which displays a 3D model.
// 5. The `ARView` instance uses the `native_ar_viewer` package to display the 3D model in AR.
// 6. The user can interact with the 3D model by moving their device around.
// 7. The app continues to run until the user closes it.

<-- END_MAIN -->
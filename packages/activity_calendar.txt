<-- START_DESCRIPTION -->

# Activity Calendar Flutter Package
=====================================

The `activity_calendar` Flutter package is a powerful tool for creating customizable calendars in your Flutter applications. It provides a simple and intuitive API for displaying and managing calendar events.

### When to Use This Package

This package is ideal for applications that require a calendar-based interface, such as:

* Scheduling apps
* Event planning apps
* Task management apps
* Social media apps with event features

### Features

* Customizable calendar layout
* Support for multiple calendar types (e.g., Gregorian, Julian)
* Event management (adding, removing, editing)
* Date range selection
* Localization support

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `activity_calendar` package, follow these steps:

### Step 1: Add the Package to Your `pubspec.yaml` File

```yml
dependencies:
  activity_calendar: ^1.0.0
```

### Step 2: Import the Package in Your Dart File

```dart
import 'package:activity_calendar/activity_calendar.dart';
```

### Step 3: Create a Calendar Instance

```dart
ActivityCalendar calendar = ActivityCalendar(
  // Set the calendar type (e.g., Gregorian)
  calendarType: CalendarType.gregorian,
  // Set the initial date
  initialDate: DateTime.now(),
);
```

### Platform-Specific Details

* For Android, add the following line to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.WRITE_CALENDAR" />
```
* For iOS, add the following line to your `Info.plist` file:
```xml
<key>NSCalendarsUsageDescription</key>
<string>This app needs access to your calendar</string>
```

### Configurations and Optimizations

* To customize the calendar layout, use the `calendarLayout` property:
```dart
calendar.calendarLayout = CalendarLayout.month;
```
* To optimize performance, use the `cache` property:
```dart
calendar.cache = true;
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:activity_calendar/activity_calendar.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Activity Calendar Demo',
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  ActivityCalendar calendar;

  @override
  void initState() {
    super.initState();
    calendar = ActivityCalendar(
      calendarType: CalendarType.gregorian,
      initialDate: DateTime.now(),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Activity Calendar Demo'),
      ),
      body: Column(
        children: [
          // Display the calendar
          calendar,

          // Add a button to add an event
          ElevatedButton(
            onPressed: () {
              // Add an event to the calendar
              calendar.addEvent(
                Event(
                  title: 'New Event',
                  startDate: DateTime.now(),
                  endDate: DateTime.now().add(Duration(hours: 1)),
                ),
              );
            },
            child: Text('Add Event'),
          ),
        ],
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and is presented with a calendar view.
// 2. The user can navigate through the calendar using the navigation buttons.
// 3. The user can add an event by clicking the "Add Event" button.
// 4. The event is added to the calendar and displayed on the screen.
// 5. The user can continue to add events and navigate through the calendar.

// Final summary: This code demonstrates the basic usage of the activity_calendar package, including setting up the calendar, adding events, and navigating through the calendar.
```

<-- END_MAIN -->
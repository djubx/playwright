<-- START_DESCRIPTION -->

# svg_to_paint Flutter Package
================================

The `svg_to_paint` Flutter package is a powerful tool for converting SVG files into Flutter's `CustomPaint` widgets. This package allows developers to easily incorporate complex vector graphics into their Flutter applications.

## When to Use
--------------

The `svg_to_paint` package is ideal for situations where you need to display intricate vector graphics in your Flutter app. Some examples include:

*   Displaying logos or icons with complex designs
*   Creating custom graphics for buttons or other UI elements
*   Incorporating vector art into your app's design

## Features
------------

The `svg_to_paint` package offers several key features:

*   **SVG to CustomPaint conversion**: Easily convert SVG files into Flutter's `CustomPaint` widgets.
*   **Support for complex graphics**: The package can handle intricate vector graphics with multiple paths and shapes.
*   **Customization options**: Adjust the appearance of your graphics with various settings, such as color and stroke width.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Using the svg_to_paint Package
=============================================

## Step 1: Add the Package to Your Project
-----------------------------------------

To use the `svg_to_paint` package, you'll need to add it to your project's `pubspec.yaml` file. Add the following line under the `dependencies` section:

```yml
dependencies:
  flutter:
    sdk: flutter
  svg_to_paint: ^1.0.0
```

Then, run `flutter pub get` in your terminal to install the package.

## Step 2: Import the Package
---------------------------

In your Dart file, import the `svg_to_paint` package:

```dart
import 'package:svg_to_paint/svg_to_paint.dart';
```

## Step 3: Load Your SVG File
---------------------------

Load your SVG file into a string. You can do this by reading the file from assets or by hardcoding the SVG string.

```dart
String svgString = '''
<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100">
  <path d="M50,0 L50,100 L100,50 Z" fill="#FF0000"/>
</svg>
''';
```

## Step 4: Convert the SVG to CustomPaint
--------------------------------------

Use the `SvgToPaint` class to convert your SVG string into a `CustomPaint` widget.

```dart
CustomPaint customPaint = SvgToPaint(
  svgString: svgString,
  color: Colors.red,
  strokeWidth: 2,
);
```

## Step 5: Display the CustomPaint
---------------------------------

Finally, display the `CustomPaint` widget in your app.

```dart
@override
Widget build(BuildContext context) {
  return Scaffold(
    body: Center(
      child: customPaint,
    ),
  );
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:svg_to_paint/svg_to_paint.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'SvgToPaint Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  String svgString = '''
<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100">
  <path d="M50,0 L50,100 L100,50 Z" fill="#FF0000"/>
</svg>
''';

  // Step 1: Convert the SVG string into a CustomPaint widget
  CustomPaint customPaint;

  @override
  void initState() {
    super.initState();
    customPaint = SvgToPaint(
      svgString: svgString,
      color: Colors.red,
      strokeWidth: 2,
    );
  }

  @override
  Widget build(BuildContext context) {
    // Step 2: Display the CustomPaint widget
    return Scaffold(
      appBar: AppBar(
        title: Text('SvgToPaint Demo'),
      ),
      body: Center(
        child: customPaint,
      ),
    );
  }
}

// The application flow:
// 1. The app starts and runs the main function.
// 2. The main function calls runApp with an instance of MyApp.
// 3. MyApp builds a MaterialApp with a title, theme, and home page.
// 4. The home page is an instance of RealFlutter, which is a stateful widget.
// 5. RealFlutter's initState method is called, which converts the SVG string into a CustomPaint widget.
// 6. RealFlutter's build method is called, which displays the CustomPaint widget in the center of the screen.
```

<-- END_MAIN -->
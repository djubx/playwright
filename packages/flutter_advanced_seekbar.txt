<-- START_DESCRIPTION -->

# Flutter Advanced Seekbar Package
=====================================

The `flutter_advanced_seekbar` package is a customizable and feature-rich seekbar for Flutter applications. It provides a range of options for creating a seekbar that fits your app's design and functionality.

## When to Use This Package
---------------------------

You can use this package when you need a seekbar that is more customizable than the default Flutter seekbar. Some examples of when to use this package include:

* Creating a music player with a custom seekbar
* Building a video player with a seekbar that matches your app's design
* Developing a podcast app with a customizable seekbar

## Features
------------

Some of the key features of this package include:

* Customizable thumb and track colors
* Support for multiple thumb shapes and sizes
* Option to display a progress label
* Support for both horizontal and vertical orientations

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `flutter_advanced_seekbar` package, you need to add it to your project's `pubspec.yaml` file. Here's how to do it:

1. Open your project's `pubspec.yaml` file and add the following line under the `dependencies` section:
```yml
dependencies:
  flutter_advanced_seekbar: ^1.0.0
```
2. Run `flutter pub get` in your terminal to get the package.

## Platform-Specific Details
---------------------------

This package works on both Android and iOS platforms. However, you need to make sure that you have the necessary permissions to access the device's audio and video files.

### Android

To use this package on Android, you need to add the following permissions to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
```
### iOS

To use this package on iOS, you need to add the following lines to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```
## Using the Package
---------------------

To use the package, you need to import it into your Dart file and create an instance of the `AdvancedSeekBar` class. Here's an example:
```dart
import 'package:flutter_advanced_seekbar/flutter_advanced_seekbar.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Advanced SeekBar Example'),
      ),
      body: Center(
        child: AdvancedSeekBar(
          thumbColor: Colors.blue,
          trackColor: Colors.grey,
          progressLabel: Text('Progress: 50%'),
        ),
      ),
    );
  }
}
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_advanced_seekbar/flutter_advanced_seekbar.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Advanced SeekBar Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  double _progress = 0.0;

  @override
  Widget build(BuildContext context) {
    // Create a Scaffold with an AppBar and a Centered AdvancedSeekBar
    return Scaffold(
      appBar: AppBar(
        title: Text('Advanced SeekBar Example'),
      ),
      body: Center(
        // Create an AdvancedSeekBar with a thumb color, track color, and progress label
        child: AdvancedSeekBar(
          thumbColor: Colors.blue,
          trackColor: Colors.grey,
          progressLabel: Text('Progress: ${_progress.toInt()}%'),
          // Set the initial progress value
          progress: _progress,
          // Set the onProgressChanged callback
          onProgressChanged: (double progress) {
            // Update the _progress variable with the new progress value
            setState(() {
              _progress = progress;
            });
          },
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user interacts with the AdvancedSeekBar by dragging the thumb.
// 2. The onProgressChanged callback is called with the new progress value.
// 3. The _progress variable is updated with the new progress value.
// 4. The progress label is updated with the new progress value.
// 5. The AdvancedSeekBar is rebuilt with the new progress value.
```

// The final summary is as follows:
// The code creates a Flutter application with an AdvancedSeekBar.
// The AdvancedSeekBar has a thumb color, track color, and progress label.
// The progress label is updated as the user interacts with the AdvancedSeekBar.
// The application flow is driven by the onProgressChanged callback.
// The _progress variable is updated with the new progress value and the AdvancedSeekBar is rebuilt.

<-- END_MAIN -->
```markdown
<!-- START_DESCRIPTION -->
# Overview of the `persian_calendar_widget` Flutter Package

The `persian_calendar_widget` is a Flutter package designed to provide a customizable Persian calendar widget for Flutter applications. This package is particularly useful for developers targeting Persian-speaking audiences or those who need to integrate the Persian calendar system into their applications. 

## When to Use This Package
- **Cultural Relevance**: If your application is aimed at Persian-speaking users, using a Persian calendar can enhance user experience.
- **Date Management**: When you need to manage dates according to the Persian calendar, such as for events, reminders, or scheduling.
- **Localization**: For applications that require localization features, integrating a Persian calendar can be a significant aspect of the user interface.

## Key Features
- **Customizable UI**: The widget allows for extensive customization to fit the design of your application.
- **Date Selection**: Users can easily select dates from the Persian calendar.
- **Integration**: It can be integrated seamlessly with other Flutter widgets and packages.
- **Localization Support**: Supports localization for Persian language, making it user-friendly for native speakers.

Overall, the `persian_calendar_widget` is a powerful tool for Flutter developers looking to incorporate Persian calendar functionalities into their applications.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using `persian_calendar_widget`

## Installation
To use the `persian_calendar_widget`, you need to add it to your `pubspec.yaml` file. Open your `pubspec.yaml` and add the following line under dependencies:

```yaml
dependencies:
  persian_calendar_widget: ^latest_version
```

Make sure to replace `latest_version` with the most recent version available on [pub.dev](https://pub.dev/packages/persian_calendar_widget).

## Platform-Specific Configuration
### Android
For Android, ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
        ...
    }
}
```

### iOS
For iOS, you may need to set the deployment target in your `ios/Podfile`:

```ruby
platform :ios, '10.0'
```

## Using the Package
Once you have installed the package, you can start using it in your Flutter application. Hereâ€™s a simple example of how to implement the Persian calendar widget.

1. Import the package in your Dart file:

```dart
import 'package:persian_calendar_widget/persian_calendar_widget.dart';
```

2. Use the `PersianCalendarWidget` in your widget tree:

```dart
@override
Widget build(BuildContext context) {
  return Scaffold(
    appBar: AppBar(
      title: Text('Persian Calendar Example'),
    ),
    body: Center(
      child: PersianCalendarWidget(
        onDateSelected: (date) {
          // Handle the selected date
          print('Selected date: $date');
        },
      ),
    ),
  );
}
```

This basic setup will display a Persian calendar in your app, allowing users to select dates.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using `persian_calendar_widget`

```dart
import 'package:flutter/material.dart';
import 'package:persian_calendar_widget/persian_calendar_widget.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Persian Calendar Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: CalendarHome(),
    );
  }
}

class CalendarHome extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Persian Calendar Example'),
      ),
      body: Center(
        child: PersianCalendarWidget(
          onDateSelected: (date) {
            // This callback is triggered when a date is selected
            // Here we can handle the selected date
            print('Selected date: $date');
            // You can also show a dialog or navigate to another screen
            showDialog(
              context: context,
              builder: (context) {
                return AlertDialog(
                  title: Text('Selected Date'),
                  content: Text('You selected: $date'),
                  actions: [
                    TextButton(
                      onPressed: () {
                        Navigator.of(context).pop(); // Close the dialog
                      },
                      child: Text('OK'),
                    ),
                  ],
                );
              },
            );
          },
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function starts the app by calling runApp with the RealFlutter widget.
// 2. RealFlutter builds a MaterialApp with a title and theme.
// 3. The home of the MaterialApp is set to CalendarHome, which contains the Persian calendar widget.
// 4. When a date is selected in the PersianCalendarWidget, the onDateSelected callback is triggered.
// 5. Inside the callback, we print the selected date and show an AlertDialog displaying the selected date.
// 6. The user can dismiss the dialog by pressing the OK button.
```
<!-- END_MAIN -->
```

This structured blog post provides a comprehensive overview of the `persian_calendar_widget` package, guiding developers through its features, installation, usage, and a complete example with detailed comments explaining the application flow.
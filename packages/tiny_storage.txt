# Tiny Storage Flutter Package: A Comprehensive Guide

## <-- START_DESCRIPTION -->

### Description

The `tiny_storage` Flutter package is a lightweight and efficient solution for local data storage in Flutter applications. It provides a simple API for storing key-value pairs, making it ideal for scenarios where you need to persist small amounts of data without the overhead of a full database. 

### When to Use

You might consider using `tiny_storage` in the following scenarios:
- Storing user preferences or settings.
- Caching small amounts of data for offline access.
- Managing simple state data that needs to persist across app sessions.

### Features

- **Lightweight**: Minimal overhead, making it suitable for small data storage needs.
- **Easy to Use**: Simple API for storing and retrieving data.
- **Cross-Platform**: Works seamlessly on both Android and iOS.
- **Asynchronous Operations**: Supports async operations for better performance.

## <-- END_DESCRIPTION -->

## <-- START_TUTORIAL -->

### Tutorial

#### Installation

To add the `tiny_storage` package to your Flutter project, include it in your `pubspec.yaml` file:

```yaml
dependencies:
  tiny_storage: ^1.0.0
```

Run `flutter pub get` to install the package.

#### Platform-Specific Configuration

**Android**: No additional configuration is required for Android. The package works out of the box.

**iOS**: Ensure that your iOS deployment target is set to at least 10.0 in your `ios/Podfile`:

```ruby
platform :ios, '10.0'
```

#### Basic Usage

1. **Import the Package**: Start by importing the package in your Dart file.

   ```dart
   import 'package:tiny_storage/tiny_storage.dart';
   ```

2. **Initialize the Storage**: Before using the storage, initialize it in your main function.

   ```dart
   void main() async {
     WidgetsFlutterBinding.ensureInitialized();
     await TinyStorage.init();
     runApp(MyApp());
   }
   ```

3. **Storing Data**: Use the `setItem` method to store data.

   ```dart
   await TinyStorage.setItem('username', 'JohnDoe');
   ```

4. **Retrieving Data**: Use the `getItem` method to retrieve data.

   ```dart
   String? username = await TinyStorage.getItem('username');
   ```

5. **Removing Data**: Use the `removeItem` method to delete data.

   ```dart
   await TinyStorage.removeItem('username');
   ```

## <-- END_TUTORIAL -->

## <-- START_MAIN -->

### Complete Example

```dart
import 'package:flutter/material.dart';
import 'package:tiny_storage/tiny_storage.dart';

void main() async {
  // Ensure Flutter binding is initialized before using any plugins
  WidgetsFlutterBinding.ensureInitialized();
  
  // Initialize TinyStorage
  await TinyStorage.init();
  
  // Run the main application
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Tiny Storage Example',
      home: HomeScreen(),
    );
  }
}

class HomeScreen extends StatefulWidget {
  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  String _username = '';

  @override
  void initState() {
    super.initState();
    // Load the username from storage when the screen initializes
    _loadUsername();
  }

  // Function to load the username from TinyStorage
  void _loadUsername() async {
    String? username = await TinyStorage.getItem('username');
    setState(() {
      _username = username ?? 'No username set';
    });
  }

  // Function to save the username to TinyStorage
  void _saveUsername(String username) async {
    await TinyStorage.setItem('username', username);
    _loadUsername(); // Reload the username after saving
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Tiny Storage Example'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text('Current Username: $_username'),
            TextField(
              onSubmitted: _saveUsername, // Save username on submission
              decoration: InputDecoration(labelText: 'Enter Username'),
            ),
          ],
        ),
      ),
    );
  }
}
```

### Application Flow Explanation

// The application starts by initializing TinyStorage in the main function.
// The `MyApp` widget is created, which sets up the MaterialApp and the HomeScreen.
// In the `HomeScreen`, the `_loadUsername` method is called in `initState` to fetch the username from storage.
// If a username is found, it is displayed; otherwise, a default message is shown.
// The user can enter a new username in the TextField, which triggers the `_saveUsername` method on submission.
// This method saves the new username to TinyStorage and reloads the displayed username to reflect the change.

## <-- END_MAIN -->

### Summary

The `tiny_storage` package provides a straightforward and efficient way to manage local data storage in Flutter applications. With its simple API and lightweight nature, it is an excellent choice for developers looking to store small amounts of data without the complexity of a full database solution. Whether you're managing user preferences or caching data, `tiny_storage` can help streamline your Flutter development process.
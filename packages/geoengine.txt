<-- START_DESCRIPTION -->

Geoengine Package: A Powerful Geospatial Solution for Flutter
===========================================================

The Geoengine package is a robust and feature-rich library for Flutter that enables developers to create complex geospatial applications with ease. With its extensive set of APIs and tools, this package is ideal for building mapping, navigation, and location-based services.

Key Features:

*   Support for multiple map providers (e.g., OpenStreetMap, Mapbox)
*   Advanced geospatial querying and filtering capabilities
*   Real-time location tracking and updates
*   Customizable map styles and overlays

When to Use:

*   Building complex mapping and navigation applications
*   Creating location-based services (e.g., ride-hailing, food delivery)
*   Developing geospatial data analysis and visualization tools

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setting Up the Geoengine Package
--------------------------------

To use the Geoengine package in your Flutter project, follow these steps:

### Step 1: Add the Package to Your `pubspec.yaml` File

```yml
dependencies:
  geoengine: ^1.0.0
```

### Step 2: Import the Package in Your Dart File

```dart
import 'package:geoengine/geoengine.dart';
```

### Step 3: Initialize the Geoengine

```dart
void main() {
  GeoEngine.initialize(
    apiKey: 'YOUR_API_KEY',
    mapProvider: MapProvider.openStreetMap,
  );
  runApp(MyApp());
}
```

### Platform-Specific Configurations

#### Android

In your `AndroidManifest.xml` file, add the following permissions:

```xml
<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
<uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
```

#### iOS

In your `Info.plist` file, add the following keys:

```xml
<key>NSLocationWhenInUseUsageDescription</key>
<string>This app needs access to your location to work properly</string>
<key>NSLocationAlwaysAndWhenInUseUsageDescription</key>
<string>This app needs access to your location to work properly</string>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:geoengine/geoengine.dart';

void main() {
  GeoEngine.initialize(
    apiKey: 'YOUR_API_KEY',
    mapProvider: MapProvider.openStreetMap,
  );
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  late GeoEngineMapController _mapController;

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        body: GeoEngineMap(
          onMapCreated: (controller) {
            _mapController = controller;
          },
          initialCameraPosition: CameraPosition(
            target: LatLng(37.7749, -122.4194),
            zoom: 12,
          ),
        ),
      ),
    );
  }

  // Add a marker to the map
  void _addMarker() {
    _mapController.addMarker(
      Marker(
        markerId: MarkerId('marker_1'),
        position: LatLng(37.7749, -122.4194),
        infoWindow: InfoWindow(title: 'Marker 1'),
      ),
    );
  }

  // Animate the camera to a new position
  void _animateCamera() {
    _mapController.animateCamera(
      CameraUpdate.newCameraPosition(
        CameraPosition(
          target: LatLng(37.7859, -122.4364),
          zoom: 15,
        ),
      ),
    );
  }
}

// Application flow:
// 1. The app initializes the Geoengine package with an API key and map provider.
// 2. The app creates a `GeoEngineMap` widget and sets up the initial camera position.
// 3. When the map is created, the app gets a reference to the `GeoEngineMapController`.
// 4. The app uses the controller to add a marker to the map and animate the camera to a new position.

// Final summary:
// This code demonstrates how to use the Geoengine package to create a simple mapping app.
// It initializes the package, creates a map, adds a marker, and animates the camera.
// The app uses the `GeoEngineMapController` to interact with the map and perform actions.
```

<-- END_MAIN -->
```markdown
<!-- START_DESCRIPTION -->
# Device Safety Info Flutter Package

The `device_safety_info` Flutter package is designed to provide developers with essential information about the safety status of the device on which their application is running. This package can be particularly useful in scenarios where security and safety are paramount, such as in banking applications, health apps, or any application that handles sensitive user data.

## When to Use This Package
- **Security Applications**: When developing apps that require a high level of security, such as banking or personal finance apps.
- **Health Monitoring**: For applications that monitor health data and need to ensure the device is secure.
- **User Data Protection**: Any app that handles sensitive user information can benefit from knowing the device's safety status.

## Features
- **Device Safety Status**: Retrieve information about whether the device is rooted or jailbroken.
- **Safety Checks**: Perform checks to determine if the device has been tampered with.
- **Platform Support**: Works on both Android and iOS, providing a unified API for safety checks.

This package is a valuable tool for developers looking to enhance the security of their applications by ensuring they are running on safe devices.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Device Safety Info

## Installation
To add the `device_safety_info` package to your Flutter project, include it in your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  device_safety_info: ^latest_version
```

Make sure to replace `latest_version` with the most recent version available on [pub.dev](https://pub.dev/packages/device_safety_info).

## Platform-Specific Configuration

### Android
1. Ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file:
   ```groovy
   android {
       ...
       defaultConfig {
           ...
           minSdkVersion 21
           ...
       }
   }
   ```

### iOS
1. For iOS, you may need to add permissions in your `Info.plist` file if you are accessing sensitive information. However, the `device_safety_info` package does not require any specific permissions.

## Using the Package
To use the `device_safety_info` package, you can follow these steps in your Flutter application:

1. Import the package:
   ```dart
   import 'package:device_safety_info/device_safety_info.dart';
   ```

2. Create a method to check the device safety status:
   ```dart
   Future<void> checkDeviceSafety() async {
       final isRooted = await DeviceSafetyInfo.isDeviceRooted();
       final isTampered = await DeviceSafetyInfo.isDeviceTampered();

       print('Is device rooted: $isRooted');
       print('Is device tampered: $isTampered');
   }
   ```

3. Call this method in your app's lifecycle, such as in the `initState` of your main widget.

This setup will allow you to check the safety status of the device and take appropriate actions based on the results.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Device Safety Info

```dart
import 'package:flutter/material.dart';
import 'package:device_safety_info/device_safety_info.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  bool? isRooted;
  bool? isTampered;

  @override
  void initState() {
    super.initState();
    // Call the method to check device safety status when the app initializes
    checkDeviceSafety();
  }

  Future<void> checkDeviceSafety() async {
    // Check if the device is rooted
    isRooted = await DeviceSafetyInfo.isDeviceRooted();
    // Check if the device is tampered
    isTampered = await DeviceSafetyInfo.isDeviceTampered();
    // Update the UI with the results
    setState(() {});
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Device Safety Info Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Text('Is device rooted: ${isRooted ?? 'Checking...'}'),
              Text('Is device tampered: ${isTampered ?? 'Checking...'}'),
            ],
          ),
        ),
      ),
    );
  }
}
```

// The above code is a complete Flutter application that demonstrates the use of the device_safety_info package.
// 1. The app starts by running the RealFlutter widget.
// 2. In the RealFlutter widget, we define a stateful widget to manage the state of the device safety checks.
// 3. In the initState method, we call checkDeviceSafety to perform the safety checks when the app initializes.
// 4. The checkDeviceSafety method uses the DeviceSafetyInfo class to check if the device is rooted or tampered.
// 5. The results are stored in the isRooted and isTampered variables, which are then used to update the UI.
// 6. The build method displays the results in the center of the screen, showing whether the device is rooted or tampered with.
// 7. The UI updates automatically when the safety checks are completed, providing real-time feedback to the user.

```
<!-- END_MAIN -->
``` 

This structured blog post provides a comprehensive overview of the `device_safety_info` package, guiding developers through its features, setup, and practical usage in a Flutter application.
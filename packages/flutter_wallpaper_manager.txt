<-- START_DESCRIPTION -->

# Flutter Wallpaper Manager Package
=====================================

The `flutter_wallpaper_manager` package is a Flutter plugin that allows you to manage wallpapers on Android and iOS devices. With this package, you can set wallpapers, get the current wallpaper, and even crop images to fit the device's screen size.

### When to Use This Package

This package is useful when you want to create a wallpaper app or add wallpaper management features to your existing app. You can use it to:

* Set a new wallpaper from a URL or a local image file
* Get the current wallpaper and display it in your app
* Crop an image to fit the device's screen size before setting it as a wallpaper

### Features

* Set wallpaper from URL or local image file
* Get current wallpaper
* Crop image to fit device screen size
* Supports Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `flutter_wallpaper_manager` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_wallpaper_manager: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:flutter_wallpaper_manager/flutter_wallpaper_manager.dart';
```
### Step 3: Configure Platform-Specific Settings

#### Android

Add the following lines to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.SET_WALLPAPER" />
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
```
#### iOS

Add the following lines to your `Info.plist` file:
```xml
<key>NSPhotoLibraryUsageDescription</key>
<string>This app needs access to your photo library to set wallpapers.</string>
```
### Step 4: Use the Package

Create an instance of the `WallpaperManager` class and use its methods to set wallpapers, get the current wallpaper, and crop images.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_wallpaper_manager/flutter_wallpaper_manager.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Wallpaper Manager Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: WallpaperManagerDemo(),
    );
  }
}

class WallpaperManagerDemo extends StatefulWidget {
  @override
  _WallpaperManagerDemoState createState() => _WallpaperManagerDemoState();
}

class _WallpaperManagerDemoState extends State<WallpaperManagerDemo> {
  final _wallpaperManager = WallpaperManager();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Wallpaper Manager Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: _setWallpaperFromUrl,
              child: Text('Set Wallpaper from URL'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _setCurrentWallpaper,
              child: Text('Get Current Wallpaper'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _cropImage,
              child: Text('Crop Image'),
            ),
          ],
        ),
      ),
    );
  }

  Future<void> _setWallpaperFromUrl() async {
    // Set wallpaper from URL
    final url = 'https://example.com/image.jpg';
    await _wallpaperManager.setWallpaperFromUrl(url);
  }

  Future<void> _setCurrentWallpaper() async {
    // Get current wallpaper
    final wallpaper = await _wallpaperManager.getCurrentWallpaper();
    print('Current Wallpaper: $wallpaper');
  }

  Future<void> _cropImage() async {
    // Crop image
    final image = await _wallpaperManager.cropImage();
    print('Cropped Image: $image');
  }
}

// Application flow:
// 1. The user opens the app and is presented with three buttons: Set Wallpaper from URL, Get Current Wallpaper, and Crop Image.
// 2. When the user clicks the Set Wallpaper from URL button, the app sets the wallpaper from the specified URL using the `setWallpaperFromUrl` method.
// 3. When the user clicks the Get Current Wallpaper button, the app gets the current wallpaper using the `getCurrentWallpaper` method and prints it to the console.
// 4. When the user clicks the Crop Image button, the app crops the image using the `cropImage` method and prints the cropped image to the console.

// Summary:
// This code demonstrates the use of the `flutter_wallpaper_manager` package to set wallpapers, get the current wallpaper, and crop images. The app presents three buttons to the user, each of which triggers a different method of the `WallpaperManager` class.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Curved Animation Controller Flutter Package
=============================================

The `curved_animation_controller` Flutter package provides a simple and efficient way to create and manage curved animations in your Flutter applications. This package is ideal for developers who want to add visually appealing animations to their apps without the hassle of complex animation code.

### When to Use This Package

You can use this package in a variety of scenarios, such as:

* Creating smooth and engaging transitions between screens or widgets
* Adding animations to buttons, icons, or other interactive elements
* Enhancing the overall user experience with subtle animations

### Key Features

* Easy-to-use API for creating and managing curved animations
* Support for various curve types, including `Curves.easeIn`, `Curves.easeOut`, and `Curves.easeInOut`
* Customizable animation duration and delay
* Compatible with both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the Package
=====================================

To use the `curved_animation_controller` package in your Flutter project, follow these steps:

### Step 1: Add the Package to Your Project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  curved_animation_controller: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:curved_animation_controller/curved_animation_controller.dart';
```
### Step 3: Create a Curved Animation Controller

Create a new instance of the `CurvedAnimationController` class:
```dart
CurvedAnimationController _controller = CurvedAnimationController(
  curve: Curves.easeInOut,
  duration: Duration(milliseconds: 500),
);
```
### Step 4: Animate Your Widgets

Use the `_controller` to animate your widgets:
```dart
AnimatedBuilder(
  animation: _controller,
  builder: (context, child) {
    return Transform.translate(
      offset: Offset(_controller.value * 100, 0),
      child: child,
    );
  },
  child: Text('Hello, World!'),
)
```
### Platform-Specific Details

* Android: No additional configuration is required.
* iOS: You may need to add the following line to your `Info.plist` file:
```xml
<key>UIViewControllerBasedStatusBarAppearance</key>
<false/>
```
This ensures that the status bar appearance is not affected by the animation.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:curved_animation_controller/curved_animation_controller.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> with TickerProviderStateMixin {
  CurvedAnimationController _controller;

  @override
  void initState() {
    super.initState();
    _controller = CurvedAnimationController(
      curve: Curves.easeInOut,
      duration: Duration(milliseconds: 500),
      vsync: this,
    );
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        body: Center(
          child: AnimatedBuilder(
            animation: _controller,
            builder: (context, child) {
              // Step 1: Animate the opacity of the text
              return Opacity(
                opacity: _controller.value,
                child: child,
              );
            },
            child: Text(
              'Hello, World!',
              style: TextStyle(fontSize: 24),
            ),
          ),
        ),
        floatingActionButton: FloatingActionButton(
          onPressed: () {
            // Step 2: Animate the text when the button is pressed
            _controller.forward(from: 0);
          },
          child: Icon(Icons.play_arrow),
        ),
      ),
    );
  }
}

// The application flow:
// 1. The user presses the floating action button.
// 2. The `_controller` is animated forward from 0 to 1.
// 3. The `AnimatedBuilder` rebuilds the text with the new opacity value.
// 4. The text fades in as the opacity increases.
// 5. The animation completes when the opacity reaches 1.
```

<-- END_MAIN -->
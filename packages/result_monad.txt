<-- START_DESCRIPTION -->

Result Monad Flutter Package
==========================

The `result_monad` package is a Flutter library that provides a simple and efficient way to handle errors and results in asynchronous programming. It is based on the concept of monads, which are design patterns that provide a way to compose computations that maintain a certain structure.

The `result_monad` package provides a `Result` class that can be used to represent the outcome of an asynchronous computation. The `Result` class has two possible states: `Ok` and `Err`. The `Ok` state represents a successful computation, while the `Err` state represents an error.

When to Use
------------

The `result_monad` package is useful in situations where you need to handle errors and results in asynchronous programming. For example, when making API calls, reading files, or performing other I/O operations.

Features
--------

*   Simple and efficient error handling
*   Easy to use and understand API
*   Compatible with both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
---------------

To use the `result_monad` package, you need to add it to your `pubspec.yaml` file:

```yml
dependencies:
  result_monad: ^1.0.0
```

Then, run `flutter pub get` to install the package.

To use the `Result` class, you need to import the package:

```dart
import 'package:result_monad/result_monad.dart';
```

Creating a Result
-----------------

You can create a `Result` instance using the `Ok` or `Err` constructors:

```dart
Result<int> result = Ok(10);
Result<int> error = Err('Error message');
```

Using the Result
----------------

You can use the `Result` instance to perform computations that may fail. For example:

```dart
Result<int> divide(int a, int b) {
  if (b == 0) {
    return Err('Cannot divide by zero');
  } else {
    return Ok(a / b);
  }
}
```

Handling Errors
----------------

You can use the `match` method to handle errors:

```dart
Result<int> result = divide(10, 0);
result.match(
  (value) => print('Result: $value'),
  (error) => print('Error: $error'),
);
```

Platform-Specific Details
-------------------------

The `result_monad` package is compatible with both Android and iOS platforms. However, you may need to configure your project settings to use the package.

For Android, you need to add the following configuration to your `android/app/build.gradle` file:

```groovy
android {
  // ...
  kotlinOptions {
    jvmTarget = '1.8'
  }
}
```

For iOS, you need to add the following configuration to your `ios/Podfile` file:

```ruby
target 'Runner' do
  # ...
  use_frameworks!
end
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:result_monad/result_monad.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Result Monad Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _formKey = GlobalKey<FormState>();
  final _aController = TextEditingController();
  final _bController = TextEditingController();
  String _result = '';

  // Step 1: Define a function to divide two numbers using the Result monad
  Result<double> divide(double a, double b) {
    if (b == 0) {
      return Err('Cannot divide by zero');
    } else {
      return Ok(a / b);
    }
  }

  // Step 2: Handle the form submission
  void _handleSubmit() {
    if (_formKey.currentState!.validate()) {
      double a = double.parse(_aController.text);
      double b = double.parse(_bController.text);

      // Step 3: Call the divide function and handle the result
      Result<double> result = divide(a, b);
      result.match(
        (value) {
          setState(() {
            _result = 'Result: $value';
          });
        },
        (error) {
          setState(() {
            _result = 'Error: $error';
          });
        },
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Result Monad Example'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              TextFormField(
                controller: _aController,
                decoration: InputDecoration(
                  labelText: 'Number A',
                ),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter a number';
                  }
                  return null;
                },
              ),
              TextFormField(
                controller: _bController,
                decoration: InputDecoration(
                  labelText: 'Number B',
                ),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter a number';
                  }
                  return null;
                },
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _handleSubmit,
                child: Text('Divide'),
              ),
              SizedBox(height: 20),
              Text(_result),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user enters two numbers in the form.
// 2. The user submits the form.
// 3. The divide function is called with the two numbers.
// 4. The divide function returns a Result monad.
// 5. The Result monad is handled using the match method.
// 6. If the result is Ok, the result is displayed to the user.
// 7. If the result is Err, an error message is displayed to the user.

```

<-- END_MAIN -->
```markdown
<!-- START_DESCRIPTION -->
# Sweet Cookie Jar Flutter Package

The **sweet_cookie_jar** package is a powerful and flexible solution for managing cookies in Flutter applications. It provides a simple API for storing, retrieving, and managing cookies, making it an essential tool for developers who need to handle user sessions, authentication, and other cookie-related tasks.

## When to Use

You should consider using the **sweet_cookie_jar** package in scenarios such as:

- **User Authentication**: When your application requires user login sessions, cookies can be used to store authentication tokens securely.
- **Session Management**: For applications that need to maintain user sessions across different screens or app restarts.
- **Data Persistence**: When you need to store user preferences or settings that can be retrieved later.

## Features

- **Easy Integration**: The package can be easily integrated into any Flutter application with minimal setup.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS platforms.
- **Secure Storage**: Provides options for secure cookie storage, ensuring sensitive data is protected.
- **Customizable**: Allows developers to customize cookie attributes such as expiration, path, and domain.

With these features, the **sweet_cookie_jar** package simplifies cookie management in Flutter applications, enhancing user experience and security.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Sweet Cookie Jar

## Step 1: Adding Dependency

To get started, add the **sweet_cookie_jar** package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  sweet_cookie_jar: ^1.0.0  # Check for the latest version on pub.dev
```

## Step 2: Importing the Package

In your Dart file, import the package:

```dart
import 'package:sweet_cookie_jar/sweet_cookie_jar.dart';
```

## Step 3: Platform-Specific Configuration

### Android

For Android, ensure that you have the necessary permissions in your `AndroidManifest.xml` file:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
```

### iOS

For iOS, you may need to add the following to your `Info.plist` to allow HTTP requests if you're not using HTTPS:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

## Step 4: Basic Usage

You can now start using the **sweet_cookie_jar** package in your application. Hereâ€™s a simple example of how to set and get cookies:

```dart
void main() async {
  // Initialize the cookie jar
  final cookieJar = SweetCookieJar();

  // Set a cookie
  await cookieJar.setCookie('session_id', '123456', expires: DateTime.now().add(Duration(days: 7)));

  // Get a cookie
  final sessionId = await cookieJar.getCookie('session_id');
  print('Session ID: $sessionId');
}
```

This example demonstrates how to initialize the cookie jar, set a cookie with an expiration date, and retrieve it.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Sweet Cookie Jar

```dart
import 'package:flutter/material.dart';
import 'package:sweet_cookie_jar/sweet_cookie_jar.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Sweet Cookie Jar Example',
      home: CookieExample(),
    );
  }
}

class CookieExample extends StatefulWidget {
  @override
  _CookieExampleState createState() => _CookieExampleState();
}

class _CookieExampleState extends State<CookieExample> {
  final SweetCookieJar _cookieJar = SweetCookieJar();
  String _cookieValue = '';

  @override
  void initState() {
    super.initState();
    _loadCookie();
  }

  // Load the cookie when the app starts
  Future<void> _loadCookie() async {
    // Retrieve the cookie value
    final cookie = await _cookieJar.getCookie('session_id');
    setState(() {
      _cookieValue = cookie ?? 'No cookie found';
    });
  }

  // Set a new cookie
  Future<void> _setCookie() async {
    await _cookieJar.setCookie('session_id', '123456', expires: DateTime.now().add(Duration(days: 7)));
    _loadCookie(); // Reload the cookie after setting it
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Cookie Jar Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text('Current Cookie Value: $_cookieValue'),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _setCookie,
              child: Text('Set Cookie'),
            ),
          ],
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts and initializes the SweetCookieJar instance.
// 2. In the initState method, it calls _loadCookie to retrieve the current cookie value.
// 3. If a cookie with the key 'session_id' exists, it updates the state with its value.
// 4. The UI displays the current cookie value and provides a button to set a new cookie.
// 5. When the button is pressed, _setCookie is called, which sets a new cookie and reloads the cookie value.
```
<!-- END_MAIN -->
```

This structured blog provides a comprehensive overview of the **sweet_cookie_jar** Flutter package, guiding users through its features, setup, and practical usage with a complete example.
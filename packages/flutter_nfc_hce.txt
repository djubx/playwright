```markdown
<!-- START_DESCRIPTION -->
# Flutter NFC HCE Package: flutter_nfc_hce

The `flutter_nfc_hce` package is a powerful tool for Flutter developers looking to implement NFC (Near Field Communication) Host Card Emulation (HCE) in their applications. This package allows your Flutter app to emulate NFC cards, enabling communication with NFC readers. It is particularly useful for applications that require contactless payments, access control, or data exchange.

## When to Use This Package
- **Contactless Payments**: If you're developing a payment application that needs to interact with NFC terminals.
- **Access Control Systems**: For applications that manage access to secure areas using NFC-enabled cards.
- **Data Exchange**: When you need to transfer data between devices using NFC technology.

## Features
- **Easy Integration**: Simple API to integrate NFC HCE functionality into your Flutter app.
- **Cross-Platform Support**: Works on both Android and iOS, although with some platform-specific configurations.
- **Customizable Card Emulation**: Allows you to define the behavior of the emulated NFC card.
- **Event Handling**: Provides callbacks for various NFC events, such as card read and write operations.

With these features, `flutter_nfc_hce` is a robust choice for developers looking to leverage NFC technology in their Flutter applications.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using flutter_nfc_hce

In this section, we will walk through the setup process for the `flutter_nfc_hce` package and demonstrate how to use it in your Flutter application.

## Step 1: Add Dependency
To get started, add the `flutter_nfc_hce` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  flutter_nfc_hce: ^latest_version
```

Make sure to replace `^latest_version` with the latest version available on [pub.dev](https://pub.dev/packages/flutter_nfc_hce).

## Step 2: Platform-Specific Configuration

### Android Configuration
1. **Permissions**: Add the following permissions to your `AndroidManifest.xml` file:

```xml
<uses-permission android:name="android.permission.NFC" />
<uses-permission android:name="android.permission.NFC_TRANSACTION" />
<uses-feature android:name="android.hardware.nfc.hce" android:required="true" />
```

2. **Service Declaration**: Declare the NFC service in the same `AndroidManifest.xml`:

```xml
<service
    android:name="com.ekn.nfc_hce.NfcService"
    android:exported="true"
    android:permission="android.permission.BIND_NFC_SERVICE">
    <intent-filter>
        <action android:name="android.nfc.cardemulation.action.HOST_APDU_SERVICE" />
    </intent-filter>
</service>
```

### iOS Configuration
For iOS, ensure that you have the following in your `Info.plist`:

```xml
<key>NSNFCUsageDescription</key>
<string>This app uses NFC to communicate with NFC readers.</string>
```

## Step 3: Using the Package
Now that we have set up the package, we can start using it in our Flutter application. Below is a simple example demonstrating how to implement NFC HCE.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
```dart
import 'package:flutter/material.dart';
import 'package:flutter_nfc_hce/flutter_nfc_hce.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  String _message = "Waiting for NFC...";

  @override
  void initState() {
    super.initState();
    // Start listening for NFC events
    FlutterNfcHce.onMessageReceived.listen((message) {
      // Update the message when an NFC message is received
      setState(() {
        _message = "Received: ${message.toString()}";
      });
    });
  }

  @override
  void dispose() {
    // Stop listening for NFC events when the widget is disposed
    FlutterNfcHce.stopForegroundDispatch();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('NFC HCE Example'),
        ),
        body: Center(
          child: Text(_message), // Display the received NFC message
        ),
      ),
    );
  }
}
```

// The above code is a simple Flutter application that demonstrates the use of the flutter_nfc_hce package.
// 
// 1. **Imports**: We import the necessary packages, including flutter_nfc_hce.
// 2. **Main Function**: The main function runs the RealFlutter app.
// 3. **Stateful Widget**: RealFlutter is a stateful widget that maintains the state of the NFC message.
// 4. **initState**: In the initState method, we set up a listener for NFC messages. When a message is received, we update the state to display the message.
// 5. **dispose**: We ensure to stop listening for NFC events when the widget is disposed to prevent memory leaks.
// 6. **Build Method**: The build method creates a simple UI with an AppBar and a Center widget that displays the received NFC message.

```
<!-- END_MAIN -->

# Summary
In this blog post, we explored the `flutter_nfc_hce` package, which allows Flutter applications to emulate NFC cards. We covered the setup process, including platform-specific configurations for Android and iOS, and provided a complete example demonstrating how to listen for NFC messages. This package is ideal for applications requiring NFC capabilities, such as contactless payments and data exchange. By following the steps outlined, developers can easily integrate NFC HCE functionality into their Flutter projects.
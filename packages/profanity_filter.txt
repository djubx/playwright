Here's a detailed technical blog on the "profanity_filter" Flutter package, structured as requested.

<!-- START_DESCRIPTION -->
# Profanity Filter Flutter Package

The **profanity_filter** Flutter package is a powerful tool designed to help developers filter out inappropriate or offensive language from user-generated content in their applications. This package is particularly useful in social media apps, chat applications, forums, and any platform where user interaction is prevalent. By implementing this package, developers can ensure a safer and more respectful environment for their users.

## When to Use This Package
- **Chat Applications**: To filter out offensive language in real-time messaging.
- **Social Media Platforms**: To moderate comments and posts.
- **Forums and Community Boards**: To maintain a respectful discourse among users.
- **Gaming Applications**: To ensure that in-game chats are free from toxic language.

## Features
- **Customizable Profanity List**: Developers can add or remove words from the default profanity list.
- **Real-time Filtering**: The package can filter text as users type, providing immediate feedback.
- **Multiple Languages Support**: The package can be configured to support various languages, making it versatile for global applications.
- **Easy Integration**: Simple setup and usage, allowing developers to implement it quickly in their projects.

By leveraging the **profanity_filter** package, developers can enhance user experience and promote a positive community atmosphere.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Profanity Filter Package

## Step 1: Adding the Dependency
To get started, you need to add the **profanity_filter** package to your Flutter project. Open your `pubspec.yaml` file and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  profanity_filter: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command in your terminal to install it:

```bash
flutter pub get
```

## Step 2: Platform-Specific Configuration

### Android
For Android, ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
        ...
    }
}
```

### iOS
For iOS, you may need to enable certain permissions in your `Info.plist` if your app requires internet access or other features. However, the **profanity_filter** package does not require any specific permissions.

## Step 3: Using the Package
Now that you have set up the package, you can start using it in your Flutter application. Hereâ€™s a simple example of how to implement it in a text input field.

```dart
import 'package:flutter/material.dart';
import 'package:profanity_filter/profanity_filter.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Profanity Filter Example')),
        body: ProfanityFilterExample(),
      ),
    );
  }
}

class ProfanityFilterExample extends StatefulWidget {
  @override
  _ProfanityFilterExampleState createState() => _ProfanityFilterExampleState();
}

class _ProfanityFilterExampleState extends State<ProfanityFilterExample> {
  final TextEditingController _controller = TextEditingController();
  final ProfanityFilter _profanityFilter = ProfanityFilter();

  String _filteredText = '';

  void _filterText() {
    setState(() {
      _filteredText = _profanityFilter.censor(_controller.text);
    });
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        TextField(
          controller: _controller,
          onChanged: (text) {
            _filterText(); // Filter text as user types
          },
          decoration: InputDecoration(labelText: 'Type something'),
        ),
        SizedBox(height: 20),
        Text('Filtered Text: $_filteredText'),
      ],
    );
  }
}
```

In this example, we create a simple Flutter application with a text field. As the user types, the input is filtered for profanity, and the filtered text is displayed below the input field.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Profanity Filter in Flutter

```dart
import 'package:flutter/material.dart';
import 'package:profanity_filter/profanity_filter.dart';

// Main entry point of the application
void main() {
  runApp(RealFlutter());
}

// The main application widget
class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Profanity Filter Example')),
        body: ProfanityFilterExample(),
      );
    });
  }
}

// Stateful widget to demonstrate profanity filtering
class ProfanityFilterExample extends StatefulWidget {
  @override
  _ProfanityFilterExampleState createState() => _ProfanityFilterExampleState();
}

class _ProfanityFilterExampleState extends State<ProfanityFilterExample> {
  final TextEditingController _controller = TextEditingController(); // Controller for the text field
  final ProfanityFilter _profanityFilter = ProfanityFilter(); // Instance of the profanity filter

  String _filteredText = ''; // Variable to hold the filtered text

  // Method to filter the text input
  void _filterText() {
    setState(() {
      _filteredText = _profanityFilter.censor(_controller.text); // Censor the input text
    });
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        TextField(
          controller: _controller, // Assign the controller to the text field
          onChanged: (text) {
            _filterText(); // Call the filter method on text change
          },
          decoration: InputDecoration(labelText: 'Type something'), // Input field label
        ),
        SizedBox(height: 20), // Space between input and output
        Text('Filtered Text: $_filteredText'), // Display the filtered text
      ],
    );
  }
}

// Application Flow Explanation:
// 1. The application starts with the main() function, which runs the RealFlutter widget.
// 2. The RealFlutter widget builds a MaterialApp with a Scaffold containing an AppBar and the ProfanityFilterExample widget.
// 3. The ProfanityFilterExample widget is a stateful widget that manages user input and filtered output.
// 4. A TextEditingController is used to capture user input from the TextField.
// 5. The ProfanityFilter instance is created to handle the filtering of profanity.
// 6. As the user types in the TextField, the onChanged callback triggers the _filterText() method.
// 7. The _filterText() method updates the _filteredText variable with the censored version of the input text.
// 8. The filtered text is displayed below the TextField, providing real-time feedback to the user.
```
<!-- END_MAIN -->

In summary, this blog post provided a comprehensive overview of the **profanity_filter** Flutter package, including its features, setup instructions, and a complete example. By following the steps outlined, developers can easily integrate profanity filtering into their applications, enhancing user experience and promoting a respectful environment.
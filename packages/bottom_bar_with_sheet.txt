```markdown
<!-- START_DESCRIPTION -->
# Overview of the `bottom_bar_with_sheet` Flutter Package

The `bottom_bar_with_sheet` package is a powerful Flutter library that allows developers to create a bottom navigation bar with a sheet that can be expanded or collapsed. This package is particularly useful for applications that require a clean and intuitive way to navigate between different sections while providing additional functionality through the sheet.

## When to Use This Package

You might consider using the `bottom_bar_with_sheet` package in scenarios such as:
- **Social Media Apps**: Where users need to switch between feeds, notifications, and profile settings.
- **E-commerce Applications**: To navigate between product categories, cart, and user account settings.
- **Content Consumption Apps**: For switching between different content types (e.g., articles, videos) while providing additional options in the sheet.

## Key Features
- **Customizable Bottom Navigation Bar**: Easily customize the appearance and behavior of the bottom navigation bar.
- **Expandable Sheet**: The sheet can be expanded to show more options or collapsed to save space.
- **Smooth Animations**: Provides smooth transitions between the bottom bar and the sheet, enhancing user experience.
- **Platform Compatibility**: Works seamlessly on both Android and iOS platforms.

This package is a great choice for developers looking to enhance their app's navigation experience while maintaining a clean UI.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using `bottom_bar_with_sheet`

## Step 1: Adding the Dependency

To get started, you need to add the `bottom_bar_with_sheet` package to your `pubspec.yaml` file. Open your `pubspec.yaml` and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  bottom_bar_with_sheet: ^0.1.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command to install it:

```bash
flutter pub get
```

## Step 2: Basic Setup

### Android Configuration

For Android, ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
        ...
    }
}
```

### iOS Configuration

For iOS, you may need to set the deployment target in your `ios/Podfile`:

```ruby
platform :ios, '10.0'
```

## Step 3: Using the Package

Now that you have the package installed, you can start using it in your Flutter application. Below is a simple example of how to implement the `bottom_bar_with_sheet` in your app.

1. Import the package in your Dart file:

```dart
import 'package:bottom_bar_with_sheet/bottom_bar_with_sheet.dart';
```

2. Create a StatefulWidget to manage the state of the bottom bar and sheet.

3. Use the `BottomBarWithSheet` widget in your build method.

### Example Code Snippet

Hereâ€™s a basic implementation:

```dart
import 'package:flutter/material.dart';
import 'package:bottom_bar_with_sheet/bottom_bar_with_sheet.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  int _selectedIndex = 0; // Track the selected index
  final List<Widget> _pages = [HomePage(), SettingsPage()]; // Pages to navigate

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: _pages[_selectedIndex], // Display the selected page
      bottomNavigationBar: BottomBarWithSheet(
        selectedIndex: _selectedIndex,
        items: [
          BottomBarWithSheetItem(icon: Icons.home, label: 'Home'),
          BottomBarWithSheetItem(icon: Icons.settings, label: 'Settings'),
        ],
        onTap: (index) {
          setState(() {
            _selectedIndex = index; // Update the selected index
          });
        },
        sheet: Container(
          height: 300,
          color: Colors.white,
          child: Center(child: Text('This is the bottom sheet')),
        ),
      ),
    );
  }
}
```

In this example, we create a simple app with a bottom navigation bar that allows users to switch between a home page and a settings page. The bottom sheet provides additional options or information.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of `bottom_bar_with_sheet`

```dart
import 'package:flutter/material.dart';
import 'package:bottom_bar_with_sheet/bottom_bar_with_sheet.dart';

// Main entry point of the application
void main() {
  runApp(MyApp());
}

// Main application widget
class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Bottom Bar with Sheet Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(), // Set the home to our main widget
    );
  }
}

// Main widget that contains the bottom bar and sheet
class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  int _selectedIndex = 0; // Track the selected index
  final List<Widget> _pages = [HomePage(), SettingsPage()]; // Pages to navigate

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: _pages[_selectedIndex], // Display the selected page
      bottomNavigationBar: BottomBarWithSheet(
        selectedIndex: _selectedIndex,
        items: [
          BottomBarWithSheetItem(icon: Icons.home, label: 'Home'), // Home item
          BottomBarWithSheetItem(icon: Icons.settings, label: 'Settings'), // Settings item
        ],
        onTap: (index) {
          setState(() {
            _selectedIndex = index; // Update the selected index
          });
        },
        sheet: Container(
          height: 300,
          color: Colors.white,
          child: Center(child: Text('This is the bottom sheet')), // Content of the sheet
        ),
      ),
    );
  }
}

// Home page widget
class HomePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Center(
      child: Text('Home Page', style: TextStyle(fontSize: 24)),
    );
  }
}

// Settings page widget
class SettingsPage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Center(
      child: Text('Settings Page', style: TextStyle(fontSize: 24)),
    );
  }
}
```

### Application Flow Explanation

// The application starts with the `main()` function, which runs the `MyApp` widget.
// `MyApp` sets up the MaterialApp with a title and theme, and specifies `RealFlutter` as the home widget.
// `RealFlutter` is a StatefulWidget that manages the state of the bottom navigation bar and the displayed page.
// The `_selectedIndex` variable keeps track of which page is currently displayed.
// The `_pages` list contains the widgets for the Home and Settings pages.
// The `BottomBarWithSheet` widget is used to create the bottom navigation bar.
// When a user taps on an item in the bottom bar, the `onTap` callback updates the `_selectedIndex` and rebuilds the UI to show the selected page.
// The bottom sheet is displayed when the bottom bar is interacted with, providing additional options or information to the user.
// The `HomePage` and `SettingsPage` widgets are simple stateless widgets that display text in the center of the screen.
<!-- END_MAIN -->
``` 

This structured blog provides a comprehensive overview, setup instructions, and a complete example of using the `bottom_bar_with_sheet` package in a Flutter application.
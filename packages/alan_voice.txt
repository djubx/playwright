<-- START_DESCRIPTION -->

# alan_voice Flutter Package: A High-Level Overview
=====================================================

The `alan_voice` Flutter package is a powerful tool for integrating voice assistants into your Flutter applications. It provides a simple and intuitive API for adding voice commands, intents, and entities to your app, allowing users to interact with your app using natural language.

### When to Use This Package

The `alan_voice` package is ideal for applications that require hands-free interaction, such as:

* Voice-controlled games
* Virtual assistants
* Smart home automation apps
* Accessibility-focused apps

### Key Features

* Support for voice commands, intents, and entities
* Integration with Alan AI's voice assistant platform
* Simple and intuitive API for adding voice functionality
* Support for both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the alan_voice Package
=============================================

### Step 1: Add the Package to Your pubspec.yaml File

```yml
dependencies:
  alan_voice: ^1.0.0
```

### Step 2: Import the Package in Your Dart File

```dart
import 'package:alan_voice/alan_voice.dart';
```

### Step 3: Initialize the Alan Voice Assistant

```dart
void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Alan Voice Demo',
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  void initState() {
    super.initState();
    AlanVoice.init(
      'YOUR_ALAN_API_KEY',
      'YOUR_ALAN_PROJECT_ID',
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Alan Voice Demo'),
      ),
      body: Center(
        child: Text('Hello, World!'),
      ),
    );
  }
}
```

### Platform-Specific Details

#### Android

* Add the following permissions to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.RECORD_AUDIO" />
<uses-permission android:name="android.permission.INTERNET" />
```
* Add the following dependency to your `build.gradle` file:
```groovy
dependencies {
  implementation 'com.alan:alan-sdk:1.0.0'
}
```

#### iOS

* Add the following permissions to your `Info.plist` file:
```xml
<key>NSMicrophoneUsageDescription</key>
<string>This app needs access to the microphone to work properly</string>
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```
* Add the following dependency to your `Podfile`:
```ruby
pod 'AlanSDK', '~> 1.0.0'
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:alan_voice/alan_voice.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Alan Voice Demo',
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  void initState() {
    super.initState();
    AlanVoice.init(
      'YOUR_ALAN_API_KEY',
      'YOUR_ALAN_PROJECT_ID',
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Alan Voice Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text('Hello, World!'),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                AlanVoice.playText('Hello, World!');
              },
              child: Text('Play Text'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                AlanVoice.playCommand('turn on the lights');
              },
              child: Text('Play Command'),
            ),
          ],
        ),
      ),
    );
  }
}

// The app starts by initializing the Alan Voice assistant with the API key and project ID.
// The user is then presented with a screen that displays the text "Hello, World!" and two buttons.
// The first button plays the text "Hello, World!" using the Alan Voice assistant.
// The second button plays the command "turn on the lights" using the Alan Voice assistant.
// The user can interact with the app by pressing the buttons or using voice commands.
```

<-- END_MAIN -->
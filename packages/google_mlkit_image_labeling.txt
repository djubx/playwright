```markdown
<!-- START_DESCRIPTION -->
# Google ML Kit Image Labeling Flutter Package

The `google_mlkit_image_labeling` Flutter package is a powerful tool that allows developers to integrate image labeling capabilities into their Flutter applications using Google's ML Kit. This package leverages machine learning to identify and label objects within images, making it ideal for applications that require image recognition features, such as photo management apps, augmented reality experiences, and accessibility tools.

## When to Use This Package
You should consider using the `google_mlkit_image_labeling` package in scenarios such as:
- **Photo Organization**: Automatically tagging and categorizing images based on their content.
- **Augmented Reality**: Enhancing AR experiences by recognizing real-world objects.
- **Accessibility**: Assisting visually impaired users by providing audio descriptions of images.

## Features
- **Real-time Image Labeling**: Process images in real-time to provide immediate feedback.
- **Multiple Labeling Models**: Choose from different models based on your accuracy and performance needs.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS devices.
- **Easy Integration**: Simple setup and usage within Flutter applications.

With these features, the `google_mlkit_image_labeling` package empowers developers to create intelligent applications that can understand and interpret visual data effectively.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Google ML Kit Image Labeling Package

## Step 1: Add Dependency
To get started, add the `google_mlkit_image_labeling` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  google_mlkit_image_labeling: ^latest_version
```

Make sure to replace `^latest_version` with the latest version available on [pub.dev](https://pub.dev/packages/google_mlkit_image_labeling).

## Step 2: Platform-Specific Configuration

### Android Configuration
1. Open your `android/app/build.gradle` file and ensure that you have the following configurations:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21 // Minimum SDK version required
    }
}
```

2. Ensure that you have the necessary permissions in your `AndroidManifest.xml`:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
<uses-permission android:name="android.permission.CAMERA"/>
```

### iOS Configuration
1. Open your `ios/Runner/Info.plist` file and add the following permissions:

```xml
<key>NSCameraUsageDescription</key>
<string>We need access to the camera for image labeling.</string>
<key>NSPhotoLibraryUsageDescription</key>
<string>We need access to the photo library for image labeling.</string>
```

## Step 3: Using the Package
Now that you have set up the package, you can start using it in your Flutter application. Below is a simple example of how to implement image labeling.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example: Image Labeling with Google ML Kit

```dart
import 'package:flutter/material.dart';
import 'package:google_mlkit_image_labeling/google_mlkit_image_labeling.dart';
import 'package:image_picker/image_picker.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Image Labeling Demo',
      home: ImageLabelingScreen(),
    );
  }
}

class ImageLabelingScreen extends StatefulWidget {
  @override
  _ImageLabelingScreenState createState() => _ImageLabelingScreenState();
}

class _ImageLabelingScreenState extends State<ImageLabelingScreen> {
  final ImagePicker _picker = ImagePicker();
  List<Label> _labels = []; // List to hold the labels
  String _imagePath = ''; // Path of the selected image

  // Function to pick an image from the gallery
  Future<void> _pickImage() async {
    final pickedFile = await _picker.getImage(source: ImageSource.gallery);
    if (pickedFile != null) {
      setState(() {
        _imagePath = pickedFile.path; // Update the image path
      });
      _labelImage(pickedFile.path); // Start labeling the image
    }
  }

  // Function to label the selected image
  Future<void> _labelImage(String imagePath) async {
    final inputImage = InputImage.fromFilePath(imagePath);
    final imageLabeler = ImageLabeler(options: ImageLabelerOptions(confidenceThreshold: 0.5));
    
    // Get labels for the image
    final List<Label> labels = await imageLabeler.processImage(inputImage);
    setState(() {
      _labels = labels; // Update the labels list
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Image Labeling')),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            // Display the selected image
            _imagePath.isNotEmpty
                ? Image.file(File(_imagePath))
                : Text('No image selected.'),
            SizedBox(height: 20),
            // Button to pick an image
            ElevatedButton(
              onPressed: _pickImage,
              child: Text('Pick an Image'),
            ),
            SizedBox(height: 20),
            // Display the labels
            ..._labels.map((label) => Text('${label.text} (${(label.confidence * 100).toStringAsFixed(2)}%)')).toList(),
          ],
        ),
      ),
    );
  }
}
```

```
// The application starts by running the RealFlutter class, which sets up the MaterialApp.
// The ImageLabelingScreen widget is displayed, which contains the main functionality.
// The user can pick an image from their gallery using the _pickImage function.
// Once an image is selected, the _labelImage function is called to process the image and get labels.
// The labels are displayed below the image, showing the identified objects and their confidence levels.
// The app provides a simple interface for users to interact with image labeling features.
```
<!-- END_MAIN -->
```

This structured blog provides a comprehensive overview of the `google_mlkit_image_labeling` Flutter package, guiding users through its features, setup, and implementation with a complete example.
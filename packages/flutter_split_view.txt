```markdown
<-- START_DESCRIPTION -->

# Flutter Split View Package: An Overview

The `flutter_split_view` package is a powerful tool for Flutter developers looking to create dynamic, resizable split views within their applications. This package is particularly useful for applications that require a multi-panel interface, such as IDEs, file explorers, or any app that benefits from a master-detail layout.

## When to Use `flutter_split_view`

- **IDE-like Applications**: When building applications that require multiple panels, such as code editors or design tools.
- **File Explorers**: To allow users to navigate directories and view file contents simultaneously.
- **Dashboard Interfaces**: For applications that display multiple data panels or widgets that need to be resized by the user.

## Key Features

- **Resizable Panels**: Users can adjust the size of each panel by dragging the divider.
- **Horizontal and Vertical Orientation**: Supports both horizontal and vertical split views.
- **Customizable Appearance**: Allows customization of divider color, thickness, and more.
- **Nested Split Views**: Supports nesting of split views for complex layouts.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using `flutter_split_view`

In this tutorial, we will walk through the setup process for the `flutter_split_view` package and demonstrate how to integrate it into a Flutter project.

## Installation

To use `flutter_split_view`, add it to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  flutter_split_view: ^1.0.0
```

Run `flutter pub get` to install the package.

## Basic Setup

1. **Import the Package**: Start by importing the package in your Dart file.

   ```dart
   import 'package:flutter_split_view/flutter_split_view.dart';
   ```

2. **Using the Split View**: Wrap your widgets with `SplitView` to create a split interface.

   ```dart
   SplitView(
     viewMode: SplitViewMode.Horizontal,
     children: [
       RealFlutter(child: Text('Left Panel')),
       RealFlutter(child: Text('Right Panel')),
     ],
   )
   ```

## Platform-Specific Details

### Android

- Ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21 to support all features of the package.

### iOS

- No specific configurations are required for iOS, but ensure your deployment target is set to iOS 9.0 or higher.

## Optimizations

- **Performance**: Use `const` constructors where possible to improve performance.
- **Responsiveness**: Test the split view on different screen sizes to ensure a responsive design.

<-- END_TUTORIAL -->

<-- START_MAIN -->

# Complete Example: Flutter Split View

Below is a complete example demonstrating the key features of the `flutter_split_view` package.

```dart
import 'package:flutter/material.dart';
import 'package:flutter_split_view/flutter_split_view.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Split View Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: SplitViewExample(),
    );
  }
}

class SplitViewExample extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Split View Example'),
      ),
      body: SplitView(
        viewMode: SplitViewMode.Horizontal, // Set the split view to horizontal
        indicator: SplitIndicator(viewMode: SplitViewMode.Horizontal), // Add a visual indicator
        children: [
          RealFlutter(child: LeftPanel()), // Left panel widget
          RealFlutter(child: RightPanel()), // Right panel widget
        ],
        onWeightChanged: (w) => print('Weight changed: $w'), // Log weight changes
      ),
    );
  }
}

class LeftPanel extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Container(
      color: Colors.blue[100],
      child: Center(
        child: Text('Left Panel'),
      ),
    );
  }
}

class RightPanel extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Container(
      color: Colors.green[100],
      child: Center(
        child: Text('Right Panel'),
      ),
    );
  }
}

// Application Flow:
// 1. The main function initializes the app and sets up the MaterialApp.
// 2. MyApp is the root widget, setting the theme and home page.
// 3. SplitViewExample is the main screen, using a Scaffold with an AppBar.
// 4. The body of the Scaffold is a SplitView with horizontal orientation.
// 5. Two panels, LeftPanel and RightPanel, are added as children of the SplitView.
// 6. Each panel is a simple container with a centered text widget.
// 7. The SplitView allows resizing by dragging the divider, and logs changes to the console.
```

<-- END_MAIN -->
```
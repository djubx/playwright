```markdown
<!-- START_DESCRIPTION -->
# LoggerX: A Comprehensive Logging Package for Flutter

LoggerX is a powerful logging package designed for Flutter applications, providing developers with a simple and effective way to log messages, errors, and other important information during the development and debugging process. It is particularly useful for applications that require detailed logging for troubleshooting and performance monitoring.

## When to Use LoggerX
- **Debugging**: When you need to track down issues in your application, LoggerX can help you log detailed information about the app's state and behavior.
- **Performance Monitoring**: Use LoggerX to log performance metrics and analyze the efficiency of your application.
- **Error Tracking**: Capture and log errors to understand the root cause of issues in production environments.

## Key Features
- **Custom Log Levels**: LoggerX allows you to define custom log levels, making it easy to filter logs based on severity.
- **Formatted Output**: The package provides options for formatted log output, making it easier to read and understand logs.
- **File Logging**: LoggerX supports logging to files, which is useful for persistent logging in production apps.
- **Integration with Flutter**: Seamlessly integrates with Flutter's logging system, allowing for easy use alongside other packages.

LoggerX is an excellent choice for developers looking to enhance their logging capabilities in Flutter applications.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# LoggerX Setup and Usage Tutorial

## Installation
To add LoggerX to your Flutter project, include it in your `pubspec.yaml` file:

```yaml
dependencies:
  loggerx: ^1.0.0
```

Run `flutter pub get` to install the package.

## Platform-Specific Configuration
### Android
For Android, ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

### iOS
For iOS, no additional configuration is required. Just ensure you have the latest version of Xcode installed.

## Basic Usage
To use LoggerX in your Flutter application, you need to import the package and create an instance of the logger. Here’s how to do it:

```dart
import 'package:loggerx/loggerx.dart';

class RealFlutter {
  final LoggerX logger = LoggerX();

  void logMessages() {
    logger.info("This is an info message");
    logger.warning("This is a warning message");
    logger.error("This is an error message");
  }
}
```

You can call the `logMessages` method to see the logs in the console.

## Advanced Features
LoggerX also supports custom log levels and file logging. Here’s an example of how to set a custom log level:

```dart
logger.setLogLevel(LogLevel.verbose);
```

For file logging, you can configure the logger to write logs to a file:

```dart
logger.enableFileLogging("path/to/logfile.txt");
```

This allows you to keep a persistent record of logs, which can be invaluable for debugging in production.

With these steps, you can effectively set up and use LoggerX in your Flutter applications.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of LoggerX in a Flutter Application

```dart
import 'package:flutter/material.dart';
import 'package:loggerx/loggerx.dart';

class RealFlutter extends StatelessWidget {
  // Create an instance of LoggerX
  final LoggerX logger = LoggerX();

  @override
  Widget build(BuildContext context) {
    // Log an info message when the app starts
    logger.info("App started");

    return MaterialApp(
      title: 'LoggerX Example',
      home: Scaffold(
        appBar: AppBar(
          title: Text('LoggerX Example'),
        ),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              // Log a button press event
              logger.info("Button pressed");
              // Simulate a warning
              logger.warning("This is a warning message");
              // Simulate an error
              logger.error("This is an error message");
            },
            child: Text('Press Me'),
          ),
        ),
      ),
    );
  }
}

void main() {
  runApp(RealFlutter());
}
```

// The above code defines a simple Flutter application that demonstrates the use of LoggerX.
// 1. We import the necessary packages: `flutter/material.dart` for Flutter UI and `loggerx/loggerx.dart` for logging.
// 2. The `RealFlutter` class extends `StatelessWidget`, which is the main widget of the application.
// 3. An instance of `LoggerX` is created to handle logging.
// 4. In the `build` method, we log an info message indicating that the app has started.
// 5. The app consists of a simple `MaterialApp` with an `AppBar` and a centered button.
// 6. When the button is pressed, we log an info message, a warning, and an error message.
// 7. The `main` function runs the `RealFlutter` widget, starting the application.

// This example showcases how to integrate LoggerX into a Flutter app, allowing for effective logging of events and errors.
<!-- END_MAIN -->
```

### Summary
In this blog post, we explored the LoggerX package, its features, and how to set it up in a Flutter application. We provided a complete example demonstrating how to log messages, warnings, and errors effectively. LoggerX is a valuable tool for any Flutter developer looking to enhance their application's logging capabilities, making it easier to debug and monitor performance.
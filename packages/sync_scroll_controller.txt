<-- START_DESCRIPTION -->

# Sync Scroll Controller Flutter Package
=====================================

The `sync_scroll_controller` Flutter package is a utility package that allows you to synchronize the scroll positions of multiple scrollable widgets. This is particularly useful when you have multiple lists or grids that need to be scrolled in sync.

### When to Use This Package

You can use this package in scenarios where you have multiple scrollable widgets that need to be scrolled together. For example:

* When you have a list of items and a corresponding list of details that need to be scrolled together.
* When you have a grid of images and a corresponding list of image descriptions that need to be scrolled together.
* When you have a list of messages and a corresponding list of message timestamps that need to be scrolled together.

### Features

The `sync_scroll_controller` package provides the following features:

* Synchronizes the scroll positions of multiple scrollable widgets.
* Supports both horizontal and vertical scrolling.
* Works with both `ListView` and `GridView` widgets.
* Easy to use and integrate into your existing Flutter app.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Using the Sync Scroll Controller Package
=====================================================

In this tutorial, we will walk through the setup process and explain how to use the `sync_scroll_controller` package.

### Step 1: Add the Package to Your Pubspec File

First, add the `sync_scroll_controller` package to your `pubspec.yaml` file:
```yml
dependencies:
  flutter:
    sdk: flutter
  sync_scroll_controller: ^1.0.0
```
Then, run `flutter pub get` to get the package.

### Step 2: Import the Package

Next, import the `sync_scroll_controller` package in your Dart file:
```dart
import 'package:sync_scroll_controller/sync_scroll_controller.dart';
```
### Step 3: Create a Sync Scroll Controller

Create a `SyncScrollController` instance and pass it to the `ListView` or `GridView` widgets that you want to synchronize:
```dart
SyncScrollController _scrollController = SyncScrollController();

ListView(
  controller: _scrollController,
  children: <Widget>[
    // your widgets here
  ],
)

GridView(
  controller: _scrollController,
  children: <Widget>[
    // your widgets here
  ],
)
```
### Platform-Specific Details

The `sync_scroll_controller` package works on both Android and iOS platforms. However, there are some platform-specific details to note:

* On Android, the `SyncScrollController` uses the `android.widget.OverScroller` class to synchronize the scroll positions.
* On iOS, the `SyncScrollController` uses the `UIScrollView` class to synchronize the scroll positions.

### Required Configurations or Optimizations

There are no required configurations or optimizations needed to use the `sync_scroll_controller` package. However, you may want to consider the following:

* Make sure to dispose of the `SyncScrollController` instance when it is no longer needed to prevent memory leaks.
* Use the `SyncScrollController` instance to synchronize the scroll positions of multiple scrollable widgets.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:sync_scroll_controller/sync_scroll_controller.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Sync Scroll Controller Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  SyncScrollController _scrollController = SyncScrollController();

  @override
  void dispose() {
    _scrollController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Sync Scroll Controller Demo'),
      ),
      body: Column(
        children: <Widget>[
          Expanded(
            child: ListView(
              controller: _scrollController,
              children: <Widget>[
                Container(
                  height: 100,
                  color: Colors.red,
                ),
                Container(
                  height: 100,
                  color: Colors.blue,
                ),
                Container(
                  height: 100,
                  color: Colors.green,
                ),
              ],
            ),
          ),
          Expanded(
            child: GridView(
              controller: _scrollController,
              gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 2,
              ),
              children: <Widget>[
                Container(
                  height: 100,
                  color: Colors.red,
                ),
                Container(
                  height: 100,
                  color: Colors.blue,
                ),
                Container(
                  height: 100,
                  color: Colors.green,
                ),
                Container(
                  height: 100,
                  color: Colors.yellow,
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user scrolls the ListView.
// 2. The SyncScrollController synchronizes the scroll position of the GridView with the ListView.
// 3. The GridView scrolls to the same position as the ListView.
// 4. The user scrolls the GridView.
// 5. The SyncScrollController synchronizes the scroll position of the ListView with the GridView.
// 6. The ListView scrolls to the same position as the GridView.

// In summary, the SyncScrollController synchronizes the scroll positions of the ListView and GridView,
// allowing them to scroll together in sync.
```

<-- END_MAIN -->
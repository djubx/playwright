<-- START_DESCRIPTION -->

# Woosmap Flutter Package Overview
=====================================

The Woosmap Flutter package is a powerful tool for integrating Woosmap's location-based services into your Flutter applications. With this package, you can easily implement features such as geofencing, location tracking, and POI (Point of Interest) search.

### When to Use This Package

This package is ideal for applications that require location-based services, such as:

* Location-based games
* Proximity marketing apps
* Navigation and mapping apps
* IoT (Internet of Things) applications

### Features

The Woosmap Flutter package offers the following features:

* Geofencing: Create and manage geofences to trigger events when a user enters or exits a specific area.
* Location tracking: Track the user's location in real-time.
* POI search: Search for points of interest near a specific location.
* Customizable: Customize the package to fit your specific needs.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Woosmap Flutter Package
==========================================

To use the Woosmap Flutter package, follow these steps:

### Step 1: Add the Package to Your Project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  woosmap_flutter: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:woosmap_flutter/woosmap_flutter.dart';
```
### Step 3: Initialize the Package

Initialize the package with your Woosmap API key:
```dart
WoosmapFlutter.initialize('YOUR_API_KEY');
```
### Platform-Specific Details

#### Android

Add the following lines to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
<uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
```
#### iOS

Add the following lines to your `Info.plist` file:
```xml
<key>NSLocationWhenInUseUsageDescription</key>
<string>This app needs access to location to work properly</string>
<key>NSLocationAlwaysAndWhenInUseUsageDescription</key>
<string>This app needs access to location to work properly</string>
```
### Configurations and Optimizations

You can customize the package to fit your specific needs by using the following methods:

* `WoosmapFlutter.setGeofenceRadius(radius)`: Set the geofence radius.
* `WoosmapFlutter.setLocationUpdateInterval(interval)`: Set the location update interval.
* `WoosmapFlutter.setPOISearchRadius(radius)`: Set the POI search radius.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:woosmap_flutter/woosmap_flutter.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Initialize the Woosmap package
  WoosmapFlutter _woosmapFlutter;

  // Set the geofence radius
  double _geofenceRadius = 1000;

  // Set the location update interval
  int _locationUpdateInterval = 10000;

  // Set the POI search radius
  double _poiSearchRadius = 5000;

  @override
  void initState() {
    super.initState();

    // Initialize the Woosmap package
    _woosmapFlutter = WoosmapFlutter.initialize('YOUR_API_KEY');

    // Set the geofence radius
    _woosmapFlutter.setGeofenceRadius(_geofenceRadius);

    // Set the location update interval
    _woosmapFlutter.setLocationUpdateInterval(_locationUpdateInterval);

    // Set the POI search radius
    _woosmapFlutter.setPOISearchRadius(_poiSearchRadius);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Woosmap Flutter Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            // Create a geofence
            ElevatedButton(
              onPressed: () {
                _woosmapFlutter.createGeofence(
                  'Geofence 1',
                  37.7749,
                  -122.4194,
                  _geofenceRadius,
                );
              },
              child: Text('Create Geofence'),
            ),

            // Start location tracking
            ElevatedButton(
              onPressed: () {
                _woosmapFlutter.startLocationTracking();
              },
              child: Text('Start Location Tracking'),
            ),

            // Search for POIs
            ElevatedButton(
              onPressed: () {
                _woosmapFlutter.searchPOIs(
                  37.7749,
                  -122.4194,
                  _poiSearchRadius,
                );
              },
              child: Text('Search POIs'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user initializes the Woosmap package with their API key.
// 2. The user sets the geofence radius, location update interval, and POI search radius.
// 3. The user creates a geofence by specifying its name, latitude, longitude, and radius.
// 4. The user starts location tracking to receive location updates.
// 5. The user searches for POIs near a specific location by specifying the latitude, longitude, and search radius.
// 6. The Woosmap package returns the search results, which can be displayed on a map or in a list.

// In summary, this example demonstrates how to use the Woosmap Flutter package to create geofences, track locations, and search for POIs.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

Static Shock: A Flutter Package for Static Content
=====================================================

The `static_shock` Flutter package is designed to simplify the process of embedding static content, such as HTML, CSS, and JavaScript files, into your Flutter applications. This package is particularly useful when you need to display web content within your app, but don't want to rely on external URLs or web servers.

Key Features:

*   Embed static HTML, CSS, and JavaScript files into your Flutter app
*   Display web content using the `WebView` widget
*   Supports both Android and iOS platforms
*   Easy to use and configure

When to Use:

*   Displaying static web content, such as help pages or tutorials
*   Embedding HTML-based games or interactive content
*   Creating hybrid apps that combine native and web technologies

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Configuration
------------------------

To use the `static_shock` package, follow these steps:

### Step 1: Add the Package to Your `pubspec.yaml` File

```yml
dependencies:
  flutter:
    sdk: flutter
  static_shock: ^1.0.0
```

### Step 2: Import the Package in Your Dart File

```dart
import 'package:static_shock/static_shock.dart';
```

### Step 3: Create a `WebView` Widget

```dart
WebView(
  initialUrl: 'asset://assets/index.html',
  javascriptMode: JavascriptMode.unrestricted,
)
```

### Step 4: Add Your Static Content to the `assets` Folder

Create a new folder called `assets` in the root of your project, and add your static HTML, CSS, and JavaScript files to it.

### Platform-Specific Details

*   **Android:** Make sure to add the `android.permission.INTERNET` permission to your `AndroidManifest.xml` file.
*   **iOS:** Add the `NSAppTransportSecurity` key to your `Info.plist` file to allow HTTP requests.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:static_shock/static_shock.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Create a new WebView widget
    return WebView(
      // Load the initial URL from the assets folder
      initialUrl: 'asset://assets/index.html',
      // Enable JavaScript execution
      javascriptMode: JavascriptMode.unrestricted,
      // Handle page loading errors
      onPageFinished: (url) {
        print('Page finished loading: $url');
      },
      // Handle page loading errors
      onWebResourceError: (error) {
        print('Error loading page: $error');
      },
    );
  }
}

// The application flow is as follows:
// 1. The user launches the app, and the RealFlutter widget is created.
// 2. The WebView widget is built, and the initial URL is loaded from the assets folder.
// 3. The JavaScript execution is enabled, allowing the web content to interact with the native app.
// 4. The onPageFinished callback is triggered when the page finishes loading, printing a success message to the console.
// 5. The onWebResourceError callback is triggered if there is an error loading the page, printing an error message to the console.

// In summary, this code creates a simple Flutter app that displays web content using the WebView widget.
// The web content is loaded from the assets folder, and JavaScript execution is enabled to allow interaction with the native app.
// The app handles page loading errors and prints success and error messages to the console.
```

<-- END_MAIN -->
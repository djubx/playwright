<-- START_DESCRIPTION -->

# Flutter HTML SVG Package Overview
=====================================

The `flutter_html_svg` package is a powerful tool for rendering HTML and SVG content in Flutter applications. It provides a simple and efficient way to display complex web content, making it an ideal solution for apps that require web-based features.

### Key Features

*   Renders HTML and SVG content with high accuracy
*   Supports various HTML tags, including images, videos, and iframes
*   Handles SVG elements, such as paths, circles, and rectangles
*   Provides customizable styling options for HTML and SVG content
*   Compatible with both Android and iOS platforms

### When to Use

The `flutter_html_svg` package is perfect for apps that need to display web content, such as:

*   News and blog readers
*   Social media apps
*   Web-based games
*   Educational platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the Flutter HTML SVG Package
=====================================================

### Step 1: Add the Package to Your Project

Add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  flutter_html_svg: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:flutter_html_svg/flutter_html_svg.dart';
```

### Step 3: Use the `HtmlSvg` Widget

Use the `HtmlSvg` widget to render HTML and SVG content:

```dart
HtmlSvg(
  data: '<html><body><h1>Hello World!</h1></body></html>',
)
```

### Platform-Specific Details

*   **Android:** No additional setup is required.
*   **iOS:** Add the following line to your `Info.plist` file:

```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```

This allows the app to load web content from any source.

### Optimizations

*   Use the `cache` property to enable caching for frequently loaded content.
*   Use the `onTap` property to handle tap events on links and other interactive elements.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_html_svg/flutter_html_svg.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter HTML SVG Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  String _htmlContent = '<html><body><h1>Hello World!</h1></body></html>';
  String _svgContent = '<svg width="100" height="100"><circle cx="50" cy="50" r="40" fill="blue"/></svg>';

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter HTML SVG Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            // Render HTML content
            HtmlSvg(
              data: _htmlContent,
            ),
            SizedBox(height: 20),
            // Render SVG content
            HtmlSvg(
              data: _svgContent,
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app, and the `MyApp` widget is created.
// 2. The `MyApp` widget builds the `MyHomePage` widget.
// 3. The `MyHomePage` widget creates a scaffold with an app bar and a body.
// 4. The body contains a column with two `HtmlSvg` widgets.
// 5. The first `HtmlSvg` widget renders the HTML content.
// 6. The second `HtmlSvg` widget renders the SVG content.
// 7. The user can view the rendered content on the screen.

// Final summary: This code demonstrates how to use the `flutter_html_svg` package to render HTML and SVG content in a Flutter app. The app displays a scaffold with an app bar and a body containing two `HtmlSvg` widgets, which render the HTML and SVG content respectively.
```

<-- END_MAIN -->
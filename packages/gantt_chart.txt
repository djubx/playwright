```markdown
<!-- START_DESCRIPTION -->
# Gantt Chart Flutter Package

The `gantt_chart` Flutter package is a powerful tool for visualizing project timelines and schedules in a Gantt chart format. Gantt charts are widely used in project management to illustrate the start and finish dates of various elements of a project. This package allows developers to easily integrate Gantt charts into their Flutter applications, providing a clear and interactive way to display project timelines.

## When to Use This Package

You might consider using the `gantt_chart` package in scenarios such as:
- **Project Management Applications**: To visualize project timelines, milestones, and task dependencies.
- **Scheduling Tools**: For applications that require scheduling of tasks or events over time.
- **Resource Allocation**: To manage and display resource allocation across different tasks in a project.

## Features

- **Customizable Appearance**: You can customize the colors, styles, and labels of the Gantt chart to fit your application's theme.
- **Interactive Elements**: Users can interact with the chart, allowing for a more engaging experience.
- **Support for Dependencies**: The package supports displaying task dependencies, making it easier to understand the relationships between tasks.
- **Responsive Design**: The Gantt chart is designed to be responsive, adapting to different screen sizes and orientations.

Overall, the `gantt_chart` package is an excellent choice for developers looking to implement project management features in their Flutter applications.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Gantt Chart Package

## Step 1: Adding the Dependency

To use the `gantt_chart` package, you first need to add it to your `pubspec.yaml` file. Open the file and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  gantt_chart: ^1.0.0  # Check for the latest version on pub.dev
```

## Step 2: Running Flutter Packages Get

After adding the dependency, run the following command in your terminal to install the package:

```bash
flutter pub get
```

## Step 3: Platform-Specific Configuration

### Android

For Android, ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
        ...
    }
}
```

### iOS

For iOS, you may need to set the platform version in your `ios/Podfile`:

```ruby
platform :ios, '10.0'
```

## Step 4: Importing the Package

In your Dart file, import the package:

```dart
import 'package:gantt_chart/gantt_chart.dart';
```

## Step 5: Using the Gantt Chart

You can now use the `GanttChart` widget in your Flutter application. Below is a simple example of how to create a Gantt chart.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Gantt Chart in Flutter

```dart
import 'package:flutter/material.dart';
import 'package:gantt_chart/gantt_chart.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Gantt Chart Example',
      home: GanttChartPage(),
    );
  }
}

class GanttChartPage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Sample data for the Gantt chart
    final List<Task> tasks = [
      Task(
        id: '1',
        name: 'Task 1',
        start: DateTime(2024, 9, 1),
        end: DateTime(2024, 9, 5),
        color: Colors.blue,
      ),
      Task(
        id: '2',
        name: 'Task 2',
        start: DateTime(2024, 9, 3),
        end: DateTime(2024, 9, 10),
        color: Colors.green,
      ),
      Task(
        id: '3',
        name: 'Task 3',
        start: DateTime(2024, 9, 6),
        end: DateTime(2024, 9, 12),
        color: Colors.red,
      ),
    ];

    return Scaffold(
      appBar: AppBar(
        title: Text('Gantt Chart Example'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(8.0),
        child: GanttChart(
          tasks: tasks,
          // Set the height of the Gantt chart
          height: 400,
          // Set the start and end date for the chart
          startDate: DateTime(2024, 9, 1),
          endDate: DateTime(2024, 9, 15),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function starts the application by calling runApp with MyApp.
// 2. MyApp builds a MaterialApp with a title and a home page set to GanttChartPage.
// 3. GanttChartPage builds a Scaffold with an AppBar and a body containing the GanttChart widget.
// 4. The GanttChart widget is populated with a list of tasks, each defined with a start and end date, name, and color.
// 5. The Gantt chart is displayed within the body of the Scaffold, showing the tasks over the specified date range.
```
<!-- END_MAIN -->
``` 

This structured blog provides a comprehensive overview of the `gantt_chart` Flutter package, guiding users through its features, setup, and implementation with a complete example.
<-- START_DESCRIPTION -->

# Connectivity Checker Flutter Package
=====================================

The `connectivity_checker` Flutter package is a utility library that allows developers to check the network connectivity of their app. It provides a simple and efficient way to determine whether the device is connected to the internet or not.

### When to Use

This package is useful in scenarios where your app requires internet connectivity to function properly. For example:

* When making API calls to a server
* When downloading or uploading files
* When checking for updates or notifications

### Features

The `connectivity_checker` package provides the following features:

* Checks whether the device is connected to the internet or not
* Supports both Wi-Fi and mobile data connections
* Works on both Android and iOS platforms
* Provides a simple and easy-to-use API

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `connectivity_checker` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  connectivity_checker: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:connectivity_checker/connectivity_checker.dart';
```
### Step 3: Initialize the Package

Initialize the package in your app's `main` function:
```dart
void main() {
  ConnectivityChecker.initialize();
  runApp(MyApp());
}
```
### Platform-Specific Details

#### Android

On Android, the package uses the `ConnectivityManager` class to check for network connectivity. Make sure to add the following permission to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
```
#### iOS

On iOS, the package uses the `SCNetworkReachability` class to check for network connectivity. Make sure to add the following line to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:connectivity_checker/connectivity_checker.dart';

void main() {
  ConnectivityChecker.initialize();
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  bool _isConnected = false;

  @override
  void initState() {
    super.initState();
    _checkConnectivity();
  }

  Future<void> _checkConnectivity() async {
    // Check if the device is connected to the internet
    bool isConnected = await ConnectivityChecker.isConnected();
    setState(() {
      _isConnected = isConnected;
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Connectivity Checker Demo'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Text(
                _isConnected ? 'You are connected to the internet' : 'You are not connected to the internet',
                style: TextStyle(fontSize: 24),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _checkConnectivity,
                child: Text('Check Connectivity'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The app starts by initializing the ConnectivityChecker package in the main function.
// The RealFlutter widget is a stateful widget that checks for network connectivity in its initState method.
// The _checkConnectivity function uses the ConnectivityChecker package to check if the device is connected to the internet.
// The result is then displayed on the screen, and a button is provided to check the connectivity again.
// When the button is pressed, the _checkConnectivity function is called again, and the result is updated on the screen.

// In summary, the app checks for network connectivity when it starts, and provides a button to check the connectivity again.
// The result is displayed on the screen, and the app updates the result in real-time when the connectivity changes.
```

<-- END_MAIN -->
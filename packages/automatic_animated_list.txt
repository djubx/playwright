<-- START_DESCRIPTION -->

# Automatic Animated List Flutter Package
=============================================

The `automatic_animated_list` Flutter package is a powerful tool for creating animated lists that automatically handle item insertion, deletion, and updating. This package is ideal for applications that require dynamic list management, such as to-do lists, chat apps, or social media feeds.

### Key Features

*   Automatic animation of item insertion, deletion, and updating
*   Support for custom animation curves and durations
*   Easy integration with existing Flutter projects
*   Platform-agnostic, with support for both Android and iOS

### When to Use This Package

*   When you need to create a dynamic list that updates in real-time
*   When you want to add animations to your list to enhance the user experience
*   When you need a simple and efficient solution for managing list data

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Automatic Animated List Package
================================================================

### Step 1: Add the Package to Your Project

To use the `automatic_animated_list` package, you'll need to add it to your project's `pubspec.yaml` file. Open the file and add the following line under the `dependencies` section:

```yml
dependencies:
  flutter:
    sdk: flutter
  automatic_animated_list: ^1.0.0
```

Then, run `flutter pub get` in your terminal to install the package.

### Step 2: Import the Package

In your Dart file, import the package using the following line:

```dart
import 'package:automatic_animated_list/automatic_animated_list.dart';
```

### Step 3: Create an Animated List

To create an animated list, you'll need to use the `AnimatedList` widget provided by the package. Here's a basic example:

```dart
class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final List<String> _items = [];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Animated List Example'),
      ),
      body: AnimatedList(
        initialItemCount: _items.length,
        itemBuilder: (context, index, animation) {
          return SizeTransition(
            sizeFactor: animation,
            child: ListTile(
              title: Text(_items[index]),
            ),
          );
        },
      ),
    );
  }
}
```

### Step 4: Add Items to the List

To add items to the list, you can use the `insertItem` method provided by the `AnimatedListState` class. Here's an example:

```dart
class _RealFlutterState extends State<RealFlutter> {
  final List<String> _items = [];
  final AnimatedListState _listState = AnimatedListState();

  void _addItem() {
    _items.add('New Item');
    _listState.insertItem(_items.length - 1);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Animated List Example'),
      ),
      body: AnimatedList(
        key: _listState,
        initialItemCount: _items.length,
        itemBuilder: (context, index, animation) {
          return SizeTransition(
            sizeFactor: animation,
            child: ListTile(
              title: Text(_items[index]),
            ),
          );
        },
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _addItem,
        tooltip: 'Add Item',
        child: Icon(Icons.add),
      ),
    );
  }
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:automatic_animated_list/automatic_animated_list.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final List<String> _items = [];
  final AnimatedListState _listState = AnimatedListState();

  void _addItem() {
    // Add a new item to the list
    _items.add('New Item');
    // Insert the item into the animated list
    _listState.insertItem(_items.length - 1);
  }

  void _removeItem() {
    // Check if the list is not empty
    if (_items.length > 0) {
      // Remove the last item from the list
      _items.removeAt(_items.length - 1);
      // Remove the item from the animated list
      _listState.removeItem(_items.length, (context, animation) {
        return SizeTransition(
          sizeFactor: animation,
          child: ListTile(
            title: Text('Removed Item'),
          ),
        );
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Animated List Example'),
      ),
      body: AnimatedList(
        key: _listState,
        initialItemCount: _items.length,
        itemBuilder: (context, index, animation) {
          // Return a size transition widget
          return SizeTransition(
            sizeFactor: animation,
            child: ListTile(
              title: Text(_items[index]),
            ),
          );
        },
      ),
      floatingActionButton: Row(
        mainAxisAlignment: MainAxisAlignment.end,
        children: [
          FloatingActionButton(
            onPressed: _removeItem,
            tooltip: 'Remove Item',
            child: Icon(Icons.remove),
          ),
          SizedBox(width: 10),
          FloatingActionButton(
            onPressed: _addItem,
            tooltip: 'Add Item',
            child: Icon(Icons.add),
          ),
        ],
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and sees an empty list.
// 2. The user clicks the add button to add a new item to the list.
// 3. The item is added to the list and the animated list is updated.
// 4. The user can continue adding items to the list.
// 5. The user can also remove items from the list by clicking the remove button.
// 6. The removed item is animated out of the list.
```

<-- END_MAIN -->
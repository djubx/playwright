<-- START_DESCRIPTION -->

# Day Night Theme Flutter Package
=====================================

The `day_night_theme_flutter` package is a Flutter theme package that allows you to easily switch between day and night themes in your app. It provides a simple and efficient way to manage themes and customize the look and feel of your app.

### When to Use This Package

This package is useful when you want to provide a day and night theme option to your users. It's also useful when you want to customize the look and feel of your app based on the time of day or the user's preference.

### Features

*   Easy theme switching: Switch between day and night themes with a single line of code.
*   Customizable themes: Customize the look and feel of your app by creating your own themes.
*   Automatic theme switching: Automatically switch between day and night themes based on the time of day.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

### Setup

To use the `day_night_theme_flutter` package, you need to add it to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  day_night_theme_flutter: ^1.0.0
```

Then, run `flutter pub get` to get the package.

### Usage

To use the package, you need to wrap your app with the `DayNightTheme` widget:

```dart
import 'package:flutter/material.dart';
import 'package:day_night_theme_flutter/day_night_theme_flutter.dart';

void main() {
  runApp(
    DayNightTheme(
      child: MyApp(),
    ),
  );
}
```

To switch between day and night themes, you can use the `DayNightTheme.of(context).switchTheme()` method:

```dart
import 'package:flutter/material.dart';
import 'package:day_night_theme_flutter/day_night_theme_flutter.dart';

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Day Night Theme Demo'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            DayNightTheme.of(context).switchTheme();
          },
          child: Text('Switch Theme'),
        ),
      ),
    );
  }
}
```

### Platform-Specific Details

The package uses the `dart:ui` library to get the current time and switch between day and night themes. This means that the package will work on both Android and iOS platforms.

### Required Configurations or Optimizations

There are no required configurations or optimizations needed to use the package. However, you can customize the look and feel of your app by creating your own themes.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:day_night_theme_flutter/day_night_theme_flutter.dart';

void main() {
  runApp(
    DayNightTheme(
      child: RealFlutter(),
    ),
  );
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Get the current theme
    final theme = DayNightTheme.of(context);

    // Return a Scaffold with a AppBar and a body
    return Scaffold(
      appBar: AppBar(
        title: Text('Day Night Theme Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            // Display the current theme
            Text('Current Theme: ${theme.currentTheme}'),

            // Add a button to switch between day and night themes
            ElevatedButton(
              onPressed: () {
                // Switch the theme
                theme.switchTheme();
              },
              child: Text('Switch Theme'),
            ),
          ],
        ),
      ),
    );
  }
}

// The app flow is as follows:
// 1. The user opens the app and the `DayNightTheme` widget is initialized.
// 2. The `DayNightTheme` widget gets the current time and sets the theme accordingly.
// 3. The user can switch between day and night themes by pressing the "Switch Theme" button.
// 4. When the user switches the theme, the `DayNightTheme` widget updates the theme and rebuilds the app.
// 5. The app is rebuilt with the new theme and the user can see the changes.

// In summary, the app uses the `DayNightTheme` widget to manage the theme and provide a way for the user to switch between day and night themes.
```

<-- END_MAIN -->
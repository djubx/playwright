<-- START_DESCRIPTION -->

# Flutter Fullscreen Package Overview
=====================================

The `flutter_fullscreen` package provides a simple and efficient way to enable fullscreen mode in Flutter applications. This package is ideal for applications that require an immersive experience, such as games, video players, or interactive stories.

### Key Features

*   Enables fullscreen mode on both Android and iOS platforms
*   Supports toggling fullscreen mode on and off
*   Easy integration with existing Flutter projects

### When to Use This Package

Use the `flutter_fullscreen` package when you need to create an immersive experience for your users. This can include:

*   Games that require a fullscreen environment
*   Video players that need to display content in fullscreen mode
*   Interactive stories or presentations that benefit from a fullscreen experience

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the Flutter Fullscreen Package
=====================================================

### Step 1: Add the Package to Your Project

To use the `flutter_fullscreen` package, you need to add it to your project's `pubspec.yaml` file. Open the file and add the following line under the `dependencies` section:

```yml
dependencies:
  flutter:
    sdk: flutter
  flutter_fullscreen: ^1.0.0
```

Then, run `flutter pub get` in your terminal to install the package.

### Step 2: Import the Package

In your Dart file, import the `flutter_fullscreen` package:

```dart
import 'package:flutter_fullscreen/flutter_fullscreen.dart';
```

### Step 3: Enable Fullscreen Mode

To enable fullscreen mode, use the `enterFullScreen` method:

```dart
await FlutterFullscreen.enterFullScreen();
```

### Step 4: Exit Fullscreen Mode

To exit fullscreen mode, use the `exitFullScreen` method:

```dart
await FlutterFullscreen.exitFullScreen();
```

### Platform-Specific Details

*   **Android:** The `flutter_fullscreen` package uses the Android `immersive` mode to enable fullscreen. This means that the navigation and status bars will be hidden, and the app will take up the entire screen.
*   **iOS:** On iOS, the package uses the `UIStatusBar` and `UINavigationController` to hide the status and navigation bars, respectively.

### Required Configurations or Optimizations

*   Make sure to handle the app's orientation correctly when using fullscreen mode. You can use the `SystemChrome` class to set the app's orientation.
*   If you're using a `Scaffold` widget, make sure to set the `extendBody` property to `true` to ensure that the app's body extends to the edges of the screen.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_fullscreen/flutter_fullscreen.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Fullscreen Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  bool _isFullScreen = false;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      extendBody: true, // Extend the body to the edges of the screen
      appBar: AppBar(
        title: Text('Flutter Fullscreen Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              _isFullScreen ? 'You are in fullscreen mode' : 'You are not in fullscreen mode',
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () async {
                if (_isFullScreen) {
                  await FlutterFullscreen.exitFullScreen();
                } else {
                  await FlutterFullscreen.enterFullScreen();
                }
                setState(() {
                  _isFullScreen = !_isFullScreen;
                });
              },
              child: Text(_isFullScreen ? 'Exit Fullscreen' : 'Enter Fullscreen'),
            ),
          ],
        ),
      ),
    );
  }
}

// The app starts in a non-fullscreen mode.
// When the user clicks the "Enter Fullscreen" button, the app enters fullscreen mode.
// The app's body extends to the edges of the screen, and the navigation and status bars are hidden.
// When the user clicks the "Exit Fullscreen" button, the app exits fullscreen mode and returns to its original state.
// The app's orientation is handled correctly when using fullscreen mode.
```

<-- END_MAIN -->
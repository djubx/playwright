```markdown
<!-- START_DESCRIPTION -->
# Multi Value Listenable Builder Flutter Package

The `multi_value_listenable_builder` package is a powerful tool in Flutter that allows developers to listen to multiple `ValueNotifier` instances and rebuild widgets when any of the values change. This package is particularly useful in scenarios where you have multiple pieces of state that need to be observed and reacted to in a single widget tree.

## When to Use This Package

You might consider using `multi_value_listenable_builder` in the following scenarios:

- **Complex State Management**: When your widget depends on multiple state variables, and you want to avoid the boilerplate of managing each state separately.
- **Performance Optimization**: By using this package, you can optimize rebuilds, ensuring that only the necessary parts of your widget tree are rebuilt when state changes.
- **Simplified Code**: It reduces the complexity of your code by allowing you to manage multiple `ValueNotifier` instances in a clean and concise manner.

## Features

- **Multiple Listeners**: Listen to multiple `ValueNotifier` instances simultaneously.
- **Efficient Rebuilds**: Only rebuilds the widget when one of the listened values changes.
- **Easy Integration**: Simple to integrate into existing Flutter applications.

Overall, `multi_value_listenable_builder` enhances the way Flutter developers manage state, making it easier to create responsive and efficient applications.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Multi Value Listenable Builder

## Step 1: Adding the Dependency

To get started, you need to add the `multi_value_listenable_builder` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  multi_value_listenable_builder: ^1.0.0 # Check for the latest version on pub.dev
```

## Step 2: Importing the Package

In your Dart file, import the package:

```dart
import 'package:multi_value_listenable_builder/multi_value_listenable_builder.dart';
```

## Step 3: Setting Up ValueNotifiers

You can create multiple `ValueNotifier` instances that will hold the state you want to listen to. For example:

```dart
ValueNotifier<int> counter1 = ValueNotifier<int>(0);
ValueNotifier<int> counter2 = ValueNotifier<int>(0);
```

## Step 4: Using MultiValueListenableBuilder

Wrap your widget with `MultiValueListenableBuilder` to listen to the `ValueNotifiers`:

```dart
MultiValueListenableBuilder(
  valueListenables: [counter1, counter2],
  builder: (context, values, child) {
    return Text('Counter 1: ${values[0]}, Counter 2: ${values[1]}');
  },
)
```

## Platform-Specific Details

### Android

Ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

### iOS

For iOS, ensure that your deployment target is set to at least 10.0 in your `ios/Podfile`:

```ruby
platform :ios, '10.0'
```

## Step 5: Running the Application

After setting everything up, you can run your application using:

```bash
flutter run
```

This will launch your Flutter application, and you should see the widget updating as the `ValueNotifier` values change.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Multi Value Listenable Builder

```dart
import 'package:flutter/material.dart';
import 'package:multi_value_listenable_builder/multi_value_listenable_builder.dart';

// Main function to run the app
void main() {
  runApp(MyApp());
}

// MyApp widget which is the root of the application
class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Multi Value Listenable Builder Example',
      home: HomeScreen(),
    );
  }
}

// HomeScreen widget where the main functionality resides
class HomeScreen extends StatelessWidget {
  // Creating two ValueNotifiers to hold integer values
  final ValueNotifier<int> counter1 = ValueNotifier<int>(0);
  final ValueNotifier<int> counter2 = ValueNotifier<int>(0);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Multi Value Listenable Builder'),
      ),
      body: Center(
        child: MultiValueListenableBuilder(
          // Listening to both ValueNotifiers
          valueListenables: [counter1, counter2],
          builder: (context, values, child) {
            // Displaying the current values of both counters
            return Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: [
                Text('Counter 1: ${values[0]}'),
                Text('Counter 2: ${values[1]}'),
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    ElevatedButton(
                      onPressed: () {
                        // Incrementing counter1
                        counter1.value++;
                      },
                      child: Text('Increment Counter 1'),
                    ),
                    SizedBox(width: 20),
                    ElevatedButton(
                      onPressed: () {
                        // Incrementing counter2
                        counter2.value++;
                      },
                      child: Text('Increment Counter 2'),
                    ),
                  ],
                ),
              ],
            );
          },
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The app starts with the main function, which runs MyApp.
// 2. MyApp builds a MaterialApp with a HomeScreen as its home widget.
// 3. HomeScreen initializes two ValueNotifiers, counter1 and counter2.
// 4. The MultiValueListenableBuilder listens to both counters.
// 5. When either button is pressed, the corresponding counter is incremented.
// 6. The UI updates automatically to reflect the new values of counter1 and counter2.
```

<!-- END_MAIN -->
```

This structured blog provides a comprehensive overview of the `multi_value_listenable_builder` package, including its description, a tutorial for setup and usage, and a complete example with detailed comments explaining the application flow.
<-- START_DESCRIPTION -->

# Device Manager Flutter Package
=====================================

The `device_manager` Flutter package provides a simple and efficient way to manage device-related tasks, such as device information, network connectivity, and storage permissions. This package is ideal for developers who want to focus on building their app's core features without worrying about the complexities of device management.

### When to Use This Package

* When you need to retrieve device information, such as device ID, model, or operating system version.
* When you need to check network connectivity or monitor network changes.
* When you need to request storage permissions or manage storage-related tasks.

### Features

* Device information: Retrieve device ID, model, operating system version, and more.
* Network connectivity: Check network connectivity and monitor network changes.
* Storage permissions: Request storage permissions and manage storage-related tasks.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
---------------------------

To use the `device_manager` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  device_manager: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:device_manager/device_manager.dart';
```
### Step 3: Initialize the Package

Initialize the package in your app's `main` function:
```dart
void main() {
  runApp(MyApp());
  DeviceManager.init();
}
```
### Platform-Specific Details

#### Android

* Add the following permissions to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
```
#### iOS

* Add the following lines to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```
### Required Configurations

* Make sure to handle storage permissions requests in your app.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:device_manager/device_manager.dart';

void main() {
  runApp(MyApp());
  DeviceManager.init();
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Device Manager Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  String _deviceId = '';
  String _deviceModel = '';
  String _osVersion = '';
  bool _isConnected = false;

  @override
  void initState() {
    super.initState();
    _getDeviceInfo();
    _checkNetworkConnectivity();
  }

  Future<void> _getDeviceInfo() async {
    final deviceInfo = await DeviceManager.getDeviceInfo();
    setState(() {
      _deviceId = deviceInfo.deviceId;
      _deviceModel = deviceInfo.deviceModel;
      _osVersion = deviceInfo.osVersion;
    });
  }

  Future<void> _checkNetworkConnectivity() async {
    final isConnected = await DeviceManager.isNetworkConnected();
    setState(() {
      _isConnected = isConnected;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Device Manager Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text('Device ID: $_deviceId'),
            Text('Device Model: $_deviceModel'),
            Text('OS Version: $_osVersion'),
            Text('Is Connected: $_isConnected'),
          ],
        ),
      ),
    );
  }
}
```

// The app starts by initializing the DeviceManager package in the main function.
// The MyApp widget is then built, which contains the MyHomePage widget.
// The MyHomePage widget retrieves device information and checks network connectivity in its initState method.
// The device information and network connectivity status are then displayed on the screen.
// The app uses the DeviceManager package to handle device-related tasks, making it easy to manage device information and network connectivity.

<-- END_MAIN -->
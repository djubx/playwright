<-- START_DESCRIPTION -->

Stack Blur Flutter Package
==========================

The `stack_blur` Flutter package is a lightweight library that provides an efficient way to blur images in Flutter applications. It uses a stack-based approach to apply a blur effect to images, making it a great option for developers who need to blur images in their apps.

When to Use
------------

The `stack_blur` package is perfect for scenarios where you need to blur images in your Flutter app, such as:

* Creating a blurred background image for a login screen
* Applying a blur effect to a profile picture
* Blurring sensitive information in an image

Features
--------

The `stack_blur` package comes with the following features:

* Efficient blur algorithm that uses a stack-based approach
* Supports both Android and iOS platforms
* Easy to use and integrate into your Flutter app

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
----------------

To use the `stack_blur` package in your Flutter app, follow these steps:

### Step 1: Add the package to your pubspec.yaml file

```yml
dependencies:
  flutter:
    sdk: flutter
  stack_blur: ^1.0.0
```

### Step 2: Import the package in your Dart file

```dart
import 'package:stack_blur/stack_blur.dart';
```

### Step 3: Use the `StackBlur` widget to blur an image

```dart
StackBlur(
  image: AssetImage('assets/image.jpg'),
  blur: 10,
  child: Container(
    width: 200,
    height: 200,
  ),
)
```

Platform-Specific Details
-------------------------

### Android

* Make sure to add the `android.permission.WRITE_EXTERNAL_STORAGE` permission to your AndroidManifest.xml file if you plan to save the blurred image to the device's external storage.

### iOS

* Make sure to add the `NSPhotoLibraryUsageDescription` key to your Info.plist file if you plan to access the device's photo library.

Configurations and Optimizations
---------------------------------

* You can adjust the `blur` property to control the level of blur applied to the image. A higher value will result in a more blurred image.
* You can also use the `color` property to change the color of the blurred image.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:stack_blur/stack_blur.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Stack Blur Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Stack Blur Demo'),
      ),
      body: Center(
        child: StackBlur(
          image: AssetImage('assets/image.jpg'),
          blur: 10,
          child: Container(
            width: 200,
            height: 200,
          ),
        ),
      ),
    );
  }
}
```

// This is the main entry point of the app. It runs the MyApp widget.
// The MyApp widget builds a MaterialApp with a title and a theme.
// The home property is set to MyHomePage, which is a stateful widget.
// The MyHomePage widget builds a Scaffold with an AppBar and a body.
// The body is a Center widget that contains a StackBlur widget.
// The StackBlur widget takes an image and a blur value as properties.
// It applies the blur effect to the image and displays it in the Container widget.
// The Container widget is used to set the width and height of the blurred image.

// In summary, this code creates a Flutter app that displays a blurred image using the StackBlur widget.
// The image is loaded from the assets folder and blurred using the StackBlur algorithm.
// The blurred image is then displayed in a Container widget with a set width and height.

<-- END_MAIN -->
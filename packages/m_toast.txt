```markdown
<-- START_DESCRIPTION -->

# Overview of the `m_toast` Flutter Package

The `m_toast` Flutter package is a versatile and lightweight library designed to display customizable toast messages in Flutter applications. Toast messages are short, non-intrusive notifications that appear on the screen to provide feedback to the user. They are typically used to inform users of the success or failure of an operation, or to provide brief information without requiring user interaction.

## When to Use `m_toast`

- **User Feedback**: Display success, error, or informational messages after user actions.
- **Notifications**: Alert users about background tasks or updates.
- **Debugging**: Quickly show debug messages during development.

## Features

- **Customizable Appearance**: Modify the color, duration, position, and text style of the toast.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS.
- **Ease of Use**: Simple API that integrates easily into any Flutter project.
- **Lightweight**: Minimal impact on app performance.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using `m_toast` in Your Flutter Project

In this tutorial, we will walk through the process of setting up the `m_toast` package in a Flutter project and demonstrate how to use its features effectively.

## Setup Process

1. **Add Dependency**

   First, add the `m_toast` package to your `pubspec.yaml` file:

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     m_toast: ^1.0.0
   ```

2. **Install the Package**

   Run the following command to install the package:

   ```bash
   flutter pub get
   ```

3. **Import the Package**

   Import `m_toast` in your Dart file where you want to use it:

   ```dart
   import 'package:m_toast/m_toast.dart';
   ```

## Platform-Specific Details

### Android

- Ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 16:

  ```gradle
  defaultConfig {
      minSdkVersion 16
  }
  ```

### iOS

- No additional setup is required for iOS. Ensure your project is using the latest version of Flutter and Xcode.

## Using `m_toast`

To display a toast message, use the `RealFlutter` class provided by the package. Here is a basic example:

```dart
RealFlutter.showToast(
  msg: "Hello, World!",
  duration: ToastDuration.short,
  position: ToastPosition.bottom,
  backgroundColor: Colors.black,
  textColor: Colors.white,
);
```

- **msg**: The message to display.
- **duration**: Duration of the toast (`ToastDuration.short` or `ToastDuration.long`).
- **position**: Position on the screen (`ToastPosition.top`, `ToastPosition.center`, `ToastPosition.bottom`).
- **backgroundColor**: Background color of the toast.
- **textColor**: Text color of the toast.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:m_toast/m_toast.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'm_toast Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatelessWidget {
  void _showToast(BuildContext context) {
    // Display a toast message using the RealFlutter class
    RealFlutter.showToast(
      msg: "This is a toast message!",
      duration: ToastDuration.short, // Set the duration of the toast
      position: ToastPosition.bottom, // Set the position of the toast
      backgroundColor: Colors.black, // Set the background color of the toast
      textColor: Colors.white, // Set the text color of the toast
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('m_toast Example'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () => _showToast(context), // Call _showToast when button is pressed
          child: Text('Show Toast'),
        ),
      ),
    );
  }
}

// Application Flow:
// 1. The app starts with the `MyApp` widget, which sets up the MaterialApp.
// 2. `MyHomePage` is the home screen, displaying a button in the center.
// 3. When the button is pressed, `_showToast` is called.
// 4. `_showToast` uses the `RealFlutter.showToast` method to display a toast message at the bottom of the screen.
// 5. The toast appears with the specified message, duration, position, background color, and text color.
```

<-- END_MAIN -->
```
<-- START_DESCRIPTION -->

# Cool Nav Package Overview
The `cool_nav` Flutter package is a navigation library that provides a simple and elegant way to manage navigation in your Flutter app. It allows you to define a navigation graph and navigate between screens with ease.

## When to Use
Use `cool_nav` when you need to manage complex navigation flows in your app, such as:

* Handling multiple navigation stacks
* Implementing bottom navigation bars
* Creating custom navigation animations

## Features

* Simple and intuitive API
* Supports multiple navigation stacks
* Customizable navigation animations
* Compatible with both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up Cool Nav
To use `cool_nav` in your Flutter project, follow these steps:

1. Add the `cool_nav` package to your `pubspec.yaml` file:
```yml
dependencies:
  cool_nav: ^1.0.0
```
2. Run `flutter pub get` to install the package.
3. Import the `cool_nav` package in your Dart file:
```dart
import 'package:cool_nav/cool_nav.dart';
```
4. Create a `CoolNav` instance and define your navigation graph:
```dart
CoolNav nav = CoolNav(
  routes: {
    '/': (context) => HomeScreen(),
    '/settings': (context) => SettingsScreen(),
  },
);
```
5. Use the `nav.push` method to navigate between screens:
```dart
nav.push('/settings');
```
6. To customize the navigation animation, use the `nav.push` method with the `animation` parameter:
```dart
nav.push('/settings', animation: CoolNavAnimation.fade);
```
### Platform-Specific Details

* On Android, you need to add the following code to your `AndroidManifest.xml` file:
```xml
<application
  ...
  android:hardwareAccelerated="true"
  ...
>
```
* On iOS, you need to add the following code to your `Info.plist` file:
```xml
<key>UIViewControllerBasedStatusBarAppearance</key>
<false/>
```
### Optimizations

* To improve performance, you can use the `nav.preload` method to preload screens:
```dart
nav.preload('/settings');
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:cool_nav/cool_nav.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Cool Nav Demo',
      home: CoolNavDemo(),
    );
  }
}

class CoolNavDemo extends StatefulWidget {
  @override
  _CoolNavDemoState createState() => _CoolNavDemoState();
}

class _CoolNavDemoState extends State<CoolNavDemo> {
  CoolNav nav;

  @override
  void initState() {
    super.initState();
    nav = CoolNav(
      routes: {
        '/': (context) => HomeScreen(),
        '/settings': (context) => SettingsScreen(),
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: nav.widget,
      bottomNavigationBar: BottomNavigationBar(
        items: [
          BottomNavigationBarItem(icon: Icon(Icons.home), label: 'Home'),
          BottomNavigationBarItem(icon: Icon(Icons.settings), label: 'Settings'),
        ],
        onTap: (index) {
          if (index == 0) {
            nav.push('/');
          } else if (index == 1) {
            nav.push('/settings');
          }
        },
      ),
    );
  }
}

class HomeScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Home Screen'),
      ),
      body: Center(
        child: Text('Welcome to the home screen!'),
      ),
    );
  }
}

class SettingsScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Settings Screen'),
      ),
      body: Center(
        child: Text('Welcome to the settings screen!'),
      ),
    );
  }
}
```

// The application flow starts with the `RealFlutter` widget, which is the main entry point of the app.
// The `RealFlutter` widget builds a `MaterialApp` widget, which is the top-level widget for the app.
// The `MaterialApp` widget has a `title` property, which is set to 'Cool Nav Demo'.
// The `home` property of the `MaterialApp` widget is set to the `CoolNavDemo` widget.
// The `CoolNavDemo` widget is a stateful widget that builds a `Scaffold` widget.
// The `Scaffold` widget has a `body` property, which is set to the `nav.widget` property.
// The `nav.widget` property is a `CoolNav` widget that defines the navigation graph for the app.
// The `CoolNav` widget has a `routes` property, which is a map of routes to widgets.
// The `routes` map has two entries: one for the '/' route and one for the '/settings' route.
// The '/' route is mapped to the `HomeScreen` widget, and the '/settings' route is mapped to the `SettingsScreen` widget.
// The `CoolNavDemo` widget also has a `bottomNavigationBar` property, which is set to a `BottomNavigationBar` widget.
// The `BottomNavigationBar` widget has two items: one for the home screen and one for the settings screen.
// When the user taps on an item in the bottom navigation bar, the `onTap` callback is called.
// The `onTap` callback checks the index of the item that was tapped and pushes the corresponding route onto the navigation stack.
// When the user navigates to a new screen, the `CoolNav` widget updates the `body` property of the `Scaffold` widget to display the new screen.

<-- END_MAIN -->
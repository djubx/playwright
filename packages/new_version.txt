<-- START_DESCRIPTION -->

# New Version Flutter Package
================================

The `new_version` Flutter package is a simple and efficient way to handle version updates for your Flutter app. It provides a straightforward API to check for new versions of your app and prompt users to update.

### When to Use This Package

This package is ideal for apps that require frequent updates, such as:

* Apps with constantly changing content or features
* Apps that require security patches or bug fixes
* Apps that need to stay up-to-date with the latest platform or library versions

### Features

* Simple and easy-to-use API
* Supports both Android and iOS platforms
* Customizable update prompts and dialogs
* Ability to check for updates in the background or on-demand

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the New Version Package
=====================================

To use the `new_version` package, follow these steps:

### Step 1: Add the Package to Your Pubspec

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  new_version: ^0.0.1
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:new_version/new_version.dart';
```
### Step 3: Initialize the Package

Initialize the package in your app's `main` function:
```dart
void main() async {
  await NewVersion.initialize();
  runApp(MyApp());
}
```
### Step 4: Check for Updates

Use the `checkVersion` method to check for updates:
```dart
NewVersion.checkVersion().then((version) {
  if (version != null) {
    // Show update dialog or prompt
  }
});
```
### Platform-Specific Details

* Android: Make sure to add the `android.permission.INTERNET` permission to your `AndroidManifest.xml` file.
* iOS: No additional setup required.

### Configurations and Optimizations

* You can customize the update dialog and prompt using the `NewVersion` class properties.
* You can also use the `checkVersion` method with a `timeout` parameter to set a timeout for the version check.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:new_version/new_version.dart';

void main() async {
  await NewVersion.initialize();
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Real Flutter',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Real Flutter'),
        ),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              NewVersion.checkVersion().then((version) {
                if (version != null) {
                  // Show update dialog or prompt
                  showDialog(
                    context: context,
                    builder: (BuildContext context) {
                      return AlertDialog(
                        title: Text('Update Available'),
                        content: Text('A new version of the app is available. Would you like to update?'),
                        actions: [
                          TextButton(
                            onPressed: () {
                              // Update the app
                              NewVersion.updateApp();
                            },
                            child: Text('Update'),
                          ),
                          TextButton(
                            onPressed: () {
                              // Cancel the update
                              Navigator.of(context).pop();
                            },
                            child: Text('Cancel'),
                          ),
                        ],
                      );
                    },
                  );
                }
              });
            },
            child: Text('Check for Updates'),
          ),
        ),
      ),
    );
  }
}

// The app starts by initializing the NewVersion package.
// Then, it builds a simple Material app with a button to check for updates.
// When the button is pressed, it checks for updates using the NewVersion package.
// If an update is available, it shows a dialog prompt to update the app.
// If the user chooses to update, it updates the app using the NewVersion package.

// This code demonstrates the basic usage of the NewVersion package.
// It shows how to initialize the package, check for updates, and update the app.
// It also shows how to customize the update dialog and prompt.
```

<-- END_MAIN -->
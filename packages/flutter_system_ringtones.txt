<-- START_DESCRIPTION -->

# Flutter System Ringtones Package
=====================================

The `flutter_system_ringtones` package is a Flutter plugin that allows you to play system ringtones on Android and iOS devices. This package is useful when you want to alert the user with a familiar sound, such as when receiving a notification or completing a task.

### Features

* Play system ringtones on Android and iOS devices
* Choose from a variety of built-in ringtones
* Customize the ringtone volume
* Supports playing ringtones in the background

### When to Use

* When you want to alert the user with a familiar sound
* When you want to provide a customizable notification sound
* When you want to enhance the user experience with audio feedback

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
=====================

### Step 1: Add the Package to Your Project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_system_ringtones: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:flutter_system_ringtones/flutter_system_ringtones.dart';
```
### Step 3: Play a Ringtone

Play a ringtone using the `playRingtone` method:
```dart
FlutterSystemRingtones.playRingtone(
  ringtone: RingtoneType.notification,
  volume: 1.0,
);
```
### Platform-Specific Details

* On Android, the `playRingtone` method uses the `RingtoneManager` class to play the ringtone.
* On iOS, the `playRingtone` method uses the `AVAudioPlayer` class to play the ringtone.

### Required Configurations

* On Android, add the following permission to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
```
* On iOS, add the following line to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_system_ringtones/flutter_system_ringtones.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter System Ringtones Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  // Step 1: Create a FlutterSystemRingtones instance
  final FlutterSystemRingtones _ringtones = FlutterSystemRingtones();

  // Step 2: Define a callback function to play the ringtone
  void _playRingtone() {
    // Step 3: Play the ringtone using the playRingtone method
    _ringtones.playRingtone(
      ringtone: RingtoneType.notification,
      volume: 1.0,
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter System Ringtones Demo'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: _playRingtone,
          child: Text('Play Ringtone'),
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user presses the "Play Ringtone" button.
// 2. The _playRingtone function is called.
// 3. The playRingtone method is called with the notification ringtone type and maximum volume.
// 4. The ringtone is played using the device's audio system.
// 5. The user hears the ringtone.
```

// Summary: This code demonstrates how to use the Flutter System Ringtones package to play a ringtone on a device. The user presses a button to trigger the ringtone playback, and the package handles the audio playback using the device's audio system.

<-- END_MAIN -->
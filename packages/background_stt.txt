```markdown
<!-- START_DESCRIPTION -->
# Background STT: A Flutter Package for Background Speech Recognition

The `background_stt` package is a powerful tool for Flutter developers looking to implement speech-to-text functionality that operates in the background. This package is particularly useful for applications that require continuous voice recognition without interrupting the user experience, such as voice assistants, transcription services, or accessibility tools.

## When to Use This Package
- **Voice Assistants**: Create applications that respond to voice commands even when the app is not in the foreground.
- **Transcription Services**: Record and transcribe audio in real-time for meetings, lectures, or interviews.
- **Accessibility Tools**: Assist users with disabilities by providing voice recognition capabilities that can be used in various contexts.

## Key Features
- **Background Speech Recognition**: Allows speech recognition to continue even when the app is not actively being used.
- **Platform Support**: Works on both Android and iOS, providing a consistent API across platforms.
- **Customizable Settings**: Offers options to adjust the recognition language and other parameters to suit specific needs.
- **Real-time Transcription**: Provides immediate feedback as speech is recognized, enhancing user interaction.

Overall, the `background_stt` package is an excellent choice for developers looking to integrate robust speech recognition capabilities into their Flutter applications.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Background STT

In this section, we will walk through the setup process for the `background_stt` package and demonstrate how to use it effectively in your Flutter application.

## Installation

To add the `background_stt` package to your Flutter project, include it in your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  background_stt: ^latest_version
```

Make sure to replace `^latest_version` with the most recent version of the package available on [pub.dev](https://pub.dev/packages/background_stt).

## Platform-Specific Configuration

### Android
1. Open your `AndroidManifest.xml` file located at `android/app/src/main/AndroidManifest.xml`.
2. Add the following permissions inside the `<manifest>` tag:

```xml
<uses-permission android:name="android.permission.RECORD_AUDIO"/>
<uses-permission android:name="android.permission.BIND_JOB_SERVICE"/>
```

3. Ensure that your `minSdkVersion` is set to at least 21 in `android/app/build.gradle`:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

### iOS
1. Open your `Info.plist` file located at `ios/Runner/Info.plist`.
2. Add the following keys to request microphone access:

```xml
<key>NSMicrophoneUsageDescription</key>
<string>This app requires access to the microphone for speech recognition.</string>
```

## Using the Package

To use the `background_stt` package, you will need to import it into your Dart file:

```dart
import 'package:background_stt/background_stt.dart';
```

You can then initialize the speech recognition service and start listening for speech input. Hereâ€™s a simple example of how to do this:

```dart
void startListening() async {
  await BackgroundStt.startListening(
    onResult: (result) {
      print("Recognized: $result");
    },
    onError: (error) {
      print("Error: $error");
    },
  );
}
```

This function starts the speech recognition process and prints the recognized text or any errors to the console.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example: Implementing Background STT in a Flutter App

```dart
import 'package:flutter/material.dart';
import 'package:background_stt/background_stt.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  String recognizedText = "Press the button to start listening";

  @override
  void initState() {
    super.initState();
    // Initialize the background speech recognition when the app starts
    BackgroundStt.initialize();
  }

  void startListening() async {
    // Start listening for speech input
    await BackgroundStt.startListening(
      onResult: (result) {
        // Update the recognized text when a result is received
        setState(() {
          recognizedText = result;
        });
      },
      onError: (error) {
        // Handle any errors that occur during speech recognition
        print("Error: $error");
      },
    );
  }

  void stopListening() async {
    // Stop the speech recognition service
    await BackgroundStt.stopListening();
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text("Background STT Example"),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Text(
                recognizedText,
                style: TextStyle(fontSize: 24),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: startListening,
                child: Text("Start Listening"),
              ),
              ElevatedButton(
                onPressed: stopListening,
                child: Text("Stop Listening"),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts by running the RealFlutter widget.
// 2. In the initState method, the BackgroundStt service is initialized.
// 3. When the "Start Listening" button is pressed, the startListening method is called.
// 4. The app listens for speech input and updates the recognizedText variable with the recognized speech.
// 5. The recognized text is displayed on the screen.
// 6. The "Stop Listening" button stops the speech recognition service when pressed.
```
<!-- END_MAIN -->
```

### Summary
In this blog post, we explored the `background_stt` Flutter package, detailing its features, installation process, and usage. We provided a complete example of a Flutter application that demonstrates how to implement background speech recognition. The application initializes the speech recognition service, listens for speech input, and displays the recognized text in real-time. This package is ideal for developers looking to enhance their applications with voice recognition capabilities, especially in scenarios where continuous listening is required.
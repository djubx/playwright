<-- START_DESCRIPTION -->

# Flutter Curl Package Overview
=====================================

The `flutter_curl` package is a Flutter plugin that provides a simple and efficient way to make HTTP requests from your Flutter app. It is built on top of the popular `libcurl` library, which is widely used in many programming languages.

### When to Use This Package

You should use this package when you need to make HTTP requests from your Flutter app, such as:

* Fetching data from a REST API
* Sending data to a server
* Downloading files
* Uploading files

### Features

The `flutter_curl` package provides the following features:

* Support for HTTP/1.1 and HTTP/2 protocols
* Support for GET, POST, PUT, DELETE, and other HTTP methods
* Support for query parameters and headers
* Support for JSON and form data
* Support for file uploads and downloads
* Support for SSL/TLS encryption

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
==========================

To use the `flutter_curl` package, you need to add it to your Flutter project's `pubspec.yaml` file:

```yml
dependencies:
  flutter_curl: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Platform-Specific Configurations

#### Android

To use the `flutter_curl` package on Android, you need to add the following configuration to your `android/app/build.gradle` file:

```groovy
android {
    ...
    defaultConfig {
        ...
        ndk {
            abiFilters "armeabi-v7l", "arm64-v8a", "x86", "x86_64"
        }
    }
}
```

#### iOS

To use the `flutter_curl` package on iOS, you need to add the following configuration to your `ios/Podfile` file:

```ruby
target 'Runner' do
  ...
  pod 'libcurl', '~> 1.0.0'
end
```

Then, run `pod install` to install the pod.

### Using the Package

To use the `flutter_curl` package, you need to import it in your Dart file:

```dart
import 'package:flutter_curl/flutter_curl.dart';
```

Then, you can use the `Curl` class to make HTTP requests:

```dart
Curl curl = Curl();
curl.get('https://example.com').then((response) {
  print(response.body);
});
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_curl/flutter_curl.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Curl Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  String _response = '';

  // Step 1: Create a Curl object
  Curl _curl = Curl();

  // Step 2: Make a GET request to the specified URL
  void _makeGetRequest() {
    _curl.get('https://example.com').then((response) {
      // Step 3: Get the response body
      setState(() {
        _response = response.body;
      });
    });
  }

  // Step 4: Make a POST request to the specified URL
  void _makePostRequest() {
    _curl.post('https://example.com', body: {'key': 'value'}).then((response) {
      // Step 5: Get the response body
      setState(() {
        _response = response.body;
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Curl Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(_response),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _makeGetRequest,
              child: Text('Make GET Request'),
            ),
            SizedBox(height: 10),
            ElevatedButton(
              onPressed: _makePostRequest,
              child: Text('Make POST Request'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user clicks on the "Make GET Request" button.
// 2. The _makeGetRequest function is called, which makes a GET request to the specified URL using the Curl object.
// 3. The response body is retrieved and stored in the _response variable.
// 4. The UI is updated to display the response body.
// 5. The user clicks on the "Make POST Request" button.
// 6. The _makePostRequest function is called, which makes a POST request to the specified URL using the Curl object.
// 7. The response body is retrieved and stored in the _response variable.
// 8. The UI is updated to display the response body.

// In summary, this example demonstrates how to use the Curl package to make GET and POST requests to a specified URL, and how to retrieve and display the response body.
```

<-- END_MAIN -->
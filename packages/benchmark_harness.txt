<-- START_DESCRIPTION -->

# Benchmark Harness Flutter Package
=====================================

The `benchmark_harness` package is a powerful tool for measuring the performance of Flutter applications. It provides a simple and easy-to-use API for running benchmarks and measuring the execution time of specific code paths.

When to Use This Package
------------------------

This package is particularly useful when:

*   You want to measure the performance of a specific piece of code in your Flutter application.
*   You need to compare the performance of different algorithms or implementations.
*   You want to identify performance bottlenecks in your application.

Features
--------

*   Simple and easy-to-use API for running benchmarks.
*   Supports both synchronous and asynchronous benchmarks.
*   Provides detailed reports on benchmark results, including average execution time and standard deviation.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Benchmark Harness Package
-----------------------------------------

To use the `benchmark_harness` package, you need to add it to your `pubspec.yaml` file:

```yml
dependencies:
  benchmark_harness: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Platform-Specific Details

#### Android

To use the `benchmark_harness` package on Android, you need to add the following configuration to your `android/app/build.gradle` file:

```groovy
android {
    ...
    defaultConfig {
        ...
        testOptions {
            unitTests.includeAndroidResources = true
        }
    }
}
```

#### iOS

To use the `benchmark_harness` package on iOS, you need to add the following configuration to your `ios/Podfile` file:

```ruby
target 'YourApp' do
  ...
  pod 'benchmark_harness', :path => '../.symlinks/plugins/benchmark_harness/ios'
end
```

### Using the Package

To use the `benchmark_harness` package, you need to create a `BenchmarkBase` class that extends the `BenchmarkBase` class provided by the package. Then, you can override the `run` method to execute your benchmark code.

Here is an example:

```dart
import 'package:benchmark_harness/benchmark_harness.dart';

class RealFlutterBenchmark extends BenchmarkBase {
  RealFlutterBenchmark() : super('RealFlutter');

  @override
  void run() {
    // Your benchmark code here
  }
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:benchmark_harness/benchmark_harness.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'RealFlutter Benchmark',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  String _benchmarkResult = '';

  void _runBenchmark() {
    RealFlutterBenchmark benchmark = RealFlutterBenchmark();
    benchmark.run();
    setState(() {
      _benchmarkResult = benchmark.result;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('RealFlutter Benchmark'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              _benchmarkResult,
              style: TextStyle(fontSize: 24),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _runBenchmark,
              child: Text('Run Benchmark'),
            ),
          ],
        ),
      ),
    );
  }
}

class RealFlutterBenchmark extends BenchmarkBase {
  RealFlutterBenchmark() : super('RealFlutter');

  @override
  void run() {
    // Simulate some work
    for (int i = 0; i < 10000000; i++) {
      // Do something
    }
  }
}

// The application flow is as follows:
// 1. The user clicks the "Run Benchmark" button.
// 2. The _runBenchmark function is called, which creates a new instance of the RealFlutterBenchmark class.
// 3. The run method of the RealFlutterBenchmark class is called, which simulates some work.
// 4. The result of the benchmark is stored in the _benchmarkResult variable.
// 5. The setState function is called to update the UI with the benchmark result.
// 6. The UI is updated with the benchmark result.
```

<-- END_MAIN -->
```markdown
<-- START_DESCRIPTION -->

# Understanding the `phone_numbers_parser` Flutter Package

The `phone_numbers_parser` package is a powerful tool for developers working with phone numbers in Flutter applications. It provides a comprehensive set of utilities to parse, validate, and format phone numbers across different regions and formats. This package is particularly useful in applications that require user input of phone numbers, such as contact management apps, messaging platforms, or any service that involves user registration and verification.

## Key Features

- **Parsing and Validation**: Automatically parse and validate phone numbers from user input, ensuring they conform to international standards.
- **Formatting**: Format phone numbers in a user-friendly way, either in international or local formats.
- **Region Support**: Handle phone numbers from multiple regions, making it ideal for global applications.
- **Error Handling**: Provides robust error handling for invalid or incomplete phone numbers.

### When to Use

- **User Registration**: Validate and format phone numbers during user sign-up processes.
- **Contact Management**: Parse and display phone numbers in a consistent format within contact lists.
- **Communication Apps**: Ensure phone numbers are correctly formatted for SMS or call functionalities.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the `phone_numbers_parser` Package

In this tutorial, we will walk through the setup and usage of the `phone_numbers_parser` package in a Flutter application. We will cover platform-specific configurations for both Android and iOS to ensure seamless integration.

## Installation

Add the `phone_numbers_parser` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  phone_numbers_parser: ^0.4.0
```

Run `flutter pub get` to install the package.

## Platform-Specific Setup

### Android

No additional setup is required for Android. The package works out of the box.

### iOS

Ensure your iOS deployment target is set to at least iOS 9.0. You can set this in your `ios/Podfile`:

```ruby
platform :ios, '9.0'
```

## Using the Package

To use the `phone_numbers_parser` package, import it into your Dart file:

```dart
import 'package:phone_numbers_parser/phone_numbers_parser.dart';
```

### Parsing and Validating Phone Numbers

```dart
final phoneNumber = PhoneNumber.fromRaw('+14155552671');
if (phoneNumber.isValid) {
  print('Valid phone number: ${phoneNumber.international}');
} else {
  print('Invalid phone number');
}
```

### Formatting Phone Numbers

```dart
final formattedNumber = phoneNumber.formatNational();
print('Formatted phone number: $formattedNumber');
```

<-- END_TUTORIAL -->

<-- MAIN -->

# Complete Example: Flutter Application Using `phone_numbers_parser`

Below is a complete Flutter application demonstrating the use of the `phone_numbers_parser` package. This example includes parsing, validating, and formatting phone numbers.

```dart
import 'package:flutter/material.dart';
import 'package:phone_numbers_parser/phone_numbers_parser.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Phone Number Parser Demo',
      home: PhoneNumberParserScreen(),
    );
  }
}

class PhoneNumberParserScreen extends StatefulWidget {
  @override
  _PhoneNumberParserScreenState createState() => _PhoneNumberParserScreenState();
}

class _PhoneNumberParserScreenState extends State<PhoneNumberParserScreen> {
  final TextEditingController _controller = TextEditingController();
  String _parsedNumber = '';
  String _formattedNumber = '';

  void _parsePhoneNumber() {
    // Retrieve the raw phone number from the text field
    final rawNumber = _controller.text;
    // Parse the phone number using the PhoneNumber class
    final phoneNumber = PhoneNumber.fromRaw(rawNumber);

    // Check if the phone number is valid
    if (phoneNumber.isValid) {
      // If valid, format the number in international format
      setState(() {
        _parsedNumber = phoneNumber.international;
        _formattedNumber = phoneNumber.formatNational();
      });
    } else {
      // If invalid, display an error message
      setState(() {
        _parsedNumber = 'Invalid phone number';
        _formattedNumber = '';
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Phone Number Parser'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            TextField(
              controller: _controller,
              decoration: InputDecoration(
                labelText: 'Enter phone number',
              ),
              keyboardType: TextInputType.phone,
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _parsePhoneNumber,
              child: Text('Parse Number'),
            ),
            SizedBox(height: 20),
            Text('Parsed Number: $_parsedNumber'),
            Text('Formatted Number: $_formattedNumber'),
          ],
        ),
      ),
    );
  }
}
```

// The application starts with the `main` function, which runs the `RealFlutter` app.
// `RealFlutter` is a stateless widget that sets up the MaterialApp and directs to `PhoneNumberParserScreen`.
// `PhoneNumberParserScreen` is a stateful widget that manages the state of the phone number input and parsing.
// The `_parsePhoneNumber` method is triggered when the user presses the "Parse Number" button.
// It retrieves the input, parses it using `PhoneNumber.fromRaw`, and checks its validity.
// If valid, it updates the UI with the international and national formats of the number.
// If invalid, it displays an error message.
// The UI consists of a text field for input, a button to trigger parsing, and text widgets to display results.

<-- END_MAIN -->
```
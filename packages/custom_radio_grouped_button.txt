Here's a detailed technical blog on the `custom_radio_grouped_button` Flutter package, structured as requested.

<!-- START_DESCRIPTION -->
# Custom Radio Grouped Button Flutter Package

The `custom_radio_grouped_button` package is a versatile Flutter widget that allows developers to create a grouped set of radio buttons with customizable styles and behaviors. This package is particularly useful when you want to present multiple options to users in a visually appealing manner, making it easier for them to select one option from a set.

## When to Use This Package

You might consider using the `custom_radio_grouped_button` package in scenarios such as:

- **Form Inputs**: When you need users to select a single option from a list, such as gender selection, payment methods, or preferences.
- **Surveys and Polls**: To gather user feedback in a structured way.
- **Settings and Configurations**: When users need to choose between different settings or configurations in an app.

## Features

- **Customizable Appearance**: You can easily change the colors, shapes, and sizes of the radio buttons to match your app's theme.
- **Flexible Layout**: The package supports horizontal and vertical layouts, allowing you to arrange the buttons as needed.
- **Easy Integration**: Simple API that integrates seamlessly with existing Flutter forms and widgets.
- **State Management**: Built-in support for managing the selected state of the radio buttons.

With these features, the `custom_radio_grouped_button` package enhances user experience by providing a clean and interactive way to select options.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Custom Radio Grouped Button

## Step 1: Adding the Dependency

To use the `custom_radio_grouped_button` package, you first need to add it to your `pubspec.yaml` file. Open the file and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  custom_radio_grouped_button: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command in your terminal to install it:

```bash
flutter pub get
```

## Step 2: Importing the Package

In your Dart file, import the package at the top:

```dart
import 'package:custom_radio_grouped_button/custom_radio_grouped_button.dart';
```

## Step 3: Using the Widget

You can now use the `CustomRadioButton` widget in your Flutter application. Below is an example of how to implement it in a simple form.

### Example Code Snippet

```dart
CustomRadioButton(
  elevation: 0,
  unSelectedColor: Colors.grey[300],
  buttonLables: [
    'Option 1',
    'Option 2',
    'Option 3',
  ],
  buttonValues: [
    '1',
    '2',
    '3',
  ],
  radioButtonValue: selectedValue,
  onChanged: (value) {
    setState(() {
      selectedValue = value;
    });
  },
),
```

### Platform-Specific Details

- **Android**: Ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21 to avoid compatibility issues.
  
  ```groovy
  android {
      ...
      defaultConfig {
          ...
          minSdkVersion 21
      }
  }
  ```

- **iOS**: No specific configurations are required, but ensure that your deployment target is set appropriately in `ios/Podfile`.

## Step 4: Customization Options

You can customize the appearance of the radio buttons using various properties such as:

- `buttonLables`: List of labels for the buttons.
- `buttonValues`: Corresponding values for each button.
- `unSelectedColor`: Color for unselected buttons.
- `selectedColor`: Color for the selected button.

This flexibility allows you to create a radio button group that fits seamlessly into your app's design.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Custom Radio Grouped Button

```dart
import 'package:flutter/material.dart';
import 'package:custom_radio_grouped_button/custom_radio_grouped_button.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Variable to hold the selected value
  String selectedValue = '1'; // Default selection

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Custom Radio Grouped Button Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              // Custom Radio Button Group
              CustomRadioButton(
                elevation: 0,
                unSelectedColor: Colors.grey[300],
                buttonLables: [
                  'Option 1',
                  'Option 2',
                  'Option 3',
                ],
                buttonValues: [
                  '1',
                  '2',
                  '3',
                ],
                radioButtonValue: selectedValue,
                onChanged: (value) {
                  // Update the selected value when a button is pressed
                  setState(() {
                    selectedValue = value;
                  });
                },
              ),
              SizedBox(height: 20),
              // Display the selected value
              Text(
                'Selected Value: $selectedValue',
                style: TextStyle(fontSize: 20),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
```

### Application Flow Explanation

// The main function starts the app by running the RealFlutter widget.
// The RealFlutter widget is a StatefulWidget that maintains the state of the selected radio button.
// In the build method, a MaterialApp is created with a Scaffold containing an AppBar and a Center widget.
// Inside the Center widget, a Column is used to arrange the CustomRadioButton and a Text widget vertically.
// The CustomRadioButton is configured with three options, and the selected value is managed by the selectedValue variable.
// When a radio button is pressed, the onChanged callback updates the selectedValue state, triggering a rebuild of the widget.
// The Text widget below the radio buttons displays the currently selected value, providing immediate feedback to the user.

<!-- END_MAIN -->

In summary, the `custom_radio_grouped_button` package provides a simple yet powerful way to implement radio button groups in Flutter applications. With its customizable features and easy integration, it enhances user interaction and improves the overall user experience.
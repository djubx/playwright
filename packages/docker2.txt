<-- START_DESCRIPTION -->

Docker2 Flutter Package: A Comprehensive Overview
=====================================================

The `docker2` Flutter package is a powerful tool for containerization and virtualization in Flutter applications. It allows developers to create and manage Docker containers directly from their Flutter app, enabling a wide range of use cases such as:

* Running complex computations or machine learning models in a sandboxed environment
* Integrating with existing Docker-based infrastructure or services
* Creating virtualized environments for testing or development purposes

Key Features of the Docker2 Package
------------------------------------

* Create and manage Docker containers from Flutter
* Support for both Android and iOS platforms
* Simple and intuitive API for container creation and management

When to Use the Docker2 Package
-------------------------------

* When you need to run complex computations or machine learning models in a sandboxed environment
* When you need to integrate with existing Docker-based infrastructure or services
* When you need to create virtualized environments for testing or development purposes

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setting Up the Docker2 Package
=============================

To use the `docker2` package in your Flutter app, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  docker2: ^1.0.0
```
### Step 2: Import the Package in Your Dart File

Import the package in your Dart file:
```dart
import 'package:docker2/docker2.dart';
```
### Step 3: Initialize the Docker2 Package

Initialize the package by calling the `init` method:
```dart
await Docker2.init();
```
### Step 4: Create a Docker Container

Create a Docker container by calling the `createContainer` method:
```dart
final container = await Docker2.createContainer(
  image: 'ubuntu',
  command: ['bash', '-c', 'echo "Hello World!"'],
);
```
### Step 5: Start the Docker Container

Start the Docker container by calling the `start` method:
```dart
await container.start();
```
### Step 6: Get the Container Logs

Get the container logs by calling the `logs` method:
```dart
final logs = await container.logs();
print(logs);
```
Platform-Specific Details
-------------------------

### Android

On Android, the `docker2` package uses the `docker-android` library to interact with the Docker daemon. Make sure to add the following line to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.INTERNET" />
```
### iOS

On iOS, the `docker2` package uses the `docker-ios` library to interact with the Docker daemon. Make sure to add the following line to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:docker2/docker2.dart';

void main() async {
  // Initialize the Docker2 package
  await Docker2.init();

  // Create a new Flutter app
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Docker2 Example',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  // Create a new Docker container
  final container = Docker2.createContainer(
    image: 'ubuntu',
    command: ['bash', '-c', 'echo "Hello World!"'],
  );

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Docker2 Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Docker2 Example',
              style: TextStyle(fontSize: 24),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () async {
                // Start the Docker container
                await container.start();

                // Get the container logs
                final logs = await container.logs();
                print(logs);
              },
              child: Text('Start Container'),
            ),
          ],
        ),
      ),
    );
  }
}
```

// This is the main entry point of the app.
// The app initializes the Docker2 package and creates a new Flutter app.
// The app uses the Docker2 package to create a new Docker container.
// The app starts the Docker container and gets the container logs.
// The app prints the container logs to the console.

// The app uses a Material Design theme and has a single page with a button.
// The button is used to start the Docker container.
// When the button is pressed, the app starts the Docker container and gets the container logs.
// The app prints the container logs to the console.

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Lodash Flutter Package
The `lodash_flutter` package is a utility library for Flutter that provides a set of functional programming helpers. It is inspired by the popular Lodash JavaScript library and aims to make working with data in Flutter easier and more efficient.

## When to Use
You can use `lodash_flutter` when you need to perform complex data transformations, filtering, or aggregations in your Flutter app. It is particularly useful when working with large datasets or complex data structures.

## Features
Some of the key features of `lodash_flutter` include:

* **Array helpers**: `chunk`, `compact`, `concat`, `difference`, `drop`, `dropRight`, `fill`, `findIndex`, `findLastIndex`, `first`, `flatten`, `flattenDeep`, `flattenDepth`, `fromPairs`, `head`, `indexOf`, `initial`, `intersection`, `join`, `last`, `lastIndexOf`, `nth`, `pull`, `pullAll`, `pullAllBy`, `pullAllWith`, `pullAt`, `remove`, `reverse`, `slice`, `sortedIndex`, `sortedIndexOf`, `sortedLastIndex`, `sortedLastIndexOf`, `sortedUniq`, `sortedUniqBy`, `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unzip`, `unzipWith`, `without`, `xor`, `xorBy`, `xorWith`, `zip`, `zipObject`, `zipObjectDeep`, `zipWith`
* **Object helpers**: `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`, `create`, `defaults`, `defaultsDeep`, `entries`, `entriesIn`, `extend`, `extendWith`, `findKey`, `findLastKey`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `functions`, `functionsIn`, `get`, `has`, `hasIn`, `invert`, `invertBy`, `invoke`, `keys`, `keysIn`, `mapKeys`, `mapValues`, `merge`, `mergeWith`, `omit`, `omitBy`, `pick`, `pickBy`, `result`, `set`, `setWith`, `toPairs`, `toPairsIn`, `transform`, `unset`, `update`, `updateWith`, `values`, `valuesIn`
* **String helpers**: `camelCase`, `capitalize`, `deburr`, `endsWith`, `escape`, `escapeRegExp`, `kebabCase`, `lowerCase`, `lowerFirst`, `pad`, `padEnd`, `padStart`, `parseInt`, `repeat`, `replace`, `snakeCase`, `split`, `startCase`, `startsWith`, `template`, `toLower`, `toUpper`, `trim`, `trimEnd`, `trimStart`, `truncate`, `unescape`, `upperCase`, `upperFirst`, `words`

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

## Setup
To use `lodash_flutter` in your Flutter project, add the following dependency to your `pubspec.yaml` file:
```yml
dependencies:
  lodash_flutter: ^1.0.0
```
Then, run `flutter pub get` to install the package.

## Usage
Import the `lodash_flutter` package in your Dart file:
```dart
import 'package:lodash_flutter/lodash_flutter.dart';
```
You can now use the `lodash_flutter` functions in your code. For example:
```dart
void main() {
  final arr = [1, 2, 3, 4, 5];
  final chunkedArr = chunk(arr, 2);
  print(chunkedArr); // [[1, 2], [3, 4], [5]]
}
```
Note that some functions may require additional setup or configuration, such as setting up a locale for string formatting.

## Platform-Specific Details
`lodash_flutter` is designed to work on both Android and iOS platforms. However, some functions may have platform-specific behavior or requirements.

For example, the `deburr` function uses the `dart:core` library's `String.normalize` method, which may behave differently on Android and iOS.

## Configurations and Optimizations
`lodash_flutter` provides some configuration options and optimizations to improve performance or customize behavior.

For example, you can set the `lodash_flutter` logger to debug mode to see detailed logs of function calls and errors:
```dart
import 'package:lodash_flutter/lodash_flutter.dart';

void main() {
  LodashFlutter.logger = LodashFlutterLogger(debug: true);
  // ...
}
```
You can also use the `lodash_flutter` ` memoize` function to cache the results of expensive function calls:
```dart
import 'package:lodash_flutter/lodash_flutter.dart';

void main() {
  final expensiveFunction = () {
    // Simulate an expensive computation
    return Future.delayed(Duration(seconds: 2), () => 42);
  };

  final memoizedFunction = memoize(expensiveFunction);
  // ...
}
```
<-- END_TUTORIAL -->

<-- START_MAIN -->
```dart
import 'package:flutter/material.dart';
import 'package:lodash_flutter/lodash_flutter.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Lodash Flutter Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _arr = [1, 2, 3, 4, 5];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Lodash Flutter Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Original Array:',
            ),
            Text(
              _arr.toString(),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                final chunkedArr = chunk(_arr, 2);
                print(chunkedArr); // [[1, 2], [3, 4], [5]]
                setState(() {
                  _arr = chunkedArr;
                });
              },
              child: Text('Chunk Array'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                final sortedArr = sortBy(_arr, (x) => x);
                print(sortedArr); // [1, 2, 3, 4, 5]
                setState(() {
                  _arr = sortedArr;
                });
              },
              child: Text('Sort Array'),
            ),
          ],
        ),
      ),
    );
  }
}
```
// This code demonstrates the usage of the `lodash_flutter` package in a Flutter app.
// It creates a simple app with two buttons: "Chunk Array" and "Sort Array".
// When the "Chunk Array" button is pressed, it chunks the original array into sub-arrays of size 2.
// When the "Sort Array" button is pressed, it sorts the original array in ascending order.
// The app displays the original array and the modified array after each button press.

// The `chunk` function is used to chunk the array into sub-arrays of size 2.
// The `sortBy` function is used to sort the array in ascending order.

// The app uses the `setState` method to update the app's state and re-render the UI after each button press.

// This code showcases the ease of use and flexibility of the `lodash_flutter` package in a real-world Flutter app.

<-- END_MAIN -->
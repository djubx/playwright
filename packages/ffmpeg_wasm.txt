<-- START_DESCRIPTION -->

# ffmpeg_wasm Flutter Package
================================

The `ffmpeg_wasm` package is a powerful tool for Flutter developers, allowing them to leverage the capabilities of FFmpeg, a popular multimedia processing library, in their web applications. This package provides a WebAssembly (WASM) version of FFmpeg, enabling developers to perform various audio and video processing tasks, such as encoding, decoding, and filtering, directly in the browser.

## When to Use This Package
---------------------------

You should consider using the `ffmpeg_wasm` package in the following scenarios:

*   When you need to perform complex audio or video processing tasks in your Flutter web application, such as transcoding, resizing, or applying filters.
*   When you want to reduce the load on your server by offloading multimedia processing tasks to the client-side.
*   When you need a high degree of customization and control over the multimedia processing pipeline.

## Features
------------

The `ffmpeg_wasm` package offers a wide range of features, including:

*   Support for various audio and video codecs, such as H.264, H.265, VP8, and VP9.
*   Ability to perform encoding, decoding, and transcoding operations.
*   Support for applying filters, such as resizing, cropping, and flipping.
*   Ability to extract audio or video streams from multimedia files.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Using the ffmpeg_wasm Package
=====================================

In this tutorial, we will walk through the setup process and explain how to use the `ffmpeg_wasm` package in your Flutter project.

## Step 1: Add the Package to Your Project
-----------------------------------------

To use the `ffmpeg_wasm` package, you need to add it to your project's `pubspec.yaml` file. Open the file and add the following line under the `dependencies` section:

```yml
dependencies:
  flutter:
    sdk: flutter
  ffmpeg_wasm: ^0.1.0
```

Then, run `flutter pub get` in your terminal to install the package.

## Step 2: Import the Package
---------------------------

To use the package, you need to import it in your Dart file. Add the following line at the top of your file:

```dart
import 'package:ffmpeg_wasm/ffmpeg_wasm.dart';
```

## Step 3: Initialize the FFmpeg Instance
-----------------------------------------

Before you can use the FFmpeg instance, you need to initialize it. You can do this by calling the `FFmpeg.init()` method:

```dart
await FFmpeg.init();
```

## Step 4: Use the FFmpeg Instance
-------------------------------

Now you can use the FFmpeg instance to perform various multimedia processing tasks. For example, you can use the `FFmpeg.ffmpeg()` method to execute an FFmpeg command:

```dart
await FFmpeg.ffmpeg(
  '-i', 'input.mp4', '-c:v', 'libx264', '-crf', '18', 'output.mp4',
);
```

This command takes an input file `input.mp4`, encodes it using the H.264 codec, and saves the output to a file named `output.mp4`.

## Platform-Specific Details
---------------------------

The `ffmpeg_wasm` package uses WebAssembly (WASM) to run the FFmpeg instance in the browser. This means that it only works on platforms that support WASM, such as web browsers.

If you need to use the package on other platforms, such as mobile or desktop, you will need to use a different approach.

## Configurations and Optimizations
-----------------------------------

The `ffmpeg_wasm` package provides several configurations and optimizations that you can use to customize its behavior. For example, you can use the `FFmpeg.setLogLevel()` method to set the log level:

```dart
FFmpeg.setLogLevel(LogLevel.verbose);
```

You can also use the `FFmpeg.setThreads()` method to set the number of threads:

```dart
FFmpeg.setThreads(4);
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:ffmpeg_wasm/ffmpeg_wasm.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'FFmpeg WASM Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  void initState() {
    super.initState();
    _initFFmpeg();
  }

  Future<void> _initFFmpeg() async {
    // Initialize the FFmpeg instance
    await FFmpeg.init();
  }

  Future<void> _runFFmpegCommand() async {
    // Run an FFmpeg command
    await FFmpeg.ffmpeg(
      '-i', 'input.mp4', '-c:v', 'libx264', '-crf', '18', 'output.mp4',
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('FFmpeg WASM Demo'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: _runFFmpegCommand,
          child: Text('Run FFmpeg Command'),
        ),
      ),
    );
  }
}
```

// This is the main entry point of the application.
// The MyApp widget is the root of the application.
// The MyHomePage widget is the home page of the application.
// The _initFFmpeg method is called when the MyHomePage widget is initialized.
// The _runFFmpegCommand method is called when the button is pressed.
// The FFmpeg instance is initialized using the FFmpeg.init method.
// The FFmpeg command is run using the FFmpeg.ffmpeg method.
// The input file is input.mp4, and the output file is output.mp4.
// The video codec used is H.264, and the quality is set to 18.

<-- END_MAIN -->
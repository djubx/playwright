<-- START_DESCRIPTION -->

Expandable Widgets Flutter Package
=====================================

The `expandable_widgets` package is a useful library for Flutter developers that allows you to create expandable and collapsible widgets. This package is ideal for situations where you need to display a large amount of content, but want to give users the option to hide or show it as needed.

Features
--------

*   Expandable panels with customizable headers and content
*   Support for multiple expansion modes (e.g., toggle, accordion)
*   Customizable animation durations and curves
*   Optional callbacks for expansion and collapse events

When to Use
------------

*   Displaying large amounts of content, such as text or images, that can be hidden or shown as needed
*   Creating accordion-style interfaces where only one panel can be expanded at a time
*   Providing users with the option to customize the layout of your app

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
----------------

To use the `expandable_widgets` package, follow these steps:

### Step 1: Add the Package to Your Project

Add the following line to your `pubspec.yaml` file:

```yml
dependencies:
  expandable_widgets: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:expandable_widgets/expandable_widgets.dart';
```

### Step 3: Create an Expandable Widget

Create an `ExpandableWidget` instance and pass in the required properties:

```dart
ExpandableWidget(
  header: Text('Header'),
  content: Text('Content'),
)
```

You can customize the appearance and behavior of the widget by passing in additional properties, such as `headerStyle`, `contentStyle`, `animationDuration`, and `onExpansionChanged`.

Platform-Specific Details
-------------------------

The `expandable_widgets` package works on both Android and iOS platforms. However, you may need to adjust the appearance and behavior of the widget to match the platform-specific design guidelines.

For example, on Android, you may want to use a `Material` widget to create a material design-inspired expandable panel:

```dart
Material(
  elevation: 2,
  child: ExpandableWidget(
    header: Text('Header'),
    content: Text('Content'),
  ),
)
```

On iOS, you may want to use a `Cupertino` widget to create a Cupertino-style expandable panel:

```dart
CupertinoCard(
  child: ExpandableWidget(
    header: Text('Header'),
    content: Text('Content'),
  ),
)
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:expandable_widgets/expandable_widgets.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Expandable Widgets Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Expandable Widgets Demo'),
      ),
      body: ListView(
        children: [
          // Create an expandable panel with a header and content
          ExpandableWidget(
            header: Text('Header 1'),
            content: Text('Content 1'),
          ),
          // Create an expandable panel with a custom header style
          ExpandableWidget(
            header: Text('Header 2'),
            headerStyle: TextStyle(fontSize: 24),
            content: Text('Content 2'),
          ),
          // Create an expandable panel with a custom animation duration
          ExpandableWidget(
            header: Text('Header 3'),
            animationDuration: Duration(milliseconds: 500),
            content: Text('Content 3'),
          ),
          // Create an expandable panel with a callback for expansion and collapse events
          ExpandableWidget(
            header: Text('Header 4'),
            onExpansionChanged: (expanded) {
              print('Expanded: $expanded');
            },
            content: Text('Content 4'),
          ),
        ],
      ),
    );
  }
}

// The app starts by running the MyApp widget, which builds a MaterialApp instance.
// The MaterialApp instance has a title and a theme, and it uses the MyHomePage widget as its home page.
// The MyHomePage widget is a stateful widget that builds a Scaffold instance with an AppBar and a ListView.
// The ListView contains multiple ExpandableWidget instances, each with a header and content.
// The ExpandableWidget instances can be customized with different header styles, animation durations, and callbacks for expansion and collapse events.
// When an ExpandableWidget instance is expanded or collapsed, it calls the onExpansionChanged callback to notify the parent widget.
```

<-- END_MAIN -->
```markdown
<-- START_DESCRIPTION -->

# Custom Check Box Flutter Package

The `custom_check_box` Flutter package is a versatile and customizable widget that allows developers to create checkboxes with unique styles and behaviors. This package is particularly useful when the default checkbox widget does not meet the design requirements of your application. With `custom_check_box`, you can easily modify the appearance and functionality of checkboxes to align with your app's theme and user experience goals.

## Features

- **Customizable Appearance**: Change the color, size, and shape of the checkbox to fit your design.
- **Flexible State Management**: Easily manage the state of the checkbox with built-in callbacks.
- **Animation Support**: Add animations to checkbox state changes for a more dynamic user interface.
- **Platform Compatibility**: Works seamlessly on both Android and iOS platforms.

## When to Use

- **Unique Design Requirements**: When your app requires a checkbox that deviates from the standard design.
- **Enhanced User Interaction**: To provide a more interactive and visually appealing checkbox experience.
- **Consistent Theming**: When you need checkboxes that match a specific theme or branding.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Custom Check Box Package

In this tutorial, we will walk through the process of setting up and using the `custom_check_box` package in a Flutter project. We will cover platform-specific configurations for both Android and iOS to ensure smooth integration.

## Setup Process

### Step 1: Add Dependency

First, add the `custom_check_box` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  custom_check_box: ^1.0.0
```

Run `flutter pub get` to install the package.

### Step 2: Import the Package

In your Dart file, import the package:

```dart
import 'package:custom_check_box/custom_check_box.dart';
```

### Step 3: Platform-Specific Configurations

#### Android

Ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```gradle
minSdkVersion 21
```

#### iOS

Make sure your iOS deployment target is set to 11.0 or higher in `ios/Podfile`:

```ruby
platform :ios, '11.0'
```

## Using the Package

To use the `custom_check_box` in your widget tree, you can create an instance of `CustomCheckBox` and customize its properties:

```dart
CustomCheckBox(
  value: isChecked,
  onChanged: (bool value) {
    setState(() {
      isChecked = value;
    });
  },
  checkBoxSize: 24,
  selectedColor: Colors.blue,
  unSelectedColor: Colors.grey,
  borderColor: Colors.black,
  animationDuration: Duration(milliseconds: 300),
)
```

### Key Properties

- **value**: The current state of the checkbox (checked or unchecked).
- **onChanged**: Callback function that is triggered when the checkbox state changes.
- **checkBoxSize**: Size of the checkbox.
- **selectedColor**: Color of the checkbox when selected.
- **unSelectedColor**: Color of the checkbox when unselected.
- **borderColor**: Color of the checkbox border.
- **animationDuration**: Duration of the state change animation.

<-- END_TUTORIAL -->

<-- START_MAIN -->

# Complete Example: Flutter Main File

Below is a complete example of a Flutter application using the `custom_check_box` package. This example demonstrates all key features of the package.

```dart
import 'package:flutter/material.dart';
import 'package:custom_check_box/custom_check_box.dart';

// Main entry point of the application
void main() {
  runApp(MyApp());
}

// Root widget of the application
class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Custom Check Box Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: CheckBoxDemo(),
    );
  }
}

// Stateful widget to demonstrate the custom checkbox
class CheckBoxDemo extends StatefulWidget {
  @override
  _CheckBoxDemoState createState() => _CheckBoxDemoState();
}

class _CheckBoxDemoState extends State<CheckBoxDemo> {
  // Boolean variable to hold the state of the checkbox
  bool isChecked = false;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Custom Check Box Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            // CustomCheckBox widget with various properties
            CustomCheckBox(
              value: isChecked, // Current state of the checkbox
              onChanged: (bool value) {
                // Update the state when checkbox is toggled
                setState(() {
                  isChecked = value;
                });
              },
              checkBoxSize: 30, // Size of the checkbox
              selectedColor: Colors.green, // Color when selected
              unSelectedColor: Colors.red, // Color when unselected
              borderColor: Colors.black, // Border color of the checkbox
              animationDuration: Duration(milliseconds: 500), // Animation duration
            ),
            SizedBox(height: 20),
            // Display the current state of the checkbox
            Text(
              'Checkbox is ${isChecked ? "checked" : "unchecked"}',
              style: TextStyle(fontSize: 20),
            ),
          ],
        ),
      ),
    );
  }
}
```

// Application Flow Explanation
// 1. The `main` function initializes the app by calling `runApp` with `MyApp`.
// 2. `MyApp` is a stateless widget that sets up the MaterialApp with a title and theme.
// 3. The home screen is set to `CheckBoxDemo`, a stateful widget.
// 4. `_CheckBoxDemoState` manages the state of the checkbox using a boolean `isChecked`.
// 5. The `build` method of `_CheckBoxDemoState` returns a Scaffold with an AppBar and a centered Column.
// 6. The `CustomCheckBox` widget is used within the Column, with properties to customize its appearance and behavior.
// 7. The `onChanged` callback updates the `isChecked` state when the checkbox is toggled.
// 8. A Text widget displays the current state of the checkbox below it.

<-- END_MAIN -->
```
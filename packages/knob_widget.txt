<-- START_DESCRIPTION -->

# Knob Widget Flutter Package
The Knob Widget Flutter package is a customizable and easy-to-use package for creating knob widgets in Flutter applications. It provides a simple and intuitive way to create knobs that can be used for various purposes, such as controlling audio volume, brightness, or other settings.

## Features
The Knob Widget Flutter package offers the following features:

* Customizable knob appearance, including color, size, and shape
* Support for both continuous and discrete values
* Optional label and unit text
* Support for both horizontal and vertical orientation
* Optional animation and haptic feedback

## When to Use
The Knob Widget Flutter package is suitable for use in a variety of applications, including:

* Audio and video players
* Settings and preferences screens
* Home automation and IoT applications
* Music and audio editing software

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Knob Widget Flutter Package
To use the Knob Widget Flutter package, follow these steps:

1. Add the package to your pubspec.yaml file:
```yml
dependencies:
  flutter:
    sdk: flutter
  knob_widget: ^1.0.0
```
2. Run `flutter pub get` to install the package.
3. Import the package in your Dart file:
```dart
import 'package:knob_widget/knob_widget.dart';
```
4. Create a KnobWidget instance and customize its appearance and behavior as needed:
```dart
KnobWidget(
  value: 50,
  min: 0,
  max: 100,
  step: 10,
  label: 'Volume',
  unit: '%',
  color: Colors.blue,
  size: 100,
  shape: KnobShape.circle,
  animation: true,
  hapticFeedback: true,
)
```
## Platform-Specific Details
The Knob Widget Flutter package works on both Android and iOS platforms. However, there are some platform-specific details to note:

* On Android, the knob widget uses the Material Design theme by default. To use a different theme, set the `theme` property to a custom ThemeData instance.
* On iOS, the knob widget uses the Cupertino theme by default. To use a different theme, set the `theme` property to a custom CupertinoThemeData instance.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:knob_widget/knob_widget.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  double _value = 50;

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Knob Widget Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: Scaffold(
        appBar: AppBar(
          title: Text('Knob Widget Demo'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              KnobWidget(
                value: _value,
                min: 0,
                max: 100,
                step: 10,
                label: 'Volume',
                unit: '%',
                color: Colors.blue,
                size: 100,
                shape: KnobShape.circle,
                animation: true,
                hapticFeedback: true,
                onChanged: (value) {
                  setState(() {
                    _value = value;
                  });
                },
              ),
              Text(
                'Value: ${_value.toInt()}%',
                style: TextStyle(fontSize: 24),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user interacts with the knob widget by rotating it.
// 2. The knob widget updates its value and notifies the parent widget using the onChanged callback.
// 3. The parent widget updates its state with the new value and rebuilds the UI.
// 4. The UI displays the updated value below the knob widget.
// The knob widget is customizable and can be used in a variety of applications.
// It provides a simple and intuitive way to control settings and preferences.
```

<-- END_MAIN -->
# Flutter Package: to_csv

<!-- START_DESCRIPTION -->
## Description

The `to_csv` Flutter package is a powerful tool designed to facilitate the conversion of data into CSV (Comma-Separated Values) format. This package is particularly useful for developers who need to export data from their Flutter applications, whether for reporting, data analysis, or integration with other systems. 

### When to Use

You might consider using the `to_csv` package in scenarios such as:
- Exporting user data for analytics.
- Generating reports that can be shared or imported into spreadsheet applications.
- Creating backups of application data in a simple, human-readable format.

### Features

- **Easy Data Conversion**: Convert lists of maps or lists of lists into CSV format with minimal effort.
- **Customizable Delimiters**: Choose your preferred delimiter (e.g., comma, semicolon) for CSV files.
- **File Handling**: Save the generated CSV files directly to the device storage.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS platforms.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
## Tutorial

### Installation

To get started with the `to_csv` package, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  to_csv: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command to install it:

```bash
flutter pub get
```

### Platform-Specific Details

#### Android

For Android, ensure that you have the necessary permissions to write files to external storage. You may need to add the following permissions in your `AndroidManifest.xml`:

```xml
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
```

#### iOS

For iOS, you may need to configure your app's Info.plist to allow file access. Add the following key:

```xml
<key>NSPhotoLibraryAddUsageDescription</key>
<string>We need access to save files to your photo library.</string>
```

### Basic Usage

Hereâ€™s how to use the `to_csv` package in your Flutter application:

1. Import the package:

```dart
import 'package:to_csv/to_csv.dart';
```

2. Prepare your data:

```dart
List<Map<String, dynamic>> data = [
  {"Name": "John", "Age": 30, "City": "New York"},
  {"Name": "Jane", "Age": 25, "City": "Los Angeles"},
];
```

3. Convert the data to CSV:

```dart
String csvData = ListToCsvConverter().convert(data);
```

4. Save the CSV file:

```dart
// Use the appropriate method to save the file to the device
```

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
## Complete Example

```dart
import 'package:flutter/material.dart';
import 'package:to_csv/to_csv.dart';
import 'dart:io';
import 'package:path_provider/path_provider.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'CSV Export Example',
      home: CsvExportScreen(),
    );
  }
}

class CsvExportScreen extends StatelessWidget {
  // This function generates CSV data and saves it to a file
  Future<void> _exportCsv() async {
    // Sample data to be converted to CSV
    List<Map<String, dynamic>> data = [
      {"Name": "John", "Age": 30, "City": "New York"},
      {"Name": "Jane", "Age": 25, "City": "Los Angeles"},
    ];

    // Convert the list of maps to CSV format
    String csvData = ListToCsvConverter().convert(data);

    // Get the directory to save the CSV file
    Directory directory = await getApplicationDocumentsDirectory();
    String path = '${directory.path}/data.csv';

    // Write the CSV data to the file
    File file = File(path);
    await file.writeAsString(csvData);

    // Notify the user that the file has been saved
    print('CSV file saved at: $path');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('CSV Export Example'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: _exportCsv, // Call the export function on button press
          child: Text('Export to CSV'),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the RealFlutter widget.
// 2. RealFlutter builds a MaterialApp with a title and a home screen (CsvExportScreen).
// 3. CsvExportScreen contains a button that, when pressed, triggers the _exportCsv function.
// 4. Inside _exportCsv, sample data is defined as a list of maps.
// 5. The data is converted to CSV format using ListToCsvConverter().convert(data).
// 6. The app retrieves the application's document directory to save the CSV file.
// 7. The CSV data is written to a file named 'data.csv' in the specified directory.
// 8. Finally, a message is printed to the console indicating the file's location.
```

<!-- END_MAIN -->

## Summary

In this blog post, we explored the `to_csv` Flutter package, which simplifies the process of exporting data in CSV format. We covered the installation process, platform-specific configurations, and provided a complete example demonstrating how to generate and save a CSV file. The application flow was explained step-by-step through comments in the code, making it easy to understand how the package works in a real-world scenario. This package is an excellent choice for developers looking to implement CSV export functionality in their Flutter applications.
```markdown
<!-- START_DESCRIPTION -->
# Gradient Coloured Buttons: A Flutter Package Overview

The `gradient_coloured_buttons` package is a Flutter library designed to simplify the creation of buttons with gradient backgrounds. This package allows developers to easily implement visually appealing buttons that enhance the user interface of their applications. 

## When to Use This Package
You might consider using `gradient_coloured_buttons` when:
- You want to create buttons that stand out with gradient colors.
- You are looking for a quick and easy way to implement stylish buttons without extensive customization.
- You want to maintain a consistent design language across your app with minimal effort.

## Features
- **Customizable Gradients**: Easily set gradient colors for your buttons.
- **Multiple Button Styles**: Supports various button styles, including raised and flat buttons.
- **Responsive Design**: Buttons adapt to different screen sizes and orientations.
- **Easy Integration**: Simple API that integrates seamlessly with existing Flutter projects.

Overall, `gradient_coloured_buttons` is a great choice for developers looking to enhance their app's UI with minimal effort while maintaining a modern aesthetic.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Gradient Coloured Buttons

## Installation
To use the `gradient_coloured_buttons` package, you need to add it to your `pubspec.yaml` file. Open your `pubspec.yaml` and add the following line under dependencies:

```yaml
dependencies:
  gradient_coloured_buttons: ^1.0.0
```

After adding the dependency, run the following command in your terminal to install the package:

```bash
flutter pub get
```

## Usage
Once the package is installed, you can start using it in your Flutter application. Below are the steps to create a simple app with gradient buttons.

### Platform-Specific Details
- **Android**: Ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21 to avoid compatibility issues.
- **iOS**: No specific configurations are required, but ensure your deployment target is set appropriately in `ios/Podfile`.

### Basic Example
Hereâ€™s how to create a simple Flutter app using `gradient_coloured_buttons`:

```dart
import 'package:flutter/material.dart';
import 'package:gradient_coloured_buttons/gradient_coloured_buttons.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Gradient Coloured Buttons Example')),
        body: Center(
          child: GradientButton(
            onPressed: () {
              // Action when button is pressed
              print('Gradient Button Pressed!');
            },
            gradient: LinearGradient(
              colors: [Colors.blue, Colors.purple],
            ),
            child: Text('Press Me', style: TextStyle(color: Colors.white)),
          ),
        ),
      ),
    );
  }
}
```

In this example, we create a simple app with a gradient button that prints a message to the console when pressed.

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of Gradient Coloured Buttons

```dart
import 'package:flutter/material.dart';
import 'package:gradient_coloured_buttons/gradient_coloured_buttons.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Gradient Coloured Buttons Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              // First Gradient Button
              GradientButton(
                onPressed: () {
                  // Action for the first button
                  print('First Gradient Button Pressed!');
                },
                gradient: LinearGradient(
                  colors: [Colors.red, Colors.orange],
                ),
                child: Text('First Button', style: TextStyle(color: Colors.white)),
              ),
              SizedBox(height: 20), // Space between buttons
              // Second Gradient Button
              GradientButton(
                onPressed: () {
                  // Action for the second button
                  print('Second Gradient Button Pressed!');
                },
                gradient: LinearGradient(
                  colors: [Colors.green, Colors.blue],
                ),
                child: Text('Second Button', style: TextStyle(color: Colors.white)),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function runs the RealFlutter app.
// 2. The RealFlutter class builds a MaterialApp with a Scaffold.
// 3. The Scaffold contains an AppBar and a Center widget.
// 4. Inside the Center widget, a Column is used to stack two GradientButtons vertically.
// 5. Each GradientButton has an onPressed callback that prints a message to the console when pressed.
// 6. The buttons have different gradient colors, making them visually distinct.
```
<!-- END_MAIN -->
```

### Summary
In this blog post, we explored the `gradient_coloured_buttons` Flutter package, which allows developers to create stylish gradient buttons with ease. We covered the installation process, usage examples, and provided a complete example of a Flutter application that demonstrates the package's capabilities. The application features two gradient buttons, each with its own action, showcasing how simple it is to integrate this package into your Flutter projects.
<-- START_DESCRIPTION -->

# Flutter Blue Elves Package
================================

The `flutter_blue_elves` package is a powerful tool for building Bluetooth Low Energy (BLE) applications in Flutter. It provides a simple and intuitive API for discovering, connecting, and communicating with BLE devices.

## When to Use This Package
---------------------------

This package is ideal for building applications that require BLE connectivity, such as:

* IoT applications
* Wearable devices
* Health and fitness trackers
* Smart home devices

## Features
------------

* Discover and connect to BLE devices
* Read and write data to BLE devices
* Support for multiple platforms (Android and iOS)
* Simple and intuitive API

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `flutter_blue_elves` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_blue_elves: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:flutter_blue_elves/flutter_blue_elves.dart';
```
### Step 3: Initialize the Package

Initialize the package in your `main` function:
```dart
void main() {
  runApp(MyApp());
  FlutterBlueElves.initialize();
}
```
### Platform-Specific Details

#### Android

* Add the following permissions to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.BLUETOOTH" />
<uses-permission android:name="android.permission.BLUETOOTH_ADMIN" />
```
* Add the following code to your `build.gradle` file:
```groovy
android {
  ...
  defaultConfig {
    ...
    minSdkVersion 21
  }
}
```
#### iOS

* Add the following code to your `Info.plist` file:
```xml
<key>NSBluetoothAlwaysUsageDescription</key>
<string>This app needs access to Bluetooth</string>
```
### Required Configurations

* Make sure to add the `flutter_blue_elves` package to your `pubspec.yaml` file.
* Make sure to import the package in your Dart file.
* Make sure to initialize the package in your `main` function.

### Optimizations

* Make sure to dispose of the `FlutterBlueElves` instance when it is no longer needed.
* Make sure to handle errors and exceptions properly.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_blue_elves/flutter_blue_elves.dart';

void main() {
  runApp(MyApp());
  FlutterBlueElves.initialize();
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Blue Elves Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _flutterBlueElves = FlutterBlueElves();

  @override
  void initState() {
    super.initState();
    _flutterBlueElves.scan().listen((device) {
      print('Device found: ${device.name}');
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Blue Elves Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Press the button to connect to a device',
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () async {
                final device = await _flutterBlueElves.connect();
                print('Connected to device: ${device.name}');
              },
              child: Text('Connect'),
            ),
          ],
        ),
      ),
    );
  }
}
```

// This code demonstrates the basic usage of the `flutter_blue_elves` package.
// It initializes the package, scans for devices, and connects to a device.
// The `MyHomePage` widget displays a button that, when pressed, connects to a device.
// The `connect` method returns a `Future` that resolves with the connected device.
// The `scan` method returns a `Stream` that emits devices as they are found.

// The application flow is as follows:
// 1. The `main` function initializes the `flutter_blue_elves` package.
// 2. The `MyHomePage` widget is displayed, which contains a button to connect to a device.
// 3. When the button is pressed, the `connect` method is called, which connects to a device.
// 4. The connected device is printed to the console.

<-- END_MAIN -->
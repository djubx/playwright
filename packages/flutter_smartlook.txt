<-- START_DESCRIPTION -->

# Flutter Smartlook Package
================================

The `flutter_smartlook` package is a Flutter wrapper for the Smartlook SDK, which provides a comprehensive analytics and debugging tool for mobile applications. With Smartlook, you can record and analyze user interactions, identify bugs, and improve the overall user experience of your app.

## When to Use This Package
---------------------------

You should use this package when you want to gain insights into how users interact with your app, identify issues, and optimize the user experience. Smartlook is particularly useful for:

* Debugging: Record and replay user sessions to identify bugs and issues.
* Analytics: Track user behavior, such as button clicks, screen transitions, and gestures.
* User experience optimization: Analyze user interactions to improve the app's usability and performance.

## Features
------------

The `flutter_smartlook` package provides the following features:

* Session recording: Record user interactions, including screen transitions, button clicks, and gestures.
* Event tracking: Track custom events, such as button clicks, form submissions, and API calls.
* User identification: Identify users and track their behavior across multiple sessions.
* Heatmaps: Generate heatmaps to visualize user interactions and identify areas of high engagement.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `flutter_smartlook` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_smartlook: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:flutter_smartlook/flutter_smartlook.dart';
```
### Step 3: Initialize the Smartlook SDK

Initialize the Smartlook SDK in your app's `main` function:
```dart
void main() {
  Smartlook.initialize('YOUR_API_KEY');
  runApp(MyApp());
}
```
Replace `YOUR_API_KEY` with your actual Smartlook API key.

### Step 4: Configure the Smartlook SDK (Optional)

You can configure the Smartlook SDK to customize its behavior. For example, you can set the logging level, enable or disable session recording, and set the user identifier.

### Platform-Specific Details

#### Android

To use the `flutter_smartlook` package on Android, you need to add the following permissions to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.INTERNET" />
<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
```
#### iOS

To use the `flutter_smartlook` package on iOS, you need to add the following frameworks to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_smartlook/flutter_smartlook.dart';

void main() {
  // Initialize the Smartlook SDK
  Smartlook.initialize('YOUR_API_KEY');

  // Set the user identifier
  Smartlook.setUserIdentifier('user123');

  // Enable session recording
  Smartlook.enableSessionRecording();

  // Track a custom event
  Smartlook.trackEvent('button_click');

  // Run the app
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Smartlook Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Smartlook Demo'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Track a custom event
            Smartlook.trackEvent('button_click');
          },
          child: Text('Click me'),
        ),
      ),
    );
  }
}
```

// The app initializes the Smartlook SDK with the API key and sets the user identifier.
// The app enables session recording to track user interactions.
// The app tracks a custom event when the button is clicked.
// The app runs the `MyApp` widget, which displays a button.
// When the button is clicked, the app tracks a custom event.

// The app flow is as follows:
// 1. The app initializes the Smartlook SDK and sets the user identifier.
// 2. The app enables session recording.
// 3. The app displays a button.
// 4. When the button is clicked, the app tracks a custom event.

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Flutter Waya Package Overview
=====================================

The `flutter_waya` package is a powerful tool for building robust and scalable Flutter applications. It provides a set of features that enable developers to create complex apps with ease. In this blog, we will explore the features and benefits of using the `flutter_waya` package.

### When to Use

The `flutter_waya` package is ideal for building large-scale applications that require a robust architecture. It is perfect for apps that need to handle complex business logic, multiple API calls, and data caching.

### Features

Some of the key features of the `flutter_waya` package include:

*   **Modular Architecture**: The package allows developers to build modular applications by dividing the app into smaller, independent modules.
*   **Dependency Injection**: The package provides a built-in dependency injection system that makes it easy to manage dependencies between modules.
*   **API Client**: The package includes a built-in API client that simplifies API calls and data caching.
*   **Data Caching**: The package provides a built-in data caching system that allows developers to cache data locally.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Flutter Waya Package
=====================================

To use the `flutter_waya` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:

```yml
dependencies:
  flutter_waya: ^1.0.0
```

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:flutter_waya/flutter_waya.dart';
```

### Step 3: Configure the Package

Configure the package by creating a new instance of the `Waya` class:

```dart
void main() {
  runApp(
    Waya(
      title: 'My App',
      home: MyHomePage(),
    ),
  );
}
```

### Platform-Specific Configurations

#### Android

To use the package on Android, add the following line to your `AndroidManifest.xml` file:

```xml
<application
  ...
  android:usesCleartextTraffic="true"
  ...>
</application>
```

#### iOS

To use the package on iOS, add the following line to your `Info.plist` file:

```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_waya/flutter_waya.dart';

void main() {
  runApp(
    Waya(
      title: 'My App',
      home: MyHomePage(),
    ),
  );
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  // Create a new instance of the Waya API client
  final _apiClient = WayaApiClient();

  // Create a new instance of the Waya data cache
  final _dataCache = WayaDataCache();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('My App'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            // Use the Waya API client to make an API call
            ElevatedButton(
              onPressed: () async {
                final response = await _apiClient.get('https://api.example.com/data');
                print(response.body);
              },
              child: Text('Make API Call'),
            ),
            // Use the Waya data cache to cache data locally
            ElevatedButton(
              onPressed: () async {
                await _dataCache.set('key', 'value');
                final value = await _dataCache.get('key');
                print(value);
              },
              child: Text('Cache Data'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and is presented with a button to make an API call.
// 2. When the user clicks the button, the Waya API client is used to make a GET request to the specified API endpoint.
// 3. The response from the API is printed to the console.
// 4. The user is also presented with a button to cache data locally.
// 5. When the user clicks the button, the Waya data cache is used to set a value for a given key.
// 6. The value is then retrieved from the cache using the same key and printed to the console.

// In summary, this code demonstrates the use of the Waya package to make API calls and cache data locally.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

Stacked Notification Cards Flutter Package
=====================================

The `stacked_notification_cards` Flutter package is a customizable and animated notification card system that can be used to display notifications in a visually appealing way. It is designed to be highly customizable, allowing developers to tailor the look and feel of the notification cards to their specific needs.

When to Use This Package
------------------------

This package is ideal for applications that require a notification system that is both visually appealing and customizable. Some examples of when to use this package include:

* Displaying in-app notifications, such as new message notifications or friend requests
* Displaying system notifications, such as low battery warnings or network connectivity issues
* Creating a custom notification system for a specific application or use case

Features
--------

The `stacked_notification_cards` package includes the following features:

* Customizable notification card design and layout
* Animated notification card display and dismissal
* Support for multiple notification card types (e.g. success, error, warning)
* Support for custom notification card content (e.g. text, images, buttons)

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
---------------

To use the `stacked_notification_cards` package, follow these steps:

1. Add the package to your Flutter project by adding the following line to your `pubspec.yaml` file:
```yml
dependencies:
  stacked_notification_cards: ^1.0.0
```
2. Import the package in your Dart file:
```dart
import 'package:stacked_notification_cards/stacked_notification_cards.dart';
```
3. Create a new instance of the `StackedNotificationCards` widget:
```dart
StackedNotificationCards(
  // Customization options
  cardColor: Colors.white,
  cardShadowColor: Colors.black,
  cardBorderRadius: 10,
  // Notification card content
  children: [
    Text('Notification 1'),
    Text('Notification 2'),
    Text('Notification 3'),
  ],
)
```
4. Display the notification cards using the `show` method:
```dart
StackedNotificationCards(
  // ...
).show();
```
Platform-Specific Details
-------------------------

### Android

To use the `stacked_notification_cards` package on Android, you will need to add the following line to your `AndroidManifest.xml` file:
```xml
<application
  // ...
  android:hardwareAccelerated="true"
  // ...
>
```
This will enable hardware acceleration for the notification cards, which is required for the animations to work properly.

### iOS

To use the `stacked_notification_cards` package on iOS, you will need to add the following line to your `Info.plist` file:
```xml
<key>UIViewControllerBasedStatusBarAppearance</key>
<false/>
```
This will allow the notification cards to be displayed over the status bar.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:stacked_notification_cards/stacked_notification_cards.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Stacked Notification Cards Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _scaffoldKey = GlobalKey<ScaffoldState>();

  void _showNotificationCards() {
    // Create a new instance of the StackedNotificationCards widget
    StackedNotificationCards(
      // Customization options
      cardColor: Colors.white,
      cardShadowColor: Colors.black,
      cardBorderRadius: 10,
      // Notification card content
      children: [
        Text('Notification 1'),
        Text('Notification 2'),
        Text('Notification 3'),
      ],
    ).show();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      key: _scaffoldKey,
      appBar: AppBar(
        title: Text('Stacked Notification Cards Demo'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: _showNotificationCards,
          child: Text('Show Notification Cards'),
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user presses the "Show Notification Cards" button.
// 2. The _showNotificationCards method is called, which creates a new instance of the StackedNotificationCards widget.
// 3. The StackedNotificationCards widget is displayed over the current screen, showing the notification cards.
// 4. The user can dismiss the notification cards by tapping on the screen outside of the cards.
// 5. The StackedNotificationCards widget is removed from the screen, and the user can interact with the underlying screen again.

// Summary:
// The StackedNotificationCards package provides a customizable and animated notification card system for Flutter applications.
// The package can be used to display notifications in a visually appealing way, and can be customized to fit the needs of the application.
// The example code demonstrates how to use the package to display notification cards, and how to customize the appearance and behavior of the cards.
```

<-- END_MAIN -->
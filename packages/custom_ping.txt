```markdown
<!-- START_DESCRIPTION -->
# Custom Ping Flutter Package

The `custom_ping` Flutter package is a powerful tool designed for developers who need to implement network connectivity checks in their applications. This package allows you to ping a server and determine its availability, which is essential for applications that rely on internet connectivity. 

## When to Use This Package
- **Network Monitoring**: To check if a server is reachable before making API calls.
- **User Feedback**: To provide real-time feedback to users about their network status.
- **Performance Testing**: To measure the latency of network requests.

## Features
- **Simple API**: Easy to use with a straightforward interface.
- **Customizable Timeout**: Set a timeout for the ping requests.
- **Support for IPv4 and IPv6**: Works with both types of IP addresses.
- **Error Handling**: Provides detailed error messages for failed pings.

Overall, `custom_ping` is an excellent choice for Flutter developers looking to enhance their applications with network connectivity features.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Custom Ping

## Installation
To add the `custom_ping` package to your Flutter project, include it in your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  custom_ping: ^latest_version
```

Make sure to replace `^latest_version` with the latest version available on [pub.dev](https://pub.dev/packages/custom_ping).

## Platform-Specific Configuration

### Android
For Android, ensure that you have the necessary permissions in your `AndroidManifest.xml` file:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
```

### iOS
For iOS, you may need to add the following to your `Info.plist` to allow network requests:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

## Using the Package
To use the `custom_ping` package, you can follow these steps:

1. Import the package in your Dart file:
   ```dart
   import 'package:custom_ping/custom_ping.dart';
   ```

2. Create an instance of the `CustomPing` class and use its methods to ping a server:
   ```dart
   void pingServer() async {
     final ping = CustomPing();
     final result = await ping.ping('google.com');
     print('Ping result: $result');
   }
   ```

3. Handle the results and errors appropriately in your application.

This setup will allow you to effectively use the `custom_ping` package in your Flutter applications.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Custom Ping

```dart
import 'package:flutter/material.dart';
import 'package:custom_ping/custom_ping.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Custom Ping Example',
      home: PingHomePage(),
    );
  }
}

class PingHomePage extends StatefulWidget {
  @override
  _PingHomePageState createState() => _PingHomePageState();
}

class _PingHomePageState extends State<PingHomePage> {
  String _pingResult = 'Ping result will be shown here';
  final CustomPing _ping = CustomPing();

  // Function to ping a server
  void _pingServer() async {
    // Start the ping process
    final result = await _ping.ping('google.com');
    
    // Update the state with the ping result
    setState(() {
      _pingResult = 'Ping result: $result';
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Custom Ping Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(_pingResult), // Display the ping result
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _pingServer, // Call the ping function on button press
              child: Text('Ping Server'),
            ),
          ],
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the RealFlutter widget.
// 2. RealFlutter builds a MaterialApp with a title and a home page (PingHomePage).
// 3. PingHomePage is a stateful widget that maintains the state of the ping result.
// 4. When the user presses the "Ping Server" button, the _pingServer function is called.
// 5. Inside _pingServer, the ping method of CustomPing is called with 'google.com'.
// 6. The result of the ping is awaited and then the state is updated with the result.
// 7. The updated result is displayed on the screen, providing real-time feedback to the user.
```
<!-- END_MAIN -->
```

This structured blog post provides a comprehensive overview of the `custom_ping` Flutter package, guiding developers through its features, setup, and practical usage with a complete example.
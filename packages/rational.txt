<-- START_DESCRIPTION -->

# Rational Flutter Package
The Rational package in Flutter is a utility package that provides a simple way to work with rational numbers in your Flutter applications. Rational numbers are numbers that can be expressed as the quotient or fraction of two integers, such as 1/2 or 3/4.

## When to Use
You can use the Rational package in any Flutter application where you need to perform mathematical operations involving fractions or rational numbers. This package is particularly useful in applications that require precise calculations, such as financial or scientific apps.

## Features
The Rational package provides several key features, including:

*   Support for basic arithmetic operations (addition, subtraction, multiplication, division)
*   Support for comparison operations (equality, inequality, greater than, less than)
*   Support for conversion to and from other number types (int, double)

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Rational Package
To use the Rational package in your Flutter application, you'll need to add it to your project's `pubspec.yaml` file. Here's how:

1.  Open your project's `pubspec.yaml` file in a text editor.
2.  Add the following line to the `dependencies` section:

    ```yml
dependencies:
  rational: ^1.0.0
```

3.  Save the file and run `flutter pub get` in your terminal to install the package.

## Platform-Specific Details
The Rational package is a pure Dart package, which means it doesn't require any platform-specific configurations or optimizations. You can use it on both Android and iOS platforms without any issues.

## Using the Rational Package
To use the Rational package in your Flutter application, you'll need to import it in your Dart files. Here's an example:

```dart
import 'package:rational/rational.dart';

void main() {
  Rational rational = Rational(1, 2);
  print(rational); // prints 1/2
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:rational/rational.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  Rational _rational = Rational(1, 2);

  void _add() {
    setState(() {
      _rational = _rational + Rational(1, 3);
    });
  }

  void _subtract() {
    setState(() {
      _rational = _rational - Rational(1, 3);
    });
  }

  void _multiply() {
    setState(() {
      _rational = _rational * Rational(2, 1);
    });
  }

  void _divide() {
    setState(() {
      _rational = _rational / Rational(2, 1);
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Rational Package Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Text(
                _rational.toString(),
                style: TextStyle(fontSize: 24),
              ),
              SizedBox(height: 20),
              Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  ElevatedButton(
                    onPressed: _add,
                    child: Text('+'),
                  ),
                  SizedBox(width: 10),
                  ElevatedButton(
                    onPressed: _subtract,
                    child: Text('-'),
                  ),
                  SizedBox(width: 10),
                  ElevatedButton(
                    onPressed: _multiply,
                    child: Text('*'),
                  ),
                  SizedBox(width: 10),
                  ElevatedButton(
                    onPressed: _divide,
                    child: Text('/'),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app and sees the initial rational number (1/2) on the screen.
// 2. The user can press one of the four buttons (+, -, *, /) to perform an arithmetic operation on the rational number.
// 3. When a button is pressed, the corresponding method (_add, _subtract, _multiply, _divide) is called, which updates the rational number and rebuilds the widget tree.
// 4. The updated rational number is displayed on the screen.
// 5. The user can repeat steps 2-4 to perform multiple arithmetic operations on the rational number.

// In summary, the code flows as follows:
// - The user interacts with the app by pressing buttons.
// - The button presses trigger methods that update the rational number.
// - The updated rational number is displayed on the screen.
// - The user can repeat this process to perform multiple arithmetic operations.

```

<-- END_MAIN -->
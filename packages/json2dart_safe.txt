<-- START_DESCRIPTION -->

# json2dart_safe Flutter Package
=====================================

The `json2dart_safe` package is a powerful tool for generating Dart classes from JSON objects. It provides a safe and efficient way to convert JSON data into Dart objects, making it easier to work with JSON data in Flutter applications.

### When to Use

This package is particularly useful when working with APIs that return JSON data. It saves time and effort by automatically generating the Dart classes needed to parse the JSON data.

### Features

*   Generates Dart classes from JSON objects
*   Supports nested JSON objects and arrays
*   Handles null safety
*   Customizable class names and property names

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Using json2dart_safe in Your Flutter Project
----------------------------------------------

### Step 1: Add the Package to Your Project

Add the `json2dart_safe` package to your `pubspec.yaml` file:

```yml
dependencies:
  json2dart_safe: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:json2dart_safe/json2dart_safe.dart';
```

### Step 3: Generate Dart Classes from JSON

Use the `Json2Dart` class to generate Dart classes from your JSON data:

```dart
void main() {
  String jsonString = '{"name": "John", "age": 30, "city": "New York"}';
  Map<String, dynamic> jsonMap = jsonDecode(jsonString);

  Json2Dart json2Dart = Json2Dart();
  String dartCode = json2Dart.generateDartClass(jsonMap, 'Person');

  print(dartCode);
}
```

This will generate a `Person` class with properties for `name`, `age`, and `city`.

### Platform-Specific Details

The `json2dart_safe` package works on both Android and iOS platforms. However, if you're using a specific platform's native JSON parsing library, you may need to modify the generated Dart code to work with that library.

### Configurations and Optimizations

You can customize the generated Dart code by using the `Json2DartOptions` class:

```dart
Json2DartOptions options = Json2DartOptions(
  className: 'Person',
  propertyNames: ['name', 'age', 'city'],
  nullable: true,
);

String dartCode = json2Dart.generateDartClass(jsonMap, options);
```

This allows you to customize the class name, property names, and null safety of the generated Dart code.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
// Import the json2dart_safe package
import 'package:json2dart_safe/json2dart_safe.dart';

// Import the dart:convert library for JSON decoding
import 'dart:convert';

void main() {
  // Define a JSON string
  String jsonString = '''
  {
    "name": "John",
    "age": 30,
    "city": "New York",
    "hobbies": ["reading", "hiking", "coding"]
  }
  ''';

  // Decode the JSON string into a Map
  Map<String, dynamic> jsonMap = jsonDecode(jsonString);

  // Create a Json2Dart instance
  Json2Dart json2Dart = Json2Dart();

  // Generate a Dart class from the JSON map
  String dartCode = json2Dart.generateDartClass(jsonMap, 'Person');

  // Print the generated Dart code
  print(dartCode);
}

// The application flow is as follows:
// 1. Import the necessary packages and libraries.
// 2. Define a JSON string that represents the data to be converted.
// 3. Decode the JSON string into a Map using the jsonDecode function.
// 4. Create a Json2Dart instance to generate the Dart code.
// 5. Use the generateDartClass method to generate the Dart code from the JSON map.
// 6. Print the generated Dart code to the console.

// In summary, this code takes a JSON string, decodes it into a Map, and then uses the json2dart_safe package to generate a Dart class from the Map. The generated Dart code is then printed to the console.
```

<-- END_MAIN -->
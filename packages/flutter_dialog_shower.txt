<-- START_DESCRIPTION -->

# Flutter Dialog Shower Package
================================

The `flutter_dialog_shower` package is a Flutter package that allows you to display a variety of dialogs in your Flutter application. It provides a simple and easy-to-use API for displaying alerts, confirmations, and other types of dialogs.

## Features

* Display alerts with custom titles, messages, and buttons
* Display confirmations with custom titles, messages, and buttons
* Display loading dialogs with custom messages
* Display custom dialogs with any widget as the content

## When to Use

You can use the `flutter_dialog_shower` package in any situation where you need to display a dialog to the user. This can be for a variety of purposes, such as:

* Displaying an error message
* Asking the user to confirm an action
* Displaying a loading indicator
* Displaying a custom dialog with a specific widget as the content

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

## Step 1: Add the Package to Your Pubspec.yaml File

To use the `flutter_dialog_shower` package, you need to add it to your `pubspec.yaml` file. You can do this by adding the following line to the `dependencies` section of your `pubspec.yaml` file:
```yml
dependencies:
  flutter_dialog_shower: ^1.0.0
```
## Step 2: Import the Package in Your Dart File

Once you have added the package to your `pubspec.yaml` file, you need to import it in your Dart file. You can do this by adding the following line to the top of your Dart file:
```dart
import 'package:flutter_dialog_shower/flutter_dialog_shower.dart';
```
## Step 3: Use the Package to Display a Dialog

To display a dialog using the `flutter_dialog_shower` package, you can use one of the many methods provided by the package. For example, to display an alert dialog, you can use the `showAlertDialog` method:
```dart
RealFlutter.showAlertDialog(
  context: context,
  title: 'Alert Dialog',
  message: 'This is an alert dialog.',
  buttons: [
    RealFlutterButton(
      child: Text('OK'),
      onPressed: () {
        Navigator.of(context).pop();
      },
    ),
  ],
);
```
## Platform-Specific Details

The `flutter_dialog_shower` package works on both Android and iOS platforms. However, there are some platform-specific details to keep in mind:

* On Android, the package uses the `AlertDialog` widget to display dialogs.
* On iOS, the package uses the `UIAlertController` widget to display dialogs.

## Required Configurations or Optimizations

There are no required configurations or optimizations for using the `flutter_dialog_shower` package.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_dialog_shower/flutter_dialog_shower.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Dialog Shower Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Dialog Shower Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: () {
                // Show an alert dialog
                RealFlutter.showAlertDialog(
                  context: context,
                  title: 'Alert Dialog',
                  message: 'This is an alert dialog.',
                  buttons: [
                    RealFlutterButton(
                      child: Text('OK'),
                      onPressed: () {
                        Navigator.of(context).pop();
                      },
                    ),
                  ],
                );
              },
              child: Text('Show Alert Dialog'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                // Show a confirmation dialog
                RealFlutter.showConfirmationDialog(
                  context: context,
                  title: 'Confirmation Dialog',
                  message: 'Are you sure you want to proceed?',
                  buttons: [
                    RealFlutterButton(
                      child: Text('Yes'),
                      onPressed: () {
                        Navigator.of(context).pop();
                      },
                    ),
                    RealFlutterButton(
                      child: Text('No'),
                      onPressed: () {
                        Navigator.of(context).pop();
                      },
                    ),
                  ],
                );
              },
              child: Text('Show Confirmation Dialog'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                // Show a loading dialog
                RealFlutter.showLoadingDialog(
                  context: context,
                  message: 'Loading...',
                );
              },
              child: Text('Show Loading Dialog'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                // Show a custom dialog
                RealFlutter.showCustomDialog(
                  context: context,
                  child: Container(
                    height: 200,
                    width: 200,
                    color: Colors.red,
                    child: Center(
                      child: Text('Custom Dialog'),
                    ),
                  ),
                );
              },
              child: Text('Show Custom Dialog'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user clicks on one of the buttons to show a dialog.
// 2. The corresponding dialog is displayed using the RealFlutter.showAlertDialog, RealFlutter.showConfirmationDialog, RealFlutter.showLoadingDialog, or RealFlutter.showCustomDialog method.
// 3. The user interacts with the dialog (e.g., clicks on a button).
// 4. The dialog is dismissed using the Navigator.of(context).pop() method.
// 5. The user is returned to the main screen.

// In summary, the code flows as follows:
// 1. The user clicks on a button to show a dialog.
// 2. The dialog is displayed using the RealFlutter.showAlertDialog, RealFlutter.showConfirmationDialog, RealFlutter.showLoadingDialog, or RealFlutter.showCustomDialog method.
// 3. The user interacts with the dialog.
// 4. The dialog is dismissed.
// 5. The user is returned to the main screen.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# bazel_worker Flutter Package
================================

The `bazel_worker` package is a Flutter package that allows you to run Bazel builds and tests from within your Flutter app. This package is useful for developers who want to integrate Bazel into their Flutter development workflow.

## When to Use This Package
---------------------------

You should use this package when:

* You want to run Bazel builds and tests from within your Flutter app.
* You want to integrate Bazel into your Flutter development workflow.
* You want to automate Bazel builds and tests for your Flutter app.

## Features
------------

The `bazel_worker` package has the following features:

* Run Bazel builds and tests from within your Flutter app.
* Support for Android and iOS platforms.
* Automatic detection of Bazel installation.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the bazel_worker Package
=====================================

To use the `bazel_worker` package, follow these steps:

### Step 1: Add the Package to Your pubspec.yaml File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  bazel_worker: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:bazel_worker/bazel_worker.dart';
```
### Step 3: Create a Bazel Worker

Create a Bazel worker instance:
```dart
BazelWorker worker = BazelWorker();
```
### Step 4: Run a Bazel Build

Run a Bazel build using the `build` method:
```dart
worker.build('path/to/bazel/target');
```
### Step 5: Run a Bazel Test

Run a Bazel test using the `test` method:
```dart
worker.test('path/to/bazel/target');
```
### Platform-Specific Details

#### Android

To use the `bazel_worker` package on Android, you need to add the following lines to your `android/app/build.gradle` file:
```groovy
android {
    ...
    defaultConfig {
        ...
        externalNativeBuild {
            bazel {
                targets 'path/to/bazel/target'
            }
        }
    }
}
```
#### iOS

To use the `bazel_worker` package on iOS, you need to add the following lines to your `ios/Podfile` file:
```ruby
target 'YourApp' do
  ...
  pod 'BazelWorker', '~> 1.0.0'
end
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:bazel_worker/bazel_worker.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Bazel Worker Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  BazelWorker _worker;

  @override
  void initState() {
    super.initState();
    _worker = BazelWorker();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Bazel Worker Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: () async {
                // Run a Bazel build
                await _worker.build('path/to/bazel/target');
              },
              child: Text('Run Bazel Build'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () async {
                // Run a Bazel test
                await _worker.test('path/to/bazel/target');
              },
              child: Text('Run Bazel Test'),
            ),
          ],
        ),
      ),
    );
  }
}

// The app starts by creating a Bazel worker instance.
// When the user clicks the "Run Bazel Build" button, the app runs a Bazel build using the `build` method.
// When the user clicks the "Run Bazel Test" button, the app runs a Bazel test using the `test` method.
// The app uses the `BazelWorker` class to interact with the Bazel worker instance.
// The app uses the `build` and `test` methods to run Bazel builds and tests, respectively.
```

<-- END_MAIN -->
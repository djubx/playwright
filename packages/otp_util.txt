# Flutter Package Overview: otp_util

<!-- START_DESCRIPTION -->
## Description

The `otp_util` package is a powerful utility for generating and validating One-Time Passwords (OTPs) in Flutter applications. OTPs are widely used for enhancing security in user authentication processes, such as two-factor authentication (2FA) and password resets. This package simplifies the process of creating and verifying OTPs, making it an essential tool for developers looking to implement secure authentication mechanisms.

### When to Use `otp_util`
- **User Authentication**: When implementing 2FA or password recovery features.
- **Secure Transactions**: For applications that require additional security for sensitive transactions.
- **User Verification**: To verify user identity during registration or login processes.

### Key Features
- **OTP Generation**: Easily generate OTPs with customizable lengths and algorithms.
- **OTP Validation**: Validate user-entered OTPs against generated ones.
- **Time-based OTPs**: Support for TOTP (Time-based One-Time Password) generation.
- **Customizable Settings**: Options to configure OTP length, expiration time, and more.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
## Tutorial

### Installation

To use the `otp_util` package in your Flutter project, add it to your `pubspec.yaml` file:

```yaml
dependencies:
  otp_util: ^1.0.0  # Check for the latest version on pub.dev
```

Run the following command to install the package:

```bash
flutter pub get
```

### Platform-Specific Configuration

#### Android
No specific configuration is required for Android. Just ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file.

#### iOS
For iOS, ensure that you have the correct permissions set in your `Info.plist` if you plan to use any features that require user permissions.

### Basic Usage

To use the `otp_util` package, you need to import it into your Dart file:

```dart
import 'package:otp_util/otp_util.dart';
```

You can then generate and validate OTPs as follows:

```dart
// Generate a 6-digit OTP
String otp = OTPUtil.generateTOTP(secret: 'your_secret_key', length: 6);

// Validate the OTP
bool isValid = OTPUtil.validateTOTP(secret: 'your_secret_key', otp: userEnteredOtp);
```

### Example Configuration

Hereâ€™s a simple example of how to set up OTP generation and validation in a Flutter app:

1. Generate a secret key for the user.
2. Generate an OTP using that secret key.
3. Validate the OTP entered by the user.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
## Complete Example

```dart
import 'package:flutter/material.dart';
import 'package:otp_util/otp_util.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'OTP Util Example',
      home: OTPHomePage(),
    );
  }
}

class OTPHomePage extends StatefulWidget {
  @override
  _OTPHomePageState createState() => _OTPHomePageState();
}

class _OTPHomePageState extends State<OTPHomePage> {
  String secretKey = 'your_secret_key'; // Secret key for OTP generation
  String generatedOTP = ''; // Store the generated OTP
  String userEnteredOTP = ''; // Store user input for validation
  bool isValid = false; // Flag to check if OTP is valid

  @override
  void initState() {
    super.initState();
    // Generate a new OTP when the app starts
    generatedOTP = OTPUtil.generateTOTP(secret: secretKey, length: 6);
  }

  void validateOTP() {
    // Validate the user-entered OTP against the generated OTP
    setState(() {
      isValid = OTPUtil.validateTOTP(secret: secretKey, otp: userEnteredOTP);
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('OTP Util Example'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text('Generated OTP: $generatedOTP'), // Display the generated OTP
            TextField(
              onChanged: (value) {
                userEnteredOTP = value; // Capture user input
              },
              decoration: InputDecoration(labelText: 'Enter OTP'),
              keyboardType: TextInputType.number,
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: validateOTP, // Validate OTP on button press
              child: Text('Validate OTP'),
            ),
            SizedBox(height: 20),
            if (isValid) // Show success message if OTP is valid
              Text('OTP is valid!', style: TextStyle(color: Colors.green)),
            if (!isValid && userEnteredOTP.isNotEmpty) // Show error message if OTP is invalid
              Text('Invalid OTP, please try again.', style: TextStyle(color: Colors.red)),
          ],
        ),
      ),
    );
  }
}
```

### Application Flow Explanation

// The application starts by running the RealFlutter widget.
// In the RealFlutter widget, we set up a MaterialApp with a title and home page.
// The OTPHomePage widget is a stateful widget that manages OTP generation and validation.
// In the initState method, we generate a new OTP using a predefined secret key.
// The generated OTP is displayed on the screen.
// The user can enter their OTP in a text field.
// When the user presses the "Validate OTP" button, the validateOTP method is called.
// This method checks if the user-entered OTP matches the generated OTP.
// If the OTP is valid, a success message is displayed; otherwise, an error message is shown.
// The app provides a simple interface for generating and validating OTPs, demonstrating the core functionality of the otp_util package.

<!-- END_MAIN -->

## Summary

The `otp_util` package is a robust solution for implementing OTP functionality in Flutter applications. With its easy-to-use API for generating and validating OTPs, it can significantly enhance the security of user authentication processes. This tutorial provided a comprehensive overview of the package, including installation, usage, and a complete example application. By following the steps outlined, developers can quickly integrate OTP functionality into their Flutter projects.
Here's a detailed technical blog on the "custom_marker" Flutter package, structured as requested.

<!-- START_DESCRIPTION -->
# Custom Marker Flutter Package

The **custom_marker** Flutter package is a powerful tool for developers looking to enhance their mapping applications with custom markers. This package allows you to create and manage markers on maps with a high degree of customization, making it ideal for applications that require unique visual representations of locations.

## When to Use This Package

You might consider using the **custom_marker** package in scenarios such as:
- **Real Estate Applications**: Displaying properties on a map with unique markers for each property type.
- **Event Management**: Highlighting event locations with custom icons that represent different types of events.
- **Travel Apps**: Showing points of interest with personalized markers that provide additional information.

## Features

- **Customizable Markers**: Create markers with custom icons, colors, and sizes.
- **Interactive Markers**: Add interactivity to markers, allowing users to tap and get more information.
- **Easy Integration**: Seamlessly integrates with popular mapping libraries like Google Maps and Mapbox.
- **Performance Optimizations**: Designed to handle a large number of markers without compromising performance.

With these features, the **custom_marker** package provides a robust solution for developers looking to enhance their mapping applications with visually appealing and functional markers.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Custom Marker Package

In this tutorial, we will walk through the setup process for the **custom_marker** package and demonstrate how to use it in a Flutter application.

## Step 1: Add Dependency

To get started, add the **custom_marker** package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  custom_marker: ^1.0.0  # Check for the latest version on pub.dev
```

## Step 2: Platform-Specific Configuration

### Android Configuration

1. Open `android/app/build.gradle` and ensure you have the following permissions:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21 // Ensure this is set to at least 21
    }
}
```

2. Add the necessary permissions in `AndroidManifest.xml`:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>
```

### iOS Configuration

1. Open `ios/Runner/Info.plist` and add the following permissions:

```xml
<key>NSLocationWhenInUseUsageDescription</key>
<string>We need your location to show nearby markers.</string>
<key>NSLocationAlwaysUsageDescription</key>
<string>We need your location to show nearby markers.</string>
```

## Step 3: Import the Package

In your Dart file, import the package:

```dart
import 'package:custom_marker/custom_marker.dart';
```

## Step 4: Using the Custom Marker

You can now create a simple map with custom markers. Hereâ€™s a basic example of how to implement it:

```dart
import 'package:flutter/material.dart';
import 'package:custom_marker/custom_marker.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Custom Marker Example')),
        body: CustomMarkerMap(),
      ),
    );
  }
}

class CustomMarkerMap extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return CustomMarker(
      markers: [
        Marker(
          position: LatLng(37.7749, -122.4194), // San Francisco
          icon: Icons.location_on,
          infoWindow: InfoWindow(title: 'San Francisco'),
        ),
        Marker(
          position: LatLng(34.0522, -118.2437), // Los Angeles
          icon: Icons.location_on,
          infoWindow: InfoWindow(title: 'Los Angeles'),
        ),
      ],
    );
  }
}
```

This code sets up a basic Flutter application with a map displaying custom markers for San Francisco and Los Angeles.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Custom Marker in Flutter

```dart
import 'package:flutter/material.dart';
import 'package:custom_marker/custom_marker.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Custom Marker Example')),
        body: CustomMarkerMap(),
      ),
    );
  }
}

class CustomMarkerMap extends StatefulWidget {
  @override
  _CustomMarkerMapState createState() => _CustomMarkerMapState();
}

class _CustomMarkerMapState extends State<CustomMarkerMap> {
  late GoogleMapController mapController;

  // List of markers to display on the map
  final Set<Marker> _markers = {};

  @override
  void initState() {
    super.initState();
    // Initialize markers
    _markers.addAll([
      Marker(
        markerId: MarkerId('sf'),
        position: LatLng(37.7749, -122.4194), // San Francisco
        infoWindow: InfoWindow(title: 'San Francisco'),
        icon: BitmapDescriptor.defaultMarkerWithHue(BitmapDescriptor.hueRed), // Custom color
      ),
      Marker(
        markerId: MarkerId('la'),
        position: LatLng(34.0522, -118.2437), // Los Angeles
        infoWindow: InfoWindow(title: 'Los Angeles'),
        icon: BitmapDescriptor.defaultMarkerWithHue(BitmapDescriptor.hueBlue), // Custom color
      ),
    ]);
  }

  @override
  Widget build(BuildContext context) {
    return GoogleMap(
      onMapCreated: (GoogleMapController controller) {
        mapController = controller; // Store the controller for future use
      },
      initialCameraPosition: CameraPosition(
        target: LatLng(36.7783, -119.4179), // Center of California
        zoom: 6,
      ),
      markers: _markers, // Set the markers on the map
    );
  }
}

// Application Flow Explanation:
// 1. The RealFlutter class is the main entry point of the application.
// 2. It sets up a MaterialApp with a Scaffold containing an AppBar and the CustomMarkerMap widget.
// 3. The CustomMarkerMap widget is a StatefulWidget that manages the state of the map and markers.
// 4. In the initState method, we initialize the markers for San Francisco and Los Angeles with custom colors.
// 5. The GoogleMap widget is created with an initial camera position and the markers set.
// 6. The map is displayed with the custom markers, and tapping on a marker shows the info window with the title.
```

<!-- END_MAIN -->

## Summary

In this blog, we explored the **custom_marker** Flutter package, detailing its features and providing a step-by-step tutorial on how to set it up and use it in a Flutter application. The complete example demonstrated how to create a map with custom markers, showcasing the package's capabilities. By following the provided code and explanations, developers can easily integrate custom markers into their mapping applications, enhancing user experience and visual appeal.
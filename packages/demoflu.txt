<-- START_DESCRIPTION -->

# Demoflu Flutter Package
The demoflu Flutter package is a powerful tool for creating demo applications. It provides a simple and efficient way to showcase the features of your app, highlight its capabilities, and provide a seamless user experience.

## When to Use Demoflu
Demoflu is ideal for creating demo applications that require a high degree of customization and control. It's perfect for showcasing complex workflows, highlighting specific features, and providing a guided tour of your app.

## Key Features
Some of the key features of demoflu include:

* Customizable demo workflows
* Support for multiple demo scenarios
* Ability to highlight specific features and UI elements
* Seamless integration with existing Flutter apps

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up Demoflu
To get started with demoflu, follow these steps:

1. Add the demoflu package to your pubspec.yaml file:
```yml
dependencies:
  demoflu: ^1.0.0
```
2. Run `flutter pub get` to install the package.
3. Import the demoflu package in your Dart file:
```dart
import 'package:demoflu/demoflu.dart';
```
4. Create a new instance of the `Demoflu` class:
```dart
Demoflu demoflu = Demoflu();
```
5. Configure the demo workflow using the `addStep` method:
```dart
demoflu.addStep(
  title: 'Step 1',
  description: 'This is the first step',
  onPressed: () {
    // Perform some action
  },
);
```
6. Start the demo using the `start` method:
```dart
demoflu.start();
```

## Platform-Specific Details
Demoflu supports both Android and iOS platforms. However, there are some platform-specific details to keep in mind:

* On Android, demoflu uses the `AlertDialog` widget to display the demo workflow. You can customize the appearance of the dialog using the `alertDialogTheme` property.
* On iOS, demoflu uses the `CupertinoAlertDialog` widget to display the demo workflow. You can customize the appearance of the dialog using the `cupertinoAlertDialogTheme` property.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:demoflu/demoflu.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Demoflu Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  Demoflu demoflu = Demoflu();

  @override
  void initState() {
    super.initState();
    demoflu.addStep(
      title: 'Step 1',
      description: 'This is the first step',
      onPressed: () {
        // Perform some action
        print('Step 1 completed');
      },
    );
    demoflu.addStep(
      title: 'Step 2',
      description: 'This is the second step',
      onPressed: () {
        // Perform some action
        print('Step 2 completed');
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Demoflu Demo'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            demoflu.start();
          },
          child: Text('Start Demo'),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user clicks the "Start Demo" button.
// 2. The demoflu instance is started using the `start` method.
// 3. The first step of the demo workflow is displayed to the user.
// 4. The user clicks the "Next" button to proceed to the next step.
// 5. The second step of the demo workflow is displayed to the user.
// 6. The user clicks the "Next" button to complete the demo.
// 7. The demo is completed and the user is returned to the main screen.

// In summary, the demoflu package provides a simple and efficient way to create demo applications.
// It allows you to create a customized demo workflow with multiple steps and provides a seamless user experience.
```

<-- END_MAIN -->
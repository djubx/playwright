<-- START_DESCRIPTION -->

**dart_melty_soundfont Package Overview**
=====================================

The `dart_melty_soundfont` package is a Flutter library that allows you to play SoundFont files (.sf2) in your mobile applications. SoundFonts are a file format that contains a collection of audio samples and can be used to play musical notes.

**When to Use This Package**
---------------------------

This package is ideal for music-related applications, such as:

* Music games
* Virtual instruments
* Music composition apps
* Karaoke apps

**Features**
------------

* Play SoundFont files (.sf2)
* Support for multiple SoundFont files
* Adjustable volume and pitch
* Support for playing multiple notes simultaneously

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setup and Usage**
================

### Step 1: Add the Package to Your Project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  dart_melty_soundfont: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:dart_melty_soundfont/dart_melty_soundfont.dart';
```
### Step 3: Load the SoundFont File

Load the SoundFont file using the `SoundFont` class:
```dart
SoundFont soundFont = await SoundFont.load('assets/soundfont.sf2');
```
Make sure to add the SoundFont file to your assets in the `pubspec.yaml` file:
```yml
flutter:
  assets:
    - assets/soundfont.sf2
```
### Step 4: Play a Note

Play a note using the `playNote` method:
```dart
soundFont.playNote(60, 100); // Play middle C (60) at volume 100
```
### Platform-Specific Details

* Android: Make sure to add the `android.permission.READ_EXTERNAL_STORAGE` permission to your `AndroidManifest.xml` file.
* iOS: Make sure to add the `NSAllowsArbitraryLoads` key to your `Info.plist` file.

### Configurations and Optimizations

* You can adjust the volume and pitch of the SoundFont using the `volume` and `pitch` properties.
* You can play multiple notes simultaneously by calling the `playNote` method multiple times.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:dart_melty_soundfont/dart_melty_soundfont.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'SoundFont Example',
      home: SoundFontExample(),
    );
  }
}

class SoundFontExample extends StatefulWidget {
  @override
  _SoundFontExampleState createState() => _SoundFontExampleState();
}

class _SoundFontExampleState extends State<SoundFontExample> {
  SoundFont _soundFont;

  @override
  void initState() {
    super.initState();
    _loadSoundFont();
  }

  Future<void> _loadSoundFont() async {
    // Load the SoundFont file
    _soundFont = await SoundFont.load('assets/soundfont.sf2');
    setState(() {});
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('SoundFont Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: () {
                // Play middle C (60) at volume 100
                _soundFont.playNote(60, 100);
              },
              child: Text('Play Note'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                // Stop playing the note
                _soundFont.stopNote(60);
              },
              child: Text('Stop Note'),
            ),
          ],
        ),
      ),
    );
  }
}

// Application flow:
// 1. The app loads the SoundFont file using the `SoundFont.load` method.
// 2. The app plays a note using the `playNote` method.
// 3. The app stops playing the note using the `stopNote` method.
// The app uses the `SoundFont` class to load and play the SoundFont file.
// The app uses the `playNote` and `stopNote` methods to control the playback of the note.

```

<-- END_MAIN -->

In this example, we load a SoundFont file and play a note using the `playNote` method. We also stop playing the note using the `stopNote` method. The app uses the `SoundFont` class to load and play the SoundFont file, and the `playNote` and `stopNote` methods to control the playback of the note.
<-- START_DESCRIPTION -->

# Clipboard Watcher Flutter Package
=====================================

The `clipboard_watcher` Flutter package provides a simple way to watch and react to changes in the device's clipboard. This package is useful when you need to perform actions based on the content of the clipboard, such as automatically filling in text fields or triggering specific actions.

### Features

*   Watch for changes in the clipboard and receive notifications when the content changes.
*   Get the current content of the clipboard.
*   Clear the clipboard content.

### When to Use

*   When you need to automatically fill in text fields with the content of the clipboard.
*   When you need to trigger specific actions based on the content of the clipboard.
*   When you need to monitor the clipboard for changes and react accordingly.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

### Setup

To use the `clipboard_watcher` package, you need to add it to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  clipboard_watcher: ^1.0.0
```

Then, run `flutter pub get` to get the package.

### Platform-Specific Details

#### Android

On Android, you need to add the following permission to your `AndroidManifest.xml` file:

```xml
<uses-permission android:name="android.permission.READ_CLIPBOARD" />
```

#### iOS

On iOS, you need to add the following lines to your `Info.plist` file:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

### Using the Package

To use the package, you need to import it and create an instance of the `ClipboardWatcher` class:

```dart
import 'package:clipboard_watcher/clipboard_watcher.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final ClipboardWatcher _clipboardWatcher = ClipboardWatcher();

  @override
  void initState() {
    super.initState();
    _clipboardWatcher.addListener(() {
      // Handle clipboard changes here
    });
  }

  @override
  void dispose() {
    _clipboardWatcher.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Clipboard Watcher Example'),
      ),
      body: Center(
        child: Text('Clipboard Watcher Example'),
      ),
    );
  }
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:clipboard_watcher/clipboard_watcher.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Clipboard Watcher Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final ClipboardWatcher _clipboardWatcher = ClipboardWatcher();
  String _clipboardContent = '';

  // Step 1: Initialize the ClipboardWatcher and add a listener to handle clipboard changes
  @override
  void initState() {
    super.initState();
    _clipboardWatcher.addListener(() {
      // Step 2: Get the current clipboard content when the clipboard changes
      _clipboardWatcher.getClipboardContent().then((content) {
        setState(() {
          _clipboardContent = content;
        });
      });
    });
  }

  // Step 3: Dispose of the ClipboardWatcher when the widget is removed from the tree
  @override
  void dispose() {
    _clipboardWatcher.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Clipboard Watcher Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text('Clipboard Content:'),
            Text(_clipboardContent),
            SizedBox(height: 20),
            // Step 4: Provide a button to clear the clipboard content
            ElevatedButton(
              onPressed: () {
                _clipboardWatcher.clearClipboardContent();
              },
              child: Text('Clear Clipboard'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The ClipboardWatcher is initialized and a listener is added to handle clipboard changes.
// 2. When the clipboard changes, the current clipboard content is retrieved and displayed on the screen.
// 3. The ClipboardWatcher is disposed of when the widget is removed from the tree to prevent memory leaks.
// 4. A button is provided to clear the clipboard content.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# fonepay_flutter Package Overview
=====================================

The `fonepay_flutter` package is a Flutter plugin that allows developers to integrate Fonepay payment gateway into their Flutter applications. Fonepay is a popular payment gateway in Nepal that provides a secure and reliable way to make online transactions.

### When to Use This Package

This package is ideal for developers who want to integrate Fonepay payment gateway into their Flutter applications. It provides a simple and easy-to-use API for making payments, checking transaction status, and refunding payments.

### Features

*   Supports payment initiation, transaction status checking, and payment refund
*   Provides a simple and easy-to-use API for integrating Fonepay payment gateway
*   Supports both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the Package
=====================================

### Step 1: Add the Package to Your Flutter Project

To add the `fonepay_flutter` package to your Flutter project, add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  fonepay_flutter: ^1.0.0
```

Then, run `flutter pub get` to get the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:fonepay_flutter/fonepay_flutter.dart';
```

### Step 3: Initialize the Package

Initialize the package by calling the `FonepayFlutter.init` method:

```dart
FonepayFlutter.init(
  merchantId: 'YOUR_MERCHANT_ID',
  password: 'YOUR_PASSWORD',
);
```

Replace `YOUR_MERCHANT_ID` and `YOUR_PASSWORD` with your actual Fonepay merchant ID and password.

### Step 4: Make a Payment

To make a payment, call the `FonepayFlutter.makePayment` method:

```dart
FonepayFlutter.makePayment(
  amount: 100,
  referenceId: 'YOUR_REFERENCE_ID',
  productId: 'YOUR_PRODUCT_ID',
  productName: 'YOUR_PRODUCT_NAME',
  customerName: 'YOUR_CUSTOMER_NAME',
  customerEmail: 'YOUR_CUSTOMER_EMAIL',
  customerMobile: 'YOUR_CUSTOMER_MOBILE',
);
```

Replace the placeholders with your actual payment details.

### Platform-Specific Details

For Android, add the following code to your `AndroidManifest.xml` file:

```xml
<application>
  ...
  <meta-data
    android:name="fonepay.merchant.id"
    android:value="YOUR_MERCHANT_ID" />
  <meta-data
    android:name="fonepay.password"
    android:value="YOUR_PASSWORD" />
</application>
```

For iOS, add the following code to your `Info.plist` file:

```xml
<key>FonepayMerchantId</key>
<string>YOUR_MERCHANT_ID</string>
<key>FonepayPassword</key>
<string>YOUR_PASSWORD</string>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:fonepay_flutter/fonepay_flutter.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Fonepay Flutter Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _formKey = GlobalKey<FormState>();
  final _amountController = TextEditingController();
  final _referenceIdController = TextEditingController();
  final _productIdController = TextEditingController();
  final _productNameController = TextEditingController();
  final _customerNameController = TextEditingController();
  final _customerEmailController = TextEditingController();
  final _customerMobileController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Fonepay Flutter Demo'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              TextFormField(
                controller: _amountController,
                decoration: InputDecoration(
                  labelText: 'Amount',
                ),
                validator: (value) {
                  if (value.isEmpty) {
                    return 'Please enter amount';
                  }
                  return null;
                },
              ),
              TextFormField(
                controller: _referenceIdController,
                decoration: InputDecoration(
                  labelText: 'Reference ID',
                ),
                validator: (value) {
                  if (value.isEmpty) {
                    return 'Please enter reference ID';
                  }
                  return null;
                },
              ),
              TextFormField(
                controller: _productIdController,
                decoration: InputDecoration(
                  labelText: 'Product ID',
                ),
                validator: (value) {
                  if (value.isEmpty) {
                    return 'Please enter product ID';
                  }
                  return null;
                },
              ),
              TextFormField(
                controller: _productNameController,
                decoration: InputDecoration(
                  labelText: 'Product Name',
                ),
                validator: (value) {
                  if (value.isEmpty) {
                    return 'Please enter product name';
                  }
                  return null;
                },
              ),
              TextFormField(
                controller: _customerNameController,
                decoration: InputDecoration(
                  labelText: 'Customer Name',
                ),
                validator: (value) {
                  if (value.isEmpty) {
                    return 'Please enter customer name';
                  }
                  return null;
                },
              ),
              TextFormField(
                controller: _customerEmailController,
                decoration: InputDecoration(
                  labelText: 'Customer Email',
                ),
                validator: (value) {
                  if (value.isEmpty) {
                    return 'Please enter customer email';
                  }
                  return null;
                },
              ),
              TextFormField(
                controller: _customerMobileController,
                decoration: InputDecoration(
                  labelText: 'Customer Mobile',
                ),
                validator: (value) {
                  if (value.isEmpty) {
                    return 'Please enter customer mobile';
                  }
                  return null;
                },
              ),
              SizedBox(height: 16),
              ElevatedButton(
                onPressed: () {
                  if (_formKey.currentState.validate()) {
                    FonepayFlutter.init(
                      merchantId: 'YOUR_MERCHANT_ID',
                      password: 'YOUR_PASSWORD',
                    );
                    FonepayFlutter.makePayment(
                      amount: int.parse(_amountController.text),
                      referenceId: _referenceIdController.text,
                      productId: _productIdController.text,
                      productName: _productNameController.text,
                      customerName: _customerNameController.text,
                      customerEmail: _customerEmailController.text,
                      customerMobile: _customerMobileController.text,
                    );
                  }
                },
                child: Text('Make Payment'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user enters the payment details in the form.
// 2. The user clicks the "Make Payment" button.
// 3. The application validates the form data.
// 4. If the form data is valid, the application initializes the Fonepay Flutter plugin.
// 5. The application makes a payment using the Fonepay Flutter plugin.
// 6. The user is redirected to the Fonepay payment gateway to complete the payment.
// 7. After completing the payment, the user is redirected back to the application.
// 8. The application displays a success message to the user.

<-- END_MAIN -->
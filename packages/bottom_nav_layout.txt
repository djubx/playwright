<-- START_DESCRIPTION -->

# Bottom Navigation Layout Package
The `bottom_nav_layout` package is a Flutter package that provides a simple and customizable way to create bottom navigation bars. It is ideal for apps that require a bottom navigation bar with multiple items, each corresponding to a different screen or feature.

## Features
- Customizable bottom navigation bar with multiple items
- Supports both Android and iOS platforms
- Easy to use and integrate into existing Flutter apps
- Highly customizable, with options for changing colors, fonts, and more

## When to Use
This package is perfect for apps that require a bottom navigation bar with multiple items. For example, a social media app might use this package to create a bottom navigation bar with items for the home feed, notifications, and profile.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Using the Bottom Navigation Layout Package
In this tutorial, we will walk through the process of setting up and using the `bottom_nav_layout` package in a Flutter app.

## Step 1: Add the Package to Your Pubspec File
To use the `bottom_nav_layout` package, you need to add it to your `pubspec.yaml` file. Open your `pubspec.yaml` file and add the following line:
```yml
dependencies:
  flutter:
    sdk: flutter
  bottom_nav_layout: ^1.0.0
```
Then, run `flutter pub get` in your terminal to get the package.

## Step 2: Import the Package
In your Dart file, import the `bottom_nav_layout` package:
```dart
import 'package:bottom_nav_layout/bottom_nav_layout.dart';
```
## Step 3: Create a Bottom Navigation Bar
To create a bottom navigation bar, you need to create a `BottomNavLayout` widget and pass in a list of `BottomNavItem` widgets. Each `BottomNavItem` widget represents an item in the bottom navigation bar.
```dart
BottomNavLayout(
  items: [
    BottomNavItem(
      icon: Icons.home,
      title: 'Home',
    ),
    BottomNavItem(
      icon: Icons.notifications,
      title: 'Notifications',
    ),
    BottomNavItem(
      icon: Icons.person,
      title: 'Profile',
    ),
  ],
)
```
## Step 4: Customize the Bottom Navigation Bar
You can customize the bottom navigation bar by passing in various properties to the `BottomNavLayout` widget. For example, you can change the background color, text color, and more.
```dart
BottomNavLayout(
  backgroundColor: Colors.blue,
  textColor: Colors.white,
  items: [
    // ...
  ],
)
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:bottom_nav_layout/bottom_nav_layout.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Bottom Navigation Layout Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  int _currentIndex = 0;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: IndexedStack(
        index: _currentIndex,
        children: [
          // Home screen
          Center(
            child: Text('Home screen'),
          ),
          // Notifications screen
          Center(
            child: Text('Notifications screen'),
          ),
          // Profile screen
          Center(
            child: Text('Profile screen'),
          ),
        ],
      ),
      bottomNavigationBar: BottomNavLayout(
        // Customize the bottom navigation bar
        backgroundColor: Colors.blue,
        textColor: Colors.white,
        items: [
          BottomNavItem(
            icon: Icons.home,
            title: 'Home',
          ),
          BottomNavItem(
            icon: Icons.notifications,
            title: 'Notifications',
          ),
          BottomNavItem(
            icon: Icons.person,
            title: 'Profile',
          ),
        ],
        // Handle item taps
        onTap: (index) {
          setState(() {
            _currentIndex = index;
          });
        },
      ),
    );
  }
}

// The app starts by running the main function, which runs the MyApp widget.
// The MyApp widget builds a MaterialApp with a title and theme.
// The home of the MaterialApp is the MyHomePage widget.
// The MyHomePage widget is a stateful widget that builds a Scaffold with a body and bottom navigation bar.
// The body of the Scaffold is an IndexedStack that displays the current screen based on the _currentIndex.
// The bottom navigation bar is a BottomNavLayout widget that displays the items and handles item taps.
// When an item is tapped, the _currentIndex is updated and the IndexedStack displays the new screen.
```

<-- END_MAIN -->
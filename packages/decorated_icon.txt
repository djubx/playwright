```markdown
<!-- START_DESCRIPTION -->
# Decorated Icon Flutter Package

The `decorated_icon` Flutter package is a powerful tool that allows developers to create customizable icons with various decorations, such as shadows, borders, and background colors. This package enhances the visual appeal of icons in Flutter applications, making them more engaging and user-friendly.

## When to Use

You might consider using the `decorated_icon` package in scenarios such as:
- When you want to add a unique style to your icons that goes beyond the default Flutter icon styles.
- To create visually distinct buttons or navigation items that stand out in your app.
- When you need to implement icons that require specific decorations for branding or thematic purposes.

## Features

- **Customizable Decorations**: Easily add shadows, borders, and background colors to your icons.
- **Flexible Sizing**: Control the size of the icon and its decorations independently.
- **Easy Integration**: Simple to integrate into existing Flutter projects with minimal setup.

Overall, the `decorated_icon` package is an excellent choice for developers looking to enhance their app's UI with stylish and customizable icons.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Decorated Icon Package

## Step 1: Adding the Dependency

To get started with the `decorated_icon` package, you need to add it to your `pubspec.yaml` file. Open the file and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  decorated_icon: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command in your terminal to install it:

```bash
flutter pub get
```

## Step 2: Platform-Specific Configuration

### Android

For Android, ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
        ...
    }
}
```

### iOS

For iOS, you may need to update your `ios/Podfile` to ensure compatibility with the latest Flutter versions. Make sure to uncomment the platform line and set it to at least 10.0:

```ruby
platform :ios, '10.0'
```

## Step 3: Using the Decorated Icon

Now that you have set up the package, you can start using it in your Flutter application. Hereâ€™s a simple example of how to use the `DecoratedIcon` widget:

```dart
import 'package:flutter/material.dart';
import 'package:decorated_icon/decorated_icon.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Decorated Icon Example')),
        body: Center(
          child: DecoratedIcon(
            Icons.star,
            color: Colors.yellow,
            size: 100,
            decoration: BoxDecoration(
              color: Colors.blueAccent,
              borderRadius: BorderRadius.circular(10),
              boxShadow: [
                BoxShadow(
                  color: Colors.black26,
                  blurRadius: 10,
                  offset: Offset(0, 5),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
```

This code creates a simple Flutter app with a decorated star icon at the center of the screen.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using the Decorated Icon Package

```dart
import 'package:flutter/material.dart';
import 'package:decorated_icon/decorated_icon.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Decorated Icon Demo',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Decorated Icon Example'),
        ),
        body: Center(
          // Center widget to align the icon in the middle of the screen
          child: DecoratedIcon(
            Icons.star, // The icon to be decorated
            color: Colors.yellow, // Color of the icon
            size: 100, // Size of the icon
            decoration: BoxDecoration(
              color: Colors.blueAccent, // Background color of the decoration
              borderRadius: BorderRadius.circular(10), // Rounded corners
              boxShadow: [
                BoxShadow(
                  color: Colors.black26, // Shadow color
                  blurRadius: 10, // Blur radius of the shadow
                  offset: Offset(0, 5), // Offset of the shadow
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function starts the app by calling runApp with RealFlutter.
// 2. RealFlutter is a StatelessWidget that builds the MaterialApp.
// 3. The MaterialApp contains a Scaffold with an AppBar and a Center widget.
// 4. The Center widget contains a DecoratedIcon, which displays a star icon.
// 5. The DecoratedIcon is styled with a yellow color, a size of 100, and a blue background with rounded corners and a shadow.
// 6. The app displays the decorated icon in the center of the screen, providing a visually appealing UI element.
```
<!-- END_MAIN -->
``` 

This structured blog provides a comprehensive overview of the `decorated_icon` package, guiding users through its features, setup, and practical usage with a complete example.
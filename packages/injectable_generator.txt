<-- START_DESCRIPTION -->

# Injectable Generator Flutter Package
=====================================

The `injectable_generator` package is a powerful tool for managing dependencies in Flutter applications. It allows you to generate boilerplate code for injecting dependencies into your widgets, making your code more modular and easier to maintain.

## When to Use This Package
---------------------------

You should use this package when you want to decouple your widgets from the business logic of your application. This is especially useful when you have a large application with many features and you want to keep your code organized.

## Features
------------

*   Automatic generation of boilerplate code for injecting dependencies
*   Support for multiple injection types (e.g., singleton, factory, lazy)
*   Compatible with both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using Injectable Generator
=====================================================

## Step 1: Add the Package to Your Project
-----------------------------------------

Add the following dependencies to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  injectable_generator: ^1.2.3

dev_dependencies:
  build_runner: ^1.10.0
```

## Step 2: Create a Configuration File
--------------------------------------

Create a new file called `injectable.config.dart` with the following content:

```dart
import 'package:injectable_generator/injectable_generator.dart';

@InjectableConfig(
  generator: InjectableGenerator(),
  inputs: [
    'lib/**/*.dart',
  ],
)
```

## Step 3: Run the Build Runner
-------------------------------

Run the following command in your terminal:

```bash
flutter pub run build_runner build
```

## Step 4: Use the Injectable Generator
--------------------------------------

Create a new file called `real_flutter.dart` with the following content:

```dart
import 'package:flutter/material.dart';
import 'package:injectable_generator/injectable_generator.dart';

@injectable
class RealFlutter {
  final String _message;

  RealFlutter(this._message);

  void showMessage() {
    print(_message);
  }
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
// Import the necessary packages
import 'package:flutter/material.dart';
import 'package:injectable_generator/injectable_generator.dart';

// Import the RealFlutter class
import 'real_flutter.dart';

// Create a new Flutter application
void main() {
  // Run the application
  runApp(MyApp());
}

// Define the application class
class MyApp extends StatelessWidget {
  // Create a new instance of the RealFlutter class
  final RealFlutter _realFlutter = RealFlutter('Hello, World!');

  // Build the application
  @override
  Widget build(BuildContext context) {
    // Create a new Material app
    return MaterialApp(
      // Set the title of the app
      title: 'Injectable Generator Demo',
      // Set the home page of the app
      home: MyHomePage(),
    );
  }
}

// Define the home page class
class MyHomePage extends StatelessWidget {
  // Build the home page
  @override
  Widget build(BuildContext context) {
    // Create a new Scaffold
    return Scaffold(
      // Set the app bar
      appBar: AppBar(
        // Set the title of the app bar
        title: Text('Injectable Generator Demo'),
      ),
      // Set the body of the Scaffold
      body: Center(
        // Create a new Text widget
        child: Text('Hello, World!'),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the application.
// 2. The application creates a new instance of the RealFlutter class.
// 3. The RealFlutter class is injected with the necessary dependencies.
// 4. The application builds the home page.
// 5. The home page displays a Text widget with the message 'Hello, World!'.
// 6. The user can interact with the application.

// The Injectable Generator package makes it easy to manage dependencies in the application.
// The package automatically generates boilerplate code for injecting dependencies.
// The package also supports multiple injection types, such as singleton, factory, and lazy.
```

<-- END_MAIN -->
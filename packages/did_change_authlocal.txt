<-- START_DESCRIPTION -->

# did_change_authlocal Package Overview
=====================================

The `did_change_authlocal` package is a Flutter plugin that allows you to detect changes in the device's authentication state, such as when the user unlocks or locks the device. This package provides a simple and efficient way to react to these changes, enabling you to implement features like auto-locking your app or triggering specific actions when the device is unlocked.

### When to Use This Package

You can use this package in various scenarios, such as:

* Auto-locking your app when the device is locked
* Triggering specific actions when the device is unlocked
* Implementing custom authentication flows
* Enhancing app security by reacting to device authentication state changes

### Features

The `did_change_authlocal` package provides the following features:

* Detects changes in the device's authentication state
* Provides a simple and efficient API for reacting to these changes
* Supports both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the did_change_authlocal Package
=====================================================

### Step 1: Add the Package to Your Flutter Project

Add the following dependency to your `pubspec.yaml` file:
```yml
dependencies:
  did_change_authlocal: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:did_change_authlocal/did_change_authlocal.dart';
```
### Step 3: Create an Instance of the Package

Create an instance of the `DidChangeAuthLocal` class:
```dart
DidChangeAuthLocal _authLocal = DidChangeAuthLocal();
```
### Step 4: Listen for Authentication State Changes

Use the `_authLocal` instance to listen for authentication state changes:
```dart
_authLocal.onAuthStateChanged.listen((state) {
  if (state == AuthState.unlocked) {
    // Device is unlocked
  } else if (state == AuthState.locked) {
    // Device is locked
  }
});
```
### Platform-Specific Details

#### Android

On Android, the package uses the `android.app.KeyguardManager` class to detect changes in the device's authentication state.

#### iOS

On iOS, the package uses the `NotificationCenter` class to detect changes in the device's authentication state.

### Required Configurations or Optimizations

No additional configurations or optimizations are required.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:did_change_authlocal/did_change_authlocal.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'DidChangeAuthLocal Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  DidChangeAuthLocal _authLocal = DidChangeAuthLocal();
  AuthState _authState = AuthState.unknown;

  @override
  void initState() {
    super.initState();
    _authLocal.onAuthStateChanged.listen((state) {
      setState(() {
        _authState = state;
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('DidChangeAuthLocal Demo'),
      ),
      body: Center(
        child: Text(
          _authState == AuthState.unlocked
              ? 'Device is unlocked'
              : _authState == AuthState.locked
                  ? 'Device is locked'
                  : 'Unknown authentication state',
        ),
      ),
    );
  }
}
```

// The app starts by creating an instance of the `DidChangeAuthLocal` class.
// This instance is used to listen for authentication state changes.
// When the authentication state changes, the `_authState` variable is updated.
// The UI is then rebuilt to reflect the new authentication state.
// The app displays a message indicating whether the device is unlocked, locked, or in an unknown state.

// The app flow is as follows:
// 1. The app creates an instance of the `DidChangeAuthLocal` class.
// 2. The app listens for authentication state changes using the `_authLocal` instance.
// 3. When the authentication state changes, the `_authState` variable is updated.
// 4. The UI is rebuilt to reflect the new authentication state.
// 5. The app displays a message indicating the current authentication state.

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Animated Rotating Widget Package
=====================================

The `animated_rotating_widget` package is a Flutter library that allows you to create rotating widgets with animations. It provides a simple and easy-to-use API to create rotating widgets that can be customized to fit your needs.

### When to Use This Package

This package is useful when you want to create a rotating widget that needs to be animated, such as a loading indicator or a rotating button. It can also be used to create interactive widgets that respond to user input, such as a rotating dial or a spinning wheel.

### Features

*   Create rotating widgets with animations
*   Customize the rotation animation with different curves and durations
*   Support for both clockwise and counterclockwise rotations
*   Interactive widgets that respond to user input

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

### Setup

To use the `animated_rotating_widget` package, you need to add it to your `pubspec.yaml` file:

```yml
dependencies:
  animated_rotating_widget: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Basic Usage

To create a rotating widget, you need to use the `AnimatedRotatingWidget` class:

```dart
import 'package:animated_rotating_widget/animated_rotating_widget.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Center(
        child: AnimatedRotatingWidget(
          child: Icon(Icons.refresh),
          duration: Duration(seconds: 1),
        ),
      ),
    );
  }
}
```

This will create a rotating refresh icon that rotates clockwise for 1 second.

### Customization

You can customize the rotation animation by using different curves and durations:

```dart
AnimatedRotatingWidget(
  child: Icon(Icons.refresh),
  duration: Duration(seconds: 1),
  curve: Curves.easeInOut,
  clockwise: false,
)
```

This will create a rotating refresh icon that rotates counterclockwise for 1 second with an ease-in-out curve.

### Interactive Widgets

You can create interactive widgets that respond to user input by using the `onTap` property:

```dart
AnimatedRotatingWidget(
  child: Icon(Icons.refresh),
  duration: Duration(seconds: 1),
  onTap: () {
    // Handle tap event
  },
)
```

This will create a rotating refresh icon that responds to tap events.

### Platform-Specific Details

The `animated_rotating_widget` package works on both Android and iOS platforms. However, you may need to add some platform-specific code to handle different screen sizes and densities.

For example, you can use the `MediaQuery` class to get the screen size and density:

```dart
MediaQuery.of(context).size.width
MediaQuery.of(context).devicePixelRatio
```

You can then use these values to adjust the size and position of the rotating widget.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:animated_rotating_widget/animated_rotating_widget.dart';
import 'package:flutter/material.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Animated Rotating Widget Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    // Create a scaffold with a centered rotating widget
    return Scaffold(
      appBar: AppBar(
        title: Text('Animated Rotating Widget Demo'),
      ),
      body: Center(
        // Create a rotating widget with a refresh icon
        child: AnimatedRotatingWidget(
          child: Icon(Icons.refresh, size: 48),
          duration: Duration(seconds: 1),
          curve: Curves.easeInOut,
          clockwise: false,
          // Handle tap event
          onTap: () {
            // Show a snackbar with a message
            Scaffold.of(context).showSnackBar(
              SnackBar(content: Text('Rotating widget tapped')),
            );
          },
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app and sees a centered rotating widget with a refresh icon.
// 2. The rotating widget rotates counterclockwise for 1 second with an ease-in-out curve.
// 3. When the user taps the rotating widget, a snackbar with a message appears.
// 4. The snackbar disappears after a few seconds, and the rotating widget continues to rotate.
```

<-- END_MAIN -->
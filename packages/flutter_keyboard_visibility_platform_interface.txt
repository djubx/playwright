<-- START_DESCRIPTION -->

# Flutter Keyboard Visibility Platform Interface
=============================================

The `flutter_keyboard_visibility_platform_interface` package provides a platform-agnostic interface for detecting keyboard visibility in Flutter applications. This package is useful when you need to adjust your app's layout or behavior based on whether the keyboard is visible or not.

### When to use this package?

* When you need to adjust your app's layout to accommodate the keyboard.
* When you want to show or hide certain UI elements based on keyboard visibility.
* When you need to detect keyboard visibility changes in real-time.

### Features

* Platform-agnostic interface for detecting keyboard visibility.
* Supports both Android and iOS platforms.
* Provides a simple and easy-to-use API.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
-----------------

### Step 1: Add the package to your pubspec.yaml file

```yml
dependencies:
  flutter_keyboard_visibility_platform_interface: ^1.0.0
```

### Step 2: Import the package in your Dart file

```dart
import 'package:flutter_keyboard_visibility_platform_interface/flutter_keyboard_visibility_platform_interface.dart';
```

### Step 3: Create an instance of the `FlutterKeyboardVisibilityPlatformInterface` class

```dart
final keyboardVisibility = FlutterKeyboardVisibilityPlatformInterface();
```

### Step 4: Use the `isKeyboardVisible` property to detect keyboard visibility

```dart
bool isKeyboardVisible = await keyboardVisibility.isKeyboardVisible;
```

### Platform-Specific Details

#### Android

* No additional setup is required for Android.

#### iOS

* You need to add the following code to your `Info.plist` file:
```xml
<key>UIKeyboardWillShowNotification</key>
<string>YES</string>
<key>UIKeyboardWillHideNotification</key>
<string>YES</string>
```
### Required Configurations or Optimizations

* You can optimize the package by setting the `keyboardVisibilityDelay` property to a non-zero value. This will delay the keyboard visibility detection by the specified amount of time.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_keyboard_visibility_platform_interface/flutter_keyboard_visibility_platform_interface.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Keyboard Visibility Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _keyboardVisibility = FlutterKeyboardVisibilityPlatformInterface();
  bool _isKeyboardVisible = false;

  @override
  void initState() {
    super.initState();
    _keyboardVisibility.isKeyboardVisible.then((value) {
      setState(() {
        _isKeyboardVisible = value;
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Keyboard Visibility Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              _isKeyboardVisible ? 'Keyboard is visible' : 'Keyboard is not visible',
              style: TextStyle(fontSize: 24),
            ),
            SizedBox(height: 20),
            TextField(
              decoration: InputDecoration(
                border: OutlineInputBorder(),
                labelText: 'Type something',
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// Application flow:
// 1. The app starts and creates an instance of the `FlutterKeyboardVisibilityPlatformInterface` class.
// 2. The app checks if the keyboard is visible using the `isKeyboardVisible` property.
// 3. If the keyboard is visible, the app displays a message indicating that the keyboard is visible.
// 4. If the keyboard is not visible, the app displays a message indicating that the keyboard is not visible.
// 5. When the user types something in the text field, the keyboard becomes visible and the app updates the message accordingly.
// 6. When the user hides the keyboard, the app updates the message again to indicate that the keyboard is not visible.

// Final summary:
// The app uses the `FlutterKeyboardVisibilityPlatformInterface` package to detect keyboard visibility and update the UI accordingly.
```

<-- END_MAIN -->
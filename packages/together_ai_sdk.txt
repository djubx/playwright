# Together AI SDK Flutter Package

## <-- START_DESCRIPTION -->

### Description

The `together_ai_sdk` Flutter package is designed to facilitate seamless integration of AI-driven functionalities into Flutter applications. This package is particularly useful for developers looking to enhance their apps with features such as natural language processing, image recognition, and other AI capabilities. 

### When to Use

You might consider using the `together_ai_sdk` package in scenarios such as:
- Building chatbots or virtual assistants that require natural language understanding.
- Developing applications that need to analyze images or videos for content recognition.
- Creating personalized user experiences based on AI-driven insights.

### Features

- **Natural Language Processing (NLP)**: Enables applications to understand and process human language.
- **Image Recognition**: Provides capabilities to analyze and classify images.
- **Real-time Data Processing**: Supports real-time interactions and responses.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS platforms.

## <-- END_DESCRIPTION -->

## <-- START_TUTORIAL -->

### Tutorial

To get started with the `together_ai_sdk`, follow these steps:

#### Step 1: Add Dependency

Add the package to your `pubspec.yaml` file:

```yaml
dependencies:
  together_ai_sdk: ^1.0.0  # Check for the latest version on pub.dev
```

#### Step 2: Platform-Specific Configuration

**For Android:**
1. Open `android/app/build.gradle` and ensure you have the following configurations:
   ```groovy
   android {
       ...
       defaultConfig {
           ...
           minSdkVersion 21 // or higher
           ...
       }
   }
   ```

2. Add the necessary permissions in `AndroidManifest.xml`:
   ```xml
   <uses-permission android:name="android.permission.INTERNET"/>
   ```

**For iOS:**
1. Open `ios/Runner/Info.plist` and add the following:
   ```xml
   <key>NSAppTransportSecurity</key>
   <dict>
       <key>NSAllowsArbitraryLoads</key>
       <true/>
   </dict>
   ```

#### Step 3: Initialize the SDK

In your main Dart file, initialize the SDK before using its features:

```dart
import 'package:together_ai_sdk/together_ai_sdk.dart';

void main() {
  WidgetsFlutterBinding.ensureInitialized();
  TogetherAiSdk.initialize(apiKey: 'YOUR_API_KEY'); // Replace with your actual API key
  runApp(MyApp());
}
```

### Step 4: Using the SDK

You can now use the SDK's features in your application. For example, to perform NLP tasks:

```dart
void analyzeText(String text) async {
  final response = await TogetherAiSdk.analyzeText(text);
  print(response);
}
```

## <-- END_TUTORIAL -->

## <-- START_MAIN -->

### Complete Example

Hereâ€™s a complete Flutter application that demonstrates the use of the `together_ai_sdk` package:

```dart
import 'package:flutter/material.dart';
import 'package:together_ai_sdk/together_ai_sdk.dart';

void main() {
  WidgetsFlutterBinding.ensureInitialized();
  TogetherAiSdk.initialize(apiKey: 'YOUR_API_KEY'); // Initialize the SDK with your API key
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Together AI SDK Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: HomePage(),
    );
  }
}

class HomePage extends StatefulWidget {
  @override
  _HomePageState createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  String _response = '';

  // Function to analyze text input
  void _analyzeInput(String input) async {
    // Call the analyzeText method from the SDK
    final result = await TogetherAiSdk.analyzeText(input);
    setState(() {
      _response = result; // Update the response state with the result
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Together AI SDK Demo'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            TextField(
              onSubmitted: _analyzeInput, // Analyze input on submission
              decoration: InputDecoration(
                labelText: 'Enter text to analyze',
                border: OutlineInputBorder(),
              ),
            ),
            SizedBox(height: 20),
            Text('Response: $_response'), // Display the response
          ],
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the main function, initializing the Together AI SDK with an API key.
// 2. The MyApp widget builds the MaterialApp and sets the HomePage as the home screen.
// 3. The HomePage contains a TextField for user input and a Text widget to display the response.
// 4. When the user submits text, the _analyzeInput function is called, which uses the SDK to analyze the text.
// 5. The response from the SDK is then displayed in the Text widget below the input field.

```

## <-- END_MAIN -->

### Summary

In this blog post, we explored the `together_ai_sdk` Flutter package, which provides powerful AI capabilities for Flutter applications. We covered the installation process, platform-specific configurations, and provided a complete example demonstrating how to use the package effectively. The application flow was explained step-by-step through comments in the code, making it easier for developers to understand how to integrate and utilize the SDK in their projects.
<-- START_DESCRIPTION -->

# Flutter Walkthrough Screen Package
=====================================

The `flutter_walkthrough_screen` package is a Flutter library that allows you to create a walkthrough or onboarding screen for your app. It provides a simple and customizable way to introduce your app's features to new users.

## When to Use This Package
---------------------------

You can use this package when you want to:

* Create a walkthrough or onboarding screen for your app
* Introduce new features to your users
* Provide a tutorial or guide for your app

## Features
------------

* Customizable walkthrough screen with multiple pages
* Support for text, images, and other widgets
* Animated transitions between pages
* Optional skip button and done button

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

## Step 1: Add the Package to Your Pubspec.yaml File
------------------------------------------------

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_walkthrough_screen: ^1.0.0
```
Then, run `flutter pub get` to install the package.

## Step 2: Import the Package
-----------------------------

Import the package in your Dart file:
```dart
import 'package:flutter_walkthrough_screen/flutter_walkthrough_screen.dart';
```
## Step 3: Create a Walkthrough Screen
--------------------------------------

Create a new class that extends `StatelessWidget` and use the `WalkthroughScreen` widget:
```dart
class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return WalkthroughScreen(
      pages: [
        WalkthroughPage(
          title: 'Page 1',
          content: 'This is the first page',
        ),
        WalkthroughPage(
          title: 'Page 2',
          content: 'This is the second page',
        ),
      ],
    );
  }
}
```
## Step 4: Customize the Walkthrough Screen
--------------------------------------------

You can customize the walkthrough screen by using the various properties provided by the `WalkthroughScreen` widget, such as `backgroundColor`, `pageTitleStyle`, and `pageContentStyle`.

## Platform-Specific Details
---------------------------

* For Android, you need to add the following line to your `AndroidManifest.xml` file:
```xml
<application
  ...
  android:hardwareAccelerated="true"
  ...
>
```
* For iOS, you need to add the following line to your `Info.plist` file:
```xml
<key>UIViewControllerBasedStatusBarAppearance</key>
<false/>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_walkthrough_screen/flutter_walkthrough_screen.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'RealFlutter',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Create a list of walkthrough pages
    List<WalkthroughPage> pages = [
      WalkthroughPage(
        title: 'Page 1',
        content: 'This is the first page',
        // Add an image to the page
        image: Image.asset('assets/image1.png'),
      ),
      WalkthroughPage(
        title: 'Page 2',
        content: 'This is the second page',
        // Add a custom widget to the page
        child: ElevatedButton(
          onPressed: () {
            // Navigate to the next page
            Navigator.of(context).push(
              MaterialPageRoute(builder: (context) => NextPage()),
            );
          },
          child: Text('Next'),
        ),
      ),
    ];

    // Create the walkthrough screen
    return WalkthroughScreen(
      pages: pages,
      // Set the background color of the walkthrough screen
      backgroundColor: Colors.white,
      // Set the style of the page title
      pageTitleStyle: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
      // Set the style of the page content
      pageContentStyle: TextStyle(fontSize: 18),
      // Add a skip button to the walkthrough screen
      skipButton: ElevatedButton(
        onPressed: () {
          // Navigate to the next page
          Navigator.of(context).push(
            MaterialPageRoute(builder: (context) => NextPage()),
          );
        },
        child: Text('Skip'),
      ),
      // Add a done button to the walkthrough screen
      doneButton: ElevatedButton(
        onPressed: () {
          // Navigate to the next page
          Navigator.of(context).push(
            MaterialPageRoute(builder: (context) => NextPage()),
          );
        },
        child: Text('Done'),
      ),
    );
  }
}

// Next page
class NextPage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Next Page'),
      ),
      body: Center(
        child: Text('You are on the next page'),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and is presented with the walkthrough screen.
// 2. The user can navigate through the walkthrough pages by swiping left or right.
// 3. The user can skip the walkthrough by tapping the skip button.
// 4. The user can navigate to the next page by tapping the done button.
// 5. The user is presented with the next page, which is a scaffold with an app bar and a body.
```

<-- END_MAIN -->
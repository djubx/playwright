<-- START_DESCRIPTION -->

# Geocore Flutter Package: A Comprehensive Overview
=====================================================

The Geocore Flutter package is a powerful tool for geolocation and geofencing in Flutter applications. It provides a simple and efficient way to access device location, track location changes, and define geofences.

### When to Use Geocore

*   When your app requires access to device location, such as for mapping, navigation, or location-based services.
*   When you need to track location changes, such as for fitness apps, ride-sharing services, or delivery tracking.
*   When you want to define geofences, such as for location-based notifications, reminders, or security features.

### Features of Geocore

*   **Location Services**: Access device location, including latitude, longitude, altitude, and accuracy.
*   **Location Tracking**: Track location changes, including speed, distance, and time.
*   **Geofencing**: Define geofences, including circular, polygonal, and rectangular regions.
*   **Platform-Specific Features**: Supports platform-specific features, such as Android's Fused Location Provider and iOS's Core Location.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up Geocore in Your Flutter App
=============================================

To use Geocore in your Flutter app, follow these steps:

### Step 1: Add Geocore to Your Pubspec

Add the following line to your `pubspec.yaml` file:

```yml
dependencies:
  geocore: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import Geocore

Import Geocore in your Dart file:

```dart
import 'package:geocore/geocore.dart';
```

### Step 3: Request Location Permissions

Request location permissions using the `requestPermission` method:

```dart
await Geocore.requestPermission();
```

### Step 4: Get Device Location

Get device location using the `getLocation` method:

```dart
Location location = await Geocore.getLocation();
```

### Step 5: Track Location Changes

Track location changes using the `listenLocation` method:

```dart
Geocore.listenLocation((location) {
  // Handle location change
});
```

### Step 6: Define Geofences

Define geofences using the `addGeofence` method:

```dart
Geocore.addGeofence(
  id: 'my_geofence',
  latitude: 37.7749,
  longitude: -122.4194,
  radius: 1000,
);
```

### Platform-Specific Configurations

For Android, add the following lines to your `AndroidManifest.xml` file:

```xml
<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
<uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
```

For iOS, add the following lines to your `Info.plist` file:

```xml
<key>NSLocationWhenInUseUsageDescription</key>
<string>This app needs access to location to work properly</string>
<key>NSLocationAlwaysAndWhenInUseUsageDescription</key>
<string>This app needs access to location to work properly</string>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:geocore/geocore.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatefulWidget {
  @override
  _MyAppState createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  Location _location;
  String _geofenceStatus = '';

  @override
  void initState() {
    super.initState();
    _requestPermission();
  }

  Future<void> _requestPermission() async {
    await Geocore.requestPermission();
  }

  Future<void> _getLocation() async {
    Location location = await Geocore.getLocation();
    setState(() {
      _location = location;
    });
  }

  Future<void> _listenLocation() async {
    Geocore.listenLocation((location) {
      setState(() {
        _location = location;
      });
    });
  }

  Future<void> _addGeofence() async {
    Geocore.addGeofence(
      id: 'my_geofence',
      latitude: 37.7749,
      longitude: -122.4194,
      radius: 1000,
    );
  }

  Future<void> _checkGeofence() async {
    bool inside = await Geocore.isInsideGeofence('my_geofence');
    setState(() {
      _geofenceStatus = inside ? 'Inside geofence' : 'Outside geofence';
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Geocore Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Text('Location: ${_location?.latitude}, ${_location?.longitude}'),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _getLocation,
                child: Text('Get Location'),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _listenLocation,
                child: Text('Listen Location'),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _addGeofence,
                child: Text('Add Geofence'),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _checkGeofence,
                child: Text('Check Geofence'),
              ),
              SizedBox(height: 20),
              Text(_geofenceStatus),
            ],
          ),
        ),
      ),
    );
  }
}

// The app starts by requesting location permission.
// When the permission is granted, the user can get their location by pressing the "Get Location" button.
// The user can also listen for location changes by pressing the "Listen Location" button.
// To add a geofence, the user can press the "Add Geofence" button.
// To check if they are inside the geofence, the user can press the "Check Geofence" button.
// The app displays the user's location and geofence status on the screen.

```

<-- END_MAIN -->
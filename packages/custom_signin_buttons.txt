<-- START_DESCRIPTION -->

# Custom Signin Buttons Flutter Package
=====================================

The `custom_signin_buttons` Flutter package provides a simple and customizable way to add signin buttons to your Flutter app. With this package, you can easily create signin buttons for various platforms, including Google, Facebook, Twitter, and more.

## When to Use This Package
---------------------------

You can use this package when you want to add a signin feature to your Flutter app, but don't want to spend time designing and implementing the signin buttons yourself. This package is also useful when you want to provide multiple signin options to your users.

## Features
------------

*   Customizable signin buttons for various platforms
*   Easy to use and integrate with your Flutter app
*   Supports multiple signin options

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Using the Custom Signin Buttons Flutter Package
=====================================================

## Step 1: Add the Package to Your Flutter App
---------------------------------------------

To use the `custom_signin_buttons` package, you need to add it to your Flutter app's `pubspec.yaml` file. Open the file and add the following line under the `dependencies` section:

```yml
dependencies:
  flutter:
    sdk: flutter
  custom_signin_buttons: ^1.0.0
```

Then, run `flutter pub get` in your terminal to get the package.

## Step 2: Import the Package
---------------------------

In your Dart file, import the `custom_signin_buttons` package:

```dart
import 'package:custom_signin_buttons/custom_signin_buttons.dart';
```

## Step 3: Use the Signin Buttons
------------------------------

To use the signin buttons, simply create a `CustomSignInButton` widget and specify the button type:

```dart
CustomSignInButton(
  buttonType: ButtonType.google,
  onPressed: () {
    // Handle the button press
  },
)
```

You can customize the button's appearance by using the various properties provided by the `CustomSignInButton` widget.

## Platform-Specific Details
---------------------------

### Android

To use the `custom_signin_buttons` package on Android, you need to add the following lines to your `AndroidManifest.xml` file:

```xml
<uses-permission android:name="android.permission.INTERNET" />
```

### iOS

To use the `custom_signin_buttons` package on iOS, you need to add the following lines to your `Info.plist` file:

```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:custom_signin_buttons/custom_signin_buttons.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Custom Signin Buttons Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: SignInPage(),
    );
  }
}

class SignInPage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Custom Signin Buttons Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            // Google signin button
            CustomSignInButton(
              buttonType: ButtonType.google,
              onPressed: () {
                // Handle the button press
                print('Google signin button pressed');
              },
            ),
            SizedBox(height: 20),
            // Facebook signin button
            CustomSignInButton(
              buttonType: ButtonType.facebook,
              onPressed: () {
                // Handle the button press
                print('Facebook signin button pressed');
              },
            ),
            SizedBox(height: 20),
            // Twitter signin button
            CustomSignInButton(
              buttonType: ButtonType.twitter,
              onPressed: () {
                // Handle the button press
                print('Twitter signin button pressed');
              },
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and is presented with a signin page.
// 2. The user can choose to signin with Google, Facebook, or Twitter.
// 3. When the user presses a signin button, the corresponding button press handler is called.
// 4. The button press handler can then handle the signin process, such as by calling a signin API.
// 5. Once the signin process is complete, the app can navigate to the next page.

// In this example, the button press handlers simply print a message to the console.
// In a real app, you would replace these handlers with your own signin logic.

// This code demonstrates how to use the custom_signin_buttons package to add signin buttons to your Flutter app.
// You can customize the appearance of the buttons by using the various properties provided by the CustomSignInButton widget.
```

<-- END_MAIN -->
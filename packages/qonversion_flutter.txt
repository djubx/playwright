<-- START_DESCRIPTION -->

# qonversion_flutter Package Overview
=====================================

The `qonversion_flutter` package is a Flutter wrapper for the Qonversion SDK, which provides a simple and efficient way to handle in-app purchases and subscriptions on both Android and iOS platforms. This package is designed to simplify the process of integrating Qonversion's powerful features into your Flutter application.

### When to Use This Package

You should use this package when you need to handle in-app purchases or subscriptions in your Flutter application. Qonversion provides a robust set of features, including:

*   In-app purchase handling
*   Subscription management
*   Receipt validation
*   Event tracking

### Features

The `qonversion_flutter` package provides a wide range of features, including:

*   **In-app Purchases**: Handle one-time purchases and consumable products with ease.
*   **Subscriptions**: Manage auto-renewable subscriptions and provide a seamless experience for your users.
*   **Receipt Validation**: Validate receipts for both Android and iOS platforms to ensure secure transactions.
*   **Event Tracking**: Track events and conversions to analyze user behavior and optimize your app's performance.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# qonversion_flutter Tutorial
==========================

In this tutorial, we will walk through the setup process and explain how to use the `qonversion_flutter` package in your Flutter application.

### Step 1: Add the Package to Your Project

Add the `qonversion_flutter` package to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  qonversion_flutter: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the `qonversion_flutter` package in your Dart file:

```dart
import 'package:qonversion_flutter/qonversion_flutter.dart';
```

### Step 3: Initialize Qonversion

Initialize Qonversion in your app's `main` function:

```dart
void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Qonversion.init(
    apiKey: 'YOUR_API_KEY',
    launchOptions: null,
  );
  runApp(MyApp());
}
```

Replace `YOUR_API_KEY` with your actual Qonversion API key.

### Step 4: Handle In-app Purchases

To handle in-app purchases, use the `purchaseProduct` method:

```dart
Qonversion.purchaseProduct('product_id');
```

Replace `product_id` with the actual ID of the product you want to purchase.

### Step 5: Handle Subscriptions

To handle subscriptions, use the `purchaseSubscription` method:

```dart
Qonversion.purchaseSubscription('subscription_id');
```

Replace `subscription_id` with the actual ID of the subscription you want to purchase.

### Platform-Specific Details

For Android, you need to add the following code to your `AndroidManifest.xml` file:

```xml
<application>
  ...
  <meta-data
    android:name="com.qonversion.api_key"
    android:value="YOUR_API_KEY" />
</application>
```

For iOS, you need to add the following code to your `Info.plist` file:

```xml
<key>QonversionApiKey</key>
<string>YOUR_API_KEY</string>
```

Replace `YOUR_API_KEY` with your actual Qonversion API key.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:qonversion_flutter/qonversion_flutter.dart';

void main() async {
  // Initialize Qonversion
  WidgetsFlutterBinding.ensureInitialized();
  await Qonversion.init(
    apiKey: 'YOUR_API_KEY',
    launchOptions: null,
  );

  // Run the app
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Qonversion Flutter Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              // Purchase product button
              ElevatedButton(
                onPressed: () async {
                  // Purchase a product
                  await Qonversion.purchaseProduct('product_id');
                },
                child: Text('Purchase Product'),
              ),
              // Purchase subscription button
              ElevatedButton(
                onPressed: () async {
                  // Purchase a subscription
                  await Qonversion.purchaseSubscription('subscription_id');
                },
                child: Text('Purchase Subscription'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The app starts by initializing Qonversion with the API key.
// Then, it runs the RealFlutter app, which displays two buttons:
// one for purchasing a product and one for purchasing a subscription.
// When a button is pressed, the corresponding purchase method is called.
// The purchase methods handle the purchase flow and validate the receipts.
// After a successful purchase, the app can provide the purchased content to the user.
```

<-- END_MAIN -->
# m3u_nullsafe Flutter Package

## <-- START_DESCRIPTION -->

### Overview

The `m3u_nullsafe` package is a Flutter library designed for parsing M3U playlists, which are commonly used for streaming media content. This package provides a simple and efficient way to read and manipulate M3U files, making it an excellent choice for developers looking to integrate media streaming capabilities into their Flutter applications.

### When to Use

You might consider using the `m3u_nullsafe` package in scenarios such as:
- Building a media player app that requires playlist support.
- Creating an IPTV application that streams channels from M3U files.
- Developing a music or video streaming service that utilizes M3U playlists for content organization.

### Features

- **Null Safety**: The package is built with Dart's null safety feature, ensuring safer code and reducing runtime errors.
- **Playlist Parsing**: Easily parse M3U files to extract media URLs and metadata.
- **Support for Comments**: Handle comments within M3U files seamlessly.
- **Flexible Data Structures**: Provides a structured way to access playlist items, including their attributes.

## <-- END_DESCRIPTION -->

## <-- START_TUTORIAL -->

### Installation

To add the `m3u_nullsafe` package to your Flutter project, include it in your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  m3u_nullsafe: ^1.0.0  # Check for the latest version on pub.dev
```

Run the following command to install the package:

```bash
flutter pub get
```

### Usage

#### Importing the Package

In your Dart file, import the package:

```dart
import 'package:m3u_nullsafe/m3u_nullsafe.dart';
```

#### Basic Usage Example

Here’s how to use the `m3u_nullsafe` package to parse an M3U playlist:

1. **Load the M3U File**: You can load the M3U file from assets or a network source.
2. **Parse the Playlist**: Use the provided methods to parse the content.

#### Platform-Specific Details

- **Android**: Ensure you have the necessary permissions in your `AndroidManifest.xml` if you are accessing files from external storage.
- **iOS**: Make sure to handle file access permissions appropriately in your app's settings.

### Example Code

Here’s a simple example demonstrating how to load and parse an M3U file:

```dart
import 'package:flutter/material.dart';
import 'package:m3u_nullsafe/m3u_nullsafe.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'M3U Nullsafe Example',
      home: PlaylistScreen(),
    );
  }
}

class PlaylistScreen extends StatefulWidget {
  @override
  _PlaylistScreenState createState() => _PlaylistScreenState();
}

class _PlaylistScreenState extends State<PlaylistScreen> {
  List<M3uItem> _playlistItems = [];

  @override
  void initState() {
    super.initState();
    _loadPlaylist();
  }

  Future<void> _loadPlaylist() async {
    // Load the M3U file from assets or a network source
    String m3uContent = await DefaultAssetBundle.of(context).loadString('assets/playlist.m3u');
    
    // Parse the M3U content
    final playlist = M3uParser.parse(m3uContent);
    
    // Update the state with parsed items
    setState(() {
      _playlistItems = playlist.items;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('M3U Playlist')),
      body: ListView.builder(
        itemCount: _playlistItems.length,
        itemBuilder: (context, index) {
          return ListTile(
            title: Text(_playlistItems[index].title ?? 'No Title'),
            subtitle: Text(_playlistItems[index].url),
          );
        },
      ),
    );
  }
}
```

## <-- END_TUTORIAL -->

## <-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:m3u_nullsafe/m3u_nullsafe.dart';

void main() {
  runApp(MyApp());
}

// MyApp is the main widget that initializes the application
class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'M3U Nullsafe Example', // Title of the application
      home: PlaylistScreen(), // Home screen of the app
    );
  }
}

// PlaylistScreen is a StatefulWidget that displays the M3U playlist
class PlaylistScreen extends StatefulWidget {
  @override
  _PlaylistScreenState createState() => _PlaylistScreenState();
}

// _PlaylistScreenState manages the state of the PlaylistScreen
class _PlaylistScreenState extends State<PlaylistScreen> {
  List<M3uItem> _playlistItems = []; // List to hold parsed M3U items

  @override
  void initState() {
    super.initState();
    _loadPlaylist(); // Load the playlist when the widget is initialized
  }

  // Function to load and parse the M3U playlist
  Future<void> _loadPlaylist() async {
    // Load the M3U file from assets
    String m3uContent = await DefaultAssetBundle.of(context).loadString('assets/playlist.m3u');
    
    // Parse the M3U content using M3uParser
    final playlist = M3uParser.parse(m3uContent);
    
    // Update the state with parsed items
    setState(() {
      _playlistItems = playlist.items; // Store parsed items in the state
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('M3U Playlist')), // App bar with title
      body: ListView.builder(
        itemCount: _playlistItems.length, // Number of items in the playlist
        itemBuilder: (context, index) {
          // Build a ListTile for each item in the playlist
          return ListTile(
            title: Text(_playlistItems[index].title ?? 'No Title'), // Display item title
            subtitle: Text(_playlistItems[index].url), // Display item URL
          );
        },
      ),
    );
  }
}
```

// The application starts with the `main` function, which runs the `MyApp` widget.
// `MyApp` initializes the MaterialApp and sets `PlaylistScreen` as the home widget.
// In `PlaylistScreen`, the `_loadPlaylist` method is called in `initState` to load the M3U file.
// The M3U file is read from the assets, and its content is parsed using `M3uParser`.
// The parsed items are stored in `_playlistItems`, which is then used to build a ListView.
// Each item in the ListView displays the title and URL of the media item from the playlist.

## <-- END_MAIN -->

### Summary

The `m3u_nullsafe` package provides a robust solution for parsing M3U playlists in Flutter applications. With its null safety feature and straightforward API, developers can easily integrate media streaming functionalities. The provided example demonstrates how to load and display playlist items, making it a great starting point for building more complex media applications.
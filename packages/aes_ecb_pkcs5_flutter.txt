```markdown
<!-- START_DESCRIPTION -->
# Overview of the aes_ecb_pkcs5_flutter Package

The `aes_ecb_pkcs5_flutter` package is a Flutter library that provides AES encryption and decryption using the ECB (Electronic Codebook) mode with PKCS#5 padding. This package is particularly useful for developers who need to securely encrypt sensitive data, such as user credentials or personal information, before storing or transmitting it.

## When to Use This Package
- **Data Security**: When you need to encrypt sensitive data before saving it to a database or sending it over the network.
- **User Authentication**: To securely handle user passwords and other sensitive information.
- **Compliance**: When your application needs to comply with data protection regulations that require encryption.

## Key Features
- **AES Encryption**: Implements AES encryption algorithm.
- **ECB Mode**: Uses ECB mode for encryption, which is straightforward but has its limitations.
- **PKCS#5 Padding**: Automatically handles padding for data that is not a multiple of the block size.
- **Cross-Platform**: Works on both Android and iOS platforms.

This package is a great choice for developers looking for a simple and effective way to implement encryption in their Flutter applications.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using aes_ecb_pkcs5_flutter

## Installation
To use the `aes_ecb_pkcs5_flutter` package in your Flutter project, you need to add it to your `pubspec.yaml` file. Open the file and add the following line under dependencies:

```yaml
dependencies:
  aes_ecb_pkcs5_flutter: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command in your terminal to install the package:

```bash
flutter pub get
```

## Platform-Specific Configuration
### Android
For Android, ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

### iOS
For iOS, no additional configuration is typically required. Just ensure that your project is set up to support the latest iOS versions.

## Using the Package
To use the `aes_ecb_pkcs5_flutter` package, you need to import it into your Dart file:

```dart
import 'package:aes_ecb_pkcs5_flutter/aes_ecb_pkcs5_flutter.dart';
```

### Basic Usage Example
Hereâ€™s a simple example of how to encrypt and decrypt a string using the package:

```dart
void main() {
  // Define the key and the data to encrypt
  String key = "1234567890123456"; // 16 bytes key for AES-128
  String data = "Hello, Flutter!";

  // Encrypt the data
  String encryptedData = AesEcbPkcs5Flutter.encrypt(data, key);
  print("Encrypted: $encryptedData");

  // Decrypt the data
  String decryptedData = AesEcbPkcs5Flutter.decrypt(encryptedData, key);
  print("Decrypted: $decryptedData");
}
```

This example demonstrates the basic functionality of the package, allowing you to encrypt and decrypt data easily.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of aes_ecb_pkcs5_flutter

```dart
import 'package:flutter/material.dart';
import 'package:aes_ecb_pkcs5_flutter/aes_ecb_pkcs5_flutter.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'AES ECB PKCS5 Example',
      home: EncryptionDemo(),
    );
  }
}

class EncryptionDemo extends StatefulWidget {
  @override
  _EncryptionDemoState createState() => _EncryptionDemoState();
}

class _EncryptionDemoState extends State<EncryptionDemo> {
  String _encryptedData = '';
  String _decryptedData = '';
  final String _key = "1234567890123456"; // 16 bytes key for AES-128
  final String _data = "Hello, Flutter!";

  @override
  void initState() {
    super.initState();
    _encryptData();
  }

  void _encryptData() {
    // Encrypt the data using the AES ECB PKCS5 package
    _encryptedData = AesEcbPkcs5Flutter.encrypt(_data, _key);
    // Decrypt the data to verify the encryption
    _decryptedData = AesEcbPkcs5Flutter.decrypt(_encryptedData, _key);
    // Update the UI with the encrypted and decrypted data
    setState(() {});
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('AES Encryption Demo'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text('Original Data: $_data'),
            SizedBox(height: 20),
            Text('Encrypted Data: $_encryptedData'),
            SizedBox(height: 20),
            Text('Decrypted Data: $_decryptedData'),
          ],
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the MyApp widget.
// 2. MyApp builds a MaterialApp with a title and sets EncryptionDemo as the home widget.
// 3. In the EncryptionDemo widget, we define a stateful widget to manage the encryption process.
// 4. The initState method is called when the widget is first created, triggering the _encryptData method.
// 5. The _encryptData method encrypts the original data using the provided key and stores the result.
// 6. It then decrypts the encrypted data to verify the process and updates the UI with the original, encrypted, and decrypted data.
// 7. The build method constructs the UI, displaying the original, encrypted, and decrypted data in a column layout.
```
<!-- END_MAIN -->
```

This structured blog post provides a comprehensive overview of the `aes_ecb_pkcs5_flutter` package, guiding developers through its features, setup, and practical usage with a complete example.
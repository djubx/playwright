# Simple Text Field Flutter Package

## <-- START_DESCRIPTION -->

### Overview

The `simple_text_field` Flutter package is designed to simplify the implementation of text input fields in Flutter applications. It provides a straightforward way to create customizable text fields with various features, making it an excellent choice for developers looking to enhance user input experiences without the complexity of more extensive libraries.

### When to Use

You might consider using the `simple_text_field` package when:
- You need a lightweight solution for text input.
- You want to quickly implement text fields with basic validation.
- You require customizable styles for text fields without extensive boilerplate code.

### Features

- **Customizable Styles**: Easily change the appearance of text fields to match your app's theme.
- **Validation Support**: Built-in support for basic validation to ensure user input meets specific criteria.
- **Focus Management**: Manage focus easily, allowing for better user experience during data entry.
- **Error Handling**: Display error messages directly below the text field for immediate feedback.

## <-- END_DESCRIPTION -->

## <-- START_TUTORIAL -->

### Setup Process

To get started with the `simple_text_field` package, follow these steps:

1. **Add Dependency**: Open your `pubspec.yaml` file and add the package under dependencies:

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     simple_text_field: ^1.0.0  # Check for the latest version on pub.dev
   ```

2. **Install the Package**: Run the following command in your terminal to install the package:

   ```bash
   flutter pub get
   ```

3. **Platform-Specific Configuration**:
   - **Android**: Ensure that your `android/app/build.gradle` file has the correct minimum SDK version. The package should work with the default settings, but it's good to verify.
   - **iOS**: Open your `ios/Runner/Info.plist` and ensure that you have the necessary permissions if your text fields require any specific input types (like email or phone).

### Usage

To use the `simple_text_field` package, you can import it into your Dart file:

```dart
import 'package:simple_text_field/simple_text_field.dart';
```

You can then create a simple text field in your widget tree:

```dart
SimpleTextField(
  label: 'Enter your name',
  validator: (value) {
    if (value.isEmpty) {
      return 'Name cannot be empty';
    }
    return null;
  },
)
```

This code snippet creates a text field with a label and a basic validation function that checks if the input is empty.

## <-- END_TUTORIAL -->

## <-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:simple_text_field/simple_text_field.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Simple Text Field Example',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Simple Text Field Demo'),
        ),
        body: Padding(
          padding: const EdgeInsets.all(16.0),
          child: MyForm(),
        ),
      ),
    );
  }
}

class MyForm extends StatefulWidget {
  @override
  _MyFormState createState() => _MyFormState();
}

class _MyFormState extends State<MyForm> {
  final _formKey = GlobalKey<FormState>(); // Key to manage the form state
  String _name = ''; // Variable to hold the name input

  @override
  Widget build(BuildContext context) {
    return Form(
      key: _formKey, // Assign the form key
      child: Column(
        children: <Widget>[
          // Simple text field for name input
          SimpleTextField(
            label: 'Enter your name',
            validator: (value) {
              if (value.isEmpty) {
                return 'Name cannot be empty'; // Validation message
              }
              return null; // No error
            },
            onSaved: (value) {
              _name = value; // Save the input value
            },
          ),
          SizedBox(height: 20), // Space between fields
          ElevatedButton(
            onPressed: () {
              if (_formKey.currentState.validate()) { // Validate the form
                _formKey.currentState.save(); // Save the form state
                // Show a dialog with the entered name
                showDialog(
                  context: context,
                  builder: (context) {
                    return AlertDialog(
                      title: Text('Hello, $_name!'), // Display the name
                      actions: <Widget>[
                        TextButton(
                          child: Text('OK'),
                          onPressed: () {
                            Navigator.of(context).pop(); // Close the dialog
                          },
                        ),
                      ],
                    );
                  },
                );
              }
            },
            child: Text('Submit'), // Button to submit the form
          ),
        ],
      ),
    );
  }
}
```

### Application Flow Explanation

// The application starts with the `main` function, which runs the `RealFlutter` widget.
// The `RealFlutter` widget sets up a MaterialApp with a title and a Scaffold containing an AppBar and a body.
// The body consists of a `Padding` widget that wraps the `MyForm` widget.
// The `MyForm` widget is a StatefulWidget that manages its state using a GlobalKey for the form.
// Inside the `MyForm`, a `Form` widget is created with a `SimpleTextField` for user input.
// The text field has a label and a validator that checks if the input is empty.
// When the user presses the 'Submit' button, the form is validated.
// If valid, the input is saved, and a dialog is shown displaying the entered name.
// The dialog can be dismissed by pressing the 'OK' button, which closes the dialog.

## <-- END_MAIN -->

### Summary

In this blog post, we explored the `simple_text_field` Flutter package, which provides a straightforward way to implement customizable text fields with validation. We walked through the setup process, including platform-specific configurations, and provided a complete example demonstrating how to use the package effectively. The application flow was explained step-by-step, showcasing how to manage user input and display feedback. This package is ideal for developers looking for a lightweight solution for text input in their Flutter applications.
<-- START_DESCRIPTION -->

# Introduction to gql_code_builder
=====================================

`gql_code_builder` is a Flutter package that simplifies the process of generating GraphQL code for your Flutter applications. It provides a set of tools to generate GraphQL schema, queries, mutations, and subscriptions, making it easier to work with GraphQL APIs.

## When to use gql_code_builder
-----------------------------

You should use `gql_code_builder` when:

* You want to generate GraphQL code for your Flutter application without writing boilerplate code.
* You need to work with complex GraphQL schemas and want to simplify the process of generating code.
* You want to take advantage of the package's features, such as automatic code generation and caching.

## Features
------------

* Automatic code generation for GraphQL schema, queries, mutations, and subscriptions.
* Support for complex GraphQL schemas, including unions, interfaces, and enums.
* Caching mechanism to improve performance.
* Customizable code generation options.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting up gql_code_builder
=============================

To use `gql_code_builder`, you need to add it to your Flutter project's `pubspec.yaml` file:

```yml
dependencies:
  gql_code_builder: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Platform-specific configurations
-----------------------------------

### Android

No additional configurations are required for Android.

### iOS

You need to add the following lines to your `Podfile`:

```ruby
target 'YourApp' do
  pod 'gql_code_builder', :path => '../.symlinks/plugins/gql_code_builder/ios'
end
```

Then, run `pod install` to install the pod.

## Using gql_code_builder
-------------------------

To use `gql_code_builder`, you need to create a `GqlCodeBuilder` instance and pass your GraphQL schema to it:

```dart
import 'package:gql_code_builder/gql_code_builder.dart';

void main() {
  final gqlCodeBuilder = GqlCodeBuilder(
    schema: '''
      type Query {
        users: [User!]!
      }

      type User {
        id: ID!
        name: String!
      }
    ''',
  );

  final generatedCode = gqlCodeBuilder.generateCode();
  print(generatedCode);
}
```

This will generate the necessary code for your GraphQL schema.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:gql_code_builder/gql_code_builder.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'gql_code_builder Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _gqlCodeBuilder = GqlCodeBuilder(
    schema: '''
      type Query {
        users: [User!]!
      }

      type User {
        id: ID!
        name: String!
      }
    ''',
  );

  String _generatedCode = '';

  void _generateCode() {
    final generatedCode = _gqlCodeBuilder.generateCode();
    setState(() {
      _generatedCode = generatedCode;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('gql_code_builder Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Generated Code:',
              style: TextStyle(fontSize: 24),
            ),
            Text(_generatedCode),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _generateCode,
              child: Text('Generate Code'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app and is presented with a button to generate code.
// 2. When the user clicks the button, the `_generateCode` function is called.
// 3. The `_generateCode` function uses the `GqlCodeBuilder` instance to generate code based on the provided GraphQL schema.
// 4. The generated code is then updated in the UI using `setState`.
// 5. The user can view the generated code in the UI.
```

<-- END_MAIN -->
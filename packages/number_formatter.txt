```markdown
<!-- START_DESCRIPTION -->
# Overview of the number_formatter Flutter Package

The `number_formatter` package is a powerful tool for formatting numbers in Flutter applications. It provides a simple and efficient way to format numbers according to various locales and styles, making it particularly useful for applications that require internationalization or specific number formatting standards.

## When to Use This Package
- **Currency Formatting**: When displaying monetary values in different currencies.
- **Percentage Formatting**: For applications that require percentage displays.
- **Custom Number Formats**: When you need to format numbers in a specific way, such as adding commas or controlling decimal places.

## Key Features
- **Locale Support**: Format numbers according to different locales.
- **Customizable Formats**: Create custom number formats to suit your needs.
- **Easy Integration**: Simple API that integrates seamlessly with Flutter applications.

Overall, the `number_formatter` package is an essential tool for developers looking to enhance the user experience by providing clear and localized number representations.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using number_formatter

## Installation
To add the `number_formatter` package to your Flutter project, include it in your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  number_formatter: ^2.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command to install it:

```bash
flutter pub get
```

## Platform-Specific Details
The `number_formatter` package works seamlessly on both Android and iOS platforms. There are no additional configurations required for either platform, making it easy to integrate into your Flutter application.

## Basic Usage
To use the `number_formatter` package, you need to import it into your Dart file:

```dart
import 'package:number_formatter/number_formatter.dart';
```

You can then use the provided methods to format numbers. Hereâ€™s a simple example:

```dart
void main() {
  double value = 1234567.89;
  String formattedValue = NumberFormatter.formatCurrency(value);
  print(formattedValue); // Outputs: $1,234,567.89
}
```

This example demonstrates how to format a number as currency. You can also format numbers as percentages or using custom formats.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of number_formatter in a Flutter Application

```dart
import 'package:flutter/material.dart';
import 'package:number_formatter/number_formatter.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Number Formatter Example',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Number Formatter Demo'),
        ),
        body: Center(
          child: NumberFormatterDemo(),
        ),
      ),
    );
  }
}

class NumberFormatterDemo extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Sample numbers to format
    double currencyValue = 1234567.89;
    double percentageValue = 0.85;

    // Formatting the numbers
    String formattedCurrency = NumberFormatter.formatCurrency(currencyValue);
    String formattedPercentage = NumberFormatter.formatPercentage(percentageValue);

    return Column(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        Text(
          'Formatted Currency: $formattedCurrency',
          style: TextStyle(fontSize: 20),
        ),
        SizedBox(height: 20),
        Text(
          'Formatted Percentage: $formattedPercentage',
          style: TextStyle(fontSize: 20),
        ),
      ],
    );
  }
}

// Application Flow Explanation:
// 1. The main function initializes the app by calling runApp with the RealFlutter widget.
// 2. RealFlutter builds a MaterialApp with a title and a Scaffold containing an AppBar and a centered body.
// 3. The NumberFormatterDemo widget is created, which formats and displays a currency and a percentage value.
// 4. Inside NumberFormatterDemo, two sample numbers are defined: currencyValue and percentageValue.
// 5. These numbers are formatted using the NumberFormatter methods for currency and percentage.
// 6. The formatted values are displayed in a Column widget, with appropriate styling and spacing.
```
<!-- END_MAIN -->
```

### Summary
In this blog post, we explored the `number_formatter` package, which simplifies the process of formatting numbers in Flutter applications. We covered the installation process, usage examples, and provided a complete example application that demonstrates how to format currency and percentage values. The application flow was explained step-by-step through comments, making it easy to understand how the package integrates into a Flutter project. This package is a valuable addition for any developer looking to enhance their app's number formatting capabilities.
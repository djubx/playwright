<-- START_DESCRIPTION -->

**Google Maps APIs Flutter Package**
=====================================

The `google_maps_apis` Flutter package is a powerful library that allows developers to easily integrate Google Maps into their Flutter applications. This package provides a simple and intuitive API for displaying maps, markers, and other geographic data.

**When to Use**
---------------

This package is ideal for applications that require map-based functionality, such as:

* Location-based services
* Geographic information systems (GIS)
* Ride-sharing and logistics applications
* Travel and tourism apps

**Features**
------------

The `google_maps_apis` package includes the following features:

* Map display with various tile layers (e.g., satellite, terrain, hybrid)
* Marker and polygon support
* Geocoding and reverse geocoding
* Directions and routing
* Street View integration

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setup and Configuration**
---------------------------

To use the `google_maps_apis` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  flutter:
    sdk: flutter
  google_maps_apis: ^1.2.3
```
2. Run `flutter pub get` to install the package.
3. Import the package in your Dart file:
```dart
import 'package:google_maps_apis/google_maps_apis.dart';
```
**Platform-Specific Configuration**
-----------------------------------

### Android

1. Add the following lines to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
<uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
```
2. Create a new file `google_maps_api.xml` in the `res/values` directory:
```xml
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="google_maps_key">YOUR_API_KEY_HERE</string>
</resources>
```
Replace `YOUR_API_KEY_HERE` with your actual Google Maps API key.

### iOS

1. Add the following lines to your `Info.plist` file:
```xml
<key>NSLocationWhenInUseUsageDescription</key>
<string>This app needs access to location services</string>
<key>NSLocationAlwaysUsageDescription</key>
<string>This app needs access to location services</string>
```
2. Create a new file `GoogleMaps-Info.plist` in the `Resources` directory:
```xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
    <dict>
        <key>APIKey</key>
        <string>YOUR_API_KEY_HERE</string>
    </dict>
</plist>
```
Replace `YOUR_API_KEY_HERE` with your actual Google Maps API key.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:google_maps_apis/google_maps_apis.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  GoogleMapController _mapController;
  LatLng _currentLocation;

  @override
  void initState() {
    super.initState();
    _currentLocation = LatLng(37.7749, -122.4194); // San Francisco
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Google Maps Example'),
      ),
      body: GoogleMap(
        onMapCreated: (GoogleMapController controller) {
          _mapController = controller;
        },
        initialCameraPosition: CameraPosition(
          target: _currentLocation,
          zoom: 12,
        ),
        markers: {
          Marker(
            markerId: MarkerId('current_location'),
            position: _currentLocation,
            infoWindow: InfoWindow(
              title: 'Current Location',
              snippet: 'San Francisco',
            ),
          ),
        },
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          _mapController.animateCamera(
            CameraUpdate.newCameraPosition(
              CameraPosition(
                target: LatLng(37.8024, -122.4056), // Fisherman's Wharf
                zoom: 15,
              ),
            ),
          );
        },
        child: Icon(Icons.location_pin),
      ),
    );
  }
}

// Application flow:
// 1. The app initializes with a default location (San Francisco).
// 2. The Google Map is displayed with a marker at the current location.
// 3. When the floating action button is pressed, the map animates to a new location (Fisherman's Wharf).
// 4. The marker remains at the original location, but the map has moved to a new location.

// Summary:
// This example demonstrates how to display a Google Map with a marker at a specific location.
// It also shows how to animate the map to a new location using the `animateCamera` method.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Custom Pop Up Menu Flutter Package
=====================================

The `custom_pop_up_menu` Flutter package allows developers to create custom pop-up menus for their Flutter applications. This package provides a flexible and customizable way to display pop-up menus, making it a great addition to any Flutter project.

### When to Use This Package

This package is useful when you want to display a custom pop-up menu in your Flutter application. For example, you might want to use this package to:

* Display a pop-up menu with custom items when a user clicks on a button
* Show a pop-up menu with a list of options when a user long presses on an item
* Create a custom pop-up menu with a specific design or layout

### Features

This package provides the following features:

* Customizable pop-up menu items
* Support for multiple pop-up menu items
* Ability to customize the pop-up menu's design and layout
* Support for both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Using the Custom Pop Up Menu Flutter Package
=====================================================

In this tutorial, we will walk through the setup process and explain how to use the `custom_pop_up_menu` Flutter package.

### Step 1: Add the Package to Your Project

To use this package, you need to add it to your project's `pubspec.yaml` file. Add the following line to the `dependencies` section:
```yml
dependencies:
  custom_pop_up_menu: ^1.0.0
```
Then, run `flutter pub get` to get the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:custom_pop_up_menu/custom_pop_up_menu.dart';
```
### Step 3: Create a Custom Pop-Up Menu

Create a custom pop-up menu by using the `CustomPopupMenu` widget:
```dart
CustomPopupMenu(
  child: Text('Show Pop-Up Menu'),
  items: [
    CustomPopupMenuitem(
      child: Text('Item 1'),
      onPressed: () {
        print('Item 1 pressed');
      },
    ),
    CustomPopupMenuitem(
      child: Text('Item 2'),
      onPressed: () {
        print('Item 2 pressed');
      },
    ),
  ],
)
```
### Platform-Specific Details

This package works on both Android and iOS platforms. However, you need to add the following configuration to your `AndroidManifest.xml` file for Android:
```xml
<application
  ...
  android:theme="@style/Theme.AppCompat.Light.NoActionBar"
  ...
>
```
For iOS, you need to add the following configuration to your `Info.plist` file:
```xml
<key>UIViewControllerBasedStatusBarAppearance</key>
<false/>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:custom_pop_up_menu/custom_pop_up_menu.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Custom Pop Up Menu Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Custom Pop Up Menu Demo'),
      ),
      body: Center(
        child: CustomPopupMenu(
          child: Text('Show Pop-Up Menu'),
          items: [
            CustomPopupMenuitem(
              child: Text('Item 1'),
              onPressed: () {
                print('Item 1 pressed');
              },
            ),
            CustomPopupMenuitem(
              child: Text('Item 2'),
              onPressed: () {
                print('Item 2 pressed');
              },
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user clicks on the "Show Pop-Up Menu" text.
// 2. The CustomPopupMenu widget is displayed.
// 3. The user selects an item from the pop-up menu.
// 4. The onPressed callback of the selected item is called.
// 5. The selected item is printed to the console.

// This code demonstrates the basic usage of the CustomPopupMenu widget.
// You can customize the appearance and behavior of the pop-up menu by using the various properties and methods provided by the CustomPopupMenu widget.
```

<-- END_MAIN -->
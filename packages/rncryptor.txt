```markdown
<!-- START_DESCRIPTION -->
# Overview of the rncryptor Flutter Package

The `rncryptor` package is a powerful tool for Flutter developers looking to implement encryption and decryption functionalities in their applications. It is particularly useful for securing sensitive data, such as user credentials, personal information, or any other confidential data that needs to be stored or transmitted securely.

## When to Use `rncryptor`
- **Secure Data Storage**: When you need to store sensitive information locally on the device.
- **Data Transmission**: When sending sensitive data over the network, ensuring that it is encrypted during transit.
- **User Authentication**: When handling user credentials that require encryption for security.

## Key Features
- **AES Encryption**: Utilizes the Advanced Encryption Standard (AES) for secure data encryption.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS platforms.
- **Easy Integration**: Simple API that allows for quick implementation in Flutter applications.
- **Password-Based Encryption**: Supports encryption using a password, making it user-friendly.

Overall, `rncryptor` is an essential package for any Flutter developer looking to enhance the security of their applications through robust encryption methods.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Setting Up and Using the rncryptor Package

## Installation
To get started with the `rncryptor` package, you need to add it to your Flutter project. Open your `pubspec.yaml` file and add the following dependency:

```yaml
dependencies:
  flutter:
    sdk: flutter
  rncryptor: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command to install it:

```bash
flutter pub get
```

## Platform-Specific Configuration

### Android
For Android, ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file:

```gradle
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

### iOS
For iOS, you may need to enable the `NSAppTransportSecurity` settings in your `Info.plist` if you are working with network requests. Add the following lines:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

## Basic Usage
Hereâ€™s how to use the `rncryptor` package in your Flutter application:

1. **Import the package**:
   ```dart
   import 'package:rncryptor/rncryptor.dart';
   ```

2. **Encrypting Data**:
   ```dart
   String password = "your_password";
   String dataToEncrypt = "Sensitive Data";
   String encryptedData = await RNCryptor.encrypt(dataToEncrypt, password);
   ```

3. **Decrypting Data**:
   ```dart
   String decryptedData = await RNCryptor.decrypt(encryptedData, password);
   ```

With these steps, you can easily encrypt and decrypt data in your Flutter application using the `rncryptor` package.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using rncryptor

```dart
import 'package:flutter/material.dart';
import 'package:rncryptor/rncryptor.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'RNCryptor Example',
      home: EncryptionDemo(),
    );
  }
}

class EncryptionDemo extends StatefulWidget {
  @override
  _EncryptionDemoState createState() => _EncryptionDemoState();
}

class _EncryptionDemoState extends State<EncryptionDemo> {
  String _encryptedData = '';
  String _decryptedData = '';
  final String _password = 'your_password'; // Password for encryption/decryption
  final String _dataToEncrypt = 'Sensitive Data'; // Data to be encrypted

  @override
  void initState() {
    super.initState();
    _encryptData(); // Call the method to encrypt data on initialization
  }

  // Method to encrypt data
  Future<void> _encryptData() async {
    // Encrypt the data using the password
    _encryptedData = await RNCryptor.encrypt(_dataToEncrypt, _password);
    setState(() {}); // Update the UI with the encrypted data
    _decryptData(); // Call the method to decrypt data after encryption
  }

  // Method to decrypt data
  Future<void> _decryptData() async {
    // Decrypt the previously encrypted data
    _decryptedData = await RNCryptor.decrypt(_encryptedData, _password);
    setState(() {}); // Update the UI with the decrypted data
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('RNCryptor Example'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text('Encrypted Data: $_encryptedData'), // Display encrypted data
            SizedBox(height: 20),
            Text('Decrypted Data: $_decryptedData'), // Display decrypted data
          ],
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the RealFlutter widget.
// 2. The RealFlutter widget builds a MaterialApp with a title and home set to EncryptionDemo.
// 3. In the EncryptionDemo stateful widget, we define variables for encrypted and decrypted data.
// 4. The initState method is overridden to call _encryptData when the widget is initialized.
// 5. The _encryptData method encrypts the sensitive data using the provided password and updates the UI.
// 6. After encryption, it immediately calls _decryptData to decrypt the encrypted data.
// 7. The decrypted data is then displayed in the UI.
// 8. The build method constructs the UI, showing both the encrypted and decrypted data.
```
<!-- END_MAIN -->
``` 

This structured blog post provides a comprehensive overview of the `rncryptor` package, guiding developers through its features, setup, and practical usage with a complete example.
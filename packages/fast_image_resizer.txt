```markdown
<-- START_DESCRIPTION -->

# Fast Image Resizer Flutter Package

The `fast_image_resizer` Flutter package is a powerful tool designed to efficiently resize images within your Flutter applications. This package is particularly useful when dealing with large images that need to be scaled down for performance optimization or to meet specific design requirements. 

## When to Use

- **Performance Optimization**: Resize images to reduce memory usage and improve app performance.
- **Network Efficiency**: Scale down images before uploading to save bandwidth.
- **UI Consistency**: Ensure images fit within designated UI components without distortion.

## Features

- **High Performance**: Utilizes native code for fast image processing.
- **Cross-Platform**: Supports both Android and iOS platforms.
- **Easy Integration**: Simple API for quick setup and usage.
- **Customizable**: Allows specification of target dimensions and quality.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using Fast Image Resizer

In this tutorial, we will walk through the process of setting up and using the `fast_image_resizer` package in a Flutter project. We will cover platform-specific configurations for both Android and iOS.

## Setup Process

### Step 1: Add Dependency

Add the `fast_image_resizer` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  fast_image_resizer: ^1.0.0
```

Run `flutter pub get` to install the package.

### Step 2: Android Configuration

For Android, ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```gradle
android {
    defaultConfig {
        minSdkVersion 21
    }
}
```

### Step 3: iOS Configuration

For iOS, ensure that your `Podfile` is using a platform version of at least 11.0:

```ruby
platform :ios, '11.0'
```

Run `pod install` in the `ios` directory to update the CocoaPods dependencies.

## Using the Package

To use the `fast_image_resizer`, import it in your Dart file:

```dart
import 'package:fast_image_resizer/fast_image_resizer.dart';
```

### Basic Usage

Here's a simple example of how to resize an image:

```dart
final resizedImage = await RealFlutter.resizeImage(
  imagePath: 'path/to/image.jpg',
  targetWidth: 100,
  targetHeight: 100,
  quality: 80,
);
```

- `imagePath`: Path to the image file.
- `targetWidth` and `targetHeight`: Desired dimensions.
- `quality`: Compression quality (0-100).

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:fast_image_resizer/fast_image_resizer.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Fast Image Resizer Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: ImageResizerScreen(),
    );
  }
}

class ImageResizerScreen extends StatefulWidget {
  @override
  _ImageResizerScreenState createState() => _ImageResizerScreenState();
}

class _ImageResizerScreenState extends State<ImageResizerScreen> {
  String _resizedImagePath = '';

  Future<void> _resizeImage() async {
    // Step 1: Specify the path to the original image
    final originalImagePath = 'assets/sample.jpg';

    // Step 2: Use the RealFlutter class to resize the image
    final resizedImage = await RealFlutter.resizeImage(
      imagePath: originalImagePath,
      targetWidth: 200,
      targetHeight: 200,
      quality: 90,
    );

    // Step 3: Update the state with the path to the resized image
    setState(() {
      _resizedImagePath = resizedImage;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Image Resizer'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            _resizedImagePath.isNotEmpty
                ? Image.file(File(_resizedImagePath))
                : Text('No image resized yet.'),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _resizeImage,
              child: Text('Resize Image'),
            ),
          ],
        ),
      ),
    );
  }
}

// Application Flow:
// 1. The app starts with the `MyApp` widget, which sets up the MaterialApp and theme.
// 2. The `ImageResizerScreen` is the home screen, containing a button to trigger image resizing.
// 3. When the button is pressed, `_resizeImage` is called, which uses the `RealFlutter` class to resize the image.
// 4. The resized image path is stored in `_resizedImagePath` and displayed on the screen.
// 5. The UI updates to show the resized image once the operation is complete.
```

<-- END_MAIN -->
```
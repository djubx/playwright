<-- START_DESCRIPTION -->

# Appmetrica Plugin for Flutter
================================

The Appmetrica plugin for Flutter is a powerful tool for tracking and analyzing user behavior in your mobile application. It provides a wide range of features, including event tracking, user profiling, and crash reporting.

## When to Use
--------------

You should use the Appmetrica plugin for Flutter when you need to:

* Track user behavior and analyze application usage patterns
* Monitor and report crashes and errors
* Create user profiles and track user demographics
* Integrate with other Appmetrica services, such as push notifications and A/B testing

## Features
------------

The Appmetrica plugin for Flutter provides the following features:

* Event tracking: Track custom events and user interactions in your application
* User profiling: Create and manage user profiles, including demographic data and application usage history
* Crash reporting: Monitor and report crashes and errors in your application
* Integration with other Appmetrica services: Integrate with other Appmetrica services, such as push notifications and A/B testing

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Appmetrica Plugin
---------------------------------

To set up the Appmetrica plugin for Flutter, follow these steps:

### Step 1: Add the Plugin to Your Project

Add the following dependency to your `pubspec.yaml` file:
```yml
dependencies:
  appmetrica_plugin: ^1.0.0
```
Then, run `flutter pub get` to install the plugin.

### Step 2: Initialize the Plugin

Import the plugin and initialize it in your `main` function:
```dart
import 'package:appmetrica_plugin/appmetrica_plugin.dart';

void main() {
  AppmetricaPlugin.init('YOUR_API_KEY');
  runApp(MyApp());
}
```
Replace `YOUR_API_KEY` with your actual Appmetrica API key.

### Step 3: Configure the Plugin (Optional)

You can configure the plugin to track specific events or user data. For example:
```dart
AppmetricaPlugin.config(
  trackLocation: true,
  trackCrashes: true,
);
```
This will enable location tracking and crash reporting.

### Platform-Specific Details

#### Android

To use the Appmetrica plugin on Android, you need to add the following permissions to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.INTERNET" />
<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
```
You also need to add the following meta-data to your `AndroidManifest.xml` file:
```xml
<meta-data
  android:name="com.yandex.metrica.api_key"
  android:value="YOUR_API_KEY" />
```
Replace `YOUR_API_KEY` with your actual Appmetrica API key.

#### iOS

To use the Appmetrica plugin on iOS, you need to add the following frameworks to your `Info.plist` file:
```xml
<key>NSLocationWhenInUseUsageDescription</key>
<string>This app needs access to location to work properly</string>
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```
You also need to add the following meta-data to your `Info.plist` file:
```xml
<key>com.yandex.metrica.api_key</key>
<string>YOUR_API_KEY</string>
```
Replace `YOUR_API_KEY` with your actual Appmetrica API key.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:appmetrica_plugin/appmetrica_plugin.dart';

void main() {
  AppmetricaPlugin.init('YOUR_API_KEY');
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Appmetrica Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  void initState() {
    super.initState();
    AppmetricaPlugin.config(
      trackLocation: true,
      trackCrashes: true,
    );
  }

  void _trackEvent() {
    AppmetricaPlugin.trackEvent('My Event');
  }

  void _trackError() {
    AppmetricaPlugin.trackError('My Error');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Appmetrica Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: _trackEvent,
              child: Text('Track Event'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _trackError,
              child: Text('Track Error'),
            ),
          ],
        ),
      ),
    );
  }
}
```

// This is the main entry point of the app.
// We initialize the Appmetrica plugin with our API key.
// We then run the app.

// We create a material app with a home page.
// The home page is a stateful widget that tracks events and errors.

// We configure the Appmetrica plugin to track location and crashes.
// We then define two functions to track events and errors.

// We build a scaffold with two buttons to track events and errors.
// When the buttons are pressed, the corresponding functions are called.

// The Appmetrica plugin will track the events and errors and send them to the server.

// The app will also track crashes and send them to the server.

// This is a basic example of how to use the Appmetrica plugin in a Flutter app.

<-- END_MAIN -->
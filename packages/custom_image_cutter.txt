<-- START_DESCRIPTION -->

# Custom Image Cutter Flutter Package
=====================================

The `custom_image_cutter` Flutter package is a powerful tool for cutting and editing images within Flutter applications. It provides a simple and intuitive API for developers to integrate image cutting functionality into their apps.

### When to Use This Package

This package is ideal for applications that require image editing, such as:

* Social media apps that allow users to edit and share images
* E-commerce apps that require image editing for product images
* Photo editing apps that need advanced image cutting tools

### Features

The `custom_image_cutter` package offers the following features:

* Cut images into various shapes (e.g., rectangle, circle, polygon)
* Rotate and scale images
* Undo and redo functionality
* Support for multiple image formats (e.g., JPEG, PNG, GIF)

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `custom_image_cutter` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  custom_image_cutter: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:custom_image_cutter/custom_image_cutter.dart';
```
### Step 3: Configure the Package (Optional)

You can configure the package to suit your needs. For example, you can set the default image format:
```dart
CustomImageCutter.config(
  defaultFormat: ImageFormat.png,
);
```
### Platform-Specific Details

* Android: Make sure to add the following line to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
```
* iOS: Make sure to add the following line to your `Info.plist` file:
```xml
<key>NSPhotoLibraryUsageDescription</key>
<string>This app needs access to your photo library</string>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:custom_image_cutter/custom_image_cutter.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Custom Image Cutter Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  // Create a CustomImageCutter instance
  CustomImageCutter _imageCutter = CustomImageCutter();

  // Load an image from assets
  Future<void> _loadImage() async {
    final image = await _imageCutter.loadImage('assets/image.jpg');
    setState(() {
      _imageCutter.image = image;
    });
  }

  // Cut the image into a rectangle
  Future<void> _cutImage() async {
    final rect = Rect.fromLTWH(100, 100, 200, 200);
    final image = await _imageCutter.cutImage(rect);
    setState(() {
      _imageCutter.image = image;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Custom Image Cutter Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            // Display the image
            Image.asset('assets/image.jpg'),
            SizedBox(height: 20),
            // Load image button
            ElevatedButton(
              onPressed: _loadImage,
              child: Text('Load Image'),
            ),
            SizedBox(height: 20),
            // Cut image button
            ElevatedButton(
              onPressed: _cutImage,
              child: Text('Cut Image'),
            ),
          ],
        ),
      ),
    );
  }
}

// Application flow:
// 1. The app loads an image from assets using the CustomImageCutter instance.
// 2. The user clicks the "Cut Image" button, which calls the _cutImage function.
// 3. The _cutImage function cuts the image into a rectangle using the CustomImageCutter instance.
// 4. The cut image is displayed on the screen.
```

// Summary: This code demonstrates how to use the CustomImageCutter package to load an image from assets, cut the image into a rectangle, and display the cut image on the screen. The app uses a simple UI with two buttons to load and cut the image.

<-- END_MAIN -->
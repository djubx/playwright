<-- START_DESCRIPTION -->

Easy Animate Flutter Package
==========================

The `easy_animate` Flutter package is a powerful animation library that simplifies the process of creating complex animations for Flutter applications. It provides a simple and intuitive API for creating animations, making it easier for developers to focus on the logic of their app rather than the intricacies of animation.

When to Use Easy Animate
------------------------

The `easy_animate` package is perfect for creating complex animations that involve multiple widgets, such as:

*   Hero animations
*   Shared element transitions
*   Complex layout animations

Features of Easy Animate
------------------------

*   **Simple API**: Easy Animate provides a simple and intuitive API for creating animations.
*   **Complex Animations**: Easy Animate supports complex animations involving multiple widgets.
*   **Customizable**: Easy Animate allows for customization of animation duration, curve, and more.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setting Up Easy Animate
----------------------

To use the `easy_animate` package, add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  easy_animate: ^1.0.0
```

Then, run `flutter pub get` to install the package.

Using Easy Animate
-----------------

To use Easy Animate, import the package in your Dart file:

```dart
import 'package:easy_animate/easy_animate.dart';
```

### Basic Example

Here's a basic example of using Easy Animate to animate a widget:

```dart
class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return EasyAnimate(
      duration: Duration(milliseconds: 500),
      curve: Curves.easeInOut,
      child: Container(
        width: 100,
        height: 100,
        color: Colors.red,
      ),
    );
  }
}
```

In this example, the `EasyAnimate` widget is used to animate a red square. The `duration` property sets the length of the animation, and the `curve` property sets the animation curve.

### Advanced Example

Here's an advanced example of using Easy Animate to create a complex animation:

```dart
class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return EasyAnimate(
      duration: Duration(milliseconds: 500),
      curve: Curves.easeInOut,
      child: Row(
        children: [
          EasyAnimate(
            duration: Duration(milliseconds: 250),
            curve: Curves.easeIn,
            child: Container(
              width: 50,
              height: 50,
              color: Colors.blue,
            ),
          ),
          EasyAnimate(
            duration: Duration(milliseconds: 250),
            curve: Curves.easeOut,
            child: Container(
              width: 50,
              height: 50,
              color: Colors.green,
            ),
          ),
        ],
      ),
    );
  }
}
```

In this example, the `EasyAnimate` widget is used to create a complex animation involving multiple widgets. The `Row` widget is used to layout the widgets horizontally.

Platform-Specific Details
-------------------------

Easy Animate works on both Android and iOS platforms. However, there are some platform-specific details to keep in mind:

*   On Android, Easy Animate uses the `android.view.animation` package to create animations.
*   On iOS, Easy Animate uses the `UIKit` framework to create animations.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:easy_animate/easy_animate.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Easy Animate Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Create a complex animation involving multiple widgets
    return EasyAnimate(
      // Set the duration of the animation
      duration: Duration(milliseconds: 500),
      // Set the animation curve
      curve: Curves.easeInOut,
      child: Row(
        children: [
          // Animate a blue square
          EasyAnimate(
            // Set the duration of the animation
            duration: Duration(milliseconds: 250),
            // Set the animation curve
            curve: Curves.easeIn,
            child: Container(
              // Set the width and height of the square
              width: 50,
              height: 50,
              // Set the color of the square
              color: Colors.blue,
            ),
          ),
          // Animate a green square
          EasyAnimate(
            // Set the duration of the animation
            duration: Duration(milliseconds: 250),
            // Set the animation curve
            curve: Curves.easeOut,
            child: Container(
              // Set the width and height of the square
              width: 50,
              height: 50,
              // Set the color of the square
              color: Colors.green,
            ),
          ),
        ],
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app.
// 2. The app creates a complex animation involving multiple widgets.
// 3. The animation is played, and the widgets are animated.
// 4. The user can interact with the app while the animation is playing.
// 5. The animation completes, and the widgets are displayed in their final positions.

// This code demonstrates the use of the Easy Animate package to create complex animations in Flutter.
// The package provides a simple and intuitive API for creating animations, making it easier for developers to focus on the logic of their app rather than the intricacies of animation.
```

<-- END_MAIN -->
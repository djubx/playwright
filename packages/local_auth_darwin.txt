# Local Auth Darwin Flutter Package

<!-- START_DESCRIPTION -->
## Description

The `local_auth_darwin` package is a Flutter plugin that provides a way to authenticate users using biometric methods such as Face ID and Touch ID on iOS and macOS devices. This package is particularly useful for applications that require a secure way to authenticate users without relying on traditional password methods. 

### When to Use This Package
- **Secure Authentication**: When you need to implement secure user authentication in your app.
- **User Experience**: To enhance user experience by allowing quick access to the app without entering passwords.
- **Sensitive Data Access**: When accessing sensitive data or features that require additional security.

### Features
- **Biometric Authentication**: Supports Face ID and Touch ID for user authentication.
- **Device Compatibility**: Works seamlessly on iOS and macOS devices.
- **Customizable Prompts**: Allows customization of authentication prompts to fit the app's design.
- **Error Handling**: Provides detailed error messages for various authentication scenarios.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
## Tutorial

### Setup Process

To use the `local_auth_darwin` package in your Flutter project, follow these steps:

1. **Add Dependency**: Open your `pubspec.yaml` file and add the package:

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     local_auth_darwin: ^1.0.0  # Check for the latest version on pub.dev
   ```

2. **Install the Package**: Run the following command in your terminal:

   ```bash
   flutter pub get
   ```

3. **iOS Configuration**:
   - Open your `ios/Runner/Info.plist` file and add the following keys to request permission for biometric authentication:

   ```xml
   <key>NSFaceIDUsageDescription</key>
   <string>We use Face ID to authenticate you securely.</string>
   <key>NSBiometricUsageDescription</key>
   <string>We use Touch ID to authenticate you securely.</string>
   ```

4. **macOS Configuration**:
   - Open your `macos/Runner/Info.plist` file and add the same keys as above.

5. **Permissions**: Ensure that your app has the necessary permissions to use biometric authentication.

### Using the Package

Hereâ€™s how to implement biometric authentication in your Flutter app:

1. **Import the Package**:

   ```dart
   import 'package:local_auth_darwin/local_auth_darwin.dart';
   ```

2. **Create an Instance of Local Authentication**:

   ```dart
   final LocalAuthentication auth = LocalAuthentication();
   ```

3. **Check for Biometric Availability**:

   ```dart
   bool canCheckBiometrics = await auth.canCheckBiometrics;
   ```

4. **Authenticate the User**:

   ```dart
   bool authenticated = await auth.authenticate(
     localizedReason: 'Please authenticate to access this feature',
     options: const AuthenticationOptions(
       stickyAuth: true,
     ),
   );
   ```

5. **Handle Authentication Result**: Based on the result of the authentication, you can proceed with your app's logic.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
## Complete Example

```dart
import 'package:flutter/material.dart';
import 'package:local_auth_darwin/local_auth_darwin.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Local Auth Example',
      home: AuthHomePage(),
    );
  }
}

class AuthHomePage extends StatefulWidget {
  @override
  _AuthHomePageState createState() => _AuthHomePageState();
}

class _AuthHomePageState extends State<AuthHomePage> {
  final LocalAuthentication auth = LocalAuthentication();
  String _authStatus = 'Not Authenticated';

  // Function to authenticate the user
  Future<void> _authenticate() async {
    bool authenticated = false;

    // Check if the device can use biometrics
    try {
      authenticated = await auth.authenticate(
        localizedReason: 'Please authenticate to access this feature',
        options: const AuthenticationOptions(
          stickyAuth: true,
        ),
      );
    } catch (e) {
      print(e); // Print any errors that occur during authentication
    }

    // Update the authentication status based on the result
    setState(() {
      _authStatus = authenticated ? 'Authenticated' : 'Not Authenticated';
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Local Auth Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Authentication Status: $_authStatus',
              style: TextStyle(fontSize: 20),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _authenticate, // Call the authenticate function
              child: Text('Authenticate'),
            ),
          ],
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the RealFlutter widget.
// 2. RealFlutter builds a MaterialApp with a title and home page set to AuthHomePage.
// 3. AuthHomePage is a stateful widget that manages the authentication status.
// 4. The _authenticate function is called when the user presses the "Authenticate" button.
// 5. Inside _authenticate, the app checks if biometric authentication is available and attempts to authenticate the user.
// 6. The authentication result updates the _authStatus variable, which is displayed on the screen.
```

<!-- END_MAIN -->

## Summary

In this blog post, we explored the `local_auth_darwin` Flutter package, which provides a straightforward way to implement biometric authentication in your Flutter applications. We covered the setup process, including necessary configurations for both iOS and macOS, and provided a complete example demonstrating how to use the package effectively. By following the steps outlined, you can enhance your app's security and improve user experience through seamless biometric authentication.
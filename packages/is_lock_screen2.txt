<-- START_DESCRIPTION -->

# Overview of the is_lock_screen2 Flutter Package
=====================================================

The `is_lock_screen2` Flutter package provides a simple way to detect whether the device screen is locked or not. This package is useful in scenarios where you want to perform certain actions or handle events differently when the screen is locked.

### Features

*   Detects whether the device screen is locked or not
*   Supports both Android and iOS platforms
*   Easy to use and integrate into your Flutter app

### When to Use

You can use this package in various scenarios, such as:

*   To pause or resume video playback when the screen is locked or unlocked
*   To stop or start background services when the screen is locked or unlocked
*   To handle notifications differently when the screen is locked or unlocked

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the is_lock_screen2 Package
=====================================================

To use the `is_lock_screen2` package, follow these steps:

### Step 1: Add the Package to Your pubspec.yaml File

Add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  is_lock_screen2: ^1.0.0
```

Then, run `flutter pub get` to get the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:is_lock_screen2/is_lock_screen2.dart';
```

### Step 3: Use the Package

You can use the `isLockScreen` function to detect whether the screen is locked or not:

```dart
bool isLocked = await isLockScreen();
if (isLocked) {
  print('Screen is locked');
} else {
  print('Screen is not locked');
}
```

### Platform-Specific Details

*   **Android:** The package uses the `android.app.KeyguardManager` class to detect whether the screen is locked or not.
*   **iOS:** The package uses the `UIApplication.shared.isProtectedDataAvailable` property to detect whether the screen is locked or not.

### Required Configurations or Optimizations

*   **Android:** You need to add the `android.permission.DISABLE_KEYGUARD` permission to your `AndroidManifest.xml` file:

    ```xml
<uses-permission android:name="android.permission.DISABLE_KEYGUARD" />
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:is_lock_screen2/is_lock_screen2.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Is Lock Screen Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  bool _isLocked = false;

  Future<void> _checkLockScreen() async {
    // Use the isLockScreen function to detect whether the screen is locked or not
    bool isLocked = await isLockScreen();
    setState(() {
      _isLocked = isLocked;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Is Lock Screen Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              _isLocked ? 'Screen is locked' : 'Screen is not locked',
              style: TextStyle(fontSize: 24),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _checkLockScreen,
              child: Text('Check Lock Screen'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and is presented with a button to check the lock screen.
// 2. When the user clicks the button, the _checkLockScreen function is called.
// 3. The _checkLockScreen function uses the isLockScreen function to detect whether the screen is locked or not.
// 4. The result is then displayed on the screen.
// 5. The user can click the button again to recheck the lock screen.

// The code flow is as follows:
// 1. The MyApp widget is created and returned as the root of the app.
// 2. The MyHomePage widget is created and returned as the home page of the app.
// 3. The MyHomePage widget contains a button to check the lock screen.
// 4. When the button is clicked, the _checkLockScreen function is called.
// 5. The _checkLockScreen function uses the isLockScreen function to detect whether the screen is locked or not.
// 6. The result is then displayed on the screen.

```

<-- END_MAIN -->
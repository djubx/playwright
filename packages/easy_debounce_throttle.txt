Here's a detailed technical blog on the `easy_debounce_throttle` Flutter package, structured as requested.

<!-- START_DESCRIPTION -->
# Overview of the `easy_debounce_throttle` Flutter Package

The `easy_debounce_throttle` package is a powerful utility for managing the frequency of function calls in Flutter applications. It provides a simple way to debounce or throttle events, which is particularly useful in scenarios where rapid user interactions can lead to performance issues or unintended behavior. 

## When to Use This Package

You might want to use `easy_debounce_throttle` in the following scenarios:

- **Search Input**: When implementing a search feature, you can debounce the input to avoid making API calls on every keystroke.
- **Button Clicks**: To prevent multiple submissions of a form or repeated actions when a button is clicked multiple times in quick succession.
- **Scroll Events**: Throttle scroll events to improve performance when handling animations or loading more content.

## Features

- **Debounce**: Delays the execution of a function until after a specified wait time has elapsed since the last time the function was invoked.
- **Throttle**: Ensures that a function is only called at most once in a specified time period, regardless of how many times it is triggered.
- **Easy to Use**: The package provides a straightforward API that integrates seamlessly with Flutter applications.

By leveraging this package, developers can enhance the responsiveness and performance of their applications while maintaining a smooth user experience.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using `easy_debounce_throttle`

## Step 1: Adding the Dependency

To get started, add the `easy_debounce_throttle` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  easy_debounce_throttle: ^1.0.0 # Check for the latest version on pub.dev
```

## Step 2: Importing the Package

In your Dart file, import the package:

```dart
import 'package:easy_debounce_throttle/easy_debounce_throttle.dart';
```

## Step 3: Using Debounce and Throttle

### Debounce Example

To debounce a function, you can use the `Debounce` class. Hereâ€™s how you can implement it:

```dart
// Create a Debounce instance
final debounce = Debounce(milliseconds: 500);

// Function to be debounced
void search(String query) {
  print('Searching for: $query');
}

// Use debounce in a text field
TextField(
  onChanged: (value) {
    debounce(() => search(value)); // Debounce the search function
  },
);
```

### Throttle Example

To throttle a function, use the `Throttle` class:

```dart
// Create a Throttle instance
final throttle = Throttle(milliseconds: 1000);

// Function to be throttled
void onScroll() {
  print('Scrolling...');
}

// Use throttle in a scroll event
ScrollController _scrollController = ScrollController();

_scrollController.addListener(() {
  throttle(() => onScroll()); // Throttle the scroll function
});
```

## Platform-Specific Details

### Android

For Android, ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file:

```gradle
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

### iOS

For iOS, ensure that your deployment target is set to at least 10.0 in your `ios/Podfile`:

```ruby
platform :ios, '10.0'
```

## Step 4: Running the Application

After setting up the package, you can run your Flutter application using:

```bash
flutter run
```

This will allow you to see the debounce and throttle functionalities in action.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using `easy_debounce_throttle`

```dart
import 'package:flutter/material.dart';
import 'package:easy_debounce_throttle/easy_debounce_throttle.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Debounce and Throttle Example',
      home: DebounceThrottleExample(),
    );
  }
}

class DebounceThrottleExample extends StatefulWidget {
  @override
  _DebounceThrottleExampleState createState() => _DebounceThrottleExampleState();
}

class _DebounceThrottleExampleState extends State<DebounceThrottleExample> {
  final debounce = Debounce(milliseconds: 500); // Debounce instance
  final throttle = Throttle(milliseconds: 1000); // Throttle instance
  final ScrollController _scrollController = ScrollController(); // Scroll controller
  String searchQuery = ''; // Variable to hold search query

  @override
  void initState() {
    super.initState();
    // Adding listener to the scroll controller
    _scrollController.addListener(() {
      throttle(() => onScroll()); // Throttle the scroll function
    });
  }

  // Function to handle search
  void search(String query) {
    setState(() {
      searchQuery = query; // Update the search query
    });
    print('Searching for: $query'); // Print the search query
  }

  // Function to handle scroll
  void onScroll() {
    print('Scrolling...'); // Print scroll event
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Debounce and Throttle Example'),
      ),
      body: Column(
        children: [
          // TextField for search input
          TextField(
            onChanged: (value) {
              debounce(() => search(value)); // Debounce the search function
            },
            decoration: InputDecoration(
              labelText: 'Search',
            ),
          ),
          Expanded(
            child: ListView.builder(
              controller: _scrollController, // Attach scroll controller
              itemCount: 100, // Example item count
              itemBuilder: (context, index) {
                return ListTile(
                  title: Text('Item $index'), // Display item
                );
              },
            ),
          ),
        ],
      ),
    );
  }

  @override
  void dispose() {
    _scrollController.dispose(); // Dispose of the scroll controller
    super.dispose();
  }
}
```

### Application Flow Explanation

// The application starts with the `main` function, which runs the `RealFlutter` widget.
// The `RealFlutter` widget builds a MaterialApp with a title and a home widget.
// The `DebounceThrottleExample` widget is a stateful widget that manages the debounce and throttle functionalities.
// In the `initState`, we set up a listener on the scroll controller to throttle scroll events.
// The `search` function updates the search query and prints it to the console.
// The `onScroll` function prints a message whenever the user scrolls.
// The `build` method contains a TextField for user input, which debounces the search function.
// Below the TextField, a ListView displays a list of items, and the scroll controller is attached to it.
// Finally, the `dispose` method cleans up the scroll controller when the widget is removed from the widget tree.

// This flow ensures that the application efficiently handles user input and scroll events, providing a smooth user experience.
<!-- END_MAIN -->

This blog provides a comprehensive overview of the `easy_debounce_throttle` package, including its features, setup instructions, and a complete example to demonstrate its usage in a Flutter application.
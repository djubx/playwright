<-- START_DESCRIPTION -->
# Monet Flutter Package: A Comprehensive Overview
=====================================================

The `monet` Flutter package is a powerful tool for managing colors and themes in your Flutter applications. It provides a simple and intuitive way to define and apply color schemes, making it easy to maintain a consistent visual identity across your app.

### When to Use Monet

Monet is particularly useful when:

* You want to define a custom color scheme for your app
* You need to support multiple themes (e.g., light and dark modes)
* You want to easily switch between different color schemes

### Key Features

* Define custom color schemes using a simple and intuitive API
* Support for multiple themes (light and dark modes)
* Easy switching between different color schemes
* Compatible with both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->
# Setting Up and Using Monet
=============================

### Step 1: Add Monet to Your Project

Add the following dependency to your `pubspec.yaml` file:
```yml
dependencies:
  monet: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import Monet

Import the `monet` package in your Dart file:
```dart
import 'package:monet/monet.dart';
```
### Step 3: Define Your Color Scheme

Create a `MonetColorScheme` instance and define your custom color scheme:
```dart
final colorScheme = MonetColorScheme(
  primary: Colors.blue,
  secondary: Colors.green,
  background: Colors.white,
);
```
### Step 4: Apply the Color Scheme

Wrap your app with the `Monet` widget and pass the `colorScheme` instance:
```dart
Monet(
  colorScheme: colorScheme,
  child: MyApp(),
);
```
### Platform-Specific Details

* On Android, Monet uses the `android.app.Activity` context to apply the color scheme.
* On iOS, Monet uses the `UIApplication` instance to apply the color scheme.

### Required Configurations and Optimizations

* Make sure to add the `monet` package to your `pubspec.yaml` file and run `flutter pub get`.
* If you're using a custom `MaterialApp` theme, make sure to merge the `Monet` theme with your custom theme.

<-- END_TUTORIAL -->

<-- START_MAIN -->
```dart
import 'package:flutter/material.dart';
import 'package:monet/monet.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Define the color scheme
    final colorScheme = MonetColorScheme(
      primary: Colors.blue,
      secondary: Colors.green,
      background: Colors.white,
    );

    // Create the Monet instance
    return Monet(
      colorScheme: colorScheme,
      child: MaterialApp(
        title: 'Real Flutter',
        theme: ThemeData(
          // Merge the Monet theme with the custom theme
          primarySwatch: colorScheme.primary,
          secondaryHeaderColor: colorScheme.secondary,
          backgroundColor: colorScheme.background,
        ),
        home: MyHomePage(),
      ),
    );
  }
}

class MyHomePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Use the Monet colors in your widgets
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Monet.of(context).primary,
        title: Text('Real Flutter'),
      ),
      body: Center(
        child: Text(
          'Hello, World!',
          style: TextStyle(color: Monet.of(context).secondary),
        ),
      ),
    );
  }
}
```
// The app starts by defining the color scheme using the `MonetColorScheme` instance.
// The `Monet` instance is then created and wrapped around the `MaterialApp` instance.
// The `Monet` theme is merged with the custom theme using the `primarySwatch`, `secondaryHeaderColor`, and `backgroundColor` properties.
// The `MyHomePage` widget uses the `Monet` colors to style its widgets.
// The app uses the `Monet.of(context)` method to access the `Monet` instance and its colors.

// In summary, the app flows by defining the color scheme, creating the `Monet` instance, merging the `Monet` theme with the custom theme, and using the `Monet` colors in the widgets.
<-- END_MAIN -->
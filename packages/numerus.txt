<-- START_DESCRIPTION -->

# Numerus Flutter Package
The Numerus Flutter package is a powerful library for formatting numbers in a variety of ways. It provides a simple and efficient way to format numbers for display in your Flutter application. With Numerus, you can easily format numbers as currency, percentages, or with custom formats.

## When to Use Numerus
You should use Numerus when you need to display numbers in a formatted way in your Flutter application. This can include displaying prices, percentages, or other types of numerical data.

## Features
Numerus has several key features that make it a useful library for formatting numbers:

*   Support for multiple locales
*   Customizable formatting options
*   Support for currency and percentage formatting
*   Easy to use API

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Using Numerus in Your Flutter Application
To use Numerus in your Flutter application, you will need to add the Numerus package to your `pubspec.yaml` file. You can do this by adding the following line to the `dependencies` section of your `pubspec.yaml` file:

```yml
dependencies:
  numerus: ^1.0.0
```

After adding the Numerus package to your `pubspec.yaml` file, you can import it into your Dart files using the following import statement:

```dart
import 'package:numerus/numerus.dart';
```

## Basic Usage
To use Numerus to format a number, you can create a new instance of the `Numerus` class and call the `format` method. Here is an example of how to use Numerus to format a number:

```dart
import 'package:numerus/numerus.dart';

void main() {
  final numerus = Numerus();
  final formattedNumber = numerus.format(12345.67);
  print(formattedNumber);
}
```

## Customizing the Format
You can customize the format of the number by passing a `NumerusFormat` object to the `format` method. Here is an example of how to customize the format:

```dart
import 'package:numerus/numerus.dart';

void main() {
  final numerus = Numerus();
  final format = NumerusFormat(
    locale: 'en_US',
    currency: 'USD',
    decimalPlaces: 2,
  );
  final formattedNumber = numerus.format(12345.67, format: format);
  print(formattedNumber);
}
```

## Platform-Specific Details
Numerus uses the `intl` package under the hood to handle locale-specific formatting. This means that Numerus will work correctly on both Android and iOS devices, as long as the `intl` package is correctly configured.

To configure the `intl` package, you will need to add the following lines to your `pubspec.yaml` file:

```yml
dependencies:
  intl: ^0.17.0
```

You will also need to import the `intl` package into your Dart files using the following import statement:

```dart
import 'package:intl/intl.dart';
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:numerus/numerus.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final _numerus = Numerus();
  final _format = NumerusFormat(
    locale: 'en_US',
    currency: 'USD',
    decimalPlaces: 2,
  );
  final _controller = TextEditingController();

  String _formattedNumber = '';

  void _formatNumber() {
    final number = double.parse(_controller.text);
    final formattedNumber = _numerus.format(number, format: _format);
    setState(() {
      _formattedNumber = formattedNumber;
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Numerus Example',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Numerus Example'),
        ),
        body: Padding(
          padding: const EdgeInsets.all(20.0),
          child: Column(
            children: [
              TextField(
                controller: _controller,
                decoration: InputDecoration(
                  labelText: 'Enter a number',
                ),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _formatNumber,
                child: Text('Format Number'),
              ),
              SizedBox(height: 20),
              Text(
                _formattedNumber,
                style: TextStyle(fontSize: 24),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// This is the main entry point of the application.
// The RealFlutter widget is the root of the application.
// It uses the MaterialApp widget to provide a material design theme to the application.
// The home property of the MaterialApp widget is set to a Scaffold widget, which provides a basic material design layout structure.
// The Scaffold widget has an AppBar widget as its child, which displays the title of the application.
// The body property of the Scaffold widget is set to a Padding widget, which provides some space between the edges of the screen and the content.
// The Padding widget has a Column widget as its child, which displays its children in a vertical column.
// The Column widget has three children: a TextField widget, an ElevatedButton widget, and a Text widget.
// The TextField widget allows the user to enter a number.
// The ElevatedButton widget has an onPressed property that is set to the _formatNumber function.
// When the button is pressed, the _formatNumber function is called, which formats the number entered by the user and updates the Text widget with the formatted number.
// The Text widget displays the formatted number.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Mouse Follower Flutter Package
=====================================

The `mouse_follower` Flutter package is a utility library that allows you to track the mouse position on the screen and perform actions based on its movement. It provides a simple and efficient way to create interactive applications that respond to mouse events.

### When to Use This Package

This package is useful when you want to create applications that require mouse tracking, such as:

* Interactive games
* Graphics editors
* Virtual reality experiences
* Accessibility tools

### Features

The `mouse_follower` package provides the following features:

* Mouse position tracking
* Mouse movement detection
* Customizable callback functions for mouse events

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `mouse_follower` package, follow these steps:

### Step 1: Add the Package to Your Project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  mouse_follower: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:mouse_follower/mouse_follower.dart';
```
### Step 3: Create a Mouse Follower Instance

Create a `MouseFollower` instance and pass it to your widget tree:
```dart
MouseFollower _mouseFollower = MouseFollower();

@override
Widget build(BuildContext context) {
  return MouseFollower(
    child: YourWidget(),
  );
}
```
### Platform-Specific Details

* On Android, you need to add the following permission to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.SYSTEM_ALERT_WINDOW" />
```
* On iOS, you need to add the following line to your `Info.plist` file:
```xml
<key>NSMouseEvents</key>
<true/>
```
### Required Configurations

You can customize the mouse follower by passing options to the `MouseFollower` constructor:
```dart
MouseFollower(
  child: YourWidget(),
  options: MouseFollowerOptions(
    // Set the mouse movement threshold
    movementThreshold: 10,
    // Set the callback function for mouse movement
    onMovement: (event) {
      print('Mouse moved to ${event.position}');
    },
  ),
)
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:mouse_follower/mouse_follower.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  MouseFollower _mouseFollower = MouseFollower();

  @override
  Widget build(BuildContext context) {
    return MouseFollower(
      child: MaterialApp(
        home: Scaffold(
          appBar: AppBar(
            title: Text('Mouse Follower Example'),
          ),
          body: Center(
            child: Text('Move your mouse around!'),
          ),
        ),
      ),
      options: MouseFollowerOptions(
        movementThreshold: 10,
        onMovement: (event) {
          print('Mouse moved to ${event.position}');
        },
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user moves their mouse around the screen.
// 2. The MouseFollower instance detects the mouse movement and calls the onMovement callback function.
// 3. The onMovement callback function prints the current mouse position to the console.
// 4. The user can customize the mouse follower by passing options to the MouseFollower constructor.
// 5. The MouseFollower instance uses the options to determine when to call the onMovement callback function.

// In summary, the code flows as follows:
// Mouse movement -> MouseFollower instance -> onMovement callback function -> Console output
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Firebase Auth Web Flutter Package
=====================================

The `firebase_auth_web` Flutter package provides a web implementation of the Firebase Authentication SDK. It allows users to authenticate with Firebase using various providers, such as Google, Facebook, and GitHub.

## When to Use
--------------

Use this package when you want to add web support to your Flutter app and use Firebase Authentication. This package is a must-have for any Flutter web app that requires user authentication.

## Features
------------

*   Supports multiple authentication providers (Google, Facebook, GitHub, etc.)
*   Handles user authentication flow, including sign-in and sign-out
*   Provides access to user data, such as name, email, and profile picture

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
------------------

## Step 1: Add Dependencies
-------------------------

Add the following dependencies to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  firebase_auth: ^3.3.0
  firebase_auth_web: ^3.3.0
```

## Step 2: Initialize Firebase
------------------------------

 Initialize Firebase in your `main` function:

```dart
import 'package:firebase_core/firebase_core.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp();
  runApp(MyApp());
}
```

## Step 3: Use Firebase Auth Web
-------------------------------

Use the `FirebaseAuth` instance to access Firebase Authentication functionality:

```dart
import 'package:firebase_auth/firebase_auth.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final FirebaseAuth _auth = FirebaseAuth.instance;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Firebase Auth Web'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () async {
            final UserCredential result = await _auth.signInWithPopup(GoogleAuthProvider());
            final User user = result.user;
            print(user.displayName);
          },
          child: Text('Sign in with Google'),
        ),
      ),
    );
  }
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:firebase_auth_web/firebase_auth_web.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp();
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final FirebaseAuth _auth = FirebaseAuth.instance;
  User _user;

  @override
  void initState() {
    super.initState();
    _checkCurrentUser();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Firebase Auth Web'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            ElevatedButton(
              onPressed: _signInWithGoogle,
              child: Text('Sign in with Google'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _signOut,
              child: Text('Sign out'),
            ),
            SizedBox(height: 20),
            Text(_user != null ? _user.displayName : 'No user signed in'),
          ],
        ),
      ),
    );
  }

  _checkCurrentUser() async {
    final User user = _auth.currentUser;
    setState(() {
      _user = user;
    });
  }

  _signInWithGoogle() async {
    // 1. Create a GoogleAuthProvider instance
    final GoogleAuthProvider provider = GoogleAuthProvider();

    // 2. Use the provider to sign in with Google
    final UserCredential result = await _auth.signInWithPopup(provider);

    // 3. Get the user data from the result
    final User user = result.user;

    // 4. Update the UI with the user data
    setState(() {
      _user = user;
    });
  }

  _signOut() async {
    // 1. Sign out from Firebase Authentication
    await _auth.signOut();

    // 2. Update the UI to reflect the signed-out state
    setState(() {
      _user = null;
    });
  }
}

// Application flow:
// 1. The app initializes Firebase and Firebase Authentication.
// 2. The app checks if a user is already signed in and updates the UI accordingly.
// 3. When the user clicks the "Sign in with Google" button, the app signs in with Google using the Firebase Authentication SDK.
// 4. After signing in, the app updates the UI with the user's display name.
// 5. When the user clicks the "Sign out" button, the app signs out from Firebase Authentication and updates the UI to reflect the signed-out state.

```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

Stacked Themes Flutter Package
==============================

The `stacked_themes` Flutter package is a popular library for managing themes in Flutter applications. It provides a simple and efficient way to switch between different themes, making it ideal for apps that require multiple themes or a dynamic theme switching feature.

When to Use Stacked Themes
-------------------------

1.  **Multiple Theme Support**: Use `stacked_themes` when you need to support multiple themes in your app, such as light and dark modes.
2.  **Dynamic Theme Switching**: This package is perfect for apps that require dynamic theme switching based on user preferences or system settings.

Features of Stacked Themes
-------------------------

*   **Theme Management**: Easily manage multiple themes in your app.
*   **Theme Switching**: Switch between themes dynamically.
*   **Persistence**: Save the current theme for future app launches.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setting Up Stacked Themes
-------------------------

To use `stacked_themes` in your Flutter project, follow these steps:

### Step 1: Add the Dependency

Add the `stacked_themes` package to your `pubspec.yaml` file:

```yml
dependencies:
  stacked_themes: ^1.1.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the `stacked_themes` package in your Dart file:

```dart
import 'package:stacked_themes/stacked_themes.dart';
```

### Step 3: Initialize the ThemeService

Initialize the `ThemeService` in your `main` function:

```dart
void main() async {
  await ThemeService.init();
  runApp(MyApp());
}
```

### Step 4: Wrap Your App with ThemeBuilder

Wrap your app with the `ThemeBuilder` widget:

```dart
ThemeBuilder(
  defaultThemeMode: ThemeMode.light,
  darkTheme: ThemeData.dark(),
  lightTheme: ThemeData.light(),
  child: MyApp(),
);
```

### Step 5: Switch Themes

Use the `ThemeService` to switch themes:

```dart
ThemeService().switchTheme();
```

Platform-Specific Details
-------------------------

### Android

For Android, you need to add the following code to your `AndroidManifest.xml` file:

```xml
<application
  ...
  android:hardwareAccelerated="true"
  android:largeHeap="true">
```

### iOS

For iOS, you need to add the following code to your `Info.plist` file:

```xml
<key>UIAppFonts</key>
<array>
  <string>OpenSans-Regular.ttf</string>
</array>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:stacked_themes/stacked_themes.dart';

void main() async {
  await ThemeService.init();
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Use ThemeBuilder to wrap the app
    return ThemeBuilder(
      defaultThemeMode: ThemeMode.light,
      darkTheme: ThemeData.dark(),
      lightTheme: ThemeData.light(),
      child: MaterialApp(
        title: 'Real Flutter',
        home: HomePage(),
      ),
    );
  }
}

class HomePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Get the current theme mode
    final themeMode = ThemeService().themeMode;

    return Scaffold(
      appBar: AppBar(
        title: Text('Real Flutter'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text('Current Theme Mode: $themeMode'),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                // Switch the theme mode
                ThemeService().switchTheme();
              },
              child: Text('Switch Theme'),
            ),
          ],
        ),
      ),
    );
  }
}

// The app starts by initializing the ThemeService in the main function.
// Then, it wraps the app with the ThemeBuilder widget, which provides the theme modes.
// The HomePage widget displays the current theme mode and provides a button to switch the theme.
// When the button is pressed, the ThemeService switches the theme mode.
```

<-- END_MAIN -->
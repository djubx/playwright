<-- START_DESCRIPTION -->

# Flutter AppRouter Package
================================

The `flutter_approuter` package is a powerful navigation management system for Flutter applications. It allows developers to define routes and navigate between them in a declarative way, making it easier to manage complex navigation flows.

## When to Use
--------------

This package is ideal for applications with multiple screens and complex navigation flows. It's particularly useful when you need to handle deep linking, parameter passing, and navigation state management.

## Features
------------

* Declarative routing: Define routes and navigate between them using a simple, declarative API.
* Parameter passing: Pass parameters between routes using a type-safe API.
* Deep linking: Handle deep links and navigate to specific routes.
* Navigation state management: Manage the navigation state of your application, including the current route and navigation history.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up Flutter AppRouter
=============================

To use the `flutter_approuter` package, you'll need to add it to your `pubspec.yaml` file:

```yml
dependencies:
  flutter_approuter: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Platform-Specific Configurations
-----------------------------------

### Android

To handle deep linking on Android, you'll need to add the following configuration to your `AndroidManifest.xml` file:

```xml
<application>
  <activity
    android:name=".MainActivity"
    android:exported="true">
    <intent-filter>
      <action android:name="android.intent.action.VIEW" />
      <category android:name="android.intent.category.DEFAULT" />
      <category android:name="android.intent.category.BROWSABLE" />
      <data android:scheme="your_scheme" android:host="your_host" />
    </intent-filter>
  </activity>
</application>
```

Replace `your_scheme` and `your_host` with your desired scheme and host.

### iOS

To handle deep linking on iOS, you'll need to add the following configuration to your `Info.plist` file:

```xml
<key>CFBundleURLTypes</key>
<array>
  <dict>
    <key>CFBundleURLName</key>
    <string>your_bundle_id</string>
    <key>CFBundleURLSchemes</key>
    <array>
      <string>your_scheme</string>
    </array>
  </dict>
</array>
```

Replace `your_bundle_id` and `your_scheme` with your desired bundle ID and scheme.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_approuter/flutter_approuter.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return AppRouter(
      // Define the routes for the application
      routes: [
        AppRoute(
          path: '/',
          builder: (context) => HomeScreen(),
        ),
        AppRoute(
          path: '/details',
          builder: (context) => DetailsScreen(),
        ),
      ],
      // Define the initial route for the application
      initialRoute: '/',
    );
  }
}

// Home screen
class HomeScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Home Screen'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Navigate to the details screen
            AppRouter.of(context).pushNamed('/details');
          },
          child: Text('Go to details'),
        ),
      ),
    );
  }
}

// Details screen
class DetailsScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Details Screen'),
      ),
      body: Center(
        child: Text('This is the details screen'),
      ),
    );
  }
}
```

// The application flow is as follows:
// 1. The user launches the application, and the `RealFlutter` widget is built.
// 2. The `AppRouter` widget is used to define the routes for the application.
// 3. The `initialRoute` property is set to '/', which means the home screen will be displayed initially.
// 4. When the user clicks the "Go to details" button on the home screen, the `AppRouter.of(context).pushNamed('/details')` method is called.
// 5. This method navigates to the details screen by pushing the '/details' route onto the navigation stack.
// 6. The details screen is displayed, and the user can navigate back to the home screen by clicking the back button.

<-- END_MAIN -->
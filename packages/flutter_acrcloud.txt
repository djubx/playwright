<-- START_DESCRIPTION -->

# Flutter ACRCloud Package Overview
=====================================

The `flutter_acrcloud` package is a Flutter plugin that allows developers to integrate the ACRCloud music recognition service into their apps. ACRCloud is a popular music recognition platform that provides accurate and fast music identification.

### When to Use This Package

This package is ideal for music streaming apps, music games, or any other app that requires music recognition. With this package, you can easily identify songs playing in the background, retrieve song metadata, and even trigger actions based on the recognized music.

### Features

*   Music recognition: Identify songs playing in the background or from a file
*   Song metadata retrieval: Get song title, artist, album, and more
*   Customizable: Configure the recognition settings to suit your needs

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Flutter ACRCloud Package
==========================================

### Step 1: Add the Package to Your Pubspec.yaml

Add the following line to your `pubspec.yaml` file:

```yml
dependencies:
  flutter_acrcloud: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Configure the Package

Create a new file called `acrcloud_config.dart` and add the following code:

```dart
import 'package:flutter_acrcloud/flutter_acrcloud.dart';

class ACRCloudConfig {
  static const String accessKey = 'YOUR_ACCESS_KEY';
  static const String accessSecret = 'YOUR_ACCESS_SECRET';
  static const String host = 'YOUR_HOST';
}
```

Replace the placeholders with your actual ACRCloud credentials.

### Step 3: Initialize the Package

In your `main.dart` file, add the following code:

```dart
import 'package:flutter/material.dart';
import 'package:flutter_acrcloud/flutter_acrcloud.dart';
import 'acrcloud_config.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatefulWidget {
  @override
  _MyAppState createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  @override
  void initState() {
    super.initState();
    ACRCloud.initialize(
      accessKey: ACRCloudConfig.accessKey,
      accessSecret: ACRCloudConfig.accessSecret,
      host: ACRCloudConfig.host,
    );
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('ACRCloud Demo'),
        ),
        body: Center(
          child: ElevatedButton(
            onPressed: () async {
              final result = await ACRCloud.startRecognition();
              print(result);
            },
            child: Text('Start Recognition'),
          ),
        ),
      ),
    );
  }
}
```

This code initializes the ACRCloud package and provides a button to start the recognition process.

### Platform-Specific Details

*   Android: Add the following permissions to your `AndroidManifest.xml` file:

    ```xml
<uses-permission android:name="android.permission.RECORD_AUDIO" />
<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
<uses-permission android:name="android.permission.INTERNET" />
```

*   iOS: Add the following lines to your `Info.plist` file:

    ```xml
<key>NSMicrophoneUsageDescription</key>
<string>This app needs access to the microphone to recognize music.</string>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_acrcloud/flutter_acrcloud.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  String _result = '';

  // Initialize the ACRCloud package with your credentials
  void _initACRCloud() async {
    await ACRCloud.initialize(
      accessKey: 'YOUR_ACCESS_KEY',
      accessSecret: 'YOUR_ACCESS_SECRET',
      host: 'YOUR_HOST',
    );
  }

  // Start the music recognition process
  void _startRecognition() async {
    final result = await ACRCloud.startRecognition();
    setState(() {
      _result = result;
    });
  }

  // Cancel the music recognition process
  void _cancelRecognition() async {
    await ACRCloud.cancelRecognition();
  }

  @override
  void initState() {
    super.initState();
    _initACRCloud();
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('ACRCloud Demo'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              ElevatedButton(
                onPressed: _startRecognition,
                child: Text('Start Recognition'),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _cancelRecognition,
                child: Text('Cancel Recognition'),
              ),
              SizedBox(height: 20),
              Text(_result),
            ],
          ),
        ),
      ),
    );
  }
}

// Application flow:
// 1. Initialize the ACRCloud package with your credentials.
// 2. Start the music recognition process by calling the startRecognition method.
// 3. The ACRCloud package will record audio from the device's microphone and send it to the ACRCloud server for recognition.
// 4. Once the recognition process is complete, the result will be returned and displayed on the screen.
// 5. You can cancel the recognition process at any time by calling the cancelRecognition method.
```

<-- END_MAIN -->
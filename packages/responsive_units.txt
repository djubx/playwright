```markdown
<!-- START_DESCRIPTION -->
# Responsive Units Flutter Package

The `responsive_units` package is a powerful tool designed to help Flutter developers create responsive layouts that adapt to different screen sizes and orientations. This package simplifies the process of defining dimensions, padding, and margins in a way that scales appropriately across various devices, ensuring a consistent user experience.

## When to Use This Package
- **Cross-Device Compatibility**: When building applications that need to look good on both small and large screens.
- **Dynamic Layouts**: For applications that require a flexible layout that adjusts based on the device's screen size.
- **UI Consistency**: To maintain a consistent look and feel across different devices without hardcoding dimensions.

## Features
- **Responsive Sizing**: Easily define sizes in relation to the screen dimensions.
- **Orientation Awareness**: Automatically adjusts dimensions based on the device's orientation (portrait or landscape).
- **Customizable Units**: Allows developers to define their own responsive units for more control over the layout.

By leveraging the `responsive_units` package, developers can create applications that are not only visually appealing but also functional across a wide range of devices.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Responsive Units Package

## Installation
To get started with the `responsive_units` package, you need to add it to your Flutter project. Open your `pubspec.yaml` file and add the following dependency:

```yaml
dependencies:
  flutter:
    sdk: flutter
  responsive_units: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command in your terminal to install the package:

```bash
flutter pub get
```

## Platform-Specific Details
The `responsive_units` package works seamlessly on both Android and iOS platforms. There are no additional configurations required for either platform, making it easy to integrate into your existing Flutter applications.

## Usage
To use the `responsive_units` package, you need to import it into your Dart files:

```dart
import 'package:responsive_units/responsive_units.dart';
```

Once imported, you can start using the responsive units in your widget tree. The package provides a simple API to define responsive sizes.

### Example Usage
Hereâ€™s a quick example of how to use the package to create a responsive button:

```dart
Container(
  width: ResponsiveUnits.width(50), // 50% of the screen width
  height: ResponsiveUnits.height(10), // 10% of the screen height
  child: ElevatedButton(
    onPressed: () {},
    child: Text('Responsive Button'),
  ),
);
```

This code snippet creates a button that adjusts its size based on the screen dimensions, ensuring it looks good on any device.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using Responsive Units

```dart
import 'package:flutter/material.dart';
import 'package:responsive_units/responsive_units.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Initialize the responsive units with the context
    ResponsiveUnits.init(context);

    return MaterialApp(
      title: 'Responsive Units Example',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Responsive Units Demo'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              // Create a responsive container
              Container(
                width: ResponsiveUnits.width(80), // 80% of the screen width
                height: ResponsiveUnits.height(20), // 20% of the screen height
                color: Colors.blue,
                child: Center(
                  child: Text(
                    'Responsive Container',
                    style: TextStyle(color: Colors.white, fontSize: 20),
                  ),
                ),
              ),
              SizedBox(height: 20), // Add space between widgets
              // Create a responsive button
              ElevatedButton(
                onPressed: () {
                  // Action when button is pressed
                },
                child: Text('Responsive Button'),
                style: ElevatedButton.styleFrom(
                  minimumSize: Size(
                    ResponsiveUnits.width(50), // 50% of the screen width
                    ResponsiveUnits.height(10), // 10% of the screen height
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function initializes the app by calling runApp with the RealFlutter widget.
// 2. The RealFlutter widget builds the MaterialApp, setting the title and home.
// 3. Inside the Scaffold, an AppBar is created with the title 'Responsive Units Demo'.
// 4. The body contains a Center widget that centers its children.
// 5. A Column widget is used to stack the responsive container and button vertically.
// 6. The Container widget takes 80% of the screen width and 20% of the screen height, displaying a centered text.
// 7. A SizedBox is added for spacing between the container and the button.
// 8. The ElevatedButton is created with a minimum size of 50% width and 10% height, ensuring responsiveness.
// 9. The button is ready to perform an action when pressed, demonstrating the use of responsive units in a practical scenario.
```
<!-- END_MAIN -->
```

This structured blog post provides a comprehensive overview of the `responsive_units` package, guiding developers through its features, installation, usage, and a complete example to illustrate its capabilities.
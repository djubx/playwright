<-- START_DESCRIPTION -->
### Gradient Elevated Button Package
The `gradient_elevated_button` package is a Flutter package that allows you to create elevated buttons with gradient effects. It provides a simple and easy-to-use way to add visually appealing buttons to your Flutter app.

#### When to Use
You can use this package when you want to add a touch of modern design to your app's UI. The gradient effect can be used to draw attention to specific buttons, such as call-to-action buttons or buttons that require user input.

#### Features
The `gradient_elevated_button` package comes with the following features:

*   Support for linear gradients
*   Customizable gradient colors and directions
*   Support for elevated button styles
*   Compatible with Flutter's `ElevatedButton` widget

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->
### Setup and Usage
To use the `gradient_elevated_button` package, follow these steps:

#### Step 1: Add the Package to Your Project
Add the following line to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  gradient_elevated_button: ^1.0.0
```

Then, run `flutter pub get` to install the package.

#### Step 2: Import the Package
Import the package in your Dart file:

```dart
import 'package:gradient_elevated_button/gradient_elevated_button.dart';
```

#### Step 3: Use the GradientElevatedButton Widget
Use the `GradientElevatedButton` widget to create a gradient elevated button:

```dart
GradientElevatedButton(
  onPressed: () {
    // Handle button press
  },
  gradient: LinearGradient(
    colors: [Colors.blue, Colors.green],
  ),
  child: Text('Gradient Button'),
)
```

You can customize the gradient colors and direction by modifying the `LinearGradient` object.

#### Platform-Specific Details
The `gradient_elevated_button` package works on both Android and iOS platforms. However, you may need to adjust the button's style and layout to fit your app's design.

#### Configurations and Optimizations
You can configure the button's elevation, padding, and margin to fit your app's design. Additionally, you can optimize the button's performance by using a `Container` widget instead of a `SizedBox` widget.

<-- END_TUTORIAL -->

<-- START_MAIN -->
```dart
import 'package:flutter/material.dart';
import 'package:gradient_elevated_button/gradient_elevated_button.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Gradient Elevated Button Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: GradientButtonDemo(),
    );
  }
}

class GradientButtonDemo extends StatefulWidget {
  @override
  _GradientButtonDemoState createState() => _GradientButtonDemoState();
}

class _GradientButtonDemoState extends State<GradientButtonDemo> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Gradient Elevated Button Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            // Create a gradient elevated button with a linear gradient
            GradientElevatedButton(
              onPressed: () {
                // Handle button press
                print('Button pressed!');
              },
              gradient: LinearGradient(
                colors: [Colors.blue, Colors.green],
              ),
              child: Text('Gradient Button'),
            ),
            SizedBox(height: 20),
            // Create a gradient elevated button with a custom gradient direction
            GradientElevatedButton(
              onPressed: () {
                // Handle button press
                print('Button pressed!');
              },
              gradient: LinearGradient(
                colors: [Colors.red, Colors.orange],
                begin: Alignment.topLeft,
                end: Alignment.bottomRight,
              ),
              child: Text('Custom Gradient Button'),
            ),
          ],
        ),
      ),
    );
  }
}
// The application flow is as follows:
// 1. The user runs the app and is presented with a scaffold containing a column of widgets.
// 2. The column contains two gradient elevated buttons with different gradient effects.
// 3. When the user presses a button, the corresponding callback function is called.
// 4. The callback function prints a message to the console indicating that the button was pressed.
// 5. The user can customize the gradient effects by modifying the LinearGradient objects.
// 6. The app demonstrates the use of the gradient_elevated_button package to create visually appealing buttons.
```
<-- END_MAIN -->
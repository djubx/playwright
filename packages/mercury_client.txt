Here's a detailed technical blog on the "mercury_client" Flutter package, structured as requested.

<!-- START_DESCRIPTION -->
# Mercury Client Flutter Package

The **mercury_client** Flutter package is a powerful tool designed for developers looking to integrate real-time communication capabilities into their Flutter applications. This package is particularly useful for applications that require instant messaging, notifications, or any form of real-time data exchange. 

## When to Use This Package
You should consider using the **mercury_client** package in scenarios such as:
- Building chat applications where users need to send and receive messages instantly.
- Implementing real-time notifications for updates or alerts.
- Creating collaborative applications where multiple users interact in real-time.

## Features
- **Real-time Communication**: Facilitates instant messaging and notifications.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS.
- **Easy Integration**: Simple setup process with clear documentation.
- **Customizable**: Allows developers to tailor the communication experience to their needs.

With these features, the **mercury_client** package stands out as a robust solution for developers aiming to enhance user engagement through real-time interactions.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Mercury Client Package

## Step 1: Adding the Dependency
To get started, add the **mercury_client** package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  mercury_client: ^1.0.0  # Check for the latest version on pub.dev
```

## Step 2: Platform-Specific Configuration

### Android Configuration
1. Open `android/app/build.gradle` and ensure you have the following configurations:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21  // Ensure this is set to at least 21
    }
}
```

2. Add the necessary permissions in `AndroidManifest.xml`:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
```

### iOS Configuration
1. Open `ios/Runner/Info.plist` and add the following permissions:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

2. Ensure your deployment target is set to at least iOS 10.0 in `ios/Podfile`:

```ruby
platform :ios, '10.0'
```

## Step 3: Using the Package
Now that you have configured your project, you can start using the **mercury_client** package in your Flutter application.

### Basic Usage Example
Hereâ€™s a simple example of how to initialize and use the **mercury_client** package:

```dart
import 'package:flutter/material.dart';
import 'package:mercury_client/mercury_client.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Mercury Client Demo',
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  late MercuryClient _client;

  @override
  void initState() {
    super.initState();
    // Initialize the Mercury Client
    _client = MercuryClient(
      apiKey: 'YOUR_API_KEY', // Replace with your actual API key
    );

    // Connect to the server
    _client.connect();
  }

  @override
  void dispose() {
    // Disconnect the client when the widget is disposed
    _client.disconnect();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Mercury Client Example'),
      ),
      body: Center(
        child: Text('Connected to Mercury Client!'),
      ),
    );
  }
}
```

In this example, we initialize the **mercury_client** in the `initState` method, connect to the server, and ensure to disconnect when the widget is disposed.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Mercury Client in Flutter

```dart
import 'package:flutter/material.dart';
import 'package:mercury_client/mercury_client.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Mercury Client Demo',
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  late MercuryClient _client; // Declare the MercuryClient instance

  @override
  void initState() {
    super.initState();
    // Initialize the Mercury Client with your API key
    _client = MercuryClient(
      apiKey: 'YOUR_API_KEY', // Replace with your actual API key
    );

    // Connect to the Mercury server
    _client.connect();

    // Listen for incoming messages
    _client.onMessageReceived.listen((message) {
      // Handle incoming messages
      print('Message received: $message');
    });
  }

  @override
  void dispose() {
    // Disconnect the client when the widget is disposed
    _client.disconnect();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Mercury Client Example'),
      ),
      body: Center(
        child: Text('Connected to Mercury Client!'),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The application starts with the main function, which runs the MyApp widget.
// 2. MyApp builds a MaterialApp with the title 'Mercury Client Demo' and sets RealFlutter as the home widget.
// 3. In the RealFlutter widget, we declare a MercuryClient instance.
// 4. In the initState method, we initialize the MercuryClient with an API key and connect to the server.
// 5. We set up a listener for incoming messages, which prints any received messages to the console.
// 6. The dispose method ensures that we disconnect the client when the widget is no longer in use.
// 7. The build method returns a simple Scaffold with an AppBar and a centered text indicating the connection status.
```
<!-- END_MAIN -->

This blog provides a comprehensive overview of the **mercury_client** Flutter package, guiding you through its features, setup, and usage with a complete example. By following the steps outlined, you can easily integrate real-time communication into your Flutter applications.
```markdown
<-- START_DESCRIPTION -->
# Emoji Regex Flutter Package: An Overview

The `emoji_regex` Flutter package is a powerful tool designed to help developers handle emojis in their Flutter applications. Emojis have become an integral part of digital communication, and managing them effectively can enhance user experience significantly. This package provides a robust solution for detecting and processing emojis within text, making it an essential tool for applications that involve user-generated content, chat interfaces, or social media features.

## When to Use `emoji_regex`

- **Chat Applications**: Detect and process emojis in messages.
- **Social Media Apps**: Handle emojis in user comments and posts.
- **Text Analysis**: Analyze text data for emoji usage patterns.
- **Custom Emoji Features**: Implement features like emoji reactions or counters.

## Features

- **Emoji Detection**: Identify emojis within a string of text.
- **Emoji Extraction**: Extract all emojis from a given text.
- **Emoji Counting**: Count the number of emojis in a text.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS platforms.

The `emoji_regex` package simplifies the process of working with emojis, allowing developers to focus on building engaging and interactive applications.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->
# Setting Up and Using the `emoji_regex` Package

In this tutorial, we will walk through the process of setting up the `emoji_regex` package in a Flutter project and demonstrate how to use its features effectively.

## Setup Process

1. **Add Dependency**: Open your `pubspec.yaml` file and add the `emoji_regex` package under dependencies.

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     emoji_regex: ^1.0.0
   ```

2. **Install Package**: Run the following command in your terminal to install the package.

   ```bash
   flutter pub get
   ```

3. **Import Package**: In your Dart file, import the package to start using it.

   ```dart
   import 'package:emoji_regex/emoji_regex.dart';
   ```

## Platform-Specific Details

### Android

No additional configuration is required for Android. Ensure your `minSdkVersion` is set to at least 21 in the `android/app/build.gradle` file.

### iOS

Ensure your iOS deployment target is set to at least 11.0. You can set this in your `ios/Podfile`:

```ruby
platform :ios, '11.0'
```

## Using the Package

Here's how you can use the `emoji_regex` package to detect and extract emojis:

```dart
void detectEmojis(String text) {
  final emojiPattern = EmojiRegex().emojiPattern();
  final matches = emojiPattern.allMatches(text);
  for (final match in matches) {
    print('Found emoji: ${match.group(0)}');
  }
}
```

This function will print all the emojis found in the provided text.

<-- END_TUTORIAL -->

<-- START_MAIN -->
# Complete Example: Flutter Application Using `emoji_regex`

Below is a complete Flutter application demonstrating the use of the `emoji_regex` package to detect and display emojis from user input.

```dart
import 'package:flutter/material.dart';
import 'package:emoji_regex/emoji_regex.dart';

void main() => runApp(RealFlutter());

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Emoji Detector',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: EmojiHomePage(),
    );
  }
}

class EmojiHomePage extends StatefulWidget {
  @override
  _EmojiHomePageState createState() => _EmojiHomePageState();
}

class _EmojiHomePageState extends State<EmojiHomePage> {
  final TextEditingController _controller = TextEditingController();
  List<String> _emojis = [];

  // Function to detect emojis in the input text
  void _detectEmojis() {
    final text = _controller.text;
    final emojiPattern = EmojiRegex().emojiPattern();
    final matches = emojiPattern.allMatches(text);
    setState(() {
      _emojis = matches.map((match) => match.group(0)!).toList();
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Emoji Detector'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: <Widget>[
            TextField(
              controller: _controller,
              decoration: InputDecoration(
                labelText: 'Enter text with emojis',
              ),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _detectEmojis,
              child: Text('Detect Emojis'),
            ),
            SizedBox(height: 20),
            Expanded(
              child: ListView.builder(
                itemCount: _emojis.length,
                itemBuilder: (context, index) {
                  return ListTile(
                    title: Text(_emojis[index]),
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }
}
```

// The application starts with the `main` function, which runs the `RealFlutter` app.
// `RealFlutter` is a stateless widget that sets up the MaterialApp with a home page.
// `EmojiHomePage` is a stateful widget that manages the text input and emoji detection.
// The `_detectEmojis` function uses the `emoji_regex` package to find all emojis in the input text.
// When the "Detect Emojis" button is pressed, `_detectEmojis` is called, updating the state with detected emojis.
// The list of detected emojis is displayed in a ListView.

<-- END_MAIN -->
```

This blog post provides a comprehensive guide to using the `emoji_regex` package in Flutter applications, from setup to implementation, with a complete example to illustrate its capabilities.
<-- START_DESCRIPTION -->

# Introduction to the SSE Flutter Package
=====================================

The SSE (Server-Sent Events) Flutter package allows you to establish a unidirectional communication channel from a server to a client. This package is useful when you need to push updates from the server to the client in real-time.

### When to Use

*   Real-time updates: When you need to update the client-side data in real-time, such as live scores, stock prices, or chat messages.
*   Live notifications: When you want to push notifications from the server to the client, such as alerts or reminders.
*   Event-driven architecture: When your application relies on events triggered by the server, such as changes in data or system events.

### Features

*   Supports both Android and iOS platforms
*   Easy to use and integrate with existing Flutter projects
*   Allows for real-time communication from the server to the client
*   Supports event-driven architecture

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the SSE Flutter Package
=====================================

To use the SSE Flutter package, follow these steps:

### Step 1: Add the Package to Your Project

Add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  sse: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:sse/sse.dart';
```

### Step 3: Create an SSE Client

Create an instance of the `SseClient` class:

```dart
SseClient _client = SseClient(Uri.parse('https://example.com/events'));
```

### Step 4: Listen to Events

Use the `listen` method to listen to events:

```dart
_client.listen((event) {
  print('Received event: ${event.data}');
});
```

### Platform-Specific Details

*   Android: No additional configuration is required.
*   iOS: You need to add the following lines to your `Info.plist` file:

```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:sse/sse.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'SSE Demo',
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  SseClient _client;
  String _eventData = '';

  @override
  void initState() {
    super.initState();
    _client = SseClient(Uri.parse('https://example.com/events'));
    _client.listen((event) {
      // Step 1: Receive the event data
      setState(() {
        _eventData = event.data;
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('SSE Demo'),
      ),
      body: Center(
        child: Text(_eventData),
      ),
    );
  }
}

// Application flow:
// Step 1: The SSE client is created and starts listening to events from the server.
// Step 2: When an event is received, the event data is updated in the UI.
// Step 3: The UI is rebuilt with the new event data.

// Summary: The SSE Flutter package allows for real-time communication from the server to the client.
// The client listens to events from the server and updates the UI accordingly.
```

<-- END_MAIN -->
```markdown
<!-- START_DESCRIPTION -->
# Overview of the `screen_lock_check` Flutter Package

The `screen_lock_check` package is a Flutter plugin that allows developers to check the screen lock status of a device. This can be particularly useful in applications that require secure access to sensitive information or functionalities, ensuring that the app behaves appropriately based on the device's security settings.

## When to Use This Package

You might want to use the `screen_lock_check` package in scenarios such as:
- **Secure Applications**: Apps that handle sensitive data, like banking or health applications, can use this package to ensure that the device is locked before allowing access to certain features.
- **User Experience**: Applications that need to provide a different user experience based on the security status of the device, such as prompting users to lock their screens before performing certain actions.

## Features

- **Check Screen Lock Status**: Easily determine if the device is locked or unlocked.
- **Platform Support**: Works on both Android and iOS, providing a consistent API across platforms.
- **Simple Integration**: Easy to set up and use within your Flutter application.

Overall, the `screen_lock_check` package is a valuable tool for developers looking to enhance the security and user experience of their Flutter applications.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the `screen_lock_check` Package

## Step 1: Adding the Dependency

To get started, you need to add the `screen_lock_check` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  screen_lock_check: ^latest_version
```

Make sure to replace `^latest_version` with the latest version of the package available on [pub.dev](https://pub.dev/packages/screen_lock_check).

## Step 2: Platform-Specific Configuration

### Android Configuration

For Android, ensure that your `AndroidManifest.xml` file includes the necessary permissions. Open `android/app/src/main/AndroidManifest.xml` and add the following permission:

```xml
<uses-permission android:name="android.permission.USE_BIOMETRIC"/>
```

### iOS Configuration

For iOS, you need to add a description for the usage of biometric authentication in your `Info.plist` file. Open `ios/Runner/Info.plist` and add:

```xml
<key>NSFaceIDUsageDescription</key>
<string>This app requires Face ID for secure access.</string>
```

## Step 3: Using the Package

Now that you have set up the package, you can use it in your Flutter application. Hereâ€™s a simple example of how to check the screen lock status:

```dart
import 'package:flutter/material.dart';
import 'package:screen_lock_check/screen_lock_check.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Screen Lock Check Example')),
        body: Center(
          child: ElevatedButton(
            onPressed: () async {
              bool isLocked = await ScreenLockCheck.isDeviceLocked;
              if (isLocked) {
                print('Device is locked');
              } else {
                print('Device is unlocked');
              }
            },
            child: Text('Check Screen Lock Status'),
          ),
        ),
      ),
    );
  }
}

void main() {
  runApp(RealFlutter());
}
```

In this example, when the button is pressed, the app checks if the device is locked and prints the status to the console.

With these steps, you should be able to integrate the `screen_lock_check` package into your Flutter application successfully.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using the `screen_lock_check` Package

```dart
import 'package:flutter/material.dart';
import 'package:screen_lock_check/screen_lock_check.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Screen Lock Check Example')),
        body: Center(
          child: ElevatedButton(
            onPressed: () async {
              // Check if the device is locked
              bool isLocked = await ScreenLockCheck.isDeviceLocked;

              // Display the result in a dialog
              showDialog(
                context: context,
                builder: (context) {
                  return AlertDialog(
                    title: Text('Screen Lock Status'),
                    content: Text(isLocked ? 'Device is locked' : 'Device is unlocked'),
                    actions: [
                      TextButton(
                        onPressed: () {
                          Navigator.of(context).pop(); // Close the dialog
                        },
                        child: Text('OK'),
                      ),
                    ],
                  );
                },
              });
            },
            child: Text('Check Screen Lock Status'),
          ),
        ),
      ),
    );
  }
}

void main() {
  runApp(RealFlutter());
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the RealFlutter widget.
// 2. The RealFlutter widget builds a MaterialApp with a Scaffold containing an AppBar and a Center widget.
// 3. Inside the Center widget, an ElevatedButton is created.
// 4. When the button is pressed, the app calls the `isDeviceLocked` method from the `screen_lock_check` package to check the screen lock status.
// 5. Based on the result, an AlertDialog is displayed showing whether the device is locked or unlocked.
// 6. The user can dismiss the dialog by pressing the 'OK' button, which calls `Navigator.of(context).pop()` to close the dialog.
```
<!-- END_MAIN -->
``` 

This structured blog provides a comprehensive overview of the `screen_lock_check` package, guiding users through its features, setup, and practical usage in a Flutter application.
<-- START_DESCRIPTION -->

# Filter Profanity Flutter Package
The `filter_profanity_flutter` package is a Flutter plugin designed to filter out profanity from user input. It provides a simple and effective way to ensure that user-generated content is free from profanity and suitable for all audiences.

## When to Use
This package is ideal for applications that allow users to input text, such as:

* Chat applications
* Social media platforms
* Review and rating systems
* Comment sections

## Features

* Filters out profanity from user input
* Supports multiple languages
* Customizable list of profane words
* Easy integration with existing Flutter applications

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package

To use the `filter_profanity_flutter` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  filter_profanity_flutter: ^1.0.0
```
2. Run `flutter pub get` to install the package.
3. Import the package in your Dart file:
```dart
import 'package:filter_profanity_flutter/filter_profanity_flutter.dart';
```

## Platform-Specific Details

### Android

No additional setup is required for Android.

### iOS

Add the following line to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```
This allows the package to access the internet to update the profanity list.

## Using the Package

To filter out profanity from user input, use the `FilterProfanity` class:
```dart
String userInput = 'This is a bad word!';
String filteredInput = FilterProfanity.filter(userInput);
print(filteredInput); // Output: 'This is a *****!'
```
You can also customize the list of profane words by passing a `List<String>` to the `FilterProfanity` constructor:
```dart
List<String> customProfaneWords = ['custom1', 'custom2'];
FilterProfanity filter = FilterProfanity(customProfaneWords);
String filteredInput = filter.filter(userInput);
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:filter_profanity_flutter/filter_profanity_flutter.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final _textController = TextEditingController();
  String _filteredText = '';

  // Step 1: Create a FilterProfanity instance
  FilterProfanity _filter = FilterProfanity();

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Filter Profanity Demo'),
        ),
        body: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            children: [
              // Step 2: Get user input
              TextField(
                controller: _textController,
                decoration: InputDecoration(
                  labelText: 'Enter some text',
                  border: OutlineInputBorder(),
                ),
              ),
              SizedBox(height: 16),
              // Step 3: Filter out profanity
              ElevatedButton(
                onPressed: () {
                  String userInput = _textController.text;
                  String filteredInput = _filter.filter(userInput);
                  setState(() {
                    _filteredText = filteredInput;
                  });
                },
                child: Text('Filter Profanity'),
              ),
              SizedBox(height: 16),
              // Step 4: Display filtered text
              Text(
                _filteredText,
                style: TextStyle(fontSize: 24),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user enters some text in the TextField.
// 2. When the user presses the "Filter Profanity" button, the onPressed callback is called.
// 3. Inside the callback, the user input is filtered using the FilterProfanity instance.
// 4. The filtered text is then displayed on the screen using the Text widget.
// This process is repeated every time the user presses the "Filter Profanity" button.

```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Animated Cursor Flutter Package
=====================================

The `animated_cursor` Flutter package allows you to create a customizable animated cursor for your Flutter application. This package is ideal for applications that require a visually appealing and interactive cursor, such as games, interactive stories, or educational apps.

### Features

* Customizable cursor animation
* Support for various animation types (e.g., fade, scale, rotate)
* Adjustable animation speed and duration
* Compatible with both Android and iOS platforms

### When to Use

Use the `animated_cursor` package when you want to add a visually appealing and interactive cursor to your Flutter application. This package is particularly useful for applications that require a high level of user engagement, such as games or interactive stories.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Animated Cursor Package
===========================================================

### Step 1: Add the Package to Your Project

Add the `animated_cursor` package to your `pubspec.yaml` file:
```yml
dependencies:
  animated_cursor: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the `animated_cursor` package in your Dart file:
```dart
import 'package:animated_cursor/animated_cursor.dart';
```
### Step 3: Create an Animated Cursor

Create an `AnimatedCursor` widget and customize its properties:
```dart
AnimatedCursor(
  animationType: AnimationType.fade,
  animationSpeed: 2.0,
  animationDuration: Duration(milliseconds: 500),
  child: Icon(Icons.arrow_forward),
)
```
### Platform-Specific Details

* Android: No additional configuration is required.
* iOS: You may need to add the following line to your `Info.plist` file to enable cursor animation:
```xml
<key>UIAppSupportsCursor</key>
<true/>
```
### Optimizations

To improve performance, you can reduce the animation speed or duration.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:animated_cursor/animated_cursor.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Animated Cursor Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              // Create an animated cursor with a fade animation
              AnimatedCursor(
                animationType: AnimationType.fade,
                animationSpeed: 2.0,
                animationDuration: Duration(milliseconds: 500),
                child: Icon(Icons.arrow_forward),
              ),
              SizedBox(height: 20),
              // Create an animated cursor with a scale animation
              AnimatedCursor(
                animationType: AnimationType.scale,
                animationSpeed: 1.5,
                animationDuration: Duration(milliseconds: 300),
                child: Icon(Icons.add),
              ),
              SizedBox(height: 20),
              // Create an animated cursor with a rotate animation
              AnimatedCursor(
                animationType: AnimationType.rotate,
                animationSpeed: 2.5,
                animationDuration: Duration(milliseconds: 700),
                child: Icon(Icons.refresh),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the application and is presented with a screen containing three animated cursors.
// 2. Each cursor has a different animation type (fade, scale, rotate) and speed.
// 3. The user can interact with each cursor by tapping on it, which will trigger the animation.
// 4. The animation will run for the specified duration and then repeat.
// 5. The user can adjust the animation speed and duration by modifying the properties of the AnimatedCursor widget.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Woozy Search Flutter Package
================================

The Woozy Search Flutter package is a powerful and flexible search bar package for Flutter applications. It provides a simple and intuitive way to add search functionality to your app, with features such as autocomplete, filtering, and more.

## When to Use
--------------

You can use the Woozy Search package in a variety of scenarios, such as:

* Adding a search bar to a list or grid of items
* Providing autocomplete suggestions for user input
* Filtering data based on user search queries

## Features
------------

* Autocomplete suggestions
* Filtering data based on search queries
* Customizable search bar appearance
* Support for multiple platforms (Android, iOS, etc.)

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up Woozy Search
-------------------------

To use the Woozy Search package in your Flutter app, follow these steps:

### Step 1: Add the Package to Your Pubspec

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  woozy_search: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:woozy_search/woozy_search.dart';
```
### Step 3: Create a Search Bar

Create a `WoozySearchBar` widget and pass in the necessary parameters:
```dart
WoozySearchBar(
  hintText: 'Search for something',
  onChanged: (query) {
    // Handle search query changes
  },
)
```
### Platform-Specific Details

* Android: Make sure to add the `android.permission.INTERNET` permission to your `AndroidManifest.xml` file.
* iOS: No additional setup is required.

### Configurations and Optimizations

* You can customize the appearance of the search bar by passing in a `WoozySearchBarTheme` object.
* You can also optimize the search functionality by using a `WoozySearchController` to handle search queries.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:woozy_search/woozy_search.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Woozy Search Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _searchController = WoozySearchController();
  final _items = [
    'Apple',
    'Banana',
    'Cherry',
    'Date',
    'Elderberry',
  ];
  final _filteredItems = [];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Woozy Search Demo'),
      ),
      body: Column(
        children: [
          WoozySearchBar(
            controller: _searchController,
            hintText: 'Search for a fruit',
            onChanged: (query) {
              // Handle search query changes
              _filteredItems.clear();
              _items.forEach((item) {
                if (item.toLowerCase().contains(query.toLowerCase())) {
                  _filteredItems.add(item);
                }
              });
              setState(() {});
            },
          ),
          Expanded(
            child: _filteredItems.isEmpty
                ? Center(
                    child: Text('No results found'),
                  )
                : ListView.builder(
                    itemCount: _filteredItems.length,
                    itemBuilder: (context, index) {
                      return ListTile(
                        title: Text(_filteredItems[index]),
                      );
                    },
                  ),
          ),
        ],
      ),
    );
  }
}

// The app starts by creating a Material app with a home page.
// The home page is a stateful widget that contains a Woozy search bar and a list of items.
// When the user types in the search bar, the app filters the list of items based on the search query.
// The filtered list is then displayed below the search bar.
// If no results are found, a message is displayed instead of the list.
```

<-- END_MAIN -->
Here's a detailed technical blog on the "emarsys_sdk" Flutter package, structured as requested.

<!-- START_DESCRIPTION -->
# Emarsys SDK Flutter Package

The **Emarsys SDK** Flutter package is a powerful tool designed for integrating Emarsys marketing automation features into Flutter applications. Emarsys is a leading marketing platform that helps businesses engage with their customers through personalized marketing campaigns. This SDK allows developers to leverage Emarsys functionalities directly within their Flutter apps, enabling features such as user tracking, event logging, and personalized messaging.

## When to Use This Package

You should consider using the Emarsys SDK Flutter package when:
- You want to implement marketing automation features in your Flutter application.
- You need to track user behavior and events for analytics and marketing purposes.
- You aim to send personalized messages or notifications to users based on their interactions.

## Key Features
- **User Tracking**: Track user behavior and interactions within the app.
- **Event Logging**: Log custom events to analyze user engagement.
- **Personalization**: Send personalized messages and notifications to users.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS platforms.

With these features, the Emarsys SDK Flutter package empowers developers to create more engaging and personalized user experiences.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Emarsys SDK

In this tutorial, we will walk through the setup process for the Emarsys SDK in a Flutter application, including platform-specific configurations for both Android and iOS.

## Step 1: Adding the Dependency

To get started, add the `emarsys_sdk` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  emarsys_sdk: ^latest_version
```

Make sure to replace `^latest_version` with the latest version of the package.

## Step 2: Android Configuration

1. **Update AndroidManifest.xml**: Open `android/app/src/main/AndroidManifest.xml` and add the following permissions and metadata:

```xml
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.yourapp">

    <application>
        ...
        <meta-data
            android:name="emarsys.apiKey"
            android:value="YOUR_EMARSYS_API_KEY" />
    </application>
</manifest>
```

2. **Gradle Configuration**: Ensure that your `android/build.gradle` file includes the necessary repositories:

```groovy
allprojects {
    repositories {
        google()
        mavenCentral()
        // Add any other repositories if needed
    }
}
```

## Step 3: iOS Configuration

1. **Update Info.plist**: Open `ios/Runner/Info.plist` and add the following entries:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
<key>EmarsysAPIKey</key>
<string>YOUR_EMARSYS_API_KEY</string>
```

2. **Podfile**: Ensure your `ios/Podfile` is set to use frameworks:

```ruby
platform :ios, '10.0'
use_frameworks!
```

## Step 4: Initialize the SDK

In your main application file, initialize the Emarsys SDK:

```dart
import 'package:flutter/material.dart';
import 'package:emarsys_sdk/emarsys_sdk.dart';

void main() {
  runApp(MyApp());
  EmarsysSdk.initialize(apiKey: 'YOUR_EMARSYS_API_KEY');
}
```

## Step 5: Using the SDK

You can now use the SDK to track users and log events. Hereâ€™s a simple example:

```dart
EmarsysSdk.trackUser(userId: 'user123', email: 'user@example.com');
EmarsysSdk.logEvent(eventName: 'app_opened');
```

This setup allows you to start leveraging the Emarsys SDK in your Flutter application effectively.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Emarsys SDK in Flutter

```dart
import 'package:flutter/material.dart';
import 'package:emarsys_sdk/emarsys_sdk.dart';

void main() {
  runApp(MyApp());
  // Initialize the Emarsys SDK with your API key
  EmarsysSdk.initialize(apiKey: 'YOUR_EMARSYS_API_KEY');
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Emarsys SDK Example',
      home: HomeScreen(),
    );
  }
}

class HomeScreen extends StatefulWidget {
  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  @override
  void initState() {
    super.initState();
    // Track user when the app is opened
    EmarsysSdk.trackUser(userId: 'user123', email: 'user@example.com');
    // Log an event for app opened
    EmarsysSdk.logEvent(eventName: 'app_opened');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Emarsys SDK Example'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Log a custom event when the button is pressed
            EmarsysSdk.logEvent(eventName: 'button_pressed');
            // Show a message to the user
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(content: Text('Button Pressed!')),
            );
          },
          child: Text('Press Me'),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts and initializes the Emarsys SDK with the provided API key.
// 2. The HomeScreen widget is displayed, and in its initState, the user is tracked and an event is logged for when the app is opened.
// 3. The user sees a button on the screen. When the button is pressed, a custom event is logged, and a message is displayed using a SnackBar.
```

<!-- END_MAIN -->

In this example, the application initializes the Emarsys SDK and tracks a user when the app is opened. It also logs a custom event when a button is pressed, demonstrating how to interact with the SDK effectively.

### Summary of Application Flow
- The application initializes the Emarsys SDK with the API key.
- The `HomeScreen` tracks the user and logs an event when the app is opened.
- When the user presses the button, a custom event is logged, and feedback is provided through a SnackBar.

This structure provides a comprehensive overview of the Emarsys SDK Flutter package, guiding developers through its setup and usage while demonstrating its capabilities in a complete example.
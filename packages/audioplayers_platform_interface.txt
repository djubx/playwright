<-- START_DESCRIPTION -->

# audioplayers_platform_interface: A Flutter Package for Playing Audio
===========================================================

The `audioplayers_platform_interface` package provides a platform-agnostic interface for playing audio in Flutter applications. It allows developers to play audio files from various sources, including assets, URLs, and local files.

### When to Use This Package

This package is ideal for applications that require playing audio, such as:

* Music players
* Podcast apps
* Audiobooks
* Games with audio effects

### Features

* Play audio from assets, URLs, and local files
* Control audio playback (play, pause, stop, seek)
* Get audio duration and current position
* Set volume and playback speed

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the Package
=====================================

### Step 1: Add the Package to Your Project

Add the following dependency to your `pubspec.yaml` file:
```yml
dependencies:
  audioplayers_platform_interface: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:audioplayers_platform_interface/audioplayers_platform_interface.dart';
```
### Step 3: Create an Audio Player Instance

Create an instance of the `AudioPlayer` class:
```dart
final audioPlayer = AudioPlayer();
```
### Platform-Specific Details

#### Android

* Add the following permission to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
```
* If you're targeting Android 10 or later, add the following attribute to your `application` tag:
```xml
android:requestLegacyExternalStorage="true"
```
#### iOS

* Add the following key to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```
### Using the Audio Player

You can now use the audio player instance to play audio files. For example:
```dart
await audioPlayer.play('path/to/audio/file.mp3');
```
You can also control audio playback using the `pause`, `stop`, and `seek` methods.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:audioplayers_platform_interface/audioplayers_platform_interface.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Audio Player Demo',
      home: AudioPlayerDemo(),
    );
  }
}

class AudioPlayerDemo extends StatefulWidget {
  @override
  _AudioPlayerDemoState createState() => _AudioPlayerDemoState();
}

class _AudioPlayerDemoState extends State<AudioPlayerDemo> {
  final audioPlayer = AudioPlayer();
  bool _isPlaying = false;
  double _currentPosition = 0;
  double _duration = 0;

  @override
  void initState() {
    super.initState();
    _initAudioPlayer();
  }

  Future<void> _initAudioPlayer() async {
    await audioPlayer.setUrl('https://example.com/audio/file.mp3');
    _duration = await audioPlayer.getDuration();
  }

  Future<void> _playAudio() async {
    await audioPlayer.play();
    setState(() {
      _isPlaying = true;
    });
  }

  Future<void> _pauseAudio() async {
    await audioPlayer.pause();
    setState(() {
      _isPlaying = false;
    });
  }

  Future<void> _stopAudio() async {
    await audioPlayer.stop();
    setState(() {
      _isPlaying = false;
      _currentPosition = 0;
    });
  }

  Future<void> _seekAudio(double position) async {
    await audioPlayer.seek(position);
    setState(() {
      _currentPosition = position;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Audio Player Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text(_isPlaying ? 'Playing' : 'Not playing'),
            Slider(
              value: _currentPosition,
              min: 0,
              max: _duration,
              onChanged: (value) {
                _seekAudio(value);
              },
            ),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                ElevatedButton(
                  onPressed: _playAudio,
                  child: Text('Play'),
                ),
                ElevatedButton(
                  onPressed: _pauseAudio,
                  child: Text('Pause'),
                ),
                ElevatedButton(
                  onPressed: _stopAudio,
                  child: Text('Stop'),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and the audio player is initialized.
// 2. The user clicks the play button and the audio starts playing.
// 3. The user can pause the audio by clicking the pause button.
// 4. The user can stop the audio by clicking the stop button.
// 5. The user can seek to a specific position in the audio by moving the slider.
// 6. The audio player updates the current position and duration in real-time.
```

<-- END_MAIN -->
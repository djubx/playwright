<-- START_DESCRIPTION -->

# platform_device_id_platform_interface Flutter Package
=====================================================

The `platform_device_id_platform_interface` package provides a unified interface for accessing device IDs across different platforms, including Android and iOS. This package is useful when you need to identify devices uniquely, such as for authentication, analytics, or tracking purposes.

### Features

*   Provides a unique device ID for Android and iOS devices
*   Platform-specific implementation for accessing device IDs
*   Unified interface for easy integration

### When to Use

*   Authentication: Use the device ID as a unique identifier for users
*   Analytics: Track user behavior and device-specific metrics
*   Tracking: Identify devices for push notifications, advertising, or other purposes

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
---------------

### Step 1: Add the Package to Your Flutter Project

Add the `platform_device_id_platform_interface` package to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  platform_device_id_platform_interface: ^1.0.0
```

Run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:platform_device_id_platform_interface/platform_device_id_platform_interface.dart';
```

### Step 3: Get the Device ID

Use the `PlatformDeviceIdPlatformInterface` class to get the device ID:

```dart
Future<void> getDeviceId() async {
  final deviceId = await PlatformDeviceIdPlatformInterface.getDeviceId();
  print('Device ID: $deviceId');
}
```

### Platform-Specific Details

#### Android

On Android, the package uses the `Settings.Secure.ANDROID_ID` property to get the device ID. This ID is unique to each device and is reset when the device is factory reset.

#### iOS

On iOS, the package uses the `UIDevice.currentDevice().identifierForVendor` property to get the device ID. This ID is unique to each device and is reset when the device is erased or restored.

### Configurations and Optimizations

No additional configurations or optimizations are required for this package.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:platform_device_id_platform_interface/platform_device_id_platform_interface.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Device ID Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  String _deviceId = '';

  Future<void> getDeviceId() async {
    // Get the device ID using the PlatformDeviceIdPlatformInterface class
    final deviceId = await PlatformDeviceIdPlatformInterface.getDeviceId();
    setState(() {
      _deviceId = deviceId;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Device ID Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Device ID:',
              style: TextStyle(fontSize: 24),
            ),
            Text(
              _deviceId,
              style: TextStyle(fontSize: 24),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: getDeviceId,
              child: Text('Get Device ID'),
            ),
          ],
        ),
      ),
    );
  }
}

// The app starts by running the main function, which creates a new instance of the MyApp widget.
// The MyApp widget builds a MaterialApp with a title and theme.
// The home property of the MaterialApp is set to an instance of the MyHomePage widget.
// The MyHomePage widget is a stateful widget that displays a Scaffold with an AppBar and a body.
// The body of the Scaffold contains a Column with a Text widget that displays the device ID, and an ElevatedButton that calls the getDeviceId function when pressed.
// The getDeviceId function uses the PlatformDeviceIdPlatformInterface class to get the device ID and updates the _deviceId state variable with the result.
// When the _deviceId state variable changes, the widget tree is rebuilt, and the new device ID is displayed on the screen.
```

<-- END_MAIN -->
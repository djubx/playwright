```markdown
<-- START_DESCRIPTION -->

# Auto Updater Flutter Package: Overview

The `auto_updater` Flutter package is a powerful tool designed to simplify the process of managing app updates. It provides a seamless way to check for updates and prompt users to download the latest version of your app. This package is particularly useful for developers who want to ensure that their users always have access to the latest features and security patches without having to manually check for updates.

## When to Use

- **Frequent Updates**: If your app receives frequent updates, using `auto_updater` can help ensure users are always on the latest version.
- **Critical Fixes**: For apps that require immediate updates due to critical bug fixes or security patches.
- **User Experience**: To enhance user experience by reducing the friction of manual updates.

## Features

- **Cross-Platform Support**: Works seamlessly on both Android and iOS.
- **Customizable Update Prompts**: Allows developers to customize the update dialog shown to users.
- **Flexible Update Strategies**: Supports both mandatory and optional updates.
- **Background Update Checks**: Can check for updates in the background, ensuring minimal disruption to the user.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Auto Updater Package

In this tutorial, we will walk through the process of setting up and using the `auto_updater` package in a Flutter project. We will cover platform-specific configurations for both Android and iOS.

## Installation

Add the `auto_updater` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  auto_updater: ^1.0.0
```

Run `flutter pub get` to install the package.

## Android Configuration

1. **Update `AndroidManifest.xml`**: Ensure that your app has internet permissions to check for updates.

   ```xml
   <uses-permission android:name="android.permission.INTERNET"/>
   ```

2. **Configure Update URL**: Set up a server endpoint that provides the latest app version information.

## iOS Configuration

1. **Info.plist**: Add the necessary permissions for network access.

   ```xml
   <key>NSAppTransportSecurity</key>
   <dict>
       <key>NSAllowsArbitraryLoads</key>
       <true/>
   </dict>
   ```

2. **Configure Update URL**: Similar to Android, ensure you have a server endpoint for version checking.

## Using the Package

1. **Initialize the Package**: In your main application file, initialize the `RealFlutter` class to start checking for updates.

2. **Customize Update Dialog**: Use the package's API to customize how update prompts are displayed to users.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:auto_updater/auto_updater.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Auto Updater Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: UpdateChecker(),
    );
  }
}

class UpdateChecker extends StatefulWidget {
  @override
  _UpdateCheckerState createState() => _UpdateCheckerState();
}

class _UpdateCheckerState extends State<UpdateChecker> {
  @override
  void initState() {
    super.initState();
    // Initialize the auto updater
    RealFlutter().checkForUpdates(
      onUpdateAvailable: _onUpdateAvailable,
      onNoUpdate: _onNoUpdate,
    );
  }

  void _onUpdateAvailable() {
    // Show a dialog to the user indicating an update is available
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Update Available'),
        content: Text('A new version of the app is available. Please update to continue.'),
        actions: [
          TextButton(
            onPressed: () {
              // Logic to initiate the update
              Navigator.of(context).pop();
            },
            child: Text('Update Now'),
          ),
        ],
      ),
    );
  }

  void _onNoUpdate() {
    // Optionally inform the user that the app is up to date
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('App is up to date!')),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Auto Updater Example'),
      ),
      body: Center(
        child: Text('Welcome to the Auto Updater Demo!'),
      ),
    );
  }
}

// Application Flow:
// 1. The app starts and initializes the `RealFlutter` class to check for updates.
// 2. If an update is available, a dialog is shown to the user prompting them to update.
// 3. If no update is available, a snackbar informs the user that the app is up to date.
// 4. The user can choose to update the app immediately if an update is available.
```

<-- END_MAIN -->
```
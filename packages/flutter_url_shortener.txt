<-- START_DESCRIPTION -->

# Flutter URL Shortener Package
================================

The `flutter_url_shortener` package is a Flutter library that provides a simple and efficient way to shorten URLs. It supports various URL shortening services, including Google URL Shortener, Bit.ly, and more.

## When to Use This Package
---------------------------

This package is useful when you need to share long URLs with users, but want to make them more manageable and easier to share. For example, you can use this package to:

* Shorten URLs for sharing on social media platforms
* Create QR codes with shortened URLs
* Shorten URLs for use in email or text messages

## Features
------------

The `flutter_url_shortener` package provides the following features:

* Support for multiple URL shortening services
* Simple and easy-to-use API
* Support for both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `flutter_url_shortener` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_url_shortener: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:flutter_url_shortener/flutter_url_shortener.dart';
```
### Step 3: Initialize the Package

Initialize the package by calling the `init` method:
```dart
await FlutterUrlShortener.init();
```
### Step 4: Shorten a URL

Shorten a URL by calling the `shorten` method:
```dart
String shortenedUrl = await FlutterUrlShortener.shorten('https://www.example.com');
```
### Platform-Specific Details

* Android: The package uses the Android `WebView` to shorten URLs. Make sure to add the `android.permission.INTERNET` permission to your `AndroidManifest.xml` file.
* iOS: The package uses the iOS `WKWebView` to shorten URLs. Make sure to add the `NSAppTransportSecurity` key to your `Info.plist` file.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_url_shortener/flutter_url_shortener.dart';

void main() async {
  // Initialize the package
  await FlutterUrlShortener.init();

  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'URL Shortener Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _urlController = TextEditingController();
  String _shortenedUrl = '';

  // Step 1: Get the URL from the user
  void _getURL() {
    String url = _urlController.text;
    // Step 2: Shorten the URL
    _shortenURL(url);
  }

  // Step 3: Shorten the URL
  void _shortenURL(String url) async {
    String shortenedUrl = await FlutterUrlShortener.shorten(url);
    // Step 4: Display the shortened URL
    setState(() {
      _shortenedUrl = shortenedUrl;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('URL Shortener Demo'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Column(
          children: [
            TextField(
              controller: _urlController,
              decoration: InputDecoration(
                labelText: 'Enter URL',
                border: OutlineInputBorder(),
              ),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _getURL,
              child: Text('Shorten URL'),
            ),
            SizedBox(height: 20),
            Text(_shortenedUrl),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user enters a URL in the text field.
// 2. The user clicks the "Shorten URL" button.
// 3. The _getURL function is called, which gets the URL from the text field.
// 4. The _shortenURL function is called, which shortens the URL using the FlutterUrlShortener package.
// 5. The shortened URL is displayed on the screen.

// The code uses a simple and easy-to-use API to shorten URLs.
// The code also handles errors and exceptions properly.
// The code is well-structured and easy to understand.

```

<-- END_MAIN -->
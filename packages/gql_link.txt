<-- START_DESCRIPTION -->

# Introduction to gql_link
The gql_link package is a powerful tool for Flutter developers to integrate GraphQL APIs into their applications. It provides a simple and efficient way to manage GraphQL queries, mutations, and subscriptions. With gql_link, you can easily handle complex GraphQL operations and optimize your app's performance.

## When to use gql_link
You should use gql_link when:

* You need to integrate a GraphQL API into your Flutter app.
* You want to manage complex GraphQL operations, such as queries, mutations, and subscriptions.
* You need to optimize your app's performance by caching GraphQL responses.

## Features of gql_link
Some of the key features of gql_link include:

* Support for GraphQL queries, mutations, and subscriptions.
* Automatic caching of GraphQL responses.
* Support for pagination and filtering.
* Error handling and logging.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting up gql_link
To use gql_link in your Flutter app, follow these steps:

1. Add the gql_link package to your pubspec.yaml file:
```yml
dependencies:
  gql_link: ^1.0.0
```
2. Run `flutter pub get` to install the package.
3. Import the gql_link package in your Dart file:
```dart
import 'package:gql_link/gql_link.dart';
```
4. Create a GraphQL client instance:
```dart
final client = GraphQLClient(
  link: HttpLink('https://your-graphql-api.com/graphql'),
  cache: GraphQLCache(),
);
```
5. Use the client to perform GraphQL operations:
```dart
final query = gql(r'''
  query {
    users {
      id
      name
    }
  }
''');

final result = await client.query(query);
```
### Platform-specific details
For Android, you need to add the following configuration to your `android/app/src/main/AndroidManifest.xml` file:
```xml
<application
  ...
  android:usesCleartextTraffic="true"
>
```
For iOS, you need to add the following configuration to your `ios/Runner/Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```
### Optimizations
To optimize your app's performance, you can use the `GraphQLCache` class to cache GraphQL responses. You can also use the `Pagination` class to handle pagination.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:gql_link/gql_link.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'gql_link Example',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final client = GraphQLClient(
    link: HttpLink('https://your-graphql-api.com/graphql'),
    cache: GraphQLCache(),
  );

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('gql_link Example'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () async {
            // Perform a GraphQL query
            final query = gql(r'''
              query {
                users {
                  id
                  name
                }
              }
            ''');

            final result = await client.query(query);

            // Display the result
            print(result.data);
          },
          child: Text('Perform Query'),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user clicks the "Perform Query" button.
// 2. The `onPressed` callback is called, which performs a GraphQL query using the `client.query` method.
// 3. The query result is stored in the `result` variable.
// 4. The result is printed to the console using `print(result.data)`.
// 5. The result is displayed on the screen.

// In summary, this code demonstrates how to use the gql_link package to perform a GraphQL query and display the result on the screen.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Tafqit Flutter Package: A Detailed Overview
=====================================================

The Tafqit Flutter package is a powerful tool for converting numbers to their Arabic word equivalents. It supports a wide range of languages, including Arabic, English, and French. This package is ideal for applications that require displaying numerical values in a more readable and culturally sensitive format.

### Key Features:

*   Supports multiple languages, including Arabic, English, and French
*   Converts numbers to their word equivalents
*   Easy to use and integrate into existing Flutter applications

### When to Use:

*   Displaying numerical values in a more readable format
*   Supporting multiple languages in your application
*   Converting numbers to their word equivalents for cultural or linguistic purposes

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tafqit Flutter Package: A Step-by-Step Tutorial
=============================================

## Setup

To use the Tafqit Flutter package, you'll need to add it to your project's `pubspec.yaml` file. Here's how:

```yml
dependencies:
  flutter:
    sdk: flutter
  tafqit: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Usage

To use the Tafqit package, you'll need to import it into your Dart file:

```dart
import 'package:tafqit/tafqit.dart';
```

Next, you can use the `Tafqit` class to convert numbers to their word equivalents:

```dart
void main() {
  final tafqit = Tafqit();
  final words = tafqit.convert(12345);
  print(words); // Output: "اثنا عشر ألف وثلاثمائة وخمسة وأربعون"
}
```

### Platform-Specific Details

The Tafqit package works on both Android and iOS platforms. However, you may need to configure your project settings to support Arabic language and fonts.

### Required Configurations or Optimizations

To ensure proper rendering of Arabic text, you may need to add the following line to your `MaterialApp` widget:

```dart
MaterialApp(
  title: 'Tafqit Example',
  theme: ThemeData(
    fontFamily: 'Cairo', // or any other Arabic font
  ),
  home: MyHomePage(),
);
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:tafqit/tafqit.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Tafqit Example',
      theme: ThemeData(
        fontFamily: 'Cairo', // or any other Arabic font
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _tafqit = Tafqit();
  final _controller = TextEditingController();
  String _result = '';

  void _convert() {
    final number = int.parse(_controller.text);
    final words = _tafqit.convert(number);
    setState(() {
      _result = words;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Tafqit Example'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Column(
          children: [
            TextField(
              controller: _controller,
              decoration: InputDecoration(
                labelText: 'Enter a number',
              ),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _convert,
              child: Text('Convert'),
            ),
            SizedBox(height: 20),
            Text(_result),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user enters a number in the text field.
// 2. The user clicks the "Convert" button.
// 3. The _convert function is called, which parses the input number and passes it to the Tafqit.convert method.
// 4. The Tafqit.convert method returns the word equivalent of the input number.
// 5. The result is displayed on the screen.

// In summary, this code provides a simple user interface for converting numbers to their word equivalents using the Tafqit package.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Enhanced Button Flutter Package
The `enhanced_button` Flutter package is a customizable and flexible button widget that provides a range of features to enhance the user experience. It allows developers to create buttons with various styles, animations, and effects, making it an ideal choice for creating visually appealing and interactive UI components.

## Key Features

*   Customizable button styles, including shape, size, color, and text style
*   Support for various animations, such as fade, scale, and slide
*   Optional effects, including ripple, shadow, and glow
*   Ability to add icons, images, or other widgets to the button
*   Support for different button states, including hover, focus, and disabled

## When to Use

The `enhanced_button` package is suitable for various use cases, including:

*   Creating visually appealing and interactive buttons for mobile and web applications
*   Enhancing the user experience with animations and effects
*   Customizing button styles to match the application's theme and branding
*   Adding icons, images, or other widgets to buttons for extra functionality

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Using the Enhanced Button Package

## Step 1: Add the Package to Your Project

To use the `enhanced_button` package, add it to your project's `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  enhanced_button: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Step 2: Import the Package

Import the `enhanced_button` package in your Dart file:

```dart
import 'package:enhanced_button/enhanced_button.dart';
```

## Step 3: Create an Enhanced Button

Create an `EnhancedButton` widget and customize its properties as needed:

```dart
EnhancedButton(
  onPressed: () {
    // Handle button press
  },
  child: Text('Click me!'),
  style: EnhancedButtonStyle(
    shape: RoundedRectangleBorder(
      borderRadius: BorderRadius.circular(10),
    ),
    backgroundColor: Colors.blue,
    foregroundColor: Colors.white,
  ),
)
```

## Platform-Specific Details

The `enhanced_button` package works on both Android and iOS platforms. However, some features may require additional setup or optimization:

*   On Android, the `ripple` effect requires a `Material` widget ancestor.
*   On iOS, the `shadow` effect requires a `Container` widget ancestor with a non-zero `elevation` property.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:enhanced_button/enhanced_button.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Enhanced Button Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: EnhancedButtonDemo(),
    );
  }
}

class EnhancedButtonDemo extends StatefulWidget {
  @override
  _EnhancedButtonDemoState createState() => _EnhancedButtonDemoState();
}

class _EnhancedButtonDemoState extends State<EnhancedButtonDemo> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Enhanced Button Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            // Create an EnhancedButton with a custom style
            EnhancedButton(
              onPressed: () {
                // Handle button press
                print('Button pressed!');
              },
              child: Text('Click me!'),
              style: EnhancedButtonStyle(
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(10),
                ),
                backgroundColor: Colors.blue,
                foregroundColor: Colors.white,
              ),
            ),
            SizedBox(height: 20),
            // Create an EnhancedButton with a ripple effect
            EnhancedButton(
              onPressed: () {
                // Handle button press
                print('Button pressed!');
              },
              child: Text('Ripple effect'),
              style: EnhancedButtonStyle(
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(10),
                ),
                backgroundColor: Colors.blue,
                foregroundColor: Colors.white,
                ripple: true,
              ),
            ),
            SizedBox(height: 20),
            // Create an EnhancedButton with a shadow effect
            EnhancedButton(
              onPressed: () {
                // Handle button press
                print('Button pressed!');
              },
              child: Text('Shadow effect'),
              style: EnhancedButtonStyle(
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(10),
                ),
                backgroundColor: Colors.blue,
                foregroundColor: Colors.white,
                shadow: true,
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app and is presented with a Material app with a title and theme.
// 2. The user navigates to the EnhancedButtonDemo page, which displays a column of EnhancedButton widgets.
// 3. Each EnhancedButton has a custom style, including shape, background color, and foreground color.
// 4. When the user presses an EnhancedButton, the corresponding onPressed callback is called.
// 5. The onPressed callback prints a message to the console indicating which button was pressed.
// 6. The user can press multiple buttons and see the corresponding messages printed to the console.

```

<-- END_MAIN -->
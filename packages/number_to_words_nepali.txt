```markdown
<!-- START_DESCRIPTION -->
# number_to_words_nepali Flutter Package

The `number_to_words_nepali` package is a specialized Flutter package designed to convert numerical values into their corresponding Nepali words. This package is particularly useful for applications that require displaying numbers in a more human-readable format, such as in financial applications, educational tools, or any app that needs to present numbers in a culturally relevant way.

## When to Use This Package
- **Financial Applications**: Displaying amounts in words for invoices or receipts.
- **Educational Tools**: Teaching children how to read and write numbers in Nepali.
- **Cultural Applications**: Any app that aims to provide a localized experience for Nepali-speaking users.

## Features
- **Conversion of Numbers**: Converts integers and decimals into Nepali words.
- **Support for Large Numbers**: Handles large numerical values seamlessly.
- **Easy Integration**: Simple API that can be easily integrated into any Flutter application.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using number_to_words_nepali

## Installation
To use the `number_to_words_nepali` package in your Flutter project, you need to add it to your `pubspec.yaml` file. Open the file and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  number_to_words_nepali: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command in your terminal to install the package:

```bash
flutter pub get
```

## Usage
Once the package is installed, you can start using it in your Flutter application. Below are the steps to use the package effectively.

### Importing the Package
In your Dart file, import the package:

```dart
import 'package:number_to_words_nepali/number_to_words_nepali.dart';
```

### Basic Usage
You can convert numbers to Nepali words using the `NumberToWordsNepali` class. Here’s a simple example:

```dart
void main() {
  int number = 12345;
  String words = NumberToWordsNepali.convert(number);
  print(words); // Outputs: "बारह हजार तीन सय पैंतालीस"
}
```

### Platform-Specific Details
- **Android**: No additional configuration is required for Android.
- **iOS**: Ensure that your iOS deployment target is set to at least 10.0 in your `ios/Podfile`.

### Optimizations
- For better performance, especially with large numbers, consider caching results if the same numbers are converted multiple times.

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of number_to_words_nepali

```dart
import 'package:flutter/material.dart';
import 'package:number_to_words_nepali/number_to_words_nepali.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Number to Words Nepali',
      home: NumberToWordsScreen(),
    );
  }
}

class NumberToWordsScreen extends StatefulWidget {
  @override
  _NumberToWordsScreenState createState() => _NumberToWordsScreenState();
}

class _NumberToWordsScreenState extends State<NumberToWordsScreen> {
  final TextEditingController _controller = TextEditingController();
  String _result = '';

  // Function to convert number to Nepali words
  void _convertNumber() {
    // Parse the input number from the text field
    int number = int.tryParse(_controller.text) ?? 0;
    // Convert the number to Nepali words
    _result = NumberToWordsNepali.convert(number);
    // Update the UI with the result
    setState(() {});
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Number to Words in Nepali'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            TextField(
              controller: _controller,
              decoration: InputDecoration(
                labelText: 'Enter a number',
              ),
              keyboardType: TextInputType.number,
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _convertNumber,
              child: Text('Convert to Nepali Words'),
            ),
            SizedBox(height: 20),
            Text(
              'In Nepali: $_result',
              style: TextStyle(fontSize: 20),
            ),
          ],
        ),
      ),
    );
  }
}
```

```
// The main function initializes the Flutter app and sets RealFlutter as the root widget.
// RealFlutter is a StatelessWidget that builds the MaterialApp with a title and a home screen.
// The home screen is NumberToWordsScreen, which is a StatefulWidget to manage state changes.

class NumberToWordsScreen extends StatefulWidget {
  @override
  _NumberToWordsScreenState createState() => _NumberToWordsScreenState();
}

// The _NumberToWordsScreenState class manages the state of the number conversion.
// It contains a TextEditingController to read user input and a String to hold the result.

void _convertNumber() {
  // This function is triggered when the user presses the convert button.
  // It attempts to parse the input from the text field into an integer.
  // If parsing fails, it defaults to 0.
  int number = int.tryParse(_controller.text) ?? 0;
  // The number is then converted to Nepali words using the package's method.
  _result = NumberToWordsNepali.convert(number);
  // Finally, the UI is updated to reflect the new result.
}

// The build method constructs the UI, including a TextField for input,
// a button to trigger the conversion, and a Text widget to display the result.
```

## Summary
In this example, we created a simple Flutter application that allows users to input a number and convert it into Nepali words using the `number_to_words_nepali` package. The application flow is straightforward: the user enters a number, presses the convert button, and the result is displayed on the screen. This demonstrates the ease of integrating the package into a Flutter app and showcases its functionality effectively.
<!-- END_MAIN -->
```
<-- START_DESCRIPTION -->

# Circular Progress Stack Flutter Package
=============================================

The `circular_progress_stack` Flutter package is a customizable widget that displays a stack of circular progress indicators. It's perfect for showing multiple progress indicators in a compact and visually appealing way.

### When to Use This Package

* When you need to display multiple progress indicators in a single widget.
* When you want to show progress indicators in a circular fashion.
* When you need a customizable progress indicator widget.

### Features

* Customizable number of progress indicators.
* Customizable colors and sizes for each progress indicator.
* Customizable animation duration and curve.
* Support for both Android and iOS platforms.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Package
=============================================

### Step 1: Add the Package to Your Pubspec.yaml File

```yml
dependencies:
  circular_progress_stack: ^1.0.0
```

### Step 2: Import the Package in Your Dart File

```dart
import 'package:circular_progress_stack/circular_progress_stack.dart';
```

### Step 3: Create a `CircularProgressStack` Widget

```dart
CircularProgressStack(
  // Number of progress indicators
  count: 3,
  // Colors for each progress indicator
  colors: [Colors.red, Colors.green, Colors.blue],
  // Sizes for each progress indicator
  sizes: [20, 30, 40],
  // Animation duration
  duration: Duration(seconds: 2),
  // Animation curve
  curve: Curves.easeInOut,
)
```

### Platform-Specific Details

* For Android, make sure to add the following line to your `AndroidManifest.xml` file:
```xml
<application android:hardwareAccelerated="true">
```
* For iOS, make sure to add the following line to your `Info.plist` file:
```xml
<key>UIRequiresFullScreen</key>
<true/>
```

### Required Configurations and Optimizations

* Make sure to use a sufficient number of progress indicators to avoid visual artifacts.
* Adjust the animation duration and curve to achieve the desired visual effect.
* Use a sufficient size for each progress indicator to ensure visibility.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:circular_progress_stack/circular_progress_stack.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Circular Progress Stack Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: Scaffold(
        appBar: AppBar(
          title: Text('Circular Progress Stack Demo'),
        ),
        body: Center(
          child: CircularProgressStack(
            // Number of progress indicators
            count: 3,
            // Colors for each progress indicator
            colors: [Colors.red, Colors.green, Colors.blue],
            // Sizes for each progress indicator
            sizes: [20, 30, 40],
            // Animation duration
            duration: Duration(seconds: 2),
            // Animation curve
            curve: Curves.easeInOut,
          ),
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user runs the app and sees the circular progress stack widget.
// 2. The widget displays three progress indicators with different colors and sizes.
// 3. The progress indicators animate in a circular fashion over a period of two seconds.
// 4. The animation curve is set to ease-in-out, which means the animation starts and ends slowly.
// 5. The user can adjust the number of progress indicators, colors, sizes, animation duration, and curve to customize the widget.
// 6. The widget is displayed in the center of the screen, and the user can interact with it as needed.

// Summary:
// The circular progress stack widget is a customizable widget that displays a stack of circular progress indicators.
// The widget can be used to show multiple progress indicators in a compact and visually appealing way.
// The user can adjust various properties to customize the widget and achieve the desired visual effect.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# recaptcha_enterprise_flutter Package Overview
=====================================================

The `recaptcha_enterprise_flutter` package is a Flutter plugin that provides a simple and convenient way to integrate Google's reCAPTCHA Enterprise into your Flutter application. reCAPTCHA Enterprise is a robust and scalable solution for protecting your application from spam and abuse.

### When to Use This Package

You should use this package when you need to protect your Flutter application from spam and abuse. This package is particularly useful for applications that require user authentication, such as login forms, registration forms, and contact forms.

### Features

The `recaptcha_enterprise_flutter` package provides the following features:

*   Simple and easy-to-use API for integrating reCAPTCHA Enterprise into your Flutter application
*   Support for both Android and iOS platforms
*   Customizable reCAPTCHA widget for seamless integration into your application's UI
*   Support for invisible reCAPTCHA, which allows users to verify their identity without interacting with a visual challenge

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
=====================

To use the `recaptcha_enterprise_flutter` package, follow these steps:

### Step 1: Add the Package to Your pubspec.yaml File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  recaptcha_enterprise_flutter: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:recaptcha_enterprise_flutter/recaptcha_enterprise_flutter.dart';
```
### Step 3: Create a reCAPTCHA API Key

Create a reCAPTCHA API key by following these steps:

1.  Go to the [Google Cloud Console](https://console.cloud.google.com/).
2.  Create a new project or select an existing one.
3.  Navigate to the [reCAPTCHA Enterprise page](https://console.cloud.google.com/security/recaptcha).
4.  Click on "Create" and follow the instructions to create a new reCAPTCHA API key.

### Step 4: Configure the reCAPTCHA API Key

Configure the reCAPTCHA API key in your Dart file:
```dart
RecaptchaEnterpriseFlutter.configure(
  apiKey: 'YOUR_API_KEY',
);
```
Replace `YOUR_API_KEY` with your actual reCAPTCHA API key.

### Step 5: Display the reCAPTCHA Widget

Display the reCAPTCHA widget in your Flutter application:
```dart
RecaptchaEnterpriseFlutter(
  onVerify: (token) {
    // Handle the verification token
  },
)
```
The `onVerify` callback is called when the user verifies their identity.

### Platform-Specific Details

#### Android

To use the `recaptcha_enterprise_flutter` package on Android, you need to add the following lines to your `AndroidManifest.xml` file:
```xml
<application>
  ...
  <meta-data
    android:name="com.google.android.gms.recaptcha.API_KEY"
    android:value="YOUR_API_KEY" />
</application>
```
Replace `YOUR_API_KEY` with your actual reCAPTCHA API key.

#### iOS

To use the `recaptcha_enterprise_flutter` package on iOS, you need to add the following lines to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```
This allows the reCAPTCHA widget to load content from the internet.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:recaptcha_enterprise_flutter/recaptcha_enterprise_flutter.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'reCAPTCHA Enterprise Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  String _verificationToken;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('reCAPTCHA Enterprise Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            RecaptchaEnterpriseFlutter(
              onVerify: (token) {
                setState(() {
                  _verificationToken = token;
                });
              },
            ),
            SizedBox(height: 20),
            Text(_verificationToken != null
                ? 'Verification token: $_verificationToken'
                : 'Please verify your identity'),
          ],
        ),
      ),
    );
  }
}
```

// This is the main entry point of the application.
// The MyApp widget is the root of the application.
// The MyHomePage widget is the home page of the application.
// The RecaptchaEnterpriseFlutter widget is used to display the reCAPTCHA widget.
// The onVerify callback is called when the user verifies their identity.
// The verification token is stored in the _verificationToken variable.
// The verification token is displayed on the screen.

// The application flow is as follows:
// 1. The user opens the application.
// 2. The reCAPTCHA widget is displayed on the screen.
// 3. The user verifies their identity using the reCAPTCHA widget.
// 4. The onVerify callback is called with the verification token.
// 5. The verification token is stored in the _verificationToken variable.
// 6. The verification token is displayed on the screen.

<-- END_MAIN -->
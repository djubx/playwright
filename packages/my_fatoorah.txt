<-- START_DESCRIPTION -->
# my_fatoorah Flutter Package
================================

The `my_fatoorah` Flutter package is a payment gateway that allows users to make online payments using various payment methods such as credit/debit cards, PayPal, and more. It provides a seamless and secure payment experience for users.

## When to Use
--------------

Use the `my_fatoorah` package when you need to integrate a payment gateway into your Flutter application. This package is ideal for e-commerce apps, online marketplaces, and any other app that requires online payments.

## Features
------------

*   Supports multiple payment methods (credit/debit cards, PayPal, etc.)
*   Secure payment processing
*   Easy integration with Flutter apps
*   Customizable payment UI
*   Supports multiple currencies

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->
# Setting Up the my_fatoorah Package
------------------------------------

To use the `my_fatoorah` package, follow these steps:

### Step 1: Add the Package to Your pubspec.yaml File

Add the following line to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  my_fatoorah: ^1.0.0
```

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:my_fatoorah/my_fatoorah.dart';
```

### Step 3: Initialize the Package

Initialize the package with your API key:

```dart
MyFatoorah _myFatoorah = MyFatoorah(
  apiKey: 'YOUR_API_KEY',
  countryCode: 'YOUR_COUNTRY_CODE',
  currency: 'YOUR_CURRENCY',
);
```

### Step 4: Create a Payment Request

Create a payment request with the required amount and payment method:

```dart
PaymentRequest _paymentRequest = PaymentRequest(
  amount: 10.0,
  paymentMethod: PaymentMethod.card,
);
```

### Step 5: Start the Payment Process

Start the payment process using the `_myFatoorah` instance:

```dart
_myFatoorah.startPayment(
  context: context,
  paymentRequest: _paymentRequest,
  onResult: (PaymentResult result) {
    // Handle the payment result
  },
);
```

### Platform-Specific Details

For Android, add the following lines to your `AndroidManifest.xml` file:

```xml
<uses-permission android:name="android.permission.INTERNET" />
<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
```

For iOS, add the following lines to your `Info.plist` file:

```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->
```dart
import 'package:flutter/material.dart';
import 'package:my_fatoorah/my_fatoorah.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  MyFatoorah _myFatoorah;
  PaymentRequest _paymentRequest;

  @override
  void initState() {
    super.initState();
    _myFatoorah = MyFatoorah(
      apiKey: 'YOUR_API_KEY',
      countryCode: 'YOUR_COUNTRY_CODE',
      currency: 'YOUR_CURRENCY',
    );
    _paymentRequest = PaymentRequest(
      amount: 10.0,
      paymentMethod: PaymentMethod.card,
    );
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('my_fatoorah Example'),
        ),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              _myFatoorah.startPayment(
                context: context,
                paymentRequest: _paymentRequest,
                onResult: (PaymentResult result) {
                  // Handle the payment result
                  if (result.isSuccess) {
                    print('Payment successful!');
                  } else {
                    print('Payment failed!');
                  }
                },
              );
            },
            child: Text('Start Payment'),
          ),
        ),
      ),
    );
  }
}
// The application flow is as follows:
// 1. The user clicks the "Start Payment" button.
// 2. The `_myFatoorah.startPayment` method is called with the payment request and context.
// 3. The user is redirected to the payment gateway to complete the payment.
// 4. After completing the payment, the user is redirected back to the app.
// 5. The `onResult` callback is called with the payment result.
// 6. The payment result is handled accordingly (e.g., displaying a success or failure message).
```
<-- END_MAIN -->
```markdown
<!-- START_DESCRIPTION -->
# Overview of the `bottom_navbar_with_indicator` Flutter Package

The `bottom_navbar_with_indicator` package is a powerful and customizable Flutter widget that provides a bottom navigation bar with an indicator to highlight the currently selected tab. This package is particularly useful for applications that require a clear and visually appealing way to navigate between different sections or features.

## When to Use This Package

You should consider using the `bottom_navbar_with_indicator` package in scenarios such as:

- **Multi-Section Applications**: When your app has multiple sections (e.g., Home, Search, Profile) that users need to switch between frequently.
- **Enhanced User Experience**: To provide a more engaging and intuitive navigation experience with visual indicators.
- **Customizable Navigation**: When you need a navigation bar that can be easily styled and customized to fit your app's design.

## Features

- **Customizable Indicator**: You can customize the appearance of the indicator to match your app's theme.
- **Responsive Design**: The navigation bar is designed to work well on various screen sizes and orientations.
- **Easy Integration**: Simple setup and integration into existing Flutter applications.
- **Smooth Animations**: Provides smooth transitions and animations when switching between tabs.

Overall, the `bottom_navbar_with_indicator` package enhances the navigation experience in Flutter applications, making it a valuable addition to your toolkit.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using `bottom_navbar_with_indicator`

In this tutorial, we will walk through the setup process for the `bottom_navbar_with_indicator` package and demonstrate how to use it in your Flutter application.

## Step 1: Adding the Dependency

To get started, you need to add the `bottom_navbar_with_indicator` package to your `pubspec.yaml` file. Open your `pubspec.yaml` and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  bottom_navbar_with_indicator: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command in your terminal to install it:

```bash
flutter pub get
```

## Step 2: Platform-Specific Configuration

### Android

For Android, ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
        ...
    }
}
```

### iOS

For iOS, you may need to update your `ios/Podfile` to ensure compatibility with the latest Flutter versions. Make sure to uncomment the platform line and set it to at least 10.0:

```ruby
platform :ios, '10.0'
```

## Step 3: Using the Package

Now that you have set up the package, you can start using it in your Flutter application. Below is a simple example of how to implement the `bottom_navbar_with_indicator` in your app.

1. Import the package in your Dart file:

```dart
import 'package:bottom_navbar_with_indicator/bottom_navbar_with_indicator.dart';
```

2. Create a stateful widget to manage the navigation:

```dart
class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  int _selectedIndex = 0; // Track the selected index

  // List of widgets to display for each tab
  final List<Widget> _widgetOptions = <Widget>[
    Text('Home Screen'),
    Text('Search Screen'),
    Text('Profile Screen'),
  ];

  // Function to handle tab selection
  void _onItemTapped(int index) {
    setState(() {
      _selectedIndex = index; // Update the selected index
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Bottom Navbar with Indicator'),
      ),
      body: Center(
        child: _widgetOptions.elementAt(_selectedIndex), // Display the selected widget
      ),
      bottomNavigationBar: BottomNavBarWithIndicator(
        currentIndex: _selectedIndex, // Set the current index
        onTap: _onItemTapped, // Handle tap events
        items: [
          BottomNavBarItem(icon: Icons.home, label: 'Home'),
          BottomNavBarItem(icon: Icons.search, label: 'Search'),
          BottomNavBarItem(icon: Icons.person, label: 'Profile'),
        ],
      ),
    );
  }
}
```

3. Run your application to see the bottom navigation bar in action!

This setup provides a basic implementation of the `bottom_navbar_with_indicator` package, allowing users to navigate between different screens in your app.

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of `bottom_navbar_with_indicator`

Below is a fully functional Flutter main file that demonstrates all key features of the `bottom_navbar_with_indicator` package.

```dart
import 'package:flutter/material.dart';
import 'package:bottom_navbar_with_indicator/bottom_navbar_with_indicator.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Bottom Navbar Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(), // Set the home to the RealFlutter widget
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  int _selectedIndex = 0; // Track the selected index

  // List of widgets to display for each tab
  final List<Widget> _widgetOptions = <Widget>[
    Center(child: Text('Home Screen', style: TextStyle(fontSize: 24))),
    Center(child: Text('Search Screen', style: TextStyle(fontSize: 24))),
    Center(child: Text('Profile Screen', style: TextStyle(fontSize: 24))),
  ];

  // Function to handle tab selection
  void _onItemTapped(int index) {
    setState(() {
      _selectedIndex = index; // Update the selected index
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Bottom Navbar with Indicator'),
      ),
      body: _widgetOptions.elementAt(_selectedIndex), // Display the selected widget
      bottomNavigationBar: BottomNavBarWithIndicator(
        currentIndex: _selectedIndex, // Set the current index
        onTap: _onItemTapped, // Handle tap events
        items: [
          BottomNavBarItem(icon: Icons.home, label: 'Home'), // Home tab
          BottomNavBarItem(icon: Icons.search, label: 'Search'), // Search tab
          BottomNavBarItem(icon: Icons.person, label: 'Profile'), // Profile tab
        ],
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the MyApp widget, which sets up the MaterialApp.
// 2. The home of the MaterialApp is set to the RealFlutter widget.
// 3. The RealFlutter widget is a stateful widget that manages the selected index for the bottom navigation bar.
// 4. The _widgetOptions list contains the widgets to display for each tab.
// 5. The _onItemTapped function updates the selected index when a tab is tapped.
// 6. The bottom navigation bar is created using BottomNavBarWithIndicator, which takes the current index and a list of items.
// 7. When a tab is tapped, the corresponding widget is displayed in the body of the Scaffold.
```
<!-- END_MAIN -->
``` 

This structured blog provides a comprehensive overview, setup instructions, and a complete example of using the `bottom_navbar_with_indicator` Flutter package, making it easy for developers to integrate it into their applications.
```markdown
<!-- START_DESCRIPTION -->
# iugu Flutter Package: A Comprehensive Overview

The **iugu** Flutter package is a powerful tool designed for integrating payment solutions into Flutter applications. It provides a seamless way to handle payments, subscriptions, and invoicing through the iugu API, which is particularly popular in Brazil. This package is ideal for developers looking to implement payment processing in their apps without having to build a complex backend.

## When to Use iugu
- **E-commerce Applications**: If you're building an online store and need to process payments securely.
- **Subscription Services**: For apps that offer subscription-based services, iugu can manage recurring payments.
- **Invoicing Solutions**: If your app requires generating and managing invoices, this package simplifies the process.

## Key Features
- **Payment Processing**: Easily handle one-time and recurring payments.
- **Subscription Management**: Create and manage subscriptions for users.
- **Invoice Generation**: Generate and send invoices directly from your app.
- **Webhooks Support**: Receive real-time updates on payment statuses.
- **User-Friendly API**: Simplifies the integration process with clear methods and documentation.

The iugu package is a robust solution for developers looking to implement payment functionalities in their Flutter applications efficiently.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# iugu Flutter Package: Setup and Usage Tutorial

## Installation
To get started with the iugu package, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  iugu: ^latest_version
```

Make sure to replace `latest_version` with the most recent version available on [pub.dev](https://pub.dev/packages/iugu).

## Platform-Specific Configuration

### Android
1. Open your `android/app/build.gradle` file.
2. Ensure that you have the following permissions in your `AndroidManifest.xml`:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
```

### iOS
1. Open your `ios/Runner/Info.plist` file.
2. Add the following key to allow network requests:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

## Basic Usage
To use the iugu package, you need to initialize it with your iugu API key. Hereâ€™s a simple example of how to set it up:

```dart
import 'package:flutter/material.dart';
import 'package:iugu/iugu.dart';

void main() {
  // Initialize the iugu package with your API key
  Iugu.setApiKey('YOUR_API_KEY');
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'iugu Example',
      home: PaymentScreen(),
    );
  }
}
```

In this example, replace `'YOUR_API_KEY'` with your actual iugu API key. This setup allows you to start using the iugu functionalities in your app.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# iugu Flutter Package: Complete Example

```dart
import 'package:flutter/material.dart';
import 'package:iugu/iugu.dart';

void main() {
  // Initialize the iugu package with your API key
  Iugu.setApiKey('YOUR_API_KEY');
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'iugu Payment Example',
      home: PaymentScreen(),
    );
  }
}

class PaymentScreen extends StatefulWidget {
  @override
  _PaymentScreenState createState() => _PaymentScreenState();
}

class _PaymentScreenState extends State<PaymentScreen> {
  // Variables to hold payment information
  String _paymentStatus = '';
  final _amountController = TextEditingController();

  // Function to handle payment
  void _processPayment() async {
    // Get the amount from the text field
    final amount = double.tryParse(_amountController.text);
    if (amount == null) {
      setState(() {
        _paymentStatus = 'Invalid amount';
      });
      return;
    }

    // Create a payment request
    final payment = Payment(
      amount: amount,
      currency: 'BRL',
      description: 'Payment for services',
    );

    // Process the payment
    try {
      final response = await Iugu.createPayment(payment);
      setState(() {
        _paymentStatus = 'Payment successful: ${response.id}';
      });
    } catch (e) {
      setState(() {
        _paymentStatus = 'Payment failed: $e';
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('iugu Payment Example'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            TextField(
              controller: _amountController,
              decoration: InputDecoration(labelText: 'Enter amount'),
              keyboardType: TextInputType.number,
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _processPayment,
              child: Text('Pay'),
            ),
            SizedBox(height: 20),
            Text(_paymentStatus),
          ],
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts by initializing the iugu package with the API key.
// 2. The main widget is `RealFlutter`, which sets up the MaterialApp.
// 3. The `PaymentScreen` widget is displayed, allowing users to enter an amount.
// 4. When the user clicks the "Pay" button, the `_processPayment` function is called.
// 5. The function retrieves the amount from the text field and creates a payment request.
// 6. It then calls the `Iugu.createPayment` method to process the payment.
// 7. The payment status is updated based on the success or failure of the payment.
```
<!-- END_MAIN -->
```

This structured blog post provides a comprehensive overview of the iugu Flutter package, guiding developers through its features, setup, and practical usage with a complete example.
```markdown
<!-- START_DESCRIPTION -->
# Execution Timer: A Flutter Package for Performance Measurement

The `execution_timer` package is a powerful tool for Flutter developers who want to measure the execution time of specific code blocks. This package is particularly useful for performance optimization, allowing developers to identify bottlenecks in their applications. By wrapping code in an execution timer, you can easily log how long a particular operation takes, which can be invaluable for debugging and improving app performance.

## When to Use This Package
- **Performance Profiling**: When you need to analyze the performance of specific functions or methods in your app.
- **Debugging**: To identify slow-running code that may be affecting the user experience.
- **Optimization**: When you want to ensure that your app runs efficiently, especially in resource-intensive operations.

## Key Features
- **Simple API**: Easy to use with a straightforward interface.
- **Customizable Logging**: Ability to log execution times to the console or a custom logger.
- **Multiple Timer Instances**: You can create multiple timers to measure different parts of your application simultaneously.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Setting Up and Using the Execution Timer Package

## Installation
To use the `execution_timer` package, you need to add it to your `pubspec.yaml` file. Open your `pubspec.yaml` and add the following line under dependencies:

```yaml
dependencies:
  execution_timer: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Platform-Specific Details
The `execution_timer` package is designed to work seamlessly on both Android and iOS platforms. There are no additional configurations required for either platform, making it easy to integrate into your Flutter project.

## Basic Usage
To use the `execution_timer`, you need to import the package in your Dart file:

```dart
import 'package:execution_timer/execution_timer.dart';
```

You can then create an instance of the `ExecutionTimer` class and use it to measure the execution time of your code blocks.

### Example Usage
```dart
void someFunction() {
  final timer = ExecutionTimer();
  timer.start(); // Start the timer

  // Your code block here
  for (int i = 0; i < 1000000; i++) {
    // Simulating some work
  }

  timer.stop(); // Stop the timer
  print('Execution time: ${timer.elapsedMilliseconds} ms'); // Log the execution time
}
```

This example demonstrates how to measure the execution time of a loop. You can replace the loop with any code block you want to measure.

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of Using Execution Timer

```dart
import 'package:flutter/material.dart';
import 'package:execution_timer/execution_timer.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Execution Timer Example',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Execution Timer Demo'),
        ),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              measureExecutionTime();
            },
            child: Text('Run Timer'),
          ),
        ),
      ),
    );
  }

  void measureExecutionTime() {
    // Create an instance of ExecutionTimer
    final timer = ExecutionTimer();
    
    // Start the timer
    timer.start();

    // Simulating a time-consuming task
    for (int i = 0; i < 1000000; i++) {
      // Simulating some work
    }

    // Stop the timer
    timer.stop();

    // Log the execution time
    print('Execution time: ${timer.elapsedMilliseconds} ms');
  }
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the RealFlutter widget.
// 2. The RealFlutter widget builds a MaterialApp with a simple UI.
// 3. The UI contains a button labeled 'Run Timer'.
// 4. When the button is pressed, the measureExecutionTime function is called.
// 5. Inside measureExecutionTime, an ExecutionTimer instance is created and started.
// 6. A for loop simulates a time-consuming task.
// 7. After the loop, the timer is stopped, and the elapsed time is printed to the console.
```
<!-- END_MAIN -->
``` 

In this blog post, we have covered the `execution_timer` package, detailing its features, installation, and usage. The complete example provided demonstrates how to integrate the package into a Flutter application, allowing developers to measure execution time effectively. This can be a crucial step in optimizing app performance and ensuring a smooth user experience.
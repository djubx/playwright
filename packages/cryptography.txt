<-- START_DESCRIPTION -->

# Cryptography Flutter Package
================================

The cryptography Flutter package provides a set of cryptographic algorithms and tools to help you secure your Flutter app. This package supports various encryption and decryption techniques, including AES, RSA, and SHA.

## When to Use This Package
---------------------------

You should use this package when you need to:

* Encrypt and decrypt data in your Flutter app
* Generate digital signatures
* Verify the integrity of data

## Features
------------

* AES encryption and decryption
* RSA encryption and decryption
* SHA hashing
* Digital signature generation and verification

<-- END_DESCRIPTION -->


<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the cryptography package in your Flutter app, follow these steps:

### Step 1: Add the Package to Your pubspec.yaml File

```yml
dependencies:
  cryptography: ^2.0.0
```

### Step 2: Import the Package in Your Dart File

```dart
import 'package:cryptography/cryptography.dart';
```

### Platform-Specific Details

* Android: No additional configuration is required.
* iOS: You need to add the following lines to your Info.plist file:

```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```

### Required Configurations and Optimizations

* Make sure to handle errors and exceptions properly.
* Use secure random number generators to generate keys and nonces.

<-- END_TUTORIAL -->


<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:cryptography/cryptography.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Generate a random key for AES encryption
  final _key = AesGcm.generateKey();

  // Generate a random nonce for AES encryption
  final _nonce = AesGcm.generateNonce();

  // Text controller for the input field
  final _controller = TextEditingController();

  // Encrypted text
  String _encryptedText = '';

  // Decrypted text
  String _decryptedText = '';

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Cryptography Example'),
        ),
        body: Padding(
          padding: const EdgeInsets.all(20.0),
          child: Column(
            children: [
              TextField(
                controller: _controller,
                decoration: InputDecoration(
                  labelText: 'Enter text to encrypt',
                ),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () async {
                  // Encrypt the text using AES
                  final encrypted = await AesGcm.encrypt(
                    _controller.text,
                    key: _key,
                    nonce: _nonce,
                  );

                  // Update the encrypted text
                  setState(() {
                    _encryptedText = encrypted.toString();
                  });
                },
                child: Text('Encrypt'),
              ),
              SizedBox(height: 20),
              Text('Encrypted text: $_encryptedText'),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () async {
                  // Decrypt the text using AES
                  final decrypted = await AesGcm.decrypt(
                    _encryptedText,
                    key: _key,
                    nonce: _nonce,
                  );

                  // Update the decrypted text
                  setState(() {
                    _decryptedText = decrypted.toString();
                  });
                },
                child: Text('Decrypt'),
              ),
              SizedBox(height: 20),
              Text('Decrypted text: $_decryptedText'),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user enters text to encrypt in the input field.
// 2. The user clicks the "Encrypt" button, which generates a random key and nonce for AES encryption.
// 3. The text is encrypted using AES and the encrypted text is displayed on the screen.
// 4. The user clicks the "Decrypt" button, which decrypts the encrypted text using AES and the same key and nonce.
// 5. The decrypted text is displayed on the screen.

// This example demonstrates the basic usage of the cryptography package for AES encryption and decryption.

// Note: In a real-world application, you should handle errors and exceptions properly, and use secure random number generators to generate keys and nonces.

```

<-- END_MAIN -->
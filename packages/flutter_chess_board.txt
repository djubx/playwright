<-- START_DESCRIPTION -->

# Flutter Chess Board Package
The `flutter_chess_board` package is a Flutter library that provides a customizable chess board widget. It allows developers to easily integrate a chess board into their Flutter applications.

## Features
- Customizable board size and colors
- Support for various chess pieces and their movements
- Ability to make moves and undo them
- Option to display move history

## When to Use
This package is ideal for developing chess-related applications, such as chess games, puzzles, or analysis tools. It can also be used to create interactive chess boards for educational purposes.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
To use the `flutter_chess_board` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_chess_board: ^1.0.0
```
2. Run `flutter pub get` to install the package.

## Platform-Specific Configurations
No platform-specific configurations are required for this package. However, you may need to adjust the board size and colors to suit your application's design.

## Optimizations
To improve performance, consider using a smaller board size or reducing the number of pieces on the board.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_chess_board/flutter_chess_board.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Create a new chess board controller
  ChessBoardController _controller = ChessBoardController();

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Flutter Chess Board Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              // Display the chess board
              ChessBoard(
                controller: _controller,
                boardSize: 400,
                // Customize the board colors
                lightSquareColor: Colors.white,
                darkSquareColor: Colors.grey,
              ),
              // Display the move history
              Text('Move History:'),
              Text(_controller.moveHistory.join(', ')),
              // Make a move button
              ElevatedButton(
                onPressed: () {
                  // Make a move
                  _controller.makeMove('e2', 'e4');
                  setState(() {});
                },
                child: Text('Make Move'),
              ),
              // Undo move button
              ElevatedButton(
                onPressed: () {
                  // Undo the last move
                  _controller.undoMove();
                  setState(() {});
                },
                child: Text('Undo Move'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow:
// 1. The user opens the app and sees the chess board.
// 2. The user makes a move by pressing the "Make Move" button.
// 3. The move is displayed on the board and added to the move history.
// 4. The user can undo the last move by pressing the "Undo Move" button.
// 5. The move history is updated accordingly.
```

// Final summary: The code creates a basic chess board application with move history and undo functionality. The user can make moves and undo them, and the move history is displayed on the screen.

<-- END_MAIN -->
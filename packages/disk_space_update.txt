<-- START_DESCRIPTION -->

# Disk Space Update Flutter Package
=====================================

The `disk_space_update` Flutter package provides a simple and efficient way to monitor and update the available disk space on Android and iOS devices. This package is useful when you need to perform disk-intensive operations, such as downloading large files or storing data locally.

### Features

*   Get the current available disk space
*   Get the total disk space
*   Monitor changes in available disk space
*   Supports both Android and iOS platforms

### When to Use

*   When downloading large files and need to ensure sufficient disk space
*   When storing data locally and need to monitor available disk space
*   When performing disk-intensive operations and need to optimize performance

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Using the Disk Space Update Flutter Package
=====================================================

### Step 1: Add the Package to Your Flutter Project

Add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  disk_space_update: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:disk_space_update/disk_space_update.dart';
```

### Step 3: Get the Current Available Disk Space

Use the `getAvailableDiskSpace` method to get the current available disk space:

```dart
Future<int> availableDiskSpace = DiskSpaceUpdate.getAvailableDiskSpace();
```

### Step 4: Get the Total Disk Space

Use the `getTotalDiskSpace` method to get the total disk space:

```dart
Future<int> totalDiskSpace = DiskSpaceUpdate.getTotalDiskSpace();
```

### Step 5: Monitor Changes in Available Disk Space

Use the `startMonitoring` method to start monitoring changes in available disk space:

```dart
DiskSpaceUpdate.startMonitoring((availableSpace) {
  print('Available disk space: $availableSpace');
});
```

### Platform-Specific Details

*   **Android:** The package uses the `android.os.StatFs` class to get the available and total disk space.
*   **iOS:** The package uses the `NSFileManager` class to get the available and total disk space.

### Required Configurations or Optimizations

*   **Android:** Add the `android.permission.READ_EXTERNAL_STORAGE` permission to your `AndroidManifest.xml` file to access external storage.
*   **iOS:** Add the `NSFileProtectionKey` key to your `Info.plist` file to access protected files.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:disk_space_update/disk_space_update.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  int _availableDiskSpace = 0;
  int _totalDiskSpace = 0;

  @override
  void initState() {
    super.initState();
    _getAvailableDiskSpace();
    _getTotalDiskSpace();
    _startMonitoring();
  }

  Future<void> _getAvailableDiskSpace() async {
    // Get the current available disk space
    int availableDiskSpace = await DiskSpaceUpdate.getAvailableDiskSpace();
    setState(() {
      _availableDiskSpace = availableDiskSpace;
    });
  }

  Future<void> _getTotalDiskSpace() async {
    // Get the total disk space
    int totalDiskSpace = await DiskSpaceUpdate.getTotalDiskSpace();
    setState(() {
      _totalDiskSpace = totalDiskSpace;
    });
  }

  void _startMonitoring() {
    // Start monitoring changes in available disk space
    DiskSpaceUpdate.startMonitoring((availableSpace) {
      setState(() {
        _availableDiskSpace = availableSpace;
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Disk Space Update Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Text('Available Disk Space: $_availableDiskSpace'),
              Text('Total Disk Space: $_totalDiskSpace'),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The RealFlutter widget is created and starts the app.
// 2. The _RealFlutterState class is initialized and gets the current available disk space and total disk space.
// 3. The _startMonitoring method is called to start monitoring changes in available disk space.
// 4. When the available disk space changes, the _availableDiskSpace variable is updated and the UI is rebuilt to display the new value.
// 5. The app continues to run and monitor changes in available disk space until it is closed.

// The code flow is well-structured and easy to follow, with clear comments explaining each part of the code.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Color Blindness Flutter Package
=====================================

The `color_blindness` Flutter package is designed to help developers create colorblind-friendly apps. It provides tools to simulate color blindness and to select colors that are accessible to users with color vision deficiency.

## When to Use This Package
---------------------------

This package is useful when you want to:

*   Test your app's color scheme for color blindness accessibility
*   Select colors that are accessible to users with color vision deficiency
*   Simulate color blindness in your app for testing or demonstration purposes

## Features
------------

The `color_blindness` package provides the following features:

*   Color blindness simulation: Simulate color blindness by applying filters to your app's colors
*   Color selection: Select colors that are accessible to users with color vision deficiency
*   Color contrast analysis: Analyze the contrast between two colors to ensure they are accessible

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

## Setup
--------

To use the `color_blindness` package, add it to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  color_blindness: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Usage
-----

To use the `color_blindness` package, import it in your Dart file:

```dart
import 'package:color_blindness/color_blindness.dart';
```

### Color Blindness Simulation

To simulate color blindness, use the `ColorBlindness` class:

```dart
ColorBlindness colorBlindness = ColorBlindness();
Color filteredColor = colorBlindness.simulate(Color(0xFF0000FF)); // Simulate red color
```

### Color Selection

To select colors that are accessible to users with color vision deficiency, use the `ColorSelector` class:

```dart
ColorSelector colorSelector = ColorSelector();
Color selectedColor = colorSelector.selectColor(Color(0xFF0000FF)); // Select a color that is accessible to users with red-green color blindness
```

### Color Contrast Analysis

To analyze the contrast between two colors, use the `ColorContrastAnalyzer` class:

```dart
ColorContrastAnalyzer colorContrastAnalyzer = ColorContrastAnalyzer();
double contrastRatio = colorContrastAnalyzer.analyzeContrast(Color(0xFF0000FF), Color(0xFFFFFFFF)); // Analyze the contrast between red and white colors
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:color_blindness/color_blindness.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  Color _originalColor = Color(0xFF0000FF); // Original color
  Color _filteredColor = Color(0xFF0000FF); // Filtered color
  Color _selectedColor = Color(0xFF0000FF); // Selected color
  double _contrastRatio = 0.0; // Contrast ratio

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Color Blindness Demo'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Text('Original Color:'),
              Container(
                width: 50,
                height: 50,
                color: _originalColor,
              ),
              SizedBox(height: 20),
              Text('Filtered Color:'),
              Container(
                width: 50,
                height: 50,
                color: _filteredColor,
              ),
              SizedBox(height: 20),
              Text('Selected Color:'),
              Container(
                width: 50,
                height: 50,
                color: _selectedColor,
              ),
              SizedBox(height: 20),
              Text('Contrast Ratio: $_contrastRatio'),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  // Simulate color blindness
                  ColorBlindness colorBlindness = ColorBlindness();
                  _filteredColor = colorBlindness.simulate(_originalColor);
                  setState(() {});
                },
                child: Text('Simulate Color Blindness'),
              ),
              SizedBox(height: 10),
              ElevatedButton(
                onPressed: () {
                  // Select a color that is accessible to users with color vision deficiency
                  ColorSelector colorSelector = ColorSelector();
                  _selectedColor = colorSelector.selectColor(_originalColor);
                  setState(() {});
                },
                child: Text('Select Accessible Color'),
              ),
              SizedBox(height: 10),
              ElevatedButton(
                onPressed: () {
                  // Analyze the contrast between two colors
                  ColorContrastAnalyzer colorContrastAnalyzer = ColorContrastAnalyzer();
                  _contrastRatio = colorContrastAnalyzer.analyzeContrast(_originalColor, _selectedColor);
                  setState(() {});
                },
                child: Text('Analyze Contrast'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user is presented with an original color and three buttons: Simulate Color Blindness, Select Accessible Color, and Analyze Contrast.
// 2. When the user clicks the Simulate Color Blindness button, the original color is filtered to simulate color blindness.
// 3. When the user clicks the Select Accessible Color button, a color that is accessible to users with color vision deficiency is selected.
// 4. When the user clicks the Analyze Contrast button, the contrast between the original color and the selected color is analyzed.
// 5. The results of the simulation, selection, and analysis are displayed on the screen.

<-- END_MAIN -->
<-- START_DESCRIPTION -->

Veriff Flutter Package: A Comprehensive Overview
=====================================================

The Veriff Flutter package is a powerful tool for integrating identity verification into your Flutter applications. It provides a seamless and secure way to verify users' identities, making it an essential component for various industries such as finance, healthcare, and e-commerce.

When to Use Veriff Flutter Package
------------------------------------

1.  **Identity Verification**: Use the Veriff Flutter package when you need to verify users' identities, such as during the onboarding process or when authenticating sensitive transactions.
2.  **Compliance with Regulations**: The package helps you comply with regulatory requirements such as Know Your Customer (KYC) and Anti-Money Laundering (AML) regulations.
3.  **Enhanced Security**: Veriff Flutter package provides an additional layer of security, protecting your users' sensitive information and preventing identity theft.

Features of Veriff Flutter Package
--------------------------------------

1.  **Seamless Integration**: Easy integration with your existing Flutter application, allowing for a smooth user experience.
2.  **Customizable**: Customize the verification process to fit your specific needs and branding.
3.  **Real-time Verification**: Verify users' identities in real-time, reducing the risk of identity theft and fraud.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Veriff Flutter Package Tutorial: Setup and Usage
=====================================================

### Step 1: Add the Veriff Flutter Package to Your Project

Add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  veriff_flutter: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Veriff Flutter Package

Import the Veriff Flutter package in your Dart file:

```dart
import 'package:veriff_flutter/veriff_flutter.dart';
```

### Step 3: Initialize the Veriff Flutter Package

Initialize the Veriff Flutter package with your API key:

```dart
VeriffFlutter.initialize('YOUR_API_KEY');
```

### Step 4: Start the Verification Process

Start the verification process by calling the `startVerification` method:

```dart
VeriffFlutter.startVerification(
  context: context,
  onFinished: (result) {
    // Handle the verification result
  },
);
```

### Platform-Specific Details

#### Android

Add the following configuration to your `AndroidManifest.xml` file:

```xml
<application
  ...
  android:hardwareAccelerated="true"
  ...
>
```

#### iOS

Add the following configuration to your `Info.plist` file:

```xml
<key>NSCameraUsageDescription</key>
<string>Can I use the camera please?</string>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:veriff_flutter/veriff_flutter.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Veriff Flutter Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Veriff Flutter Demo'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Initialize the Veriff Flutter package
            VeriffFlutter.initialize('YOUR_API_KEY');

            // Start the verification process
            VeriffFlutter.startVerification(
              context: context,
              onFinished: (result) {
                // Handle the verification result
                print('Verification result: $result');
              },
            );
          },
          child: Text('Start Verification'),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user clicks the "Start Verification" button.
// 2. The Veriff Flutter package is initialized with the API key.
// 3. The verification process is started, and the user is prompted to provide their identity documents.
// 4. The user provides their identity documents, and the verification process is completed.
// 5. The verification result is returned, and the application handles the result accordingly.

// In this example, the verification result is simply printed to the console.
// In a real-world application, the verification result would be handled in a more meaningful way,
// such as by updating the user's account status or triggering additional authentication steps.
```

<-- END_MAIN -->
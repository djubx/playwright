<-- START_DESCRIPTION -->

# Flutter Thrio Package Overview
=====================================

The `flutter_thrio` package is a powerful plugin for Flutter that enables seamless communication between native modules and Flutter. It allows developers to easily integrate native views, modules, and functions into their Flutter applications.

## When to Use
--------------

Use `flutter_thrio` when you need to:

* Integrate native views or modules into your Flutter app
* Call native functions from Flutter
* Pass data between native and Flutter modules

## Features
------------

* Supports both Android and iOS platforms
* Easy-to-use API for integrating native views and modules
* Allows passing data between native and Flutter modules
* Supports asynchronous communication between native and Flutter modules

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up Flutter Thrio
==========================

## Step 1: Add the Package to Your Pubspec
-----------------------------------------

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_thrio: ^1.0.0
```
Then, run `flutter pub get` to install the package.

## Step 2: Import the Package
-----------------------------

Import the package in your Dart file:
```dart
import 'package:flutter_thrio/flutter_thrio.dart';
```
## Step 3: Initialize the Package
---------------------------------

Initialize the package in your `main` function:
```dart
void main() {
  runApp(MyApp());
  Thrio.initialize();
}
```
## Platform-Specific Configurations
-----------------------------------

### Android

Add the following code to your `AndroidManifest.xml` file:
```xml
<application>
  ...
  <meta-data
    android:name="flutter.embedded_views"
    android:resource="@array/flutter_embedded_views"/>
</application>
```
Create a new file `res/values arrays.xml` with the following content:
```xml
<?xml version="1.0" encoding="utf-8"?>
<resources>
  <array name="flutter_embedded_views">
    <item>your_package_name/YourNativeView</item>
  </array>
</resources>
```
Replace `your_package_name` and `YourNativeView` with your actual package name and native view class.

### iOS

Add the following code to your `Info.plist` file:
```xml
<key>FlutterEmbeddedViews</key>
<array>
  <string>your_package_name/YourNativeView</string>
</array>
```
Replace `your_package_name` and `YourNativeView` with your actual package name and native view class.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_thrio/flutter_thrio.dart';

void main() {
  runApp(MyApp());
  Thrio.initialize();
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Thrio Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  // Create a Thrio instance
  Thrio _thrio = Thrio();

  // Define a native view
  NativeView _nativeView;

  @override
  void initState() {
    super.initState();
    // Initialize the native view
    _nativeView = NativeView(
      // Pass a callback to the native view
      callback: (data) {
        print('Received data from native view: $data');
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Thrio Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            // Display the native view
            _nativeView,
            // Call a native function
            ElevatedButton(
              onPressed: () {
                _thrio.callNativeFunction('your_native_function');
              },
              child: Text('Call Native Function'),
            ),
            // Pass data to the native view
            ElevatedButton(
              onPressed: () {
                _nativeView.passData('Hello from Flutter!');
              },
              child: Text('Pass Data to Native View'),
            ),
          ],
        ),
      ),
    );
  }
}

// Define a native view class
class NativeView extends StatelessWidget {
  final Function callback;

  NativeView({this.callback});

  @override
  Widget build(BuildContext context) {
    // Create a native view
    return PlatformView(
      // Pass a callback to the native view
      callback: callback,
    );
  }
}

// Define a platform view class
class PlatformView extends StatelessWidget {
  final Function callback;

  PlatformView({this.callback});

  @override
  Widget build(BuildContext context) {
    // Create a platform view
    return ThrioPlatformView(
      // Pass a callback to the platform view
      callback: callback,
    );
  }
}

// Define a Thrio platform view class
class ThrioPlatformView extends StatelessWidget {
  final Function callback;

  ThrioPlatformView({this.callback});

  @override
  Widget build(BuildContext context) {
    // Create a Thrio platform view
    return ThrioView(
      // Pass a callback to the Thrio platform view
      callback: callback,
    );
  }
}

// Application flow:
// 1. The user opens the app and the `MyHomePage` widget is displayed.
// 2. The `MyHomePage` widget creates a `Thrio` instance and initializes it.
// 3. The `MyHomePage` widget defines a native view and passes a callback to it.
// 4. The user interacts with the native view and the callback is called.
// 5. The callback prints a message to the console indicating that data was received from the native view.
// 6. The user clicks the "Call Native Function" button and the `Thrio` instance calls a native function.
// 7. The user clicks the "Pass Data to Native View" button and the `Thrio` instance passes data to the native view.
```

// Final summary:
// The code creates a Flutter app that demonstrates the use of the `flutter_thrio` package.
// The app creates a `Thrio` instance and initializes it.
// The app defines a native view and passes a callback to it.
// The app calls a native function and passes data to the native view.
// The app displays the native view and prints messages to the console indicating that data was received from the native view.

<-- END_MAIN -->
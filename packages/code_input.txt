<-- START_DESCRIPTION -->

# Code Input Flutter Package
================================

The `code_input` Flutter package provides a customizable, feature-rich code input field for Flutter applications. It allows users to input codes, such as verification codes, promo codes, or any other type of code, in a visually appealing and user-friendly way.

## Features

* Customizable code length and character set
* Support for numeric, alphanumeric, and custom character sets
* Built-in validation and error handling
* Customizable UI, including colors, fonts, and spacing
* Support for Android and iOS platforms

## When to Use

The `code_input` package is perfect for any Flutter application that requires users to input codes, such as:

* Verification codes for phone number or email verification
* Promo codes for discounts or special offers
* Security codes for authentication or authorization

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Code Input Package
=====================================

To use the `code_input` package in your Flutter application, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  code_input: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:code_input/code_input.dart';
```
### Step 3: Create a Code Input Field

Create a `CodeInput` widget and customize it as needed:
```dart
CodeInput(
  length: 6,
  characterSet: CharacterSet.numeric,
  validator: (code) {
    // Custom validation logic here
  },
  onSubmitted: (code) {
    // Handle code submission here
  },
)
```
### Platform-Specific Details

* Android: No additional configuration required.
* iOS: Add the following line to your `Info.plist` file:
```xml
<key>UIKeyboardType</key>
<string>NumberPad</string>
```
This will ensure that the numeric keyboard is displayed when the code input field is focused.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:code_input/code_input.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Code Input Example',
      home: CodeInputExample(),
    );
  }
}

class CodeInputExample extends StatefulWidget {
  @override
  _CodeInputExampleState createState() => _CodeInputExampleState();
}

class _CodeInputExampleState extends State<CodeInputExample> {
  final _formKey = GlobalKey<FormState>();
  String _code = '';

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Code Input Example'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              CodeInput(
                length: 6,
                characterSet: CharacterSet.numeric,
                validator: (code) {
                  if (code.length != 6) {
                    return 'Invalid code length';
                  }
                  return null;
                },
                onSubmitted: (code) {
                  setState(() {
                    _code = code;
                  });
                },
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  if (_formKey.currentState.validate()) {
                    // Handle code submission here
                    print('Code submitted: $_code');
                  }
                },
                child: Text('Submit'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user opens the app and is presented with a code input field.
// 2. The user enters a code and submits it.
// 3. The code is validated using the custom validation logic.
// 4. If the code is valid, it is submitted and handled by the app.
// 5. If the code is invalid, an error message is displayed.
```

// Summary:
// The code input package provides a customizable code input field for Flutter applications.
// It allows users to input codes, such as verification codes or promo codes, in a visually appealing and user-friendly way.
// The package includes features such as custom validation and error handling, and supports Android and iOS platforms.
// The example code demonstrates how to use the package to create a code input field and handle code submission.

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Resource Portable Flutter Package
=====================================

The `resource_portable` Flutter package is a utility library that allows developers to easily manage and access resources such as images, fonts, and other assets across different platforms. This package provides a simple and efficient way to handle resources, making it an essential tool for any Flutter developer.

### When to Use

The `resource_portable` package is particularly useful when:

* You need to access resources from a single location, regardless of the platform.
* You want to manage resources in a centralized manner, making it easier to update or modify them.
* You need to handle resources in a way that is compatible with both Android and iOS platforms.

### Features

The `resource_portable` package offers the following features:

* Easy access to resources using a simple and intuitive API.
* Support for various resource types, including images, fonts, and other assets.
* Platform-specific handling of resources, ensuring compatibility with both Android and iOS.
* Centralized management of resources, making it easier to update or modify them.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the Package
=====================================

To use the `resource_portable` package, follow these steps:

### Step 1: Add the Package to Your Project

Add the `resource_portable` package to your project by adding the following line to your `pubspec.yaml` file:
```yml
dependencies:
  resource_portable: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the `resource_portable` package in your Dart file:
```dart
import 'package:resource_portable/resource_portable.dart';
```
### Step 3: Initialize the Package

Initialize the `resource_portable` package by calling the `init` method:
```dart
void main() {
  ResourcePortable.init();
  runApp(MyApp());
}
```
### Step 4: Access Resources

Access resources using the `getResource` method:
```dart
Image image = ResourcePortable.getResource('image.png');
```
### Platform-Specific Details

* Android: The `resource_portable` package uses the `android.content.res` package to access resources.
* iOS: The `resource_portable` package uses the `NSBundle` class to access resources.

### Configurations and Optimizations

* You can configure the package to use a custom resource directory by calling the `setResourceDirectory` method.
* You can optimize resource loading by calling the `preloadResources` method.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:resource_portable/resource_portable.dart';

void main() {
  // Initialize the ResourcePortable package
  ResourcePortable.init();

  // Run the app
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Access an image resource
    Image image = ResourcePortable.getResource('image.png');

    // Create a widget tree
    return MaterialApp(
      title: 'Resource Portable Demo',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Resource Portable Demo'),
        ),
        body: Center(
          child: image,
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The main function initializes the ResourcePortable package.
// 2. The main function runs the RealFlutter app.
// 3. The RealFlutter app accesses an image resource using the ResourcePortable package.
// 4. The RealFlutter app creates a widget tree and displays the image.
// 5. The app is rendered on the screen.

// In summary, the code flows as follows:
// main -> ResourcePortable.init -> runApp -> RealFlutter -> build -> ResourcePortable.getResource -> create widget tree -> render app
```

<-- END_MAIN -->
```markdown
<!-- START_DESCRIPTION -->
# Chinese Number Flutter Package

The `chinese_number` Flutter package is designed to convert Arabic numerals (0-9) into their corresponding Chinese numeral representations. This package is particularly useful for applications that require localization or cultural adaptations, such as finance apps, educational tools, or any app that needs to display numbers in a Chinese format.

## When to Use This Package
- **Localization**: If your app targets Chinese-speaking users, converting numbers to Chinese numerals can enhance user experience.
- **Cultural Relevance**: In contexts where numbers are traditionally represented in Chinese, this package can help maintain cultural relevance.
- **Educational Apps**: For apps teaching Chinese language or numerals, this package can provide practical examples.

## Features
- **Simple Conversion**: Easily convert integers to Chinese numerals.
- **Support for Large Numbers**: Handles large integers, making it suitable for financial applications.
- **Customizable Output**: Options to format the output based on user preferences.

Overall, the `chinese_number` package is a lightweight and efficient solution for developers looking to integrate Chinese numeral support into their Flutter applications.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Chinese Number Package

## Installation
To use the `chinese_number` package, you need to add it to your `pubspec.yaml` file. Open your `pubspec.yaml` and add the following line under dependencies:

```yaml
dependencies:
  chinese_number: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command in your terminal to install the package:

```bash
flutter pub get
```

## Usage
### Importing the Package
In your Dart file, import the package:

```dart
import 'package:chinese_number/chinese_number.dart';
```

### Basic Usage
You can convert numbers to Chinese numerals using the `ChineseNumber` class. Here’s a simple example:

```dart
void main() {
  int number = 12345;
  String chineseNumeral = ChineseNumber.convert(number);
  print(chineseNumeral); // Outputs: 一万二千三百四十五
}
```

### Platform-Specific Details
The `chinese_number` package is designed to work seamlessly on both Android and iOS platforms. There are no additional configurations required for either platform. Just ensure that your Flutter environment is set up correctly.

### Optimizations
For optimal performance, especially when dealing with large numbers or frequent conversions, consider caching results if the same numbers are converted multiple times.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using the Chinese Number Package

```dart
import 'package:flutter/material.dart';
import 'package:chinese_number/chinese_number.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Chinese Number Example',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Chinese Number Converter'),
        ),
        body: Center(
          child: NumberConverterWidget(),
        ),
      ),
    );
  }
}

class NumberConverterWidget extends StatefulWidget {
  @override
  _NumberConverterWidgetState createState() => _NumberConverterWidgetState();
}

class _NumberConverterWidgetState extends State<NumberConverterWidget> {
  final TextEditingController _controller = TextEditingController();
  String _convertedNumber = '';

  void _convertNumber() {
    // Get the number from the text field
    int number = int.tryParse(_controller.text) ?? 0;
    // Convert the number to Chinese numeral
    _convertedNumber = ChineseNumber.convert(number);
    // Update the UI
    setState(() {});
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        TextField(
          controller: _controller,
          decoration: InputDecoration(
            labelText: 'Enter a number',
          ),
          keyboardType: TextInputType.number,
        ),
        SizedBox(height: 20),
        ElevatedButton(
          onPressed: _convertNumber,
          child: Text('Convert to Chinese Numeral'),
        ),
        SizedBox(height: 20),
        Text(
          'Chinese Numeral: $_convertedNumber',
          style: TextStyle(fontSize: 24),
        ),
      ],
    );
  }
}
```

// The above code defines a simple Flutter application that converts Arabic numerals to Chinese numerals.
// 
// 1. The `main` function initializes the app and sets `RealFlutter` as the home widget.
// 2. `RealFlutter` is a stateless widget that builds the main structure of the app, including an AppBar and a centered widget.
// 3. `NumberConverterWidget` is a stateful widget that contains a TextField for user input, a button to trigger the conversion, and a Text widget to display the result.
// 4. The `_convertNumber` method retrieves the input from the TextField, converts it using the `ChineseNumber.convert` method, and updates the state to reflect the converted number.
// 5. The UI updates to show the converted Chinese numeral when the button is pressed, providing a simple and interactive user experience.

```
<!-- END_MAIN -->
```markdown
<-- START_DESCRIPTION -->

# Understanding the `devicelocale` Flutter Package

The `devicelocale` Flutter package is a powerful tool designed to help developers easily access the current locale of a device. This package is particularly useful in applications that need to adapt their content based on the user's language and regional settings. By leveraging `devicelocale`, developers can enhance user experience by providing localized content, formatting dates and numbers according to regional preferences, and more.

## When to Use `devicelocale`

- **Localization**: When your app needs to support multiple languages and you want to automatically adjust the language based on the user's device settings.
- **Regional Formatting**: To format dates, times, and numbers according to the user's locale.
- **User Preferences**: To customize content or features based on the user's regional settings.

## Features

- **Get Current Locale**: Retrieve the current locale of the device.
- **List Supported Locales**: Access a list of all locales supported by the device.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS platforms.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the `devicelocale` Package

In this tutorial, we will walk through the process of setting up the `devicelocale` package in a Flutter project and demonstrate how to use its features effectively.

## Setup Process

1. **Add Dependency**: First, add the `devicelocale` package to your `pubspec.yaml` file.

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     devicelocale: ^0.4.0
   ```

2. **Install Packages**: Run `flutter pub get` to install the new package.

3. **Import the Package**: In your Dart file, import the package to access its functionalities.

   ```dart
   import 'package:devicelocale/devicelocale.dart';
   ```

## Platform-Specific Details

### Android

- Ensure that your `AndroidManifest.xml` file has the necessary permissions to access locale information. Typically, no additional permissions are required for this package.

### iOS

- For iOS, ensure that your project is configured to support the locales you intend to use. This can be done in the Xcode project settings under "Info" by adding the required languages.

## Using the Package

To use the `devicelocale` package, you can call its methods to get the current locale or list all supported locales. Here's a simple example:

```dart
Future<void> getCurrentLocale() async {
  String? locale = await Devicelocale.currentLocale;
  print("Current Locale: $locale");
}

Future<void> getSupportedLocales() async {
  List<String>? locales = await Devicelocale.preferredLanguages;
  print("Supported Locales: $locales");
}
```

<-- END_TUTORIAL -->

<-- MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:devicelocale/devicelocale.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Device Locale Example',
      home: LocaleExample(),
    );
  }
}

class LocaleExample extends StatefulWidget {
  @override
  _LocaleExampleState createState() => _LocaleExampleState();
}

class _LocaleExampleState extends State<LocaleExample> {
  String _currentLocale = 'Unknown';
  List<String> _supportedLocales = [];

  @override
  void initState() {
    super.initState();
    _fetchLocaleData();
  }

  Future<void> _fetchLocaleData() async {
    // Fetch the current locale of the device
    String? currentLocale = await Devicelocale.currentLocale;
    // Fetch the list of supported locales
    List<String>? supportedLocales = await Devicelocale.preferredLanguages;

    // Update the state with the fetched locale data
    setState(() {
      _currentLocale = currentLocale ?? 'Unknown';
      _supportedLocales = supportedLocales ?? [];
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Device Locale Example'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: <Widget>[
            Text('Current Locale: $_currentLocale'),
            SizedBox(height: 20),
            Text('Supported Locales:'),
            for (var locale in _supportedLocales) Text(locale),
          ],
        ),
      ),
    );
  }
}

// The application starts by running the RealFlutter widget, which is a StatelessWidget.
// It sets up a MaterialApp with a home screen of LocaleExample.
// LocaleExample is a StatefulWidget that fetches and displays the device's current locale and supported locales.
// In the initState method, _fetchLocaleData is called to asynchronously fetch the locale data.
// The _fetchLocaleData method uses the devicelocale package to get the current locale and supported locales.
// Once the data is fetched, the state is updated to display the information on the screen.
// The build method constructs the UI, displaying the current locale and a list of supported locales.

<-- END_MAIN -->
```
```markdown
<!-- START_DESCRIPTION -->
# Animated Theme Switcher Flutter Package

The `animated_theme_switcher` package is a powerful tool for Flutter developers looking to implement dynamic theme switching in their applications. This package allows for smooth transitions between different themes, enhancing the user experience by providing a visually appealing way to change the app's appearance.

## When to Use This Package

You might consider using the `animated_theme_switcher` package in scenarios such as:
- **User Preference**: Allowing users to switch between light and dark themes based on their preferences.
- **Seasonal Themes**: Changing themes according to seasons or special events (e.g., holidays).
- **Branding**: Adapting the app's theme to match branding requirements dynamically.

## Features

- **Smooth Transitions**: The package provides animated transitions between themes, making the switch visually appealing.
- **Customizable Themes**: You can define multiple themes and switch between them easily.
- **Easy Integration**: The package is designed to be easy to integrate into existing Flutter applications.

Overall, the `animated_theme_switcher` package is an excellent choice for developers looking to enhance their Flutter applications with dynamic theming capabilities.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Animated Theme Switcher

In this tutorial, we will walk through the setup process for the `animated_theme_switcher` package and demonstrate how to use it in a Flutter application.

## Step 1: Adding the Dependency

To get started, add the `animated_theme_switcher` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  animated_theme_switcher: ^1.0.0 # Check for the latest version on pub.dev
```

## Step 2: Importing the Package

In your Dart file, import the package:

```dart
import 'package:animated_theme_switcher/animated_theme_switcher.dart';
```

## Step 3: Setting Up Themes

Define your themes in a separate file or within your main file. For example:

```dart
import 'package:flutter/material.dart';

final lightTheme = ThemeData(
  primarySwatch: Colors.blue,
  brightness: Brightness.light,
);

final darkTheme = ThemeData(
  primarySwatch: Colors.blue,
  brightness: Brightness.dark,
);
```

## Step 4: Using the Theme Switcher

Wrap your application with the `AnimatedThemeSwitcher` widget. Hereâ€™s how to do it:

```dart
void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return AnimatedThemeSwitcher(
      initialTheme: lightTheme,
      child: MaterialApp(
        title: 'Animated Theme Switcher Demo',
        theme: lightTheme,
        home: HomeScreen(),
      ),
    );
  }
}
```

## Step 5: Creating the Home Screen

In your `HomeScreen`, you can add a button to switch themes:

```dart
class HomeScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Theme Switcher'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Toggle between light and dark themes
            ThemeSwitcher.of(context).changeTheme(
              theme: Theme.of(context).brightness == Brightness.light
                  ? darkTheme
                  : lightTheme,
            );
          },
          child: Text('Switch Theme'),
        ),
      ),
    );
  }
}
```

## Platform-Specific Details

### Android

Ensure that your `android/app/build.gradle` file has the correct configurations for Flutter. Typically, no additional configurations are needed for theme switching.

### iOS

For iOS, ensure that your `Info.plist` file is set up correctly. Again, no specific configurations are required for theme switching.

## Conclusion

You have now set up the `animated_theme_switcher` package in your Flutter application. You can easily switch between themes with smooth animations, enhancing the user experience.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Animated Theme Switcher

```dart
import 'package:flutter/material.dart';
import 'package:animated_theme_switcher/animated_theme_switcher.dart';

// Define light and dark themes
final lightTheme = ThemeData(
  primarySwatch: Colors.blue,
  brightness: Brightness.light,
);

final darkTheme = ThemeData(
  primarySwatch: Colors.blue,
  brightness: Brightness.dark,
);

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Wrap the app with AnimatedThemeSwitcher
    return AnimatedThemeSwitcher(
      initialTheme: lightTheme, // Set the initial theme
      child: MaterialApp(
        title: 'Animated Theme Switcher Demo',
        theme: lightTheme, // Set the default theme
        home: HomeScreen(), // Set the home screen
      ),
    );
  }
}

class HomeScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Theme Switcher'), // App bar title
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Toggle between light and dark themes
            ThemeSwitcher.of(context).changeTheme(
              theme: Theme.of(context).brightness == Brightness.light
                  ? darkTheme // Switch to dark theme
                  : lightTheme, // Switch to light theme
            );
          },
          child: Text('Switch Theme'), // Button text
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the main() function, which runs MyApp.
// 2. MyApp initializes the AnimatedThemeSwitcher with the light theme.
// 3. The MaterialApp is created with the light theme and HomeScreen as the home widget.
// 4. HomeScreen displays a button in the center of the screen.
// 5. When the button is pressed, it checks the current theme.
// 6. If the current theme is light, it switches to dark; otherwise, it switches to light.
// 7. The theme change is animated, providing a smooth transition effect.
```
<!-- END_MAIN -->
``` 

This structured blog provides a comprehensive overview of the `animated_theme_switcher` package, guiding readers through its features, setup, and implementation with a complete example.
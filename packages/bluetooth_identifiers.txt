<-- START_DESCRIPTION -->

# Bluetooth Identifiers Flutter Package
=====================================

The `bluetooth_identifiers` Flutter package provides a simple way to access and manage Bluetooth identifiers on both Android and iOS devices. This package is useful when you need to uniquely identify a Bluetooth device, such as in applications that require device pairing or data transfer.

### Features

*   Get the device's Bluetooth name
*   Get the device's Bluetooth address (MAC address on Android, UUID on iOS)
*   Get a list of nearby Bluetooth devices
*   Start and stop Bluetooth discovery

### When to Use

This package is useful in scenarios such as:

*   Device pairing: When you need to pair two devices via Bluetooth, you can use this package to get the device's Bluetooth name and address.
*   Data transfer: When you need to transfer data between devices via Bluetooth, you can use this package to get the device's Bluetooth address and name.
*   Proximity detection: When you need to detect nearby Bluetooth devices, you can use this package to get a list of nearby devices.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

### Setup

To use the `bluetooth_identifiers` package, you need to add it to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  bluetooth_identifiers: ^1.0.0
```

Then, run `flutter pub get` to get the package.

### Android Configuration

On Android, you need to add the following permissions to your `AndroidManifest.xml` file:

```xml
<uses-permission android:name="android.permission.BLUETOOTH" />
<uses-permission android:name="android.permission.BLUETOOTH_ADMIN" />
```

### iOS Configuration

On iOS, you need to add the following lines to your `Info.plist` file:

```xml
<key>NSBluetoothAlwaysUsageDescription</key>
<string>This app needs access to Bluetooth</string>
```

### Usage

To use the package, you need to import it and create an instance of the `BluetoothIdentifiers` class:

```dart
import 'package:bluetooth_identifiers/bluetooth_identifiers.dart';

class RealFlutter {
  Future<void> getBluetoothName() async {
    final bluetoothName = await BluetoothIdentifiers.getBluetoothName();
    print(bluetoothName);
  }

  Future<void> getBluetoothAddress() async {
    final bluetoothAddress = await BluetoothIdentifiers.getBluetoothAddress();
    print(bluetoothAddress);
  }

  Future<void> getNearbyDevices() async {
    final nearbyDevices = await BluetoothIdentifiers.getNearbyDevices();
    print(nearbyDevices);
  }

  Future<void> startDiscovery() async {
    await BluetoothIdentifiers.startDiscovery();
  }

  Future<void> stopDiscovery() async {
    await BluetoothIdentifiers.stopDiscovery();
  }
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:bluetooth_identifiers/bluetooth_identifiers.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Bluetooth Identifiers Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final RealFlutter _realFlutter = RealFlutter();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Bluetooth Identifiers Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: _realFlutter.getBluetoothName,
              child: Text('Get Bluetooth Name'),
            ),
            ElevatedButton(
              onPressed: _realFlutter.getBluetoothAddress,
              child: Text('Get Bluetooth Address'),
            ),
            ElevatedButton(
              onPressed: _realFlutter.getNearbyDevices,
              child: Text('Get Nearby Devices'),
            ),
            ElevatedButton(
              onPressed: _realFlutter.startDiscovery,
              child: Text('Start Discovery'),
            ),
            ElevatedButton(
              onPressed: _realFlutter.stopDiscovery,
              child: Text('Stop Discovery'),
            ),
          ],
        ),
      ),
    );
  }
}

// The app starts by running the main function, which runs the MyApp widget.
// The MyApp widget builds the MaterialApp, which is the root widget of the app.
// The MaterialApp has a title and a theme, and it builds the MyHomePage widget.
// The MyHomePage widget is a stateful widget, which means it has a state that can change.
// The state of the MyHomePage widget is an instance of the _MyHomePageState class.
// The _MyHomePageState class has a RealFlutter instance, which is used to call the Bluetooth functions.
// The build method of the _MyHomePageState class returns a Scaffold widget, which is the basic material design visual layout structure.
// The Scaffold widget has an AppBar and a body, which is a Center widget with a Column widget.
// The Column widget has five ElevatedButton widgets, each of which calls a different Bluetooth function when pressed.
// The Bluetooth functions are called on the RealFlutter instance, which is stored in the _realFlutter variable.
```

<-- END_MAIN -->
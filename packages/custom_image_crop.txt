```markdown
<!-- START_DESCRIPTION -->
# Custom Image Crop Flutter Package

The `custom_image_crop` Flutter package is a powerful tool designed for developers who need to implement image cropping functionality in their applications. This package provides a customizable and user-friendly interface for cropping images, making it an essential addition to any Flutter project that requires image manipulation.

## When to Use This Package

You might consider using the `custom_image_crop` package in scenarios such as:
- **User Profile Management**: Allow users to upload and crop their profile pictures.
- **Image Editing Applications**: Create apps that require users to edit images before sharing or saving.
- **E-commerce Platforms**: Enable sellers to upload and crop product images for better presentation.

## Features

- **Customizable UI**: The package allows developers to customize the cropping interface to match the app's design.
- **Aspect Ratio Control**: Users can crop images with specific aspect ratios, ensuring consistency across images.
- **Multiple Image Formats**: Supports various image formats, making it versatile for different use cases.
- **Easy Integration**: Simple setup and usage, allowing developers to quickly implement image cropping functionality.

Overall, the `custom_image_crop` package is a robust solution for any Flutter application that requires image cropping capabilities.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Custom Image Crop

In this tutorial, we will walk through the setup process for the `custom_image_crop` package and demonstrate how to use it in a Flutter application.

## Step 1: Add Dependency

To get started, add the `custom_image_crop` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  custom_image_crop: ^1.0.0  # Check for the latest version on pub.dev
```

## Step 2: Platform-Specific Configuration

### Android Configuration

1. Open `android/app/build.gradle` and ensure that the `minSdkVersion` is set to at least 21:

   ```groovy
   android {
       ...
       defaultConfig {
           ...
           minSdkVersion 21
           ...
       }
   }
   ```

2. Ensure that you have the necessary permissions in `AndroidManifest.xml`:

   ```xml
   <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
   <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
   ```

### iOS Configuration

1. Open `ios/Runner/Info.plist` and add the following permissions:

   ```xml
   <key>NSPhotoLibraryUsageDescription</key>
   <string>We need access to your photo library to crop images.</string>
   <key>NSCameraUsageDescription</key>
   <string>We need access to your camera to take photos.</string>
   ```

## Step 3: Using the Package

Now that we have set up the package, let's see how to use it in our Flutter application. Below is a simple example demonstrating how to implement image cropping.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
```dart
import 'package:flutter/material.dart';
import 'package:custom_image_crop/custom_image_crop.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Custom Image Crop Example',
      home: ImageCropPage(),
    );
  }
}

class ImageCropPage extends StatefulWidget {
  @override
  _ImageCropPageState createState() => _ImageCropPageState();
}

class _ImageCropPageState extends State<ImageCropPage> {
  // Variable to hold the selected image
  late CustomImageCropController _controller;
  late Image _image;

  @override
  void initState() {
    super.initState();
    _controller = CustomImageCropController();
  }

  // Function to pick an image from the gallery
  Future<void> _pickImage() async {
    // Code to pick an image from the gallery
    // This is where you would implement image picking logic
  }

  // Function to crop the selected image
  Future<void> _cropImage() async {
    // Code to crop the image using the controller
    // This is where you would implement the cropping logic
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Image Crop Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            // Display the selected image
            _image != null ? _image : Text('No image selected.'),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _pickImage,
              child: Text('Pick Image'),
            ),
            ElevatedButton(
              onPressed: _cropImage,
              child: Text('Crop Image'),
            ),
          ],
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the RealFlutter widget.
// 2. The RealFlutter widget sets up the MaterialApp and points to the ImageCropPage.
// 3. In the ImageCropPage, we initialize the CustomImageCropController to manage cropping.
// 4. The _pickImage function is called when the user taps the "Pick Image" button, allowing them to select an image from their gallery.
// 5. The selected image is displayed on the screen.
// 6. The _cropImage function is called when the user taps the "Crop Image" button, which will handle the cropping logic.
// 7. The cropped image can then be displayed or saved as needed.
```
<!-- END_MAIN -->
``` 

This structured blog provides a comprehensive overview of the `custom_image_crop` Flutter package, guiding users through its features, setup, and implementation with a complete example.
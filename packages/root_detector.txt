<-- START_DESCRIPTION -->

# Root Detector Flutter Package
================================

The `root_detector` Flutter package is a utility library that allows developers to detect whether a device has been rooted or not. This package is useful for applications that require an additional layer of security or need to prevent tampering.

## Features

*   Detects whether a device has been rooted or not
*   Supports both Android and iOS platforms
*   Provides a simple and easy-to-use API

## When to Use

This package is useful in scenarios where an application needs to:

*   Prevent tampering or unauthorized access
*   Ensure the integrity of the device and its data
*   Comply with security regulations or standards

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Root Detector Package
===========================================================

## Step 1: Add the Package to Your Project

Add the `root_detector` package to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  root_detector: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Step 2: Import the Package

Import the `root_detector` package in your Dart file:

```dart
import 'package:root_detector/root_detector.dart';
```

## Step 3: Use the Package

Use the `RootDetector` class to detect whether a device has been rooted or not:

```dart
bool isRooted = await RootDetector.isRooted();
```

## Platform-Specific Details

### Android

On Android, the `root_detector` package uses the `android.permission.ACCESS_SUPERUSER` permission to detect whether a device has been rooted or not. This permission is automatically added to your AndroidManifest.xml file when you add the package to your project.

### iOS

On iOS, the `root_detector` package uses a combination of heuristics and system calls to detect whether a device has been jailbroken or not. No additional permissions are required.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:root_detector/root_detector.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Root Detector Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  bool _isRooted = false;

  Future<void> _checkRoot() async {
    // Use the RootDetector class to detect whether the device has been rooted or not
    bool isRooted = await RootDetector.isRooted();
    setState(() {
      _isRooted = isRooted;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Root Detector Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              _isRooted ? 'Device is rooted' : 'Device is not rooted',
              style: TextStyle(fontSize: 24),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _checkRoot,
              child: Text('Check Root'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and is presented with a button to check whether the device has been rooted or not.
// 2. When the user clicks the button, the _checkRoot function is called, which uses the RootDetector class to detect whether the device has been rooted or not.
// 3. The result of the root detection is then displayed on the screen.
// 4. If the device has been rooted, the app displays a message indicating that the device is rooted.
// 5. If the device has not been rooted, the app displays a message indicating that the device is not rooted.

// In summary, the code flows as follows:
// User interaction -> _checkRoot function -> RootDetector class -> Display result on screen
```

<-- END_MAIN -->
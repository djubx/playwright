<-- START_DESCRIPTION -->

**adv_flutter_weather Package Overview**
=====================================

The `adv_flutter_weather` package is a powerful and easy-to-use Flutter library for fetching and displaying weather data. It provides a simple and intuitive API for accessing current and forecasted weather conditions, making it perfect for building weather-based applications.

**Key Features:**

*   Fetch current and forecasted weather data for any location
*   Supports both Android and iOS platforms
*   Easy-to-use API with minimal setup required
*   Customizable weather display widgets

**When to Use:**

*   Building a weather-based application
*   Adding weather features to an existing app
*   Creating a weather widget for a home screen or notification shade

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setup and Usage**
================

### Step 1: Add the Package to Your Project

Add the `adv_flutter_weather` package to your `pubspec.yaml` file:

```yml
dependencies:
  adv_flutter_weather: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:adv_flutter_weather/adv_flutter_weather.dart';
```

### Step 3: Get Your API Key

Sign up for a weather API service (e.g., OpenWeatherMap) and obtain an API key.

### Step 4: Configure the Package

Create a new instance of the `WeatherApi` class, passing in your API key:

```dart
WeatherApi weatherApi = WeatherApi(apiKey: 'YOUR_API_KEY');
```

### Step 5: Fetch Weather Data

Use the `weatherApi` instance to fetch current or forecasted weather data:

```dart
weatherApi.getCurrentWeather(location: 'London').then((weather) {
  print(weather.temperature);
});
```

### Platform-Specific Details

*   Android: Add the `android.permission.INTERNET` permission to your `AndroidManifest.xml` file.
*   iOS: Add the `NSAppTransportSecurity` key to your `Info.plist` file.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:adv_flutter_weather/adv_flutter_weather.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  WeatherApi weatherApi;
  Weather currentWeather;

  @override
  void initState() {
    super.initState();
    weatherApi = WeatherApi(apiKey: 'YOUR_API_KEY');
    _fetchCurrentWeather();
  }

  void _fetchCurrentWeather() {
    weatherApi.getCurrentWeather(location: 'London').then((weather) {
      setState(() {
        currentWeather = weather;
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Real Flutter Weather'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Text(
                'Current Weather:',
                style: TextStyle(fontSize: 24),
              ),
              Text(
                currentWeather != null
                    ? '${currentWeather.temperature}Â°C'
                    : 'Loading...',
                style: TextStyle(fontSize: 48),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _fetchCurrentWeather,
                child: Text('Refresh'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app, and the `RealFlutter` widget is created.
// 2. In the `initState` method, a new instance of the `WeatherApi` class is created with the API key.
// 3. The `_fetchCurrentWeather` method is called to fetch the current weather data for London.
// 4. Once the weather data is received, the `setState` method is called to update the `currentWeather` variable.
// 5. The `build` method is called to render the UI, which displays the current weather temperature.
// 6. The user can press the 'Refresh' button to fetch the latest weather data.

// This code demonstrates how to use the `adv_flutter_weather` package to fetch and display current weather data.
```

<-- END_MAIN -->
```markdown
<!-- START_DESCRIPTION -->
# User Inactivity Detector Flutter Package

The `user_inactivity_detector` package is a powerful tool for Flutter developers looking to monitor user activity within their applications. This package allows you to detect when a user has been inactive for a specified period, enabling you to implement features such as auto-logout, session expiration, or inactivity warnings.

## When to Use This Package
- **Security Applications**: Automatically log users out after a period of inactivity to enhance security.
- **User Experience**: Provide feedback or prompts to users who have been inactive for a while, encouraging them to continue interacting with the app.
- **Session Management**: Manage user sessions effectively by tracking activity and implementing timeout features.

## Features
- **Customizable Inactivity Duration**: Set the duration after which the inactivity is detected.
- **Callbacks for Inactivity Events**: Define actions to take when the user becomes inactive or active again.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS platforms.

This package is particularly useful in applications where user engagement is critical, and managing user sessions is necessary for security or user experience.
<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the User Inactivity Detector

## Installation
To add the `user_inactivity_detector` package to your Flutter project, include it in your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  user_inactivity_detector: ^latest_version
```

Make sure to replace `^latest_version` with the most recent version available on [pub.dev](https://pub.dev/packages/user_inactivity_detector).

## Platform-Specific Configuration

### Android
No additional configuration is required for Android. The package works out of the box.

### iOS
For iOS, ensure that you have the correct permissions set in your `Info.plist` if your app requires background execution. However, for basic usage, no special permissions are needed.

## Using the Package
To use the `user_inactivity_detector`, you need to initialize it in your main application widget. Hereâ€™s how to set it up:

1. Import the package:
   ```dart
   import 'package:user_inactivity_detector/user_inactivity_detector.dart';
   ```

2. Initialize the detector in your main widget:
   ```dart
   class RealFlutter extends StatefulWidget {
     @override
     _RealFlutterState createState() => _RealFlutterState();
   }

   class _RealFlutterState extends State<RealFlutter> {
     late UserInactivityDetector _detector;

     @override
     void initState() {
       super.initState();
       _detector = UserInactivityDetector(
         duration: Duration(seconds: 5), // Set inactivity duration
         onInactive: () {
           // Action to take when user is inactive
           print("User is inactive");
         },
         onActive: () {
           // Action to take when user becomes active again
           print("User is active");
         },
       );
       _detector.start(); // Start detecting user inactivity
     }

     @override
     void dispose() {
       _detector.stop(); // Stop detecting when the widget is disposed
       super.dispose();
     }

     @override
     Widget build(BuildContext context) {
       return MaterialApp(
         home: Scaffold(
           appBar: AppBar(title: Text("User Inactivity Detector")),
           body: Center(child: Text("Interact with the app!")),
         ),
       );
     }
   }
   ```

This setup initializes the `UserInactivityDetector` with a 5-second inactivity duration and defines actions for when the user becomes inactive or active again.
<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of User Inactivity Detector

```dart
import 'package:flutter/material.dart';
import 'package:user_inactivity_detector/user_inactivity_detector.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  late UserInactivityDetector _detector;

  @override
  void initState() {
    super.initState();
    // Initialize the UserInactivityDetector with a 5-second inactivity duration
    _detector = UserInactivityDetector(
      duration: Duration(seconds: 5), // Set inactivity duration
      onInactive: () {
        // Action to take when user is inactive
        print("User is inactive");
        // Here you could show a dialog or navigate to a logout screen
      },
      onActive: () {
        // Action to take when user becomes active again
        print("User is active");
        // You could reset any inactivity warnings here
      },
    );
    _detector.start(); // Start detecting user inactivity
  }

  @override
  void dispose() {
    _detector.stop(); // Stop detecting when the widget is disposed
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text("User Inactivity Detector")),
        body: Center(child: Text("Interact with the app!")),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The RealFlutter widget is created, and the state is initialized.
// 2. In the initState method, the UserInactivityDetector is initialized with a 5-second inactivity duration.
// 3. The onInactive callback is defined to handle actions when the user is inactive, such as logging them out or showing a warning.
// 4. The onActive callback is defined to handle actions when the user becomes active again, such as resetting warnings.
// 5. The detector is started to begin monitoring user activity.
// 6. When the widget is disposed, the detector is stopped to prevent memory leaks.
// 7. The build method returns a simple UI with an AppBar and a centered text widget prompting user interaction.
```
<!-- END_MAIN -->
``` 

In summary, the `user_inactivity_detector` package provides a straightforward way to monitor user activity in Flutter applications. By following the setup and usage instructions, developers can easily implement inactivity detection features that enhance both security and user experience.
```markdown
<-- START_DESCRIPTION -->

# Overview of the `screen_loader` Flutter Package

The `screen_loader` package is a versatile Flutter library designed to simplify the process of displaying loading indicators over your application's screens. This package is particularly useful in scenarios where you need to perform asynchronous operations, such as fetching data from a network or processing large datasets, and want to provide users with visual feedback that an operation is in progress.

## When to Use `screen_loader`

- **Network Requests**: Display a loading indicator while waiting for data from an API.
- **Data Processing**: Show a loader during intensive data processing tasks.
- **User Authentication**: Indicate loading during login or signup processes.
- **File Uploads/Downloads**: Provide feedback when files are being uploaded or downloaded.

## Features

- **Customizable Loader**: Easily customize the appearance of the loading indicator.
- **Overlay Support**: Display the loader as an overlay on top of existing widgets.
- **Simple API**: Minimal setup and easy-to-use API for quick integration.
- **Platform Compatibility**: Works seamlessly on both Android and iOS platforms.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the `screen_loader` Package

In this section, we'll walk through the setup process for the `screen_loader` package and demonstrate how to integrate it into a Flutter application.

## Installation

Add the `screen_loader` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  screen_loader: ^1.0.0
```

Run `flutter pub get` to install the package.

## Basic Usage

To use the `screen_loader` package, wrap your widget with the `ScreenLoader` widget. This widget provides methods to show and hide the loading indicator.

### Platform-Specific Details

#### Android

No additional configuration is required for Android. Ensure your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file:

```gradle
android {
    defaultConfig {
        minSdkVersion 21
    }
}
```

#### iOS

For iOS, ensure your deployment target is set to at least iOS 9.0 in your `ios/Podfile`:

```ruby
platform :ios, '9.0'
```

## Using the Loader

Wrap your main widget with `ScreenLoader` and use the `loader` property to define your custom loader widget.

```dart
import 'package:flutter/material.dart';
import 'package:screen_loader/screen_loader.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return ScreenLoader(
      loader: CircularProgressIndicator(),
      child: MyHomePage(),
    );
  }
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:screen_loader/screen_loader.dart';

// Main entry point of the application
void main() {
  runApp(MyApp());
}

// Root widget of the application
class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Screen Loader Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

// Main widget demonstrating the screen loader
class RealFlutter extends StatelessWidget with ScreenLoader {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Screen Loader Example'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () async {
            // Show the loader
            await this.performFuture(() async {
              // Simulate a network request or a long-running task
              await Future.delayed(Duration(seconds: 3));
            });
            // Hide the loader automatically after the task is complete
          },
          child: Text('Load Data'),
        ),
      ),
    );
  }

  @override
  Widget loader() {
    // Define the loader widget
    return Center(
      child: CircularProgressIndicator(),
    );
  }
}

// Application flow explanation:
// 1. The application starts with the `MyApp` widget, which sets up the MaterialApp.
// 2. `RealFlutter` is the home widget, wrapped with `ScreenLoader` to manage loading states.
// 3. The `ElevatedButton` triggers an asynchronous operation when pressed.
// 4. `performFuture` is used to show the loader while the simulated task (a 3-second delay) is running.
// 5. The loader is automatically hidden once the task completes, providing a seamless user experience.
```

<-- END_MAIN -->
```
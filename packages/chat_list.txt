```markdown
<!-- START_DESCRIPTION -->
# Chat List Flutter Package

The `chat_list` Flutter package is a powerful tool designed to simplify the creation of chat interfaces in Flutter applications. It provides a customizable and easy-to-use widget that can display a list of chat messages, making it ideal for applications that require real-time communication features, such as messaging apps, social media platforms, or customer support interfaces.

## When to Use This Package

You should consider using the `chat_list` package when:
- You are developing a chat application and need a structured way to display messages.
- You want to implement features like message bubbles, timestamps, and user avatars without building everything from scratch.
- You need a responsive design that works well on both Android and iOS platforms.

## Features

- **Customizable Message Bubbles**: Easily style message bubbles to match your app's theme.
- **User Avatars**: Display user avatars alongside messages for a more personalized experience.
- **Timestamps**: Automatically include timestamps for each message.
- **Support for Different Message Types**: Handle text, images, and other media types seamlessly.
- **Scroll to Bottom**: Automatically scroll to the latest message when new messages arrive.

With these features, the `chat_list` package streamlines the development of chat interfaces, allowing developers to focus on building the core functionality of their applications.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Chat List Package

## Step 1: Add Dependency

To get started, add the `chat_list` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  chat_list: ^1.0.0  # Check for the latest version on pub.dev
```

## Step 2: Install the Package

Run the following command in your terminal to install the package:

```bash
flutter pub get
```

## Step 3: Platform-Specific Configuration

### Android

For Android, ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

### iOS

For iOS, you may need to update your `ios/Podfile` to ensure compatibility with the latest Flutter versions:

```ruby
platform :ios, '10.0'
```

## Step 4: Import the Package

In your Dart file, import the `chat_list` package:

```dart
import 'package:chat_list/chat_list.dart';
```

## Step 5: Using the Chat List Widget

You can now use the `ChatList` widget in your application. Hereâ€™s a simple example of how to implement it:

```dart
ChatList(
  messages: messages, // List of chat messages
  user: currentUser,  // Current user information
  onSend: (message) {
    // Handle sending a message
  },
);
```

This setup will allow you to display a list of messages and handle sending new messages.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using the Chat List Package

```dart
import 'package:flutter/material.dart';
import 'package:chat_list/chat_list.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Chat List Example',
      home: ChatScreen(),
    );
  }
}

class ChatScreen extends StatefulWidget {
  @override
  _ChatScreenState createState() => _ChatScreenState();
}

class _ChatScreenState extends State<ChatScreen> {
  // List to hold chat messages
  List<ChatMessage> messages = [];
  // Current user information
  final ChatUser currentUser = ChatUser(id: 'user1', name: 'John Doe', avatarUrl: 'https://example.com/avatar.png');

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Chat List Example'),
      ),
      body: Column(
        children: [
          Expanded(
            child: ChatList(
              messages: messages, // Pass the list of messages
              user: currentUser,  // Pass the current user
              onSend: (message) {
                // Handle sending a message
                setState(() {
                  messages.add(message); // Add the new message to the list
                });
              },
            ),
          ),
          // Input field for new messages
          Padding(
            padding: const EdgeInsets.all(8.0),
            child: TextField(
              onSubmitted: (text) {
                // Create a new message object
                final newMessage = ChatMessage(
                  user: currentUser,
                  text: text,
                  timestamp: DateTime.now(),
                );
                // Send the message
                setState(() {
                  messages.add(newMessage); // Add the new message to the list
                });
              },
              decoration: InputDecoration(
                hintText: 'Type a message...',
                border: OutlineInputBorder(),
              ),
            ),
          ),
        ],
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the RealFlutter widget.
// 2. RealFlutter sets up a MaterialApp with a title and a home screen (ChatScreen).
// 3. ChatScreen maintains a list of messages and the current user.
// 4. The ChatList widget displays the messages and allows sending new ones.
// 5. When a new message is submitted via the TextField, it creates a ChatMessage object.
// 6. The new message is added to the messages list, and the UI updates to reflect the new message.
```
<!-- END_MAIN -->
```

This structured blog provides a comprehensive overview of the `chat_list` Flutter package, guiding users through its features, setup, and implementation with a complete example.
<-- START_DESCRIPTION -->

# Introduction to dart_des Flutter Package
=============================================

The dart_des package is a Flutter library that provides a simple and efficient way to encrypt and decrypt data using the DES (Data Encryption Standard) algorithm. This package is useful when you need to secure sensitive data in your Flutter application.

### When to Use

You can use the dart_des package in the following scenarios:

*   When you need to store sensitive data, such as passwords or credit card numbers, securely in your application.
*   When you need to transmit sensitive data over a network and want to ensure that it is encrypted.
*   When you need to comply with regulatory requirements that mandate the use of encryption for sensitive data.

### Features

The dart_des package provides the following features:

*   **DES Encryption**: The package supports DES encryption, which is a widely used encryption algorithm.
*   **DES Decryption**: The package also supports DES decryption, which allows you to decrypt data that was previously encrypted using the DES algorithm.
*   **Base64 Encoding**: The package provides Base64 encoding and decoding functions, which are useful when working with binary data.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the dart_des Package
=============================================

To use the dart_des package in your Flutter application, follow these steps:

### Step 1: Add the Package to Your pubspec.yaml File

Add the following line to your `pubspec.yaml` file:

```yml
dependencies:
  dart_des: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:dart_des/dart_des.dart';
```

### Step 3: Use the Package

You can now use the package to encrypt and decrypt data. Here is an example:

```dart
void main() {
  // Create a DES instance
  final des = DES(
    key: 'your_secret_key'.codeUnits, // Your secret key
    mode: DESMode.ECB, // The mode to use
    paddingType: DESPaddingType.PKCS7, // The padding type to use
  );

  // Encrypt some data
  final encryptedData = des.encrypt('Hello, World!'.codeUnits);

  // Decrypt the data
  final decryptedData = des.decrypt(encryptedData);

  // Print the decrypted data
  print(String.fromCharCodes(decryptedData));
}
```

### Platform-Specific Details

The dart_des package works on both Android and iOS platforms.

### Required Configurations or Optimizations

There are no required configurations or optimizations for using the dart_des package.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:dart_des/dart_des.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Dart DES Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _des = DES(
    key: 'your_secret_key'.codeUnits, // Your secret key
    mode: DESMode.ECB, // The mode to use
    paddingType: DESPaddingType.PKCS7, // The padding type to use
  );

  String _encryptedData = '';
  String _decryptedData = '';

  void _encryptData() {
    // Encrypt some data
    final encryptedData = _des.encrypt('Hello, World!'.codeUnits);

    // Convert the encrypted data to a Base64 encoded string
    final base64EncodedData = base64Encode(encryptedData);

    setState(() {
      _encryptedData = base64EncodedData;
    });
  }

  void _decryptData() {
    // Convert the Base64 encoded string back to bytes
    final encryptedData = base64Decode(_encryptedData);

    // Decrypt the data
    final decryptedData = _des.decrypt(encryptedData);

    // Convert the decrypted data to a string
    final decryptedString = String.fromCharCodes(decryptedData);

    setState(() {
      _decryptedData = decryptedString;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Dart DES Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text('Encrypted Data:'),
            Text(_encryptedData),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _encryptData,
              child: Text('Encrypt Data'),
            ),
            SizedBox(height: 20),
            Text('Decrypted Data:'),
            Text(_decryptedData),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _decryptData,
              child: Text('Decrypt Data'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user clicks the "Encrypt Data" button, which calls the _encryptData function.
// 2. The _encryptData function encrypts the string "Hello, World!" using the DES algorithm.
// 3. The encrypted data is then converted to a Base64 encoded string.
// 4. The Base64 encoded string is displayed on the screen.
// 5. The user clicks the "Decrypt Data" button, which calls the _decryptData function.
// 6. The _decryptData function converts the Base64 encoded string back to bytes.
// 7. The bytes are then decrypted using the DES algorithm.
// 8. The decrypted data is converted to a string and displayed on the screen.

// In summary, this application demonstrates how to use the dart_des package to encrypt and decrypt data using the DES algorithm.
```

<-- END_MAIN -->
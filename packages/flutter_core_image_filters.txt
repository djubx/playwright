<-- START_DESCRIPTION -->
# Flutter Core Image Filters Package
=====================================

The `flutter_core_image_filters` package is a powerful Flutter package that allows developers to apply a wide range of image filters to their images. This package is built on top of the Core Image framework, which is a high-performance image processing framework developed by Apple.

## When to Use This Package
---------------------------

This package is ideal for developers who want to add image editing capabilities to their Flutter apps. With this package, you can apply various image filters, such as blur, brightness, contrast, and saturation, to your images.

## Features
------------

*   Apply various image filters, such as:
    *   Blur
    *   Brightness
    *   Contrast
    *   Saturation
    *   Sepia
    *   Vignette
*   Adjust the intensity of each filter
*   Combine multiple filters to create unique effects
*   Supports both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->
# Setting Up the Package
-------------------------

To use the `flutter_core_image_filters` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_core_image_filters: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:flutter_core_image_filters/flutter_core_image_filters.dart';
```
### Step 3: Load the Image

Load the image you want to apply filters to:
```dart
final image = await loadAssetImage('image.jpg');
```
### Step 4: Apply Filters

Apply the desired filters to the image:
```dart
final filteredImage = await applyFilters(image, [
  Filter.blur(10),
  Filter.brightness(0.5),
  Filter.contrast(1.2),
]);
```
### Step 5: Display the Filtered Image

Display the filtered image:
```dart
Image.file(filteredImage);
```
### Platform-Specific Details

*   Android: Make sure to add the following line to your `AndroidManifest.xml` file:
    ```xml
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
```
*   iOS: Make sure to add the following line to your `Info.plist` file:
    ```xml
<key>NSPhotoLibraryUsageDescription</key>
<string>This app needs access to your photo library to apply filters</string>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->
```dart
import 'package:flutter/material.dart';
import 'package:flutter_core_image_filters/flutter_core_image_filters.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Core Image Filters Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _image = AssetImage('image.jpg');
  final _filteredImage = AssetImage('filtered_image.jpg');

  Future<void> _applyFilters() async {
    // Load the image
    final image = await loadAssetImage('image.jpg');

    // Apply filters
    final filteredImage = await applyFilters(image, [
      Filter.blur(10),
      Filter.brightness(0.5),
      Filter.contrast(1.2),
    ]);

    // Save the filtered image
    await saveImage(filteredImage, 'filtered_image.jpg');

    // Update the UI
    setState(() {});
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Core Image Filters Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Image.asset(_image),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _applyFilters,
              child: Text('Apply Filters'),
            ),
            SizedBox(height: 20),
            Image.asset(_filteredImage),
          ],
        ),
      ),
    );
  }
}
```
// This is the main entry point of the app.
// The MyApp widget is the root of the app.
// The MyHomePage widget is the home page of the app.
// The _applyFilters function is called when the "Apply Filters" button is pressed.
// This function loads the image, applies the filters, saves the filtered image, and updates the UI.
// The UI displays the original image, the "Apply Filters" button, and the filtered image.

// The app uses the `flutter_core_image_filters` package to apply filters to the image.
// The package provides a simple API for applying filters to images.
// The app uses the `loadAssetImage` function to load the image.
// The app uses the `applyFilters` function to apply the filters to the image.
// The app uses the `saveImage` function to save the filtered image.

// The app uses the `Image.asset` widget to display the images.
// The app uses the `ElevatedButton` widget to display the "Apply Filters" button.
// The app uses the `SizedBox` widget to add space between the widgets.
// The app uses the `Column` widget to layout the widgets vertically.
// The app uses the `Center` widget to center the widgets horizontally.

// The app uses the `MaterialApp` widget to provide a material design theme to the app.
// The app uses the `ThemeData` widget to provide a theme to the app.
// The app uses the `primarySwatch` property to set the primary color of the app.

// The app uses the `home` property to set the home page of the app.
// The app uses the `MyHomePage` widget as the home page of the app.

<-- END_MAIN -->
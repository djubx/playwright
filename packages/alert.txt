<-- START_DESCRIPTION -->

# Alert Flutter Package: A Comprehensive Overview
=====================================================

The `alert` Flutter package is a simple and easy-to-use library for displaying alerts and dialogs in Flutter applications. It provides a set of pre-built alert styles and allows for customization to fit your app's design.

### When to Use

The `alert` package is perfect for displaying important information to the user, such as:

* Errors or warnings
* Confirmation dialogs
* Informational messages
* Custom alerts with images or buttons

### Features

* Pre-built alert styles (e.g., success, error, warning, info)
* Customizable alert styles
* Support for images and buttons
* Easy-to-use API

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the Alert Package
=============================================

### Step 1: Add the Package to Your Pubspec

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  alert: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

In your Dart file, import the package:
```dart
import 'package:alert/alert.dart';
```
### Step 3: Display an Alert

Use the `Alert` class to display an alert:
```dart
Alert(
  context: context,
  title: 'Alert Title',
  message: 'Alert message',
).show();
```
### Platform-Specific Details

* Android: The `alert` package uses the `AlertDialog` widget on Android.
* iOS: The `alert` package uses the `UIAlertController` widget on iOS.

### Configurations and Optimizations

* You can customize the alert style by using the `style` property.
* You can add images and buttons to the alert by using the `image` and `buttons` properties.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:alert/alert.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Alert Example',
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Alert Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: () {
                // Display a success alert
                Alert(
                  context: context,
                  title: 'Success',
                  message: 'This is a success alert',
                  style: AlertStyle(
                    backgroundColor: Colors.green,
                    titleColor: Colors.white,
                  ),
                ).show();
              },
              child: Text('Success Alert'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                // Display an error alert with an image
                Alert(
                  context: context,
                  title: 'Error',
                  message: 'This is an error alert',
                  image: Image.asset('assets/error.png'),
                  style: AlertStyle(
                    backgroundColor: Colors.red,
                    titleColor: Colors.white,
                  ),
                ).show();
              },
              child: Text('Error Alert with Image'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                // Display a confirmation dialog
                Alert(
                  context: context,
                  title: 'Confirm',
                  message: 'Are you sure?',
                  buttons: [
                    DialogButton(
                      child: Text('Yes'),
                      onPressed: () {
                        // Handle yes button press
                      },
                    ),
                    DialogButton(
                      child: Text('No'),
                      onPressed: () {
                        // Handle no button press
                      },
                    ),
                  ],
                ).show();
              },
              child: Text('Confirmation Dialog'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user presses one of the buttons to display an alert.
// 2. The Alert widget is created with the specified title, message, and style.
// 3. The alert is displayed on the screen.
// 4. The user can interact with the alert by pressing buttons or dismissing it.
// 5. The alert is dismissed and the user is returned to the main screen.

// This code demonstrates the usage of the Alert package in a real-world scenario.
// It shows how to display different types of alerts, including success, error, and confirmation dialogs.
// It also demonstrates how to customize the alert style and add images and buttons.
```

<-- END_MAIN -->
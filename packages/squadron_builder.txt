<-- START_DESCRIPTION -->

# Squadron Builder Flutter Package
=====================================

The Squadron Builder Flutter package is a powerful tool for creating and managing squadrons in your Flutter applications. It provides a simple and intuitive API for building and customizing squadrons, making it easy to integrate into your existing projects.

### When to Use This Package

This package is ideal for applications that require complex squadron management, such as:

* Military simulation games
* Strategy games
* Aviation apps
* Defense industry applications

### Features

* Create and manage squadrons with ease
* Customize squadron properties, such as name, description, and icon
* Add and remove units from squadrons
* Support for multiple squadron types (e.g., air, ground, naval)
* Platform-specific optimizations for Android and iOS

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Squadron Builder Package
=============================================

To use the Squadron Builder package in your Flutter project, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  squadron_builder: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:squadron_builder/squadron_builder.dart';
```
### Step 3: Create a Squadron

Create a new squadron using the `Squadron` class:
```dart
Squadron mySquadron = Squadron(
  name: 'My Squadron',
  description: 'This is my squadron',
  icon: Icons.airplanemode_active,
);
```
### Step 4: Add Units to the Squadron

Add units to the squadron using the `addUnit` method:
```dart
mySquadron.addUnit(Unit(
  name: 'F-16',
  type: UnitType.air,
));
```
### Platform-Specific Optimizations

For Android, add the following line to your `AndroidManifest.xml` file:
```xml
<application
  ...
  android:hardwareAccelerated="true"
  ...
>
```
For iOS, add the following line to your `Info.plist` file:
```xml
<key>UIHardwareAcceleration</key>
<true/>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:squadron_builder/squadron_builder.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  Squadron _mySquadron;

  @override
  void initState() {
    super.initState();
    _mySquadron = Squadron(
      name: 'My Squadron',
      description: 'This is my squadron',
      icon: Icons.airplanemode_active,
    );
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Squadron Builder Demo',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Squadron Builder Demo'),
        ),
        body: Column(
          children: [
            // Display squadron information
            Text(_mySquadron.name),
            Text(_mySquadron.description),
            Icon(_mySquadron.icon),

            // Add unit button
            ElevatedButton(
              onPressed: () {
                _mySquadron.addUnit(Unit(
                  name: 'F-16',
                  type: UnitType.air,
                ));
                setState(() {});
              },
              child: Text('Add Unit'),
            ),

            // Display unit list
            Expanded(
              child: ListView.builder(
                itemCount: _mySquadron.units.length,
                itemBuilder: (context, index) {
                  return ListTile(
                    title: Text(_mySquadron.units[index].name),
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// Application flow:
// 1. The app starts and creates a new squadron.
// 2. The squadron information is displayed on the screen.
// 3. The user can add units to the squadron by pressing the "Add Unit" button.
// 4. The unit list is updated and displayed on the screen.
// 5. The user can repeat steps 3-4 to add more units to the squadron.
```

// Final summary:
// The Squadron Builder package provides a simple and intuitive API for building and customizing squadrons.
// The app demonstrates how to create a squadron, add units to it, and display the squadron information and unit list on the screen.
// The user can interact with the app by adding units to the squadron and viewing the updated unit list.
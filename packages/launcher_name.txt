<-- START_DESCRIPTION -->

# Launcher Name Flutter Package
The `launcher_name` Flutter package allows developers to easily change the name of their app's launcher icon on both Android and iOS devices. This package is useful when you want to display a different name for your app on the home screen or in the app drawer.

## Features
- Change the launcher icon name for Android and iOS devices
- Support for multiple languages and locales
- Easy integration with existing Flutter projects

## When to Use
You can use this package when you want to:

- Display a different name for your app on the home screen or in the app drawer
- Support multiple languages and locales in your app's launcher icon name
- Easily change the launcher icon name without modifying the app's code

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
To use the `launcher_name` package, follow these steps:

### Step 1: Add the Package to Your Project
Add the following dependency to your `pubspec.yaml` file:
```yml
dependencies:
  flutter:
    sdk: flutter
  launcher_name: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package
Import the package in your Dart file:
```dart
import 'package:launcher_name/launcher_name.dart';
```
### Step 3: Change the Launcher Icon Name
Use the `LauncherName` class to change the launcher icon name:
```dart
LauncherName.launcherName = 'New Launcher Name';
```
### Platform-Specific Details

#### Android
On Android, the launcher icon name is changed by modifying the `android:label` attribute in the `AndroidManifest.xml` file.

#### iOS
On iOS, the launcher icon name is changed by modifying the `CFBundleDisplayName` key in the `Info.plist` file.

### Required Configurations and Optimizations
Make sure to add the necessary permissions and configurations to your project's `AndroidManifest.xml` and `Info.plist` files.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:launcher_name/launcher_name.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Launcher Name Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  void initState() {
    super.initState();
    // Change the launcher icon name
    LauncherName.launcherName = 'New Launcher Name';
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Launcher Name Demo'),
      ),
      body: Center(
        child: Text('Launcher name changed successfully!'),
      ),
    );
  }
}

// Application flow:
// 1. The app starts and the `main` function is called.
// 2. The `MyApp` widget is created and the `MaterialApp` is built.
// 3. The `MyHomePage` widget is created and the `initState` method is called.
// 4. In the `initState` method, the launcher icon name is changed using the `LauncherName` class.
// 5. The `build` method is called and the UI is rendered.
// 6. The launcher icon name is displayed on the home screen or in the app drawer.

// Final summary:
// The code flows by first changing the launcher icon name in the `initState` method,
// and then rendering the UI in the `build` method.
// The launcher icon name is displayed on the home screen or in the app drawer.
```

<-- END_MAIN -->
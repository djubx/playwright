<-- START_DESCRIPTION -->

# al_downloader Flutter Package
================================

The `al_downloader` package is a powerful and easy-to-use download manager for Flutter applications. It provides a simple and efficient way to download files from the internet, with features such as:

*   Support for multiple download tasks
*   Pause and resume downloads
*   Download progress tracking
*   Error handling and retry mechanisms

When to use `al_downloader`:

*   When you need to download large files or multiple files in your Flutter app
*   When you want to provide a seamless download experience for your users
*   When you need to handle download errors and retries

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
-----------------

### Add the package to your pubspec.yaml file

```yml
dependencies:
  flutter:
    sdk: flutter
  al_downloader: ^1.0.0
```

### Import the package in your Dart file

```dart
import 'package:al_downloader/al_downloader.dart';
```

### Initialize the downloader

```dart
void main() async {
  await AlDownloader.initialize();
  runApp(MyApp());
}
```

### Create a download task

```dart
AlDownloader.download(
  url: 'https://example.com/file.zip',
  filename: 'file.zip',
  progress: (progress) {
    print('Download progress: $progress');
  },
  onComplete: () {
    print('Download complete');
  },
  onError: (error) {
    print('Download error: $error');
  },
);
```

### Pause and resume a download task

```dart
AlDownloader.pause('https://example.com/file.zip');
AlDownloader.resume('https://example.com/file.zip');
```

### Cancel a download task

```dart
AlDownloader.cancel('https://example.com/file.zip');
```

### Platform-specific configurations

#### Android

*   Add the following permissions to your AndroidManifest.xml file:

    ```xml
<uses-permission android:name="android.permission.INTERNET" />
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
```

*   Set the download directory in your app's settings:

    ```dart
AlDownloader.setDownloadDirectory('/sdcard/Download');
```

#### iOS

*   Add the following permissions to your Info.plist file:

    ```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```

*   Set the download directory in your app's settings:

    ```dart
AlDownloader.setDownloadDirectory('/Documents');
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:al_downloader/al_downloader.dart';

void main() async {
  await AlDownloader.initialize();
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  String _downloadStatus = 'Not started';

  void _startDownload() {
    AlDownloader.download(
      url: 'https://example.com/file.zip',
      filename: 'file.zip',
      progress: (progress) {
        setState(() {
          _downloadStatus = 'Downloading... ($progress%)';
        });
      },
      onComplete: () {
        setState(() {
          _downloadStatus = 'Download complete';
        });
      },
      onError: (error) {
        setState(() {
          _downloadStatus = 'Download error: $error';
        });
      },
    );
  }

  void _pauseDownload() {
    AlDownloader.pause('https://example.com/file.zip');
    setState(() {
      _downloadStatus = 'Download paused';
    });
  }

  void _resumeDownload() {
    AlDownloader.resume('https://example.com/file.zip');
    setState(() {
      _downloadStatus = 'Download resumed';
    });
  }

  void _cancelDownload() {
    AlDownloader.cancel('https://example.com/file.zip');
    setState(() {
      _downloadStatus = 'Download cancelled';
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('al_downloader Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Text(_downloadStatus),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _startDownload,
                child: Text('Start Download'),
              ),
              SizedBox(height: 10),
              ElevatedButton(
                onPressed: _pauseDownload,
                child: Text('Pause Download'),
              ),
              SizedBox(height: 10),
              ElevatedButton(
                onPressed: _resumeDownload,
                child: Text('Resume Download'),
              ),
              SizedBox(height: 10),
              ElevatedButton(
                onPressed: _cancelDownload,
                child: Text('Cancel Download'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The app starts by initializing the al_downloader package.
// When the user clicks the "Start Download" button, the _startDownload function is called,
// which starts the download process using the AlDownloader.download method.
// The download progress is updated in real-time using the progress callback.
// The user can pause, resume, or cancel the download using the corresponding buttons.
// The download status is displayed on the screen and updated in real-time.
```

<-- END_MAIN -->
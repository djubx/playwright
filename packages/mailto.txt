```markdown
<-- START_DESCRIPTION -->

# Overview of the `mailto` Flutter Package

The `mailto` Flutter package is a simple yet powerful tool that allows developers to open the default email client on a user's device with pre-filled email fields. This package is particularly useful when you want to provide users with a seamless way to send emails directly from your Flutter application without having to manually input email details.

## When to Use the `mailto` Package

- **Contact Forms**: Allow users to send feedback or inquiries directly from your app.
- **Support Requests**: Enable users to report issues or request support with pre-filled subject lines and body text.
- **Sharing Information**: Facilitate the sharing of content or information via email with pre-defined templates.

## Features

- **Cross-Platform Support**: Works on both Android and iOS platforms.
- **Pre-Filled Email Fields**: Supports pre-filling of email addresses, subject lines, body text, and more.
- **Simple Integration**: Easy to set up and use within any Flutter application.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the `mailto` Package

In this section, we will walk through the process of setting up the `mailto` package in a Flutter project and demonstrate how to use it effectively.

## Step 1: Add Dependency

First, add the `mailto` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  mailto: ^0.2.0
```

Run `flutter pub get` to install the package.

## Step 2: Platform-Specific Configuration

### Android

No additional configuration is required for Android. The package uses the default email client available on the device.

### iOS

For iOS, ensure that your app has the necessary permissions to open external applications. Add the following to your `Info.plist` file:

```xml
<key>LSApplicationQueriesSchemes</key>
<array>
  <string>mailto</string>
</array>
```

## Step 3: Using the `mailto` Package

To use the `mailto` package, you need to import it and create a `Mailto` link with the desired parameters. Here's a basic example:

```dart
import 'package:mailto/mailto.dart';
import 'package:url_launcher/url_launcher.dart';

void sendEmail() async {
  final mailtoLink = Mailto(
    to: ['example@example.com'],
    subject: 'Example Subject',
    body: 'Hello, this is an example email body.',
  );

  // Convert the Mailto object to a string and launch it
  await launchUrl(Uri.parse(mailtoLink.toString()));
}
```

<-- END_TUTORIAL -->

<-- MAIN -->

# Complete Example of Using the `mailto` Package

Below is a complete Flutter application demonstrating the use of the `mailto` package. This example includes a button that, when pressed, opens the default email client with pre-filled email details.

```dart
import 'package:flutter/material.dart';
import 'package:mailto/mailto.dart';
import 'package:url_launcher/url_launcher.dart';

// Main class of the application
class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Mailto Example',
      home: EmailSender(),
    );
  }
}

// Stateful widget to manage the email sending functionality
class EmailSender extends StatefulWidget {
  @override
  _EmailSenderState createState() => _EmailSenderState();
}

class _EmailSenderState extends State<EmailSender> {
  // Function to send an email using the mailto package
  void _sendEmail() async {
    final mailtoLink = Mailto(
      to: ['recipient@example.com'], // Recipient email address
      cc: ['cc@example.com'], // CC email address
      subject: 'Greetings from RealFlutter', // Email subject
      body: 'Hello,\n\nThis is a test email from RealFlutter.', // Email body
    );

    // Attempt to launch the email client with the mailto link
    try {
      await launchUrl(Uri.parse(mailtoLink.toString()));
    } catch (e) {
      // Handle the error if the email client cannot be opened
      print('Could not launch email client: $e');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Send Email Example'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: _sendEmail, // Call the _sendEmail function when pressed
          child: Text('Send Email'),
        ),
      ),
    );
  }
}

void main() => runApp(RealFlutter());
```

// Application Flow Explanation
// 1. The `RealFlutter` class is the main entry point of the application, setting up a MaterialApp.
// 2. The `EmailSender` widget is a stateful widget that manages the email sending functionality.
// 3. The `_sendEmail` function constructs a `Mailto` object with the desired email details.
// 4. The `launchUrl` function is used to open the default email client with the constructed mailto link.
// 5. The `build` method of `_EmailSenderState` returns a Scaffold with an AppBar and a button.
// 6. When the button is pressed, the `_sendEmail` function is triggered, attempting to open the email client.

<-- END_MAIN -->
```
<-- START_DESCRIPTION -->

# Utility Flutter Package: A Comprehensive Overview
=====================================================

The "utility" Flutter package is a versatile library that provides a set of utility functions to simplify the development process. It offers a range of features that can be used to perform various tasks, such as string manipulation, date and time formatting, and platform-specific operations.

### When to Use This Package

This package is ideal for developers who want to streamline their code and avoid writing boilerplate functions. It's particularly useful when working on projects that require complex string manipulation, date and time calculations, or platform-specific functionality.

### Key Features

*   String manipulation functions (e.g., trimming, padding, and formatting)
*   Date and time formatting functions
*   Platform-specific functions (e.g., checking device type, screen size, and orientation)
*   Miscellaneous utility functions (e.g., generating random numbers, checking network connectivity)

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the Utility Flutter Package
=====================================================

### Step 1: Add the Package to Your Project

To use the utility package, you need to add it to your project's `pubspec.yaml` file. Open the file and add the following line under the `dependencies` section:

```yml
dependencies:
  flutter:
    sdk: flutter
  utility: ^1.0.0
```

Then, run `flutter pub get` in your terminal to install the package.

### Step 2: Import the Package

To use the utility functions, you need to import the package in your Dart file. Add the following line at the top of your file:

```dart
import 'package:utility/utility.dart';
```

### Step 3: Use the Utility Functions

You can now use the utility functions in your code. For example, you can use the `trim` function to remove whitespace from a string:

```dart
String myString = '   Hello, World!   ';
myString = myString.trim();
print(myString); // Output: 'Hello, World!'
```

### Platform-Specific Details

Some utility functions are platform-specific, meaning they only work on Android or iOS. For example, the `getDeviceType` function returns the device type (e.g., phone, tablet) on Android, but not on iOS.

To use platform-specific functions, you need to check the platform using the `Platform` class:

```dart
import 'package:flutter/foundation.dart' show Platform;

if (Platform.isAndroid) {
  // Use Android-specific function
} else if (Platform.isIOS) {
  // Use iOS-specific function
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:utility/utility.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Utility Package Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  String _deviceType = '';
  String _screenSize = '';
  String _orientation = '';

  @override
  void initState() {
    super.initState();
    _getDeviceType();
    _getScreenSize();
    _getOrientation();
  }

  Future<void> _getDeviceType() async {
    // Use platform-specific function to get device type
    if (Platform.isAndroid) {
      _deviceType = await Utility.getDeviceType();
    } else if (Platform.isIOS) {
      _deviceType = 'Not supported on iOS';
    }
    setState(() {});
  }

  Future<void> _getScreenSize() async {
    // Use utility function to get screen size
    _screenSize = await Utility.getScreenSize();
    setState(() {});
  }

  Future<void> _getOrientation() async {
    // Use utility function to get screen orientation
    _orientation = await Utility.getOrientation();
    setState(() {});
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Utility Package Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text('Device Type: $_deviceType'),
            Text('Screen Size: $_screenSize'),
            Text('Orientation: $_orientation'),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app, which creates a MaterialApp with a home page.
// 2. The home page is a stateful widget that initializes three variables to store the device type, screen size, and orientation.
// 3. In the initState method, the widget calls three functions to get the device type, screen size, and orientation using utility functions.
// 4. The functions use platform-specific code to get the device type on Android and iOS.
// 5. The functions use utility functions to get the screen size and orientation.
// 6. The widget builds a Scaffold with an AppBar and a body that displays the device type, screen size, and orientation.
// 7. The user can view the device information on the screen.

```

<-- END_MAIN -->
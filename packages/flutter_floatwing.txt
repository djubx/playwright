```markdown
<-- START_DESCRIPTION -->

# Flutter Floatwing Package Overview

The `flutter_floatwing` package is a powerful tool for Flutter developers looking to create floating widgets that can overlay other applications. This package is particularly useful for applications that require persistent UI elements, such as chat heads, floating action buttons, or quick access tools that remain accessible while users interact with other apps.

## When to Use Flutter Floatwing

- **Chat Applications**: Implement chat heads similar to those in Facebook Messenger.
- **Quick Access Tools**: Create floating widgets for quick access to tools or features, like calculators or note-taking apps.
- **Media Controls**: Provide persistent media controls that remain accessible while using other apps.

## Key Features

- **Cross-Platform Support**: Works seamlessly on both Android and iOS.
- **Customizable Widgets**: Allows for highly customizable floating widgets.
- **Easy Integration**: Simple API for integrating floating widgets into existing applications.
- **Performance Optimized**: Designed to be lightweight and efficient, minimizing impact on device performance.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up Flutter Floatwing

In this tutorial, we'll walk through the setup process for the `flutter_floatwing` package and demonstrate how to use it in a Flutter project.

## Installation

Add the `flutter_floatwing` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  flutter_floatwing: ^1.0.0
```

Run `flutter pub get` to install the package.

## Platform-Specific Setup

### Android

1. **Modify AndroidManifest.xml**: Add the following permissions and service declaration:

```xml
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.yourapp">

    <uses-permission android:name="android.permission.SYSTEM_ALERT_WINDOW"/>
    <uses-permission android:name="android.permission.FOREGROUND_SERVICE"/>

    <application
        android:label="yourapp"
        android:icon="@mipmap/ic_launcher">
        
        <service android:name="com.example.yourapp.FloatService"
            android:permission="android.permission.BIND_ACCESSIBILITY_SERVICE">
            <intent-filter>
                <action android:name="android.accessibilityservice.AccessibilityService" />
            </intent-filter>
        </service>
    </application>
</manifest>
```

2. **Request Permissions**: Ensure your app requests the necessary permissions at runtime.

### iOS

1. **Modify Info.plist**: Add the following keys to your `Info.plist` file:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

2. **Enable Background Modes**: Go to your Xcode project settings, select your target, and enable the "Background Modes" capability. Check "Audio, AirPlay, and Picture in Picture".

## Using the Package

To use the `flutter_floatwing` package, import it into your Dart file:

```dart
import 'package:flutter_floatwing/flutter_floatwing.dart';
```

Initialize the `RealFlutter` class and configure your floating widget:

```dart
RealFlutter floatwing = RealFlutter();
floatwing.initialize();
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_floatwing/flutter_floatwing.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Floatwing Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: HomeScreen(),
    );
  }
}

class HomeScreen extends StatefulWidget {
  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  final RealFlutter floatwing = RealFlutter();

  @override
  void initState() {
    super.initState();
    // Initialize the floating widget
    floatwing.initialize();
  }

  void _showFloatingWidget() {
    // Display the floating widget with a simple text
    floatwing.showFloatingWidget(
      child: Container(
        color: Colors.blueAccent,
        child: Center(
          child: Text(
            'Floating Widget',
            style: TextStyle(color: Colors.white, fontSize: 16),
          ),
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Floatwing Demo'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: _showFloatingWidget,
          child: Text('Show Floating Widget'),
        ),
      ),
    );
  }
}

// Application Flow:
// 1. The application starts with the `MyApp` widget, which sets up the MaterialApp.
// 2. The `HomeScreen` widget is displayed, containing a button to show the floating widget.
// 3. When the button is pressed, `_showFloatingWidget` is called.
// 4. `_showFloatingWidget` uses the `RealFlutter` instance to display a floating widget.
// 5. The floating widget is a simple container with a text label, styled with a blue background and white text.
// 6. The floating widget remains on top of other applications, providing persistent access to the user.
```

<-- END_MAIN -->
```
<-- START_DESCRIPTION -->

# Loading Elevated Button Package
The `loading_elevated_button` package is a Flutter package that provides a customizable elevated button with a loading animation. It is useful when you want to show a loading state on a button while a task is being performed, such as a network request or a database operation.

## Features
- Customizable button text and color
- Customizable loading animation color and size
- Support for both Android and iOS platforms

## When to Use
You can use this package in any situation where you want to show a loading state on a button. For example, you can use it to show a loading state while a user is logging in or while a payment is being processed.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
To use the `loading_elevated_button` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  loading_elevated_button: ^1.0.0
```
2. Run `flutter pub get` to get the package.
3. Import the package in your Dart file:
```dart
import 'package:loading_elevated_button/loading_elevated_button.dart';
```
4. Use the `LoadingElevatedButton` widget in your code:
```dart
LoadingElevatedButton(
  onPressed: () async {
    // Perform some task here
  },
  child: Text('Click me'),
)
```
## Platform-Specific Details
The package uses the `CupertinoActivityIndicator` on iOS and the `CircularProgressIndicator` on Android.

## Configurations and Optimizations
You can customize the button's appearance by using the `style` property. For example:
```dart
LoadingElevatedButton(
  style: ElevatedButton.styleFrom(
    primary: Colors.blue,
    onPrimary: Colors.white,
  ),
  onPressed: () async {
    // Perform some task here
  },
  child: Text('Click me'),
)
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:loading_elevated_button/loading_elevated_button.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Loading Elevated Button Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  bool _isLoading = false;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Loading Elevated Button Demo'),
      ),
      body: Center(
        child: LoadingElevatedButton(
          onPressed: () async {
            setState(() {
              _isLoading = true;
            });
            // Simulate some task
            await Future.delayed(Duration(seconds: 2));
            setState(() {
              _isLoading = false;
            });
          },
          child: Text('Click me'),
          isLoading: _isLoading,
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user clicks the button.
// 2. The button's onPressed callback is called.
// 3. The callback sets the _isLoading state to true.
// 4. The button's isLoading property is set to true, which displays the loading animation.
// 5. The callback simulates some task by delaying for 2 seconds.
// 6. After the task is complete, the callback sets the _isLoading state to false.
// 7. The button's isLoading property is set to false, which hides the loading animation.

// In summary, the code flows by displaying a loading animation on the button when the user clicks it, simulating some task, and then hiding the loading animation when the task is complete.
```

<-- END_MAIN -->
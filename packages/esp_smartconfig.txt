<-- START_DESCRIPTION -->

# esp_smartconfig Flutter Package
=====================================

The `esp_smartconfig` Flutter package is a utility library that allows developers to easily integrate ESP SmartConfig functionality into their Flutter applications. ESP SmartConfig is a technology developed by Espressif that enables users to configure Wi-Fi settings on ESP32/ESP8266 devices using a smartphone app.

### When to Use This Package

This package is useful when developing Flutter applications that need to interact with ESP32/ESP8266 devices, such as:

* IoT projects that require Wi-Fi configuration
* Smart home automation systems
* Industrial automation systems

### Features

The `esp_smartconfig` package provides the following features:

* ESP SmartConfig protocol implementation
* Wi-Fi configuration for ESP32/ESP8266 devices
* Support for both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
=====================

To use the `esp_smartconfig` package, follow these steps:

### Step 1: Add the Package to Your Flutter Project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  esp_smartconfig: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:esp_smartconfig/esp_smartconfig.dart';
```
### Step 3: Initialize the Package

Initialize the package by calling the `init` method:
```dart
await EspSmartconfig.init();
```
### Step 4: Configure Wi-Fi Settings

Configure Wi-Fi settings using the `configureWifi` method:
```dart
await EspSmartconfig.configureWifi(
  ssid: 'your_ssid',
  password: 'your_password',
);
```
### Platform-Specific Details

* Android: Make sure to add the following permissions to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.ACCESS_WIFI_STATE" />
<uses-permission android:name="android.permission.CHANGE_WIFI_STATE" />
```
* iOS: Make sure to add the following lines to your `Info.plist` file:
```xml
<key>NSLocationWhenInUseUsageDescription</key>
<string>This app needs access to location to configure Wi-Fi settings</string>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:esp_smartconfig/esp_smartconfig.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatefulWidget {
  @override
  _MyAppState createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  final _ssidController = TextEditingController();
  final _passwordController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('ESP SmartConfig Demo'),
        ),
        body: Padding(
          padding: const EdgeInsets.all(20.0),
          child: Column(
            children: [
              TextField(
                controller: _ssidController,
                decoration: InputDecoration(
                  labelText: 'SSID',
                  border: OutlineInputBorder(),
                ),
              ),
              SizedBox(height: 20),
              TextField(
                controller: _passwordController,
                decoration: InputDecoration(
                  labelText: 'Password',
                  border: OutlineInputBorder(),
                ),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _configureWifi,
                child: Text('Configure Wi-Fi'),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Future<void> _configureWifi() async {
    // Initialize the package
    await EspSmartconfig.init();

    // Configure Wi-Fi settings
    await EspSmartconfig.configureWifi(
      ssid: _ssidController.text,
      password: _passwordController.text,
    );

    // Show a success message
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Wi-Fi configured successfully')),
    );
  }
}

// Application flow:
// 1. The user enters the SSID and password in the text fields.
// 2. The user clicks the "Configure Wi-Fi" button.
// 3. The _configureWifi method is called, which initializes the package and configures the Wi-Fi settings.
// 4. If the configuration is successful, a success message is shown to the user.

// Summary:
// This code demonstrates how to use the esp_smartconfig package to configure Wi-Fi settings on an ESP32/ESP8266 device.
// The user enters the SSID and password, and the package initializes and configures the Wi-Fi settings.
// If the configuration is successful, a success message is shown to the user.
```

<-- END_MAIN -->
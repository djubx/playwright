```markdown
<-- START_DESCRIPTION -->

# maps_toolkit Flutter Package: An Overview

The `maps_toolkit` Flutter package is a powerful utility designed to simplify the handling of geographical data and calculations in Flutter applications. It provides a set of tools for developers to perform common geospatial operations without the need for complex third-party services or APIs. This package is particularly useful for applications that require geographical calculations, such as distance measurement, area calculations, and point-in-polygon checks.

## When to Use maps_toolkit

- **Distance Calculations**: When you need to calculate the distance between two geographical points.
- **Area Calculations**: Useful for determining the area of a polygon defined by geographical coordinates.
- **Geospatial Queries**: Such as checking if a point lies within a polygon, which is essential for location-based services.

## Key Features

- **Distance Calculation**: Compute the distance between two latitude/longitude points using the Haversine formula.
- **Area Calculation**: Calculate the area of a polygon on the Earth's surface.
- **Point-in-Polygon**: Determine if a given point is inside a specified polygon.
- **Bearing Calculation**: Find the initial bearing between two points.

The `maps_toolkit` package is lightweight and easy to integrate, making it an excellent choice for developers looking to add geospatial capabilities to their Flutter applications.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up maps_toolkit in Your Flutter Project

In this tutorial, we will walk through the process of setting up the `maps_toolkit` package in a Flutter project and demonstrate its usage with platform-specific configurations for both Android and iOS.

## Step 1: Add Dependency

First, add the `maps_toolkit` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  maps_toolkit: ^2.0.0
```

Run `flutter pub get` to install the package.

## Step 2: Platform-Specific Setup

### Android

For Android, ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```gradle
android {
    defaultConfig {
        minSdkVersion 21
    }
}
```

### iOS

For iOS, make sure your `ios/Podfile` has the platform set to at least iOS 9.0:

```ruby
platform :ios, '9.0'
```

## Step 3: Using maps_toolkit

Now that the package is installed, you can start using it in your Flutter application. Below, we will demonstrate how to perform basic geospatial calculations using the `maps_toolkit` package.

<-- END_TUTORIAL -->

<-- MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:maps_toolkit/maps_toolkit.dart';

void main() => runApp(RealFlutter());

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Maps Toolkit Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MapToolkitExample(),
    );
  }
}

class MapToolkitExample extends StatefulWidget {
  @override
  _MapToolkitExampleState createState() => _MapToolkitExampleState();
}

class _MapToolkitExampleState extends State<MapToolkitExample> {
  String _distance = '';
  String _isPointInPolygon = '';

  @override
  void initState() {
    super.initState();
    _calculateDistance();
    _checkPointInPolygon();
  }

  void _calculateDistance() {
    // Define two geographical points
    final point1 = LatLng(37.7749, -122.4194); // San Francisco
    final point2 = LatLng(34.0522, -118.2437); // Los Angeles

    // Calculate the distance between the two points
    final distance = SphericalUtil.computeDistanceBetween(point1, point2);

    // Update the state with the calculated distance
    setState(() {
      _distance = 'Distance: ${distance.toStringAsFixed(2)} meters';
    });
  }

  void _checkPointInPolygon() {
    // Define a polygon using a list of LatLng points
    final polygon = [
      LatLng(37.7749, -122.4194),
      LatLng(37.8044, -122.2711),
      LatLng(37.6879, -122.4702),
    ];

    // Define a point to check
    final point = LatLng(37.7749, -122.4194);

    // Check if the point is inside the polygon
    final isInside = PolygonUtil.containsLocation(point, polygon, true);

    // Update the state with the result
    setState(() {
      _isPointInPolygon = isInside ? 'Point is inside the polygon' : 'Point is outside the polygon';
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Maps Toolkit Example'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: <Widget>[
            Text(_distance, style: TextStyle(fontSize: 18)),
            SizedBox(height: 20),
            Text(_isPointInPolygon, style: TextStyle(fontSize: 18)),
          ],
        ),
      ),
    );
  }
}
```

// The application starts by running the `RealFlutter` class, which is a StatelessWidget.
// It sets up a MaterialApp with a home screen of `MapToolkitExample`.
// The `MapToolkitExample` is a StatefulWidget that performs geospatial calculations.
// In the `initState` method, it calculates the distance between two points and checks if a point is inside a polygon.
// The results are displayed on the screen using a simple UI with two Text widgets.
// The `_calculateDistance` method uses `SphericalUtil.computeDistanceBetween` to find the distance between San Francisco and Los Angeles.
// The `_checkPointInPolygon` method uses `PolygonUtil.containsLocation` to determine if a point is within a defined polygon.

<-- END_MAIN -->
```
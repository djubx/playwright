```markdown
<!-- START_DESCRIPTION -->
# Pendo SDK Flutter Package

The **pendo_sdk** Flutter package is designed to integrate Pendo's analytics and user feedback capabilities into Flutter applications. Pendo provides insights into user behavior, feature usage, and allows for in-app messaging, making it a powerful tool for product teams looking to enhance user engagement and improve their applications based on real user data.

## When to Use This Package
- **User Analytics**: When you want to track user interactions and behaviors within your app.
- **In-App Messaging**: To deliver contextual messages or guides to users based on their actions.
- **Feedback Collection**: To gather user feedback directly within the app, helping to inform product decisions.

## Features
- **User Tracking**: Monitor user actions and events to gain insights into app usage.
- **In-App Guides**: Create and display onboarding guides or tooltips to help users navigate your app.
- **Feedback Mechanisms**: Collect user feedback through surveys or polls integrated into the app.
- **Custom Events**: Log custom events to track specific user interactions that matter to your business.

Overall, the **pendo_sdk** package is a comprehensive solution for developers looking to leverage user data to enhance their applications.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Pendo SDK

## Installation
To add the **pendo_sdk** package to your Flutter project, include it in your `pubspec.yaml` file:

```yaml
dependencies:
  pendo_sdk: ^latest_version
```

Make sure to replace `latest_version` with the most recent version available on [pub.dev](https://pub.dev/packages/pendo_sdk).

## Platform-Specific Setup

### Android
1. Open your `android/app/build.gradle` file and ensure you have the following configurations:
   ```groovy
   android {
       ...
       defaultConfig {
           ...
           minSdkVersion 21 // Ensure this is set to at least 21
       }
   }
   ```

2. Add the necessary permissions in your `AndroidManifest.xml`:
   ```xml
   <uses-permission android:name="android.permission.INTERNET"/>
   ```

### iOS
1. Open your `ios/Runner/Info.plist` and add the following:
   ```xml
   <key>NSAppTransportSecurity</key>
   <dict>
       <key>NSAllowsArbitraryLoads</key>
       <true/>
   </dict>
   ```

2. Ensure you have the correct deployment target set in your `ios/Podfile`:
   ```ruby
   platform :ios, '10.0'
   ```

## Initialization
To initialize the Pendo SDK, you will need your Pendo API key. This is typically done in the `main.dart` file of your Flutter application.

```dart
import 'package:flutter/material.dart';
import 'package:pendo_sdk/pendo_sdk.dart';

void main() {
  // Initialize Pendo SDK with your API key
  PendoSDK.initialize('YOUR_API_KEY');
  runApp(MyApp());
}
```

## Usage
Once initialized, you can start tracking user events and displaying in-app messages. Hereâ€™s a simple example of how to track a user event:

```dart
PendoSDK.trackEvent('User Signed In', {'userId': '12345'});
```

You can also display an in-app guide:

```dart
PendoSDK.showGuide('guideId');
```

This setup allows you to leverage Pendo's powerful features to enhance user engagement and gather valuable insights.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using Pendo SDK in Flutter

```dart
import 'package:flutter/material.dart';
import 'package:pendo_sdk/pendo_sdk.dart';

void main() {
  // Initialize Pendo SDK with your API key
  PendoSDK.initialize('YOUR_API_KEY');
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Pendo SDK Example',
      home: HomeScreen(),
    );
  }
}

class HomeScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Pendo SDK Example'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Track a user event when the button is pressed
            PendoSDK.trackEvent('Button Pressed', {'buttonId': 'exampleButton'});
            // Show an in-app guide
            PendoSDK.showGuide('exampleGuideId');
          },
          child: Text('Press Me'),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function initializes the Pendo SDK with the provided API key.
// 2. The RealFlutter widget is the root of the application, setting up the MaterialApp.
// 3. The HomeScreen widget displays a simple UI with a button.
// 4. When the button is pressed, an event is tracked using PendoSDK.trackEvent.
// 5. An in-app guide is displayed using PendoSDK.showGuide, providing users with contextual help.
```
<!-- END_MAIN -->
```

### Summary
In this blog post, we explored the **pendo_sdk** Flutter package, detailing its features, installation process, and usage. We provided a complete example of a Flutter application that integrates Pendo's analytics and user feedback capabilities. The application tracks user events and displays in-app guides, demonstrating how to effectively utilize the package to enhance user engagement and gather insights.
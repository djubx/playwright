<-- START_DESCRIPTION -->

# Location Plus Flutter Package
================================

The `location_plus` Flutter package is a powerful tool for handling location-based services in your Flutter applications. It provides a simple and efficient way to access device location, handle location permissions, and even simulate locations for testing purposes.

## When to Use
--------------

You should use the `location_plus` package when:

* You need to access the device's current location
* You need to handle location permissions
* You want to simulate locations for testing purposes

## Features
------------

* Access device location
* Handle location permissions
* Simulate locations for testing purposes
* Supports both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Location Plus Package
--------------------------------------

To use the `location_plus` package, you need to add it to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  location_plus: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Platform-Specific Configurations
------------------------------------

### Android

To use the `location_plus` package on Android, you need to add the following permissions to your `AndroidManifest.xml` file:

```xml
<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
<uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
```

### iOS

To use the `location_plus` package on iOS, you need to add the following lines to your `Info.plist` file:

```xml
<key>NSLocationWhenInUseUsageDescription</key>
<string>This app needs access to location to work properly</string>
<key>NSLocationAlwaysAndWhenInUseUsageDescription</key>
<string>This app needs access to location to work properly</string>
```

## Using the Package
--------------------

To use the `location_plus` package, you need to import it in your Dart file:

```dart
import 'package:location_plus/location_plus.dart';
```

Then, you can use the `LocationPlus` class to access device location:

```dart
LocationPlus locationPlus = LocationPlus();

locationPlus.getCurrentLocation().then((location) {
  print(location.latitude);
  print(location.longitude);
});
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:location_plus/location_plus.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Location Plus Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  LocationPlus _locationPlus;
  Location _currentLocation;

  @override
  void initState() {
    super.initState();
    _locationPlus = LocationPlus();
    _getCurrentLocation();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Location Plus Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Current Location:',
              style: TextStyle(fontSize: 24),
            ),
            Text(
              _currentLocation != null
                  ? '${_currentLocation.latitude}, ${_currentLocation.longitude}'
                  : 'Unknown',
              style: TextStyle(fontSize: 24),
            ),
          ],
        ),
      ),
    );
  }

  _getCurrentLocation() async {
    // Get the current location
    Location location = await _locationPlus.getCurrentLocation();

    // Update the UI with the current location
    setState(() {
      _currentLocation = location;
    });
  }
}

// The application flow is as follows:
// 1. The user opens the app and the `MyHomePage` widget is displayed.
// 2. The `MyHomePage` widget initializes the `LocationPlus` object and calls the `_getCurrentLocation` method to get the current location.
// 3. The `_getCurrentLocation` method uses the `LocationPlus` object to get the current location and updates the UI with the current location.
// 4. The user can see the current location displayed on the screen.
```

<-- END_MAIN -->
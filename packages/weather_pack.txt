<-- START_DESCRIPTION -->

# Weather Pack Flutter Package
The `weather_pack` Flutter package is a powerful and easy-to-use library for fetching and displaying weather data in your Flutter applications. It provides a simple and intuitive API for retrieving current weather conditions, forecasts, and weather alerts.

## Features

*   Fetch current weather conditions, including temperature, humidity, wind speed, and more
*   Retrieve forecasts for the next 5-10 days, including high and low temperatures, precipitation, and weather conditions
*   Get weather alerts for severe weather events, such as thunderstorms, heavy rain, or snow
*   Support for both metric and imperial units
*   Customizable weather icons and animations

## When to Use

The `weather_pack` package is perfect for any Flutter application that requires weather data, such as:

*   Weather apps
*   Travel apps
*   Outdoor activity apps
*   News apps

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Weather Pack Package

To use the `weather_pack` package, follow these steps:

1.  Add the package to your `pubspec.yaml` file:

    ```yml
dependencies:
  flutter:
    sdk: flutter
  weather_pack: ^1.0.0
```

2.  Run `flutter pub get` to install the package.

3.  Import the package in your Dart file:

    ```dart
import 'package:weather_pack/weather_pack.dart';
```

## Platform-Specific Details

### Android

*   Add the following permissions to your `AndroidManifest.xml` file:

    ```xml
<uses-permission android:name="android.permission.INTERNET" />
```

### iOS

*   Add the following lines to your `Info.plist` file:

    ```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```

## Required Configurations

*   Create a `WeatherPack` instance with your API key:

    ```dart
WeatherPack weatherPack = WeatherPack(apiKey: 'YOUR_API_KEY');
```

## Optimizations

*   Use the `cache` option to cache weather data for a specified amount of time:

    ```dart
weatherPack.getCurrentWeather(cache: Duration(hours: 1));
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:weather_pack/weather_pack.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  WeatherPack _weatherPack;
  WeatherData _currentWeather;

  @override
  void initState() {
    super.initState();
    _weatherPack = WeatherPack(apiKey: 'YOUR_API_KEY');
    _loadCurrentWeather();
  }

  Future<void> _loadCurrentWeather() async {
    // Load current weather data
    final weatherData = await _weatherPack.getCurrentWeather();
    setState(() {
      _currentWeather = weatherData;
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Weather App',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Weather App'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              // Display current weather temperature
              Text(
                _currentWeather != null
                    ? '${_currentWeather.temperature}Â°C'
                    : 'Loading...',
                style: TextStyle(fontSize: 48),
              ),
              // Display current weather condition
              Text(
                _currentWeather != null
                    ? _currentWeather.condition
                    : 'Loading...',
                style: TextStyle(fontSize: 24),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app.
// 2. The app loads the current weather data using the WeatherPack API.
// 3. The app displays the current weather temperature and condition.
// 4. The user can refresh the app to load new weather data.
```

// In summary, the code flows as follows:
// The RealFlutter class is initialized with a WeatherPack instance.
// The initState method is called, which loads the current weather data.
// The build method is called, which displays the current weather temperature and condition.
// The user can refresh the app to load new weather data.

<-- END_MAIN -->
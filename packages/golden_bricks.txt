<-- START_DESCRIPTION -->

# Golden Bricks Flutter Package
================================

The `golden_bricks` Flutter package is a powerful tool for creating visually appealing and customizable brick layouts. It provides a simple and intuitive API for building complex brick designs, making it perfect for a wide range of applications, from games to educational tools.

## Features

* Customizable brick sizes and shapes
* Support for multiple brick types and colors
* Easy-to-use API for building complex brick layouts
* Compatible with both Android and iOS platforms

## When to Use

The `golden_bricks` package is ideal for any application that requires a customizable and visually appealing brick layout. Some examples include:

* Games, such as Tetris or Breakout
* Educational tools, such as math or science puzzles
* Creative apps, such as art or design tools

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Golden Bricks Package
=====================================

To use the `golden_bricks` package in your Flutter app, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  golden_bricks: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:golden_bricks/golden_bricks.dart';
```
### Step 3: Create a Brick Layout

Create a brick layout using the `GoldenBricks` widget:
```dart
GoldenBricks(
  brickSize: 50,
  brickColor: Colors.red,
  brickLayout: [
    [1, 1, 1],
    [1, 0, 1],
    [1, 1, 1],
  ],
)
```
This will create a 3x3 brick layout with red bricks.

### Platform-Specific Details

* For Android, make sure to add the following line to your `AndroidManifest.xml` file:
```xml
<uses-feature android:name="android.hardware.accelerometer" android:required="true" />
```
* For iOS, make sure to add the following line to your `Info.plist` file:
```xml
<key>UIRequiredDeviceCapabilities</key>
<array>
  <string>accelerometer</string>
</array>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:golden_bricks/golden_bricks.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Golden Bricks Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  int _brickSize = 50;
  Color _brickColor = Colors.red;
  List<List<int>> _brickLayout = [
    [1, 1, 1],
    [1, 0, 1],
    [1, 1, 1],
  ];

  void _updateBrickSize(int size) {
    setState(() {
      _brickSize = size;
    });
  }

  void _updateBrickColor(Color color) {
    setState(() {
      _brickColor = color;
    });
  }

  void _updateBrickLayout(List<List<int>> layout) {
    setState(() {
      _brickLayout = layout;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Golden Bricks Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            GoldenBricks(
              brickSize: _brickSize,
              brickColor: _brickColor,
              brickLayout: _brickLayout,
            ),
            SizedBox(height: 20),
            Slider(
              value: _brickSize.toDouble(),
              min: 10,
              max: 100,
              divisions: 10,
              label: _brickSize.toString(),
              onChanged: (value) {
                _updateBrickSize(value.round());
              },
            ),
            SizedBox(height: 20),
            ColorPicker(
              color: _brickColor,
              onColorChanged: (color) {
                _updateBrickColor(color);
              },
            ),
            SizedBox(height: 20),
            BrickLayoutPicker(
              layout: _brickLayout,
              onLayoutChanged: (layout) {
                _updateBrickLayout(layout);
              },
            ),
          ],
        ),
      ),
    );
  }
}

// The app starts by creating a Material app with a home page.
// The home page is a stateful widget that contains a column of widgets.
// The first widget is a GoldenBricks widget that displays the brick layout.
// The second widget is a slider that allows the user to adjust the brick size.
// The third widget is a color picker that allows the user to change the brick color.
// The fourth widget is a brick layout picker that allows the user to change the brick layout.
// When the user interacts with any of these widgets, the state of the home page is updated.
// The GoldenBricks widget is rebuilt with the new state, which causes it to display the updated brick layout.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# nhost_flutter_auth Package Overview
=====================================

The `nhost_flutter_auth` package provides an easy-to-use authentication solution for Flutter applications. It allows developers to quickly integrate authentication into their apps, supporting multiple authentication providers such as Google, Facebook, and more.

### When to Use This Package

This package is ideal for Flutter applications that require user authentication, especially those that need to support multiple authentication providers.

### Features

*   Supports multiple authentication providers (e.g., Google, Facebook)
*   Easy-to-use API for authenticating users
*   Handles authentication flows, including redirects and token exchanges

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up nhost_flutter_auth
=============================

To use the `nhost_flutter_auth` package, follow these steps:

### Step 1: Add the Package to Your Project

Add the `nhost_flutter_auth` package to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  nhost_flutter_auth: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Configure the Package

Configure the package by creating an instance of the `NhostClient` class:

```dart
import 'package:nhost_flutter_auth/nhost_flutter_auth.dart';

void main() {
  final nhostClient = NhostClient(
    backendUrl: 'https://your-nhost-backend.com',
    clientSecret: 'your-client-secret',
  );
  runApp(MyApp(nhostClient: nhostClient));
}
```

### Step 3: Authenticate Users

Use the `NhostClient` instance to authenticate users:

```dart
class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final nhostClient = NhostClient(
    backendUrl: 'https://your-nhost-backend.com',
    clientSecret: 'your-client-secret',
  );

  Future<void> _login() async {
    final user = await nhostClient.auth.login(
      email: 'user@example.com',
      password: 'password',
    );
    print(user);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('RealFlutter'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: _login,
          child: Text('Login'),
        ),
      ),
    );
  }
}
```

### Platform-Specific Details

For Android, add the following configuration to your `AndroidManifest.xml` file:

```xml
<activity
  android:name="com.nhost.nhostflutterauth.NhostFlutterAuthActivity"
  android:exported="true" />
```

For iOS, add the following configuration to your `Info.plist` file:

```xml
<key>CFBundleURLTypes</key>
<array>
  <dict>
    <key>CFBundleURLSchemes</key>
    <array>
      <string>your-nhost-backend-scheme</string>
    </array>
  </dict>
</array>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:nhost_flutter_auth/nhost_flutter_auth.dart';

void main() {
  final nhostClient = NhostClient(
    backendUrl: 'https://your-nhost-backend.com',
    clientSecret: 'your-client-secret',
  );
  runApp(MyApp(nhostClient: nhostClient));
}

class MyApp extends StatelessWidget {
  final NhostClient nhostClient;

  MyApp({required this.nhostClient});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'RealFlutter',
      home: RealFlutter(nhostClient: nhostClient),
    );
  }
}

class RealFlutter extends StatefulWidget {
  final NhostClient nhostClient;

  RealFlutter({required this.nhostClient});

  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Step 1: Create a login function
  Future<void> _login() async {
    // Step 2: Call the login function from the NhostClient instance
    final user = await widget.nhostClient.auth.login(
      email: 'user@example.com',
      password: 'password',
    );
    // Step 3: Print the user object
    print(user);
  }

  // Step 4: Create a logout function
  Future<void> _logout() async {
    // Step 5: Call the logout function from the NhostClient instance
    await widget.nhostClient.auth.logout();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('RealFlutter'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            // Step 6: Create a login button
            ElevatedButton(
              onPressed: _login,
              child: Text('Login'),
            ),
            // Step 7: Create a logout button
            ElevatedButton(
              onPressed: _logout,
              child: Text('Logout'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and is presented with a login button.
// 2. When the user clicks the login button, the _login function is called.
// 3. The _login function calls the login function from the NhostClient instance, passing in the user's email and password.
// 4. The NhostClient instance handles the login request and returns a user object.
// 5. The user object is printed to the console.
// 6. The user is now logged in and can access protected routes.
// 7. When the user clicks the logout button, the _logout function is called.
// 8. The _logout function calls the logout function from the NhostClient instance.
// 9. The NhostClient instance handles the logout request and removes the user's session.
// 10. The user is now logged out and can no longer access protected routes.

```

<-- END_MAIN -->
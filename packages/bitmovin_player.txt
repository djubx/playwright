<-- START_DESCRIPTION -->

Bitmovin Player Flutter Package
==============================

The Bitmovin Player Flutter package is a powerful video player library that allows developers to easily integrate high-quality video playback into their Flutter applications. This package provides a flexible and customizable player that supports a wide range of video formats, including HLS, DASH, and progressive MP4.

When to Use This Package
------------------------

The Bitmovin Player Flutter package is ideal for applications that require high-quality video playback, such as:

* Video streaming services
* Online education platforms
* Entertainment apps
* Advertising and marketing apps

Features
--------

The Bitmovin Player Flutter package offers a range of features, including:

* Support for HLS, DASH, and progressive MP4 video formats
* Customizable player UI
* Support for subtitles and closed captions
* Support for multiple audio tracks
* Support for Chromecast and AirPlay
* Analytics and tracking capabilities

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Configuration
-----------------------

To use the Bitmovin Player Flutter package, follow these steps:

### Step 1: Add the Package to Your Project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  bitmovin_player: ^2.4.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:bitmovin_player/bitmovin_player.dart';
```
### Step 3: Create a Player Instance

Create a new instance of the `BitmovinPlayer` class:
```dart
BitmovinPlayer _player = BitmovinPlayer();
```
### Step 4: Configure the Player

Configure the player with your video content:
```dart
_player.configure(
  BitmovinPlayerConfiguration(
    source: BitmovinSource(
      url: 'https://example.com/video.m3u8',
      type: BitmovinSourceType.hls,
    ),
  ),
);
```
### Step 5: Add the Player to Your UI

Add the player to your UI using the `BitmovinPlayerWidget`:
```dart
BitmovinPlayerWidget(
  player: _player,
)
```
Platform-Specific Details
-------------------------

### Android

To use the Bitmovin Player Flutter package on Android, you need to add the following lines to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.INTERNET" />
<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
```
### iOS

To use the Bitmovin Player Flutter package on iOS, you need to add the following lines to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:bitmovin_player/bitmovin_player.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Bitmovin Player Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  BitmovinPlayer _player;

  @override
  void initState() {
    super.initState();
    _player = BitmovinPlayer();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Bitmovin Player Demo'),
      ),
      body: Center(
        child: BitmovinPlayerWidget(
          player: _player,
        ),
      ),
    );
  }

  @override
  void dispose() {
    _player.dispose();
    super.dispose();
  }
}

// Application flow:
// 1. The app starts and creates a new instance of the `MyApp` widget.
// 2. The `MyApp` widget builds the app's UI, including the `MyHomePage` widget.
// 3. The `MyHomePage` widget creates a new instance of the `BitmovinPlayer` class.
// 4. The `BitmovinPlayer` instance is configured with a video source.
// 5. The `BitmovinPlayerWidget` is used to display the player in the app's UI.
// 6. When the app is closed, the `BitmovinPlayer` instance is disposed of.
```

// Final summary:
// The code creates a new instance of the `BitmovinPlayer` class and configures it with a video source.
// The player is then displayed in the app's UI using the `BitmovinPlayerWidget`.
// When the app is closed, the player instance is disposed of.

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Introduction to the "dnd" Flutter Package
=============================================

The "dnd" Flutter package is a powerful tool for creating drag-and-drop interfaces in Flutter applications. It provides a simple and intuitive way to create draggable elements and drop zones, making it easy to implement complex drag-and-drop interactions.

## When to Use the "dnd" Package
------------------------------

The "dnd" package is perfect for applications that require drag-and-drop interactions, such as:

* File management systems
* Image editing apps
* Puzzle games
* Educational apps

## Features of the "dnd" Package
------------------------------

* Support for draggable elements and drop zones
* Customizable drag-and-drop animations
* Support for multiple drag-and-drop interactions
* Platform-specific optimizations for Android and iOS

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the "dnd" Package
=============================

To use the "dnd" package in your Flutter application, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  dnd: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:dnd/dnd.dart';
```
### Step 3: Create a Draggable Element

Create a draggable element using the `Draggable` widget:
```dart
Draggable(
  child: Container(
    width: 100,
    height: 100,
    color: Colors.red,
  ),
  feedback: Container(
    width: 100,
    height: 100,
    color: Colors.blue,
  ),
)
```
### Step 4: Create a Drop Zone

Create a drop zone using the `DropZone` widget:
```dart
DropZone(
  onDrop: (item) {
    print('Item dropped!');
  },
  child: Container(
    width: 200,
    height: 200,
    color: Colors.green,
  ),
)
```
### Platform-Specific Optimizations

For Android, add the following line to your `AndroidManifest.xml` file:
```xml
<application
  ...
  android:hardwareAccelerated="true"
  ...
>
```
For iOS, add the following line to your `Info.plist` file:
```xml
<key>UIViewEdgeAntialiasing</key>
<true/>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:dnd/dnd.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Drag-and-Drop Demo',
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    // Create a draggable element
    Draggable draggable = Draggable(
      child: Container(
        width: 100,
        height: 100,
        color: Colors.red,
      ),
      feedback: Container(
        width: 100,
        height: 100,
        color: Colors.blue,
      ),
    );

    // Create a drop zone
    DropZone dropZone = DropZone(
      onDrop: (item) {
        print('Item dropped!');
      },
      child: Container(
        width: 200,
        height: 200,
        color: Colors.green,
      ),
    );

    // Create a column with the draggable element and drop zone
    Column column = Column(
      children: <Widget>[
        draggable,
        SizedBox(height: 20),
        dropZone,
      ],
    );

    // Return the column
    return Scaffold(
      appBar: AppBar(
        title: Text('Drag-and-Drop Demo'),
      ),
      body: Center(
        child: column,
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app and sees a red square (the draggable element) and a green square (the drop zone).
// 2. The user touches the red square and starts dragging it.
// 3. As the user drags the red square, a blue square (the feedback) appears and follows the user's finger.
// 4. The user drops the red square over the green square.
// 5. The onDrop callback is called and prints 'Item dropped!' to the console.
// 6. The blue square disappears and the red square returns to its original position.
```

<-- END_MAIN -->
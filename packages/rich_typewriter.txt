<-- START_DESCRIPTION -->

Rich Typewriter Flutter Package
==============================

The `rich_typewriter` Flutter package is a powerful tool for creating text-based user interfaces. It provides a simple and efficient way to display and edit text, with features such as text formatting, cursor management, and keyboard handling.

When to Use
------------

The `rich_typewriter` package is ideal for applications that require a high degree of text customization, such as:

* Text editors
* Chat applications
* Note-taking apps
* Document viewers

Features
--------

* Text formatting (bold, italic, underline, etc.)
* Cursor management (position, size, color, etc.)
* Keyboard handling (input, navigation, etc.)
* Customizable text styles and fonts
* Support for emojis and special characters

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
---------------

To use the `rich_typewriter` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  rich_typewriter: ^1.0.0
```
2. Import the package in your Dart file:
```dart
import 'package:rich_typewriter/rich_typewriter.dart';
```
3. Create a `RichTypewriter` widget:
```dart
RichTypewriter(
  text: 'Hello, World!',
  style: TextStyle(fontSize: 24),
)
```
Platform-Specific Details
-------------------------

### Android

* To use the `rich_typewriter` package on Android, you need to add the following line to your `AndroidManifest.xml` file:
```xml
<application
  ...
  android:hardwareAccelerated="true"
  ...
>
```
* To handle keyboard input, you need to add a `KeyListener` to your `RichTypewriter` widget:
```dart
RichTypewriter(
  text: 'Hello, World!',
  style: TextStyle(fontSize: 24),
  keyListener: (KeyEvent event) {
    // Handle keyboard input here
  },
)
```
### iOS

* To use the `rich_typewriter` package on iOS, you need to add the following line to your `Info.plist` file:
```xml
<key>UIRequiresFullScreen</key>
<true/>
```
* To handle keyboard input, you need to add a `KeyListener` to your `RichTypewriter` widget:
```dart
RichTypewriter(
  text: 'Hello, World!',
  style: TextStyle(fontSize: 24),
  keyListener: (KeyEvent event) {
    // Handle keyboard input here
  },
)
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:rich_typewriter/rich_typewriter.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  String _text = 'Hello, World!';
  TextStyle _style = TextStyle(fontSize: 24);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Rich Typewriter Example'),
        ),
        body: Center(
          child: RichTypewriter(
            text: _text,
            style: _style,
            keyListener: (KeyEvent event) {
              // Handle keyboard input here
              if (event.isKeyPressed(LogicalKeyboardKey.enter)) {
                setState(() {
                  _text += '\n';
                });
              }
            },
          ),
        ),
        floatingActionButton: FloatingActionButton(
          onPressed: () {
            setState(() {
              _style = TextStyle(fontSize: 36, fontWeight: FontWeight.bold);
            });
          },
          tooltip: 'Change text style',
          child: Icon(Icons.format_bold),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app and sees the initial text "Hello, World!".
// 2. The user can type text using the keyboard, and the text will be displayed in the RichTypewriter widget.
// 3. When the user presses the Enter key, a new line will be added to the text.
// 4. The user can press the floating action button to change the text style to bold and larger font size.
// 5. The text style will be updated in real-time as the user types.

// The RichTypewriter widget is used to display and edit the text, and the TextStyle widget is used to define the text style.
// The keyListener property is used to handle keyboard input, and the setState method is used to update the text and text style in real-time.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

**Build Version Flutter Package**
================================

The `build_version` Flutter package is a useful tool for managing and displaying the version number of your Flutter app. It provides a simple way to access the app's version number, build number, and package name.

**When to Use This Package**
---------------------------

You should use this package when you need to display the version number of your app, such as in an about page or settings screen. It's also useful for tracking changes to your app and debugging issues.

**Features**
------------

* Access to the app's version number, build number, and package name
* Support for both Android and iOS platforms
* Easy to use and integrate into your Flutter app

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setup and Usage**
-------------------

To use the `build_version` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  build_version: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:build_version/build_version.dart';
```
### Step 3: Use the Package

You can now use the package to access the app's version number, build number, and package name:
```dart
String version = await BuildVersion.version;
String buildNumber = await BuildVersion.buildNumber;
String packageName = await BuildVersion.packageName;
```
### Platform-Specific Details

* Android: The package uses the `android.os.Build` class to access the version number and build number.
* iOS: The package uses the `NSBundle` class to access the version number and build number.

### Configurations and Optimizations

* Make sure to handle any errors that may occur when accessing the version number or build number.
* You can cache the version number and build number to improve performance.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:build_version/build_version.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Build Version Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  String _version = '';
  String _buildNumber = '';
  String _packageName = '';

  @override
  void initState() {
    super.initState();
    _initVersion();
  }

  Future<void> _initVersion() async {
    // Get the version number, build number, and package name
    String version = await BuildVersion.version;
    String buildNumber = await BuildVersion.buildNumber;
    String packageName = await BuildVersion.packageName;

    // Update the UI with the version information
    setState(() {
      _version = version;
      _buildNumber = buildNumber;
      _packageName = packageName;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Build Version Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text('Version: $_version'),
            Text('Build Number: $_buildNumber'),
            Text('Package Name: $_packageName'),
          ],
        ),
      ),
    );
  }
}

// Application flow:
// 1. The app starts and runs the `main` function.
// 2. The `main` function creates a `MaterialApp` instance and sets the `MyHomePage` widget as the home page.
// 3. The `MyHomePage` widget is a stateful widget that displays the version information.
// 4. In the `initState` method, the `_initVersion` function is called to get the version number, build number, and package name.
// 5. The `_initVersion` function uses the `BuildVersion` package to get the version information and updates the UI with the version information.
// 6. The version information is displayed on the screen.
```

<-- END_MAIN -->

In summary, the code flows as follows: the app starts, gets the version information using the `BuildVersion` package, and displays the version information on the screen. The version information is updated in the UI using the `setState` method.
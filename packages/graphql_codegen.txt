```markdown
<-- START_DESCRIPTION -->

# GraphQL Codegen Flutter Package: An Overview

The `graphql_codegen` Flutter package is a powerful tool designed to streamline the integration of GraphQL APIs into Flutter applications. It automates the generation of type-safe code from GraphQL queries, mutations, and subscriptions, allowing developers to focus on building features rather than managing API interactions manually.

## When to Use `graphql_codegen`

- **Type Safety**: If your project requires strong type safety and you want to minimize runtime errors, `graphql_codegen` is an excellent choice. It generates Dart classes that correspond to your GraphQL schema, ensuring that your code adheres to the expected data structures.
- **Complex GraphQL Operations**: For applications with complex GraphQL operations, this package simplifies the process by generating boilerplate code, reducing the need for repetitive manual coding.
- **Rapid Development**: By automating the code generation process, developers can quickly iterate on their applications, making it ideal for projects with tight deadlines.

## Features

- **Automatic Code Generation**: Generates Dart classes for queries, mutations, and subscriptions.
- **Schema Validation**: Ensures that your GraphQL operations are valid against the schema.
- **Customizable**: Offers configuration options to tailor the generated code to your needs.
- **Integration with Build Systems**: Works seamlessly with Flutter's build system to automatically generate code during the build process.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using `graphql_codegen` in Flutter

In this tutorial, we'll walk through the setup and usage of the `graphql_codegen` package in a Flutter project. We'll cover platform-specific details for both Android and iOS, and provide necessary configurations.

## Setup Process

1. **Add Dependencies**

   First, add the `graphql_codegen` package to your `pubspec.yaml` file:

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     graphql_flutter: ^5.0.0
     graphql_codegen: ^1.0.0

   dev_dependencies:
     build_runner: ^2.1.0
     graphql_codegen_builder: ^1.0.0
   ```

2. **Configure Code Generation**

   Create a `build.yaml` file in the root of your project to configure the code generation:

   ```yaml
   targets:
     $default:
       builders:
         graphql_codegen_builder|graphql_codegen_builder:
           options:
             schema: lib/schema.graphql
             output: lib/graphql_api.dart
   ```

3. **Prepare GraphQL Schema**

   Ensure you have your GraphQL schema file (`schema.graphql`) in the `lib` directory. This file should contain the complete schema of your GraphQL API.

4. **Run Code Generation**

   Use the following command to generate the code:

   ```bash
   flutter pub run build_runner build
   ```

   This command will generate Dart classes based on your GraphQL schema and operations.

## Platform-Specific Details

### Android

- Ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21 to support the necessary network operations.

### iOS

- Make sure your `ios/Podfile` has platform set to at least iOS 11.0:

  ```ruby
  platform :ios, '11.0'
  ```

## Optimizations

- **Network Caching**: Use `graphql_flutter`'s caching mechanisms to improve performance and reduce network calls.
- **Error Handling**: Implement robust error handling to manage GraphQL errors effectively.

<-- END_TUTORIAL -->

<-- START_MAIN -->

# Complete Example: Flutter Main File with `graphql_codegen`

Below is a complete example of a Flutter application using the `graphql_codegen` package. This example demonstrates how to perform a simple query and display the results.

```dart
import 'package:flutter/material.dart';
import 'package:graphql_flutter/graphql_flutter.dart';
import 'graphql_api.dart'; // Import the generated code

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'GraphQL Codegen Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatelessWidget {
  // Initialize GraphQL client
  final HttpLink httpLink = HttpLink('https://api.example.com/graphql');

  @override
  Widget build(BuildContext context) {
    // Create a GraphQL client
    final ValueNotifier<GraphQLClient> client = ValueNotifier(
      GraphQLClient(
        link: httpLink,
        cache: GraphQLCache(store: InMemoryStore()),
      ),
    );

    return GraphQLProvider(
      client: client,
      child: Scaffold(
        appBar: AppBar(
          title: Text('GraphQL Codegen Example'),
        ),
        body: Query(
          options: QueryOptions(
            document: gql(GetItemsQuery().document), // Use generated query
          ),
          builder: (QueryResult result, {VoidCallback? refetch, FetchMore? fetchMore}) {
            if (result.hasException) {
              return Text('Error: ${result.exception.toString()}');
            }

            if (result.isLoading) {
              return Center(child: CircularProgressIndicator());
            }

            // Parse the result using generated data classes
            final items = GetItems$Query.fromJson(result.data!).items;

            return ListView.builder(
              itemCount: items.length,
              itemBuilder: (context, index) {
                final item = items[index];
                return ListTile(
                  title: Text(item.name),
                  subtitle: Text(item.description),
                );
              },
            );
          },
        ),
      ),
    );
  }
}
```

// The above code sets up a basic Flutter application that uses the `graphql_codegen` package to perform a GraphQL query.
// 1. **Main Function**: Initializes the app and sets `MyApp` as the root widget.
// 2. **MyApp Class**: Defines the MaterialApp and sets `RealFlutter` as the home widget.
// 3. **RealFlutter Class**: 
//    - Initializes a GraphQL client using an HTTP link to the GraphQL API.
//    - Uses `GraphQLProvider` to provide the client to the widget tree.
//    - Executes a query using the `Query` widget and displays the results in a list.
// 4. **Query Execution**: 
//    - Uses the generated `GetItemsQuery` class to perform the query.
//    - Handles loading and error states appropriately.
//    - Parses the query result using the generated data classes and displays each item in a `ListTile`.

// **Application Flow Summary**:
// - The application starts by initializing the `MyApp` widget, which sets up the MaterialApp.
// - `RealFlutter` is the main screen, where a GraphQL client is configured and provided to the widget tree.
// - A query is executed using the `Query` widget, leveraging the generated code for type safety and easy data handling.
// - The results are displayed in a list, with each item rendered as a `ListTile` showing the item's name and description.

<-- END_MAIN -->
```
```markdown
<!-- START_DESCRIPTION -->
# Launch_at_startup Flutter Package

The `launch_at_startup` Flutter package is a powerful tool that allows developers to configure their Flutter applications to launch automatically when the device starts. This feature is particularly useful for applications that need to run background tasks, provide notifications, or maintain a persistent presence on the user's device.

## When to Use This Package

You might consider using the `launch_at_startup` package in scenarios such as:
- **Background Services**: Applications that need to perform tasks in the background, like fetching updates or syncing data.
- **Notification Apps**: Apps that send notifications to users and need to be active to ensure timely delivery.
- **Utility Apps**: Tools that provide essential services, such as alarms or reminders, that should be available immediately after device startup.

## Features

- **Cross-Platform Support**: Works seamlessly on both Android and iOS.
- **Simple API**: Easy to integrate with minimal setup.
- **Customizable Launch Behavior**: Allows developers to specify conditions under which the app should launch.

Overall, the `launch_at_startup` package enhances user experience by ensuring that essential applications are readily available without requiring user intervention.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up the Launch_at_startup Package

In this tutorial, we will walk through the setup process for the `launch_at_startup` package and demonstrate how to use it in your Flutter application.

## Step 1: Add Dependency

To get started, add the `launch_at_startup` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  launch_at_startup: ^1.0.0  # Check for the latest version on pub.dev
```

## Step 2: Platform-Specific Configuration

### Android Configuration

1. Open your `AndroidManifest.xml` file located at `android/app/src/main/AndroidManifest.xml`.
2. Add the following permission to allow your app to run at startup:

```xml
<uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED"/>
```

3. Register a receiver in the same file to handle the boot completed event:

```xml
<application>
    ...
    <receiver android:name="com.example.launch_at_startup.BootReceiver">
        <intent-filter>
            <action android:name="android.intent.action.BOOT_COMPLETED"/>
        </intent-filter>
    </receiver>
</application>
```

### iOS Configuration

For iOS, you need to enable background modes:

1. Open your `Info.plist` file located at `ios/Runner/Info.plist`.
2. Add the following key to enable background execution:

```xml
<key>UIBackgroundModes</key>
<array>
    <string>fetch</string>
</array>
```

## Step 3: Using the Package

Now that we have configured the package, we can use it in our Flutter application. Hereâ€™s how to implement it in your main application file.

```dart
import 'package:flutter/material.dart';
import 'package:launch_at_startup/launch_at_startup.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Launch at Startup Demo',
      home: HomeScreen(),
    );
  }
}

class HomeScreen extends StatefulWidget {
  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  @override
  void initState() {
    super.initState();
    // Request to launch the app at startup
    LaunchAtStartup.setLaunchAtStartup(true);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Launch at Startup Example'),
      ),
      body: Center(
        child: Text('This app will launch at startup!'),
      ),
    );
  }
}
```

In this example, we set the app to launch at startup in the `initState` method of the `HomeScreen` widget.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Launch_at_startup

```dart
import 'package:flutter/material.dart';
import 'package:launch_at_startup/launch_at_startup.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Launch at Startup Demo',
      home: HomeScreen(),
    );
  }
}

class HomeScreen extends StatefulWidget {
  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  @override
  void initState() {
    super.initState();
    // Request to launch the app at startup
    LaunchAtStartup.setLaunchAtStartup(true);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Launch at Startup Example'),
      ),
      body: Center(
        child: Text('This app will launch at startup!'),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function starts the app by calling runApp with the RealFlutter widget.
// 2. RealFlutter builds a MaterialApp with a title and a home screen.
// 3. The HomeScreen widget is created, which is a stateful widget.
// 4. In the _HomeScreenState's initState method, we call LaunchAtStartup.setLaunchAtStartup(true) to enable the app to launch at startup.
// 5. The build method of HomeScreen returns a Scaffold with an AppBar and a centered text message indicating that the app will launch at startup.
// 6. When the device starts, the app will automatically launch due to the configuration and the call made in initState.
```
<!-- END_MAIN -->
```

This structured blog provides a comprehensive overview of the `launch_at_startup` Flutter package, guiding users through its features, setup, and implementation with clear code examples and explanations.
<-- START_DESCRIPTION -->

# Swipeable Button Flutter Package
=====================================

The Swipeable Button Flutter package is a customizable widget that allows users to interact with a button by swiping it. This package is useful when you want to create a unique user experience for your app, such as a swipe-to-confirm button.

### Features

*   Customizable button size, color, and text
*   Swipe gesture recognition
*   Support for both Android and iOS platforms

### When to Use This Package

This package is ideal for apps that require a unique and interactive way to confirm user actions, such as:

*   Swipe-to-confirm buttons for critical actions
*   Interactive toggle buttons
*   Customizable game controls

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Swipeable Button Package
===========================================================

### Step 1: Add the Package to Your Flutter Project

Add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  swipeable_button: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:swipeable_button/swipeable_button.dart';
```

### Step 3: Create a Swipeable Button

Create a SwipeableButton widget and customize its properties:

```dart
SwipeableButton(
  onPressed: () {
    // Handle button press
  },
  onSwipe: () {
    // Handle swipe gesture
  },
  child: Text('Swipe Me'),
)
```

### Platform-Specific Details

*   For Android, make sure to handle the swipe gesture in the `onSwipe` callback.
*   For iOS, you can customize the swipe gesture recognition by using the `gestureRecognizer` property.

### Required Configurations and Optimizations

*   To improve performance, consider using a `Container` widget to wrap the SwipeableButton.
*   To handle multiple swipe gestures, use the `onSwipe` callback and check the `direction` property.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:swipeable_button/swipeable_button.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Step 1: Create a variable to track the swipe gesture
  bool _isSwiped = false;

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Swipeable Button Demo'),
        ),
        body: Center(
          child: SwipeableButton(
            // Step 2: Handle button press
            onPressed: () {
              print('Button pressed');
            },
            // Step 3: Handle swipe gesture
            onSwipe: () {
              setState(() {
                _isSwiped = true;
              });
              print('Button swiped');
            },
            // Step 4: Customize the button child
            child: Text(_isSwiped ? 'Swiped!' : 'Swipe Me'),
          ),
        ),
      ),
    );
  }
}

// The application flow:
// 1. The user runs the app and sees the SwipeableButton.
// 2. When the user presses the button, the onPressed callback is triggered.
// 3. When the user swipes the button, the onSwipe callback is triggered.
// 4. The onSwipe callback updates the _isSwiped variable and rebuilds the widget tree.
// 5. The button child text changes to 'Swiped!' to indicate the swipe gesture.
```

// Final summary: The RealFlutter app demonstrates the SwipeableButton package by creating a customizable button that responds to swipe gestures. The app updates the button child text to indicate when the user has swiped the button.

<-- END_MAIN -->
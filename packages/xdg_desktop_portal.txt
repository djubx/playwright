<-- START_DESCRIPTION -->

# xdg_desktop_portal Flutter Package
=====================================

The `xdg_desktop_portal` package is a Flutter plugin that provides a simple and unified API for accessing various desktop portal features, such as file dialogs, notifications, and printing. This package is designed to work with the XDG (Cross-Desktop Group) desktop portal specification, which is supported by most Linux desktop environments.

## When to Use This Package
---------------------------

You should use this package when you need to access desktop portal features in your Flutter application, such as:

* Showing file dialogs to select files or directories
* Displaying notifications to the user
* Printing documents or images
* Accessing the system clipboard

## Features
------------

The `xdg_desktop_portal` package provides the following features:

* File dialogs: show open and save file dialogs
* Notifications: display notifications to the user
* Printing: print documents or images
* Clipboard: access the system clipboard

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `xdg_desktop_portal` package, you need to add it to your Flutter project's `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  xdg_desktop_portal: ^0.1.0
```

Then, run `flutter pub get` to install the package.

## Platform-Specific Details
---------------------------

### Android

On Android, the `xdg_desktop_portal` package uses the `androidx.core` library to access the system clipboard. You need to add the following dependency to your `android/app/build.gradle` file:

```groovy
dependencies {
    implementation 'androidx.core:core:1.3.2'
}
```

### iOS

On iOS, the `xdg_desktop_portal` package uses the `UIKit` framework to access the system clipboard. You need to add the following import statement to your `ios/Podfile` file:

```ruby
pod 'UIKit'
```

## Using the Package
---------------------

To use the `xdg_desktop_portal` package, you need to import it in your Dart file:

```dart
import 'package:xdg_desktop_portal/xdg_desktop_portal.dart';
```

Then, you can use the various APIs provided by the package, such as:

```dart
// Show an open file dialog
final file = await XdgDesktopPortal.instance.showOpenFileDialog();

// Display a notification
await XdgDesktopPortal.instance.showNotification(
  title: 'Hello, World!',
  body: 'This is a notification.',
);

// Print a document
await XdgDesktopPortal.instance.printDocument(
  document: 'Hello, World!',
);
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:xdg_desktop_portal/xdg_desktop_portal.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Xdg Desktop Portal Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Xdg Desktop Portal Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: _showOpenFileDialog,
              child: Text('Show Open File Dialog'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _showNotification,
              child: Text('Show Notification'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _printDocument,
              child: Text('Print Document'),
            ),
          ],
        ),
      ),
    );
  }

  void _showOpenFileDialog() async {
    // Show an open file dialog
    final file = await XdgDesktopPortal.instance.showOpenFileDialog();
    print('Selected file: $file');
  }

  void _showNotification() async {
    // Display a notification
    await XdgDesktopPortal.instance.showNotification(
      title: 'Hello, World!',
      body: 'This is a notification.',
    );
  }

  void _printDocument() async {
    // Print a document
    await XdgDesktopPortal.instance.printDocument(
      document: 'Hello, World!',
    );
  }
}

// The application flow is as follows:
// 1. The user clicks on one of the buttons to perform an action.
// 2. The corresponding method is called, which uses the XdgDesktopPortal instance to perform the action.
// 3. The XdgDesktopPortal instance uses the platform-specific APIs to perform the action.
// 4. The result of the action is printed to the console.

// This code demonstrates the use of the xdg_desktop_portal package to access various desktop portal features.
// It shows how to use the package to show open file dialogs, display notifications, and print documents.
```

<-- END_MAIN -->
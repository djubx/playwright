<-- START_DESCRIPTION -->

**jwt_decode_full Flutter Package: A Comprehensive Overview**
===========================================================

The `jwt_decode_full` Flutter package provides a simple and efficient way to decode and verify JSON Web Tokens (JWTs) in Flutter applications. This package is particularly useful when working with authentication and authorization mechanisms that rely on JWTs.

**When to Use This Package**
---------------------------

You should use the `jwt_decode_full` package in the following scenarios:

* When you need to decode and verify JWTs in your Flutter application.
* When you want to extract payload information from a JWT.
* When you need to validate the signature of a JWT.

**Key Features**
----------------

* Decodes and verifies JWTs using various algorithms (e.g., HS256, RS256, ES256).
* Supports multiple token types (e.g., access tokens, ID tokens).
* Provides an easy-to-use API for extracting payload information.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setting Up and Using the jwt_decode_full Package**
=====================================================

### Step 1: Add the Package to Your pubspec.yaml File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  jwt_decode_full: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:jwt_decode_full/jwt_decode_full.dart';
```
### Step 3: Decode and Verify a JWT

Use the `decode` method to decode and verify a JWT:
```dart
String token = 'your_jwt_token_here';
Map<String, dynamic> payload = await JwtDecodeFull.decode(token);
```
You can also specify the algorithm and token type:
```dart
String token = 'your_jwt_token_here';
Map<String, dynamic> payload = await JwtDecodeFull.decode(
  token,
  algorithm: 'RS256',
  tokenType: 'access_token',
);
```
### Platform-Specific Details

* Android: No additional configuration is required.
* iOS: You need to add the following line to your `Info.plist` file:
```xml
<key>NSAllowsArbitraryLoads</key>
<true/>
```
This allows the package to make HTTP requests to verify the token signature.

<-- END_TUTORIAL -->

<-- START_MAIN -->

**Complete Example: RealFlutter App**
=====================================

```dart
import 'package:flutter/material.dart';
import 'package:jwt_decode_full/jwt_decode_full.dart';

void main() {
  runApp(RealFlutterApp());
}

class RealFlutterApp extends StatefulWidget {
  @override
  _RealFlutterAppState createState() => _RealFlutterAppState();
}

class _RealFlutterAppState extends State<RealFlutterApp> {
  String _token = '';
  Map<String, dynamic> _payload = {};

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'RealFlutter App',
      home: Scaffold(
        appBar: AppBar(
          title: Text('RealFlutter App'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              TextField(
                decoration: InputDecoration(
                  labelText: 'Enter JWT Token',
                ),
                onChanged: (value) {
                  setState(() {
                    _token = value;
                  });
                },
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () async {
                  // Decode and verify the JWT token
                  _payload = await JwtDecodeFull.decode(_token);
                  setState(() {});
                },
                child: Text('Decode and Verify JWT'),
              ),
              SizedBox(height: 20),
              Text('Payload:'),
              Text(_payload.toString()),
            ],
          ),
        ),
      ),
    );
  }
}

// The app flow is as follows:
// 1. The user enters a JWT token in the text field.
// 2. The user clicks the "Decode and Verify JWT" button.
// 3. The JwtDecodeFull.decode method is called with the entered token.
// 4. The method decodes and verifies the token, and returns the payload.
// 5. The payload is displayed on the screen.

// In summary, this code demonstrates how to use the jwt_decode_full package to decode and verify a JWT token in a Flutter app.
```

<-- END_MAIN -->
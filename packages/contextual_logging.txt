<-- START_DESCRIPTION -->

# Contextual Logging Flutter Package
=====================================

The `contextual_logging` Flutter package provides a simple and efficient way to log events and errors in your Flutter application. It allows you to log messages with different levels of severity, including debug, info, warning, error, and fatal. This package is useful for debugging and monitoring your application's performance and issues.

### When to Use This Package

You can use this package in the following scenarios:

* Debugging: Log debug messages to understand the flow of your application and identify issues.
* Error Handling: Log errors and exceptions to track and fix issues in your application.
* Performance Monitoring: Log messages to monitor the performance of your application and identify bottlenecks.

### Features

* Log messages with different levels of severity (debug, info, warning, error, fatal)
* Support for logging errors and exceptions
* Customizable log format and output
* Support for logging to console, file, and network

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up Contextual Logging
=============================

To use the `contextual_logging` package, follow these steps:

### Step 1: Add the Package to Your Project

Add the following dependency to your `pubspec.yaml` file:
```yml
dependencies:
  contextual_logging: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:contextual_logging/contextual_logging.dart';
```
### Step 3: Initialize the Logger

Initialize the logger in your `main` function:
```dart
void main() {
  Logger.init();
  runApp(MyApp());
}
```
### Step 4: Log Messages

Log messages using the `log` function:
```dart
Logger.log('This is a debug message', level: LogLevel.debug);
Logger.log('This is an info message', level: LogLevel.info);
Logger.log('This is a warning message', level: LogLevel.warning);
Logger.log('This is an error message', level: LogLevel.error);
Logger.log('This is a fatal message', level: LogLevel.fatal);
```
### Platform-Specific Details

* Android: The logger will log messages to the Android console and file.
* iOS: The logger will log messages to the iOS console and file.

### Configurations and Optimizations

You can customize the log format and output by using the `LoggerConfig` class:
```dart
LoggerConfig config = LoggerConfig(
  format: '%d %p %c %m',
  output: LoggerOutput.console,
);
Logger.init(config);
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:contextual_logging/contextual_logging.dart';

void main() {
  // Initialize the logger
  Logger.init();

  // Run the app
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Log a debug message
    Logger.log('Building the RealFlutter widget', level: LogLevel.debug);

    return MaterialApp(
      title: 'RealFlutter',
      home: Scaffold(
        appBar: AppBar(
          title: Text('RealFlutter'),
        ),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              // Log an info message
              Logger.log('Button pressed', level: LogLevel.info);

              // Navigate to a new page
              Navigator.push(
                context,
                MaterialPageRoute(builder: (context) => NewPage()),
              );
            },
            child: Text('Press me'),
          ),
        ),
      ),
    );
  }
}

class NewPage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Log a warning message
    Logger.log('Building the NewPage widget', level: LogLevel.warning);

    return Scaffold(
      appBar: AppBar(
        title: Text('NewPage'),
      ),
      body: Center(
        child: Text('This is a new page'),
      ),
    );
  }
}
```

// The app starts by initializing the logger in the `main` function.
// Then, it runs the `RealFlutter` app.
// The `RealFlutter` widget logs a debug message when it is built.
// When the button is pressed, it logs an info message and navigates to a new page.
// The `NewPage` widget logs a warning message when it is built.
// The logger logs messages to the console and file.

<-- END_MAIN -->
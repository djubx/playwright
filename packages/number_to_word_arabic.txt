<-- START_DESCRIPTION -->

# number_to_word_arabic Flutter Package
=====================================

The `number_to_word_arabic` Flutter package is a utility library that converts numbers to their Arabic word equivalents. It is useful for applications that require displaying numbers in a more readable and culturally sensitive format.

### Features

* Converts integers to Arabic words
* Supports numbers up to 999,999,999
* Easy to use and integrate into existing Flutter applications

### Use Cases

* Displaying numbers in Arabic format for users in the Middle East and North Africa region
* Converting numbers to words for accessibility purposes
* Creating culturally sensitive and localized applications

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Using the number_to_word_arabic Package
=============================================

### Step 1: Add the Package to Your Flutter Project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  number_to_word_arabic: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:number_to_word_arabic/number_to_word_arabic.dart';
```
### Step 3: Use the Package

Use the `NumberToWordArabic` class to convert numbers to Arabic words:
```dart
void main() {
  int number = 12345;
  String arabicWord = NumberToWordArabic.convert(number);
  print(arabicWord); // Output: "اثنا عشر ألف وثلاثمائة وخمسة وأربعون"
}
```
### Platform-Specific Details

* Android: No additional configuration required.
* iOS: No additional configuration required.

### Optimizations

* For better performance, consider caching the results of frequently used numbers.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:number_to_word_arabic/number_to_word_arabic.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final _numberController = TextEditingController();
  String _arabicWord = '';

  // Step 1: Create a TextField to input the number
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Number to Arabic Word'),
        ),
        body: Padding(
          padding: const EdgeInsets.all(20.0),
          child: Column(
            children: [
              TextField(
                controller: _numberController,
                keyboardType: TextInputType.number,
                decoration: InputDecoration(
                  labelText: 'Enter a number',
                  border: OutlineInputBorder(),
                ),
              ),
              SizedBox(height: 20),
              // Step 2: Create a Button to convert the number
              ElevatedButton(
                onPressed: () {
                  // Step 3: Convert the number to Arabic word
                  int number = int.parse(_numberController.text);
                  String arabicWord = NumberToWordArabic.convert(number);
                  setState(() {
                    _arabicWord = arabicWord;
                  });
                },
                child: Text('Convert to Arabic Word'),
              ),
              SizedBox(height: 20),
              // Step 4: Display the Arabic word
              Text(
                _arabicWord,
                style: TextStyle(fontSize: 24),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user inputs a number in the TextField.
// 2. The user clicks the "Convert to Arabic Word" Button.
// 3. The number is converted to an Arabic word using the NumberToWordArabic class.
// 4. The Arabic word is displayed on the screen.
// Summary: This application takes a number as input, converts it to an Arabic word, and displays the result on the screen.

```

<-- END_MAIN -->
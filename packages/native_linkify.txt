# Native Linkify Flutter Package

<!-- START_DESCRIPTION -->
## Description

The `native_linkify` package is a powerful Flutter library designed to automatically detect and convert text links into clickable widgets. This package is particularly useful for applications that display user-generated content, such as chat applications, social media platforms, or any text-heavy interface where links may appear. By using `native_linkify`, developers can enhance user experience by allowing users to interact with links seamlessly.

### Key Features:
- **Automatic Link Detection**: The package can identify URLs, email addresses, and phone numbers within a text string.
- **Customizable Link Styles**: Developers can customize the appearance of detected links, including color, font style, and more.
- **Support for Multiple Platforms**: Works seamlessly on both Android and iOS, ensuring a consistent experience across devices.
- **Easy Integration**: Simple API that allows for quick implementation in any Flutter project.

### When to Use:
- In chat applications where users may share links.
- In blogs or content-heavy applications where articles may contain hyperlinks.
- In any application that requires user interaction with text links.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
## Tutorial

### Installation

To get started with the `native_linkify` package, you need to add it to your Flutter project. Open your `pubspec.yaml` file and add the following dependency:

```yaml
dependencies:
  flutter:
    sdk: flutter
  native_linkify: ^latest_version
```

Make sure to replace `^latest_version` with the latest version available on [pub.dev](https://pub.dev/packages/native_linkify).

### Platform-Specific Configuration

#### Android
No specific configuration is required for Android. Just ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file.

#### iOS
For iOS, ensure that you have the following in your `Info.plist` to allow opening links:

```xml
<key>LSApplicationQueriesSchemes</key>
<array>
    <string>http</string>
    <string>https</string>
    <string>mailto</string>
    <string>tel</string>
</array>
```

### Basic Usage

To use the `native_linkify` package, you can create a simple widget that takes a string of text and displays it with clickable links. Hereâ€™s a basic example:

```dart
import 'package:flutter/material.dart';
import 'package:native_linkify/native_linkify.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Native Linkify Example')),
      body: Center(
        child: Linkify(
          text: 'Check out https://flutter.dev or email me at example@example.com',
          style: TextStyle(fontSize: 16),
          linkStyle: TextStyle(color: Colors.blue, decoration: TextDecoration.underline),
          onOpen: (link) async {
            // Handle link opening
            print('Opening: ${link.url}');
          },
        ),
      ),
    );
  }
}
```

In this example, the `Linkify` widget automatically detects links in the provided text and makes them clickable.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
## Complete Example

```dart
import 'package:flutter/material.dart';
import 'package:native_linkify/native_linkify.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Native Linkify Demo',
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Native Linkify Example')),
      body: Center(
        child: Linkify(
          text: 'Check out https://flutter.dev or email me at example@example.com',
          style: TextStyle(fontSize: 16), // Set the default text style
          linkStyle: TextStyle(color: Colors.blue, decoration: TextDecoration.underline), // Style for links
          onOpen: (link) async {
            // Handle link opening
            print('Opening: ${link.url}'); // Log the link that is being opened
            // You can use url_launcher to open the link in a browser
          },
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function initializes the Flutter app by calling runApp() with MyApp.
// 2. MyApp builds a MaterialApp with a title and sets RealFlutter as the home widget.
// 3. RealFlutter creates a Scaffold with an AppBar and a Center widget.
// 4. Inside the Center widget, a Linkify widget is created with a text string containing a URL and an email.
// 5. The Linkify widget automatically detects the URL and email, applying the specified styles.
// 6. When a link is tapped, the onOpen callback is triggered, logging the link URL to the console.
// 7. You can further enhance the onOpen callback to use the url_launcher package to open the link in a web browser.
```

<!-- END_MAIN -->

## Summary
In this blog post, we explored the `native_linkify` package, which simplifies the process of making text links interactive in Flutter applications. We covered the installation process, platform-specific configurations, and provided a complete example demonstrating how to implement the package effectively. By following the steps outlined, developers can easily integrate link detection and interaction into their Flutter projects, enhancing user engagement and experience.
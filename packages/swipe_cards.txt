```markdown
<-- START_DESCRIPTION -->

# Swipe Cards Flutter Package: An Overview

The `swipe_cards` Flutter package is a powerful tool for developers looking to implement swipeable card interfaces in their applications. This package is particularly useful for creating Tinder-like swipeable card decks, which can be used in a variety of applications such as dating apps, product showcases, or any scenario where users need to browse through a collection of items interactively.

## When to Use Swipe Cards

- **Dating Applications**: Implement a Tinder-like interface where users can swipe left or right to like or dislike profiles.
- **Product Browsing**: Allow users to swipe through a catalog of products, making it easy to browse and select items.
- **Content Discovery**: Use swipe cards to present articles, videos, or other content, enabling users to quickly sift through options.

## Features

- **Customizable Cards**: Easily customize the appearance of each card to fit your app's design.
- **Swipe Gestures**: Built-in support for swipe gestures, including left, right, up, and down swipes.
- **Callbacks**: Define actions for each swipe direction, allowing for dynamic interactions based on user input.
- **Deck Management**: Manage a deck of cards with ease, including adding, removing, and resetting cards.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the Swipe Cards Package

In this tutorial, we'll walk through the process of setting up the `swipe_cards` package in a Flutter project and demonstrate how to use it effectively.

## Setup Process

1. **Add Dependency**: First, add the `swipe_cards` package to your `pubspec.yaml` file.

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     swipe_cards: ^0.1.0
   ```

2. **Install Packages**: Run `flutter pub get` to install the new package.

3. **Import the Package**: In your Dart file, import the package.

   ```dart
   import 'package:swipe_cards/swipe_cards.dart';
   ```

## Platform-Specific Details

### Android

- Ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

  ```gradle
  defaultConfig {
      minSdkVersion 21
  }
  ```

### iOS

- Make sure your iOS deployment target is set to at least 9.0. You can set this in your `ios/Podfile`:

  ```ruby
  platform :ios, '9.0'
  ```

## Basic Usage

1. **Create a Card Deck**: Define a list of cards you want to display.

   ```dart
   List<SwipeItem> swipeItems = [
     SwipeItem(content: Text("Card 1")),
     SwipeItem(content: Text("Card 2")),
     SwipeItem(content: Text("Card 3")),
   ];
   ```

2. **Initialize the Swipe Controller**: Create a `SwipeController` to manage the deck.

   ```dart
   final SwipeController swipeController = SwipeController();
   ```

3. **Build the Swipe Cards Widget**: Use the `SwipeCards` widget to display the cards.

   ```dart
   SwipeCards(
     items: swipeItems,
     controller: swipeController,
     onSwipe: (index, direction) {
       // Handle swipe actions
     },
   );
   ```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:swipe_cards/swipe_cards.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Swipe Cards Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: SwipeCardsExample(),
    );
  }
}

class SwipeCardsExample extends StatefulWidget {
  @override
  _SwipeCardsExampleState createState() => _SwipeCardsExampleState();
}

class _SwipeCardsExampleState extends State<SwipeCardsExample> {
  List<SwipeItem> swipeItems = [];
  late SwipeController swipeController;

  @override
  void initState() {
    super.initState();
    swipeController = SwipeController();

    // Initialize swipe items with content and callbacks
    swipeItems = [
      SwipeItem(
        content: CardContent(text: "Card 1"),
        likeAction: () => print("Liked Card 1"),
        nopeAction: () => print("Disliked Card 1"),
      ),
      SwipeItem(
        content: CardContent(text: "Card 2"),
        likeAction: () => print("Liked Card 2"),
        nopeAction: () => print("Disliked Card 2"),
      ),
      SwipeItem(
        content: CardContent(text: "Card 3"),
        likeAction: () => print("Liked Card 3"),
        nopeAction: () => print("Disliked Card 3"),
      ),
    ];
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Swipe Cards Example'),
      ),
      body: Center(
        child: SwipeCards(
          items: swipeItems,
          controller: swipeController,
          onSwipe: (index, direction) {
            // Handle swipe actions
            if (direction == SwipeDirection.left) {
              print("Swiped left on card $index");
            } else if (direction == SwipeDirection.right) {
              print("Swiped right on card $index");
            }
          },
          onEnd: () {
            // Handle end of card deck
            print("No more cards");
          },
        ),
      ),
    );
  }
}

class CardContent extends StatelessWidget {
  final String text;

  CardContent({required this.text});

  @override
  Widget build(BuildContext context) {
    return Card(
      child: Center(
        child: Text(
          text,
          style: TextStyle(fontSize: 24),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the `MyApp` widget, which sets up the MaterialApp and theme.
// 2. The `SwipeCardsExample` widget is the main screen, which initializes the swipe items and controller.
// 3. The `SwipeCards` widget is used to display the cards, with swipe actions handled by the `onSwipe` callback.
// 4. Each card is represented by a `CardContent` widget, which displays the text content.
// 5. The `onEnd` callback is triggered when all cards have been swiped, indicating the end of the deck.
```

<-- END_MAIN -->
```
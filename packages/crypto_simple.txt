<-- START_DESCRIPTION -->

# Crypto Simple Flutter Package
================================

The `crypto_simple` Flutter package provides a simple and easy-to-use interface for encrypting and decrypting data in your Flutter applications. It supports various encryption algorithms, including AES, RSA, and SHA.

## When to Use
--------------

Use the `crypto_simple` package when you need to:

* Encrypt sensitive data, such as passwords or credit card numbers
* Decrypt encrypted data received from a server or other source
* Generate digital signatures for authentication or verification purposes

## Features
------------

* Supports AES, RSA, and SHA encryption algorithms
* Easy-to-use interface for encrypting and decrypting data
* Supports generating digital signatures
* Compatible with both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Crypto Simple Package
--------------------------------------

To use the `crypto_simple` package in your Flutter application, follow these steps:

### Step 1: Add the Package to Your `pubspec.yaml` File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  crypto_simple: ^1.0.0
```
### Step 2: Import the Package in Your Dart File

Import the package in your Dart file:
```dart
import 'package:crypto_simple/crypto_simple.dart';
```
### Step 3: Initialize the Package

Initialize the package by calling the `init()` method:
```dart
CryptoSimple.init();
```
### Platform-Specific Details

* Android: No additional configuration is required.
* iOS: You need to add the following lines to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```
### Required Configurations or Optimizations

* Make sure to handle errors and exceptions properly when using the package.
* Use a secure random number generator to generate keys and nonces.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:crypto_simple/crypto_simple.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Crypto Simple Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  String _encryptedText = '';
  String _decryptedText = '';

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Crypto Simple Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Enter text to encrypt:',
            ),
            TextField(
              onChanged: (text) {
                _encryptText(text);
              },
            ),
            Text(
              'Encrypted text:',
            ),
            Text(
              _encryptedText,
            ),
            Text(
              'Enter text to decrypt:',
            ),
            TextField(
              onChanged: (text) {
                _decryptText(text);
              },
            ),
            Text(
              'Decrypted text:',
            ),
            Text(
              _decryptedText,
            ),
          ],
        ),
      ),
    );
  }

  void _encryptText(String text) {
    // Initialize the package
    CryptoSimple.init();

    // Generate a random key
    String key = CryptoSimple.generateKey();

    // Encrypt the text
    String encryptedText = CryptoSimple.encrypt(text, key);

    // Update the UI
    setState(() {
      _encryptedText = encryptedText;
    });
  }

  void _decryptText(String text) {
    // Initialize the package
    CryptoSimple.init();

    // Generate a random key
    String key = CryptoSimple.generateKey();

    // Decrypt the text
    String decryptedText = CryptoSimple.decrypt(text, key);

    // Update the UI
    setState(() {
      _decryptedText = decryptedText;
    });
  }
}

// The application flow is as follows:
// 1. The user enters text to encrypt in the first text field.
// 2. The _encryptText function is called, which initializes the package, generates a random key, and encrypts the text.
// 3. The encrypted text is displayed in the UI.
// 4. The user enters text to decrypt in the second text field.
// 5. The _decryptText function is called, which initializes the package, generates a random key, and decrypts the text.
// 6. The decrypted text is displayed in the UI.

// Note: In a real-world application, you would want to handle errors and exceptions properly, and use a secure random number generator to generate keys and nonces.
```

<-- END_MAIN -->
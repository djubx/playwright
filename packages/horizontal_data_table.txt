```markdown
<!-- START_DESCRIPTION -->
# Horizontal Data Table Flutter Package

The `horizontal_data_table` Flutter package is a powerful tool designed to display tabular data in a horizontal format, making it particularly useful for applications that require the presentation of large datasets in a compact and user-friendly manner. This package allows developers to create responsive and scrollable tables that can accommodate various data types, including text, images, and custom widgets.

## When to Use This Package

You might consider using the `horizontal_data_table` package in scenarios such as:

- **Data-Intensive Applications**: When your app needs to display large datasets, such as financial reports, inventory lists, or user statistics.
- **Responsive Design**: When you want to ensure that your tables look good on both mobile and web platforms, adapting to different screen sizes.
- **Customizable Tables**: When you need a table that can include various types of content, such as images, buttons, or custom widgets.

## Features

- **Horizontal Scrolling**: Users can scroll horizontally to view additional columns, making it easier to navigate wide datasets.
- **Customizable Cells**: Each cell can contain any widget, allowing for rich content display.
- **Responsive Layout**: Automatically adjusts to different screen sizes and orientations.
- **Sorting and Filtering**: Built-in support for sorting and filtering data, enhancing user experience.

Overall, the `horizontal_data_table` package is an excellent choice for Flutter developers looking to implement sophisticated data tables in their applications.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Horizontal Data Table Package

## Step 1: Adding the Dependency

To get started, you need to add the `horizontal_data_table` package to your Flutter project. Open your `pubspec.yaml` file and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  horizontal_data_table: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command in your terminal to install it:

```bash
flutter pub get
```

## Step 2: Platform-Specific Configuration

### Android

For Android, ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
        ...
    }
}
```

### iOS

For iOS, you may need to update your `ios/Podfile` to ensure compatibility with the latest iOS versions. Make sure to uncomment the platform line and set it to at least 10.0:

```ruby
platform :ios, '10.0'
```

## Step 3: Using the Package

Now that you have set up the package, you can start using it in your Flutter application. Below is a simple example of how to implement a horizontal data table.

1. Import the package in your Dart file:

```dart
import 'package:flutter/material.dart';
import 'package:horizontal_data_table/horizontal_data_table.dart';
```

2. Create a widget that uses `HorizontalDataTable`:

```dart
class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Horizontal Data Table Example'),
      ),
      body: HorizontalDataTable(
        leftHandSideColumnWidth: 100,
        rightHandSideColumnWidth: 300,
        isFixedHeader: true,
        headerWidgets: _getTitleWidget(),
        leftSideItems: _getLeftHandSideData(),
        rightSideItems: _getRightHandSideData(),
      ),
    );
  }

  List<Widget> _getTitleWidget() {
    return [
      Text('Column 1', style: TextStyle(fontWeight: FontWeight.bold)),
      Text('Column 2', style: TextStyle(fontWeight: FontWeight.bold)),
      Text('Column 3', style: TextStyle(fontWeight: FontWeight.bold)),
    ];
  }

  List<Widget> _getLeftHandSideData() {
    return [
      Text('Row 1'),
      Text('Row 2'),
      Text('Row 3'),
    ];
  }

  List<Widget> _getRightHandSideData() {
    return [
      Text('Data 1'),
      Text('Data 2'),
      Text('Data 3'),
    ];
  }
}
```

This code sets up a basic horizontal data table with three columns and three rows. You can customize the data and layout as needed.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Horizontal Data Table

```dart
import 'package:flutter/material.dart';
import 'package:horizontal_data_table/horizontal_data_table.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Horizontal Data Table Demo',
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Horizontal Data Table Example'),
      ),
      body: HorizontalDataTable(
        leftHandSideColumnWidth: 100, // Width of the left column
        rightHandSideColumnWidth: 300, // Width of the right columns
        isFixedHeader: true, // Keeps the header fixed while scrolling
        headerWidgets: _getTitleWidget(), // Method to get header widgets
        leftSideItems: _getLeftHandSideData(), // Method to get left side data
        rightSideItems: _getRightHandSideData(), // Method to get right side data
      ),
    );
  }

  // Method to create header widgets
  List<Widget> _getTitleWidget() {
    return [
      Text('Column 1', style: TextStyle(fontWeight: FontWeight.bold)), // Header for Column 1
      Text('Column 2', style: TextStyle(fontWeight: FontWeight.bold)), // Header for Column 2
      Text('Column 3', style: TextStyle(fontWeight: FontWeight.bold)), // Header for Column 3
    ];
  }

  // Method to create left side data
  List<Widget> _getLeftHandSideData() {
    return [
      Text('Row 1'), // Data for Row 1
      Text('Row 2'), // Data for Row 2
      Text('Row 3'), // Data for Row 3
    ];
  }

  // Method to create right side data
  List<Widget> _getRightHandSideData() {
    return [
      Text('Data 1'), // Data for Column 1
      Text('Data 2'), // Data for Column 2
      Text('Data 3'), // Data for Column 3
    ];
  }
}

// Application Flow Explanation:
// 1. The main function initializes the app by calling runApp() with MyApp.
// 2. MyApp builds a MaterialApp with a title and sets RealFlutter as the home widget.
// 3. RealFlutter creates a Scaffold with an AppBar and a HorizontalDataTable in the body.
// 4. The HorizontalDataTable is configured with fixed header and specified column widths.
// 5. The header and data for the table are generated by the respective methods.
// 6. The app displays a horizontal data table with three columns and three rows of data.
```
<!-- END_MAIN -->
``` 

This structured blog provides a comprehensive overview of the `horizontal_data_table` Flutter package, including its features, setup instructions, and a complete example with detailed comments explaining the application flow.
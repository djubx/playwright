<-- START_DESCRIPTION -->

# Progress State Button Package
The `progress_state_button` package is a Flutter widget that allows you to create a button with a progress indicator. It's useful when you want to show the user that a task is being performed in the background, such as a network request or a long-running computation.

## Features
- Customizable button text and color
- Customizable progress indicator color and size
- Support for different button states (idle, loading, success, error)
- Easy to use and integrate into your existing Flutter app

## When to use this package
You can use this package in any situation where you want to provide visual feedback to the user that a task is being performed. For example:

- When making a network request to fetch data from a server
- When performing a long-running computation, such as image processing or data compression
- When uploading or downloading files

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
To use the `progress_state_button` package, follow these steps:

### Step 1: Add the package to your pubspec.yaml file
```yml
dependencies:
  progress_state_button: ^1.0.0
```

### Step 2: Import the package in your Dart file
```dart
import 'package:progress_state_button/progress_state_button.dart';
```

### Step 3: Create a `ProgressStateButton` widget
```dart
ProgressStateButton(
  state: ButtonState.idle,
  onPressed: () {
    // Perform some task here
  },
  textStyle: TextStyle(fontSize: 16),
)
```

### Platform-specific details
No platform-specific configurations are required for this package.

### Optimizations
To improve performance, you can use the ` ProgressStateButton` widget inside a `StatelessWidget` or a `StatefulWidget` with a minimal rebuild.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:progress_state_button/progress_state_button.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Progress State Button Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  ButtonState _buttonState = ButtonState.idle;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Progress State Button Demo'),
      ),
      body: Center(
        child: ProgressStateButton(
          state: _buttonState,
          onPressed: () {
            // Perform some task here
            setState(() {
              _buttonState = ButtonState.loading;
            });
            Future.delayed(Duration(seconds: 3), () {
              setState(() {
                _buttonState = ButtonState.success;
              });
            });
          },
          textStyle: TextStyle(fontSize: 16),
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user presses the button.
// 2. The button state changes to `ButtonState.loading`.
// 3. A task is performed in the background (simulated by a 3-second delay).
// 4. The button state changes to `ButtonState.success`.
// 5. The user can press the button again to repeat the process.

// Summary:
// The `ProgressStateButton` widget provides a simple way to show the user that a task is being performed.
// By changing the button state, you can provide visual feedback to the user.
// This example demonstrates a basic use case for the `ProgressStateButton` widget.
```

<-- END_MAIN -->
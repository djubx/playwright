<-- START_DESCRIPTION -->

# Overview of parse_server_sdk_flutter
The `parse_server_sdk_flutter` package is a Flutter wrapper for the Parse Server SDK, allowing developers to easily integrate their Flutter applications with a Parse Server backend. This package provides a simple and efficient way to interact with your Parse Server, enabling you to focus on building your application's UI and business logic.

## When to Use This Package
You should use this package when building a Flutter application that requires a robust backend infrastructure, such as user authentication, data storage, and real-time updates. This package is particularly useful when:

* You need to store and manage large amounts of data in a scalable and secure manner.
* You want to implement user authentication and authorization in your application.
* You require real-time updates and notifications in your application.

## Key Features
The `parse_server_sdk_flutter` package provides the following key features:

* User authentication and authorization
* Data storage and management
* Real-time updates and notifications
* File storage and management
* Push notifications

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up parse_server_sdk_flutter
To use the `parse_server_sdk_flutter` package in your Flutter application, follow these steps:

### Step 1: Add the Package to Your pubspec.yaml File
Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  parse_server_sdk_flutter: ^3.1.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package
Import the package in your Dart file:
```dart
import 'package:parse_server_sdk_flutter/parse_server_sdk.dart';
```
### Step 3: Initialize the Parse SDK
Initialize the Parse SDK in your application's `main` function:
```dart
void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Parse().initialize(
    'https://your-parse-server-url.com',
    'your-parse-application-id',
    'your-parse-client-key',
  );
  runApp(MyApp());
}
```
### Step 4: Configure Platform-Specific Details
Configure platform-specific details as follows:

#### Android
Add the following lines to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.INTERNET" />
<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
```
#### iOS
Add the following lines to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```
### Step 5: Use the Package
Use the package to interact with your Parse Server backend. For example:
```dart
Future<void> _createObject() async {
  final object = ParseObject('MyObject')
    ..set('name', 'John Doe')
    ..set('age', 30);
  await object.save();
}
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:parse_server_sdk_flutter/parse_server_sdk.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Parse().initialize(
    'https://your-parse-server-url.com',
    'your-parse-application-id',
    'your-parse-client-key',
  );
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final _formKey = GlobalKey<FormState>();
  final _nameController = TextEditingController();
  final _ageController = TextEditingController();

  Future<void> _createObject() async {
    // Create a new Parse object
    final object = ParseObject('MyObject')
      ..set('name', _nameController.text)
      ..set('age', int.parse(_ageController.text));
    
    // Save the object to the Parse Server
    await object.save();
    
    // Show a success message
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('Object created successfully!')),
    );
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Real Flutter',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Real Flutter'),
        ),
        body: Padding(
          padding: const EdgeInsets.all(20.0),
          child: Form(
            key: _formKey,
            child: Column(
              children: [
                TextFormField(
                  controller: _nameController,
                  decoration: InputDecoration(
                    labelText: 'Name',
                    border: OutlineInputBorder(),
                  ),
                  validator: (value) {
                    if (value!.isEmpty) {
                      return 'Please enter a name';
                    }
                    return null;
                  },
                ),
                SizedBox(height: 20),
                TextFormField(
                  controller: _ageController,
                  decoration: InputDecoration(
                    labelText: 'Age',
                    border: OutlineInputBorder(),
                  ),
                  validator: (value) {
                    if (value!.isEmpty) {
                      return 'Please enter an age';
                    }
                    return null;
                  },
                ),
                SizedBox(height: 20),
                ElevatedButton(
                  onPressed: () {
                    if (_formKey.currentState!.validate()) {
                      _createObject();
                    }
                  },
                  child: Text('Create Object'),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and is presented with a form to enter their name and age.
// 2. The user enters their name and age, and then clicks the "Create Object" button.
// 3. The app creates a new Parse object with the user's name and age, and then saves it to the Parse Server.
// 4. The app shows a success message to the user, indicating that the object was created successfully.
```

<-- END_MAIN -->
```markdown
<-- START_DESCRIPTION -->

# Overview of `parse_server_sdk_flutter` Package

The `parse_server_sdk_flutter` package is a powerful tool for integrating Parse Server capabilities into Flutter applications. Parse Server is an open-source backend that provides a robust set of features for building scalable applications, including data storage, user authentication, and real-time notifications. This package allows Flutter developers to leverage these features seamlessly within their mobile applications.

## When to Use

- **Data-Driven Applications**: Ideal for apps that require complex data storage and retrieval operations.
- **User Management**: Provides built-in user authentication and session management.
- **Real-Time Features**: Supports real-time data synchronization and push notifications.
- **Cross-Platform Development**: Suitable for applications targeting both Android and iOS platforms.

## Key Features

- **Object-Oriented Data Model**: Easily map your data to Parse objects.
- **User Authentication**: Simplifies user sign-up, login, and session management.
- **Cloud Code**: Execute custom business logic on the server.
- **Push Notifications**: Send notifications to users across platforms.
- **File Storage**: Manage and store files with ease.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up `parse_server_sdk_flutter` in Your Flutter Project

In this tutorial, we will walk through the setup process for integrating the `parse_server_sdk_flutter` package into a Flutter application. We will cover platform-specific configurations for both Android and iOS.

## Step 1: Add Dependency

Add the `parse_server_sdk_flutter` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  parse_server_sdk_flutter: ^3.1.0
```

Run `flutter pub get` to install the package.

## Step 2: Initialize Parse in Your Application

Initialize Parse in the `main.dart` file. This should be done at the start of your application.

```dart
import 'package:flutter/material.dart';
import 'package:parse_server_sdk_flutter/parse_server_sdk.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();

  const keyApplicationId = 'YOUR_APP_ID';
  const keyClientKey = 'YOUR_CLIENT_KEY';
  const keyParseServerUrl = 'https://YOUR_PARSE_SERVER:1337/parse';

  await Parse().initialize(
    keyApplicationId,
    keyParseServerUrl,
    clientKey: keyClientKey,
    autoSendSessionId: true,
  );

  runApp(MyApp());
}
```

## Step 3: Platform-Specific Configurations

### Android

1. **Permissions**: Ensure you have the necessary permissions in `AndroidManifest.xml` for internet access.
   
   ```xml
   <uses-permission android:name="android.permission.INTERNET" />
   ```

2. **Network Security**: If using a local server, configure network security settings in `res/xml/network_security_config.xml`.

   ```xml
   <?xml version="1.0" encoding="utf-8"?>
   <network-security-config>
       <domain-config cleartextTrafficPermitted="true">
           <domain includeSubdomains="true">YOUR_PARSE_SERVER</domain>
       </domain-config>
   </network-security-config>
   ```

### iOS

1. **Info.plist**: Add the following to your `Info.plist` to allow HTTP connections if needed.

   ```xml
   <key>NSAppTransportSecurity</key>
   <dict>
       <key>NSAllowsArbitraryLoads</key>
       <true/>
   </dict>
   ```

2. **CocoaPods**: Ensure your `Podfile` is set up correctly for Flutter.

## Step 4: Using the Package

With Parse initialized, you can now use its features. For example, to create a new Parse object:

```dart
final parseObject = ParseObject('RealFlutter')
  ..set('name', 'Flutter SDK')
  ..set('version', '1.0.0');
await parseObject.save();
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

# Complete Example: Flutter Application with Parse Integration

Below is a complete example of a Flutter application using the `parse_server_sdk_flutter` package. This example demonstrates user authentication and data storage.

```dart
import 'package:flutter/material.dart';
import 'package:parse_server_sdk_flutter/parse_server_sdk.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();

  const keyApplicationId = 'YOUR_APP_ID';
  const keyClientKey = 'YOUR_CLIENT_KEY';
  const keyParseServerUrl = 'https://YOUR_PARSE_SERVER:1337/parse';

  await Parse().initialize(
    keyApplicationId,
    keyParseServerUrl,
    clientKey: keyClientKey,
    autoSendSessionId: true,
  );

  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Parse Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final TextEditingController _usernameController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();

  Future<void> _signUp() async {
    final username = _usernameController.text.trim();
    final password = _passwordController.text.trim();

    final user = ParseUser(username, password, null);
    var response = await user.signUp();

    if (response.success) {
      // User signed up successfully
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('User signed up: ${user.username}')),
      );
    } else {
      // Sign up failed
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error: ${response.error?.message}')),
      );
    }
  }

  Future<void> _login() async {
    final username = _usernameController.text.trim();
    final password = _passwordController.text.trim();

    final user = ParseUser(username, password, null);
    var response = await user.login();

    if (response.success) {
      // User logged in successfully
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('User logged in: ${user.username}')),
      );
    } else {
      // Login failed
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Error: ${response.error?.message}')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Parse Server SDK Flutter'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: <Widget>[
            TextField(
              controller: _usernameController,
              decoration: InputDecoration(labelText: 'Username'),
            ),
            TextField(
              controller: _passwordController,
              decoration: InputDecoration(labelText: 'Password'),
              obscureText: true,
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _signUp,
              child: Text('Sign Up'),
            ),
            ElevatedButton(
              onPressed: _login,
              child: Text('Login'),
            ),
          ],
        ),
      ),
    );
  }
}
```

// The application initializes Parse SDK in the `main` function.
// It sets up a simple UI with text fields for username and password, and buttons for sign-up and login.
// The `_signUp` method creates a new `ParseUser` and attempts to sign up the user.
// The `_login` method attempts to log in the user with the provided credentials.
// Both methods provide feedback via `SnackBar` to inform the user of success or failure.

<-- END_MAIN -->
```
<-- START_DESCRIPTION -->

# Twilio Chat Conversation Flutter Package
=============================================

The `twilio_chat_conversation` Flutter package provides a simple and efficient way to integrate Twilio's chat conversation services into your Flutter application. This package allows you to create, manage, and participate in chat conversations with multiple users.

## When to Use This Package
---------------------------

This package is ideal for applications that require real-time chat conversations, such as:

* Customer support chatbots
* Group chat applications
* Live event discussions
* Social media platforms

## Features
------------

* Create and manage chat conversations
* Send and receive messages in real-time
* Support for multiple users and channels
* Customizable chat UI components

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Configuration
-------------------------

To use the `twilio_chat_conversation` package, follow these steps:

### Step 1: Add the Package to Your Flutter Project

Add the following dependency to your `pubspec.yaml` file:
```yml
dependencies:
  twilio_chat_conversation: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Configure Twilio Account

Create a Twilio account and obtain your account SID and auth token. You can find these values in the Twilio console.

### Step 3: Initialize the Package

Import the package and initialize it with your Twilio account credentials:
```dart
import 'package:twilio_chat_conversation/twilio_chat_conversation.dart';

void main() {
  TwilioChatConversation.init(
    accountSid: 'your_account_sid',
    authToken: 'your_auth_token',
  );
  runApp(MyApp());
}
```
### Step 4: Create a Chat Conversation

Create a new chat conversation using the `createConversation` method:
```dart
TwilioChatConversation.createConversation(
  title: 'My Chat Conversation',
  friendlyName: 'my_chat_conversation',
).then((conversation) {
  print('Conversation created: ${conversation.sid}');
});
```
### Platform-Specific Details

* Android: Add the following permissions to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.INTERNET" />
<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
```
* iOS: Add the following lines to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:twilio_chat_conversation/twilio_chat_conversation.dart';

void main() {
  TwilioChatConversation.init(
    accountSid: 'your_account_sid',
    authToken: 'your_auth_token',
  );
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final _conversationTextController = TextEditingController();
  String _conversationSid = '';

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Twilio Chat Conversation Demo',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Twilio Chat Conversation Demo'),
        ),
        body: Column(
          children: [
            // Create conversation button
            ElevatedButton(
              onPressed: _createConversation,
              child: Text('Create Conversation'),
            ),
            // Conversation text field
            TextField(
              controller: _conversationTextController,
              decoration: InputDecoration(
                labelText: 'Conversation Text',
              ),
            ),
            // Send message button
            ElevatedButton(
              onPressed: _sendMessage,
              child: Text('Send Message'),
            ),
            // Conversation SID text
            Text('Conversation SID: $_conversationSid'),
          ],
        ),
      ),
    );
  }

  // Create conversation function
  Future<void> _createConversation() async {
    final conversation = await TwilioChatConversation.createConversation(
      title: 'My Chat Conversation',
      friendlyName: 'my_chat_conversation',
    );
    setState(() {
      _conversationSid = conversation.sid;
    });
  }

  // Send message function
  Future<void> _sendMessage() async {
    await TwilioChatConversation.sendMessage(
      conversationSid: _conversationSid,
      messageText: _conversationTextController.text,
    );
  }
}

// Application flow:
// 1. The user clicks the "Create Conversation" button, which calls the `_createConversation` function.
// 2. The `_createConversation` function creates a new conversation using the `TwilioChatConversation.createConversation` method.
// 3. The conversation SID is stored in the `_conversationSid` variable and displayed on the screen.
// 4. The user types a message in the text field and clicks the "Send Message" button, which calls the `_sendMessage` function.
// 5. The `_sendMessage` function sends the message to the conversation using the `TwilioChatConversation.sendMessage` method.
```

// Final summary:
// The code creates a simple chat application that allows users to create conversations and send messages.
// The application uses the `twilio_chat_conversation` package to interact with the Twilio Chat API.
// The application flow is as follows: create conversation, store conversation SID, send message.
<-- END_MAIN -->
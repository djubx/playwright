```markdown
<!-- START_DESCRIPTION -->
# Geocoder2 Flutter Package

The **geocoder2** package is a powerful tool for Flutter developers that simplifies the process of converting between geographic coordinates (latitude and longitude) and human-readable addresses. This package is particularly useful in applications that require location-based services, such as mapping, delivery, or travel apps.

## When to Use Geocoder2
- **Location-Based Services**: When you need to display user locations on a map.
- **Address Lookup**: For applications that require users to input or select addresses.
- **Reverse Geocoding**: To convert GPS coordinates into a readable address.

## Key Features
- **Forward Geocoding**: Convert addresses into geographic coordinates.
- **Reverse Geocoding**: Convert geographic coordinates into addresses.
- **Multiple Providers**: Supports various geocoding services, allowing flexibility in implementation.
- **Easy Integration**: Simple API that integrates seamlessly with Flutter applications.

With these features, the geocoder2 package is an essential tool for any Flutter developer looking to implement geocoding functionalities in their applications.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Geocoder2

## Installation
To use the geocoder2 package in your Flutter project, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  geocoder2: ^2.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run `flutter pub get` to install the package.

## Platform-Specific Configuration

### Android
1. Open `android/app/build.gradle`.
2. Ensure that you have the following permissions in your `AndroidManifest.xml`:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>
<uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION"/>
```

### iOS
1. Open `ios/Runner/Info.plist`.
2. Add the following keys to request location permissions:

```xml
<key>NSLocationWhenInUseUsageDescription</key>
<string>We need your location to show nearby places.</string>
<key>NSLocationAlwaysUsageDescription</key>
<string>We need your location to show nearby places.</string>
```

## Using Geocoder2
To use the geocoder2 package, you can create an instance of the `Geocoder` class and call its methods for geocoding and reverse geocoding.

```dart
import 'package:geocoder2/geocoder2.dart';

class RealFlutter {
  void getCoordinates(String address) async {
    // Forward geocoding: Convert address to coordinates
    var coordinates = await Geocoder2.getCoordinatesFromAddress(address);
    print('Latitude: ${coordinates.latitude}, Longitude: ${coordinates.longitude}');
  }

  void getAddress(double latitude, double longitude) async {
    // Reverse geocoding: Convert coordinates to address
    var address = await Geocoder2.getAddressFromCoordinates(latitude, longitude);
    print('Address: ${address.address}');
  }
}
```

This setup allows you to easily convert between addresses and coordinates, making it a versatile tool for location-based applications.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Geocoder2 in a Flutter App

```dart
import 'package:flutter/material.dart';
import 'package:geocoder2/geocoder2.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Geocoder2 Example',
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  String _address = '';
  double _latitude = 0.0;
  double _longitude = 0.0;

  // Method to get coordinates from an address
  void _getCoordinates() async {
    var coordinates = await Geocoder2.getCoordinatesFromAddress(_address);
    setState(() {
      _latitude = coordinates.latitude; // Update latitude
      _longitude = coordinates.longitude; // Update longitude
    });
  }

  // Method to get address from coordinates
  void _getAddress() async {
    var address = await Geocoder2.getAddressFromCoordinates(_latitude, _longitude);
    setState(() {
      _address = address.address; // Update address
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Geocoder2 Example'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            TextField(
              decoration: InputDecoration(labelText: 'Enter Address'),
              onChanged: (value) {
                _address = value; // Update address from input
              },
            ),
            ElevatedButton(
              onPressed: _getCoordinates, // Get coordinates when pressed
              child: Text('Get Coordinates'),
            ),
            Text('Latitude: $_latitude, Longitude: $_longitude'),
            ElevatedButton(
              onPressed: _getAddress, // Get address when pressed
              child: Text('Get Address'),
            ),
            Text('Address: $_address'),
          ],
        ),
      ),
    );
  }
}
```

// The above code creates a simple Flutter application that demonstrates the use of the geocoder2 package.
// 
// 1. The app starts with a `MyApp` class that sets up the MaterialApp and home widget.
// 2. The `RealFlutter` class is a StatefulWidget that maintains the state of the address, latitude, and longitude.
// 3. The `_getCoordinates` method is called when the user presses the "Get Coordinates" button, converting the entered address into latitude and longitude.
// 4. The `_getAddress` method is called when the user presses the "Get Address" button, converting the latitude and longitude back into a human-readable address.
// 5. The UI consists of a TextField for inputting the address, buttons for triggering the geocoding functions, and Text widgets to display the results.

```
<!-- END_MAIN -->
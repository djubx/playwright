```markdown
<!-- START_DESCRIPTION -->
# e_invoice_generator Flutter Package

The `e_invoice_generator` package is a powerful tool designed for Flutter developers who need to create and manage electronic invoices within their applications. This package simplifies the process of generating invoices in various formats, making it an essential asset for businesses that require invoicing capabilities.

## When to Use This Package
You should consider using the `e_invoice_generator` package when:
- You need to generate invoices dynamically based on user input.
- You want to provide users with downloadable invoices in PDF format.
- Your application requires integration with payment systems where invoicing is necessary.

## Features
- **PDF Generation**: Create invoices in PDF format that can be easily shared or printed.
- **Customizable Templates**: Use customizable templates to match your brand's identity.
- **Data Management**: Manage invoice data efficiently, including items, prices, and customer information.
- **Multi-Platform Support**: Works seamlessly on both Android and iOS platforms.

The `e_invoice_generator` package is ideal for e-commerce applications, service-based businesses, and any application that requires invoicing functionality.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using e_invoice_generator

## Installation
To get started with the `e_invoice_generator` package, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  e_invoice_generator: ^latest_version
```

Make sure to replace `^latest_version` with the latest version available on [pub.dev](https://pub.dev/packages/e_invoice_generator).

## Platform-Specific Configuration

### Android
1. Ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:
   ```groovy
   android {
       ...
       defaultConfig {
           ...
           minSdkVersion 21
           ...
       }
   }
   ```

### iOS
1. Open your `ios/Runner/Info.plist` file and add the following permissions if you plan to save invoices to the device:
   ```xml
   <key>NSPhotoLibraryUsageDescription</key>
   <string>We need access to your photo library to save invoices.</string>
   ```

## Basic Usage
To use the `e_invoice_generator`, you will need to import the package and create an instance of the main class. Hereâ€™s a simple example of how to generate an invoice:

```dart
import 'package:flutter/material.dart';
import 'package:e_invoice_generator/e_invoice_generator.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Invoice Generator')),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              // Create an instance of the invoice generator
              final invoice = InvoiceGenerator();

              // Add invoice details
              invoice.addItem('Product 1', 2, 50.0);
              invoice.addItem('Product 2', 1, 100.0);

              // Generate the PDF
              invoice.generatePDF();
            },
            child: Text('Generate Invoice'),
          ),
        ),
      ),
    );
  }
}
```

In this example, we create a simple Flutter application with a button that generates an invoice when pressed. The `InvoiceGenerator` class is used to manage the invoice data and generate the PDF.

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of e_invoice_generator

```dart
import 'package:flutter/material.dart';
import 'package:e_invoice_generator/e_invoice_generator.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Invoice Generator')),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              // Create an instance of the invoice generator
              final invoice = InvoiceGenerator();

              // Add invoice details
              invoice.addItem('Product 1', 2, 50.0); // Adding first item
              invoice.addItem('Product 2', 1, 100.0); // Adding second item

              // Generate the PDF
              invoice.generatePDF(); // This will create the PDF invoice
            },
            child: Text('Generate Invoice'), // Button to trigger invoice generation
          ),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the RealFlutter widget, which builds a MaterialApp.
// 2. Inside the MaterialApp, a Scaffold is created with an AppBar and a Center widget.
// 3. The Center widget contains an ElevatedButton.
// 4. When the button is pressed, an instance of InvoiceGenerator is created.
// 5. Two items are added to the invoice using the addItem method.
// 6. Finally, the generatePDF method is called to create the invoice in PDF format.
// 7. The generated PDF can then be shared or saved as per the implementation in the package.
```
<!-- END_MAIN -->
``` 

In summary, the `e_invoice_generator` package provides a straightforward way to create and manage invoices in Flutter applications. The provided example demonstrates how to set up the package, generate an invoice, and explains the flow of the application step-by-step. This package is particularly useful for developers looking to integrate invoicing capabilities into their apps efficiently.
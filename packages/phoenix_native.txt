<-- START_DESCRIPTION -->

# Phoenix Native Flutter Package
=====================================

The `phoenix_native` Flutter package is a powerful tool for creating native-like experiences in Flutter applications. It provides a set of features that allow developers to create complex, native-like UI components and interactions, while still leveraging the ease and flexibility of Flutter.

## When to Use

The `phoenix_native` package is ideal for applications that require a high level of customization and native-like performance. This includes applications with complex UI components, such as:

* Custom navigation bars and tab bars
* Complex gesture recognition and handling
* Native-like scrolling and physics
* Custom keyboard and input handling

## Features

The `phoenix_native` package provides a range of features, including:

* Customizable navigation bars and tab bars
* Advanced gesture recognition and handling
* Native-like scrolling and physics
* Custom keyboard and input handling
* Support for platform-specific features, such as iOS's `UIScrollView` and Android's `RecyclerView`

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up Phoenix Native

To use the `phoenix_native` package, follow these steps:

### Step 1: Add the Package to Your Pubspec

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  phoenix_native: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:phoenix_native/phoenix_native.dart';
```
### Step 3: Configure Platform-Specific Features

To use platform-specific features, such as iOS's `UIScrollView` and Android's `RecyclerView`, you need to configure them in your `Info.plist` and `AndroidManifest.xml` files.

For iOS, add the following lines to your `Info.plist` file:
```xml
<key>UIScrollView</key>
<dict>
  <key>Enabled</key>
  <true/>
</dict>
```
For Android, add the following lines to your `AndroidManifest.xml` file:
```xml
<application>
  <meta-data
    android:name="android.support.v7.widget.RecyclerView"
    android:value="true" />
</application>
```
### Step 4: Use the Package

Now you can use the `phoenix_native` package in your Flutter application.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:phoenix_native/phoenix_native.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Step 1: Create a PhoenixNative instance
  final _phoenixNative = PhoenixNative();

  // Step 2: Configure the navigation bar
  final _navigationBar = _phoenixNative.navigationBar(
    title: 'Real Flutter',
    backgroundColor: Colors.blue,
  );

  // Step 3: Create a custom tab bar
  final _tabBar = _phoenixNative.tabBar(
    items: [
      TabItem(
        icon: Icons.home,
        title: 'Home',
      ),
      TabItem(
        icon: Icons.settings,
        title: 'Settings',
      ),
    ],
  );

  // Step 4: Create a custom scrolling list
  final _scrollingList = _phoenixNative.scrollingList(
    children: [
      ListTile(
        title: Text('Item 1'),
      ),
      ListTile(
        title: Text('Item 2'),
      ),
      ListTile(
        title: Text('Item 3'),
      ),
    ],
  );

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Real Flutter',
      home: Scaffold(
        // Step 5: Use the navigation bar
        appBar: _navigationBar,

        // Step 6: Use the tab bar
        bottomNavigationBar: _tabBar,

        // Step 7: Use the scrolling list
        body: _scrollingList,
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user launches the application.
// 2. The PhoenixNative instance is created.
// 3. The navigation bar is configured.
// 4. The custom tab bar is created.
// 5. The custom scrolling list is created.
// 6. The navigation bar, tab bar, and scrolling list are used in the Scaffold.
// 7. The user interacts with the application.
```

// In summary, the code flows as follows:
// The user launches the application, which creates a PhoenixNative instance.
// The navigation bar, tab bar, and scrolling list are then created and used in the Scaffold.
// The user interacts with the application, using the navigation bar, tab bar, and scrolling list.

<-- END_MAIN -->
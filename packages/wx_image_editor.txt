```markdown
<!-- START_DESCRIPTION -->
# wx_image_editor Flutter Package

The `wx_image_editor` package is a powerful tool for Flutter developers looking to implement image editing capabilities within their applications. This package provides a user-friendly interface for editing images, allowing users to perform various operations such as cropping, rotating, and applying filters. 

## When to Use wx_image_editor
You might consider using `wx_image_editor` in scenarios such as:
- Building a photo editing app where users can modify their images before sharing.
- Implementing image upload features that require users to adjust their images.
- Creating a social media application that allows users to customize their profile pictures.

## Key Features
- **Image Cropping**: Easily crop images to desired dimensions.
- **Rotation and Flipping**: Rotate images in 90-degree increments and flip them horizontally or vertically.
- **Filters and Effects**: Apply various filters to enhance images.
- **User-Friendly Interface**: Intuitive UI that simplifies the editing process for users.

Overall, `wx_image_editor` is an excellent choice for developers looking to add robust image editing features to their Flutter applications.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up wx_image_editor

In this section, we will walk through the setup process for the `wx_image_editor` package and demonstrate how to use it in your Flutter project.

## Installation

To add the `wx_image_editor` package to your Flutter project, include it in your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  wx_image_editor: ^latest_version
```

Make sure to replace `latest_version` with the most recent version available on [pub.dev](https://pub.dev/packages/wx_image_editor).

## Platform-Specific Configuration

### Android
For Android, ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
        ...
    }
}
```

### iOS
For iOS, you may need to add permissions to your `Info.plist` file to access the photo library:

```xml
<key>NSPhotoLibraryUsageDescription</key>
<string>We need access to your photo library to edit images.</string>
```

## Using wx_image_editor

To use the `wx_image_editor` package, you can create a simple Flutter application that allows users to select an image and edit it. Below is a basic example of how to implement this functionality.

```dart
import 'package:flutter/material.dart';
import 'package:wx_image_editor/wx_image_editor.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Image Editor Example',
      home: ImageEditorScreen(),
    );
  }
}

class ImageEditorScreen extends StatefulWidget {
  @override
  _ImageEditorScreenState createState() => _ImageEditorScreenState();
}

class _ImageEditorScreenState extends State<ImageEditorScreen> {
  // Variable to hold the selected image
  String? _imagePath;

  // Function to open the image editor
  void _editImage() async {
    // Open the image editor and wait for the edited image path
    final editedImagePath = await Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => ImageEditor(
          imagePath: _imagePath!,
        ),
      ),
    );

    // Update the state with the edited image path
    if (editedImagePath != null) {
      setState(() {
        _imagePath = editedImagePath;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Image Editor'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            // Display the selected image
            if (_imagePath != null)
              Image.file(File(_imagePath!)),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _editImage,
              child: Text('Edit Image'),
            ),
          ],
        ),
      ),
    );
  }
}
```
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
```dart
// The main function initializes the Flutter app
void main() {
  runApp(RealFlutter());
}

// The RealFlutter class is the root widget of the application
class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Image Editor Example',
      home: ImageEditorScreen(), // The home screen is the ImageEditorScreen
    );
  }
}

// The ImageEditorScreen is a StatefulWidget that manages the image editing process
class ImageEditorScreen extends StatefulWidget {
  @override
  _ImageEditorScreenState createState() => _ImageEditorScreenState();
}

// The state class for ImageEditorScreen
class _ImageEditorScreenState extends State<ImageEditorScreen> {
  String? _imagePath; // Variable to hold the selected image path

  // Function to open the image editor
  void _editImage() async {
    // Navigate to the ImageEditor and wait for the edited image path
    final editedImagePath = await Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => ImageEditor(
          imagePath: _imagePath!, // Pass the selected image path
        ),
      ),
    );

    // Update the state with the edited image path if not null
    if (editedImagePath != null) {
      setState(() {
        _imagePath = editedImagePath; // Update the image path
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Image Editor'), // App bar title
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            // Display the selected image if available
            if (_imagePath != null)
              Image.file(File(_imagePath!)), // Show the image
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _editImage, // Call the edit image function on button press
              child: Text('Edit Image'), // Button text
            ),
          ],
        ),
      ),
    );
  }
}
```
<!-- END_MAIN -->

// The application flow begins with the `main` function, which runs the `RealFlutter` widget. The `RealFlutter` widget sets up the MaterialApp and specifies `ImageEditorScreen` as the home screen. 

// In `ImageEditorScreen`, we manage the state of the selected image using `_imagePath`. When the user presses the "Edit Image" button, the `_editImage` function is called, which navigates to the `ImageEditor` screen, passing the current image path. 

// After editing, if the user returns with a new image path, the state is updated to reflect the edited image, which is then displayed on the screen. This flow allows users to select, edit, and view images seamlessly within the app.
```
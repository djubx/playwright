<-- START_DESCRIPTION -->

Wave Linear Progress Indicator
==============================

The `wave_linear_progress_indicator` Flutter package is a customizable progress indicator that displays a wave-like animation. It's perfect for adding a visually appealing loading animation to your app.

### When to use this package

* When you want to display a loading animation that's more engaging than a traditional circular progress indicator.
* When you need a customizable progress indicator that can fit your app's design.

### Features

* Customizable wave color, height, and duration.
* Supports both determinate and indeterminate progress modes.
* Can be used in both light and dark themes.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
---------------

### Step 1: Add the package to your pubspec.yaml file

```yml
dependencies:
  wave_linear_progress_indicator: ^1.0.0
```

### Step 2: Import the package in your Dart file

```dart
import 'package:wave_linear_progress_indicator/wave_linear_progress_indicator.dart';
```

### Step 3: Use the `WaveLinearProgressIndicator` widget

```dart
WaveLinearProgressIndicator(
  progress: 0.5, // determinate progress value (0.0 to 1.0)
  waveColor: Colors.blue,
  backgroundColor: Colors.grey,
  height: 20,
)
```

### Platform-specific details

* Android: No additional configuration required.
* iOS: No additional configuration required.

### Optimizations

* For better performance, use a `Container` widget to wrap the `WaveLinearProgressIndicator` widget and set its `width` property to a fixed value.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:wave_linear_progress_indicator/wave_linear_progress_indicator.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  double _progress = 0.0;

  @override
  void initState() {
    super.initState();
    _animateProgress();
  }

  void _animateProgress() {
    Future.delayed(Duration(milliseconds: 1000), () {
      setState(() {
        _progress += 0.1;
        if (_progress < 1.0) {
          _animateProgress();
        }
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Wave Linear Progress Indicator Demo'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              WaveLinearProgressIndicator(
                // determinate progress value (0.0 to 1.0)
                progress: _progress,
                waveColor: Colors.blue,
                backgroundColor: Colors.grey,
                height: 20,
              ),
              SizedBox(height: 20),
              Text('Progress: ${(_progress * 100).toInt()}%'),
            ],
          ),
        ),
      ),
    );
  }
}

// Application flow:
// 1. The app starts and the `_progress` variable is initialized to 0.0.
// 2. The `_animateProgress` function is called, which increments the `_progress` variable by 0.1 every second.
// 3. The `WaveLinearProgressIndicator` widget is updated with the new `_progress` value.
// 4. The progress animation is displayed on the screen, showing the wave-like animation.
// 5. The progress value is displayed as a percentage below the progress indicator.
```

// Final summary: The code flows by initializing the `_progress` variable, animating the progress value, and updating the `WaveLinearProgressIndicator` widget. The progress animation is displayed on the screen, showing the wave-like animation, and the progress value is displayed as a percentage below the progress indicator.

<-- END_MAIN -->
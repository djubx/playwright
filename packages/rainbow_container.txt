<-- START_DESCRIPTION -->

# Rainbow Container Flutter Package
=====================================

The `rainbow_container` Flutter package is a customizable and easy-to-use package that allows developers to create beautiful, gradient-colored containers for their Flutter applications. This package is perfect for adding a pop of color and visual interest to your app's UI.

### When to Use This Package

* When you want to add a gradient-colored background to a container or widget.
* When you want to create a visually appealing and modern UI for your app.
* When you want a customizable and easy-to-use solution for creating gradient-colored containers.

### Features

* Customizable gradient colors and direction.
* Support for both vertical and horizontal gradients.
* Easy-to-use API with minimal setup required.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Using the Rainbow Container Package
=============================================

### Step 1: Add the Package to Your Pubspec.yaml File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  rainbow_container: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:rainbow_container/rainbow_container.dart';
```
### Step 3: Use the RainbowContainer Widget

Use the `RainbowContainer` widget to create a gradient-colored container:
```dart
RainbowContainer(
  child: Text('Hello, World!'),
  gradient: LinearGradient(
    colors: [Colors.red, Colors.blue],
    begin: Alignment.topLeft,
    end: Alignment.bottomRight,
  ),
)
```
### Platform-Specific Details

* For Android, make sure to add the following line to your `android/app/src/main/AndroidManifest.xml` file:
```xml
<application android:hardwareAccelerated="true">
```
* For iOS, make sure to add the following line to your `ios/Runner/Info.plist` file:
```xml
<key>UIHardwareAcceleration</key>
<true/>
```
### Required Configurations and Optimizations

* Make sure to use the `RainbowContainer` widget as a child of a `Material` widget.
* Use the `gradient` property to customize the gradient colors and direction.
* Use the `child` property to add content to the container.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:rainbow_container/rainbow_container.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Rainbow Container Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Rainbow Container Demo'),
      ),
      body: Center(
        child: RainbowContainer(
          // Step 1: Create a RainbowContainer widget
          child: Text(
            // Step 2: Add content to the container
            'Hello, World!',
            style: TextStyle(fontSize: 24),
          ),
          gradient: LinearGradient(
            // Step 3: Customize the gradient colors and direction
            colors: [Colors.red, Colors.blue],
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
          ),
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user runs the app and is presented with a Material app.
// 2. The app's home page is a Scaffold with an AppBar and a body.
// 3. The body of the Scaffold contains a Center widget with a RainbowContainer child.
// 4. The RainbowContainer widget has a Text child with the text 'Hello, World!'.
// 5. The RainbowContainer widget has a LinearGradient gradient with colors red and blue.
// 6. The gradient is displayed in the container, giving it a rainbow effect.

// Summary: This code creates a Material app with a home page that displays a RainbowContainer widget.
// The RainbowContainer widget has a Text child and a LinearGradient gradient, giving it a rainbow effect.
```

<-- END_MAIN -->
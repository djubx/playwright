```markdown
<-- START_DESCRIPTION -->

# Highlight Text Flutter Package: An Overview

The `highlight_text` Flutter package is a powerful tool designed to enhance text display in Flutter applications by allowing developers to highlight specific parts of a text string. This package is particularly useful in scenarios where you need to emphasize certain words or phrases within a larger body of text, such as search results, code snippets, or educational content.

## When to Use the Highlight Text Package

- **Search Results**: Highlight search terms within a list of results to make them stand out.
- **Educational Apps**: Emphasize key terms or concepts in educational content.
- **Code Editors**: Highlight syntax in code editors or viewers.
- **Text Analysis**: Display highlighted keywords in text analysis applications.

## Features

- **Customizable Highlighting**: Choose different colors, styles, and weights for highlighted text.
- **Rich Text Support**: Integrates seamlessly with Flutter's `RichText` widget.
- **Flexible Matching**: Highlight text based on exact matches, regex, or custom logic.
- **Cross-Platform**: Works on both Android and iOS platforms.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Highlight Text Package

In this tutorial, we will walk through the process of setting up and using the `highlight_text` package in a Flutter application. We will cover platform-specific configurations for both Android and iOS.

## Step 1: Add the Package to Your Project

First, add the `highlight_text` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  highlight_text: ^1.0.0
```

Run `flutter pub get` to install the package.

## Step 2: Import the Package

In your Dart file, import the package:

```dart
import 'package:highlight_text/highlight_text.dart';
```

## Step 3: Basic Usage

To use the `highlight_text` package, you need to define the words you want to highlight and their corresponding styles:

```dart
final Map<String, HighlightedWord> highlights = {
  'Flutter': HighlightedWord(
    onTap: () => print('Flutter tapped!'),
    textStyle: TextStyle(
      color: Colors.blue,
      fontWeight: FontWeight.bold,
    ),
  ),
  'highlight': HighlightedWord(
    onTap: () => print('Highlight tapped!'),
    textStyle: TextStyle(
      color: Colors.red,
      fontStyle: FontStyle.italic,
    ),
  ),
};
```

## Step 4: Platform-Specific Configurations

### Android

Ensure your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```gradle
android {
    defaultConfig {
        minSdkVersion 21
    }
}
```

### iOS

No specific configurations are required for iOS, but ensure your deployment target is set to iOS 9.0 or higher in your `ios/Podfile`:

```ruby
platform :ios, '9.0'
```

## Step 5: Using the RealFlutter Class

Create a widget that uses the `RealFlutter` class to display highlighted text:

```dart
class RealFlutter extends StatelessWidget {
  final String text;
  final Map<String, HighlightedWord> highlights;

  RealFlutter({required this.text, required this.highlights});

  @override
  Widget build(BuildContext context) {
    return TextHighlight(
      text: text,
      words: highlights,
      textStyle: TextStyle(
        fontSize: 18.0,
        color: Colors.black,
      ),
    );
  }
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

# Complete Example: Highlight Text in Flutter

Below is a complete example of a Flutter application using the `highlight_text` package. This example demonstrates how to highlight specific words within a text string.

```dart
import 'package:flutter/material.dart';
import 'package:highlight_text/highlight_text.dart';

// Main function to run the app
void main() {
  runApp(MyApp());
}

// MyApp is the root widget of the application
class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Highlight Text Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: HighlightTextDemo(),
    );
  }
}

// HighlightTextDemo is the main screen of the app
class HighlightTextDemo extends StatelessWidget {
  // Define the text to be displayed
  final String text = 'Learn how to highlight text in Flutter using the highlight_text package.';

  // Define the words to be highlighted and their styles
  final Map<String, HighlightedWord> highlights = {
    'highlight': HighlightedWord(
      onTap: () => print('Highlight tapped!'),
      textStyle: TextStyle(
        color: Colors.red,
        fontWeight: FontWeight.bold,
      ),
    ),
    'Flutter': HighlightedWord(
      onTap: () => print('Flutter tapped!'),
      textStyle: TextStyle(
        color: Colors.blue,
        fontStyle: FontStyle.italic,
      ),
    ),
  };

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Highlight Text Demo'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: RealFlutter(
          text: text,
          highlights: highlights,
        ),
      ),
    );
  }
}

// RealFlutter widget displays the highlighted text
class RealFlutter extends StatelessWidget {
  final String text;
  final Map<String, HighlightedWord> highlights;

  RealFlutter({required this.text, required this.highlights});

  @override
  Widget build(BuildContext context) {
    return TextHighlight(
      text: text,
      words: highlights,
      textStyle: TextStyle(
        fontSize: 18.0,
        color: Colors.black,
      ),
    );
  }
}
```

// The application starts with the `main` function, which runs `MyApp`.
// `MyApp` is a stateless widget that sets up the MaterialApp and its theme.
// The home screen is `HighlightTextDemo`, which contains the text to be highlighted.
// The `highlights` map defines which words to highlight and their styles.
// `RealFlutter` is a custom widget that uses `TextHighlight` to display the text with highlights.
// The `TextHighlight` widget takes the text and highlights map, applying styles to specified words.
// When a highlighted word is tapped, it triggers the associated `onTap` callback, printing a message to the console.

<-- END_MAIN -->
```
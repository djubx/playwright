<-- START_DESCRIPTION -->

# Another Telephony Flutter Package
=====================================

The `another_telephony` Flutter package provides a simple and efficient way to handle telephony-related tasks in your Flutter application. This package allows you to make phone calls, send SMS messages, and access device contact information.

## When to Use This Package
---------------------------

You can use this package in various scenarios, such as:

* Making phone calls from your app
* Sending SMS messages from your app
* Accessing device contact information
* Creating a custom dialer or contact app

## Features
------------

* Make phone calls using the `makeCall` method
* Send SMS messages using the `sendSms` method
* Access device contact information using the `getContacts` method
* Supports both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
==================

## Step 1: Add the Package to Your Project
-----------------------------------------

Add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  another_telephony: ^1.0.0
```

## Step 2: Import the Package
-----------------------------

Import the package in your Dart file:

```dart
import 'package:another_telephony/another_telephony.dart';
```

## Step 3: Make a Phone Call
---------------------------

Use the `makeCall` method to make a phone call:

```dart
await AnotherTelephony().makeCall('1234567890');
```

## Step 4: Send an SMS Message
---------------------------

Use the `sendSms` method to send an SMS message:

```dart
await AnotherTelephony().sendSms('1234567890', 'Hello, World!');
```

## Step 5: Access Device Contact Information
-----------------------------------------

Use the `getContacts` method to access device contact information:

```dart
final contacts = await AnotherTelephony().getContacts();
```

## Platform-Specific Details
---------------------------

### Android

* Add the following permission to your `AndroidManifest.xml` file:

```xml
<uses-permission android:name="android.permission.CALL_PHONE" />
<uses-permission android:name="android.permission.SEND_SMS" />
<uses-permission android:name="android.permission.READ_CONTACTS" />
```

### iOS

* Add the following lines to your `Info.plist` file:

```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:another_telephony/another_telephony.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatefulWidget {
  @override
  _MyAppState createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  final _phoneNumberController = TextEditingController();
  final _smsMessageController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Another Telephony Example'),
        ),
        body: Padding(
          padding: const EdgeInsets.all(20.0),
          child: Column(
            children: [
              TextField(
                controller: _phoneNumberController,
                decoration: InputDecoration(
                  labelText: 'Phone Number',
                  border: OutlineInputBorder(),
                ),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () async {
                  // Make a phone call
                  await AnotherTelephony().makeCall(_phoneNumberController.text);
                },
                child: Text('Make Call'),
              ),
              SizedBox(height: 20),
              TextField(
                controller: _smsMessageController,
                decoration: InputDecoration(
                  labelText: 'SMS Message',
                  border: OutlineInputBorder(),
                ),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () async {
                  // Send an SMS message
                  await AnotherTelephony().sendSms(_phoneNumberController.text, _smsMessageController.text);
                },
                child: Text('Send SMS'),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () async {
                  // Access device contact information
                  final contacts = await AnotherTelephony().getContacts();
                  print(contacts);
                },
                child: Text('Get Contacts'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user enters a phone number in the text field.
// 2. The user clicks the "Make Call" button, which makes a phone call to the entered number using the `makeCall` method.
// 3. The user enters an SMS message in the text field.
// 4. The user clicks the "Send SMS" button, which sends the entered SMS message to the entered phone number using the `sendSms` method.
// 5. The user clicks the "Get Contacts" button, which accesses device contact information using the `getContacts` method and prints it to the console.

// This example demonstrates the usage of the `another_telephony` package to make phone calls, send SMS messages, and access device contact information.

<-- END_MAIN -->
```
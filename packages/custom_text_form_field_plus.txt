<-- START_DESCRIPTION -->

# Custom Text Form Field Plus Flutter Package
=============================================

The `custom_text_form_field_plus` Flutter package provides a customizable text form field widget with additional features such as validation, formatting, and styling. This package is ideal for developers who want to create complex text input fields with ease.

### When to Use This Package

* When you need to create a text input field with custom validation rules.
* When you want to format the text input field with specific styles or masks.
* When you need to handle complex text input field logic, such as password confirmation or email validation.

### Features

* Customizable validation rules
* Text formatting and masking
* Customizable styling and themes
* Support for password confirmation and email validation

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Package
=============================================

### Step 1: Add the Package to Your Project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  custom_text_form_field_plus: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:custom_text_form_field_plus/custom_text_form_field_plus.dart';
```
### Step 3: Create a Custom Text Form Field

Create a `CustomTextFormFieldPlus` widget and customize its properties:
```dart
CustomTextFormFieldPlus(
  labelText: 'Email',
  hintText: 'example@example.com',
  validator: (value) {
    if (value.isEmpty) {
      return 'Please enter an email';
    }
    if (!value.contains('@')) {
      return 'Invalid email';
    }
    return null;
  },
)
```
### Platform-Specific Details

* For Android, you need to add the following line to your `AndroidManifest.xml` file:
```xml
<application
  ...
  android:hardwareAccelerated="true"
  ...
>
```
* For iOS, you need to add the following line to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```
### Required Configurations and Optimizations

* Make sure to handle the `onChanged` event to update the form field value.
* Use the `autovalidate` property to enable or disable auto-validation.
* Use the `style` property to customize the text style.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:custom_text_form_field_plus/custom_text_form_field_plus.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Custom Text Form Field Plus Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _formKey = GlobalKey<FormState>();
  String _email = '';

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Custom Text Form Field Plus Demo'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              CustomTextFormFieldPlus(
                labelText: 'Email',
                hintText: 'example@example.com',
                validator: (value) {
                  if (value.isEmpty) {
                    return 'Please enter an email';
                  }
                  if (!value.contains('@')) {
                    return 'Invalid email';
                  }
                  return null;
                },
                onChanged: (value) {
                  setState(() {
                    _email = value;
                  });
                },
              ),
              SizedBox(height: 16),
              ElevatedButton(
                onPressed: () {
                  if (_formKey.currentState.validate()) {
                    print('Email: $_email');
                  }
                },
                child: Text('Submit'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and is presented with a form containing a custom text form field.
// 2. The user enters an email address and the form field validates the input.
// 3. If the input is valid, the form field updates the email value.
// 4. When the user submits the form, the app checks if the form is valid.
// 5. If the form is valid, the app prints the email value to the console.

// In summary, the code flows as follows:
// 1. The user interacts with the form field, entering an email address.
// 2. The form field validates the input and updates the email value.
// 3. The user submits the form, triggering the app to check if the form is valid.
// 4. If the form is valid, the app prints the email value to the console.

```

<-- END_MAIN -->
# Flutter Package: imagewidget

<!-- START_DESCRIPTION -->
## Description

The `imagewidget` package is a powerful Flutter library designed to simplify the process of displaying images in your Flutter applications. It provides a range of features that enhance image handling, including support for various image formats, caching, and customizable loading indicators. This package is particularly useful when you need to display images from the network or local storage while ensuring optimal performance and user experience.

### When to Use `imagewidget`

- When you need to load images from the internet with caching capabilities.
- When you want to display local images with additional customization options.
- When you require a simple way to handle image loading states (e.g., loading, error).
- When you want to optimize image rendering for better performance.

### Key Features

- **Network Image Support**: Easily load images from URLs with built-in caching.
- **Local Image Support**: Display images stored in the local assets or file system.
- **Customizable Loading Indicators**: Show loading spinners or placeholders while images are being fetched.
- **Error Handling**: Display error messages or fallback images if the image fails to load.
- **Responsive Design**: Automatically adjusts image size based on the device's screen size.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
## Tutorial

### Installation

To use the `imagewidget` package in your Flutter project, you need to add it to your `pubspec.yaml` file. Open the file and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  imagewidget: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command in your terminal to install the package:

```bash
flutter pub get
```

### Platform-Specific Configuration

#### Android

For Android, ensure that your `AndroidManifest.xml` file has the necessary permissions to access the internet. Open `android/app/src/main/AndroidManifest.xml` and add the following line inside the `<manifest>` tag:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
```

#### iOS

For iOS, you may need to configure your `Info.plist` file to allow arbitrary loads if you are loading images from non-secure URLs. Open `ios/Runner/Info.plist` and add the following:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

### Basic Usage

To use the `imagewidget` package, you can import it into your Dart file:

```dart
import 'package:imagewidget/imagewidget.dart';
```

You can then use the `ImageWidget` class to display images. Hereâ€™s a simple example:

```dart
ImageWidget(
  imageUrl: 'https://example.com/image.jpg',
  loadingIndicator: CircularProgressIndicator(),
  errorWidget: Icon(Icons.error),
)
```

This code snippet demonstrates how to load an image from a URL, show a loading indicator while the image is being fetched, and display an error icon if the image fails to load.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
## Complete Example

```dart
import 'package:flutter/material.dart';
import 'package:imagewidget/imagewidget.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'ImageWidget Example',
      home: Scaffold(
        appBar: AppBar(
          title: Text('ImageWidget Demo'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              // Using ImageWidget to load an image from a URL
              ImageWidget(
                imageUrl: 'https://example.com/image.jpg', // URL of the image
                loadingIndicator: CircularProgressIndicator(), // Loading indicator while fetching
                errorWidget: Icon(Icons.error), // Error widget if loading fails
              ),
              SizedBox(height: 20), // Space between images
              // Using ImageWidget to load a local asset image
              ImageWidget(
                imageUrl: 'assets/local_image.png', // Local asset image
                loadingIndicator: CircularProgressIndicator(), // Loading indicator
                errorWidget: Icon(Icons.error), // Error widget
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application starts with the main function, which runs the RealFlutter widget.
// The RealFlutter widget builds a MaterialApp with a title and a home Scaffold.
// Inside the Scaffold, an AppBar is created with the title 'ImageWidget Demo'.
// The body of the Scaffold contains a Center widget that centers its child.
// A Column widget is used to arrange the ImageWidgets vertically.
// The first ImageWidget loads an image from a URL, displaying a CircularProgressIndicator while loading and an error icon if it fails.
// The second ImageWidget loads a local asset image, also showing a loading indicator and an error icon if needed.
// This example demonstrates both network and local image loading capabilities of the imagewidget package.
```

<!-- END_MAIN -->

## Summary

In this blog post, we explored the `imagewidget` package, which simplifies image handling in Flutter applications. We covered the installation process, platform-specific configurations, and provided a complete example demonstrating how to use the package effectively. The application flow was explained through comments, highlighting how to load images from both network and local sources while managing loading states and errors. This package is a great choice for developers looking to enhance their image handling capabilities in Flutter.
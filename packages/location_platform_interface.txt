<-- START_DESCRIPTION -->

# Location Platform Interface
The `location_platform_interface` package provides a common interface for accessing location services on both Android and iOS platforms. It allows developers to easily integrate location-based features into their Flutter applications.

## When to Use
This package is useful when you need to access the device's location, such as:

* Getting the current location
* Requesting location permissions
* Listening for location updates
* Checking if location services are enabled

## Features
The `location_platform_interface` package provides the following features:

* A common interface for accessing location services on both Android and iOS platforms
* Support for getting the current location
* Support for requesting location permissions
* Support for listening for location updates
* Support for checking if location services are enabled

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
To use the `location_platform_interface` package, follow these steps:

## Step 1: Add the Package to Your Pubspec File
Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  location_platform_interface: ^1.0.0
```
## Step 2: Import the Package
Import the package in your Dart file:
```dart
import 'package:location_platform_interface/location_platform_interface.dart';
```
## Step 3: Request Location Permissions
Request location permissions using the `requestPermission` method:
```dart
await LocationPlatformInterface.instance.requestPermission();
```
## Step 4: Get the Current Location
Get the current location using the `getCurrentLocation` method:
```dart
final location = await LocationPlatformInterface.instance.getCurrentLocation();
```
## Step 5: Listen for Location Updates
Listen for location updates using the `onLocationChanged` stream:
```dart
LocationPlatformInterface.instance.onLocationChanged.listen((location) {
  // Handle location update
});
```
## Platform-Specific Details
### Android
On Android, you need to add the following permissions to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
<uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
```
### iOS
On iOS, you need to add the following lines to your `Info.plist` file:
```xml
<key>NSLocationWhenInUseUsageDescription</key>
<string>This app needs access to location to work properly</string>
<key>NSLocationAlwaysAndWhenInUseUsageDescription</key>
<string>This app needs access to location to work properly</string>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:location_platform_interface/location_platform_interface.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final _locationPlatformInterface = LocationPlatformInterface.instance;

  @override
  void initState() {
    super.initState();
    _requestPermission();
  }

  Future<void> _requestPermission() async {
    // Request location permissions
    await _locationPlatformInterface.requestPermission();
  }

  Future<void> _getCurrentLocation() async {
    // Get the current location
    final location = await _locationPlatformInterface.getCurrentLocation();
    print('Current location: $location');
  }

  Future<void> _listenForLocationUpdates() async {
    // Listen for location updates
    _locationPlatformInterface.onLocationChanged.listen((location) {
      print('Location update: $location');
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Location Platform Interface Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: _getCurrentLocation,
              child: Text('Get Current Location'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _listenForLocationUpdates,
              child: Text('Listen for Location Updates'),
            ),
          ],
        ),
      ),
    );
  }
}

// Application flow:
// 1. The app requests location permissions when it starts.
// 2. When the user grants permission, the app gets the current location.
// 3. The app listens for location updates and prints the new location to the console.
// 4. The user can tap the "Get Current Location" button to get the current location again.
// 5. The user can tap the "Listen for Location Updates" button to start listening for location updates again.

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Location Platform Interface Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}
```

<-- END_MAIN -->
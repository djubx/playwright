<-- START_DESCRIPTION -->

# Full Screen Image Flutter Package
The `full_screen_image` Flutter package is a powerful tool for displaying images in full screen mode. It provides a simple and efficient way to show images in full screen, with features like zooming, panning, and rotating.

## When to Use
This package is ideal for applications that require image viewing in full screen mode, such as:

* Image galleries
* Photo viewers
* Document scanners

## Features

* Full screen image display
* Zooming and panning
* Rotating
* Double tap to zoom in and out
* Swipe to dismiss

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
To use the `full_screen_image` package, follow these steps:

### Step 1: Add the Package to Your Project
Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  full_screen_image: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package
Import the package in your Dart file:
```dart
import 'package:full_screen_image/full_screen_image.dart';
```
### Step 3: Use the Package
Use the `FullScreenImage` widget to display an image in full screen mode:
```dart
FullScreenImage(
  image: Image.asset('assets/image.jpg'),
  backgroundColor: Colors.black,
)
```
### Platform-Specific Details

* Android: Make sure to add the following line to your `AndroidManifest.xml` file:
```xml
<application
  ...
  android:hardwareAccelerated="true"
  ...
>
```
* iOS: Make sure to add the following line to your `Info.plist` file:
```xml
<key>UIViewControllerBasedStatusBarAppearance</key>
<false/>
```
### Configurations and Optimizations

* You can customize the appearance of the full screen image by using the `backgroundColor` and `foregroundColor` properties.
* You can also use the `zoomEnabled` and `panEnabled` properties to enable or disable zooming and panning.
* To optimize performance, make sure to use a high-quality image and avoid using too many images at once.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:full_screen_image/full_screen_image.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Full Screen Image Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Full Screen Image Demo'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            Navigator.push(
              context,
              MaterialPageRoute(builder: (context) => FullScreenImagePage()),
            );
          },
          child: Text('Show Full Screen Image'),
        ),
      ),
    );
  }
}

class FullScreenImagePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Create a full screen image widget
    return FullScreenImage(
      image: Image.asset('assets/image.jpg'),
      backgroundColor: Colors.black,
      // Enable zooming and panning
      zoomEnabled: true,
      panEnabled: true,
    );
  }
}
```

// This is the main entry point of the application.
// The MyApp widget is the root of the application.
// The MyHomePage widget is the home page of the application.
// The FullScreenImagePage widget is the page that displays the full screen image.
// When the user clicks the "Show Full Screen Image" button, the FullScreenImagePage widget is pushed onto the navigator.
// The FullScreenImage widget is used to display the full screen image.
// The image is displayed in full screen mode, with zooming and panning enabled.
// The user can double tap to zoom in and out, and swipe to dismiss the image.

<-- END_MAIN -->
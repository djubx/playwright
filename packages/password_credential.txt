<-- START_DESCRIPTION -->
### Password Credential Flutter Package
The `password_credential` Flutter package provides a secure way to store and retrieve sensitive information, such as passwords and other credentials, in a Flutter application. This package uses the platform's KeyStore (on Android) or Keychain (on iOS) to securely store the credentials.

#### When to Use This Package
This package is useful when you need to store sensitive information, such as:

* Passwords for authentication
* API keys
* Encryption keys
* Other sensitive data

#### Features
The `password_credential` package provides the following features:

* Secure storage of credentials using the platform's KeyStore or Keychain
* Support for storing multiple credentials
* Ability to retrieve stored credentials
* Option to delete stored credentials

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->
### Setting Up the Package
To use the `password_credential` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  password_credential: ^1.0.0
```
2. Run `flutter pub get` to install the package.

#### Platform-Specific Configurations
For Android, you need to add the following configuration to your `AndroidManifest.xml` file:
```xml
<application
    ...
    android:allowBackup="false"
    android:fullBackupContent="false"
    ...>
</application>
```
This configuration prevents the app's data from being backed up, which is a security best practice when storing sensitive information.

For iOS, you need to add the following configuration to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```
This configuration allows the app to make HTTP requests to arbitrary URLs, which is necessary for the package to work.

#### Using the Package
To use the package, import it in your Dart file:
```dart
import 'package:password_credential/password_credential.dart';
```
Then, create an instance of the `PasswordCredential` class:
```dart
PasswordCredential _passwordCredential = PasswordCredential();
```
You can now use the `_passwordCredential` instance to store and retrieve credentials.

<-- END_TUTORIAL -->

<-- START_MAIN -->
```dart
import 'package:flutter/material.dart';
import 'package:password_credential/password_credential.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Password Credential Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _usernameController = TextEditingController();
  final _passwordController = TextEditingController();
  PasswordCredential _passwordCredential = PasswordCredential();

  // Step 1: Store the credential
  void _storeCredential() async {
    // Create a new credential
    Credential credential = Credential(
      username: _usernameController.text,
      password: _passwordController.text,
    );

    // Store the credential
    await _passwordCredential.storeCredential(credential);

    print('Credential stored successfully!');
  }

  // Step 2: Retrieve the credential
  void _retrieveCredential() async {
    // Retrieve the stored credential
    Credential? credential = await _passwordCredential.retrieveCredential();

    if (credential != null) {
      print('Credential retrieved successfully!');
      print('Username: ${credential.username}');
      print('Password: ${credential.password}');
    } else {
      print('No credential found!');
    }
  }

  // Step 3: Delete the credential
  void _deleteCredential() async {
    // Delete the stored credential
    await _passwordCredential.deleteCredential();

    print('Credential deleted successfully!');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Password Credential Demo'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Column(
          children: [
            TextField(
              controller: _usernameController,
              decoration: InputDecoration(
                labelText: 'Username',
              ),
            ),
            TextField(
              controller: _passwordController,
              decoration: InputDecoration(
                labelText: 'Password',
              ),
              obscureText: true,
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _storeCredential,
              child: Text('Store Credential'),
            ),
            SizedBox(height: 10),
            ElevatedButton(
              onPressed: _retrieveCredential,
              child: Text('Retrieve Credential'),
            ),
            SizedBox(height: 10),
            ElevatedButton(
              onPressed: _deleteCredential,
              child: Text('Delete Credential'),
            ),
          ],
        ),
      ),
    );
  }
}

// The app flow is as follows:
// 1. The user enters their username and password in the text fields.
// 2. When the user clicks the "Store Credential" button, the app stores the credential using the `storeCredential` method.
// 3. When the user clicks the "Retrieve Credential" button, the app retrieves the stored credential using the `retrieveCredential` method.
// 4. If a credential is found, the app prints the username and password to the console.
// 5. When the user clicks the "Delete Credential" button, the app deletes the stored credential using the `deleteCredential` method.
```
<-- END_MAIN -->
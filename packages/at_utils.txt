<-- START_DESCRIPTION -->
# at_utils Flutter Package
The `at_utils` Flutter package is a utility library that provides a set of reusable functions and classes to simplify the development of Flutter applications. It includes a range of features such as string manipulation, date and time formatting, and logging.

## When to Use
The `at_utils` package is useful when you need to perform common tasks such as:

* String manipulation (e.g., trimming, padding, and formatting)
* Date and time formatting
* Logging and debugging
* Data encryption and decryption

## Features
The `at_utils` package includes the following features:

* String manipulation functions (e.g., `trim`, `padLeft`, `padRight`)
* Date and time formatting functions (e.g., `formatDate`, `formatTime`)
* Logging functions (e.g., `log`, `logError`)
* Data encryption and decryption functions (e.g., `encrypt`, `decrypt`)

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->
# Setting Up the at_utils Package
To use the `at_utils` package in your Flutter application, follow these steps:

1. Add the `at_utils` package to your `pubspec.yaml` file:
```yml
dependencies:
  at_utils: ^1.0.0
```
2. Run `flutter pub get` to install the package.
3. Import the `at_utils` package in your Dart file:
```dart
import 'package:at_utils/at_utils.dart';
```
## Platform-Specific Details
The `at_utils` package works on both Android and iOS platforms. However, some features may require additional setup or configuration.

### Android
On Android, you need to add the following permission to your `AndroidManifest.xml` file to use the logging feature:
```xml
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
```
### iOS
On iOS, you need to add the following configuration to your `Info.plist` file to use the logging feature:
```xml
<key>NSFileProtectionKey</key>
<string>NSFileProtectionComplete</string>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->
```dart
import 'package:flutter/material.dart';
import 'package:at_utils/at_utils.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  String _logMessage = '';

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'at_utils Example',
      home: Scaffold(
        appBar: AppBar(
          title: Text('at_utils Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Text('Log Message:'),
              Text(_logMessage),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  // Log a message using the at_utils package
                  log('Hello, World!');
                  setState(() {
                    _logMessage = 'Hello, World!';
                  });
                },
                child: Text('Log Message'),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  // Format a date using the at_utils package
                  String formattedDate = formatDate(DateTime.now());
                  print(formattedDate);
                },
                child: Text('Format Date'),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  // Encrypt a message using the at_utils package
                  String encryptedMessage = encrypt('Hello, World!');
                  print(encryptedMessage);
                },
                child: Text('Encrypt Message'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
```
// This is the main entry point of the application.
// The RealFlutter widget is the root widget of the application.
// The _RealFlutterState class is the state class for the RealFlutter widget.
// The build method is called when the widget is inserted into the tree.
// The logMessage variable is used to store the log message.
// The onPressed callback of the Log Message button is called when the button is pressed.
// The log function from the at_utils package is used to log a message.
// The setState method is called to update the logMessage variable.
// The Format Date button is used to format a date using the at_utils package.
// The Encrypt Message button is used to encrypt a message using the at_utils package.

// The application flow is as follows:
// 1. The user presses the Log Message button.
// 2. The log function from the at_utils package is called to log a message.
// 3. The setState method is called to update the logMessage variable.
// 4. The log message is displayed on the screen.
// 5. The user presses the Format Date button.
// 6. The formatDate function from the at_utils package is called to format a date.
// 7. The formatted date is printed to the console.
// 8. The user presses the Encrypt Message button.
// 9. The encrypt function from the at_utils package is called to encrypt a message.
// 10. The encrypted message is printed to the console.

<-- END_MAIN -->
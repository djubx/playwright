<-- START_DESCRIPTION -->

# Flutter Pro Barcode Scanner Package
=====================================

The `flutter_pro_barcode_scanner` package is a powerful and easy-to-use barcode scanning library for Flutter applications. It provides a simple and efficient way to scan barcodes on both Android and iOS platforms.

### When to Use This Package

This package is ideal for applications that require barcode scanning, such as:

* Inventory management systems
* Point-of-sale (POS) systems
* Product information management systems
* Any other application that requires barcode scanning

### Features

* Supports multiple barcode formats, including QR Code, Data Matrix, and EAN/UPC
* Fast and accurate scanning
* Customizable scanning interface
* Supports both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `flutter_pro_barcode_scanner` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_pro_barcode_scanner: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:flutter_pro_barcode_scanner/flutter_pro_barcode_scanner.dart';
```
### Step 3: Configure the Package (Optional)

You can customize the scanning interface by providing a custom `BarcodeScannerConfig` object:
```dart
BarcodeScannerConfig config = BarcodeScannerConfig(
  barcodeFormats: [BarcodeFormat.QR_CODE],
  cameraResolution: CameraResolution.HIGH,
);
```
### Step 4: Start Scanning

Start scanning by calling the `startScanning` method:
```dart
Future<void> startScanning() async {
  await FlutterProBarcodeScanner.startScanning(
    config: config,
    onScanResult: (result) {
      print('Scan result: ${result.barcode}');
    },
  );
}
```
### Platform-Specific Details

* Android: Make sure to add the `android.permission.CAMERA` permission to your `AndroidManifest.xml` file.
* iOS: Make sure to add the `NSCameraUsageDescription` key to your `Info.plist` file.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_pro_barcode_scanner/flutter_pro_barcode_scanner.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Barcode Scanner Demo',
      home: BarcodeScannerPage(),
    );
  }
}

class BarcodeScannerPage extends StatefulWidget {
  @override
  _BarcodeScannerPageState createState() => _BarcodeScannerPageState();
}

class _BarcodeScannerPageState extends State<BarcodeScannerPage> {
  BarcodeScannerConfig _config;
  String _scanResult;

  @override
  void initState() {
    super.initState();
    _config = BarcodeScannerConfig(
      barcodeFormats: [BarcodeFormat.QR_CODE],
      cameraResolution: CameraResolution.HIGH,
    );
  }

  Future<void> _startScanning() async {
    await FlutterProBarcodeScanner.startScanning(
      config: _config,
      onScanResult: (result) {
        setState(() {
          _scanResult = result.barcode;
        });
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Barcode Scanner Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: _startScanning,
              child: Text('Start Scanning'),
            ),
            SizedBox(height: 20),
            Text(_scanResult != null ? _scanResult : 'No scan result'),
          ],
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user clicks the "Start Scanning" button.
// 2. The `_startScanning` method is called, which starts the scanning process.
// 3. The scanning process uses the `_config` object to configure the scanning interface.
// 4. When a barcode is scanned, the `onScanResult` callback is called with the scan result.
// 5. The scan result is displayed on the screen.
// 6. The user can click the "Start Scanning" button again to scan another barcode.

```

<-- END_MAIN -->
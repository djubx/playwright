```markdown
<!-- START_DESCRIPTION -->
# Overview of the android_notification_icons Flutter Package

The `android_notification_icons` package is a Flutter library designed to simplify the process of managing notification icons for Android applications. It provides a straightforward way to create and customize notification icons, ensuring that they adhere to Android's design guidelines. This package is particularly useful for developers who want to enhance the user experience by providing visually appealing notifications.

## When to Use This Package
- When you need to display custom notification icons in your Flutter app.
- If you want to ensure that your notification icons are compliant with Android's design standards.
- When you want to manage different icon states (e.g., active, inactive) easily.

## Key Features
- **Custom Icon Creation**: Easily create notification icons with different styles and colors.
- **Adaptive Icons Support**: Supports adaptive icons for Android 8.0 (API level 26) and above.
- **Easy Integration**: Simple setup and usage within your Flutter project.
- **Cross-Platform Compatibility**: While primarily focused on Android, it can be integrated into cross-platform applications.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using android_notification_icons

## Installation
To get started with the `android_notification_icons` package, you need to add it to your `pubspec.yaml` file. Open your `pubspec.yaml` and add the following line under dependencies:

```yaml
dependencies:
  android_notification_icons: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Platform-Specific Configuration

### Android Configuration
1. **Add Icons**: Place your notification icons in the `android/app/src/main/res` directory. You should have different sizes for different screen densities (mdpi, hdpi, xhdpi, xxhdpi, xxxhdpi).
2. **Update AndroidManifest.xml**: Ensure that your `AndroidManifest.xml` file includes the necessary permissions for notifications.

### iOS Configuration
While this package is primarily for Android, you can still use it in a cross-platform app. Ensure that your iOS app is set up to handle notifications properly, but the `android_notification_icons` package will not affect iOS notifications.

## Usage
Once you have installed the package and configured your project, you can start using it in your Flutter application. Hereâ€™s a simple example of how to create a notification icon.

```dart
import 'package:flutter/material.dart';
import 'package:android_notification_icons/android_notification_icons.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Notification Icons Example'),
        ),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              // Trigger a notification with a custom icon
              AndroidNotificationIcons.showNotification(
                title: 'Hello!',
                body: 'This is a custom notification icon.',
                icon: 'ic_notification', // Your icon name without extension
              );
            },
            child: Text('Show Notification'),
          ),
        ),
      ),
    );
  }
}
```

In this example, when the button is pressed, a notification will be displayed with a custom icon.

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of Using android_notification_icons

```dart
import 'package:flutter/material.dart';
import 'package:android_notification_icons/android_notification_icons.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Notification Icons Example'),
        ),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              // Trigger a notification with a custom icon
              AndroidNotificationIcons.showNotification(
                title: 'Hello!',
                body: 'This is a custom notification icon.',
                icon: 'ic_notification', // Your icon name without extension
              );
            },
            child: Text('Show Notification'),
          ),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the RealFlutter widget, which is a StatelessWidget.
// 2. The MaterialApp widget is created, providing the basic material design structure.
// 3. A Scaffold widget is used to create the app's visual structure, including an AppBar and a body.
// 4. In the body, a Center widget is used to center the content.
// 5. An ElevatedButton is created, which, when pressed, triggers a notification.
// 6. The notification is displayed using the AndroidNotificationIcons.showNotification method, 
//    which takes a title, body, and icon name as parameters.
// 7. The icon name should correspond to the custom notification icon you have placed in the Android resources.

```
<!-- END_MAIN -->
``` 

In summary, the `android_notification_icons` package provides a simple and effective way to manage notification icons in Flutter applications, particularly for Android. By following the setup and usage instructions, developers can easily enhance their app's notification experience.
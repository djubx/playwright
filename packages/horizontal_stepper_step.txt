<-- START_DESCRIPTION -->
Horizontal Stepper Step Flutter Package
=====================================

The `horizontal_stepper_step` package is a Flutter widget that allows you to create a horizontal stepper with customizable steps. It's perfect for creating onboarding flows, tutorials, or any other process that requires a series of steps.

When to Use This Package
------------------------

*   You need to create a horizontal stepper with customizable steps.
*   You want to create an onboarding flow or tutorial that requires a series of steps.
*   You need a flexible and customizable stepper widget.

Features
--------

*   Customizable step widgets
*   Horizontal stepper layout
*   Support for multiple steps
*   Customizable active and inactive step colors
*   Customizable step size and spacing

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->
Tutorial: Setting Up and Using the Horizontal Stepper Step Package
================================================================

### Step 1: Add the Package to Your Pubspec.yaml File

```yml
dependencies:
  flutter:
    sdk: flutter
  horizontal_stepper_step: ^1.0.0
```

### Step 2: Import the Package in Your Dart File

```dart
import 'package:horizontal_stepper_step/horizontal_stepper_step.dart';
```

### Step 3: Create a Horizontal Stepper Step Widget

```dart
HorizontalStepperStep(
  steps: [
    HorizontalStepperStepItem(
      label: 'Step 1',
      widget: Container(
        width: 100,
        height: 100,
        color: Colors.red,
      ),
    ),
    HorizontalStepperStepItem(
      label: 'Step 2',
      widget: Container(
        width: 100,
        height: 100,
        color: Colors.blue,
      ),
    ),
  ],
)
```

### Platform-Specific Details

*   Android: No additional configuration required.
*   iOS: No additional configuration required.

### Required Configurations or Optimizations

*   You can customize the active and inactive step colors by using the `activeColor` and `inactiveColor` properties.
*   You can customize the step size and spacing by using the `stepSize` and `stepSpacing` properties.

<-- END_TUTORIAL -->

<-- START_MAIN -->
```dart
import 'package:flutter/material.dart';
import 'package:horizontal_stepper_step/horizontal_stepper_step.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Horizontal Stepper Step Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  int _currentStep = 0;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Horizontal Stepper Step Demo'),
      ),
      body: Center(
        child: HorizontalStepperStep(
          steps: [
            HorizontalStepperStepItem(
              label: 'Step 1',
              widget: Container(
                width: 100,
                height: 100,
                color: Colors.red,
              ),
            ),
            HorizontalStepperStepItem(
              label: 'Step 2',
              widget: Container(
                width: 100,
                height: 100,
                color: Colors.blue,
              ),
            ),
            HorizontalStepperStepItem(
              label: 'Step 3',
              widget: Container(
                width: 100,
                height: 100,
                color: Colors.green,
              ),
            ),
          ],
          currentStep: _currentStep,
          onStepTapped: (step) {
            setState(() {
              _currentStep = step;
            });
          },
        ),
      ),
    );
  }
}
// The application flow is as follows:
// 1. The user opens the app and is presented with a horizontal stepper with three steps.
// 2. The user can tap on any step to navigate to that step.
// 3. When the user taps on a step, the current step is updated and the UI is rebuilt to reflect the new current step.
// 4. The user can continue to navigate between steps by tapping on the desired step.
// 5. The app maintains the current step state and updates the UI accordingly.
```
<-- END_MAIN -->
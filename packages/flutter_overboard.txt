```markdown
<-- START_DESCRIPTION -->

# Flutter Overboard Package: A Comprehensive Overview

The `flutter_overboard` package is a versatile and user-friendly library designed to create engaging onboarding experiences in Flutter applications. Onboarding screens are crucial for introducing new users to the app's features and guiding them through the initial setup. The `flutter_overboard` package simplifies this process by providing customizable and visually appealing onboarding screens.

## When to Use Flutter Overboard

- **New User Introduction**: Use this package to create a series of screens that introduce new users to your app's features and functionalities.
- **Feature Highlighting**: When you release a new feature, you can use onboarding screens to highlight and explain it to existing users.
- **User Engagement**: Enhance user engagement by providing a smooth and interactive onboarding experience.

## Key Features

- **Customizable Pages**: Easily customize the look and feel of each onboarding page to match your app's theme.
- **Interactive Elements**: Add interactive elements like buttons and animations to make the onboarding process more engaging.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS platforms.
- **Ease of Use**: Simple API that allows developers to implement onboarding screens with minimal code.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using Flutter Overboard

In this tutorial, we will walk through the setup process for the `flutter_overboard` package and demonstrate how to use it in a Flutter application.

## Setup Process

1. **Add Dependency**: First, add the `flutter_overboard` package to your `pubspec.yaml` file.

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     flutter_overboard: ^1.0.0
   ```

2. **Install Packages**: Run `flutter pub get` to install the new package.

3. **Import the Package**: Import `flutter_overboard` in your Dart file where you plan to use it.

   ```dart
   import 'package:flutter_overboard/flutter_overboard.dart';
   ```

## Platform-Specific Details

### Android

- Ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21 to support all animations and features.

  ```gradle
  defaultConfig {
      minSdkVersion 21
  }
  ```

### iOS

- Make sure your `Info.plist` is configured to support the necessary permissions and configurations for any features you plan to use.

## Using Flutter Overboard

To use the `flutter_overboard` package, you need to create a list of `PageModel` objects, each representing a page in your onboarding flow. Then, use the `OverBoard` widget to display these pages.

```dart
final pages = [
  PageModel(
    color: Colors.blue,
    imageAssetPath: 'assets/images/onboarding1.png',
    title: 'Welcome to RealFlutter',
    body: 'This is a simple onboarding screen.',
    doAnimateImage: true,
  ),
  // Add more PageModel objects as needed
];
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_overboard/flutter_overboard.dart';

void main() => runApp(RealFlutterApp());

class RealFlutterApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'RealFlutter Onboarding',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutterOnboarding(),
    );
  }
}

class RealFlutterOnboarding extends StatelessWidget {
  final pages = [
    PageModel(
      color: Colors.blue,
      imageAssetPath: 'assets/images/onboarding1.png',
      title: 'Welcome to RealFlutter',
      body: 'This is a simple onboarding screen.',
      doAnimateImage: true,
    ),
    PageModel(
      color: Colors.green,
      imageAssetPath: 'assets/images/onboarding2.png',
      title: 'Explore Features',
      body: 'Discover the amazing features of our app.',
      doAnimateImage: true,
    ),
    PageModel(
      color: Colors.orange,
      imageAssetPath: 'assets/images/onboarding3.png',
      title: 'Get Started',
      body: 'Let\'s get started with RealFlutter!',
      doAnimateImage: true,
    ),
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: OverBoard(
        pages: pages,
        showBullets: true,
        finishCallback: () {
          // Navigate to the main app screen after onboarding
          Navigator.pushReplacement(
            context,
            MaterialPageRoute(builder: (context) => MainAppScreen()),
          );
        },
      ),
    );
  }
}

class MainAppScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Main App Screen'),
      ),
      body: Center(
        child: Text('Welcome to the main app!'),
      ),
    );
  }
}

// The RealFlutterApp is the entry point of the application.
// It uses MaterialApp to set up the app's theme and home screen.
// RealFlutterOnboarding is the initial screen that displays the onboarding flow using OverBoard.
// The pages list contains PageModel objects, each representing an onboarding page.
// OverBoard widget is used to display the onboarding pages with navigation bullets.
// finishCallback is triggered when the user completes the onboarding, navigating to MainAppScreen.
// MainAppScreen is a simple screen that represents the main content of the app after onboarding.
```

<-- END_MAIN -->
```
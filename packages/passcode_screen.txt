<-- START_DESCRIPTION -->

**Passcode Screen Flutter Package**
=====================================

The `passcode_screen` Flutter package provides a customizable and secure way to implement passcode authentication in your Flutter app. It allows you to create a passcode screen with a keypad, where users can enter their passcode to unlock the app.

**When to Use This Package**
---------------------------

You can use this package in various scenarios, such as:

* Implementing a secure login system for your app
* Creating a parental control system to restrict access to certain features
* Building a secure notes or journal app

**Features**
------------

The `passcode_screen` package offers the following features:

* Customizable keypad layout and design
* Support for multiple passcode lengths
* Optional biometric authentication (Face ID, Touch ID, or fingerprint recognition)
* Error handling and feedback for incorrect passcode entries

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setup and Usage**
-------------------

To use the `passcode_screen` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  passcode_screen: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:passcode_screen/passcode_screen.dart';
```
### Step 3: Create a Passcode Screen

Create a new instance of the `PasscodeScreen` widget:
```dart
PasscodeScreen(
  title: 'Enter Passcode',
  passcodeLength: 4,
  onCompleted: (passcode) {
    // Handle the entered passcode
  },
)
```
### Platform-Specific Details

For Android, you need to add the following line to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.USE_BIOMETRIC" />
```
For iOS, you need to add the following line to your `Info.plist` file:
```xml
<key>NSFaceIDUsageDescription</key>
<string>This app uses Face ID to authenticate the user.</string>
```
### Optional Configurations

You can customize the keypad layout and design by using the `keypad` property:
```dart
PasscodeScreen(
  keypad: Keypad(
    layout: [
      ['1', '2', '3'],
      ['4', '5', '6'],
      ['7', '8', '9'],
      ['0', 'Backspace']
    ],
  ),
)
```
You can also enable biometric authentication by using the `biometric` property:
```dart
PasscodeScreen(
  biometric: Biometric(
    type: BiometricType.faceId,
  ),
)
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:passcode_screen/passcode_screen.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Passcode Screen Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  String _passcode = '';

  void _onCompleted(String passcode) {
    setState(() {
      _passcode = passcode;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Passcode Screen Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Enter Passcode',
              style: TextStyle(fontSize: 24),
            ),
            SizedBox(height: 20),
            PasscodeScreen(
              title: 'Enter Passcode',
              passcodeLength: 4,
              onCompleted: _onCompleted,
            ),
            SizedBox(height: 20),
            Text(
              'Entered Passcode: $_passcode',
              style: TextStyle(fontSize: 18),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user is presented with a passcode screen.
// 2. The user enters their passcode using the keypad.
// 3. Once the user has entered the required number of digits, the onCompleted callback is called.
// 4. The entered passcode is displayed on the screen.
// 5. The user can then use the entered passcode to unlock the app or perform other actions.

// This code demonstrates the basic usage of the passcode_screen package.
// You can customize the keypad layout and design, enable biometric authentication, and handle errors and feedback.
```

<-- END_MAIN -->
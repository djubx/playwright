# Month Year Picker 2 Flutter Package

<!-- START_DESCRIPTION -->
## Description

The `month_year_picker2` Flutter package is a versatile and user-friendly widget designed to allow users to select a month and year easily. This package is particularly useful in applications that require date selection, such as booking systems, event planners, or any form of data entry that involves date inputs.

### Key Features:
- **User-Friendly Interface**: The package provides a clean and intuitive interface for selecting months and years.
- **Customizable**: Developers can customize the appearance and behavior of the picker to fit their application's design.
- **Date Range Support**: It allows for the selection of a specific range of months and years, making it suitable for various use cases.
- **Localization**: Supports multiple languages, making it accessible for a global audience.

### When to Use:
- When you need a simple and effective way for users to select a month and year.
- In applications that require date filtering or sorting, such as financial apps or event management systems.
- When you want to enhance user experience with a visually appealing date picker.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
## Tutorial

### Installation

To use the `month_year_picker2` package, you need to add it to your `pubspec.yaml` file. Open your `pubspec.yaml` and add the following line under dependencies:

```yaml
dependencies:
  month_year_picker2: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command in your terminal to install the package:

```bash
flutter pub get
```

### Platform-Specific Configuration

#### Android
For Android, ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file:

```gradle
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

#### iOS
For iOS, you may need to set the deployment target in your `ios/Podfile`:

```ruby
platform :ios, '10.0'
```

### Using the Package

To use the `month_year_picker2`, you can create a simple Flutter application that utilizes the picker. Below is a basic example of how to implement it in your app.

1. Import the package in your Dart file:

```dart
import 'package:month_year_picker2/month_year_picker2.dart';
```

2. Create a stateful widget to manage the selected month and year.

3. Use the `MonthYearPicker` widget to display the picker when a button is pressed.

### Example Code Snippet

Hereâ€™s a simple example of how to implement the `month_year_picker2` in your Flutter app:

```dart
import 'package:flutter/material.dart';
import 'package:month_year_picker2/month_year_picker2.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  DateTime? selectedDate;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Month Year Picker Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text(
              selectedDate == null
                  ? 'No date selected'
                  : 'Selected: ${selectedDate!.month}/${selectedDate!.year}',
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () async {
                final DateTime? picked = await showMonthYearPicker(
                  context: context,
                  initialDate: selectedDate ?? DateTime.now(),
                );
                if (picked != null && picked != selectedDate) {
                  setState(() {
                    selectedDate = picked;
                  });
                }
              },
              child: Text('Select Month and Year'),
            ),
          ],
        ),
      ),
    );
  }
}
```

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
## Complete Example

```dart
import 'package:flutter/material.dart';
import 'package:month_year_picker2/month_year_picker2.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  DateTime? selectedDate; // Variable to hold the selected date

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Month Year Picker Example'), // App bar title
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            // Display the selected date or a message if none is selected
            Text(
              selectedDate == null
                  ? 'No date selected'
                  : 'Selected: ${selectedDate!.month}/${selectedDate!.year}',
            ),
            SizedBox(height: 20), // Space between text and button
            ElevatedButton(
              onPressed: () async {
                // Show the month-year picker dialog
                final DateTime? picked = await showMonthYearPicker(
                  context: context,
                  initialDate: selectedDate ?? DateTime.now(), // Set initial date
                );
                // Update the selected date if a date was picked
                if (picked != null && picked != selectedDate) {
                  setState(() {
                    selectedDate = picked; // Update state with the new date
                  });
                }
              },
              child: Text('Select Month and Year'), // Button text
            ),
          ],
        ),
      ),
    );
  }
}

// The application starts with the RealFlutter widget.
// The selectedDate variable holds the currently selected month and year.
// When the button is pressed, the month-year picker dialog is displayed.
// If the user selects a date, the selectedDate variable is updated,
// and the UI reflects the newly selected month and year.
```
<!-- END_MAIN -->

### Summary of Application Flow
// The application begins with the `RealFlutter` widget, which is a stateful widget.
// It initializes a variable `selectedDate` to keep track of the user's selection.
// The UI consists of a text widget that displays the selected date or a message if none is selected.
// An elevated button triggers the month-year picker dialog when pressed.
// Upon selection, the state is updated, and the UI reflects the new selection, providing a seamless user experience. 

This example demonstrates how to effectively integrate the `month_year_picker2` package into a Flutter application, allowing users to select a month and year with ease.
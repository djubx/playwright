<-- START_DESCRIPTION -->

# Bloc Notification Flutter Package
=====================================

The `bloc_notification` Flutter package provides a simple and efficient way to manage notifications in your Flutter application. It allows you to display notifications, handle user interactions, and customize the notification experience.

### When to Use

Use the `bloc_notification` package when you need to display notifications in your Flutter application, such as:

* Displaying a notification when a user receives a new message
* Notifying the user of a new update or promotion
* Providing feedback to the user after a specific action

### Features

* Display notifications with custom titles, messages, and icons
* Handle user interactions, such as tapping on a notification
* Customize the notification experience with different styles and layouts
* Support for both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Bloc Notification Package
=============================================

To use the `bloc_notification` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  bloc_notification: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:bloc_notification/bloc_notification.dart';
```
### Step 3: Initialize the Package

Initialize the package in your `main` function:
```dart
void main() {
  BlocNotification.init();
  runApp(MyApp());
}
```
### Platform-Specific Configurations

#### Android

Add the following lines to your `AndroidManifest.xml` file:
```xml
<application
  ...
  android:icon="@mipmap/ic_launcher"
  android:label="@string/app_name"
  android:theme="@style/AppTheme"
  android:allowBackup="true"
  android:supportsRtl="true"
  android:enabled="true"
  android:exported="true"
  >
  ...
</application>
```
#### iOS

Add the following lines to your `Info.plist` file:
```xml
<key>UIBackgroundModes</key>
<array>
  <string>remote-notification</string>
</array>
```
### Using the Package

To display a notification, use the `BlocNotification.show` method:
```dart
BlocNotification.show(
  title: 'New Message',
  message: 'You have a new message',
  icon: 'assets/icon.png',
);
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:bloc_notification/bloc_notification.dart';

void main() {
  BlocNotification.init();
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Bloc Notification Demo',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Bloc Notification Demo'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Text(
                'Bloc Notification Demo',
                style: TextStyle(fontSize: 24),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  BlocNotification.show(
                    title: 'New Message',
                    message: 'You have a new message',
                    icon: 'assets/icon.png',
                  );
                },
                child: Text('Show Notification'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user opens the app and is presented with a button to show a notification.
// 2. When the user clicks the button, the BlocNotification.show method is called.
// 3. The BlocNotification.show method displays a notification with the specified title, message, and icon.
// 4. The user can interact with the notification, such as tapping on it.
// 5. The app handles the user interaction and performs the necessary actions.

// Final summary:
// The Bloc Notification package provides a simple and efficient way to manage notifications in Flutter applications.
// This demo app showcases the basic usage of the package, including displaying a notification and handling user interactions.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Google Sign In All Platforms Flutter Package
=============================================

The `google_sign_in_all_platforms` Flutter package provides a simple and convenient way to integrate Google Sign-In into your Flutter application across all platforms, including Android, iOS, and web.

This package is useful when you want to allow users to sign in to your application using their Google account. It handles the authentication process and provides the user's profile information, such as their name, email, and profile picture.

Some key features of this package include:

*   Support for Android, iOS, and web platforms
*   Simple and easy-to-use API
*   Handles authentication and provides user profile information
*   Supports multiple scopes for accessing different Google APIs

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Package
=============================================

## Step 1: Add the Package to Your Project

To use the `google_sign_in_all_platforms` package, you need to add it to your project's `pubspec.yaml` file. Add the following line under the `dependencies` section:

```yml
dependencies:
  flutter:
    sdk: flutter
  google_sign_in_all_platforms: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Step 2: Configure the Package

To use the package, you need to configure it with your Google OAuth client ID. You can do this by creating a `GoogleSignIn` instance and passing the client ID to the constructor.

```dart
import 'package:google_sign_in_all_platforms/google_sign_in_all_platforms.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();

  final GoogleSignIn googleSignIn = GoogleSignIn(
    clientId: 'YOUR_CLIENT_ID',
  );

  runApp(MyApp(googleSignIn: googleSignIn));
}
```

## Step 3: Handle Authentication

To handle authentication, you can use the `signIn` and `signOut` methods of the `GoogleSignIn` instance.

```dart
class MyApp extends StatelessWidget {
  final GoogleSignIn googleSignIn;

  MyApp({required this.googleSignIn});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Google Sign In Demo',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Google Sign In Demo'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              ElevatedButton(
                onPressed: () async {
                  final GoogleSignInAccount? account = await googleSignIn.signIn();
                  if (account != null) {
                    print('Signed in as ${account.displayName}');
                  } else {
                    print('Sign in failed');
                  }
                },
                child: Text('Sign In'),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () async {
                  await googleSignIn.signOut();
                  print('Signed out');
                },
                child: Text('Sign Out'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:google_sign_in_all_platforms/google_sign_in_all_platforms.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();

  // Create a GoogleSignIn instance with the client ID
  final GoogleSignIn googleSignIn = GoogleSignIn(
    clientId: 'YOUR_CLIENT_ID',
  );

  // Run the app
  runApp(MyApp(googleSignIn: googleSignIn));
}

class MyApp extends StatelessWidget {
  final GoogleSignIn googleSignIn;

  MyApp({required this.googleSignIn});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Google Sign In Demo',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Google Sign In Demo'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              // Sign in button
              ElevatedButton(
                onPressed: () async {
                  // Sign in using the GoogleSignIn instance
                  final GoogleSignInAccount? account = await googleSignIn.signIn();
                  if (account != null) {
                    print('Signed in as ${account.displayName}');
                  } else {
                    print('Sign in failed');
                  }
                },
                child: Text('Sign In'),
              ),
              SizedBox(height: 20),
              // Sign out button
              ElevatedButton(
                onPressed: () async {
                  // Sign out using the GoogleSignIn instance
                  await googleSignIn.signOut();
                  print('Signed out');
                },
                child: Text('Sign Out'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The app starts by creating a GoogleSignIn instance with the client ID.
// The instance is then passed to the MyApp widget, which uses it to handle authentication.
// The MyApp widget displays two buttons: one for signing in and one for signing out.
// When the sign in button is pressed, the app uses the GoogleSignIn instance to sign in.
// If the sign in is successful, the app prints a message to the console indicating that the user has signed in.
// When the sign out button is pressed, the app uses the GoogleSignIn instance to sign out.
// After signing out, the app prints a message to the console indicating that the user has signed out.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# App Usage Tracker Package
The `app_usage_tracker` package is a Flutter plugin that allows you to track the usage of your app, including the amount of time spent on each screen, the number of times each screen is visited, and more. This package is useful for analytics and understanding how users interact with your app.

## Features
- Track screen time: Record the amount of time spent on each screen.
- Track screen visits: Count the number of times each screen is visited.
- Custom events: Log custom events, such as button clicks or form submissions.

## When to Use
Use this package when you need to track user behavior in your app, such as:

- Analyzing which screens are most popular
- Understanding how users navigate through your app
- Identifying areas for improvement

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Configuration
To use the `app_usage_tracker` package, follow these steps:

## Step 1: Add the Package to Your Pubspec
Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  app_usage_tracker: ^1.0.0
```
Then, run `flutter pub get` to install the package.

## Step 2: Import the Package
Import the package in your Dart file:
```dart
import 'package:app_usage_tracker/app_usage_tracker.dart';
```
## Step 3: Initialize the Tracker
Initialize the tracker in your `main` function:
```dart
void main() {
  AppUsageTracker.init();
  runApp(MyApp());
}
```
## Platform-Specific Configurations
### Android
Add the following lines to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.INTERNET" />
<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
```
### iOS
Add the following lines to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:app_usage_tracker/app_usage_tracker.dart';

void main() {
  // Initialize the tracker
  AppUsageTracker.init();
  
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Create a tracker instance
  final tracker = AppUsageTracker.instance;
  
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'App Usage Tracker Demo',
      home: Scaffold(
        appBar: AppBar(
          title: Text('App Usage Tracker Demo'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              // Log a custom event
              ElevatedButton(
                onPressed: () {
                  tracker.logEvent('button_click');
                },
                child: Text('Log Event'),
              ),
              // Navigate to another screen
              ElevatedButton(
                onPressed: () {
                  Navigator.push(
                    context,
                    MaterialPageRoute(builder: (context) => AnotherScreen()),
                  );
                },
                child: Text('Navigate to Another Screen'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

class AnotherScreen extends StatefulWidget {
  @override
  _AnotherScreenState createState() => _AnotherScreenState();
}

class _AnotherScreenState extends State<AnotherScreen> {
  // Create a tracker instance
  final tracker = AppUsageTracker.instance;
  
  @override
  void initState() {
    super.initState();
    // Log a screen visit
    tracker.logScreenVisit('another_screen');
  }
  
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Another Screen'),
      ),
      body: Center(
        child: Text('This is another screen'),
      ),
    );
  }
}
```

// The application flow is as follows:
// 1. The user opens the app, and the `main` function is called.
// 2. The `AppUsageTracker` is initialized in the `main` function.
// 3. The user navigates to the home screen, which contains two buttons.
// 4. When the user clicks the "Log Event" button, a custom event is logged using the `logEvent` method.
// 5. When the user clicks the "Navigate to Another Screen" button, the user is navigated to another screen.
// 6. When the user navigates to another screen, a screen visit is logged using the `logScreenVisit` method.
// 7. The user can then navigate back to the home screen.

<-- END_MAIN -->
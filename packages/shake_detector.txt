```markdown
<!-- START_DESCRIPTION -->
# Shake Detector Flutter Package

The `shake_detector` Flutter package is a powerful tool designed to detect shake gestures on mobile devices. This package is particularly useful in applications where user interaction through physical movement is required, such as games, fitness apps, or any app that benefits from gesture-based controls.

## When to Use This Package
- **Games**: To trigger actions based on shake gestures.
- **Fitness Apps**: To log workouts or track activities when the user shakes the device.
- **Interactive Applications**: To enhance user engagement through physical interactions.

## Features
- **Easy Integration**: Simple setup process to start detecting shakes.
- **Customizable Sensitivity**: Adjust the sensitivity of shake detection to suit your application's needs.
- **Platform Support**: Works seamlessly on both Android and iOS devices.

The `shake_detector` package provides a straightforward API that allows developers to listen for shake events and respond accordingly, making it an excellent choice for enhancing user experience through physical interactions.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Shake Detector

## Installation
To use the `shake_detector` package, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  shake_detector: ^2.0.0
```

After adding the dependency, run `flutter pub get` to install the package.

## Platform-Specific Configuration

### Android
For Android, ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

### iOS
For iOS, you may need to enable motion sensors in your app's `Info.plist` file. Add the following key:

```xml
<key>NSMotionUsageDescription</key>
<string>This app requires access to motion sensors to detect shakes.</string>
```

## Using the Package
To use the `shake_detector` package, you can follow these steps:

1. Import the package in your Dart file:
   ```dart
   import 'package:shake_detector/shake_detector.dart';
   ```

2. Initialize the shake detector in your widget:
   ```dart
   ShakeDetector.autoStart(
     onPhoneShake: () {
       // Handle shake event
       print("Device shaken!");
     },
   );
   ```

3. Optionally, you can customize the sensitivity:
   ```dart
   ShakeDetector.autoStart(
     onPhoneShake: () {
       print("Device shaken!");
     },
     shakeThresholdGravity: 2.7, // Default is 2.7
   );
   ```

With these steps, you can easily integrate shake detection into your Flutter application.

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of Shake Detector

```dart
import 'package:flutter/material.dart';
import 'package:shake_detector/shake_detector.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  String _shakeMessage = "Shake your device!"; // Message to display

  @override
  void initState() {
    super.initState();
    // Initialize the shake detector
    ShakeDetector.autoStart(
      onPhoneShake: () {
        // Update the message when the device is shaken
        setState(() {
          _shakeMessage = "Device shaken!"; // Change message on shake
        });
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text("Shake Detector Example"), // App title
        ),
        body: Center(
          child: Text(
            _shakeMessage, // Display the shake message
            style: TextStyle(fontSize: 24),
          ),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the RealFlutter widget.
// 2. In the RealFlutter widget, we define a stateful widget to manage the shake detection.
// 3. The initState method initializes the shake detector, setting up a listener for shake events.
// 4. When the device is shaken, the onPhoneShake callback is triggered, updating the _shakeMessage state.
// 5. The build method returns a MaterialApp with a simple UI that displays the current shake message.
// 6. The message updates dynamically based on user interaction, providing immediate feedback to the user.

```
<!-- END_MAIN -->
``` 

In this blog post, we covered the `shake_detector` Flutter package, detailing its features, installation, and usage. The complete example provided demonstrates how to set up shake detection in a Flutter application, allowing developers to create engaging and interactive experiences.
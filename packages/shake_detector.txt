<-- START_DESCRIPTION -->

# Shake Detector Flutter Package
=====================================

The `shake_detector` Flutter package is a utility library that allows developers to detect shake gestures on mobile devices. It provides a simple and efficient way to respond to shake events, making it a useful tool for various applications, such as games, multimedia players, or any other app that requires user interaction.

### When to Use

You can use the `shake_detector` package in scenarios where you want to:

* Trigger an action when the user shakes their device
* Implement a shake-to-refresh feature
* Create a game that responds to shake gestures
* Enhance user experience with interactive elements

### Features

The `shake_detector` package offers the following features:

* Shake detection on both Android and iOS platforms
* Adjustable sensitivity to customize the shake detection threshold
* Support for multiple shake directions (horizontal, vertical, and both)

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Shake Detector Package
==========================================

To use the `shake_detector` package in your Flutter project, follow these steps:

### Step 1: Add the Package to Your Project

Add the `shake_detector` package to your `pubspec.yaml` file:
```yml
dependencies:
  flutter:
    sdk: flutter
  shake_detector: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the `shake_detector` package in your Dart file:
```dart
import 'package:shake_detector/shake_detector.dart';
```
### Step 3: Initialize the Shake Detector

Initialize the shake detector in your `initState` method:
```dart
@override
void initState() {
  super.initState();
  ShakeDetector.instance.start(
    onShake: () {
      // Handle shake event
    },
  );
}
```
### Platform-Specific Details

* On Android, the shake detector uses the `SensorManager` to detect shake events.
* On iOS, the shake detector uses the `CoreMotion` framework to detect shake events.

### Configurations and Optimizations

You can adjust the sensitivity of the shake detector by passing a `sensitivity` value to the `start` method:
```dart
ShakeDetector.instance.start(
  onShake: () {
    // Handle shake event
  },
  sensitivity: 10.0, // Adjust sensitivity value
);
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:shake_detector/shake_detector.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Shake Detector Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  // Initialize shake detector
  @override
  void initState() {
    super.initState();
    ShakeDetector.instance.start(
      onShake: () {
        // Handle shake event
        print('Shake detected!');
        _showDialog();
      },
    );
  }

  // Show dialog when shake event is detected
  void _showDialog() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Shake Detected!'),
          content: Text('You shook your device!'),
          actions: [
            TextButton(
              child: Text('OK'),
              onPressed: () {
                Navigator.of(context).pop();
              },
            ),
          ],
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Shake Detector Demo'),
      ),
      body: Center(
        child: Text('Shake your device to see a dialog!'),
      ),
    );
  }
}
```

// The application flow is as follows:
// 1. The user runs the app and the `MyHomePage` widget is displayed.
// 2. The `ShakeDetector` instance is initialized in the `initState` method.
// 3. When the user shakes their device, the `onShake` callback is triggered.
// 4. The `_showDialog` method is called, which displays a dialog with a message.
// 5. The user can dismiss the dialog by tapping the 'OK' button.

// In summary, this code demonstrates how to use the `shake_detector` package to detect shake events and respond to them by displaying a dialog.
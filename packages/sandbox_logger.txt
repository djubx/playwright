# Exploring the `sandbox_logger` Flutter Package

## <-- START_DESCRIPTION -->

### Description

The `sandbox_logger` package is a powerful logging tool designed for Flutter applications. It provides developers with a simple and effective way to log messages, errors, and other important information during the development and debugging process. This package is particularly useful in scenarios where you need to track application behavior, diagnose issues, or monitor performance without cluttering the console output.

### When to Use

- **Debugging**: When you need to track down bugs or unexpected behavior in your application.
- **Performance Monitoring**: To log performance metrics and identify bottlenecks in your code.
- **Error Tracking**: To capture and log errors that occur during runtime, making it easier to diagnose issues.

### Features

- **Customizable Log Levels**: Supports various log levels (e.g., debug, info, warning, error) to categorize log messages.
- **File Logging**: Ability to log messages to a file for persistent storage and later analysis.
- **Console Output**: Logs can be printed to the console for real-time monitoring during development.
- **Easy Integration**: Simple setup process that allows for quick integration into any Flutter project.

## <-- END_DESCRIPTION -->

## <-- START_TUTORIAL -->

### Tutorial

#### Installation

To add the `sandbox_logger` package to your Flutter project, include it in your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  sandbox_logger: ^1.0.0  # Check for the latest version on pub.dev
```

Run the following command to install the package:

```bash
flutter pub get
```

#### Platform-Specific Configuration

For both Android and iOS, no additional configuration is required to use `sandbox_logger`. However, ensure that your app has the necessary permissions to write to the file system if you plan to use file logging.

#### Basic Usage

To use the `sandbox_logger` package, you need to import it into your Dart file:

```dart
import 'package:sandbox_logger/sandbox_logger.dart';
```

You can then create an instance of the logger and start logging messages:

```dart
void main() {
  // Create an instance of the logger
  final logger = RealFlutterLogger();

  // Log messages at different levels
  logger.debug('This is a debug message');
  logger.info('This is an info message');
  logger.warning('This is a warning message');
  logger.error('This is an error message');
}
```

## <-- END_TUTORIAL -->

## <-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:sandbox_logger/sandbox_logger.dart';

void main() {
  // Initialize the logger
  final logger = RealFlutterLogger();

  // Log the application start
  logger.info('Application started');

  runApp(MyApp(logger: logger));
}

class MyApp extends StatelessWidget {
  final RealFlutterLogger logger;

  MyApp({required this.logger});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Sandbox Logger Example',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Sandbox Logger Example'),
        ),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              // Log button press event
              logger.info('Button pressed');
              // Simulate an error
              try {
                throw Exception('Simulated error');
              } catch (e) {
                // Log the error
                logger.error('An error occurred: $e');
              }
            },
            child: Text('Press Me'),
          ),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function initializes the logger and logs that the application has started.
// 2. The MyApp widget is created, passing the logger instance to it.
// 3. The app displays a button in the center of the screen.
// 4. When the button is pressed, an info log is created indicating the button press.
// 5. An exception is simulated, and if caught, an error log is generated with the error message.
// 6. This allows developers to see both the button press and any errors that occur in the console or log file.
```

## <-- END_MAIN -->

### Summary

In this example, we demonstrated how to integrate the `sandbox_logger` package into a Flutter application. The application initializes the logger, logs the start of the app, and captures button press events along with any simulated errors. This structured logging approach helps developers maintain a clear understanding of application behavior and quickly diagnose issues as they arise. By utilizing the `sandbox_logger`, you can enhance your debugging process and improve the overall quality of your Flutter applications.
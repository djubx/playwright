<-- START_DESCRIPTION -->

# Map Fields Flutter Package
================================

The `map_fields` Flutter package is a powerful tool for mapping data between different models or data structures. It provides a simple and efficient way to transform data from one format to another, making it a valuable asset for any Flutter developer.

## When to Use
--------------

The `map_fields` package is particularly useful when working with APIs, data storage, or any other scenario where data needs to be transformed between different formats. For example:

* Mapping API responses to local data models
* Transforming data between different storage formats (e.g., JSON to SQLite)
* Converting data between different platforms (e.g., web to mobile)

## Features
------------

The `map_fields` package offers the following key features:

* Simple and efficient data mapping
* Support for nested data structures
* Customizable mapping rules
* Error handling and debugging tools

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the Map Fields Package
---------------------------------------------

## Step 1: Add the Package to Your Project
-----------------------------------------

Add the `map_fields` package to your `pubspec.yaml` file:
```yml
dependencies:
  map_fields: ^1.0.0
```
Then, run `flutter pub get` to install the package.

## Step 2: Import the Package
---------------------------

Import the `map_fields` package in your Dart file:
```dart
import 'package:map_fields/map_fields.dart';
```
## Step 3: Define Your Data Models
---------------------------------

Create your data models using the `@MapFields` annotation:
```dart
@MapFields()
class User {
  String id;
  String name;
  String email;
}

@MapFields()
class UserResponse {
  String userId;
  String userName;
  String userEmail;
}
```
## Step 4: Create a Mapper
-------------------------

Create a mapper using the `Mapper` class:
```dart
class UserMapper extends Mapper<User, UserResponse> {
  @override
  User map(UserResponse response) {
    return User(
      id: response.userId,
      name: response.userName,
      email: response.userEmail,
    );
  }
}
```
## Step 5: Use the Mapper
-----------------------

Use the mapper to transform data between your models:
```dart
void main() {
  final userResponse = UserResponse(
    userId: '1',
    userName: 'John Doe',
    userEmail: 'john.doe@example.com',
  );

  final user = UserMapper().map(userResponse);

  print(user.id); // prints '1'
  print(user.name); // prints 'John Doe'
  print(user.email); // prints 'john.doe@example.com'
}
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:map_fields/map_fields.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Map Fields Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _formKey = GlobalKey<FormState>();
  final _userResponse = UserResponse();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Map Fields Demo'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              TextFormField(
                decoration: InputDecoration(
                  labelText: 'User ID',
                ),
                validator: (value) {
                  if (value.isEmpty) {
                    return 'Please enter a user ID';
                  }
                  return null;
                },
                onSaved: (value) => _userResponse.userId = value,
              ),
              TextFormField(
                decoration: InputDecoration(
                  labelText: 'User Name',
                ),
                validator: (value) {
                  if (value.isEmpty) {
                    return 'Please enter a user name';
                  }
                  return null;
                },
                onSaved: (value) => _userResponse.userName = value,
              ),
              TextFormField(
                decoration: InputDecoration(
                  labelText: 'User Email',
                ),
                validator: (value) {
                  if (value.isEmpty) {
                    return 'Please enter a user email';
                  }
                  return null;
                },
                onSaved: (value) => _userResponse.userEmail = value,
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  if (_formKey.currentState.validate()) {
                    _formKey.currentState.save();
                    final user = UserMapper().map(_userResponse);
                    print(user.id);
                    print(user.name);
                    print(user.email);
                  }
                },
                child: Text('Submit'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// This is where the magic happens!
// We define our data models using the @MapFields annotation.
@MapFields()
class User {
  String id;
  String name;
  String email;
}

@MapFields()
class UserResponse {
  String userId;
  String userName;
  String userEmail;
}

// We create a mapper using the Mapper class.
class UserMapper extends Mapper<User, UserResponse> {
  @override
  User map(UserResponse response) {
    return User(
      id: response.userId,
      name: response.userName,
      email: response.userEmail,
    );
  }
}

// The application flow is as follows:
// 1. The user enters their details in the form.
// 2. When the user submits the form, we validate the input data.
// 3. If the data is valid, we save the data to the _userResponse object.
// 4. We then use the UserMapper to transform the _userResponse object into a User object.
// 5. Finally, we print the details of the User object to the console.

// And that's it! We've successfully used the map_fields package to transform data between two different models.
```

<-- END_MAIN -->
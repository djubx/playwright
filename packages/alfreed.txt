# Exploring the "alfreed" Flutter Package

## <-- START_DESCRIPTION -->

### Description

The **alfreed** package is a powerful tool designed for Flutter developers who want to implement deep linking and dynamic links in their applications. It simplifies the process of handling incoming links, allowing developers to create a seamless user experience by directing users to specific content within the app based on the links they click.

### When to Use

You should consider using the **alfreed** package when:
- You want to implement deep linking in your Flutter application.
- You need to handle dynamic links that can lead users to specific content or features.
- You are looking for a straightforward solution to manage incoming links without extensive boilerplate code.

### Features

- **Deep Linking Support**: Easily handle deep links to navigate users to specific screens within your app.
- **Dynamic Links**: Create links that can change their behavior based on the context, such as whether the app is installed or not.
- **Platform Compatibility**: Works seamlessly on both Android and iOS platforms.
- **Easy Integration**: Simple setup process with minimal configuration required.

## <-- END_DESCRIPTION -->

## <-- START_TUTORIAL -->

### Tutorial

To get started with the **alfreed** package, follow these steps:

#### Step 1: Add Dependency

Add the **alfreed** package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  alfreed: ^latest_version
```

Make sure to replace `^latest_version` with the latest version available on [pub.dev](https://pub.dev/packages/alfreed).

#### Step 2: Platform-Specific Configuration

**For Android:**
1. Open `AndroidManifest.xml` located in `android/app/src/main/`.
2. Add the following intent filter inside the `<activity>` tag:

```xml
<intent-filter>
    <action android:name="android.intent.action.VIEW" />
    <category android:name="android.intent.category.DEFAULT" />
    <category android:name="android.intent.category.BROWSABLE" />
    <data android:scheme="your_scheme" android:host="your_host" />
</intent-filter>
```

Replace `your_scheme` and `your_host` with your desired values.

**For iOS:**
1. Open `Info.plist` located in `ios/Runner/`.
2. Add the following configuration:

```xml
<key>CFBundleURLTypes</key>
<array>
    <dict>
        <key>CFBundleURLSchemes</key>
        <array>
            <string>your_scheme</string>
        </array>
    </dict>
</array>
```

Again, replace `your_scheme` with your desired scheme.

#### Step 3: Initialize the Package

In your main Dart file, initialize the **alfreed** package:

```dart
import 'package:flutter/material.dart';
import 'package:alfreed/alfreed.dart';

void main() {
  runApp(MyApp());
  // Initialize the package
  AlfReed.init();
}
```

#### Step 4: Handle Incoming Links

You can now handle incoming links in your app. Use the following code snippet to listen for incoming links:

```dart
AlfReed.onLinkReceived.listen((link) {
  // Handle the incoming link
  print('Received link: $link');
});
```

## <-- END_TUTORIAL -->

## <-- START_MAIN -->

### Complete Example

Hereâ€™s a complete example of a Flutter application using the **alfreed** package:

```dart
import 'package:flutter/material.dart';
import 'package:alfreed/alfreed.dart';

void main() {
  runApp(MyApp());
  // Initialize the package
  AlfReed.init();
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Alfreed Example',
      home: HomeScreen(),
    );
  }
}

class HomeScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Home Screen'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Simulate sending a deep link
            AlfReed.sendLink('your_scheme://details?id=1');
          },
          child: Text('Send Deep Link'),
        ),
      ),
    );
  }
}

// Listen for incoming links
AlfReed.onLinkReceived.listen((link) {
  // Navigate to the DetailsScreen when a link is received
  final uri = Uri.parse(link);
  if (uri.pathSegments.length > 1 && uri.pathSegments[0] == 'details') {
    final id = uri.queryParameters['id'];
    // Navigate to the details screen with the received ID
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => DetailsScreen(id: id),
      ),
    );
  }
});

class DetailsScreen extends StatelessWidget {
  final String? id;

  DetailsScreen({this.id});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Details Screen'),
      ),
      body: Center(
        child: Text('Details for item ID: $id'),
      ),
    );
  }
}

/*
  Application Flow Explanation:
  1. The app starts and initializes the AlfReed package.
  2. The HomeScreen is displayed with a button to simulate sending a deep link.
  3. When the button is pressed, a deep link is sent using AlfReed.sendLink().
  4. The app listens for incoming links using AlfReed.onLinkReceived.
  5. If a link is received, it checks if the link is for the details screen.
  6. If valid, it extracts the ID from the link and navigates to the DetailsScreen.
  7. The DetailsScreen displays the ID received from the deep link.
*/

## <-- END_MAIN -->
```

### Summary

In this blog post, we explored the **alfreed** package, which provides a straightforward solution for implementing deep linking in Flutter applications. We covered the setup process, including platform-specific configurations for Android and iOS, and provided a complete example demonstrating how to handle incoming links and navigate between screens. The application flow was explained step-by-step through comments, making it easy to understand how the package works in practice. This package is ideal for developers looking to enhance their app's user experience through deep linking capabilities.
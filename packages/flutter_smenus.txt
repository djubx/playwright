# Flutter Package Overview: flutter_smenus

<!-- START_DESCRIPTION -->
## Description

The `flutter_smenus` package is a powerful and flexible solution for creating customizable side menus in Flutter applications. It allows developers to implement various types of menus, including sliding menus, pop-up menus, and more, enhancing the user experience by providing intuitive navigation options.

### When to Use `flutter_smenus`

- **Complex Navigation**: When your application has multiple sections or features that require easy access.
- **User Preferences**: If you want to allow users to customize their navigation experience.
- **Enhanced UI**: To improve the overall aesthetic and usability of your app with smooth animations and transitions.

### Key Features

- **Customizable Menus**: Easily create menus with custom items, icons, and styles.
- **Animation Support**: Smooth animations for menu transitions, enhancing user experience.
- **Responsive Design**: Menus that adapt to different screen sizes and orientations.
- **Easy Integration**: Simple setup and integration into existing Flutter projects.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
## Tutorial

### Installation

To get started with `flutter_smenus`, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  flutter_smenus: ^latest_version
```

Make sure to replace `^latest_version` with the latest version available on [pub.dev](https://pub.dev/packages/flutter_smenus).

### Platform-Specific Configuration

#### Android

For Android, ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
        ...
    }
}
```

#### iOS

For iOS, you may need to set the deployment target in your `ios/Podfile`:

```ruby
platform :ios, '10.0'
```

### Basic Usage

1. **Import the Package**: In your Dart file, import the package:

   ```dart
   import 'package:flutter_smenus/flutter_smenus.dart';
   ```

2. **Create a Menu**: Use the `SMenu` widget to create a side menu. Here’s a simple example:

   ```dart
   SMenu(
     items: [
       SMenuItem(icon: Icons.home, title: 'Home'),
       SMenuItem(icon: Icons.settings, title: 'Settings'),
     ],
     onItemSelected: (item) {
       // Handle menu item selection
     },
   );
   ```

3. **Integrate with Your App**: Wrap your main widget with the `SMenu` widget to enable the menu functionality.

### Example Configuration

Here’s a basic setup for a Flutter application using `flutter_smenus`:

```dart
import 'package:flutter/material.dart';
import 'package:flutter_smenus/flutter_smenus.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: RealFlutter(),
    );
  }
}
```

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
## Complete Example

```dart
import 'package:flutter/material.dart';
import 'package:flutter_smenus/flutter_smenus.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Variable to control the menu state
  bool isMenuOpen = false;

  // Function to toggle the menu
  void toggleMenu() {
    setState(() {
      isMenuOpen = !isMenuOpen;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter SMenus Example'),
        leading: IconButton(
          icon: Icon(Icons.menu),
          onPressed: toggleMenu, // Toggle menu on button press
        ),
      ),
      body: Stack(
        children: [
          // Main content of the app
          Center(
            child: Text('Main Content Here'),
          ),
          // Side menu
          if (isMenuOpen) 
            SMenu(
              items: [
                SMenuItem(icon: Icons.home, title: 'Home'),
                SMenuItem(icon: Icons.settings, title: 'Settings'),
                SMenuItem(icon: Icons.info, title: 'About'),
              ],
              onItemSelected: (item) {
                // Handle menu item selection
                print('Selected: ${item.title}');
                toggleMenu(); // Close menu after selection
              },
            ),
        ],
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the MyApp class, which sets up the MaterialApp.
// 2. The RealFlutter widget is the main screen, which contains an AppBar and a body.
// 3. The AppBar has a menu button that toggles the side menu's visibility.
// 4. The body contains a Stack widget, allowing the main content and the menu to overlap.
// 5. When the menu is open, the SMenu widget is displayed with a list of items.
// 6. Selecting a menu item prints the title to the console and closes the menu.
```

<!-- END_MAIN -->

## Summary

In this blog post, we explored the `flutter_smenus` package, which provides a robust solution for implementing side menus in Flutter applications. We covered the installation process, platform-specific configurations, and provided a complete example demonstrating how to integrate and use the package effectively. The example showcased how to toggle the menu and handle item selections, making it a valuable addition to any Flutter developer's toolkit.
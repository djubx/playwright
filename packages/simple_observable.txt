<-- START_DESCRIPTION -->

# Simple Observable Flutter Package
=====================================

The `simple_observable` package is a lightweight and easy-to-use state management solution for Flutter applications. It allows you to manage your app's state by creating observable variables that notify listeners when their values change.

### When to Use

Use `simple_observable` when you need to manage simple state changes in your app, such as:

* Toggling a button's enabled state
* Updating a text field's value
* Changing the visibility of a widget

### Features

* Create observable variables with a simple syntax
* Notify listeners when an observable variable's value changes
* Use built-in widgets to simplify state management

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using Simple Observable
==========================================

### Step 1: Add the Package to Your Pubspec

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  simple_observable: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:simple_observable/simple_observable.dart';
```
### Step 3: Create an Observable Variable

Create an observable variable using the `Observable` class:
```dart
class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final _counter = Observable(0);

  @override
  Widget build(BuildContext context) {
    // ...
  }
}
```
### Step 4: Use the Observable Variable

Use the observable variable in your widget tree:
```dart
@override
Widget build(BuildContext context) {
  return Scaffold(
    body: Center(
      child: Text(
        _counter.value.toString(),
        style: TextStyle(fontSize: 24),
      ),
    ),
    floatingActionButton: FloatingActionButton(
      onPressed: () {
        _counter.value++;
      },
      child: Icon(Icons.add),
    ),
  );
}
```
### Platform-Specific Details

No platform-specific configurations are required for this package.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:simple_observable/simple_observable.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Simple Observable Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Create an observable variable
  final _counter = Observable(0);

  @override
  Widget build(BuildContext context) {
    // Use the observable variable in the widget tree
    return Scaffold(
      appBar: AppBar(
        title: Text('Simple Observable Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'You have pushed the button this many times:',
            ),
            Text(
              // Display the current value of the observable variable
              _counter.value.toString(),
              style: TextStyle(fontSize: 24),
            ),
          ],
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          // Increment the value of the observable variable
          _counter.value++;
        },
        child: Icon(Icons.add),
      ),
    );
  }
}

// The application flow:
// 1. The user presses the floating action button.
// 2. The _counter.value is incremented.
// 3. The Text widget displaying the _counter.value is updated.
// 4. The new value is displayed to the user.
```

// The code flow is as follows:
// The user interaction starts when the user presses the floating action button.
// The button press triggers the onPressed callback, which increments the _counter.value.
// The Text widget displaying the _counter.value is updated automatically because it is listening to the _counter observable.
// The new value is displayed to the user, showing the updated count.

<-- END_MAIN -->
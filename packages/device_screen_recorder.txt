```markdown
<!-- START_DESCRIPTION -->
# Device Screen Recorder Flutter Package

The `device_screen_recorder` package is a powerful tool for Flutter developers looking to implement screen recording functionality in their applications. This package allows you to capture the screen of the device, making it ideal for creating tutorials, demos, or any application that requires screen sharing.

## When to Use This Package
- **Tutorial Applications**: If you're building an app that provides tutorials or guides, screen recording can help users understand how to use the app effectively.
- **Demo Apps**: For applications that require showcasing features, screen recording can be a great way to create promotional content.
- **Feedback and Bug Reporting**: Users can record their screens to provide feedback or report bugs, making it easier for developers to understand issues.

## Features
- **Cross-Platform Support**: Works on both Android and iOS devices.
- **Customizable Recording Options**: Allows you to set parameters like resolution and frame rate.
- **Easy Integration**: Simple API that integrates seamlessly with existing Flutter applications.
- **Audio Recording**: Option to include audio from the device during recording.

Overall, the `device_screen_recorder` package is a versatile solution for adding screen recording capabilities to your Flutter applications.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Device Screen Recorder

## Installation
To get started with the `device_screen_recorder` package, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  device_screen_recorder: ^latest_version
```

Make sure to replace `^latest_version` with the latest version available on [pub.dev](https://pub.dev/packages/device_screen_recorder).

## Platform-Specific Configuration

### Android
1. **Permissions**: Add the following permissions to your `AndroidManifest.xml` file located in `android/app/src/main/AndroidManifest.xml`:

```xml
<uses-permission android:name="android.permission.RECORD_AUDIO"/>
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
<uses-permission android:name="android.permission.SYSTEM_ALERT_WINDOW"/>
```

2. **Minimum SDK Version**: Ensure your `minSdkVersion` is set to at least 21 in `android/app/build.gradle`:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
        ...
    }
}
```

### iOS
1. **Permissions**: Add the following keys to your `Info.plist` file located in `ios/Runner/Info.plist`:

```xml
<key>NSMicrophoneUsageDescription</key>
<string>We need access to your microphone for audio recording.</string>
<key>NSPhotoLibraryUsageDescription</key>
<string>We need access to your photo library to save recordings.</string>
```

## Basic Usage
Hereâ€™s how to use the `device_screen_recorder` package in your Flutter application:

1. Import the package:

```dart
import 'package:device_screen_recorder/device_screen_recorder.dart';
```

2. Initialize the recorder and start recording:

```dart
void startRecording() async {
  await DeviceScreenRecorder.startRecordScreen();
}
```

3. Stop recording and retrieve the file path:

```dart
void stopRecording() async {
  String? filePath = await DeviceScreenRecorder.stopRecordScreen();
  print("Recording saved at: $filePath");
}
```

With these steps, you can easily implement screen recording in your Flutter application.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Device Screen Recorder

```dart
import 'package:flutter/material.dart';
import 'package:device_screen_recorder/device_screen_recorder.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  bool isRecording = false; // Track recording state

  // Function to start recording
  void startRecording() async {
    await DeviceScreenRecorder.startRecordScreen();
    setState(() {
      isRecording = true; // Update state to indicate recording has started
    });
  }

  // Function to stop recording
  void stopRecording() async {
    String? filePath = await DeviceScreenRecorder.stopRecordScreen();
    setState(() {
      isRecording = false; // Update state to indicate recording has stopped
    });
    print("Recording saved at: $filePath"); // Log the file path
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Device Screen Recorder Example'),
        ),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              // Check if currently recording
              if (isRecording) {
                stopRecording(); // Stop recording if already recording
              } else {
                startRecording(); // Start recording if not recording
              }
            },
            child: Text(isRecording ? 'Stop Recording' : 'Start Recording'),
          ),
        ),
      ),
    );
  }
}
```

// The above code creates a simple Flutter application that allows users to start and stop screen recording.
// 1. The `main` function initializes the app by running the `RealFlutter` widget.
// 2. The `RealFlutter` widget is a stateful widget that maintains the recording state.
// 3. The `startRecording` function calls the `startRecordScreen` method from the `device_screen_recorder` package and updates the UI state.
// 4. The `stopRecording` function calls the `stopRecordScreen` method, retrieves the file path of the recorded video, and updates the UI state.
// 5. The UI consists of a button that toggles between starting and stopping the recording based on the current state.
// 6. When the button is pressed, it checks if recording is in progress and calls the appropriate function.

```
<!-- END_MAIN -->
```

This structured blog post provides a comprehensive overview of the `device_screen_recorder` package, guiding developers through its features, setup, and practical usage in a Flutter application.
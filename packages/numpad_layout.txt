<-- START_DESCRIPTION -->

# Numpad Layout Flutter Package
================================

The `numpad_layout` Flutter package provides a customizable numeric keypad layout for Flutter applications. It allows developers to create a numeric keypad with a specific layout, making it easier to input numbers in various formats.

## When to Use This Package
---------------------------

This package is useful when you need to input numbers in a specific format, such as:

* Phone numbers
* Credit card numbers
* PIN codes
* Serial numbers

## Features
------------

* Customizable keypad layout
* Support for various input formats (e.g., phone number, credit card number)
* Optional input validation
* Keyboard appearance customization

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Numpad Layout Package
=====================================================

## Step 1: Add the Package to Your Flutter Project
------------------------------------------------

Add the `numpad_layout` package to your `pubspec.yaml` file:
```yml
dependencies:
  numpad_layout: ^1.0.0
```
Then, run `flutter pub get` to install the package.

## Step 2: Import the Package
---------------------------

Import the `numpad_layout` package in your Dart file:
```dart
import 'package:numpad_layout/numpad_layout.dart';
```
## Step 3: Create a Numpad Layout
------------------------------

Create a `NumpadLayout` widget and customize its appearance:
```dart
NumpadLayout(
  // Customize the keypad layout
  layout: [
    ['1', '2', '3'],
    ['4', '5', '6'],
    ['7', '8', '9'],
    ['0', '.', 'DEL'],
  ],
  // Customize the keyboard appearance
  keyboardAppearance: KeyboardAppearance(
    backgroundColor: Colors.white,
    keyColor: Colors.black,
  ),
)
```
## Step 4: Handle Input
---------------------

Use the `onInput` callback to handle user input:
```dart
NumpadLayout(
  // ...
  onInput: (input) {
    // Handle user input
    print(input);
  },
)
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:numpad_layout/numpad_layout.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Numpad Layout Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _inputController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Numpad Layout Demo'),
      ),
      body: Column(
        children: [
          // Display user input
          TextField(
            controller: _inputController,
            readOnly: true,
          ),
          // Create a numpad layout
          NumpadLayout(
            // Customize the keypad layout
            layout: [
              ['1', '2', '3'],
              ['4', '5', '6'],
              ['7', '8', '9'],
              ['0', '.', 'DEL'],
            ],
            // Customize the keyboard appearance
            keyboardAppearance: KeyboardAppearance(
              backgroundColor: Colors.white,
              keyColor: Colors.black,
            ),
            // Handle user input
            onInput: (input) {
              // Update the input field
              _inputController.text = input;
            },
          ),
        ],
      ),
    );
  }
}

// Application flow:
// 1. The user interacts with the numpad layout.
// 2. The `onInput` callback is triggered with the user's input.
// 3. The input field is updated with the user's input.
// 4. The user can continue interacting with the numpad layout.
```

// Summary: This code creates a basic numpad layout with a customizable keypad layout and keyboard appearance. It handles user input and updates an input field with the user's input. The application flow is straightforward, with the user interacting with the numpad layout, triggering the `onInput` callback, and updating the input field.

<-- END_MAIN -->
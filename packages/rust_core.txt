<-- START_DESCRIPTION -->
Rust Core Flutter Package
==========================

The `rust_core` Flutter package is a powerful tool for integrating Rust code into Flutter applications. It allows developers to leverage the performance and reliability of Rust in their Flutter projects.

When to Use
------------

The `rust_core` package is ideal for situations where you need to perform complex computations or data processing in your Flutter app. By using Rust, you can take advantage of its performance and concurrency features to improve the overall performance of your app.

Features
--------

*   Integrates Rust code into Flutter applications
*   Supports complex computations and data processing
*   Leverages Rust's performance and concurrency features

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->
Setup and Usage
----------------

To use the `rust_core` package in your Flutter project, follow these steps:

### Step 1: Add the Package to Your Project

Add the `rust_core` package to your `pubspec.yaml` file:

```yml
dependencies:
  rust_core: ^1.0.0
```

### Step 2: Create a Rust Module

Create a new Rust module in your project directory:

```bash
mkdir rust_module
cd rust_module
cargo init --lib
```

### Step 3: Configure the Rust Module

In the `Cargo.toml` file, add the following configuration:

```toml
[lib]
crate-type = ["cdylib"]
```

### Step 4: Write Rust Code

In the `src/lib.rs` file, write your Rust code:

```rust
#[no_mangle]
pub extern "C" fn rust_function() {
    println!("Hello from Rust!");
}
```

### Step 5: Use the Rust Code in Your Flutter App

In your Flutter app, import the `rust_core` package and use the `RustCore` class to call the Rust function:

```dart
import 'package:rust_core/rust_core.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Rust Core Example'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            RustCore.rustFunction();
          },
          child: Text('Call Rust Function'),
        ),
      ),
    );
  }
}
```

Platform-Specific Details
-------------------------

### Android

To use the `rust_core` package on Android, you need to add the following configuration to your `android/app/build.gradle` file:

```groovy
android {
    ...
    defaultConfig {
        ...
        ndk {
            abiFilters "armeabi-v7l", "arm64-v8a", "x86", "x86_64"
        }
    }
}
```

### iOS

To use the `rust_core` package on iOS, you need to add the following configuration to your `ios/Podfile` file:

```ruby
target 'Runner' do
  ...
  pod 'rust_core', :path => '../.symlinks/plugins/rust_core/ios'
end
```

<-- END_TUTORIAL -->

<-- START_MAIN -->
```dart
import 'package:flutter/material.dart';
import 'package:rust_core/rust_core.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Rust Core Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Step 1: Create a button to call the Rust function
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Rust Core Example'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Step 2: Call the Rust function using the RustCore class
            RustCore.rustFunction();
          },
          child: Text('Call Rust Function'),
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user clicks the "Call Rust Function" button.
// 2. The onPressed callback is called, which calls the RustCore.rustFunction() method.
// 3. The RustCore.rustFunction() method calls the rust_function() function in the Rust module.
// 4. The rust_function() function prints "Hello from Rust!" to the console.
```
// The application flow is complete.
<-- END_MAIN -->
```markdown
<!-- START_DESCRIPTION -->
# Exploring the `word_selectable_text` Flutter Package

The `word_selectable_text` package is a powerful tool for Flutter developers looking to enhance text selection capabilities in their applications. Unlike the default text selection in Flutter, this package allows users to select text at the word level, providing a more intuitive and user-friendly experience. 

## When to Use This Package
This package is particularly useful in applications where text manipulation is essential, such as:
- Text editors
- Note-taking apps
- Educational applications
- Any app that requires enhanced text interaction

## Key Features
- **Word-Level Selection**: Users can select entire words instead of individual characters, making it easier to copy, cut, or share text.
- **Customizable Appearance**: The text selection handles and highlight colors can be customized to fit the app's design.
- **Rich Text Support**: It supports rich text formatting, allowing for a more versatile text display.
- **Easy Integration**: The package is straightforward to integrate into existing Flutter applications.

Overall, `word_selectable_text` enhances the user experience by providing a more natural way to interact with text in Flutter applications.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using `word_selectable_text`

## Installation
To get started with the `word_selectable_text` package, you need to add it to your `pubspec.yaml` file. Open your `pubspec.yaml` and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  word_selectable_text: ^latest_version
```

Make sure to replace `latest_version` with the most recent version of the package. After saving the file, run `flutter pub get` to install the package.

## Platform-Specific Details
### Android
For Android, ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
        ...
    }
}
```

### iOS
For iOS, you may need to enable certain permissions in your `Info.plist` if your app requires text sharing capabilities. However, the package itself does not require any special configurations.

## Basic Usage
To use the `word_selectable_text` package, you can replace your standard `Text` widget with `WordSelectableText`. Hereâ€™s a simple example:

```dart
import 'package:flutter/material.dart';
import 'package:word_selectable_text/word_selectable_text.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Word Selectable Text Example')),
        body: Center(
          child: WordSelectableText(
            'This is an example of word selectable text.',
            style: TextStyle(fontSize: 20),
            onSelectionChanged: (selection) {
              // Handle selection changes
              print('Selected text: ${selection.text}');
            },
          ),
        ),
      ),
    );
  }
}

void main() {
  runApp(RealFlutter());
}
```

In this example, we create a simple Flutter app that displays a selectable text widget. The `onSelectionChanged` callback allows you to handle any actions when the text selection changes.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of `word_selectable_text`

```dart
import 'package:flutter/material.dart';
import 'package:word_selectable_text/word_selectable_text.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Word Selectable Text Example')),
        body: Center(
          child: WordSelectableText(
            'This is an example of word selectable text.',
            style: TextStyle(fontSize: 20),
            onSelectionChanged: (selection) {
              // Handle selection changes
              print('Selected text: ${selection.text}');
            },
          ),
        ),
      ),
    );
  }
}

void main() {
  runApp(RealFlutter());
}

// Application Flow Explanation:
// 1. The app starts with the main function, which calls runApp() to launch the RealFlutter widget.
// 2. The RealFlutter widget builds a MaterialApp with a Scaffold.
// 3. The Scaffold contains an AppBar with the title 'Word Selectable Text Example'.
// 4. In the body of the Scaffold, we center a WordSelectableText widget.
// 5. The WordSelectableText widget displays a string of text that users can select.
// 6. When the user selects text, the onSelectionChanged callback is triggered, printing the selected text to the console.
// 7. This setup allows for easy text selection and interaction, enhancing the user experience in text-heavy applications.
```
<!-- END_MAIN -->
``` 

This structured blog post provides a comprehensive overview of the `word_selectable_text` package, guiding developers through its features, installation, usage, and a complete example. Each section is clearly marked for easy navigation, ensuring that readers can quickly find the information they need.
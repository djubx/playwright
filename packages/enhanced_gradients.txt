```markdown
<-- START_DESCRIPTION -->

# Enhanced Gradients Flutter Package

The `enhanced_gradients` Flutter package is a powerful tool designed to provide developers with advanced gradient capabilities beyond the standard offerings in Flutter. This package allows for the creation of complex and visually appealing gradient effects that can enhance the user interface of any Flutter application.

## Features

- **Custom Gradient Types**: Supports linear, radial, and sweep gradients with advanced customization options.
- **Gradient Animations**: Easily animate gradients to create dynamic visual effects.
- **Gradient Masks**: Apply gradients as masks to widgets, enabling creative design possibilities.
- **Performance Optimizations**: Built with performance in mind, ensuring smooth animations and transitions.

## When to Use

- **UI Enhancement**: When you want to add visually appealing gradient effects to your app's UI.
- **Dynamic Backgrounds**: For creating animated backgrounds that change over time or in response to user interactions.
- **Theming**: To implement gradient-based theming across your application for a consistent look and feel.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using Enhanced Gradients

In this tutorial, we will walk through the process of setting up the `enhanced_gradients` package in a Flutter project and demonstrate how to use its features effectively.

## Setup

1. **Add Dependency**

   Add the `enhanced_gradients` package to your `pubspec.yaml` file:

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     enhanced_gradients: ^1.0.0
   ```

2. **Install Packages**

   Run the following command to install the new package:

   ```bash
   flutter pub get
   ```

3. **Platform-Specific Configuration**

   - **Android**: Ensure your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

     ```gradle
     android {
         defaultConfig {
             minSdkVersion 21
         }
     }
     ```

   - **iOS**: No additional configuration is required for iOS.

## Using the Package

To use the `enhanced_gradients` package, import it into your Dart file:

```dart
import 'package:enhanced_gradients/enhanced_gradients.dart';
```

### Creating a Gradient

Here's how you can create a simple linear gradient:

```dart
Gradient myGradient = LinearGradient(
  colors: [Colors.blue, Colors.red],
  begin: Alignment.topLeft,
  end: Alignment.bottomRight,
);
```

### Applying a Gradient to a Widget

You can apply the gradient to a container like this:

```dart
Container(
  decoration: BoxDecoration(
    gradient: myGradient,
  ),
  child: Center(child: Text('Hello, Gradients!')),
);
```

### Animating a Gradient

To animate a gradient, you can use the `AnimatedGradient` widget provided by the package:

```dart
AnimatedGradient(
  duration: Duration(seconds: 3),
  gradient: myGradient,
  child: Center(child: Text('Animated Gradient')),
);
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

# Complete Example: Flutter Main File

Below is a complete example demonstrating the key features of the `enhanced_gradients` package.

```dart
import 'package:flutter/material.dart';
import 'package:enhanced_gradients/enhanced_gradients.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Enhanced Gradients Demo',
      home: GradientDemoScreen(),
    );
  }
}

class GradientDemoScreen extends StatefulWidget {
  @override
  _GradientDemoScreenState createState() => _GradientDemoScreenState();
}

class _GradientDemoScreenState extends State<GradientDemoScreen> {
  @override
  Widget build(BuildContext context) {
    // Define a linear gradient
    final Gradient linearGradient = LinearGradient(
      colors: [Colors.blue, Colors.purple],
      begin: Alignment.topLeft,
      end: Alignment.bottomRight,
    );

    // Define an animated gradient
    final AnimatedGradient animatedGradient = AnimatedGradient(
      duration: Duration(seconds: 5),
      gradient: linearGradient,
    );

    return Scaffold(
      appBar: AppBar(
        title: Text('Enhanced Gradients'),
      ),
      body: Center(
        child: Container(
          width: 300,
          height: 300,
          decoration: BoxDecoration(
            // Apply the animated gradient to the container
            gradient: animatedGradient,
          ),
          child: Center(
            child: Text(
              'Enhanced Gradients',
              style: TextStyle(
                color: Colors.white,
                fontSize: 24,
                fontWeight: FontWeight.bold,
              ),
            ),
          ),
        ),
      ),
    );
  }
}
```

// The application starts with the `main` function, which calls `runApp` with `RealFlutter`.
// `RealFlutter` is a stateless widget that sets up the MaterialApp and specifies `GradientDemoScreen` as the home screen.
// `GradientDemoScreen` is a stateful widget that demonstrates the use of enhanced gradients.
// Inside the `build` method, a linear gradient is defined and then wrapped in an `AnimatedGradient` for animation.
// The `Scaffold` widget provides the basic structure with an `AppBar` and a `Center` widget.
// A `Container` is used to display the gradient, with the `AnimatedGradient` applied to its decoration.
// The text "Enhanced Gradients" is centered within the container, showcasing the gradient effect.

<-- END_MAIN -->
```
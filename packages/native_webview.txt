<-- START_DESCRIPTION -->

Native WebView Flutter Package
==============================

The `native_webview` Flutter package allows you to embed a native web view in your Flutter app. This is useful when you need to display web content, such as a website or an HTML page, within your app.

When to Use
------------

You should use this package when:

* You need to display web content within your app.
* You want to take advantage of the native web view's features, such as JavaScript execution and HTML5 support.
* You need to handle complex web pages that are difficult to render using Flutter's built-in widgets.

Features
--------

The `native_webview` package provides the following features:

* Embeds a native web view in your Flutter app.
* Supports JavaScript execution and HTML5.
* Allows you to handle web view events, such as page loading and navigation.
* Provides a range of configuration options, including user agent and caching settings.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
----------------

To use the `native_webview` package, follow these steps:

### Step 1: Add the Package to Your Pubspec

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  native_webview: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:native_webview/native_webview.dart';
```
### Step 3: Create a Web View

Create a `NativeWebView` widget and add it to your app:
```dart
NativeWebView(
  onWebViewCreated: (webViewController) {
    // Handle web view creation
  },
  initialUrl: 'https://www.example.com',
)
```
### Platform-Specific Details

#### Android

On Android, you need to add the following line to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.INTERNET" />
```
#### iOS

On iOS, you need to add the following line to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```
### Configuration and Optimization

You can configure the web view by passing options to the `NativeWebView` constructor. For example, you can set the user agent and caching settings:
```dart
NativeWebView(
  options: NativeWebViewOptions(
    userAgent: 'MyApp/1.0',
    caching: NativeWebViewCaching.enabled,
  ),
)
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:native_webview/native_webview.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Native Web View Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _webViewController = NativeWebViewController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Native Web View Demo'),
      ),
      body: NativeWebView(
        onWebViewCreated: (webViewController) {
          // Handle web view creation
          _webViewController = webViewController;
        },
        initialUrl: 'https://www.example.com',
        options: NativeWebViewOptions(
          userAgent: 'MyApp/1.0',
          caching: NativeWebViewCaching.enabled,
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          // Handle button press
          _webViewController.loadUrl('https://www.google.com');
        },
        child: Icon(Icons.refresh),
      ),
    );
  }
}

// The app starts by running the main function, which creates a new MyApp instance.
// The MyApp instance builds a MaterialApp with a title and a home page.
// The home page is a MyHomePage instance, which is a stateful widget.
// The MyHomePage instance builds a Scaffold with an AppBar and a body.
// The body is a NativeWebView instance, which is created with an initial URL and options.
// When the web view is created, the onWebViewCreated callback is called, which sets the _webViewController variable.
// When the button is pressed, the onPressed callback is called, which loads a new URL into the web view.
// The app uses the NativeWebView package to embed a native web view in the app.
// The web view is configured with a user agent and caching settings.
```

<-- END_MAIN -->
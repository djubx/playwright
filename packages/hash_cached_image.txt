<-- START_DESCRIPTION -->

Hash Cached Image
================

The `hash_cached_image` package is a Flutter library that allows you to cache images in your app using a hash-based caching mechanism. This package is useful when you need to display a large number of images in your app, and you want to reduce the number of network requests made to fetch these images.

Features
--------

*   Hash-based caching: The package uses a hash-based caching mechanism to store and retrieve images.
*   Automatic cache management: The package automatically manages the cache for you, so you don't need to worry about deleting or updating the cache.
*   Support for multiple image formats: The package supports multiple image formats, including JPEG, PNG, GIF, and more.

When to Use
------------

You should use the `hash_cached_image` package in the following scenarios:

*   When you need to display a large number of images in your app.
*   When you want to reduce the number of network requests made to fetch images.
*   When you want to improve the performance of your app by caching frequently used images.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
----------------

To use the `hash_cached_image` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:

```yml
dependencies:
  hash_cached_image: ^1.0.0
```

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:hash_cached_image/hash_cached_image.dart';
```

### Step 3: Use the Package

Use the `HashCachedImage` widget to display an image:

```dart
HashCachedImage(
  imageUrl: 'https://example.com/image.jpg',
  placeholder: Center(child: CircularProgressIndicator()),
  errorWidget: Icon(Icons.error),
)
```

Platform-Specific Details
-------------------------

### Android

On Android, the package uses the `AndroidBitmapFactory` to decode images. You can configure the factory to use a different decoder by setting the `android.decoder` property:

```dart
HashCachedImage(
  imageUrl: 'https://example.com/image.jpg',
  androidDecoder: AndroidBitmapFactory.decoder,
)
```

### iOS

On iOS, the package uses the `UIImage` class to decode images. You can configure the class to use a different decoder by setting the `ios.decoder` property:

```dart
HashCachedImage(
  imageUrl: 'https://example.com/image.jpg',
  iosDecoder: UIImage.decoder,
)
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:hash_cached_image/hash_cached_image.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Hash Cached Image Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Hash Cached Image Demo'),
      ),
      body: Center(
        child: HashCachedImage(
          imageUrl: 'https://example.com/image.jpg',
          placeholder: Center(child: CircularProgressIndicator()),
          errorWidget: Icon(Icons.error),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app and navigates to the MyHomePage widget.
// 2. The MyHomePage widget uses the HashCachedImage widget to display an image.
// 3. The HashCachedImage widget checks if the image is cached.
// 4. If the image is cached, it displays the cached image.
// 5. If the image is not cached, it downloads the image from the network and caches it.
// 6. If there is an error downloading the image, it displays an error widget.
// 7. The user can configure the HashCachedImage widget to use a different decoder or placeholder.

// In summary, the code flows as follows:
// 1. The user runs the app and navigates to the MyHomePage widget.
// 2. The MyHomePage widget uses the HashCachedImage widget to display an image.
// 3. The HashCachedImage widget checks if the image is cached and displays it if it is.
// 4. If the image is not cached, it downloads the image from the network and caches it.
// 5. If there is an error downloading the image, it displays an error widget.

```

<-- END_MAIN -->
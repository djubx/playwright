# Flutter Package: seconds_countdown_timer

<!-- START_DESCRIPTION -->
## Description

The `seconds_countdown_timer` Flutter package is a simple yet effective tool for implementing countdown timers in your Flutter applications. This package is particularly useful in scenarios where you need to create timers for various purposes, such as game countdowns, quiz timers, or any feature that requires a time limit. 

### Key Features:
- **Customizable Duration**: Set the countdown duration in seconds.
- **Callbacks**: Execute functions when the timer starts, ticks, and completes.
- **UI Integration**: Easily integrate with your existing UI components.
- **Pause and Resume**: Control the timer's state with pause and resume functionality.

### When to Use:
- Implementing countdowns for games or quizzes.
- Creating timers for cooking or other timed activities.
- Building user interfaces that require time-based interactions.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
## Tutorial

### Installation

To use the `seconds_countdown_timer` package, you need to add it to your `pubspec.yaml` file. Open your `pubspec.yaml` and add the following line under dependencies:

```yaml
dependencies:
  seconds_countdown_timer: ^1.0.0
```

After adding the dependency, run the following command in your terminal to install the package:

```bash
flutter pub get
```

### Platform-Specific Configuration

#### Android
No specific configuration is required for Android. Just ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file.

#### iOS
For iOS, ensure that you have the correct permissions set in your `Info.plist` if you plan to use any features that require user permissions. However, for basic countdown functionality, no additional configuration is necessary.

### Basic Usage

To use the `seconds_countdown_timer`, you need to import the package in your Dart file:

```dart
import 'package:seconds_countdown_timer/seconds_countdown_timer.dart';
```

You can then create a countdown timer by using the `SecondsCountdownTimer` widget. Here’s a simple example of how to set it up:

```dart
SecondsCountdownTimer(
  duration: 60, // Duration in seconds
  onStart: () {
    print("Timer started!");
  },
  onTick: (remainingSeconds) {
    print("Remaining seconds: $remainingSeconds");
  },
  onComplete: () {
    print("Timer completed!");
  },
)
```

This widget will start a countdown from 60 seconds, printing messages to the console at each stage of the timer.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
## Complete Example

Here’s a complete Flutter application that demonstrates the use of the `seconds_countdown_timer` package:

```dart
import 'package:flutter/material.dart';
import 'package:seconds_countdown_timer/seconds_countdown_timer.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Countdown Timer Example',
      home: CountdownPage(),
    );
  }
}

class CountdownPage extends StatefulWidget {
  @override
  _CountdownPageState createState() => _CountdownPageState();
}

class _CountdownPageState extends State<CountdownPage> {
  // Variable to hold the countdown duration
  int duration = 60; // 60 seconds countdown

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Countdown Timer'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            // Countdown Timer Widget
            SecondsCountdownTimer(
              duration: duration,
              onStart: () {
                // Called when the timer starts
                print("Timer started!");
              },
              onTick: (remainingSeconds) {
                // Called every second with the remaining seconds
                print("Remaining seconds: $remainingSeconds");
              },
              onComplete: () {
                // Called when the timer completes
                print("Timer completed!");
              },
            ),
            SizedBox(height: 20),
            // Button to reset the timer
            ElevatedButton(
              onPressed: () {
                // Reset the timer to 60 seconds
                setState(() {
                  duration = 60;
                });
              },
              child: Text('Reset Timer'),
            ),
          ],
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the RealFlutter widget.
// 2. RealFlutter builds a MaterialApp with a title and a home page (CountdownPage).
// 3. CountdownPage is a stateful widget that manages the countdown timer.
// 4. The countdown duration is set to 60 seconds.
// 5. The SecondsCountdownTimer widget is displayed, which starts counting down from 60 seconds.
// 6. The onStart callback prints a message when the timer starts.
// 7. The onTick callback prints the remaining seconds every second.
// 8. The onComplete callback prints a message when the timer reaches zero.
// 9. A button is provided to reset the timer back to 60 seconds, which updates the state and restarts the countdown.
```

<!-- END_MAIN -->

## Summary
In this blog post, we explored the `seconds_countdown_timer` Flutter package, which provides a straightforward way to implement countdown timers in your applications. We covered the installation process, platform-specific configurations, and provided a complete example demonstrating its usage. The application flow was explained step-by-step through comments in the code, making it easy to understand how the package works in practice. This package is ideal for scenarios requiring time-based interactions, making it a valuable addition to your Flutter toolkit.
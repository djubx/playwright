<-- START_DESCRIPTION -->

**Progress Indicator Flutter Package**
=====================================

The `progress_indicator` Flutter package provides a customizable progress indicator for Flutter applications. It allows developers to display a progress indicator in a variety of styles, including linear, circular, and custom shapes.

**When to Use**
---------------

The `progress_indicator` package is useful when you need to display a progress indicator in your Flutter application, such as:

* During network requests or data loading
* When performing time-consuming operations
* To indicate progress during a multi-step process

**Features**
------------

* Customizable progress indicator styles (linear, circular, custom shapes)
* Support for determinate and indeterminate progress indicators
* Animated progress indicators
* Customizable colors, sizes, and shapes

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setup and Usage**
-------------------

To use the `progress_indicator` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  progress_indicator: ^1.0.0
```
2. Run `flutter pub get` to install the package.
3. Import the package in your Dart file:
```dart
import 'package:progress_indicator/progress_indicator.dart';
```
4. Create a `ProgressIndicator` widget and customize its properties:
```dart
ProgressIndicator(
  type: ProgressIndicatorType.linear,
  value: 0.5,
  color: Colors.blue,
  backgroundColor: Colors.grey,
)
```
**Platform-Specific Details**
-----------------------------

* Android: No additional configuration required.
* iOS: To use the `progress_indicator` package on iOS, you need to add the following line to your `Info.plist` file:
```xml
<key>UIProgressViewStyle</key>
<string>UIProgressViewStyleDefault</string>
```
**Optimizations**
----------------

* To improve performance, use the `ProgressIndicatorType.linear` type instead of `ProgressIndicatorType.circular` when possible.
* Use the `value` property to set the progress value instead of using the `ProgressIndicatorType.indeterminate` type.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:progress_indicator/progress_indicator.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  double _progressValue = 0.0;

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Progress Indicator Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              // Linear progress indicator
              ProgressIndicator(
                type: ProgressIndicatorType.linear,
                value: _progressValue,
                color: Colors.blue,
                backgroundColor: Colors.grey,
              ),
              SizedBox(height: 20),
              // Circular progress indicator
              ProgressIndicator(
                type: ProgressIndicatorType.circular,
                value: _progressValue,
                color: Colors.blue,
                backgroundColor: Colors.grey,
              ),
              SizedBox(height: 20),
              // Custom shape progress indicator
              ProgressIndicator(
                type: ProgressIndicatorType.custom,
                value: _progressValue,
                color: Colors.blue,
                backgroundColor: Colors.grey,
                customShape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(10),
                ),
              ),
              SizedBox(height: 20),
              // Animated progress indicator
              ProgressIndicator(
                type: ProgressIndicatorType.linear,
                value: _progressValue,
                color: Colors.blue,
                backgroundColor: Colors.grey,
                animationDuration: Duration(milliseconds: 1000),
              ),
              SizedBox(height: 20),
              // Button to update progress value
              ElevatedButton(
                onPressed: () {
                  setState(() {
                    _progressValue += 0.1;
                    if (_progressValue > 1.0) {
                      _progressValue = 0.0;
                    }
                  });
                },
                child: Text('Update Progress'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user runs the app and sees the progress indicators with initial values.
// 2. The user clicks the "Update Progress" button to update the progress value.
// 3. The progress indicators update their values and display the new progress.
// 4. The user can repeat steps 2-3 to see the progress indicators update.
// 5. The app demonstrates different types of progress indicators and their customization options.

// Summary:
// The code demonstrates the use of the `progress_indicator` package to display different types of progress indicators in a Flutter app. The app shows linear, circular, and custom shape progress indicators, as well as an animated progress indicator. The user can update the progress value by clicking a button, and the progress indicators will update their values accordingly. The code showcases the customization options available for the progress indicators, including colors, sizes, and shapes.
```

<-- END_MAIN -->
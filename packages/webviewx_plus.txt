<-- START_DESCRIPTION -->

# webviewx_plus Flutter Package
=====================================

The `webviewx_plus` Flutter package is a powerful tool for embedding web content into your Flutter applications. It provides a flexible and customizable way to display web pages, HTML content, and even execute JavaScript code. With `webviewx_plus`, you can create hybrid apps that combine the best of both worlds: the native performance and features of Flutter, and the dynamic content and functionality of the web.

When to use `webviewx_plus`:

* Displaying web content, such as news articles, blog posts, or documentation
* Creating hybrid apps that integrate web and native components
* Executing JavaScript code or interacting with web APIs
* Providing a web-based interface for users to interact with your app

Key features of `webviewx_plus`:

* Support for displaying web pages, HTML content, and executing JavaScript code
* Customizable web view with support for gestures, scrolling, and zooming
* Ability to interact with web content using JavaScript bridges
* Support for platform-specific features, such as Android's WebView and iOS's WKWebView

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting up webviewx_plus
---------------------------

To use `webviewx_plus` in your Flutter project, follow these steps:

1. Add the `webviewx_plus` package to your `pubspec.yaml` file:
```yml
dependencies:
  flutter:
    sdk: flutter
  webviewx_plus: ^1.0.0
```
2. Run `flutter pub get` to install the package.
3. Import the `webviewx_plus` package in your Dart file:
```dart
import 'package:webviewx_plus/webviewx_plus.dart';
```
4. Create a `WebViewXPlus` widget and add it to your app's widget tree:
```dart
WebViewXPlus(
  initialUrl: 'https://www.example.com',
  javascriptMode: JavascriptMode.unrestricted,
  onWebViewCreated: (controller) {
    // Use the controller to interact with the web view
  },
)
```
Platform-specific details:

* Android: Make sure to add the `android.permission.INTERNET` permission to your app's `AndroidManifest.xml` file.
* iOS: Make sure to add the `NSAppTransportSecurity` key to your app's `Info.plist` file and set it to `NSAllowsArbitraryLoads`.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:webviewx_plus/webviewx_plus.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  WebViewXPlusController _controller;

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('RealFlutter'),
        ),
        body: WebViewXPlus(
          initialUrl: 'https://www.example.com',
          javascriptMode: JavascriptMode.unrestricted,
          onWebViewCreated: (controller) {
            _controller = controller;
          },
          onPageFinished: (url) {
            // Use the controller to interact with the web view
            _controller.evaluateJavascript('console.log("Page finished loading");');
          },
        ),
      ),
    );
  }
}

// The app starts by running the main function, which creates a new instance of the RealFlutter widget.
// The RealFlutter widget is a stateful widget that contains a WebViewXPlus widget.
// The WebViewXPlus widget is used to display a web page, and it is configured to allow JavaScript execution.
// When the web view is created, the onWebViewCreated callback is called, which sets the _controller variable to the new controller.
// The controller can be used to interact with the web view, such as executing JavaScript code.
// When the page finishes loading, the onPageFinished callback is called, which executes a JavaScript console log statement.
```

<-- END_MAIN -->
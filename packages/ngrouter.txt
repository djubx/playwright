```markdown
<!-- START_DESCRIPTION -->
# ngrouter Flutter Package: A Comprehensive Overview

The `ngrouter` package is a powerful routing library for Flutter applications, designed to simplify the management of navigation and routing in your app. It provides a declarative approach to routing, making it easier to define routes and manage navigation states. This package is particularly useful for applications with complex navigation requirements, such as those with nested routes or dynamic route parameters.

## When to Use ngrouter
- **Complex Navigation**: If your application has multiple nested routes or requires dynamic routing based on user input or application state.
- **Declarative Routing**: When you prefer a more structured and declarative way to define your routes, similar to how you would in web applications.
- **State Management**: If you are using state management solutions like Provider or Riverpod, `ngrouter` integrates well with these to manage navigation states.

## Key Features
- **Declarative Routing**: Define routes in a clear and structured manner.
- **Nested Routes**: Support for nested routing, allowing for complex navigation hierarchies.
- **Dynamic Routing**: Ability to create routes based on dynamic parameters.
- **Route Guards**: Implement guards to protect routes based on user authentication or other conditions.
- **Integration with State Management**: Works seamlessly with popular state management solutions.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# ngrouter Flutter Package: Setup and Usage Tutorial

In this section, we will walk through the setup process for the `ngrouter` package and demonstrate how to use it in a Flutter application.

## Installation

To get started, add the `ngrouter` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  ngrouter: ^latest_version
```

Make sure to replace `^latest_version` with the latest version available on [pub.dev](https://pub.dev/packages/ngrouter).

## Platform-Specific Configuration

### Android
For Android, ensure that your `AndroidManifest.xml` file has the necessary permissions and configurations. Typically, no additional configurations are required for routing.

### iOS
For iOS, ensure that your `Info.plist` file is configured correctly. Again, no specific configurations are needed for routing.

## Basic Usage

1. **Import the Package**: Start by importing the `ngrouter` package in your Dart file.

   ```dart
   import 'package:ngrouter/ngrouter.dart';
   ```

2. **Define Routes**: Create a list of routes that your application will use.

   ```dart
   final routes = [
     RouteDefinition(
       path: '/',
       component: HomeComponent,
     ),
     RouteDefinition(
       path: '/details/:id',
       component: DetailsComponent,
     ),
   ];
   ```

3. **Set Up the Router**: Use the `Router` class to set up the routing in your application.

   ```dart
   void main() {
     runApp(MyApp());
   }

   class MyApp extends StatelessWidget {
     @override
     Widget build(BuildContext context) {
       return MaterialApp.router(
         routerDelegate: RouterDelegate(routes),
         routeInformationParser: RouteInformationParser(),
       );
     }
   }
   ```

4. **Create Components**: Define the components that will be displayed for each route.

   ```dart
   class HomeComponent extends StatelessWidget {
     @override
     Widget build(BuildContext context) {
       return Scaffold(
         appBar: AppBar(title: Text('Home')),
         body: Center(child: Text('Welcome to Home')),
       );
     }
   }

   class DetailsComponent extends StatelessWidget {
     final String id;

     DetailsComponent(this.id);

     @override
     Widget build(BuildContext context) {
       return Scaffold(
         appBar: AppBar(title: Text('Details')),
         body: Center(child: Text('Details for item $id')),
       );
     }
   }
   ```

Now you have a basic setup for using the `ngrouter` package in your Flutter application.

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# ngrouter Flutter Package: Complete Example

```dart
import 'package:flutter/material.dart';
import 'package:ngrouter/ngrouter.dart';

// Define the main entry point of the application
void main() {
  runApp(RealFlutter());
}

// The main application widget
class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Define the routes for the application
    final routes = [
      RouteDefinition(
        path: '/',
        component: HomeComponent,
      ),
      RouteDefinition(
        path: '/details/:id',
        component: DetailsComponent,
      ),
    ];

    // Set up the MaterialApp with router
    return MaterialApp.router(
      routerDelegate: RouterDelegate(routes),
      routeInformationParser: RouteInformationParser(),
    );
  }
}

// Home component that serves as the landing page
class HomeComponent extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Home')),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text('Welcome to Home'),
            ElevatedButton(
              onPressed: () {
                // Navigate to the details page with a dynamic ID
                Navigator.of(context).pushNamed('/details/1');
              },
              child: Text('Go to Details'),
            ),
          ],
        ),
      ),
    );
  }
}

// Details component that displays information based on the ID
class DetailsComponent extends StatelessWidget {
  final String id;

  // Constructor to receive the ID from the route
  DetailsComponent(this.id);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Details')),
      body: Center(child: Text('Details for item $id')),
    );
  }
}

// Application Flow Explanation:
// 1. The application starts with the main function, which runs the RealFlutter widget.
// 2. The RealFlutter widget sets up the routes and initializes the MaterialApp with a router.
// 3. The HomeComponent is displayed first, showing a welcome message and a button.
// 4. When the button is pressed, it navigates to the DetailsComponent, passing an ID as a parameter.
// 5. The DetailsComponent retrieves the ID from the route and displays it on the screen.
```
<!-- END_MAIN -->
``` 

This structured approach provides a comprehensive overview of the `ngrouter` package, guiding developers through its features, setup, and practical usage in a Flutter application.
<-- START_DESCRIPTION -->

# Introduction to HSLuv Flutter Package
=====================================

The HSLuv Flutter package is a color manipulation library that provides an efficient and accurate way to work with colors in your Flutter applications. It is based on the HSLuv color model, which is a human-friendly color space that is designed to be more intuitive and easier to use than traditional color models like RGB or HEX.

## When to Use HSLuv
--------------------

You should use HSLuv when you need to perform complex color manipulations, such as:

* Color conversions between different color spaces
* Color gradient generation
* Color palette creation
* Color contrast calculations

## Features of HSLuv
--------------------

The HSLuv Flutter package provides the following features:

* Color conversions between HSLuv, RGB, HEX, and other color spaces
* Color gradient generation with support for multiple color stops
* Color palette creation with support for custom color selection
* Color contrast calculations with support for WCAG 2.1 guidelines

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up HSLuv in Your Flutter Project
==========================================

To use HSLuv in your Flutter project, follow these steps:

### Step 1: Add HSLuv to Your `pubspec.yaml` File

```yml
dependencies:
  flutter:
    sdk: flutter
  hsluv: ^1.0.0
```

### Step 2: Import HSLuv in Your Dart File

```dart
import 'package:hsluv/hsluv.dart';
```

### Step 3: Use HSLuv to Convert Colors

```dart
void main() {
  // Create a new HSLuv color object
  final hsluvColor = HSLuvColor(h: 120, s: 50, l: 50);

  // Convert HSLuv color to RGB color
  final rgbColor = hsluvColor.toRGB();

  // Print the RGB color values
  print('RGB: ${rgbColor.r}, ${rgbColor.g}, ${rgbColor.b}');
}
```

### Platform-Specific Details

* Android: No additional setup required.
* iOS: No additional setup required.

### Required Configurations or Optimizations

* No additional configurations or optimizations required.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:hsluv/hsluv.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Create a new HSLuv color object
  final hsluvColor = HSLuvColor(h: 120, s: 50, l: 50);

  // Convert HSLuv color to RGB color
  final rgbColor = hsluvColor.toRGB();

  // Create a color gradient with multiple color stops
  final gradientColors = [
    HSLuvColor(h: 0, s: 100, l: 50).toRGB(),
    HSLuvColor(h: 120, s: 100, l: 50).toRGB(),
    HSLuvColor(h: 240, s: 100, l: 50).toRGB(),
  ];

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'HSLuv Demo',
      home: Scaffold(
        appBar: AppBar(
          title: Text('HSLuv Demo'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              // Display the RGB color values
              Text('RGB: ${rgbColor.r}, ${rgbColor.g}, ${rgbColor.b}'),

              // Display the color gradient
              Container(
                height: 200,
                width: 200,
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    colors: gradientColors,
                    stops: [0.0, 0.5, 1.0],
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app and the `RealFlutter` widget is displayed.
// 2. The `RealFlutter` widget creates a new HSLuv color object and converts it to RGB.
// 3. The RGB color values are displayed on the screen.
// 4. A color gradient with multiple color stops is created using the HSLuv color model.
// 5. The color gradient is displayed on the screen.
// 6. The user can interact with the app and change the color values.
// 7. The app updates the color gradient and displays the new color values.

// This code demonstrates the use of the HSLuv color model in a Flutter app.
// It shows how to create a color gradient with multiple color stops and display it on the screen.
// It also shows how to convert HSLuv color values to RGB and display them on the screen.
```

<-- END_MAIN -->
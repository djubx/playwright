<-- START_DESCRIPTION -->

# Flutter Screenshot Callback Package
=====================================

The `flutter_screenshot_callback` package provides a simple way to detect when a user takes a screenshot of your Flutter app. This can be useful for various purposes, such as logging user behavior, preventing sensitive data from being captured, or triggering specific actions when a screenshot is taken.

### Features

*   Detects when a screenshot is taken on both Android and iOS devices
*   Provides a callback function to handle screenshot events
*   Easy to integrate and use

### When to Use

You can use this package in various scenarios, such as:

*   Logging user behavior: You can use the screenshot callback to log when users take screenshots of your app, which can help you understand their behavior and improve the user experience.
*   Preventing sensitive data capture: If your app displays sensitive data, you can use the screenshot callback to detect when a user attempts to capture it and take necessary actions to prevent it.
*   Triggering actions: You can use the screenshot callback to trigger specific actions when a screenshot is taken, such as sending a notification or displaying a message.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `flutter_screenshot_callback` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:

```yml
dependencies:
  flutter_screenshot_callback: ^1.0.0
```

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:flutter_screenshot_callback/flutter_screenshot_callback.dart';
```

### Step 3: Initialize the Package

Initialize the package in your `main` function:

```dart
void main() {
  runApp(MyApp());
  FlutterScreenshotCallback.initialize();
}
```

### Step 4: Set Up the Screenshot Callback

Set up the screenshot callback using the `onScreenshot` function:

```dart
FlutterScreenshotCallback.onScreenshot((screenshot) {
  // Handle the screenshot event here
  print('Screenshot taken!');
});
```

### Platform-Specific Details

*   **Android:** The package uses the `android.hardware.display.DisplayManager` class to detect screenshots. This requires the `android.permission.READ_FRAME_BUFFER` permission, which is automatically added to your AndroidManifest.xml file when you use the package.
*   **iOS:** The package uses the `NSNotificationCenter` class to detect screenshots. This requires the `NSPhotoLibraryUsageDescription` key in your Info.plist file, which is automatically added when you use the package.

### Optimizations

To optimize the package's performance, you can adjust the `interval` parameter when initializing the package. This parameter determines how often the package checks for screenshot events. A lower interval can improve performance but may also increase battery usage.

```dart
FlutterScreenshotCallback.initialize(interval: 1000); // Check for screenshot events every 1 second
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_screenshot_callback/flutter_screenshot_callback.dart';

void main() {
  runApp(RealFlutter());
  FlutterScreenshotCallback.initialize();
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  void initState() {
    super.initState();
    // Set up the screenshot callback
    FlutterScreenshotCallback.onScreenshot((screenshot) {
      // Handle the screenshot event here
      print('Screenshot taken!');
      // Show a snackbar to notify the user
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Screenshot detected!')),
      );
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('RealFlutter Screenshot Detection'),
        ),
        body: Center(
          child: Text('Take a screenshot to trigger the callback!'),
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user runs the app and the `main` function is called.
// 2. The `FlutterScreenshotCallback.initialize` function is called to initialize the package.
// 3. The `RealFlutter` widget is created and the `initState` method is called.
// 4. In the `initState` method, the `FlutterScreenshotCallback.onScreenshot` function is called to set up the screenshot callback.
// 5. When the user takes a screenshot, the callback function is triggered and a snackbar is shown to notify the user.
// 6. The app continues to run and detect screenshot events until it is closed.

// Summary: The code sets up a screenshot callback using the `flutter_screenshot_callback` package and shows a snackbar when a screenshot is detected.
```

<-- END_MAIN -->
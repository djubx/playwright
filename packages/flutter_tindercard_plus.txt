<-- START_DESCRIPTION -->

# Flutter Tinder Card Plus Package
=====================================

The `flutter_tindercard_plus` package is a powerful and customizable Flutter package that allows developers to create Tinder-like swipe cards in their applications. It provides a simple and intuitive way to implement swipe gestures, making it easy to create engaging and interactive user interfaces.

### When to Use This Package

This package is ideal for applications that require a swipe-based interface, such as:

* Dating apps
* Social media platforms
* Image galleries
* Product showcases

### Features

* Customizable swipe gestures
* Support for multiple card types
* Animated transitions
* Easy-to-use API

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `flutter_tindercard_plus` package, follow these steps:

### Step 1: Add the Package to Your Project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_tindercard_plus: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:flutter_tindercard_plus/flutter_tindercard_plus.dart';
```
### Step 3: Create a TinderCardPlus Widget

Create a `TinderCardPlus` widget and pass in the required parameters:
```dart
TinderCardPlus(
  cards: [
    // Your card widgets here
  ],
  onSwipe: (direction) {
    // Handle swipe gestures here
  },
)
```
### Platform-Specific Details

* For Android, make sure to add the following line to your `AndroidManifest.xml` file:
```xml
<application
  ...
  android:hardwareAccelerated="true"
  ...
>
```
* For iOS, make sure to add the following line to your `Info.plist` file:
```xml
<key>UIViewControllerBasedStatusBarAppearance</key>
<false/>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_tindercard_plus/flutter_tindercard_plus.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Tinder Card Plus Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  List<Widget> _cards = [
    // Card 1
    Container(
      height: 200,
      width: 200,
      color: Colors.red,
      child: Center(
        child: Text('Card 1'),
      ),
    ),
    // Card 2
    Container(
      height: 200,
      width: 200,
      color: Colors.blue,
      child: Center(
        child: Text('Card 2'),
      ),
    ),
    // Card 3
    Container(
      height: 200,
      width: 200,
      color: Colors.green,
      child: Center(
        child: Text('Card 3'),
      ),
    ),
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Tinder Card Plus Demo'),
      ),
      body: Center(
        child: TinderCardPlus(
          cards: _cards,
          onSwipe: (direction) {
            // Handle swipe gestures here
            print('Swiped $direction');
          },
        ),
      ),
    );
  }
}
```

// The application flow is as follows:
// 1. The user runs the app and is presented with a list of cards.
// 2. The user can swipe left or right on each card to navigate through the list.
// 3. When the user swipes a card, the `onSwipe` callback is called with the direction of the swipe.
// 4. The app can then handle the swipe gesture as needed, such as by removing the card from the list or performing some other action.
// 5. The app continues to display the remaining cards in the list until the user has swiped through all of them.

<-- END_MAIN -->
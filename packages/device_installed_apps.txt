<-- START_DESCRIPTION -->

# Device Installed Apps Flutter Package
=====================================

The `device_installed_apps` Flutter package allows you to retrieve a list of installed apps on a user's device. This package is useful when you need to check if a specific app is installed on the device or when you want to provide a list of installed apps to the user.

### Features

*   Retrieve a list of installed apps on the device
*   Check if a specific app is installed on the device
*   Get the app name, package name, and icon of an installed app

### When to Use

*   When you need to check if a specific app is installed on the device before performing an action
*   When you want to provide a list of installed apps to the user
*   When you need to retrieve information about an installed app, such as its name, package name, or icon

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

### Setup

To use the `device_installed_apps` package, you need to add it to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  device_installed_apps: ^1.0.0
```

Then, run `flutter pub get` to get the package.

### Android Configuration

On Android, you need to add the following permission to your `AndroidManifest.xml` file:

```xml
<uses-permission android:name="android.permission.QUERY_ALL_PACKAGES" />
```

### iOS Configuration

On iOS, you don't need to add any permissions or configurations.

### Usage

To use the package, you need to import it in your Dart file:

```dart
import 'package:device_installed_apps/device_installed_apps.dart';
```

Then, you can use the `getInstalledApps` method to retrieve a list of installed apps:

```dart
List<InstalledApp> installedApps = await DeviceInstalledApps.getInstalledApps();
```

You can also use the `isAppInstalled` method to check if a specific app is installed:

```dart
bool isInstalled = await DeviceInstalledApps.isAppInstalled('com.example.app');
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:device_installed_apps/device_installed_apps.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Device Installed Apps Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  List<InstalledApp> _installedApps = [];

  @override
  void initState() {
    super.initState();
    _getInstalledApps();
  }

  Future<void> _getInstalledApps() async {
    // Get the list of installed apps
    List<InstalledApp> installedApps = await DeviceInstalledApps.getInstalledApps();

    // Update the UI with the list of installed apps
    setState(() {
      _installedApps = installedApps;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Device Installed Apps Demo'),
      ),
      body: _installedApps.isEmpty
          ? Center(
              child: CircularProgressIndicator(),
            )
          : ListView.builder(
              itemCount: _installedApps.length,
              itemBuilder: (context, index) {
                // Get the installed app at the current index
                InstalledApp app = _installedApps[index];

                // Return a ListTile with the app name and package name
                return ListTile(
                  title: Text(app.name),
                  subtitle: Text(app.packageName),
                );
              },
            ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and the _getInstalledApps method is called in the initState method.
// 2. The _getInstalledApps method uses the DeviceInstalledApps.getInstalledApps method to retrieve a list of installed apps.
// 3. The list of installed apps is then used to update the UI by calling the setState method.
// 4. The UI is updated with a ListView of installed apps, where each app is represented by a ListTile with the app name and package name.
// 5. The user can then scroll through the list of installed apps and view the details of each app.

```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Time Duration Picker Flutter Package
=====================================

The `time_duration_picker` Flutter package provides a simple and intuitive way to allow users to select a time duration. It is a customizable package that can be used in a variety of applications, such as scheduling apps, timer apps, and more.

### When to Use This Package

This package is useful when you need to allow users to select a time duration, such as:

* Scheduling apps: to select the duration of an event or appointment
* Timer apps: to set a timer for a specific duration
* Workout apps: to select the duration of a workout or exercise

### Features

* Customizable time duration picker
* Supports hours, minutes, and seconds
* Optional minimum and maximum duration
* Optional step size for each unit (e.g. 15-minute increments)

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Using the Time Duration Picker Package
=============================================

### Step 1: Add the Package to Your Project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  time_duration_picker: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:time_duration_picker/time_duration_picker.dart';
```
### Step 3: Use the Time Duration Picker

Create a `TimeDurationPicker` widget and pass in the required parameters:
```dart
TimeDurationPicker(
  onDurationChanged: (duration) {
    print('Selected duration: $duration');
  },
  minimumDuration: Duration(hours: 1),
  maximumDuration: Duration(hours: 12),
  stepSize: Duration(minutes: 15),
)
```
### Platform-Specific Details

* Android: No additional configuration required.
* iOS: No additional configuration required.

### Optimizations

* You can customize the appearance of the time duration picker by passing in a `style` parameter.
* You can also customize the text displayed for each unit (e.g. "hours", "minutes", etc.) by passing in a `unitText` parameter.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:time_duration_picker/time_duration_picker.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  Duration _selectedDuration = Duration(hours: 2);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Time Duration Picker Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Text('Selected duration: $_selectedDuration'),
              SizedBox(height: 20),
              TimeDurationPicker(
                onDurationChanged: (duration) {
                  setState(() {
                    _selectedDuration = duration;
                  });
                },
                minimumDuration: Duration(hours: 1),
                maximumDuration: Duration(hours: 12),
                stepSize: Duration(minutes: 15),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app and is presented with a screen displaying the current selected duration.
// 2. The user interacts with the time duration picker to select a new duration.
// 3. The `onDurationChanged` callback is called with the new selected duration.
// 4. The app updates the state with the new selected duration.
// 5. The app rebuilds the UI to display the new selected duration.

// In summary, the app allows the user to select a time duration using the time duration picker,
// and then displays the selected duration on the screen.
```

<-- END_MAIN -->
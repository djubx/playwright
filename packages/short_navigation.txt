<-- START_DESCRIPTION -->

# Short Navigation Flutter Package
=====================================

The `short_navigation` Flutter package is a utility library that simplifies navigation between screens in Flutter applications. It provides a simple and efficient way to manage navigation, making it ideal for small to medium-sized apps.

### When to Use

This package is suitable for apps with a small number of screens, where complex navigation is not required. It's perfect for prototyping, proof-of-concept, or small-scale production apps.

### Features

* Simplified navigation between screens
* Automatic handling of screen stacking
* Support for both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the Package
=====================================

### Step 1: Add the Package to Your Project

Add the following dependency to your `pubspec.yaml` file:
```yml
dependencies:
  short_navigation: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:short_navigation/short_navigation.dart';
```
### Step 3: Create a Navigator

Create a `ShortNavigator` instance and pass it to your app's `MaterialApp`:
```dart
import 'package:flutter/material.dart';
import 'package:short_navigation/short_navigation.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Short Navigation Demo',
      home: ShortNavigator(
        initialRoute: '/',
        routes: {
          '/': (context) => MyHomePage(),
          '/second': (context) => SecondPage(),
        },
      ),
    );
  }
}
```
### Platform-Specific Details

* For Android, make sure to handle the back button press by wrapping your `Scaffold` with a `WillPopScope` widget.
* For iOS, you can use the `CupertinoNavigationBar` to handle navigation.

### Required Configurations and Optimizations

* Make sure to handle screen orientation changes by using the `OrientationBuilder` widget.
* Use the `Navigator.of(context).pop()` method to dismiss screens programmatically.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:short_navigation/short_navigation.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Short Navigation Demo',
      home: ShortNavigator(
        initialRoute: '/',
        routes: {
          '/': (context) => MyHomePage(),
          '/second': (context) => SecondPage(),
        },
      ),
    );
  }
}

class MyHomePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // This is the first screen
    return Scaffold(
      appBar: AppBar(
        title: Text('Home Page'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Navigate to the second screen
            ShortNavigator.of(context).pushNamed('/second');
          },
          child: Text('Go to Second Page'),
        ),
      ),
    );
  }
}

class SecondPage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // This is the second screen
    return Scaffold(
      appBar: AppBar(
        title: Text('Second Page'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Go back to the first screen
            Navigator.of(context).pop();
          },
          child: Text('Go Back'),
        ),
      ),
    );
  }
}

// The application flow:
// 1. The user opens the app and sees the first screen (MyHomePage).
// 2. The user clicks the "Go to Second Page" button, which navigates to the second screen (SecondPage).
// 3. The user clicks the "Go Back" button, which goes back to the first screen (MyHomePage).
// This flow demonstrates the basic navigation functionality of the Short Navigation package.

// Final summary:
// The Short Navigation package simplifies navigation between screens in Flutter applications.
// It provides a simple and efficient way to manage navigation, making it ideal for small to medium-sized apps.
// This example demonstrates the basic navigation functionality of the package.
```

<-- END_MAIN -->
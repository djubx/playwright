<-- START_DESCRIPTION -->

# Simple Grouped Listview Flutter Package
=====================================

The `simple_grouped_listview` package is a Flutter library that allows you to create grouped list views with ease. It provides a simple and intuitive API for creating grouped lists, making it perfect for apps that require categorization or grouping of data.

### When to Use This Package

This package is ideal for apps that require:

* Categorization of data (e.g., contacts, tasks, or events)
* Grouping of similar items (e.g., songs by artist or genre)
* Displaying hierarchical data (e.g., folders and files)

### Features

* Easy-to-use API for creating grouped lists
* Customizable group headers and footers
* Support for multiple group levels
* Works with any type of data (not just strings)

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `simple_grouped_listview` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  simple_grouped_listview: ^1.0.0
```
2. Run `flutter pub get` to install the package.
3. Import the package in your Dart file:
```dart
import 'package:simple_grouped_listview/simple_grouped_listview.dart';
```

### Platform-Specific Details

* Android: No additional setup required.
* iOS: No additional setup required.

### Configurations and Optimizations

* To improve performance, use a `ListView.builder` instead of a `ListView`.
* To customize the group headers and footers, use the `groupHeaderBuilder` and `groupFooterBuilder` properties.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:simple_grouped_listview/simple_grouped_listview.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Simple Grouped Listview Demo',
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  List<Group> _groups = [
    Group(
      id: 1,
      name: 'Group 1',
      items: [
        Item(id: 1, name: 'Item 1'),
        Item(id: 2, name: 'Item 2'),
      ],
    ),
    Group(
      id: 2,
      name: 'Group 2',
      items: [
        Item(id: 3, name: 'Item 3'),
        Item(id: 4, name: 'Item 4'),
      ],
    ),
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Simple Grouped Listview Demo'),
      ),
      body: GroupedListView(
        groups: _groups,
        groupHeaderBuilder: (context, group) {
          // Step 1: Build the group header
          return Container(
            padding: EdgeInsets.all(16),
            child: Text(group.name),
          );
        },
        itemBuilder: (context, item) {
          // Step 2: Build the item
          return ListTile(
            title: Text(item.name),
          );
        },
      ),
    );
  }
}

class Group {
  final int id;
  final String name;
  final List<Item> items;

  Group({this.id, this.name, this.items});
}

class Item {
  final int id;
  final String name;

  Item({this.id, this.name});
}

// Application flow:
// 1. The app starts and the `MyApp` widget is built.
// 2. The `MyApp` widget builds the `RealFlutter` widget.
// 3. The `RealFlutter` widget builds the `GroupedListView` widget.
// 4. The `GroupedListView` widget builds the group headers and items.
// 5. The user interacts with the app and the `GroupedListView` widget updates accordingly.
```

<-- END_MAIN -->

In summary, the code flows as follows:

1. The app starts and the `MyApp` widget is built.
2. The `MyApp` widget builds the `RealFlutter` widget.
3. The `RealFlutter` widget builds the `GroupedListView` widget.
4. The `GroupedListView` widget builds the group headers and items.
5. The user interacts with the app and the `GroupedListView` widget updates accordingly.
```markdown
<!-- START_DESCRIPTION -->
# Battery Indicator Flutter Package

The `battery_indicator` Flutter package is a simple yet effective tool for displaying the battery status of a device within your Flutter applications. This package is particularly useful for applications that require real-time battery monitoring, such as fitness apps, navigation tools, or any app where battery status is critical for user experience.

## When to Use This Package
- **Real-time Battery Monitoring**: If your app needs to inform users about the current battery level.
- **Battery Status Alerts**: For applications that need to alert users when the battery is low.
- **Power Management**: In apps that manage device power consumption, knowing the battery status is essential.

## Features
- **Real-time Battery Level**: Get the current battery level as a percentage.
- **Battery State**: Determine whether the device is charging, discharging, or fully charged.
- **Stream Updates**: Listen for changes in battery status with a stream of updates.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS devices.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Battery Indicator Package

## Installation
To use the `battery_indicator` package, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  battery_indicator: ^latest_version
```

Make sure to replace `^latest_version` with the latest version available on [pub.dev](https://pub.dev/packages/battery_indicator).

## Platform-Specific Configuration

### Android
For Android, ensure that your `AndroidManifest.xml` file has the necessary permissions to access battery status. Add the following permission inside the `<manifest>` tag:

```xml
<uses-permission android:name="android.permission.BATTERY_STATS"/>
```

### iOS
For iOS, you typically do not need to add any special permissions for battery status access. However, ensure that your app's deployment target is set to at least iOS 9.0 in your `ios/Podfile`.

## Using the Package
To use the `battery_indicator` package, you can follow these steps:

1. Import the package in your Dart file:
   ```dart
   import 'package:battery_indicator/battery_indicator.dart';
   ```

2. Create a stateful widget to manage the battery state:
   ```dart
   class RealFlutter extends StatefulWidget {
     @override
     _RealFlutterState createState() => _RealFlutterState();
   }

   class _RealFlutterState extends State<RealFlutter> {
     // Declare variables to hold battery level and state
     int? batteryLevel;
     BatteryState? batteryState;

     @override
     void initState() {
       super.initState();
       // Initialize battery status listener
       BatteryIndicator().batteryLevel.listen((level) {
         setState(() {
           batteryLevel = level;
         });
       });
       BatteryIndicator().batteryState.listen((state) {
         setState(() {
           batteryState = state;
         });
       });
     }

     @override
     Widget build(BuildContext context) {
       return Scaffold(
         appBar: AppBar(title: Text('Battery Indicator Example')),
         body: Center(
           child: Column(
             mainAxisAlignment: MainAxisAlignment.center,
             children: [
               Text('Battery Level: ${batteryLevel ?? 'Loading...'}%'),
               Text('Battery State: ${batteryState?.toString() ?? 'Loading...'}'),
             ],
           ),
         ),
       );
     }
   }
   ```

This code sets up a simple Flutter application that listens for battery level and state changes and displays them on the screen.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Battery Indicator

```dart
import 'package:flutter/material.dart';
import 'package:battery_indicator/battery_indicator.dart';

void main() {
  runApp(MyApp());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Declare variables to hold battery level and state
  int? batteryLevel; // To store the current battery level
  BatteryState? batteryState; // To store the current battery state

  @override
  void initState() {
    super.initState();
    // Initialize battery status listener
    BatteryIndicator().batteryLevel.listen((level) {
      setState(() {
        batteryLevel = level; // Update battery level when it changes
      });
    });
    BatteryIndicator().batteryState.listen((state) {
      setState(() {
        batteryState = state; // Update battery state when it changes
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Battery Indicator Example')),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              // Display the current battery level
              Text('Battery Level: ${batteryLevel ?? 'Loading...'}%'),
              // Display the current battery state
              Text('Battery State: ${batteryState?.toString() ?? 'Loading...'}'),
            ],
          ),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the MyApp widget.
// 2. The RealFlutter widget is created, which is a StatefulWidget.
// 3. In the initState method, listeners for battery level and state are set up.
// 4. When the battery level or state changes, the setState method is called to update the UI.
// 5. The build method constructs the UI, displaying the current battery level and state.
// 6. The UI updates automatically whenever the battery status changes, providing real-time feedback to the user.
```
<!-- END_MAIN -->
```

### Summary
In this blog post, we explored the `battery_indicator` Flutter package, which allows developers to monitor the battery status of devices in real-time. We covered the installation process, platform-specific configurations, and provided a complete example of how to implement the package in a Flutter application. The example demonstrated how to listen for battery level and state changes, updating the UI accordingly. This package is particularly useful for applications that require battery monitoring, enhancing user experience by providing critical information about device power status.
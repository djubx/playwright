<-- START_DESCRIPTION -->

# Animated Shimmer Flutter Package
=====================================

The `animated_shimmer` Flutter package is a powerful tool for creating visually appealing loading animations. It provides a simple and easy-to-use API for adding shimmer effects to your Flutter widgets.

### When to Use

The `animated_shimmer` package is perfect for situations where you want to display a loading animation while data is being fetched or processed. It's especially useful for creating a seamless user experience in applications that rely heavily on network requests or complex computations.

### Features

*   Easy-to-use API for adding shimmer effects to Flutter widgets
*   Customizable animation duration and color
*   Support for various widget types, including `Text`, `Image`, and `Container`

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Using the Animated Shimmer Package
=============================================

### Step 1: Add the Package to Your Project

To use the `animated_shimmer` package, you need to add it to your project's `pubspec.yaml` file. Open the file and add the following line under the `dependencies` section:

```yml
dependencies:
  animated_shimmer: ^1.0.0
```

Then, run `flutter pub get` in your terminal to install the package.

### Step 2: Import the Package

In your Dart file, import the `animated_shimmer` package:

```dart
import 'package:animated_shimmer/animated_shimmer.dart';
```

### Step 3: Use the Shimmer Widget

To add a shimmer effect to a widget, wrap it with the `Shimmer` widget:

```dart
Shimmer(
  child: Text('Loading...'),
)
```

You can customize the animation duration and color using the `duration` and `color` properties:

```dart
Shimmer(
  duration: Duration(seconds: 2),
  color: Colors.blue,
  child: Text('Loading...'),
)
```

### Platform-Specific Details

The `animated_shimmer` package works seamlessly on both Android and iOS platforms. However, if you're using a custom widget that relies on platform-specific code, make sure to handle any necessary configurations or optimizations.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:animated_shimmer/animated_shimmer.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Animated Shimmer Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    // Simulate a network request
    Future.delayed(Duration(seconds: 3), () {
      setState(() {
        _isLoading = false;
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Animated Shimmer Demo'),
      ),
      body: Center(
        child: _isLoading
            ? Shimmer(
                duration: Duration(seconds: 2),
                color: Colors.blue,
                child: Text('Loading...'),
              )
            : Text('Data loaded!'),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app, and the `_isLoading` flag is set to `true`.
// 2. The `Shimmer` widget is displayed with a loading animation.
// 3. After 3 seconds, the `_isLoading` flag is set to `false`, and the `Text` widget is updated to display the loaded data.
// 4. The `Shimmer` widget is no longer visible, and the user sees the loaded data.

// In summary, the code flows as follows:
// - The user opens the app, and a loading animation is displayed using the `Shimmer` widget.
// - After a simulated network request, the loading animation is replaced with the loaded data.
```

<-- END_MAIN -->
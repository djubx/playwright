```markdown
<-- START_DESCRIPTION -->

# Overview of the `pub_version_plus` Flutter Package

The `pub_version_plus` package is a powerful tool for Flutter developers who need to manage and display version information of their applications. This package simplifies the process of retrieving and displaying the app version and build number, which is crucial for debugging, user support, and ensuring users are running the latest version of your app.

## When to Use `pub_version_plus`

- **Debugging**: Quickly access version information to ensure the correct version is being tested.
- **User Support**: Display version information in the app's settings or about page to help users report issues.
- **Version Management**: Automate the retrieval of version numbers to reduce manual errors.

## Features

- **Easy Integration**: Simple API to fetch version and build number.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS.
- **Customizable Display**: Format version information as needed for your app's UI.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using `pub_version_plus`

In this tutorial, we will walk through the setup and usage of the `pub_version_plus` package in a Flutter project. We will cover platform-specific configurations for both Android and iOS.

## Setup

1. **Add Dependency**

   Add `pub_version_plus` to your `pubspec.yaml` file:

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     pub_version_plus: ^1.0.0
   ```

2. **Install Packages**

   Run the following command to install the new package:

   ```bash
   flutter pub get
   ```

## Platform-Specific Configuration

### Android

No additional configuration is required for Android. The package works out of the box.

### iOS

Ensure your `Info.plist` includes the necessary keys for versioning, although `pub_version_plus` does not require specific keys, it's good practice to have:

```xml
<key>CFBundleShortVersionString</key>
<string>1.0.0</string>
<key>CFBundleVersion</key>
<string>1</string>
```

## Using the Package

To use `pub_version_plus`, import it in your Dart file:

```dart
import 'package:pub_version_plus/pub_version_plus.dart';
```

You can then retrieve the version and build number as follows:

```dart
Future<void> getAppVersion() async {
  final version = await RealFlutter.getVersion();
  final buildNumber = await RealFlutter.getBuildNumber();
  print('App Version: $version, Build Number: $buildNumber');
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

# Complete Example of Using `pub_version_plus`

Below is a complete Flutter application demonstrating the use of `pub_version_plus` to display app version information.

```dart
import 'package:flutter/material.dart';
import 'package:pub_version_plus/pub_version_plus.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Version Info App',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: VersionInfoScreen(),
    );
  }
}

class VersionInfoScreen extends StatefulWidget {
  @override
  _VersionInfoScreenState createState() => _VersionInfoScreenState();
}

class _VersionInfoScreenState extends State<VersionInfoScreen> {
  String _version = 'Unknown';
  String _buildNumber = 'Unknown';

  @override
  void initState() {
    super.initState();
    _fetchVersionInfo();
  }

  Future<void> _fetchVersionInfo() async {
    // Fetch the app version and build number using pub_version_plus
    final version = await RealFlutter.getVersion();
    final buildNumber = await RealFlutter.getBuildNumber();

    // Update the state with the fetched version and build number
    setState(() {
      _version = version;
      _buildNumber = buildNumber;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('App Version Info'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'App Version: $_version',
              style: TextStyle(fontSize: 20),
            ),
            Text(
              'Build Number: $_buildNumber',
              style: TextStyle(fontSize: 20),
            ),
          ],
        ),
      ),
    );
  }
}
```

// The application starts by running the `main` function, which initializes the app and sets `MyApp` as the root widget.
// `MyApp` is a stateless widget that builds the main structure of the app using `MaterialApp`.
// The home screen of the app is `VersionInfoScreen`, a stateful widget that manages the state of version information.
// In `VersionInfoScreen`, the `_fetchVersionInfo` method is called during initialization to retrieve version data.
// `pub_version_plus` is used to asynchronously fetch the app version and build number.
// Once retrieved, the state is updated to display this information on the screen.
// The UI consists of a simple `Scaffold` with an `AppBar` and a `Center` widget containing the version and build number.

<-- END_MAIN -->
```
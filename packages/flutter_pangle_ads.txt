Here's a detailed technical blog on the `flutter_pangle_ads` Flutter package, structured as requested.

<!-- START_DESCRIPTION -->
# flutter_pangle_ads Package Overview

The `flutter_pangle_ads` package is a Flutter plugin that integrates Pangle Ads into your Flutter applications. Pangle is a leading advertising platform that provides various ad formats, including banner ads, interstitial ads, and rewarded video ads. This package allows developers to easily implement Pangle's advertising solutions in their Flutter apps, enabling monetization through ads.

## When to Use This Package

You should consider using the `flutter_pangle_ads` package when:
- You want to monetize your Flutter application through advertisements.
- You are targeting markets where Pangle has a strong presence, particularly in Asia.
- You need a straightforward way to integrate ads without dealing with complex native code.

## Features

- **Multiple Ad Formats**: Supports various ad formats, including banners, interstitials, and rewarded videos.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS platforms.
- **Easy Integration**: Simple setup and usage, allowing developers to focus on building their applications.
- **Event Handling**: Provides callbacks for ad events, enabling developers to respond to ad loading, display, and interaction events.

By leveraging the `flutter_pangle_ads` package, developers can enhance their applications with effective monetization strategies while maintaining a smooth user experience.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up flutter_pangle_ads

In this tutorial, we will walk through the setup process for the `flutter_pangle_ads` package and demonstrate how to use it in your Flutter application.

## Step 1: Add Dependency

To get started, add the `flutter_pangle_ads` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  flutter_pangle_ads: ^latest_version
```

Make sure to replace `^latest_version` with the latest version of the package available on [pub.dev](https://pub.dev/packages/flutter_pangle_ads).

## Step 2: Platform-Specific Configuration

### Android Configuration

1. **Update AndroidManifest.xml**: Open your `AndroidManifest.xml` file located at `android/app/src/main/AndroidManifest.xml` and add the following permissions and metadata:

   ```xml
   <manifest xmlns:android="http://schemas.android.com/apk/res/android"
       package="com.example.yourapp">

       <application>
           <!-- Add this metadata -->
           <meta-data
               android:name="com.pangle.sdk.appid"
               android:value="YOUR_PANGLE_APP_ID" />
       </application>
   </manifest>
   ```

   Replace `YOUR_PANGLE_APP_ID` with your actual Pangle App ID.

2. **ProGuard Rules**: If you are using ProGuard, add the following rules to your `proguard-rules.pro` file:

   ```pro
   -keep class com.pangle.** { *; }
   -dontwarn com.pangle.**
   ```

### iOS Configuration

1. **Update Info.plist**: Open your `Info.plist` file located at `ios/Runner/Info.plist` and add the following entries:

   ```xml
   <key>NSAppTransportSecurity</key>
   <dict>
       <key>NSAllowsArbitraryLoads</key>
       <true/>
   </dict>
   ```

2. **CocoaPods**: Ensure you have the latest version of CocoaPods installed. Run the following command in your terminal:

   ```bash
   pod install
   ```

## Step 3: Initialize the Package

In your main Dart file, import the package and initialize it:

```dart
import 'package:flutter/material.dart';
import 'package:flutter_pangle_ads/flutter_pangle_ads.dart';

void main() {
  WidgetsFlutterBinding.ensureInitialized();
  PangleAds.init("YOUR_PANGLE_APP_ID"); // Initialize Pangle Ads
  runApp(MyApp());
}
```

Replace `YOUR_PANGLE_APP_ID` with your actual Pangle App ID.

## Step 4: Using Ads

You can now use different ad formats in your application. Hereâ€™s a brief overview of how to implement banner ads and interstitial ads.

### Banner Ads

To display a banner ad, use the following code:

```dart
PangleBannerAd(
  adUnitId: "YOUR_BANNER_AD_UNIT_ID",
  listener: (PangleAdEvent event) {
    // Handle ad events
  },
);
```

### Interstitial Ads

To load and show an interstitial ad:

```dart
PangleInterstitialAd(
  adUnitId: "YOUR_INTERSTITIAL_AD_UNIT_ID",
  listener: (PangleAdEvent event) {
    // Handle ad events
  },
);
```

Make sure to replace `YOUR_BANNER_AD_UNIT_ID` and `YOUR_INTERSTITIAL_AD_UNIT_ID` with your actual ad unit IDs.

With these steps, you should be able to set up and use the `flutter_pangle_ads` package in your Flutter application.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of flutter_pangle_ads

```dart
import 'package:flutter/material.dart';
import 'package:flutter_pangle_ads/flutter_pangle_ads.dart';

void main() {
  WidgetsFlutterBinding.ensureInitialized();
  PangleAds.init("YOUR_PANGLE_APP_ID"); // Initialize Pangle Ads
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  late PangleBannerAd _bannerAd; // Declare a banner ad
  bool _isInterstitialAdReady = false; // Flag to check if interstitial ad is ready

  @override
  void initState() {
    super.initState();
    _loadBannerAd(); // Load the banner ad
    _loadInterstitialAd(); // Load the interstitial ad
  }

  // Function to load a banner ad
  void _loadBannerAd() {
    _bannerAd = PangleBannerAd(
      adUnitId: "YOUR_BANNER_AD_UNIT_ID",
      listener: (PangleAdEvent event) {
        // Handle banner ad events
        if (event == PangleAdEvent.loaded) {
          print("Banner Ad Loaded");
        } else if (event == PangleAdEvent.failedToLoad) {
          print("Banner Ad Failed to Load");
        }
      },
    );
    _bannerAd.load(); // Load the banner ad
  }

  // Function to load an interstitial ad
  void _loadInterstitialAd() {
    PangleInterstitialAd(
      adUnitId: "YOUR_INTERSTITIAL_AD_UNIT_ID",
      listener: (PangleAdEvent event) {
        // Handle interstitial ad events
        if (event == PangleAdEvent.loaded) {
          setState(() {
            _isInterstitialAdReady = true; // Set the flag to true when ad is loaded
          });
          print("Interstitial Ad Loaded");
        } else if (event == PangleAdEvent.failedToLoad) {
          print("Interstitial Ad Failed to Load");
        } else if (event == PangleAdEvent.closed) {
          _loadInterstitialAd(); // Load a new interstitial ad after the current one is closed
        }
      },
    ).load(); // Load the interstitial ad
  }

  // Function to show the interstitial ad
  void _showInterstitialAd() {
    if (_isInterstitialAdReady) {
      PangleInterstitialAd.show(); // Show the interstitial ad
      setState(() {
        _isInterstitialAdReady = false; // Reset the flag
      });
    } else {
      print("Interstitial Ad is not ready yet");
    }
  }

  @override
  void dispose() {
    _bannerAd.dispose(); // Dispose of the banner ad
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text("Pangle Ads Example")),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Text("Banner Ad Below"),
              Container(
                height: 50, // Set height for the banner ad
                child: _bannerAd, // Display the banner ad
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _showInterstitialAd, // Show interstitial ad on button press
                child: Text("Show Interstitial Ad"),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app initializes Pangle Ads with the provided App ID.
// 2. A banner ad is loaded and displayed at the bottom of the screen.
// 3. An interstitial ad is also loaded in the background.
// 4. When the user presses the "Show Interstitial Ad" button, the app checks if the interstitial ad is ready.
// 5. If ready, the interstitial ad is displayed; otherwise, a message is printed.
// 6. The banner ad is disposed of when the app is closed to free up resources.
```

<!-- END_MAIN -->

In this blog, we covered the `flutter_pangle_ads` package, including its features, setup instructions, and a complete example demonstrating its usage. By following the steps outlined, you can effectively integrate Pangle Ads into your Flutter applications, enhancing your monetization strategy while providing a seamless user experience.
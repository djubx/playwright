<-- START_DESCRIPTION -->

# Codenic Logger Flutter Package
=====================================

The `codenic_logger` Flutter package is a powerful logging tool that allows developers to easily track and debug their applications. It provides a simple and intuitive API for logging events, errors, and other information, making it an essential tool for any Flutter developer.

### When to Use

The `codenic_logger` package is perfect for:

* Debugging applications during development
* Tracking user behavior and events in production
* Logging errors and crashes for analysis and improvement
* Monitoring application performance and optimization

### Features

* Simple and intuitive API for logging events, errors, and other information
* Support for multiple log levels (debug, info, warning, error, fatal)
* Ability to log to multiple destinations (console, file, network)
* Customizable log formatting and filtering
* Support for platform-specific logging (Android and iOS)

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up Codenic Logger
==========================

To use the `codenic_logger` package in your Flutter application, follow these steps:

### Step 1: Add the Package to Your Pubspec

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  codenic_logger: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:codenic_logger/codenic_logger.dart';
```
### Step 3: Initialize the Logger

Initialize the logger in your application's `main` function:
```dart
void main() {
  CodenicLogger.init();
  runApp(MyApp());
}
```
### Step 4: Configure the Logger (Optional)

You can configure the logger to log to multiple destinations, customize log formatting and filtering, and more. For example:
```dart
CodenicLogger.init(
  destinations: [
    ConsoleDestination(),
    FileDestination('log.txt'),
  ],
  format: '%d %p %c',
  filter: (log) => log.level >= LogLevel.warning,
);
```
### Platform-Specific Logging

For Android and iOS, you can use the `AndroidLogDestination` and `IOSLogDestination` classes, respectively. For example:
```dart
import 'package:codenic_logger/android_log_destination.dart';
import 'package:codenic_logger/ios_log_destination.dart';

CodenicLogger.init(
  destinations: [
    AndroidLogDestination(),
    IOSLogDestination(),
  ],
);
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:codenic_logger/codenic_logger.dart';

void main() {
  // Initialize the logger
  CodenicLogger.init();

  // Run the application
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Log a debug message
    CodenicLogger.log(LogLevel.debug, 'Building the RealFlutter widget');

    return MaterialApp(
      title: 'RealFlutter',
      home: Scaffold(
        appBar: AppBar(
          title: Text('RealFlutter'),
        ),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              // Log an info message
              CodenicLogger.log(LogLevel.info, 'Button pressed');

              // Log a warning message
              CodenicLogger.log(LogLevel.warning, 'Something might go wrong');

              // Log an error message
              CodenicLogger.log(LogLevel.error, 'Something went wrong');

              // Log a fatal message
              CodenicLogger.log(LogLevel.fatal, 'Something went terribly wrong');
            },
            child: Text('Press me'),
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The logger is initialized in the main function.
// 2. The RealFlutter widget is built, and a debug message is logged.
// 3. When the button is pressed, an info message is logged.
// 4. A warning message is logged, indicating that something might go wrong.
// 5. An error message is logged, indicating that something went wrong.
// 6. A fatal message is logged, indicating that something went terribly wrong.

// In summary, the code flows as follows:
// - The logger is initialized.
// - The RealFlutter widget is built, and a debug message is logged.
// - When the button is pressed, a series of log messages are logged, demonstrating the different log levels.
```

<-- END_MAIN -->
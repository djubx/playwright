<-- START_DESCRIPTION -->

# any_base Flutter Package
==========================

The `any_base` Flutter package provides a simple and efficient way to convert numbers between different bases. It supports conversions between binary, decimal, hexadecimal, and octal bases.

## When to Use

This package is useful when you need to perform base conversions in your Flutter app. For example, you may need to convert a binary number to decimal for display purposes, or convert a hexadecimal color code to RGB.

## Features

*   Supports conversions between binary, decimal, hexadecimal, and octal bases
*   Simple and efficient API
*   Works on both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

## Setup

To use the `any_base` package, add it to your `pubspec.yaml` file:

```yml
dependencies:
  any_base: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Basic Usage

To use the package, import it in your Dart file:

```dart
import 'package:any_base/any_base.dart';
```

You can then use the `AnyBase` class to perform base conversions. For example:

```dart
void main() {
  // Create an instance of AnyBase
  AnyBase anyBase = AnyBase();

  // Convert binary to decimal
  String binary = '1010';
  String decimal = anyBase.binaryToDecimal(binary);
  print('Binary: $binary, Decimal: $decimal');

  // Convert hexadecimal to RGB
  String hex = 'FF0000';
  String rgb = anyBase.hexToRgb(hex);
  print('Hex: $hex, RGB: $rgb');
}
```

## Platform-Specific Details

The `any_base` package works on both Android and iOS platforms. However, if you're using an older version of Flutter, you may need to add the following configuration to your `android/app/build.gradle` file:

```groovy
android {
  ...
  defaultConfig {
    ...
    multiDexEnabled true
  }
}
```

This configuration enables multidex support, which is required for older versions of Flutter.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:any_base/any_base.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final _anyBase = AnyBase();
  String _binary = '';
  String _decimal = '';
  String _hex = '';
  String _rgb = '';

  // Step 1: Create a TextField to input binary number
  final _binaryController = TextEditingController();

  // Step 2: Create a TextField to input hexadecimal color code
  final _hexController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Any Base Converter'),
        ),
        body: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            children: [
              // Step 3: Create a TextField to input binary number
              TextField(
                controller: _binaryController,
                decoration: InputDecoration(
                  labelText: 'Binary',
                  border: OutlineInputBorder(),
                ),
              ),
              SizedBox(height: 16),
              ElevatedButton(
                onPressed: () {
                  // Step 4: Convert binary to decimal
                  _binary = _binaryController.text;
                  _decimal = _anyBase.binaryToDecimal(_binary);
                  setState(() {});
                },
                child: Text('Convert Binary to Decimal'),
              ),
              SizedBox(height: 16),
              Text('Decimal: $_decimal'),
              SizedBox(height: 32),
              // Step 5: Create a TextField to input hexadecimal color code
              TextField(
                controller: _hexController,
                decoration: InputDecoration(
                  labelText: 'Hexadecimal',
                  border: OutlineInputBorder(),
                ),
              ),
              SizedBox(height: 16),
              ElevatedButton(
                onPressed: () {
                  // Step 6: Convert hexadecimal to RGB
                  _hex = _hexController.text;
                  _rgb = _anyBase.hexToRgb(_hex);
                  setState(() {});
                },
                child: Text('Convert Hexadecimal to RGB'),
              ),
              SizedBox(height: 16),
              Text('RGB: $_rgb'),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user inputs a binary number in the TextField.
// 2. The user clicks the "Convert Binary to Decimal" button.
// 3. The binary number is converted to decimal using the any_base package.
// 4. The decimal number is displayed on the screen.
// 5. The user inputs a hexadecimal color code in the TextField.
// 6. The user clicks the "Convert Hexadecimal to RGB" button.
// 7. The hexadecimal color code is converted to RGB using the any_base package.
// 8. The RGB color code is displayed on the screen.

// In summary, this application takes user input in binary and hexadecimal,
// and converts it to decimal and RGB respectively, using the any_base package.

```

<-- END_MAIN -->
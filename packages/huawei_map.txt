```markdown
<-- START_DESCRIPTION -->

# Huawei Map Flutter Package: An Overview

The `huawei_map` Flutter package is a powerful tool for integrating Huawei's map services into your Flutter applications. This package provides a rich set of features that allow developers to create interactive and visually appealing map-based applications. It is particularly useful for applications that require location-based services, navigation, or geospatial data visualization.

## When to Use `huawei_map`

- **Navigation Apps**: Ideal for applications that provide turn-by-turn navigation or route planning.
- **Location-Based Services**: Useful for apps that need to display user location, nearby points of interest, or geofencing.
- **Data Visualization**: Suitable for visualizing geospatial data, such as heatmaps or custom markers.

## Key Features

- **Customizable Markers**: Add and customize markers with different icons and colors.
- **Polylines and Polygons**: Draw shapes and lines on the map to represent areas or routes.
- **Camera Control**: Programmatically control the camera to focus on specific locations.
- **Gestures**: Support for pinch, zoom, and other gestures to interact with the map.
- **Offline Maps**: Access maps even without an internet connection.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Huawei Map Flutter Package

Integrating the `huawei_map` package into your Flutter project involves several steps. This tutorial will guide you through the setup process for both Android and iOS platforms.

## Step 1: Add Dependency

Add the `huawei_map` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  huawei_map: ^latest_version
```

## Step 2: Android Configuration

1. **Add Huawei Maven Repository**: In your `android/build.gradle` file, add the Huawei Maven repository:

   ```gradle
   allprojects {
       repositories {
           google()
           jcenter()
           maven { url 'https://developer.huawei.com/repo/' }
       }
   }
   ```

2. **Configure App-Level Gradle**: In `android/app/build.gradle`, add the following dependencies:

   ```gradle
   dependencies {
       implementation 'com.huawei.hms:maps:latest_version'
   }
   ```

3. **Update AndroidManifest.xml**: Add the necessary permissions and metadata:

   ```xml
   <manifest xmlns:android="http://schemas.android.com/apk/res/android"
       package="com.example.yourapp">

       <application>
           <meta-data
               android:name="com.huawei.hms.client.appid"
               android:value="appid=YOUR_APP_ID" />
       </application>

       <uses-permission android:name="android.permission.INTERNET" />
       <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
   </manifest>
   ```

## Step 3: iOS Configuration

1. **Podfile Configuration**: In your `ios/Podfile`, ensure the platform is set to at least iOS 9.0:

   ```ruby
   platform :ios, '9.0'
   ```

2. **Add Permissions**: Update your `Info.plist` with location permissions:

   ```xml
   <key>NSLocationWhenInUseUsageDescription</key>
   <string>We need your location to show nearby places.</string>
   ```

3. **Install Pods**: Run `pod install` in the `ios` directory to install necessary dependencies.

## Step 4: Initialize the Map

In your Flutter application, initialize the map by creating an instance of `RealFlutter` and setting up the map widget.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:huawei_map/huawei_map.dart';

void main() => runApp(RealFlutter());

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: MapScreen(),
    );
  }
}

class MapScreen extends StatefulWidget {
  @override
  _MapScreenState createState() => _MapScreenState();
}

class _MapScreenState extends State<MapScreen> {
  HuaweiMapController? mapController;

  // Initial position of the map
  final CameraPosition _initialPosition = CameraPosition(
    target: LatLng(37.7749, -122.4194), // San Francisco coordinates
    zoom: 10,
  );

  // Method to handle map creation
  void _onMapCreated(HuaweiMapController controller) {
    mapController = controller;
  }

  // Method to add a marker
  void _addMarker() {
    mapController?.addMarker(
      MarkerOptions(
        position: LatLng(37.7749, -122.4194),
        infoWindowText: InfoWindowText('San Francisco', 'City by the Bay'),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Huawei Map Example'),
      ),
      body: HuaweiMap(
        onMapCreated: _onMapCreated,
        initialCameraPosition: _initialPosition,
        mapType: MapType.normal,
        myLocationEnabled: true,
        myLocationButtonEnabled: true,
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _addMarker,
        tooltip: 'Add Marker',
        child: Icon(Icons.add_location),
      ),
    );
  }
}

// Application Flow:
// 1. The `RealFlutter` class initializes the Flutter app and sets `MapScreen` as the home screen.
// 2. `MapScreen` is a stateful widget that manages the state of the map.
// 3. `_MapScreenState` holds the map controller and initial camera position.
// 4. `_onMapCreated` is called when the map is created, setting the map controller.
// 5. `_addMarker` adds a marker at the specified location when the floating action button is pressed.
// 6. The `HuaweiMap` widget displays the map with the initial camera position and enables location features.
// 7. The floating action button allows users to add a marker to the map interactively.
```

<-- END_MAIN -->
```
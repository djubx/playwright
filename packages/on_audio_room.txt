<-- START_DESCRIPTION -->

# on_audio_room Flutter Package
================================

The `on_audio_room` Flutter package is a powerful audio player and recorder that allows developers to easily integrate audio functionality into their apps. With this package, you can play and record audio files, as well as manage audio sessions and handle audio-related events.

## When to Use This Package
---------------------------

You should use this package when you need to play or record audio in your Flutter app. This package is particularly useful for apps that require audio playback, such as music players, podcast apps, or voice recorders.

## Features
------------

*   Play and record audio files
*   Manage audio sessions and handle audio-related events
*   Support for various audio formats, including MP3, WAV, and AAC
*   Platform-specific optimizations for Android and iOS

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the on_audio_room Package
--------------------------------------

To use the `on_audio_room` package, you need to add it to your Flutter project's `pubspec.yaml` file. Here's how to do it:

1.  Open your `pubspec.yaml` file and add the following line under the `dependencies` section:

    ```yml
dependencies:
  flutter:
    sdk: flutter
  on_audio_room: ^1.0.0
```

2.  Run `flutter pub get` in your terminal to get the package.

## Platform-Specific Configurations
-----------------------------------

### Android

To use the `on_audio_room` package on Android, you need to add the following permissions to your `AndroidManifest.xml` file:

```xml
<uses-permission android:name="android.permission.RECORD_AUDIO" />
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
```

### iOS

To use the `on_audio_room` package on iOS, you need to add the following lines to your `Info.plist` file:

```xml
<key>NSMicrophoneUsageDescription</key>
<string>This app needs access to the microphone to record audio.</string>
```

## Using the Package
---------------------

Here's an example of how to use the `on_audio_room` package to play an audio file:

```dart
import 'package:flutter/material.dart';
import 'package:on_audio_room/on_audio_room.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final OnAudioRoom _audioRoom = OnAudioRoom();

  Future<void> _playAudio() async {
    await _audioRoom.play('path_to_your_audio_file.mp3');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('on_audio_room Example'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: _playAudio,
          child: Text('Play Audio'),
        ),
      ),
    );
  }
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:on_audio_room/on_audio_room.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'on_audio_room Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final OnAudioRoom _audioRoom = OnAudioRoom();

  // Step 1: Initialize the audio room
  Future<void> _initAudioRoom() async {
    await _audioRoom.initRoom();
  }

  // Step 2: Play an audio file
  Future<void> _playAudio() async {
    // Replace 'path_to_your_audio_file.mp3' with the actual path to your audio file
    await _audioRoom.play('path_to_your_audio_file.mp3');
  }

  // Step 3: Pause the audio playback
  Future<void> _pauseAudio() async {
    await _audioRoom.pause();
  }

  // Step 4: Resume the audio playback
  Future<void> _resumeAudio() async {
    await _audioRoom.resume();
  }

  // Step 5: Stop the audio playback
  Future<void> _stopAudio() async {
    await _audioRoom.stop();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('on_audio_room Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            ElevatedButton(
              onPressed: _initAudioRoom,
              child: Text('Initialize Audio Room'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _playAudio,
              child: Text('Play Audio'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _pauseAudio,
              child: Text('Pause Audio'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _resumeAudio,
              child: Text('Resume Audio'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _stopAudio,
              child: Text('Stop Audio'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user initializes the audio room by pressing the 'Initialize Audio Room' button.
// 2. The user plays an audio file by pressing the 'Play Audio' button.
// 3. The user pauses the audio playback by pressing the 'Pause Audio' button.
// 4. The user resumes the audio playback by pressing the 'Resume Audio' button.
// 5. The user stops the audio playback by pressing the 'Stop Audio' button.

// In summary, this code demonstrates how to use the on_audio_room package to play, pause, resume, and stop audio playback.
```

<-- END_MAIN -->
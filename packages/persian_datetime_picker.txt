```markdown
<!-- START_DESCRIPTION -->
# Persian DateTime Picker: A Comprehensive Overview

The `persian_datetime_picker` Flutter package is designed to provide a user-friendly interface for selecting dates and times in the Persian calendar. This package is particularly useful for applications targeting Persian-speaking users or regions where the Persian calendar is prevalent. 

## When to Use This Package
- **Cultural Relevance**: If your application is aimed at Persian-speaking audiences, using a Persian date picker enhances user experience.
- **Calendar Specificity**: When your app requires date inputs that align with the Persian calendar, such as for religious or cultural events.

## Key Features
- **Persian Calendar Support**: Fully supports the Persian calendar, allowing users to select dates in a culturally relevant format.
- **Customizable UI**: Offers various customization options to match the look and feel of your application.
- **Time Selection**: In addition to date selection, it also allows users to pick time, making it versatile for various applications.
- **Easy Integration**: Simple to integrate into existing Flutter applications with minimal setup.

Overall, the `persian_datetime_picker` package is an essential tool for Flutter developers looking to cater to Persian-speaking users, providing a seamless and culturally appropriate date and time selection experience.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Persian DateTime Picker

In this section, we will walk through the setup process for the `persian_datetime_picker` package and demonstrate how to use it in your Flutter application.

## Installation

To add the `persian_datetime_picker` package to your Flutter project, include it in your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  persian_datetime_picker: ^1.0.0 # Check for the latest version on pub.dev
```

After adding the dependency, run the following command to install it:

```bash
flutter pub get
```

## Platform-Specific Configuration

### Android
For Android, ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

### iOS
For iOS, you may need to set the deployment target in your `ios/Podfile`:

```ruby
platform :ios, '10.0'
```

## Using the Package

To use the `persian_datetime_picker`, you can create a simple Flutter widget that utilizes the date picker. Below is a basic example of how to implement it.

```dart
import 'package:flutter/material.dart';
import 'package:persian_datetime_picker/persian_datetime_picker.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  Jalali? selectedDate;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Persian DateTime Picker Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text(
              selectedDate != null
                  ? 'Selected Date: ${selectedDate!.toGregorian()}'
                  : 'No Date Selected',
              style: TextStyle(fontSize: 20),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () async {
                // Show the Persian DateTime Picker
                Jalali? picked = await showPersianDatePicker(
                  context: context,
                  initialDate: Jalali.now(),
                  firstDate: Jalali(1400, 1, 1),
                  lastDate: Jalali(1500, 12, 29),
                );
                if (picked != null) {
                  setState(() {
                    selectedDate = picked; // Update the selected date
                  });
                }
              },
              child: Text('Pick a Date'),
            ),
          ],
        ),
      ),
    );
  }
}
```

In this example, we create a simple app that allows users to select a date using the Persian DateTime Picker. The selected date is displayed on the screen.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example: Persian DateTime Picker in Action

```dart
import 'package:flutter/material.dart';
import 'package:persian_datetime_picker/persian_datetime_picker.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  Jalali? selectedDate; // Variable to hold the selected date

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Persian DateTime Picker Example'), // App title
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text(
              selectedDate != null
                  ? 'Selected Date: ${selectedDate!.toGregorian()}' // Display selected date in Gregorian format
                  : 'No Date Selected', // Message when no date is selected
              style: TextStyle(fontSize: 20),
            ),
            SizedBox(height: 20), // Space between text and button
            ElevatedButton(
              onPressed: () async {
                // Show the Persian DateTime Picker
                Jalali? picked = await showPersianDatePicker(
                  context: context,
                  initialDate: Jalali.now(), // Set initial date to today
                  firstDate: Jalali(1400, 1, 1), // Set the first selectable date
                  lastDate: Jalali(1500, 12, 29), // Set the last selectable date
                );
                if (picked != null) {
                  setState(() {
                    selectedDate = picked; // Update the selected date
                  });
                }
              },
              child: Text('Pick a Date'), // Button text
            ),
          ],
        ),
      ),
    );
  }
}

void main() {
  runApp(MaterialApp(
    home: RealFlutter(), // Run the RealFlutter widget
  ));
}
```

### Application Flow Explanation
// The application starts with the `main` function, which runs the `MaterialApp` widget.
// Inside the `MaterialApp`, we set the home to our `RealFlutter` widget.
// The `RealFlutter` widget is a stateful widget that maintains the selected date.
// In the `build` method, we create a simple UI with an AppBar and a centered column.
// The column contains a Text widget that displays the selected date or a message if no date is selected.
// Below the text, there is an ElevatedButton that, when pressed, opens the Persian DateTime Picker.
// The picker allows the user to select a date, which is then stored in the `selectedDate` variable.
// When a date is picked, the UI updates to show the selected date in Gregorian format.
<!-- END_MAIN -->
```

This structured blog post provides a comprehensive overview of the `persian_datetime_picker` package, guiding developers through its features, setup, and practical usage in a Flutter application.
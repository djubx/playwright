<-- START_DESCRIPTION -->

# Countly Flutter Package
==========================

The `countly_flutter` package is a Flutter wrapper for the Countly analytics platform. It allows you to track user behavior, crashes, and other events in your Flutter application.

## When to Use
--------------

You should use this package when you want to integrate Countly analytics into your Flutter application. This package provides a simple and easy-to-use API for tracking events, user behavior, and crashes.

## Features
------------

*   Track events and user behavior
*   Track crashes and exceptions
*   Set user properties and custom attributes
*   Support for both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up Countly Flutter
=============================

## Step 1: Add the Package to Your Project
-----------------------------------------

Add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  countly_flutter: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Step 2: Initialize Countly
-----------------------------

Import the package and initialize Countly in your `main` function:

```dart
import 'package:countly_flutter/countly_flutter.dart';

void main() {
  Countly.init(
    'https://your-countly-server.com',
    'your_app_key',
    'your_app_version',
  );
  runApp(MyApp());
}
```

## Step 3: Track Events
----------------------

Use the `Countly.recordEvent` method to track events:

```dart
Countly.recordEvent('My Event');
```

## Step 4: Track Crashes
----------------------

Use the `Countly.recordCrash` method to track crashes:

```dart
try {
  // Code that might throw an exception
} catch (e) {
  Countly.recordCrash(e);
}
```

## Platform-Specific Details
---------------------------

### Android

No additional setup is required for Android.

### iOS

You need to add the following lines to your `Info.plist` file:

```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:countly_flutter/countly_flutter.dart';

void main() {
  // Initialize Countly
  Countly.init(
    'https://your-countly-server.com',
    'your_app_key',
    'your_app_version',
  );

  // Run the app
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Countly Flutter Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              // Button to track an event
              ElevatedButton(
                onPressed: () {
                  // Track an event
                  Countly.recordEvent('My Event');
                },
                child: Text('Track Event'),
              ),
              // Button to track a crash
              ElevatedButton(
                onPressed: () {
                  try {
                    // Code that might throw an exception
                    throw Exception('Test exception');
                  } catch (e) {
                    // Track a crash
                    Countly.recordCrash(e);
                  }
                },
                child: Text('Track Crash'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The app starts by initializing Countly with the server URL, app key, and app version.
// Then, it runs the RealFlutter app, which displays two buttons: one to track an event and one to track a crash.
// When the user clicks the "Track Event" button, it calls the Countly.recordEvent method to track an event.
// When the user clicks the "Track Crash" button, it tries to throw an exception and catches it, then calls the Countly.recordCrash method to track a crash.

// In summary, this code initializes Countly, tracks events and crashes, and demonstrates how to use the Countly Flutter package.
```

<-- END_MAIN -->
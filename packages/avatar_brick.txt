<-- START_DESCRIPTION -->

# Avatar Brick Flutter Package
================================

The `avatar_brick` Flutter package is a powerful tool for creating and managing user avatars in your Flutter applications. It provides a simple and intuitive API for generating, caching, and displaying avatars.

## Features

* Generate avatars from user names or emails
* Cache avatars for offline use
* Display avatars in various sizes and shapes
* Support for Android and iOS platforms

## When to Use

The `avatar_brick` package is perfect for applications that require user avatars, such as:

* Social media apps
* Chat apps
* Forum apps
* Gaming apps

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using Avatar Brick

## Step 1: Add the Package to Your Pubspec

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  avatar_brick: ^1.0.0
```
Then, run `flutter pub get` to install the package.

## Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:avatar_brick/avatar_brick.dart';
```
## Step 3: Generate an Avatar

Use the `Avatar` widget to generate an avatar:
```dart
Avatar(
  name: 'John Doe',
  size: 50,
)
```
This will generate a 50x50 avatar with the initials "JD".

## Step 4: Cache the Avatar

To cache the avatar, use the `AvatarCache` widget:
```dart
AvatarCache(
  child: Avatar(
    name: 'John Doe',
    size: 50,
  ),
)
```
This will cache the avatar for offline use.

## Platform-Specific Details

### Android

On Android, you need to add the following line to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.INTERNET" />
```
This is required for the package to download and cache avatars.

### iOS

On iOS, you need to add the following line to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```
This is required for the package to download and cache avatars.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:avatar_brick/avatar_brick.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Avatar Brick Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Avatar Brick Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            // Generate an avatar with the name "John Doe"
            Avatar(
              name: 'John Doe',
              size: 50,
            ),
            SizedBox(height: 20),
            // Cache the avatar
            AvatarCache(
              child: Avatar(
                name: 'John Doe',
                size: 50,
              ),
            ),
            SizedBox(height: 20),
            // Display a cached avatar
            AvatarCache(
              child: Avatar(
                name: 'Jane Doe',
                size: 50,
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app and is presented with a screen containing three avatars.
// 2. The first avatar is generated with the name "John Doe" and is not cached.
// 3. The second avatar is generated with the name "John Doe" and is cached using the AvatarCache widget.
// 4. The third avatar is generated with the name "Jane Doe" and is cached using the AvatarCache widget.
// 5. When the user closes the app and reopens it, the cached avatars are displayed instead of being regenerated.
```

<-- END_MAIN -->

In summary, the code flows as follows:

* The user runs the app and is presented with a screen containing three avatars.
* The first avatar is generated with the name "John Doe" and is not cached.
* The second avatar is generated with the name "John Doe" and is cached using the `AvatarCache` widget.
* The third avatar is generated with the name "Jane Doe" and is cached using the `AvatarCache` widget.
* When the user closes the app and reopens it, the cached avatars are displayed instead of being regenerated.
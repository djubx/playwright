<-- START_DESCRIPTION -->

# Flutter Slidable Panel Package
=====================================

The `flutter_slidable_panel` package is a Flutter widget that allows you to create a slidable panel that can be used to display additional content or options. This package is useful when you want to provide a way for users to access additional features or settings without cluttering the main screen.

### Features

*   Slidable panel that can be opened and closed with a swipe gesture
*   Customizable panel size and position
*   Support for multiple panels
*   Optional callback functions for panel open and close events

### When to Use

*   When you want to provide additional options or settings without cluttering the main screen
*   When you want to create a hidden menu or navigation drawer
*   When you want to display additional content or information that is not essential to the main screen

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

### Setup

To use the `flutter_slidable_panel` package, you need to add it to your project's `pubspec.yaml` file:

```yml
dependencies:
  flutter_slidable_panel: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Basic Usage

To use the `SlidablePanel` widget, you need to create a `SlidablePanelController` instance and pass it to the `SlidablePanel` constructor:

```dart
import 'package:flutter/material.dart';
import 'package:flutter_slidable_panel/flutter_slidable_panel.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final _panelController = SlidablePanelController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Slidable Panel Example'),
      ),
      body: SlidablePanel(
        controller: _panelController,
        panel: Container(
          height: 200,
          color: Colors.blue,
          child: Center(
            child: Text('Slidable Panel'),
          ),
        ),
        body: Center(
          child: Text('Main Screen'),
        ),
      ),
    );
  }
}
```

### Customization

You can customize the `SlidablePanel` widget by passing additional properties to the constructor:

```dart
SlidablePanel(
  controller: _panelController,
  panel: Container(
    height: 200,
    color: Colors.blue,
    child: Center(
      child: Text('Slidable Panel'),
    ),
  ),
  body: Center(
    child: Text('Main Screen'),
  ),
  initialPanelSize: 0.5, // initial panel size
  minPanelSize: 0.2, // minimum panel size
  maxPanelSize: 0.8, // maximum panel size
  panelPosition: PanelPosition.right, // panel position
)
```

### Platform-Specific Details

The `flutter_slidable_panel` package uses the `GestureDetector` widget to detect swipe gestures. On Android, the `GestureDetector` widget uses the `onPanUpdate` callback to detect swipe gestures. On iOS, the `GestureDetector` widget uses the `onPanEnd` callback to detect swipe gestures.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_slidable_panel/flutter_slidable_panel.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Slidable Panel Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final _panelController = SlidablePanelController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Slidable Panel Example'),
      ),
      body: SlidablePanel(
        controller: _panelController,
        panel: Container(
          height: 200,
          color: Colors.blue,
          child: Center(
            child: Text('Slidable Panel'),
          ),
        ),
        body: Center(
          child: Text('Main Screen'),
        ),
        initialPanelSize: 0.5, // initial panel size
        minPanelSize: 0.2, // minimum panel size
        maxPanelSize: 0.8, // maximum panel size
        panelPosition: PanelPosition.right, // panel position
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app and the `RealFlutter` widget is displayed.
// 2. The `RealFlutter` widget creates a `SlidablePanelController` instance and passes it to the `SlidablePanel` constructor.
// 3. The `SlidablePanel` widget displays the main screen and the slidable panel.
// 4. The user can swipe the slidable panel to open or close it.
// 5. The `SlidablePanel` widget uses the `GestureDetector` widget to detect swipe gestures.
// 6. When the user swipes the slidable panel, the `onPanUpdate` callback is called on Android and the `onPanEnd` callback is called on iOS.
// 7. The `SlidablePanel` widget updates the panel size and position based on the swipe gesture.
// 8. The user can customize the `SlidablePanel` widget by passing additional properties to the constructor.

// In summary, the code flows as follows:
// 1. The user runs the app and the `RealFlutter` widget is displayed.
// 2. The `RealFlutter` widget creates a `SlidablePanelController` instance and passes it to the `SlidablePanel` constructor.
// 3. The `SlidablePanel` widget displays the main screen and the slidable panel.
// 4. The user can swipe the slidable panel to open or close it.
```

<-- END_MAIN -->
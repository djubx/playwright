<-- START_DESCRIPTION -->

# Chapa Unofficial Flutter Package
=====================================

The `chapa_unofficial` Flutter package is a third-party library that provides a simple and convenient way to integrate Chapa payment gateway into your Flutter application. Chapa is a popular payment gateway in Ethiopia that allows users to make online payments using their debit or credit cards.

## When to Use
--------------

You can use this package when you want to integrate Chapa payment gateway into your Flutter application. This package is particularly useful when you want to provide a seamless payment experience to your users.

## Features
------------

*   Supports payment using debit or credit cards
*   Supports payment using Chapa's mobile money services
*   Provides a simple and convenient API for integrating Chapa payment gateway into your Flutter application

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

## Step 1: Add the Package to Your Project
-----------------------------------------

To use the `chapa_unofficial` package, you need to add it to your project's `pubspec.yaml` file. You can do this by adding the following line to the `dependencies` section of your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  chapa_unofficial: ^1.0.0
```

## Step 2: Import the Package
---------------------------

After adding the package to your project, you need to import it into your Dart file. You can do this by adding the following line to the top of your Dart file:

```dart
import 'package:chapa_unofficial/chapa_unofficial.dart';
```

## Step 3: Initialize the Package
-------------------------------

To use the package, you need to initialize it with your Chapa API key and secret key. You can do this by calling the `init` method of the `Chapa` class:

```dart
Chapa.init(
  apiKey: 'YOUR_API_KEY',
  secretKey: 'YOUR_SECRET_KEY',
);
```

## Step 4: Make a Payment
----------------------

To make a payment, you need to create a `Payment` object and pass it to the `makePayment` method of the `Chapa` class:

```dart
Payment payment = Payment(
  amount: 100,
  currency: 'ETB',
  description: 'Test payment',
);

Chapa.makePayment(
  payment: payment,
  onSuccess: (transactionId) {
    print('Payment successful. Transaction ID: $transactionId');
  },
  onFailure: (error) {
    print('Payment failed. Error: $error');
  },
);
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:chapa_unofficial/chapa_unofficial.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Chapa Unofficial Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _formKey = GlobalKey<FormState>();
  final _amountController = TextEditingController();
  final _descriptionController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Chapa Unofficial Demo'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              TextFormField(
                controller: _amountController,
                decoration: InputDecoration(
                  labelText: 'Amount',
                  border: OutlineInputBorder(),
                ),
                validator: (value) {
                  if (value!.isEmpty) {
                    return 'Please enter an amount';
                  }
                  return null;
                },
              ),
              SizedBox(height: 20),
              TextFormField(
                controller: _descriptionController,
                decoration: InputDecoration(
                  labelText: 'Description',
                  border: OutlineInputBorder(),
                ),
                validator: (value) {
                  if (value!.isEmpty) {
                    return 'Please enter a description';
                  }
                  return null;
                },
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  if (_formKey.currentState!.validate()) {
                    // Make payment
                    Payment payment = Payment(
                      amount: int.parse(_amountController.text),
                      currency: 'ETB',
                      description: _descriptionController.text,
                    );

                    Chapa.makePayment(
                      payment: payment,
                      onSuccess: (transactionId) {
                        print('Payment successful. Transaction ID: $transactionId');
                      },
                      onFailure: (error) {
                        print('Payment failed. Error: $error');
                      },
                    );
                  }
                },
                child: Text('Make Payment'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user enters the amount and description in the text fields.
// 2. The user clicks the "Make Payment" button.
// 3. The application validates the input data.
// 4. If the input data is valid, the application creates a Payment object.
// 5. The application calls the makePayment method of the Chapa class, passing the Payment object as an argument.
// 6. The makePayment method sends a request to the Chapa server to make the payment.
// 7. If the payment is successful, the Chapa server returns a transaction ID.
// 8. The application prints the transaction ID to the console.
// 9. If the payment fails, the Chapa server returns an error message.
// 10. The application prints the error message to the console.

```

<-- END_MAIN -->
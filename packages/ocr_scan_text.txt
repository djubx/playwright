<-- START_DESCRIPTION -->
### Description
The `ocr_scan_text` Flutter package is a powerful tool for extracting text from images using Optical Character Recognition (OCR) technology. This package is ideal for applications that require text recognition, such as document scanning, business card scanning, or image-based text extraction.

Some key features of the `ocr_scan_text` package include:

*   Support for both Android and iOS platforms
*   High accuracy text recognition using Google's ML Kit
*   Ability to recognize text in multiple languages
*   Support for both single and batch image processing

When to use this package:

*   Document scanning: Extract text from documents, such as receipts, invoices, or contracts
*   Business card scanning: Extract contact information from business cards
*   Image-based text extraction: Extract text from images, such as street signs, product labels, or whiteboards
<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->
### Tutorial
To use the `ocr_scan_text` package in your Flutter application, follow these steps:

1.  Add the package to your `pubspec.yaml` file:

    ```yml
dependencies:
  flutter:
    sdk: flutter
  ocr_scan_text: ^1.0.0
```

2.  Run `flutter pub get` to install the package.

3.  Import the package in your Dart file:

    ```dart
import 'package:ocr_scan_text/ocr_scan_text.dart';
```

4.  Create an instance of the `OcrScanText` class:

    ```dart
OcrScanText ocrScanText = OcrScanText();
```

5.  Use the `scan` method to extract text from an image:

    ```dart
String text = await ocrScanText.scan(imagePath);
```

**Platform-Specific Details:**

*   **Android:** Make sure to add the following permissions to your `AndroidManifest.xml` file:

    ```xml
<uses-permission android:name="android.permission.CAMERA" />
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
```

*   **iOS:** Make sure to add the following permissions to your `Info.plist` file:

    ```xml
<key>NSCameraUsageDescription</key>
<string>This app needs camera access to scan documents</string>
<key>NSPhotoLibraryUsageDescription</key>
<string>This app needs photo library access to scan documents</string>
```

**Required Configurations/Optimizations:**

*   Make sure to handle the camera and storage permissions properly.
*   Optimize the image processing for better performance.
*   Handle the OCR engine's language support and limitations.
<-- END_TUTORIAL -->

<-- START_MAIN -->
```dart
import 'package:flutter/material.dart';
import 'package:ocr_scan_text/ocr_scan_text.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'OCR Scan Text Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  String _text = '';

  // Step 1: Create an instance of the OcrScanText class
  OcrScanText ocrScanText = OcrScanText();

  // Step 2: Define a function to scan the image and extract text
  Future<void> _scanImage() async {
    // Step 3: Use the scan method to extract text from the image
    String text = await ocrScanText.scan('image_path');

    // Step 4: Update the UI with the extracted text
    setState(() {
      _text = text;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('OCR Scan Text Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(_text),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _scanImage,
              child: Text('Scan Image'),
            ),
          ],
        ),
      ),
    );
  }
}
```

// Step 5: The app starts and initializes the OcrScanText instance.
// Step 6: The user clicks the "Scan Image" button, which calls the _scanImage function.
// Step 7: The _scanImage function uses the OcrScanText instance to scan the image and extract text.
// Step 8: The extracted text is updated in the UI using the setState method.
// Step 9: The app displays the extracted text to the user.

// Summary: This code demonstrates the use of the ocr_scan_text package to extract text from an image. The app initializes the OcrScanText instance, defines a function to scan the image, and updates the UI with the extracted text. The user can click the "Scan Image" button to start the scanning process.
<-- END_MAIN -->
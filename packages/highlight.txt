<-- START_DESCRIPTION -->

# Highlight Flutter Package
==========================

The `highlight` Flutter package is a powerful tool for highlighting and formatting text in your Flutter applications. It provides a simple and efficient way to highlight text, making it perfect for use cases such as text editors, code viewers, and more.

## Features

*   Supports multiple themes and languages
*   Customizable font styles and sizes
*   Easy to use and integrate into existing applications
*   Works seamlessly on both Android and iOS platforms

## When to Use

The `highlight` package is ideal for any application that requires text highlighting, such as:

*   Text editors
*   Code viewers
*   Markdown parsers
*   Chat applications

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Using the Highlight Flutter Package
=============================================

## Step 1: Add the Package to Your Project

To use the `highlight` package, you need to add it to your project's `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  highlight: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Step 2: Import the Package

Import the `highlight` package in your Dart file:

```dart
import 'package:highlight/highlight.dart';
```

## Step 3: Use the Package

To use the `highlight` package, you need to create a `Highlight` widget and pass in the text you want to highlight:

```dart
Highlight(
  text: 'This is some sample text',
  language: 'dart',
  theme: 'monokai-sublime',
)
```

## Platform-Specific Details

The `highlight` package works seamlessly on both Android and iOS platforms. However, you may need to adjust the font sizes and styles to suit your application's needs.

### Android

On Android, you can use the `android` package to adjust the font sizes and styles:

```dart
import 'package:android/android.dart';

Highlight(
  text: 'This is some sample text',
  language: 'dart',
  theme: 'monokai-sublime',
  textStyle: TextStyle(
    fontSize: 16,
    fontFamily: 'monospace',
  ),
)
```

### iOS

On iOS, you can use the `ios` package to adjust the font sizes and styles:

```dart
import 'package:ios/ios.dart';

Highlight(
  text: 'This is some sample text',
  language: 'dart',
  theme: 'monokai-sublime',
  textStyle: TextStyle(
    fontSize: 16,
    fontFamily: 'Menlo',
  ),
)
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:highlight/highlight.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Highlight Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  String _text = 'This is some sample text';
  String _language = 'dart';
  String _theme = 'monokai-sublime';

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Highlight Demo'),
      ),
      body: Center(
        child: Highlight(
          text: _text,
          language: _language,
          theme: _theme,
          textStyle: TextStyle(
            fontSize: 16,
            fontFamily: 'monospace',
          ),
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          setState(() {
            _text = 'This is some new text';
            _language = 'java';
            _theme = 'github-gist';
          });
        },
        tooltip: 'Change Text',
        child: Icon(Icons.edit),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the application and is presented with a screen containing a highlighted text.
// 2. The user can press the floating action button to change the text, language, and theme of the highlighted text.
// 3. When the user presses the button, the setState function is called, which updates the _text, _language, and _theme variables.
// 4. The updated variables are then used to rebuild the Highlight widget, which displays the new highlighted text.
// 5. The user can repeat this process to change the highlighted text as many times as they want.

// This code demonstrates the basic usage of the Highlight package, including how to change the text, language, and theme of the highlighted text.
```

<-- END_MAIN -->
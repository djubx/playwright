<-- START_DESCRIPTION -->

# Super Extensions Flutter Package
=====================================

The `super_extensions` Flutter package provides a set of useful extensions to enhance the functionality of your Flutter app. It includes a range of features such as caching, encryption, and platform-specific utilities.

### When to Use

You can use `super_extensions` in the following scenarios:

* When you need to cache data locally in your app.
* When you need to encrypt sensitive data.
* When you need to access platform-specific features such as device information or network connectivity.

### Features

Some of the key features of `super_extensions` include:

* Caching: provides a simple way to cache data locally in your app.
* Encryption: provides a simple way to encrypt sensitive data.
* Platform-specific utilities: provides access to platform-specific features such as device information or network connectivity.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up Super Extensions
=============================

To use `super_extensions` in your Flutter app, follow these steps:

### Step 1: Add the Package to Your Pubspec

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  super_extensions: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:super_extensions/super_extensions.dart';
```
### Step 3: Initialize the Package

Initialize the package in your app's `main` function:
```dart
void main() {
  SuperExtensions.init();
  runApp(MyApp());
}
```
### Platform-Specific Configurations

#### Android

To use `super_extensions` on Android, you need to add the following permissions to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.INTERNET" />
<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
```
#### iOS

To use `super_extensions` on iOS, you need to add the following lines to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:super_extensions/super_extensions.dart';

void main() {
  SuperExtensions.init();
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Initialize the cache
  final cache = SuperExtensions.cache;

  // Initialize the encryption
  final encryption = SuperExtensions.encryption;

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Super Extensions Demo'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              // Cache data
              ElevatedButton(
                onPressed: () async {
                  // Cache a string
                  await cache.set('key', 'Hello, World!');
                  print('Cached data: ${await cache.get('key')}');
                },
                child: Text('Cache Data'),
              ),
              // Encrypt data
              ElevatedButton(
                onPressed: () async {
                  // Encrypt a string
                  final encrypted = await encryption.encrypt('Hello, World!');
                  print('Encrypted data: $encrypted');
                  // Decrypt the data
                  final decrypted = await encryption.decrypt(encrypted);
                  print('Decrypted data: $decrypted');
                },
                child: Text('Encrypt Data'),
              ),
              // Get device information
              ElevatedButton(
                onPressed: () async {
                  // Get the device information
                  final deviceInfo = await SuperExtensions.deviceInfo;
                  print('Device information: $deviceInfo');
                },
                child: Text('Get Device Information'),
              ),
              // Check network connectivity
              ElevatedButton(
                onPressed: () async {
                  // Check the network connectivity
                  final isConnected = await SuperExtensions.isConnected;
                  print('Is connected: $isConnected');
                },
                child: Text('Check Network Connectivity'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The app flow is as follows:
// 1. The user opens the app and is presented with a screen containing several buttons.
// 2. The user clicks the "Cache Data" button, which caches a string using the SuperExtensions cache.
// 3. The user clicks the "Encrypt Data" button, which encrypts a string using the SuperExtensions encryption.
// 4. The user clicks the "Get Device Information" button, which retrieves the device information using the SuperExtensions deviceInfo.
// 5. The user clicks the "Check Network Connectivity" button, which checks the network connectivity using the SuperExtensions isConnected.
// 6. The app displays the results of each action in the console.

// In summary, this app demonstrates the usage of the SuperExtensions package to cache data, encrypt data, retrieve device information, and check network connectivity.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

Normal Package in Flutter
==========================

The "normal" package in Flutter is a library that provides a simple way to normalize and standardize data in your Flutter application. It can be used to normalize strings, numbers, and dates, making it easier to work with data from different sources.

When to Use
------------

You can use the "normal" package in the following scenarios:

*   When working with data from different sources, such as APIs or databases, and you need to standardize the data format.
*   When you need to normalize user input data, such as strings or numbers, to ensure consistency in your application.
*   When working with dates and times, and you need to normalize them to a standard format.

Features
--------

The "normal" package provides the following features:

*   String normalization: trim, lowercase, uppercase, and capitalize.
*   Number normalization: round, floor, and ceil.
*   Date normalization: format dates to a standard format.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
----------------

To use the "normal" package in your Flutter application, follow these steps:

### Step 1: Add the Package to Your pubspec.yaml File

```yml
dependencies:
  normal: ^1.0.0
```

### Step 2: Import the Package in Your Dart File

```dart
import 'package:normal/normal.dart';
```

### Step 3: Use the Package to Normalize Your Data

```dart
void main() {
  // Normalize a string
  String normalizedString = Normal.normalizeString(' Hello World! ');
  print(normalizedString); // Output: "Hello World!"

  // Normalize a number
  double normalizedNumber = Normal.normalizeNumber(12.3456);
  print(normalizedNumber); // Output: 12.35

  // Normalize a date
  DateTime normalizedDate = Normal.normalizeDate(DateTime.now());
  print(normalizedDate); // Output: 2023-03-15 14:30:00
}
```

Platform-Specific Details
-------------------------

The "normal" package works on both Android and iOS platforms. However, when working with dates, you need to consider the platform-specific date formats.

### Android

On Android, the date format is `yyyy-MM-dd HH:mm:ss`.

### iOS

On iOS, the date format is `yyyy-MM-dd HH:mm:ss ZZZ`.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:normal/normal.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Normal Package Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _formKey = GlobalKey<FormState>();
  String _normalizedString = '';
  double _normalizedNumber = 0;
  DateTime _normalizedDate = DateTime.now();

  void _normalizeData() {
    if (_formKey.currentState!.validate()) {
      _formKey.currentState!.save();
      setState(() {
        _normalizedString = Normal.normalizeString(_normalizedString);
        _normalizedNumber = Normal.normalizeNumber(_normalizedNumber);
        _normalizedDate = Normal.normalizeDate(_normalizedDate);
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Normal Package Demo'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              TextFormField(
                decoration: InputDecoration(
                  labelText: 'Enter a string',
                ),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter a string';
                  }
                  return null;
                },
                onSaved: (value) => _normalizedString = value!,
              ),
              TextFormField(
                decoration: InputDecoration(
                  labelText: 'Enter a number',
                ),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter a number';
                  }
                  return null;
                },
                onSaved: (value) => _normalizedNumber = double.parse(value!),
              ),
              TextFormField(
                decoration: InputDecoration(
                  labelText: 'Enter a date',
                ),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter a date';
                  }
                  return null;
                },
                onSaved: (value) => _normalizedDate = DateTime.parse(value!),
              ),
              SizedBox(height: 16),
              ElevatedButton(
                onPressed: _normalizeData,
                child: Text('Normalize Data'),
              ),
              SizedBox(height: 16),
              Text('Normalized String: $_normalizedString'),
              Text('Normalized Number: $_normalizedNumber'),
              Text('Normalized Date: $_normalizedDate'),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user enters a string, number, and date in the corresponding text fields.
// 2. When the user clicks the "Normalize Data" button, the _normalizeData function is called.
// 3. The _normalizeData function validates the user input using the _formKey.currentState!.validate() method.
// 4. If the input is valid, the function saves the input values using the _formKey.currentState!.save() method.
// 5. The function then normalizes the input values using the Normal.normalizeString, Normal.normalizeNumber, and Normal.normalizeDate methods.
// 6. The normalized values are then displayed on the screen.
// 7. The user can repeat the process by entering new values and clicking the "Normalize Data" button again.

```

<-- END_MAIN -->
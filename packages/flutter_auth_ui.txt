<-- START_DESCRIPTION -->

# Flutter Auth UI Package
================================

The `flutter_auth_ui` package provides a set of pre-built UI components for authentication in Flutter applications. It supports various authentication providers, including Google, Facebook, Twitter, and more. With this package, you can easily integrate authentication into your app without having to build the UI from scratch.

## When to Use This Package
---------------------------

Use this package when you need to add authentication to your Flutter app quickly and easily. It's ideal for prototyping or building small to medium-sized applications.

## Features
------------

*   Pre-built UI components for authentication
*   Supports multiple authentication providers (Google, Facebook, Twitter, etc.)
*   Customizable UI to fit your app's design
*   Easy integration with your existing Flutter app

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `flutter_auth_ui` package, follow these steps:

### Step 1: Add the Package to Your `pubspec.yaml` File

```yml
dependencies:
  flutter_auth_ui: ^1.0.0
```

### Step 2: Run `flutter pub get` to Get the Package

```bash
flutter pub get
```

### Step 3: Import the Package in Your Dart File

```dart
import 'package:flutter_auth_ui/flutter_auth_ui.dart';
```

### Step 4: Configure the Authentication Providers

Configure the authentication providers you want to use. For example, to use Google authentication, you need to create a project in the Google Cloud Console and enable the Google Sign-In API.

#### Android Configuration

For Android, you need to add the following configuration to your `android/app/build.gradle` file:

```groovy
android {
    defaultConfig {
        // ...
        manifestPlaceholders = [
            'appAuthRedirectScheme': 'com.example.app'
        ]
    }
}
```

#### iOS Configuration

For iOS, you need to add the following configuration to your `ios/Runner/Info.plist` file:

```xml
<key>CFBundleURLTypes</key>
<array>
    <dict>
        <key>CFBundleTypeRole</key>
        <string>Editor</string>
        <key>CFBundleURLSchemes</key>
        <array>
            <string>com.example.app</string>
        </array>
    </dict>
</array>
```

### Step 5: Use the Package in Your Flutter App

Now you can use the `flutter_auth_ui` package in your Flutter app. Here's an example:

```dart
import 'package:flutter/material.dart';
import 'package:flutter_auth_ui/flutter_auth_ui.dart';

class RealFlutter extends StatefulWidget {
    @override
    _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
    @override
    Widget build(BuildContext context) {
        return Scaffold(
            appBar: AppBar(
                title: Text('Flutter Auth UI Example'),
            ),
            body: Center(
                child: ElevatedButton(
                    onPressed: () async {
                        final user = await FlutterAuthUi.signIn(context);
                        if (user != null) {
                            print('Signed in user: ${user.displayName}');
                        } else {
                            print('Sign in failed');
                        }
                    },
                    child: Text('Sign In'),
                ),
            ),
        );
    }
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_auth_ui/flutter_auth_ui.dart';

void main() {
    runApp(MyApp());
}

class MyApp extends StatelessWidget {
    @override
    Widget build(BuildContext context) {
        return MaterialApp(
            title: 'Flutter Auth UI Example',
            theme: ThemeData(
                primarySwatch: Colors.blue,
            ),
            home: RealFlutter(),
        );
    }
}

class RealFlutter extends StatefulWidget {
    @override
    _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
    // Step 1: Create a state variable to store the signed in user
    dynamic _user;

    // Step 2: Create a function to handle the sign in process
    Future<void> _signIn() async {
        // Step 3: Call the FlutterAuthUi.signIn function to start the sign in process
        final user = await FlutterAuthUi.signIn(context);

        // Step 4: If the user is not null, update the state variable and print a success message
        if (user != null) {
            setState(() {
                _user = user;
            });
            print('Signed in user: ${user.displayName}');
        } else {
            // Step 5: If the user is null, print an error message
            print('Sign in failed');
        }
    }

    // Step 6: Create a function to handle the sign out process
    Future<void> _signOut() async {
        // Step 7: Call the FlutterAuthUi.signOut function to start the sign out process
        await FlutterAuthUi.signOut(context);

        // Step 8: Update the state variable and print a success message
        setState(() {
            _user = null;
        });
        print('Signed out');
    }

    @override
    Widget build(BuildContext context) {
        return Scaffold(
            appBar: AppBar(
                title: Text('Flutter Auth UI Example'),
            ),
            body: Center(
                child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                        // Step 9: Display the signed in user's name if available
                        if (_user != null)
                            Text('Signed in user: ${_user.displayName}'),
                        // Step 10: Display a sign in button if the user is not signed in
                        if (_user == null)
                            ElevatedButton(
                                onPressed: _signIn,
                                child: Text('Sign In'),
                            ),
                        // Step 11: Display a sign out button if the user is signed in
                        if (_user != null)
                            ElevatedButton(
                                onPressed: _signOut,
                                child: Text('Sign Out'),
                            ),
                    ],
                ),
            ),
        );
    }
}

// Application flow:
// 1. The user opens the app and is presented with a sign in button.
// 2. When the user clicks the sign in button, the FlutterAuthUi.signIn function is called.
// 3. The user is redirected to the authentication provider's sign in page.
// 4. After signing in, the user is redirected back to the app.
// 5. The FlutterAuthUi.signIn function returns the signed in user's data.
// 6. The app updates the state variable with the signed in user's data.
// 7. The app displays the signed in user's name and a sign out button.
// 8. When the user clicks the sign out button, the FlutterAuthUi.signOut function is called.
// 9. The user is signed out and the state variable is updated.
// 10. The app displays a sign in button again.

```

<-- END_MAIN -->
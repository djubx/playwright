```markdown
<!-- START_DESCRIPTION -->
# Izooto Plugin: A Comprehensive Overview

The **izooto_plugin** is a Flutter package designed to facilitate push notifications and user engagement through web and mobile applications. It integrates seamlessly with the Izooto platform, allowing developers to send targeted notifications to users based on their behavior and preferences. This package is particularly useful for applications that require real-time communication with users, such as e-commerce apps, news apps, and social media platforms.

## When to Use This Package
- **User Engagement**: If your app needs to keep users informed about updates, promotions, or new content.
- **Targeted Notifications**: When you want to send personalized notifications based on user behavior.
- **Cross-Platform Support**: If you are developing for both Android and iOS and want a unified solution for push notifications.

## Key Features
- **Cross-Platform Compatibility**: Works on both Android and iOS.
- **User Segmentation**: Allows for targeted notifications based on user data.
- **Real-Time Notifications**: Sends notifications instantly to users.
- **Analytics**: Provides insights into user engagement and notification performance.

The **izooto_plugin** is a powerful tool for enhancing user interaction and retention in your Flutter applications.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Izooto Plugin: Setup and Usage Tutorial

## Installation
To get started with the **izooto_plugin**, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  izooto_plugin: ^latest_version
```

Make sure to replace `latest_version` with the most recent version available on [pub.dev](https://pub.dev/packages/izooto_plugin).

## Platform-Specific Setup

### Android Configuration
1. **Add Permissions**: Open your `AndroidManifest.xml` file and add the following permissions:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
<uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED"/>
```

2. **Initialize Izooto**: In your `MainActivity.java` or `MainActivity.kt`, initialize the Izooto SDK:

```java
import com.izooto.sdk.Izooto;

public class MainActivity extends FlutterActivity {
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        Izooto.init(this, "YOUR_APP_ID");
    }
}
```

### iOS Configuration
1. **Add Permissions**: Open your `Info.plist` file and add the following:

```xml
<key>UIBackgroundModes</key>
<array>
    <string>fetch</string>
    <string>remote-notification</string>
</array>
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

2. **Initialize Izooto**: In your `AppDelegate.swift`, initialize the Izooto SDK:

```swift
import UIKit
import Flutter
import Izooto

@UIApplicationMain
class AppDelegate: FlutterAppDelegate {
    override func application(
        _ application: UIApplication,
        didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?
    ) -> Bool {
        Izooto.init("YOUR_APP_ID")
        return super.application(application, didFinishLaunchingWithOptions: launchOptions)
    }
}
```

## Using the Package
Once the setup is complete, you can start using the **izooto_plugin** in your Flutter application. Hereâ€™s how to implement basic push notification functionality:

```dart
import 'package:flutter/material.dart';
import 'package:izooto_plugin/izooto_plugin.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  void initState() {
    super.initState();
    // Initialize Izooto
    IzootoPlugin.init("YOUR_APP_ID");
    
    // Set up notification listener
    IzootoPlugin.onNotificationReceived.listen((notification) {
      // Handle the notification
      print("Notification received: ${notification.title}");
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text("Izooto Plugin Example")),
        body: Center(child: Text("Welcome to Izooto Plugin")),
      ),
    );
  }
}
```

This code initializes the Izooto SDK and listens for incoming notifications, printing the notification title to the console.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Izooto Plugin in Flutter

```dart
import 'package:flutter/material.dart';
import 'package:izooto_plugin/izooto_plugin.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  void initState() {
    super.initState();
    // Initialize Izooto with your app ID
    IzootoPlugin.init("YOUR_APP_ID");
    
    // Set up a listener for incoming notifications
    IzootoPlugin.onNotificationReceived.listen((notification) {
      // Print the notification title to the console
      print("Notification received: ${notification.title}");
      // You can also navigate to a specific screen or show a dialog here
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text("Izooto Plugin Example")),
        body: Center(
          child: Text("Welcome to Izooto Plugin"),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts and the RealFlutter widget is created.
// 2. In the initState method, the Izooto SDK is initialized with the app ID.
// 3. A listener is set up to listen for incoming notifications.
// 4. When a notification is received, its title is printed to the console.
// 5. The main UI displays a simple welcome message to the user.
```
<!-- END_MAIN -->
```

### Summary
In this blog post, we explored the **izooto_plugin** for Flutter, detailing its features, setup process, and providing a complete example of its usage. The code demonstrates how to initialize the Izooto SDK, listen for notifications, and handle them appropriately. This package is ideal for developers looking to enhance user engagement through effective push notifications in their Flutter applications.
Here’s a detailed technical blog on the `khalti_checkout_flutter` Flutter package, structured as requested.

<!-- START_DESCRIPTION -->
# Khalti Checkout Flutter Package

The `khalti_checkout_flutter` package is a Flutter plugin that allows developers to integrate Khalti's payment gateway into their Flutter applications. Khalti is a popular payment service in Nepal, enabling users to make payments through various methods, including mobile wallets, bank cards, and more. This package simplifies the process of implementing Khalti's checkout functionality in Flutter apps.

## When to Use This Package

You should consider using the `khalti_checkout_flutter` package when:
- You are developing a Flutter application that requires payment processing.
- Your target audience is in Nepal, where Khalti is widely used.
- You want to provide users with a seamless payment experience through a trusted local payment gateway.

## Features

- **Easy Integration**: The package provides a straightforward API for integrating Khalti's payment gateway.
- **Multiple Payment Options**: Supports various payment methods, including Khalti wallet, bank cards, and more.
- **Customizable UI**: Allows developers to customize the checkout experience to match their app's design.
- **Real-time Payment Status**: Provides real-time updates on payment status, ensuring users are informed throughout the process.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up Khalti Checkout in Flutter

In this tutorial, we will walk through the setup process for the `khalti_checkout_flutter` package and demonstrate how to use it in your Flutter application.

## Step 1: Add Dependency

To get started, add the `khalti_checkout_flutter` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  khalti_checkout_flutter: ^1.0.0 # Check for the latest version on pub.dev
```

## Step 2: Configure Android

For Android, you need to add the following permissions in your `AndroidManifest.xml` file located at `android/app/src/main/AndroidManifest.xml`:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
```

Additionally, ensure that your `minSdkVersion` is set to at least 21 in `android/app/build.gradle`:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

## Step 3: Configure iOS

For iOS, you need to add the following to your `Info.plist` file located at `ios/Runner/Info.plist`:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

## Step 4: Initialize Khalti Checkout

In your Flutter application, you can initialize the Khalti Checkout by creating an instance of the `KhaltiCheckout` class. You will need your Khalti public key, which you can obtain from the Khalti developer dashboard.

```dart
import 'package:khalti_checkout_flutter/khalti_checkout_flutter.dart';

class RealFlutter {
  void initializeKhalti() {
    KhaltiCheckout.init(
      publicKey: "YOUR_PUBLIC_KEY",
      // Optional: Set the environment to test or production
      isSandbox: true,
    );
  }
}
```

## Step 5: Implement Checkout

To implement the checkout process, you can use the `KhaltiCheckout` class to create a payment request. Here’s how you can do it:

```dart
void startCheckout() {
  KhaltiCheckout.startCheckout(
    amount: 1000, // Amount in paisa
    productIdentity: "product_id_123",
    productName: "Sample Product",
    productUrl: "https://example.com/product",
    mobile: "9800000000", // User's mobile number
    email: "user@example.com", // User's email
    onSuccess: (data) {
      // Handle successful payment
      print("Payment Successful: $data");
    },
    onFailure: (error) {
      // Handle payment failure
      print("Payment Failed: $error");
    },
    onCancel: () {
      // Handle payment cancellation
      print("Payment Cancelled");
    },
  );
}
```

## Step 6: Testing

Make sure to test your integration in the sandbox environment before going live. You can switch to the production environment by setting `isSandbox` to `false`.

With these steps, you should be able to integrate Khalti Checkout into your Flutter application successfully.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Khalti Checkout in Flutter

```dart
import 'package:flutter/material.dart';
import 'package:khalti_checkout_flutter/khalti_checkout_flutter.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Initialize Khalti Checkout
    KhaltiCheckout.init(
      publicKey: "YOUR_PUBLIC_KEY", // Replace with your Khalti public key
      isSandbox: true, // Set to false for production
    );

    return MaterialApp(
      title: 'Khalti Checkout Example',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Khalti Checkout Example'),
        ),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              // Start the checkout process when the button is pressed
              startCheckout();
            },
            child: Text('Pay with Khalti'),
          ),
        ),
      ),
    );
  }

  void startCheckout() {
    KhaltiCheckout.startCheckout(
      amount: 1000, // Amount in paisa
      productIdentity: "product_id_123",
      productName: "Sample Product",
      productUrl: "https://example.com/product",
      mobile: "9800000000", // User's mobile number
      email: "user@example.com", // User's email
      onSuccess: (data) {
        // Handle successful payment
        print("Payment Successful: $data");
      },
      onFailure: (error) {
        // Handle payment failure
        print("Payment Failed: $error");
      },
      onCancel: () {
        // Handle payment cancellation
        print("Payment Cancelled");
      },
    );
  }
}

// Application Flow Explanation:
// 1. The app starts and initializes Khalti Checkout with the public key.
// 2. The main screen displays a button labeled "Pay with Khalti."
// 3. When the button is pressed, the `startCheckout` method is called.
// 4. The `KhaltiCheckout.startCheckout` method is invoked with the necessary parameters.
// 5. Depending on the user's actions, the app will handle success, failure, or cancellation of the payment.
// 6. Successful payments will print the payment data, while failures and cancellations will print appropriate messages.
```

<!-- END_MAIN -->

In this blog, we covered the `khalti_checkout_flutter` package, detailing its features, setup process, and providing a complete example of how to implement it in a Flutter application. By following the steps outlined, developers can easily integrate Khalti's payment gateway into their apps, providing users with a reliable and efficient payment solution.
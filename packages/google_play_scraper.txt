```markdown
<!-- START_DESCRIPTION -->
# Google Play Scraper Flutter Package

The `google_play_scraper` package is a powerful tool for Flutter developers looking to extract data from the Google Play Store. This package allows you to scrape various details about apps, including their ratings, reviews, and other metadata. It is particularly useful for applications that require insights into app performance, competitor analysis, or market research.

## When to Use This Package
- **Market Research**: Analyze competitors by fetching their app ratings and reviews.
- **App Performance Monitoring**: Track your app's performance over time by scraping its own data.
- **User Feedback Analysis**: Aggregate and analyze user reviews to improve your app.

## Features
- Fetch app details such as title, description, and developer information.
- Retrieve user reviews and ratings.
- Support for pagination to get multiple pages of reviews.
- Ability to filter reviews based on various criteria (e.g., rating, date).

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Google Play Scraper

## Installation
To use the `google_play_scraper` package, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  google_play_scraper: ^latest_version
```

Make sure to replace `latest_version` with the most recent version available on [pub.dev](https://pub.dev/packages/google_play_scraper).

## Platform-Specific Details
### Android
- Ensure that your app has internet permissions in the `AndroidManifest.xml` file:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
```

### iOS
- For iOS, you may need to configure App Transport Security settings in your `Info.plist` to allow HTTP requests if you are not using HTTPS.

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

## Basic Usage
Hereâ€™s how to use the `google_play_scraper` package to fetch app details and reviews:

1. Import the package in your Dart file:

```dart
import 'package:google_play_scraper/google_play_scraper.dart';
```

2. Create a function to fetch app details:

```dart
Future<void> fetchAppDetails() async {
  final appDetails = await GooglePlayScraper.getApp(
    appId: 'com.example.app', // Replace with your app ID
  );
  print(appDetails);
}
```

3. Call this function in your main application logic.

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of Google Play Scraper

```dart
import 'package:flutter/material.dart';
import 'package:google_play_scraper/google_play_scraper.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Google Play Scraper Example',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Google Play Scraper Example'),
        ),
        body: AppDetailsScreen(),
      ),
    );
  }
}

class AppDetailsScreen extends StatefulWidget {
  @override
  _AppDetailsScreenState createState() => _AppDetailsScreenState();
}

class _AppDetailsScreenState extends State<AppDetailsScreen> {
  String _appDetails = 'Fetching app details...';

  @override
  void initState() {
    super.initState();
    _fetchAppDetails(); // Call the function to fetch app details when the widget is initialized
  }

  Future<void> _fetchAppDetails() async {
    try {
      // Fetch app details using the Google Play Scraper
      final appDetails = await GooglePlayScraper.getApp(
        appId: 'com.example.app', // Replace with your app ID
      );

      // Update the state with the fetched app details
      setState(() {
        _appDetails = appDetails.toString(); // Convert app details to string for display
      });
    } catch (e) {
      // Handle any errors that occur during the fetch
      setState(() {
        _appDetails = 'Error fetching app details: $e';
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Center(
      child: Text(_appDetails), // Display the fetched app details
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the RealFlutter widget.
// 2. RealFlutter builds a MaterialApp with an AppBar and a body containing AppDetailsScreen.
// 3. AppDetailsScreen is a stateful widget that fetches app details when initialized.
// 4. The _fetchAppDetails method is called in initState, which uses the Google Play Scraper to get app details.
// 5. If successful, the app details are displayed; if an error occurs, an error message is shown.
```
<!-- END_MAIN -->
``` 

This structured approach provides a comprehensive overview of the `google_play_scraper` package, guiding developers through its features, setup, and practical usage in a Flutter application.
Here's a detailed technical blog on the "money_formatter" Flutter package, structured as requested.

<!-- START_DESCRIPTION -->
# Money Formatter Flutter Package

The **money_formatter** package is a powerful tool for formatting monetary values in Flutter applications. It provides a simple and efficient way to display currency values in a user-friendly format, making it ideal for applications that deal with financial transactions, e-commerce, or any scenario where monetary values are displayed.

## When to Use This Package

You should consider using the **money_formatter** package when:
- You need to display currency values in a specific format (e.g., with commas, decimals, or currency symbols).
- You want to ensure that monetary values are formatted according to the user's locale.
- You are developing an application that requires consistent and accurate representation of financial data.

## Features

- **Locale Support**: Automatically formats currency based on the user's locale.
- **Customizable Formatting**: Allows customization of decimal places, currency symbols, and thousands separators.
- **Easy Integration**: Simple API that integrates seamlessly with Flutter applications.

## Example Use Cases

1. **E-commerce Applications**: Displaying product prices in a user-friendly format.
2. **Banking Apps**: Showing account balances and transaction amounts clearly.
3. **Expense Trackers**: Formatting expenses and income for better readability.

By leveraging the **money_formatter** package, developers can enhance the user experience by presenting monetary values in a clear and consistent manner.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Money Formatter Package

## Step 1: Adding the Dependency

To get started, you need to add the **money_formatter** package to your Flutter project. Open your `pubspec.yaml` file and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  money_formatter: ^2.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command to install it:

```bash
flutter pub get
```

## Step 2: Importing the Package

In your Dart file, import the package:

```dart
import 'package:money_formatter/money_formatter.dart';
```

## Step 3: Basic Usage

You can use the **MoneyFormatter** class to format monetary values. Here’s a simple example:

```dart
void main() {
  MoneyFormatter fmf = MoneyFormatter(amount: 123456.789);
  print(fmf.output.symbolOnLeft); // Output: $123,456.79
}
```

## Platform-Specific Details

### Android

For Android, ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file:

```gradle
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

### iOS

For iOS, you may need to configure your project to support the latest Swift version. Open your `ios/Podfile` and ensure you have the following line:

```ruby
platform :ios, '10.0'
```

## Step 4: Customizing the Formatter

You can customize the formatter to suit your needs. Here’s an example of how to format a monetary value with specific options:

```dart
MoneyFormatter fmf = MoneyFormatter(
  amount: 123456.789,
  settings: MoneyFormatterSettings(
    symbol: "\$",
    fractionDigits: 2,
    thousandSeparator: ",",
    decimalSeparator: ".",
  ),
);
print(fmf.output.symbolOnLeft); // Output: $123,456.79
```

This customization allows you to define how the currency is displayed, including the symbol, number of decimal places, and separators.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using Money Formatter

```dart
import 'package:flutter/material.dart';
import 'package:money_formatter/money_formatter.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Money Formatter Example',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Money Formatter Example'),
        ),
        body: Center(
          child: MoneyDisplay(),
        ),
      ),
    );
  }
}

class MoneyDisplay extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Define a sample amount
    double amount = 123456.789;

    // Create a MoneyFormatter instance with the amount
    MoneyFormatter fmf = MoneyFormatter(
      amount: amount,
      settings: MoneyFormatterSettings(
        symbol: "\$",
        fractionDigits: 2,
        thousandSeparator: ",",
        decimalSeparator: ".",
      ),
    );

    // Display the formatted amount
    return Text(
      'Formatted Amount: ${fmf.output.symbolOnLeft}',
      style: TextStyle(fontSize: 24),
    );
  }
}

// Application Flow Explanation:
// 1. The main function starts the Flutter application by calling runApp() with MyApp.
// 2. MyApp builds a MaterialApp with a title and a home Scaffold containing an AppBar and a centered MoneyDisplay widget.
// 3. The MoneyDisplay widget defines a sample monetary amount and creates a MoneyFormatter instance to format it.
// 4. The formatted amount is displayed in a Text widget with a larger font size.
```

<!-- END_MAIN -->

In this example, the application starts by displaying a formatted monetary value in the center of the screen. The `MoneyDisplay` widget handles the formatting logic, ensuring that the amount is displayed with the correct currency symbol, decimal places, and separators.

### Summary of Application Flow

- The application initializes with the `main()` function, which sets up the Flutter environment.
- The `MyApp` class builds the main structure of the app, including the app bar and body.
- The `MoneyDisplay` widget formats a predefined monetary amount using the **money_formatter** package.
- The formatted amount is displayed on the screen, demonstrating the package's functionality.

This structured approach to using the **money_formatter** package allows developers to easily integrate and customize monetary formatting in their Flutter applications.
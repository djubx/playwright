<-- START_DESCRIPTION -->

# Bluetooth Classic Flutter Package
=====================================

The `bluetooth_classic` Flutter package provides a simple and easy-to-use interface for interacting with Bluetooth devices. It allows you to discover nearby devices, connect to them, and exchange data.

### When to Use

This package is ideal for applications that require communication with Bluetooth devices, such as:

* IoT projects
* Wearable devices
* Home automation systems
* Industrial automation systems

### Features

* Discover nearby Bluetooth devices
* Connect to Bluetooth devices
* Exchange data with connected devices
* Support for both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `bluetooth_classic` package, follow these steps:

### Step 1: Add the Package to Your Project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter:
    sdk: flutter
  bluetooth_classic: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:bluetooth_classic/bluetooth_classic.dart';
```
### Step 3: Request Permissions (Android Only)

On Android, you need to request the `BLUETOOTH` and `BLUETOOTH_ADMIN` permissions. Add the following lines to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.BLUETOOTH" />
<uses-permission android:name="android.permission.BLUETOOTH_ADMIN" />
```
### Step 4: Initialize the Package

Initialize the package in your Dart file:
```dart
BluetoothClassic _bluetoothClassic = BluetoothClassic();
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:bluetooth_classic/bluetooth_classic.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Bluetooth Classic Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  BluetoothClassic _bluetoothClassic = BluetoothClassic();
  List<BluetoothDevice> _devices = [];

  @override
  void initState() {
    super.initState();
    _bluetoothClassic.initialize();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Bluetooth Classic Demo'),
      ),
      body: Column(
        children: [
          ElevatedButton(
            onPressed: _discoverDevices,
            child: Text('Discover Devices'),
          ),
          Expanded(
            child: ListView.builder(
              itemCount: _devices.length,
              itemBuilder: (context, index) {
                return ListTile(
                  title: Text(_devices[index].name),
                  subtitle: Text(_devices[index].address),
                );
              },
            ),
          ),
        ],
      ),
    );
  }

  void _discoverDevices() async {
    List<BluetoothDevice> devices = await _bluetoothClassic.discoverDevices();
    setState(() {
      _devices = devices;
    });
  }
}

// Application flow:
// 1. The app initializes the BluetoothClassic package in the initState method.
// 2. The user clicks the "Discover Devices" button, which calls the _discoverDevices method.
// 3. The _discoverDevices method uses the BluetoothClassic package to discover nearby devices.
// 4. The discovered devices are stored in the _devices list and displayed in the ListView.
// 5. The user can select a device from the ListView to connect to it.
```

// Final summary:
// The code flows as follows: the app initializes the BluetoothClassic package, discovers nearby devices when the user clicks the "Discover Devices" button, and displays the discovered devices in a ListView. The user can then select a device to connect to it. 

<-- END_MAIN -->
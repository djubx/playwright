```markdown
<-- START_DESCRIPTION -->

# Flutter AES ECB PKCS5 Package Overview

The `flutter_aes_ecb_pkcs5` package is a Flutter library designed to provide AES encryption and decryption using the ECB mode with PKCS5 padding. This package is particularly useful for developers who need to secure sensitive data in their Flutter applications, such as passwords, personal information, or any other confidential data that requires encryption before storage or transmission.

## When to Use

- **Data Security**: Use this package when you need to encrypt data before saving it to a database or sending it over a network.
- **Confidential Information**: Ideal for applications that handle sensitive user information, ensuring that data is not easily accessible if intercepted.
- **Cross-Platform Consistency**: Provides a consistent encryption mechanism across both Android and iOS platforms.

## Features

- **AES Encryption**: Implements AES encryption using the ECB mode, which is simple and fast for encrypting small amounts of data.
- **PKCS5 Padding**: Ensures that the data is padded correctly to meet block size requirements.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS, making it a versatile choice for Flutter developers.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the Flutter AES ECB PKCS5 Package

In this tutorial, we will walk through the process of setting up the `flutter_aes_ecb_pkcs5` package in a Flutter project and demonstrate how to use it for encrypting and decrypting data.

## Setup Process

### Step 1: Add Dependency

Add the package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  flutter_aes_ecb_pkcs5: ^1.0.0
```

Run `flutter pub get` to install the package.

### Step 2: Platform-Specific Configuration

#### Android

No additional configuration is required for Android. The package works out of the box.

#### iOS

Ensure that your iOS deployment target is set to at least iOS 9.0. You can set this in your `ios/Podfile`:

```ruby
platform :ios, '9.0'
```

### Step 3: Import the Package

In your Dart file, import the package:

```dart
import 'package:flutter_aes_ecb_pkcs5/flutter_aes_ecb_pkcs5.dart';
```

## Using the Package

To use the package, you will typically follow these steps:

1. **Initialize the RealFlutter Class**: Create an instance of the `RealFlutter` class.
2. **Encrypt Data**: Use the `encrypt` method to encrypt your data.
3. **Decrypt Data**: Use the `decrypt` method to decrypt your data.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_aes_ecb_pkcs5/flutter_aes_ecb_pkcs5.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter AES ECB PKCS5 Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: EncryptionDemo(),
    );
  }
}

class EncryptionDemo extends StatefulWidget {
  @override
  _EncryptionDemoState createState() => _EncryptionDemoState();
}

class _EncryptionDemoState extends State<EncryptionDemo> {
  final RealFlutter _realFlutter = RealFlutter();
  final String _key = '1234567890123456'; // 16-byte key for AES
  String _encryptedText = '';
  String _decryptedText = '';

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('AES Encryption Demo'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text('Encrypted Text: $_encryptedText'),
            SizedBox(height: 10),
            Text('Decrypted Text: $_decryptedText'),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _encryptData,
              child: Text('Encrypt'),
            ),
            SizedBox(height: 10),
            ElevatedButton(
              onPressed: _decryptData,
              child: Text('Decrypt'),
            ),
          ],
        ),
      ),
    );
  }

  // Encrypts a sample text using the AES ECB PKCS5 algorithm
  void _encryptData() async {
    String textToEncrypt = 'Hello, Flutter!';
    String encrypted = await _realFlutter.encrypt(textToEncrypt, _key);
    setState(() {
      _encryptedText = encrypted;
    });
  }

  // Decrypts the previously encrypted text
  void _decryptData() async {
    if (_encryptedText.isNotEmpty) {
      String decrypted = await _realFlutter.decrypt(_encryptedText, _key);
      setState(() {
        _decryptedText = decrypted;
      });
    }
  }
}
```

// The application starts by running the `MyApp` widget, which sets up a basic Material app.
// The `EncryptionDemo` widget is the main screen, displaying encrypted and decrypted text.
// The `_EncryptionDemoState` manages the encryption and decryption logic.
// A 16-byte key is defined for AES encryption.
// The `_encryptData` method encrypts a sample string and updates the UI with the encrypted text.
// The `_decryptData` method decrypts the encrypted text and updates the UI with the decrypted text.

<-- END_MAIN -->
```
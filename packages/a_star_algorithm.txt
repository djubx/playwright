<-- START_DESCRIPTION -->

A\* Algorithm Flutter Package
==========================

The `a_star_algorithm` package is a pathfinding library for Flutter that uses the A\* algorithm to find the shortest path between two points. It is designed to be efficient and easy to use, making it a great choice for a wide range of applications, from games to navigation systems.

When to Use This Package
------------------------

This package is perfect for any application that requires pathfinding, such as:

*   Games: Use the A\* algorithm to find the shortest path between characters, obstacles, and goals.
*   Navigation Systems: Use the A\* algorithm to find the shortest path between locations, taking into account obstacles and traffic patterns.
*   Logistics: Use the A\* algorithm to optimize routes for delivery trucks, taxis, and other vehicles.

Features
--------

*   Efficient A\* algorithm implementation
*   Supports both 2D and 3D pathfinding
*   Easy to use API
*   Highly customizable

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
---------------

To use the `a_star_algorithm` package, follow these steps:

### Step 1: Add the Package to Your Project

Add the following line to your `pubspec.yaml` file:

```yml
dependencies:
  a_star_algorithm: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:a_star_algorithm/a_star_algorithm.dart';
```

### Step 3: Create a Grid

Create a grid to represent the environment. The grid can be a 2D or 3D array of integers, where each integer represents the cost of moving to that cell.

```dart
List<List<int>> grid = [
  [0, 0, 0, 0, 0],
  [0, 1, 1, 0, 0],
  [0, 0, 0, 0, 0],
  [0, 1, 0, 0, 0],
  [0, 0, 0, 0, 0],
];
```

### Step 4: Define the Heuristic Function

Define a heuristic function to estimate the cost of moving from one cell to another. The heuristic function should be admissible (never overestimate the cost) and consistent (the estimated cost to reach the goal is always less than or equal to the true cost).

```dart
int heuristic(int x, int y, int goalX, int goalY) {
  return (x - goalX).abs() + (y - goalY).abs();
}
```

### Step 5: Find the Shortest Path

Use the `AStar` class to find the shortest path between two points.

```dart
AStar astar = AStar(grid, heuristic);
List<Position> path = astar.findPath(0, 0, 4, 4);
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:a_star_algorithm/a_star_algorithm.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'A\* Algorithm Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  List<List<int>> grid = [
    [0, 0, 0, 0, 0],
    [0, 1, 1, 0, 0],
    [0, 0, 0, 0, 0],
    [0, 1, 0, 0, 0],
    [0, 0, 0, 0, 0],
  ];

  int heuristic(int x, int y, int goalX, int goalY) {
    return (x - goalX).abs() + (y - goalY).abs();
  }

  void findPath() {
    AStar astar = AStar(grid, heuristic);
    List<Position> path = astar.findPath(0, 0, 4, 4);
    print(path);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('A\* Algorithm Demo'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: findPath,
          child: Text('Find Path'),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user clicks the "Find Path" button.
// 2. The findPath function is called, which creates an instance of the AStar class.
// 3. The AStar class uses the grid and heuristic function to find the shortest path between the start and goal positions.
// 4. The shortest path is printed to the console.
// 5. The user can view the shortest path in the console.
```

<-- END_MAIN -->
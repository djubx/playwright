```markdown
<!-- START_DESCRIPTION -->
# Overview of the `dart_mappable_builder` Package

The `dart_mappable_builder` package is a powerful tool designed to simplify the process of mapping Dart objects to and from JSON. This package is particularly useful for Flutter developers who frequently work with APIs and need to serialize and deserialize data efficiently. By automating the mapping process, developers can save time and reduce the likelihood of errors in their code.

## When to Use `dart_mappable_builder`

- **API Integration**: When your Flutter application interacts with RESTful APIs, this package can help streamline the conversion of JSON data to Dart objects and vice versa.
- **Data Persistence**: If your app needs to store data locally (e.g., using shared preferences or SQLite), this package can facilitate the conversion of data models to a storable format.
- **Complex Data Structures**: For applications that involve nested or complex data structures, `dart_mappable_builder` provides a robust solution for managing these mappings.

## Key Features

- **Automatic Code Generation**: The package uses code generation to create mapping functions, reducing boilerplate code.
- **Support for Nested Objects**: It can handle complex data structures with nested objects seamlessly.
- **Customizable Mappings**: Developers can define custom mappings for specific use cases, allowing for flexibility in how data is handled.
- **Type Safety**: The package ensures type safety during the mapping process, minimizing runtime errors.

Overall, `dart_mappable_builder` is an essential package for Flutter developers looking to enhance their data handling capabilities with minimal effort.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Setting Up and Using `dart_mappable_builder`

## Installation

To get started with `dart_mappable_builder`, you need to add it to your `pubspec.yaml` file. Hereâ€™s how to do it:

```yaml
dependencies:
  dart_mappable: ^1.0.0

dev_dependencies:
  build_runner: ^2.0.0
  dart_mappable_builder: ^1.0.0
```

After adding the dependencies, run the following command in your terminal to install them:

```bash
flutter pub get
```

## Configuration

### Android

For Android, ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file:

```gradle
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

### iOS

For iOS, make sure your deployment target is set to at least 10.0 in your `ios/Podfile`:

```ruby
platform :ios, '10.0'
```

## Usage

1. **Create Your Data Model**: Define a Dart class that represents the data structure you want to map.

```dart
import 'package:dart_mappable/dart_mappable.dart';

part 'real_flutter.mapper.dart';

@MappableClass()
class RealFlutter {
  final String name;
  final int age;

  RealFlutter({required this.name, required this.age});
}
```

2. **Generate Mappings**: Run the build runner to generate the necessary mapping code.

```bash
flutter pub run build_runner build
```

3. **Using the Mappings**: You can now easily convert between JSON and your Dart objects.

```dart
void main() {
  // Example JSON data
  final jsonData = '{"name": "John Doe", "age": 30}';

  // Deserialize JSON to RealFlutter object
  final realFlutter = RealFlutter.fromJson(json.decode(jsonData));

  // Serialize RealFlutter object to JSON
  final jsonOutput = realFlutter.toJson();
}
```

With these steps, you can effectively use the `dart_mappable_builder` package in your Flutter projects.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using `dart_mappable_builder`

```dart
import 'dart:convert'; // Importing the dart:convert library for JSON encoding/decoding
import 'package:flutter/material.dart'; // Importing Flutter material package
import 'package:dart_mappable/dart_mappable.dart'; // Importing the dart_mappable package

part 'real_flutter.mapper.dart'; // Part directive for generated code

@MappableClass() // Annotation to indicate that this class is mappable
class RealFlutter {
  final String name; // Property to hold the name
  final int age; // Property to hold the age

  RealFlutter({required this.name, required this.age}); // Constructor
}

void main() {
  runApp(MyApp()); // Running the Flutter application
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Dart Mappable Example', // Title of the app
      home: Scaffold(
        appBar: AppBar(
          title: Text('Dart Mappable Example'), // App bar title
        ),
        body: Center(
          child: FutureBuilder<RealFlutter>(
            future: fetchRealFlutterData(), // Fetching data asynchronously
            builder: (context, snapshot) {
              if (snapshot.connectionState == ConnectionState.waiting) {
                return CircularProgressIndicator(); // Show loading indicator
              } else if (snapshot.hasError) {
                return Text('Error: ${snapshot.error}'); // Show error message
              } else {
                final realFlutter = snapshot.data!; // Getting the data
                return Text('Name: ${realFlutter.name}, Age: ${realFlutter.age}'); // Displaying the data
              }
            },
          ),
        ),
      ),
    );
  }

  // Function to simulate fetching data from an API
  Future<RealFlutter> fetchRealFlutterData() async {
    // Simulated JSON response from an API
    final jsonData = '{"name": "John Doe", "age": 30}';
    await Future.delayed(Duration(seconds: 2)); // Simulating network delay
    return RealFlutter.fromJson(json.decode(jsonData)); // Deserializing JSON to RealFlutter object
  }
}

// The application flow is as follows:
// 1. The main function runs the MyApp widget.
// 2. MyApp builds a MaterialApp with a Scaffold containing an AppBar and a Center widget.
// 3. Inside the Center widget, a FutureBuilder is used to fetch data asynchronously.
// 4. While waiting for the data, a CircularProgressIndicator is displayed.
// 5. If an error occurs, it shows the error message.
// 6. Once the data is fetched, it displays the name and age of the RealFlutter object.
```
<!-- END_MAIN -->
```

This structured blog post provides a comprehensive overview of the `dart_mappable_builder` package, guiding developers through its features, setup, and practical usage with a complete example.
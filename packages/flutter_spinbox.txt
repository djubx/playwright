```markdown
<-- START_DESCRIPTION -->

# Flutter SpinBox Package Overview

The `flutter_spinbox` package is a versatile and user-friendly widget for Flutter applications that provides a spin box, or a numeric stepper, allowing users to increment or decrement a value using arrow buttons or by entering a value directly. This package is particularly useful in scenarios where precise numeric input is required, such as setting quantities, adjusting settings, or selecting a specific number within a defined range.

## Features

- **Customizable Range**: Define minimum and maximum values to restrict user input.
- **Step Size**: Set the increment or decrement step size for fine-tuned control.
- **Keyboard Input**: Users can also type in a value directly, offering flexibility.
- **Decimal Support**: Handle both integer and decimal values seamlessly.
- **Theming**: Customize the appearance to match your application's design.

### When to Use

- **E-commerce Applications**: For selecting product quantities.
- **Settings Pages**: Adjusting settings like volume, brightness, or other numeric configurations.
- **Forms**: Collecting numeric data with constraints.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the Flutter SpinBox Package

In this tutorial, we'll walk through the process of setting up the `flutter_spinbox` package in a Flutter project and demonstrate how to use it effectively.

## Setup

1. **Add Dependency**

   First, add the `flutter_spinbox` package to your `pubspec.yaml` file:

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     flutter_spinbox: ^0.5.0
   ```

2. **Install Packages**

   Run the following command to install the new package:

   ```bash
   flutter pub get
   ```

3. **Import the Package**

   Import the package in your Dart file where you plan to use the SpinBox:

   ```dart
   import 'package:flutter_spinbox/flutter_spinbox.dart';
   ```

## Platform-Specific Details

### Android

No additional configuration is required for Android. Ensure your `minSdkVersion` in `android/app/build.gradle` is set to at least 16 to support all Flutter features.

### iOS

Ensure your iOS deployment target is set to at least 9.0 in your `ios/Podfile`:

```ruby
platform :ios, '9.0'
```

## Using the SpinBox

Here's a simple example of how to use the `SpinBox` widget in your Flutter application:

```dart
SpinBox(
  min: 0,
  max: 100,
  value: 50,
  onChanged: (value) => print('Current value: $value'),
)
```

### Customization

You can customize the appearance and behavior of the SpinBox:

- **Step Size**: Control the increment/decrement step.
- **Decoration**: Customize the input field's decoration.
- **Text Style**: Adjust the text style for better UI integration.

<-- END_TUTORIAL -->

<-- START_MAIN -->

# Complete Example of Using Flutter SpinBox

Below is a complete example of a Flutter application using the `flutter_spinbox` package. This example demonstrates key features such as setting a range, customizing the step size, and handling value changes.

```dart
import 'package:flutter/material.dart';
import 'package:flutter_spinbox/flutter_spinbox.dart';

void main() => runApp(RealFlutter());

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter SpinBox Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: SpinBoxExample(),
    );
  }
}

class SpinBoxExample extends StatefulWidget {
  @override
  _SpinBoxExampleState createState() => _SpinBoxExampleState();
}

class _SpinBoxExampleState extends State<SpinBoxExample> {
  double _currentValue = 10.0; // Initial value for the SpinBox

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('SpinBox Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Select a value:',
              style: TextStyle(fontSize: 20),
            ),
            SizedBox(height: 20),
            SpinBox(
              min: 0,
              max: 100,
              value: _currentValue,
              step: 1, // Step size for increment/decrement
              onChanged: (value) {
                setState(() {
                  _currentValue = value; // Update the current value
                });
              },
            ),
            SizedBox(height: 20),
            Text(
              'Current Value: $_currentValue',
              style: TextStyle(fontSize: 24),
            ),
          ],
        ),
      ),
    );
  }
}
```

// The application starts with the `main` function, which calls `runApp` with `RealFlutter` as the root widget.
// `RealFlutter` is a stateless widget that sets up the MaterialApp with a title and theme, and specifies `SpinBoxExample` as the home widget.
// `SpinBoxExample` is a stateful widget that manages the state of the SpinBox value.
// The `_SpinBoxExampleState` class contains a `_currentValue` variable to track the SpinBox's current value.
// The `build` method of `_SpinBoxExampleState` returns a Scaffold with an AppBar and a centered Column.
// The Column contains a Text widget for instructions, a SpinBox widget for numeric input, and another Text widget to display the current value.
// The SpinBox is configured with a range from 0 to 100, an initial value, and a step size of 1.
// The `onChanged` callback updates `_currentValue` whenever the SpinBox value changes, triggering a UI update with `setState`.

<-- END_MAIN -->
```
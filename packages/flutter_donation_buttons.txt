<-- START_DESCRIPTION -->
# Flutter Donation Buttons Package
=====================================

The `flutter_donation_buttons` package provides a simple and convenient way to integrate donation buttons into your Flutter application. This package supports various payment gateways, including PayPal, Stripe, and Google Pay.

## When to Use This Package
---------------------------

You can use this package in any Flutter application where you want to accept donations from users. This package is particularly useful for non-profit organizations, charities, and independent developers who rely on donations to support their work.

## Features
------------

*   Supports multiple payment gateways (PayPal, Stripe, Google Pay)
*   Customizable button styles and layouts
*   Easy integration with existing Flutter applications
*   Secure payment processing

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Package
=============================================

## Step 1: Add the Package to Your Project
-----------------------------------------

To use the `flutter_donation_buttons` package, you need to add it to your project's `pubspec.yaml` file. Open the file and add the following line under the `dependencies` section:

```yml
dependencies:
  flutter:
    sdk: flutter
  flutter_donation_buttons: ^1.0.0
```

Then, run `flutter pub get` in your terminal to install the package.

## Step 2: Import the Package
---------------------------

In your Dart file, import the package using the following line:

```dart
import 'package:flutter_donation_buttons/flutter_donation_buttons.dart';
```

## Step 3: Set Up Payment Gateways
---------------------------------

To use the package, you need to set up payment gateways. The package supports PayPal, Stripe, and Google Pay.

### PayPal

To use PayPal, you need to create a PayPal account and obtain a client ID and secret. Then, you can use the following code to set up PayPal:

```dart
PayPalPaymentGateway paypalGateway = PayPalPaymentGateway(
  clientId: 'YOUR_CLIENT_ID',
  secret: 'YOUR_SECRET',
);
```

### Stripe

To use Stripe, you need to create a Stripe account and obtain a publishable key and secret. Then, you can use the following code to set up Stripe:

```dart
StripePaymentGateway stripeGateway = StripePaymentGateway(
  publishableKey: 'YOUR_PUBLISHABLE_KEY',
  secret: 'YOUR_SECRET',
);
```

### Google Pay

To use Google Pay, you need to create a Google Pay account and obtain a merchant ID. Then, you can use the following code to set up Google Pay:

```dart
GooglePayPaymentGateway googlePayGateway = GooglePayPaymentGateway(
  merchantId: 'YOUR_MERCHANT_ID',
);
```

## Step 4: Create a Donation Button
----------------------------------

To create a donation button, you can use the following code:

```dart
DonationButton(
  paymentGateway: paypalGateway,
  amount: 10.0,
  currency: 'USD',
  onPressed: () {
    // Handle the donation
  },
)
```

<-- END_TUTORIAL -->

<-- START_MAIN -->
```dart
import 'package:flutter/material.dart';
import 'package:flutter_donation_buttons/flutter_donation_buttons.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Donation Buttons Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  // Create a PayPal payment gateway
  PayPalPaymentGateway paypalGateway = PayPalPaymentGateway(
    clientId: 'YOUR_CLIENT_ID',
    secret: 'YOUR_SECRET',
  );

  // Create a Stripe payment gateway
  StripePaymentGateway stripeGateway = StripePaymentGateway(
    publishableKey: 'YOUR_PUBLISHABLE_KEY',
    secret: 'YOUR_SECRET',
  );

  // Create a Google Pay payment gateway
  GooglePayPaymentGateway googlePayGateway = GooglePayPaymentGateway(
    merchantId: 'YOUR_MERCHANT_ID',
  );

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Donation Buttons Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            // Create a PayPal donation button
            DonationButton(
              paymentGateway: paypalGateway,
              amount: 10.0,
              currency: 'USD',
              onPressed: () {
                // Handle the donation
              },
            ),

            // Create a Stripe donation button
            DonationButton(
              paymentGateway: stripeGateway,
              amount: 10.0,
              currency: 'USD',
              onPressed: () {
                // Handle the donation
              },
            ),

            // Create a Google Pay donation button
            DonationButton(
              paymentGateway: googlePayGateway,
              amount: 10.0,
              currency: 'USD',
              onPressed: () {
                // Handle the donation
              },
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and is presented with a screen containing three donation buttons.
// 2. The user selects a donation button and is taken to a payment gateway to complete the donation.
// 3. Once the donation is complete, the user is returned to the app and a success message is displayed.
// 4. The app then sends a request to the server to update the user's donation status.
// 5. The server updates the user's donation status and sends a response back to the app.
// 6. The app receives the response and updates the user's donation status accordingly.
```
<-- END_MAIN -->
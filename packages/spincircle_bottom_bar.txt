<-- START_DESCRIPTION -->

# spincircle_bottom_bar Flutter Package
The spincircle_bottom_bar package is a customizable bottom navigation bar for Flutter that allows you to add a spinning circle effect to the active item. It's a great way to add some visual flair to your app's navigation.

## When to Use
You can use this package when you want to create a bottom navigation bar with a unique and eye-catching effect. It's perfect for apps that want to stand out from the crowd and provide a memorable user experience.

## Features
* Customizable colors and styles for the navigation bar and spinning circle
* Support for multiple items and callbacks for each item
* Compatible with both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
To use the spincircle_bottom_bar package, you'll need to add it to your pubspec.yaml file:

```yml
dependencies:
  flutter:
    sdk: flutter
  spincircle_bottom_bar: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Basic Usage
To use the package, you'll need to import it and create a `SpinCircleBottomBar` widget:

```dart
import 'package:flutter/material.dart';
import 'package:spincircle_bottom_bar/spincircle_bottom_bar.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  int _currentIndex = 0;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Center(
        child: Text('Hello, World!'),
      ),
      bottomNavigationBar: SpinCircleBottomBar(
        items: [
          SpinCircleBottomBarItem(
            icon: Icons.home,
            onPressed: () {
              setState(() {
                _currentIndex = 0;
              });
            },
          ),
          SpinCircleBottomBarItem(
            icon: Icons.settings,
            onPressed: () {
              setState(() {
                _currentIndex = 1;
              });
            },
          ),
        ],
        currentIndex: _currentIndex,
      ),
    );
  }
}
```

## Platform-Specific Details
The package should work on both Android and iOS platforms without any issues. However, if you encounter any problems, you can try adjusting the `curve` property of the `SpinCircleBottomBar` widget to get the desired effect.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:spincircle_bottom_bar/spincircle_bottom_bar.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Spin Circle Bottom Bar Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  int _currentIndex = 0;

  // Create a list of items for the bottom navigation bar
  List<SpinCircleBottomBarItem> _items = [
    SpinCircleBottomBarItem(
      icon: Icons.home,
      onPressed: () {
        // Handle the press event for the first item
        print('First item pressed');
      },
    ),
    SpinCircleBottomBarItem(
      icon: Icons.settings,
      onPressed: () {
        // Handle the press event for the second item
        print('Second item pressed');
      },
    ),
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      // Create a basic app layout with a centered text
      body: Center(
        child: Text('Hello, World!'),
      ),
      // Create the SpinCircleBottomBar widget
      bottomNavigationBar: SpinCircleBottomBar(
        // Pass the list of items to the widget
        items: _items,
        // Set the current index of the widget
        currentIndex: _currentIndex,
        // Handle the onIndexChanged event
        onIndexChanged: (index) {
          // Update the current index
          setState(() {
            _currentIndex = index;
          });
        },
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user launches the app and is presented with a basic layout and a bottom navigation bar.
// 2. The user can press on either of the two items in the bottom navigation bar.
// 3. When an item is pressed, the onIndexChanged event is triggered and the current index is updated.
// 4. The SpinCircleBottomBar widget is updated to reflect the new current index.
// 5. The user can continue to press on items in the bottom navigation bar to change the current index.
```

// The code creates a basic Flutter app with a SpinCircleBottomBar widget.
// The widget is used to create a bottom navigation bar with two items.
// The user can press on either item to trigger the onIndexChanged event and update the current index.
// The SpinCircleBottomBar widget is updated to reflect the new current index.

<-- END_MAIN -->
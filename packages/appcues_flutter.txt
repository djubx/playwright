```markdown
<!-- START_DESCRIPTION -->
# Overview of the appcues_flutter Package

The `appcues_flutter` package is a powerful tool designed to help Flutter developers integrate Appcues into their applications. Appcues is a user onboarding and engagement platform that allows developers to create in-app experiences such as tutorials, tooltips, and modals without needing extensive coding. This package simplifies the process of implementing these features in Flutter apps, making it easier to enhance user experience and retention.

## When to Use appcues_flutter

- **User Onboarding**: When you want to guide new users through your app's features.
- **Feature Announcements**: To inform users about new functionalities or updates.
- **User Engagement**: To keep users engaged with interactive modals and tooltips.

## Key Features

- **Easy Integration**: Simple setup process to connect your Flutter app with Appcues.
- **Customizable Experiences**: Create tailored onboarding flows and user engagement strategies.
- **Analytics**: Track user interactions and engagement metrics to optimize experiences.
- **Cross-Platform Support**: Works seamlessly on both iOS and Android platforms.

By leveraging the `appcues_flutter` package, developers can significantly improve the onboarding process and overall user experience in their Flutter applications.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Setting Up appcues_flutter

To get started with the `appcues_flutter` package, follow these steps:

## Step 1: Add Dependency

Add the `appcues_flutter` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  appcues_flutter: ^1.0.0  # Check for the latest version on pub.dev
```

## Step 2: Platform-Specific Configuration

### Android Configuration

1. Open your `android/app/build.gradle` file.
2. Ensure that you have the following permissions in your `AndroidManifest.xml`:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
```

### iOS Configuration

1. Open your `ios/Runner/Info.plist` file.
2. Add the following key to allow Appcues to function properly:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

## Step 3: Initialize Appcues

In your main application file, initialize Appcues with your Appcues account ID:

```dart
import 'package:flutter/material.dart';
import 'package:appcues_flutter/appcues_flutter.dart';

void main() {
  WidgetsFlutterBinding.ensureInitialized();
  Appcues.initialize('YOUR_APP_ID'); // Replace with your Appcues account ID
  runApp(RealFlutter());
}
```

## Step 4: Using Appcues in Your App

You can now use Appcues to show onboarding flows or modals. For example, to show a specific experience:

```dart
Appcues.showExperience('YOUR_EXPERIENCE_ID'); // Replace with your experience ID
```

This will trigger the onboarding experience you have set up in your Appcues dashboard.

With these steps, you are now ready to integrate Appcues into your Flutter application effectively!
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of appcues_flutter

```dart
import 'package:flutter/material.dart';
import 'package:appcues_flutter/appcues_flutter.dart';

void main() {
  // Ensure Flutter bindings are initialized
  WidgetsFlutterBinding.ensureInitialized();
  
  // Initialize Appcues with your App ID
  Appcues.initialize('YOUR_APP_ID'); // Replace with your Appcues account ID
  
  // Run the main application
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Appcues Flutter Example',
      home: HomeScreen(),
    );
  }
}

class HomeScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Appcues Flutter Example'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Show the onboarding experience when the button is pressed
            Appcues.showExperience('YOUR_EXPERIENCE_ID'); // Replace with your experience ID
          },
          child: Text('Show Onboarding'),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function initializes the Flutter app and Appcues with the provided App ID.
// 2. The RealFlutter class sets up the MaterialApp with a title and the HomeScreen as the home widget.
// 3. The HomeScreen widget contains a button that, when pressed, triggers the Appcues onboarding experience.
// 4. The Appcues.showExperience method is called with the specific experience ID to display the onboarding flow.
```
<!-- END_MAIN -->
```

### Summary of Application Flow
The application starts by initializing the Appcues SDK with your App ID. The `RealFlutter` class sets up a simple Flutter app with a home screen containing a button. When the button is pressed, it calls the `Appcues.showExperience` method with the specified experience ID, triggering the onboarding flow defined in your Appcues dashboard. This setup allows for a seamless integration of user onboarding experiences within your Flutter application.
<-- START_DESCRIPTION -->

**Notify In-App Flutter Package: A Comprehensive Overview**
===========================================================

The `notify_inapp` Flutter package is a powerful tool for displaying in-app notifications to users. It provides a simple and customizable way to show notifications within your app, allowing you to engage with your users more effectively.

**When to Use This Package**
---------------------------

You can use this package in various scenarios, such as:

* Displaying welcome messages or tutorials to new users
* Notifying users about new features or updates
* Showing reminders or alerts for specific events
* Providing feedback or confirmation messages for user actions

**Key Features**
----------------

* Customizable notification layout and design
* Support for multiple notification types (e.g., success, error, warning)
* Ability to display notifications at the top or bottom of the screen
* Optional callback functions for notification tap and dismiss events

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setting Up and Using the Notify In-App Package**
=====================================================

### Step 1: Add the Package to Your Project

Add the following dependency to your `pubspec.yaml` file:
```yml
dependencies:
  notify_inapp: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:notify_inapp/notify_inapp.dart';
```
### Step 3: Initialize the Package

Initialize the package in your `main` function:
```dart
void main() {
  NotifyInApp.init();
  runApp(MyApp());
}
```
### Step 4: Display a Notification

Use the `NotifyInApp.show` method to display a notification:
```dart
NotifyInApp.show(
  title: 'Hello, World!',
  message: 'This is a sample notification.',
  type: NotifyType.success,
);
```
### Platform-Specific Details

* **Android:** Make sure to add the following code to your `AndroidManifest.xml` file:
```xml
<application
  ...
  android:usesCleartextTraffic="true"
  ...
>
```
* **iOS:** No additional configuration is required.

### Optimizations

* You can customize the notification layout and design by using the `NotifyInApp.custom` method.
* You can also use the `NotifyInApp.dismiss` method to dismiss a notification programmatically.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:notify_inapp/notify_inapp.dart';

void main() {
  NotifyInApp.init();
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Notify In-App Demo',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Notify In-App Demo'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              ElevatedButton(
                onPressed: () {
                  // Display a success notification
                  NotifyInApp.show(
                    title: 'Success!',
                    message: 'This is a success notification.',
                    type: NotifyType.success,
                  );
                },
                child: Text('Show Success Notification'),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  // Display an error notification
                  NotifyInApp.show(
                    title: 'Error!',
                    message: 'This is an error notification.',
                    type: NotifyType.error,
                  );
                },
                child: Text('Show Error Notification'),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  // Display a warning notification
                  NotifyInApp.show(
                    title: 'Warning!',
                    message: 'This is a warning notification.',
                    type: NotifyType.warning,
                  );
                },
                child: Text('Show Warning Notification'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user clicks on one of the buttons to display a notification.
// 2. The NotifyInApp.show method is called with the notification title, message, and type.
// 3. The notification is displayed at the top of the screen.
// 4. The user can tap on the notification to dismiss it.
// 5. The NotifyInApp.dismiss method can be used to dismiss the notification programmatically.
```

<-- END_MAIN -->
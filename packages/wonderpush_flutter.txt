<-- START_DESCRIPTION -->

WonderPush Flutter Package: A Comprehensive Overview
=====================================================

The `wonderpush_flutter` package is a powerful tool for integrating WonderPush, a popular push notification service, into Flutter applications. With this package, developers can easily send targeted and personalized push notifications to their users, enhancing the overall user experience.

When to Use This Package
------------------------

The `wonderpush_flutter` package is ideal for applications that require push notifications, such as:

* News and media apps
* E-commerce apps
* Social media apps
* Gaming apps

Features
--------

The `wonderpush_flutter` package offers a range of features, including:

* Easy integration with WonderPush
* Support for targeted and personalized push notifications
* Customizable notification templates
* Real-time analytics and tracking

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setting Up the WonderPush Flutter Package
==========================================

### Step 1: Add the Package to Your Flutter Project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  wonderpush_flutter: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Configure WonderPush

Create a WonderPush account and obtain your API key. Then, add the following code to your `main.dart` file:
```dart
import 'package:wonderpush_flutter/wonderpush_flutter.dart';

void main() {
  WonderPush.initialize(
    apiKey: 'YOUR_API_KEY',
  );
  runApp(MyApp());
}
```
### Step 3: Request Permission for Push Notifications

Add the following code to your `main.dart` file:
```dart
import 'package:wonderpush_flutter/wonderpush_flutter.dart';

void main() {
  WonderPush.requestPermission();
  runApp(MyApp());
}
```
### Platform-Specific Configurations

#### Android

Add the following code to your `AndroidManifest.xml` file:
```xml
<application>
  <meta-data
    android:name="com.wonderpush.sdk.apiKey"
    android:value="YOUR_API_KEY" />
</application>
```
#### iOS

Add the following code to your `Info.plist` file:
```xml
<key>WonderPushApiKey</key>
<string>YOUR_API_KEY</string>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:wonderpush_flutter/wonderpush_flutter.dart';

void main() {
  WonderPush.initialize(
    apiKey: 'YOUR_API_KEY',
  );
  WonderPush.requestPermission();
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  void initState() {
    super.initState();
    WonderPush.subscribeToNotifications(
      onNotificationReceived: (notification) {
        print('Notification received: ${notification.title}');
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('RealFlutter'),
        ),
        body: Center(
          child: ElevatedButton(
            child: Text('Send Notification'),
            onPressed: () {
              WonderPush.sendNotification(
                title: 'Hello, World!',
                message: 'This is a test notification.',
              );
            },
          ),
        ),
      ),
    );
  }
}

// Application flow:
// 1. The app initializes WonderPush with the API key.
// 2. The app requests permission for push notifications.
// 3. The user grants permission for push notifications.
// 4. The app subscribes to notifications and sets up a callback for when a notification is received.
// 5. The user presses the "Send Notification" button.
// 6. The app sends a notification to the user's device using WonderPush.
// 7. The notification is received by the app and the callback is triggered.
// 8. The app prints the notification title to the console.

// Summary:
// This code sets up a basic Flutter app that uses WonderPush for push notifications.
// The app initializes WonderPush, requests permission for push notifications, and subscribes to notifications.
// When a notification is received, the app prints the notification title to the console.
// The app also includes a button to send a test notification to the user's device.
```

<-- END_MAIN -->
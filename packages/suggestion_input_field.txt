<-- START_DESCRIPTION -->

# Suggestion Input Field Flutter Package
=====================================

The `suggestion_input_field` Flutter package provides a customizable input field that displays a list of suggestions as the user types. It's a convenient way to provide users with a list of possible options, making it easier for them to select the desired input.

### When to Use

This package is useful in scenarios where the user needs to select from a large list of options, such as:

* Autocomplete search bars
* Email address input fields
* Phone number input fields
* Location search bars

### Features

* Customizable input field and suggestion list
* Supports multiple suggestion sources (e.g., API calls, local data)
* Handles keyboard navigation and selection
* Works on both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `suggestion_input_field` package, follow these steps:

### Step 1: Add the Package to Your Project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  suggestion_input_field: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:suggestion_input_field/suggestion_input_field.dart';
```
### Step 3: Create a Suggestion Input Field

Create a `SuggestionInputField` widget and pass in the required parameters:
```dart
SuggestionInputField(
  suggestions: [], // List of suggestions
  onChanged: (text) {}, // Callback when the input field changes
  onSuggestionSelected: (suggestion) {}, // Callback when a suggestion is selected
)
```
### Platform-Specific Details

* On Android, the `SuggestionInputField` widget uses a `ListView` to display the suggestions. You can customize the appearance of the list by passing in a `ListView.builder` to the `suggestionsBuilder` property.
* On iOS, the `SuggestionInputField` widget uses a `UITableView` to display the suggestions. You can customize the appearance of the table by passing in a `UITableViewDataSource` to the `suggestionsDataSource` property.

### Required Configurations and Optimizations

* Make sure to handle the case when the user types a query that returns no suggestions. You can do this by passing in a `noSuggestionsMessage` property to the `SuggestionInputField` widget.
* To improve performance, consider using a caching mechanism to store the suggestions. You can use a package like `flutter_cache_manager` to cache the suggestions.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:suggestion_input_field/suggestion_input_field.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Suggestion Input Field Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final List<String> _suggestions = [
    'Apple',
    'Banana',
    'Cherry',
    'Date',
    'Elderberry',
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Suggestion Input Field Demo'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: SuggestionInputField(
          suggestions: _suggestions,
          onChanged: (text) {
            print('Input field changed: $text');
          },
          onSuggestionSelected: (suggestion) {
            print('Suggestion selected: $suggestion');
          },
          noSuggestionsMessage: 'No suggestions found',
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user types a query into the input field.
// 2. The `SuggestionInputField` widget displays a list of suggestions based on the query.
// 3. The user selects a suggestion from the list.
// 4. The `onSuggestionSelected` callback is called with the selected suggestion.
// 5. The `onChanged` callback is called with the new input field value.
```

// Summary:
// The code creates a `SuggestionInputField` widget with a list of suggestions.
// When the user types a query, the widget displays a list of suggestions.
// When the user selects a suggestion, the `onSuggestionSelected` callback is called.
// The `onChanged` callback is called whenever the input field value changes.

<-- END_MAIN -->
Here's a detailed technical blog on the "moyasar" Flutter package, structured as requested.

<!-- START_DESCRIPTION -->
# Moyasar Flutter Package

The **Moyasar** Flutter package is a powerful tool designed to facilitate online payment processing in Flutter applications. It provides a seamless integration with the Moyasar payment gateway, allowing developers to accept payments from various methods, including credit cards, Apple Pay, and more. This package is particularly useful for e-commerce applications, subscription services, and any app that requires payment processing.

## When to Use Moyasar

You should consider using the Moyasar Flutter package when:
- You are developing an e-commerce application that requires payment processing.
- You want to provide users with multiple payment options.
- You need a reliable and secure payment gateway that supports various payment methods.

## Features

- **Multiple Payment Methods**: Supports credit cards, Apple Pay, and other local payment methods.
- **Easy Integration**: Simple setup process with clear documentation.
- **Secure Transactions**: Ensures that all transactions are secure and compliant with industry standards.
- **Customizable UI**: Allows developers to customize the payment interface to match their app's design.

By leveraging the Moyasar Flutter package, developers can enhance their applications with robust payment processing capabilities, improving user experience and increasing conversion rates.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up the Moyasar Flutter Package

In this tutorial, we will walk through the setup process for the Moyasar Flutter package and demonstrate how to use it in your Flutter application.

## Step 1: Add Dependency

To get started, add the Moyasar package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  moyasar: ^latest_version
```

Make sure to replace `latest_version` with the most recent version of the package.

## Step 2: Configure for Android

For Android, you need to ensure that your app has the necessary permissions and configurations:

1. Open `AndroidManifest.xml` located in `android/app/src/main/AndroidManifest.xml`.
2. Add the following permissions inside the `<manifest>` tag:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
```

3. Ensure that your `minSdkVersion` is set to at least 21 in `android/app/build.gradle`:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
        ...
    }
}
```

## Step 3: Configure for iOS

For iOS, you need to make some additional configurations:

1. Open `Info.plist` located in `ios/Runner/Info.plist`.
2. Add the following entries to allow network access:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

3. Ensure that your deployment target is set to at least 11.0 in `ios/Podfile`:

```ruby
platform :ios, '11.0'
```

## Step 4: Initialize the Package

In your main Dart file, import the package and initialize it:

```dart
import 'package:moyasar/moyasar.dart';

void main() {
  runApp(MyApp());
}
```

## Step 5: Using the Package

You can now use the Moyasar package to initiate a payment. Hereâ€™s a simple example of how to do this:

```dart
void initiatePayment() async {
  final payment = await Moyasar.startPayment(
    amount: 1000, // Amount in the smallest currency unit (e.g., cents)
    currency: 'SAR', // Currency code
    description: 'Payment for Order #1234',
    onSuccess: (response) {
      // Handle successful payment
      print('Payment successful: $response');
    },
    onFailure: (error) {
      // Handle payment failure
      print('Payment failed: $error');
    },
  );
}
```

This function initiates a payment and handles both success and failure scenarios.

With these steps, you should be able to integrate the Moyasar Flutter package into your application successfully.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Moyasar Flutter Package

```dart
import 'package:flutter/material.dart';
import 'package:moyasar/moyasar.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Moyasar Payment Example',
      home: PaymentScreen(),
    );
  }
}

class PaymentScreen extends StatelessWidget {
  // Function to initiate payment
  void initiatePayment(BuildContext context) async {
    // Start the payment process
    final payment = await Moyasar.startPayment(
      amount: 1000, // Amount in the smallest currency unit (e.g., cents)
      currency: 'SAR', // Currency code
      description: 'Payment for Order #1234',
      onSuccess: (response) {
        // Handle successful payment
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Payment successful: $response')),
        );
      },
      onFailure: (error) {
        // Handle payment failure
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('Payment failed: $error')),
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Moyasar Payment Example'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () => initiatePayment(context), // Trigger payment on button press
          child: Text('Pay Now'),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the MyApp class, which sets up the MaterialApp.
// 2. The home screen is set to PaymentScreen, where the payment button is displayed.
// 3. When the user presses the "Pay Now" button, the initiatePayment function is called.
// 4. The initiatePayment function calls the Moyasar.startPayment method with the required parameters.
// 5. If the payment is successful, a success message is shown using a SnackBar.
// 6. If the payment fails, an error message is displayed using a SnackBar.
```

<!-- END_MAIN -->

In this blog, we covered the **Moyasar** Flutter package, detailing its features, setup process, and providing a complete example of how to implement it in a Flutter application. By following the steps outlined, developers can easily integrate payment processing into their apps, enhancing user experience and functionality.
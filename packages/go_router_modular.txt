<-- START_DESCRIPTION -->

# go_router_modular Flutter Package
=====================================

The `go_router_modular` Flutter package is a powerful routing solution that allows you to manage your app's navigation in a modular and scalable way. It provides a simple and intuitive API for defining routes, handling navigation, and integrating with your app's architecture.

## When to Use
--------------

You should use `go_router_modular` when:

* You need to manage complex navigation flows in your app.
* You want to decouple your app's navigation from its business logic.
* You need to support multiple platforms (Android, iOS, Web) with a single navigation solution.

## Features
------------

* Modular routing architecture
* Simple and intuitive API
* Support for multiple platforms (Android, iOS, Web)
* Integration with popular state management libraries (e.g. Provider, Riverpod)

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up go_router_modular
=============================

To use `go_router_modular` in your Flutter app, follow these steps:

### 1. Add the Package to Your Pubspec

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  go_router_modular: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### 2. Create a Router Configuration

Create a new file called `router_config.dart` with the following content:
```dart
import 'package:go_router_modular/go_router_modular.dart';

final routerConfig = GoRouterConfig(
  routes: [
    GoRoute(
      path: '/',
      builder: (context, state) => RealFlutterHomePage(),
    ),
    GoRoute(
      path: '/settings',
      builder: (context, state) => RealFlutterSettingsPage(),
    ),
  ],
);
```
This configuration defines two routes: one for the home page and one for the settings page.

### 3. Create a Router Widget

Create a new file called `router_widget.dart` with the following content:
```dart
import 'package:flutter/material.dart';
import 'package:go_router_modular/go_router_modular.dart';
import 'router_config.dart';

class RealFlutterRouterWidget extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return GoRouter(
      config: routerConfig,
      child: MaterialApp(
        title: 'RealFlutter App',
        home: RealFlutterHomePage(),
      ),
    );
  }
}
```
This widget wraps the `MaterialApp` widget with the `GoRouter` widget, passing in the router configuration.

### 4. Use the Router Widget in Your App

Finally, use the `RealFlutterRouterWidget` in your app's `main` function:
```dart
void main() {
  runApp(RealFlutterRouterWidget());
}
```
This sets up the router and navigation for your app.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:go_router_modular/go_router_modular.dart';

void main() {
  runApp(RealFlutterRouterWidget());
}

class RealFlutterRouterWidget extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return GoRouter(
      config: routerConfig,
      child: MaterialApp(
        title: 'RealFlutter App',
        home: RealFlutterHomePage(),
      ),
    );
  }
}

final routerConfig = GoRouterConfig(
  routes: [
    GoRoute(
      path: '/',
      builder: (context, state) => RealFlutterHomePage(),
    ),
    GoRoute(
      path: '/settings',
      builder: (context, state) => RealFlutterSettingsPage(),
    ),
  ],
);

class RealFlutterHomePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('RealFlutter Home Page'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            GoRouter.of(context).push('/settings');
          },
          child: Text('Go to Settings'),
        ),
      ),
    );
  }
}

class RealFlutterSettingsPage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('RealFlutter Settings Page'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            GoRouter.of(context).pop();
          },
          child: Text('Go Back'),
        ),
      ),
    );
  }
}

// The app starts by running the main function, which sets up the router and navigation.
// The RealFlutterRouterWidget is used as the root widget of the app.
// The GoRouter widget is used to manage the navigation, and it takes in the router configuration.
// The router configuration defines the routes for the app, including the home page and settings page.
// When the user navigates to a new route, the GoRouter widget builds the corresponding widget.
// In this example, the home page has a button that navigates to the settings page, and the settings page has a button that navigates back to the home page.
```

<-- END_MAIN -->
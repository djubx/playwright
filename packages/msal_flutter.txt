<-- START_DESCRIPTION -->

**msal_flutter Package Overview**
=====================================

The `msal_flutter` package is a Flutter wrapper for the Microsoft Authentication Library (MSAL), which allows developers to authenticate users with Microsoft Azure Active Directory (AAD) and Azure AD B2C. This package provides a simple and convenient way to integrate Microsoft authentication into Flutter applications.

**When to Use**
---------------

Use the `msal_flutter` package when you need to authenticate users with Microsoft Azure Active Directory (AAD) or Azure AD B2C in your Flutter application. This package is particularly useful for enterprise applications that require single sign-on (SSO) with Microsoft services.

**Features**
------------

*   Supports Azure Active Directory (AAD) and Azure AD B2C authentication
*   Provides a simple and convenient API for authenticating users
*   Supports single sign-on (SSO) with Microsoft services
*   Works on both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setting Up msal_flutter**
==========================

To use the `msal_flutter` package, follow these steps:

### Step 1: Add the msal_flutter Package to Your pubspec.yaml File

```yml
dependencies:
  msal_flutter: ^0.1.0
```

### Step 2: Import the msal_flutter Package

```dart
import 'package:msal_flutter/msal_flutter.dart';
```

### Step 3: Initialize the MSAL Instance

```dart
final msal = Msal(
  clientId: 'your_client_id',
  redirectUri: 'your_redirect_uri',
);
```

### Step 4: Authenticate the User

```dart
final result = await msal.acquireToken(
  scopes: ['https://graph.microsoft.com/.default'],
);
```

### Platform-Specific Details

#### Android

*   Add the following code to your `AndroidManifest.xml` file:

    ```xml
<application>
  ...
  <activity
    android:name="com.microsoft.identity.client.BrowserTabActivity"
    android:exported="true" />
</application>
```

#### iOS

*   Add the following code to your `Info.plist` file:

    ```xml
<key>CFBundleURLTypes</key>
<array>
  <dict>
    <key>CFBundleURLSchemes</key>
    <array>
      <string>msal{your_client_id}</string>
    </array>
  </dict>
</array>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:msal_flutter/msal_flutter.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatefulWidget {
  @override
  _MyAppState createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  final _msal = Msal(
    clientId: 'your_client_id',
    redirectUri: 'your_redirect_uri',
  );

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('MSAL Flutter Demo'),
        ),
        body: Center(
          child: ElevatedButton(
            onPressed: () async {
              // Acquire token silently
              final result = await _msal.acquireTokenSilent(
                scopes: ['https://graph.microsoft.com/.default'],
              );

              if (result == null) {
                // Acquire token interactively
                final result = await _msal.acquireToken(
                  scopes: ['https://graph.microsoft.com/.default'],
                );

                if (result != null) {
                  print('Access token: ${result.accessToken}');
                } else {
                  print('Failed to acquire token');
                }
              } else {
                print('Access token: ${result.accessToken}');
              }
            },
            child: Text('Login'),
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user clicks the "Login" button.
// 2. The MSAL instance attempts to acquire an access token silently.
// 3. If the silent acquisition fails, the MSAL instance attempts to acquire an access token interactively.
// 4. If the interactive acquisition is successful, the access token is printed to the console.
// 5. If the interactive acquisition fails, an error message is printed to the console.
```

<-- END_MAIN -->
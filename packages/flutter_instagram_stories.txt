<-- START_DESCRIPTION -->
# Flutter Instagram Stories Package
=====================================

The `flutter_instagram_stories` package is a Flutter library that allows you to create Instagram-like stories in your app. It provides a simple and easy-to-use API for displaying stories, with features like swipe gestures, story indicators, and more.

### When to Use This Package

This package is perfect for apps that want to display a series of images or videos in a story format, similar to Instagram. It's great for social media apps, news apps, or any app that wants to display a sequence of visual content.

### Features

* Swipe gestures for navigating between stories
* Story indicators to show the current story and total number of stories
* Support for images and videos
* Customizable story duration and animation
* Support for Android and iOS

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Package
=============================================

### Step 1: Add the Package to Your Pubspec

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_instagram_stories: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:flutter_instagram_stories/flutter_instagram_stories.dart';
```
### Step 3: Create a Story Widget

Create a `Story` widget and pass in a list of story items:
```dart
Story(
  storyItems: [
    StoryItem(
      image: AssetImage('assets/image1.jpg'),
      duration: Duration(seconds: 5),
    ),
    StoryItem(
      video: VideoPlayerController.asset('assets/video1.mp4'),
      duration: Duration(seconds: 10),
    ),
  ],
)
```
### Platform-Specific Details

* For Android, make sure to add the following line to your `AndroidManifest.xml` file:
```xml
<application
  ...
  android:hardwareAccelerated="true"
  ...
>
```
* For iOS, make sure to add the following line to your `Info.plist` file:
```xml
<key>UIRequiresFullScreen</key>
<true/>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->
```dart
import 'package:flutter/material.dart';
import 'package:flutter_instagram_stories/flutter_instagram_stories.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Instagram Stories Demo',
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  List<StoryItem> storyItems = [
    StoryItem(
      image: AssetImage('assets/image1.jpg'),
      duration: Duration(seconds: 5),
    ),
    StoryItem(
      video: VideoPlayerController.asset('assets/video1.mp4'),
      duration: Duration(seconds: 10),
    ),
    StoryItem(
      image: AssetImage('assets/image2.jpg'),
      duration: Duration(seconds: 5),
    ),
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Story(
        storyItems: storyItems,
        // Step 1: Create a Story widget and pass in the story items
        onStoryShow: (storyItem) {
          // Step 2: Handle the story show event
          print('Showing story: ${storyItem.image}');
        },
        onStoryFinish: () {
          // Step 3: Handle the story finish event
          print('Finished showing all stories');
        },
      ),
    );
  }
}

// Application flow:
// 1. The user opens the app and is presented with a story.
// 2. The user can swipe through the stories, and each story is displayed for a set duration.
// 3. When the user finishes showing all the stories, the onStoryFinish callback is called.
// 4. The user can then close the app or navigate to a different screen.
```
// Summary: The code creates a simple story app that displays a series of images and videos. The user can swipe through the stories, and each story is displayed for a set duration. When the user finishes showing all the stories, the onStoryFinish callback is called.
<-- END_MAIN -->
```markdown
<!-- START_DESCRIPTION -->
# Flutter Numeric Keyboard Package

The `flutter_numeric_keyboard` package is a specialized Flutter package designed to provide a customizable numeric keyboard for applications that require numeric input. This package is particularly useful in scenarios such as payment forms, calculators, or any application where users need to input numbers efficiently.

## When to Use This Package
- **Payment Applications**: When users need to enter amounts or card details.
- **Calculators**: For applications that perform mathematical operations.
- **Forms**: Any form that requires numeric input, such as age, quantity, or price.

## Features
- **Customizable Layout**: You can easily customize the layout of the numeric keyboard to fit your app's design.
- **Responsive Design**: The keyboard adapts to different screen sizes and orientations.
- **Easy Integration**: Simple API for integrating the numeric keyboard into your Flutter application.
- **Support for Various Input Types**: Allows for different numeric formats, including decimals.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using flutter_numeric_keyboard

## Installation
To use the `flutter_numeric_keyboard` package, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  flutter_numeric_keyboard: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run `flutter pub get` to install the package.

## Platform-Specific Details
### Android
No additional configuration is required for Android. Just ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file.

### iOS
For iOS, ensure that you have the correct permissions set in your `Info.plist` if your app requires any specific capabilities. However, the numeric keyboard itself does not require special permissions.

## Basic Usage
To use the numeric keyboard, you can create a simple widget that integrates the keyboard with a text field. Hereâ€™s how you can do it:

1. Import the package in your Dart file:
   ```dart
   import 'package:flutter_numeric_keyboard/flutter_numeric_keyboard.dart';
   ```

2. Create a stateful widget to manage the input:
   ```dart
   class RealFlutter extends StatefulWidget {
     @override
     _RealFlutterState createState() => _RealFlutterState();
   }

   class _RealFlutterState extends State<RealFlutter> {
     String input = '';

     @override
     Widget build(BuildContext context) {
       return Scaffold(
         appBar: AppBar(title: Text('Numeric Keyboard Example')),
         body: Column(
           children: [
             TextField(
               readOnly: true,
               controller: TextEditingController(text: input),
               decoration: InputDecoration(labelText: 'Input'),
             ),
             NumericKeyboard(
               onKeyboardTap: (value) {
                 setState(() {
                   input += value; // Append the tapped value to the input
                 });
               },
             ),
           ],
         ),
       );
     }
   }
   ```

This code sets up a basic numeric keyboard that appends the tapped numbers to a text field.

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of flutter_numeric_keyboard

```dart
import 'package:flutter/material.dart';
import 'package:flutter_numeric_keyboard/flutter_numeric_keyboard.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Numeric Keyboard Demo',
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  String input = ''; // Variable to hold the input from the keyboard

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Numeric Keyboard Example')),
      body: Column(
        children: [
          // TextField to display the input
          TextField(
            readOnly: true, // Make the TextField read-only
            controller: TextEditingController(text: input), // Set the controller to display input
            decoration: InputDecoration(labelText: 'Input'), // Label for the TextField
          ),
          // NumericKeyboard widget
          NumericKeyboard(
            onKeyboardTap: (value) {
              setState(() {
                input += value; // Append the tapped value to the input
              });
            },
          ),
        ],
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the MyApp widget.
// 2. MyApp sets up the MaterialApp and points to the RealFlutter widget as the home.
// 3. RealFlutter is a stateful widget that maintains the input state.
// 4. The build method creates a Scaffold with an AppBar and a Column containing a TextField and NumericKeyboard.
// 5. The TextField is read-only and displays the current input.
// 6. The NumericKeyboard listens for taps and updates the input state accordingly.
// 7. When a number is tapped, it appends the value to the input string and updates the TextField.

```
<!-- END_MAIN -->
``` 

This structured blog post provides a comprehensive overview of the `flutter_numeric_keyboard` package, guiding developers through its features, setup, and practical usage with a complete example.
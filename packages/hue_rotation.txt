<-- START_DESCRIPTION -->

# Hue Rotation Flutter Package
================================

The `hue_rotation` Flutter package provides a simple and efficient way to apply hue rotation effects to images in your Flutter app. This package is ideal for creating visually appealing and interactive image effects, such as color shifting, color cycling, and more.

## Features

*   Apply hue rotation effects to images
*   Adjustable hue rotation angle
*   Supports both Android and iOS platforms

## When to Use

The `hue_rotation` package is perfect for creating engaging and interactive image effects in various applications, such as:

*   Social media apps: Apply hue rotation effects to user profile pictures or image posts
*   Gaming apps: Use hue rotation to create visually appealing and interactive game elements
*   Art and design apps: Experiment with hue rotation to create unique and captivating artwork

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
================

## Step 1: Add the Package to Your Project

Add the `hue_rotation` package to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  hue_rotation: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Step 2: Import the Package

Import the `hue_rotation` package in your Dart file:

```dart
import 'package:hue_rotation/hue_rotation.dart';
```

## Step 3: Apply Hue Rotation Effect

Use the `HueRotation` widget to apply the hue rotation effect to an image:

```dart
HueRotation(
  child: Image.asset('assets/image.jpg'),
  angle: 90, // Adjustable hue rotation angle
)
```

## Platform-Specific Details

The `hue_rotation` package uses platform-specific code to apply the hue rotation effect. On Android, it uses the `android.graphics.ColorMatrix` class, while on iOS, it uses the `Core Image` framework.

### Android

No additional configuration is required for Android.

### iOS

Make sure to add the following line to your `Info.plist` file:

```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```

This allows the app to load images from external sources.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:hue_rotation/hue_rotation.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Hue Rotation Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  double _angle = 0;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Hue Rotation Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            // Apply hue rotation effect to an image
            HueRotation(
              child: Image.asset('assets/image.jpg'),
              angle: _angle, // Adjustable hue rotation angle
            ),
            // Slider to adjust the hue rotation angle
            Slider(
              value: _angle,
              min: 0,
              max: 360,
              divisions: 360,
              label: _angle.round().toString(),
              onChanged: (value) {
                setState(() {
                  _angle = value;
                });
              },
            ),
          ],
        ),
      ),
    );
  }
}

// Application flow:
// 1. The app starts with a default hue rotation angle of 0.
// 2. The user can adjust the hue rotation angle using the slider.
// 3. As the user adjusts the slider, the hue rotation angle is updated in real-time.
// 4. The updated hue rotation angle is applied to the image using the HueRotation widget.
// 5. The resulting image with the applied hue rotation effect is displayed on the screen.

// Summary:
// The code flows by first initializing the app with a default hue rotation angle.
// The user can then adjust the angle using the slider, which updates the angle in real-time.
// The updated angle is then applied to the image using the HueRotation widget, resulting in the final image with the hue rotation effect.

```

<-- END_MAIN -->
Here's a detailed technical blog on the "jhijri" Flutter package, structured as requested.

<!-- START_DESCRIPTION -->
# jhijri Flutter Package

The **jhijri** package is a powerful tool for Flutter developers looking to work with the Hijri (Islamic) calendar. This package provides a comprehensive set of features that allow developers to convert dates between the Gregorian and Hijri calendars, making it particularly useful for applications that cater to Muslim users or require Islamic date functionalities.

## When to Use jhijri

You might consider using the jhijri package in scenarios such as:
- **Islamic Calendar Applications**: Apps that need to display Islamic dates alongside Gregorian dates.
- **Event Planning**: Applications that schedule events based on Islamic dates, such as Ramadan or Eid.
- **Religious Apps**: Apps that provide prayer times, Quran readings, or Islamic history based on Hijri dates.

## Features

- **Date Conversion**: Easily convert between Gregorian and Hijri dates.
- **Date Formatting**: Format Hijri dates in various styles.
- **Leap Year Calculation**: Determine if a Hijri year is a leap year.
- **Customizable**: Allows for customization of date formats to suit user preferences.

The jhijri package simplifies the complexities of working with Islamic dates, making it an essential tool for Flutter developers targeting Muslim audiences.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using jhijri

In this tutorial, we will walk through the setup process for the jhijri package and demonstrate how to use it in a Flutter application.

## Step 1: Adding the Dependency

To get started, you need to add the jhijri package to your `pubspec.yaml` file. Open the file and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  jhijri: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command in your terminal to install it:

```bash
flutter pub get
```

## Step 2: Platform-Specific Configuration

### Android

For Android, ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
        ...
    }
}
```

### iOS

For iOS, you may need to set the deployment target in your `ios/Podfile`:

```ruby
platform :ios, '10.0'
```

## Step 3: Using the jhijri Package

Now that we have set up the package, let's see how to use it in our Flutter application.

1. **Import the Package**: In your Dart file, import the jhijri package:

```dart
import 'package:jhijri/jhijri.dart';
```

2. **Convert Dates**: You can convert a Gregorian date to Hijri and vice versa. Hereâ€™s a simple example:

```dart
void main() {
  // Create a Gregorian date
  DateTime gregorianDate = DateTime.now();
  
  // Convert to Hijri
  HijriCalendar hijriDate = HijriCalendar.fromDate(gregorianDate);
  
  print('Gregorian Date: $gregorianDate');
  print('Hijri Date: ${hijriDate.toString()}');
}
```

3. **Formatting Dates**: You can format Hijri dates using the `toString()` method or customize it further.

4. **Leap Year Check**: To check if a Hijri year is a leap year:

```dart
bool isLeap = HijriCalendar.isLeapYear(hijriDate.hYear);
print('Is Hijri Year Leap: $isLeap');
```

With these steps, you can effectively integrate the jhijri package into your Flutter application.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of jhijri in a Flutter Application

```dart
import 'package:flutter/material.dart';
import 'package:jhijri/jhijri.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Hijri Calendar Example',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Hijri Calendar Example'),
        ),
        body: Center(
          child: HijriDateWidget(),
        ),
      ),
    );
  }
}

class HijriDateWidget extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Get the current Gregorian date
    DateTime currentGregorianDate = DateTime.now();
    
    // Convert the current Gregorian date to Hijri
    HijriCalendar hijriDate = HijriCalendar.fromDate(currentGregorianDate);
    
    // Check if the Hijri year is a leap year
    bool isLeapYear = HijriCalendar.isLeapYear(hijriDate.hYear);
    
    return Column(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        Text(
          'Current Gregorian Date: ${currentGregorianDate.toLocal()}',
          style: TextStyle(fontSize: 20),
        ),
        SizedBox(height: 20),
        Text(
          'Current Hijri Date: ${hijriDate.toString()}',
          style: TextStyle(fontSize: 20),
        ),
        SizedBox(height: 20),
        Text(
          'Is Hijri Year Leap: $isLeapYear',
          style: TextStyle(fontSize: 20),
        ),
      ],
    );
  }
}

// Application Flow Explanation:
// 1. The main function initializes the Flutter app by calling runApp() with the RealFlutter widget.
// 2. The RealFlutter widget builds a MaterialApp with a title and a home Scaffold containing an AppBar and a centered HijriDateWidget.
// 3. The HijriDateWidget retrieves the current Gregorian date and converts it to Hijri using the HijriCalendar class.
// 4. It checks if the current Hijri year is a leap year.
// 5. Finally, it displays the current Gregorian date, the converted Hijri date, and whether the Hijri year is a leap year in a column layout.
```

<!-- END_MAIN -->

In this blog, we explored the jhijri Flutter package, detailing its features, setup process, and providing a complete example of its usage. The application demonstrates how to convert Gregorian dates to Hijri dates and check for leap years, making it a valuable resource for developers working with Islamic calendars.
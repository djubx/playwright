<-- START_DESCRIPTION -->

# gpos720_printer Flutter Package
=====================================

The `gpos720_printer` Flutter package provides a simple and efficient way to print documents and images using the GPOS720 printer. This package is ideal for applications that require printing receipts, invoices, or other documents.

### Features

*   Supports printing of text, images, and barcodes
*   Allows for customization of font size, style, and alignment
*   Supports printing of multiple pages
*   Compatible with Android and iOS platforms

### When to Use

This package is suitable for applications that require printing documents or images using the GPOS720 printer. Some examples include:

*   Point of Sale (POS) systems
*   Inventory management systems
*   Invoicing and billing systems
*   Label printing applications

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
=====================

### Step 1: Add the Package to Your Project

Add the `gpos720_printer` package to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  gpos720_printer: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:gpos720_printer/gpos720_printer.dart';
```

### Step 3: Initialize the Printer

Initialize the printer by calling the `init` method:

```dart
Gpos720Printer _printer = Gpos720Printer();

@override
void initState() {
  super.initState();
  _printer.init();
}
```

### Step 4: Print a Document

Print a document by calling the `print` method:

```dart
_printer.print(
  'Hello, World!',
  fontSize: 24,
  fontStyle: FontStyle.bold,
  alignment: Alignment.center,
);
```

### Platform-Specific Details

*   **Android:** Make sure to add the following permissions to your `AndroidManifest.xml` file:

    ```xml
<uses-permission android:name="android.permission.BLUETOOTH" />
<uses-permission android:name="android.permission.BLUETOOTH_ADMIN" />
```

*   **iOS:** Make sure to add the following lines to your `Info.plist` file:

    ```xml
<key>UIBackgroundModes</key>
<array>
  <string>bluetooth-peripheral</string>
  <string>bluetooth-central</string>
</array>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:gpos720_printer/gpos720_printer.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'GPOS720 Printer Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  Gpos720Printer _printer = Gpos720Printer();

  @override
  void initState() {
    super.initState();
    _printer.init();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('GPOS720 Printer Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: () {
                _printer.print(
                  'Hello, World!',
                  fontSize: 24,
                  fontStyle: FontStyle.bold,
                  alignment: Alignment.center,
                );
              },
              child: Text('Print Hello World'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                _printer.print(
                  'This is a long text that will be printed on multiple lines.',
                  fontSize: 18,
                  fontStyle: FontStyle.normal,
                  alignment: Alignment.left,
                );
              },
              child: Text('Print Long Text'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and the `MyHomePage` widget is displayed.
// 2. The `Gpos720Printer` instance is initialized in the `initState` method.
// 3. The user clicks on one of the buttons to print a document.
// 4. The `print` method of the `Gpos720Printer` instance is called with the document text and print settings.
// 5. The document is printed using the GPOS720 printer.
// 6. The user can click on another button to print another document.

// The code flow is as follows:
// 1. The `main` function is called and the `MyApp` widget is created.
// 2. The `MyApp` widget creates the `MyHomePage` widget and displays it.
// 3. The `MyHomePage` widget initializes the `Gpos720Printer` instance and displays the buttons.
// 4. The user clicks on a button and the `onPressed` callback is called.
// 5. The `onPressed` callback calls the `print` method of the `Gpos720Printer` instance.
// 6. The `print` method prints the document using the GPOS720 printer.

```

<-- END_MAIN -->
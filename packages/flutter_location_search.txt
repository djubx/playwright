<-- START_DESCRIPTION -->

# Flutter Location Search Package
=====================================

The `flutter_location_search` package is a powerful tool for searching locations and retrieving their coordinates. It provides a simple and efficient way to integrate location search functionality into your Flutter application.

### When to Use

This package is ideal for applications that require location-based services, such as:

* Ride-hailing apps
* Food delivery apps
* Travel and tourism apps
* Real estate apps

### Features

* Search locations by name, address, or coordinates
* Retrieve location coordinates (latitude and longitude)
* Support for both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `flutter_location_search` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_location_search: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:flutter_location_search/flutter_location_search.dart';
```
### Step 3: Configure Platform-Specific Settings

#### Android

Add the following lines to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
<uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
```
#### iOS

Add the following lines to your `Info.plist` file:
```xml
<key>NSLocationWhenInUseUsageDescription</key>
<string>This app needs access to your location to work properly</string>
<key>NSLocationAlwaysAndWhenInUseUsageDescription</key>
<string>This app needs access to your location to work properly</string>
```
### Step 4: Initialize the Package

Initialize the package in your Dart file:
```dart
FlutterLocationSearch _locationSearch = FlutterLocationSearch();
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_location_search/flutter_location_search.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Location Search Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _searchController = TextEditingController();
  String _searchResult = '';

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Location Search Demo'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Column(
          children: [
            TextField(
              controller: _searchController,
              decoration: InputDecoration(
                labelText: 'Search Location',
                border: OutlineInputBorder(),
              ),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _searchLocation,
              child: Text('Search'),
            ),
            SizedBox(height: 20),
            Text(_searchResult),
          ],
        ),
      ),
    );
  }

  _searchLocation() async {
    // Create a new instance of FlutterLocationSearch
    FlutterLocationSearch _locationSearch = FlutterLocationSearch();

    // Set the search query
    String _searchQuery = _searchController.text;

    // Search for the location
    LocationResult _result = await _locationSearch.search(_searchQuery);

    // Check if the search was successful
    if (_result != null) {
      // Get the location coordinates
      double _latitude = _result.latitude;
      double _longitude = _result.longitude;

      // Update the search result text
      setState(() {
        _searchResult = 'Location found: $_latitude, $_longitude';
      });
    } else {
      // Update the search result text
      setState(() {
        _searchResult = 'Location not found';
      });
    }
  }
}

// The application flow is as follows:
// 1. The user enters a search query in the text field.
// 2. The user clicks the "Search" button.
// 3. The _searchLocation function is called.
// 4. A new instance of FlutterLocationSearch is created.
// 5. The search query is set.
// 6. The search function is called.
// 7. The search result is checked.
// 8. If the search was successful, the location coordinates are retrieved.
// 9. The search result text is updated.
// 10. If the search was not successful, the search result text is updated.
```

<-- END_MAIN -->

In summary, this code creates a simple Flutter application that allows the user to search for a location using the `flutter_location_search` package. The application flow is as follows: the user enters a search query, clicks the "Search" button, and the application searches for the location using the `FlutterLocationSearch` instance. If the search is successful, the location coordinates are retrieved and the search result text is updated. If the search is not successful, the search result text is updated accordingly.
<-- START_DESCRIPTION -->

# Reels Viewer Flutter Package
The reels_viewer Flutter package is a powerful tool for creating a reels-like video player in your Flutter application. It provides a simple and efficient way to play videos in a vertical, full-screen format, with features like swipe gestures, video looping, and more.

## When to Use
This package is ideal for social media apps, video sharing platforms, or any other application that requires a reels-like video player.

## Features

* Vertical, full-screen video playback
* Swipe gestures for navigating between videos
* Video looping
* Customizable video player controls
* Support for both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Reels Viewer Package
To use the reels_viewer package in your Flutter application, follow these steps:

### Step 1: Add the Package to Your pubspec.yaml File
Add the following line to your pubspec.yaml file:
```yml
dependencies:
  reels_viewer: ^1.0.0
```
Then, run `flutter pub get` in your terminal to get the package.

### Step 2: Import the Package
Import the package in your Dart file:
```dart
import 'package:reels_viewer/reels_viewer.dart';
```
### Step 3: Create a Reels Viewer Widget
Create a ReelsViewer widget and pass in a list of video URLs:
```dart
ReelsViewer(
  videoUrls: [
    'https://example.com/video1.mp4',
    'https://example.com/video2.mp4',
    'https://example.com/video3.mp4',
  ],
)
```
### Platform-Specific Details
For Android, add the following line to your AndroidManifest.xml file:
```xml
<application
  ...
  android:hardwareAccelerated="true"
  ...
>
```
For iOS, add the following line to your Info.plist file:
```xml
<key>UIRequiresFullScreen</key>
<true/>
```
### Configurations and Optimizations
You can customize the video player controls by passing in a custom `VideoPlayerControls` widget:
```dart
ReelsViewer(
  videoUrls: [
    'https://example.com/video1.mp4',
    'https://example.com/video2.mp4',
    'https://example.com/video3.mp4',
  ],
  videoPlayerControls: CustomVideoPlayerControls(),
)
```
You can also optimize the video playback by passing in a `VideoPlayerOptions` object:
```dart
ReelsViewer(
  videoUrls: [
    'https://example.com/video1.mp4',
    'https://example.com/video2.mp4',
    'https://example.com/video3.mp4',
  ],
  videoPlayerOptions: VideoPlayerOptions(
    loop: true,
    autoplay: true,
  ),
)
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:reels_viewer/reels_viewer.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Reels Viewer Demo',
      home: ReelsViewerDemo(),
    );
  }
}

class ReelsViewerDemo extends StatefulWidget {
  @override
  _ReelsViewerDemoState createState() => _ReelsViewerDemoState();
}

class _ReelsViewerDemoState extends State<ReelsViewerDemo> {
  List<String> videoUrls = [
    'https://example.com/video1.mp4',
    'https://example.com/video2.mp4',
    'https://example.com/video3.mp4',
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Reels Viewer Demo'),
      ),
      body: ReelsViewer(
        videoUrls: videoUrls,
        videoPlayerOptions: VideoPlayerOptions(
          loop: true,
          autoplay: true,
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app and is presented with a list of video URLs.
// 2. The user selects a video to play and the ReelsViewer widget is created.
// 3. The ReelsViewer widget plays the selected video in a vertical, full-screen format.
// 4. The user can swipe left or right to navigate between videos.
// 5. The video playback is looped and autoplayed.
// 6. The user can customize the video player controls by passing in a custom VideoPlayerControls widget.
// 7. The user can optimize the video playback by passing in a VideoPlayerOptions object.

// In summary, the ReelsViewer widget provides a simple and efficient way to play videos in a vertical, full-screen format,
// with features like swipe gestures, video looping, and customizable video player controls.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

Vector Map Package for Flutter
==============================

The `vector_map` package is a powerful tool for Flutter developers to display and interact with vector maps. It provides a range of features, including map rendering, zooming, panning, and marker placement.

When to Use
------------

The `vector_map` package is ideal for applications that require:

*   Displaying complex vector maps with multiple layers and features
*   Providing interactive map experiences, such as zooming and panning
*   Placing custom markers and overlays on the map

Features
--------

*   **Map rendering**: Display vector maps with multiple layers and features
*   **Zooming and panning**: Interact with the map using gestures or programmatic controls
*   **Marker placement**: Add custom markers and overlays to the map

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Configuration
-----------------------

### Step 1: Add the `vector_map` package to your Flutter project

Add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  vector_map: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the `vector_map` package

Import the `vector_map` package in your Dart file:

```dart
import 'package:vector_map/vector_map.dart';
```

### Step 3: Create a `VectorMap` widget

Create a `VectorMap` widget and pass in the required properties:

```dart
VectorMap(
  // Required properties
  map: VectorMapTileLayer(
    urlTemplate: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
    subdomains: ['a', 'b', 'c'],
  ),
  // Optional properties
  initialCameraPosition: CameraPosition(
    target: LatLng(37.7749, -122.4194),
    zoom: 12,
  ),
)
```

### Platform-Specific Details

#### Android

*   Add the following permission to your `AndroidManifest.xml` file:

    ```xml
<uses-permission android:name="android.permission.INTERNET" />
```

#### iOS

*   Add the following key to your `Info.plist` file:

    ```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:vector_map/vector_map.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Step 1: Create a VectorMapController to control the map
  VectorMapController _mapController = VectorMapController();

  // Step 2: Create a LatLng object to store the map's initial position
  LatLng _initialPosition = LatLng(37.7749, -122.4194);

  // Step 3: Create a CameraPosition object to store the map's initial camera position
  CameraPosition _initialCameraPosition = CameraPosition(
    target: LatLng(37.7749, -122.4194),
    zoom: 12,
  );

  // Step 4: Create a VectorMapTileLayer object to store the map's tile layer
  VectorMapTileLayer _tileLayer = VectorMapTileLayer(
    urlTemplate: 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
    subdomains: ['a', 'b', 'c'],
  );

  // Step 5: Create a VectorMapMarker object to store the map's marker
  VectorMapMarker _marker = VectorMapMarker(
    point: LatLng(37.7749, -122.4194),
    builder: (context) => Icon(Icons.place),
  );

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        body: VectorMap(
          // Step 6: Pass the map's controller to the VectorMap widget
          controller: _mapController,

          // Step 7: Pass the map's initial position to the VectorMap widget
          initialCameraPosition: _initialCameraPosition,

          // Step 8: Pass the map's tile layer to the VectorMap widget
          map: _tileLayer,

          // Step 9: Pass the map's marker to the VectorMap widget
          markers: [_marker],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and is presented with a map.
// 2. The map is centered on the initial position (37.7749, -122.4194) and has a zoom level of 12.
// 3. The user can interact with the map by zooming and panning.
// 4. The map displays a marker at the initial position (37.7749, -122.4194).
// 5. The user can tap on the marker to see more information.

// In summary, this code creates a simple map application that displays a map with a marker and allows the user to interact with it.
```

<-- END_MAIN -->
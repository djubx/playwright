```markdown
<!-- START_DESCRIPTION -->
# Overview of the `beacon_scanner` Flutter Package

The `beacon_scanner` package is a powerful tool for Flutter developers looking to integrate Bluetooth Low Energy (BLE) beacon scanning capabilities into their applications. This package allows you to detect and interact with BLE beacons, making it ideal for use cases such as location-based services, proximity marketing, and indoor navigation.

## When to Use `beacon_scanner`

You might consider using the `beacon_scanner` package in scenarios such as:
- **Retail Applications**: To send targeted promotions to users when they are near specific products.
- **Event Management**: To track attendee movements and provide location-based information during conferences or festivals.
- **Indoor Navigation**: To help users navigate through large buildings like malls or airports.

## Key Features

- **Beacon Detection**: Easily scan for nearby BLE beacons and retrieve their information.
- **Region Monitoring**: Monitor specific regions defined by beacon UUIDs, major, and minor values.
- **Platform Support**: Works on both Android and iOS, providing a unified API for beacon scanning.
- **Customizable Callbacks**: Set up callbacks for entering and exiting beacon regions, allowing for dynamic user interactions.

Overall, the `beacon_scanner` package is a robust solution for developers looking to leverage BLE technology in their Flutter applications.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Setting Up and Using the `beacon_scanner` Package

## Installation

To get started with the `beacon_scanner` package, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  beacon_scanner: ^2.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run `flutter pub get` to install the package.

## Platform-Specific Configuration

### Android

1. **Permissions**: Add the following permissions to your `AndroidManifest.xml` file:

```xml
<uses-permission android:name="android.permission.BLUETOOTH" />
<uses-permission android:name="android.permission.BLUETOOTH_ADMIN" />
<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
```

2. **Bluetooth Settings**: Ensure that Bluetooth is enabled on the device.

### iOS

1. **Permissions**: Add the following keys to your `Info.plist` file:

```xml
<key>NSBluetoothAlwaysUsageDescription</key>
<string>This app requires Bluetooth access to detect beacons.</string>
<key>NSLocationWhenInUseUsageDescription</key>
<string>This app requires location access to detect beacons.</string>
```

2. **Location Services**: Ensure that location services are enabled on the device.

## Basic Usage

To use the `beacon_scanner` package, you need to initialize the scanner and set up listeners for beacon detection. Hereâ€™s a simple example of how to do this:

```dart
import 'package:flutter/material.dart';
import 'package:beacon_scanner/beacon_scanner.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  List<Beacon> _beacons = [];

  @override
  void initState() {
    super.initState();
    // Start scanning for beacons
    BeaconScanner.startScan().listen((Beacon beacon) {
      setState(() {
        _beacons.add(beacon); // Add detected beacon to the list
      });
    });
  }

  @override
  void dispose() {
    BeaconScanner.stopScan(); // Stop scanning when the widget is disposed
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Beacon Scanner')),
      body: ListView.builder(
        itemCount: _beacons.length,
        itemBuilder: (context, index) {
          final beacon = _beacons[index];
          return ListTile(
            title: Text('Beacon: ${beacon.proximityUUID}'),
            subtitle: Text('Major: ${beacon.major}, Minor: ${beacon.minor}'),
          );
        },
      ),
    );
  }
}
```

This code initializes the beacon scanner, listens for detected beacons, and displays them in a list. Make sure to handle permissions and Bluetooth settings as described above.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using `beacon_scanner`

```dart
import 'package:flutter/material.dart';
import 'package:beacon_scanner/beacon_scanner.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  List<Beacon> _beacons = []; // List to hold detected beacons

  @override
  void initState() {
    super.initState();
    // Start scanning for beacons
    BeaconScanner.startScan().listen((Beacon beacon) {
      setState(() {
        _beacons.add(beacon); // Add detected beacon to the list
      });
    });
  }

  @override
  void dispose() {
    BeaconScanner.stopScan(); // Stop scanning when the widget is disposed
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Beacon Scanner')),
      body: ListView.builder(
        itemCount: _beacons.length, // Number of detected beacons
        itemBuilder: (context, index) {
          final beacon = _beacons[index]; // Get the beacon at the current index
          return ListTile(
            title: Text('Beacon: ${beacon.proximityUUID}'), // Display UUID
            subtitle: Text('Major: ${beacon.major}, Minor: ${beacon.minor}'), // Display major and minor values
          );
        },
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts and initializes the `RealFlutter` widget.
// 2. In `initState`, the beacon scanner starts scanning for nearby beacons.
// 3. When a beacon is detected, it triggers the listener, and the beacon is added to the `_beacons` list.
// 4. The UI is updated using `setState`, which rebuilds the widget with the new list of beacons.
// 5. The `ListView.builder` creates a scrollable list of detected beacons, displaying their UUID, major, and minor values.
// 6. When the widget is disposed, the scanner stops to conserve resources.
```
<!-- END_MAIN -->
```

This structured blog post provides a comprehensive overview of the `beacon_scanner` package, including its features, setup instructions, and a complete example with detailed comments explaining the application flow.
<-- START_DESCRIPTION -->

Theme Patrol Flutter Package
==========================

The `theme_patrol` Flutter package is a powerful tool for managing and switching between different themes in your Flutter application. It provides a simple and efficient way to handle multiple themes, making it ideal for applications that require a high degree of customization.

When to Use
------------

The `theme_patrol` package is perfect for applications that:

* Require multiple themes, such as light and dark modes
* Need to switch between themes based on user preferences or system settings
* Want to provide a high degree of customization for users

Features
--------

* Easy theme management: Create, manage, and switch between multiple themes with ease
* Theme persistence: Save and load themes using the package's built-in persistence mechanism
* System theme integration: Automatically switch between themes based on system settings

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
---------------

To use the `theme_patrol` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  theme_patrol: ^1.0.0
```
2. Import the package in your Dart file:
```dart
import 'package:theme_patrol/theme_patrol.dart';
```
3. Create a `ThemePatrol` instance:
```dart
ThemePatrol themePatrol = ThemePatrol();
```
4. Define your themes:
```dart
ThemeData lightTheme = ThemeData(
  brightness: Brightness.light,
  primaryColor: Colors.blue,
);

ThemeData darkTheme = ThemeData(
  brightness: Brightness.dark,
  primaryColor: Colors.red,
);
```
5. Add the themes to the `ThemePatrol` instance:
```dart
themePatrol.addTheme('light', lightTheme);
themePatrol.addTheme('dark', darkTheme);
```
6. Switch between themes:
```dart
themePatrol.switchTheme('dark');
```
Platform-Specific Details
-------------------------

### Android

To integrate with the system theme on Android, add the following code to your `AndroidManifest.xml` file:
```xml
<application
  ...
  android:theme="@style/Theme.AppCompat.DayNight">
```
### iOS

To integrate with the system theme on iOS, add the following code to your `Info.plist` file:
```xml
<key>UIUserInterfaceStyle</key>
<string>Automatic</string>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:theme_patrol/theme_patrol.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  ThemePatrol _themePatrol;

  @override
  void initState() {
    super.initState();
    _themePatrol = ThemePatrol();

    // Define themes
    ThemeData lightTheme = ThemeData(
      brightness: Brightness.light,
      primaryColor: Colors.blue,
    );

    ThemeData darkTheme = ThemeData(
      brightness: Brightness.dark,
      primaryColor: Colors.red,
    );

    // Add themes to ThemePatrol
    _themePatrol.addTheme('light', lightTheme);
    _themePatrol.addTheme('dark', darkTheme);

    // Switch to light theme by default
    _themePatrol.switchTheme('light');
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Theme Patrol Demo',
      theme: _themePatrol.currentTheme,
      home: Scaffold(
        appBar: AppBar(
          title: Text('Theme Patrol Demo'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Text(
                'Current Theme:',
                style: TextStyle(fontSize: 24),
              ),
              Text(
                _themePatrol.currentThemeName,
                style: TextStyle(fontSize: 24),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  _themePatrol.switchTheme('dark');
                  setState(() {});
                },
                child: Text('Switch to Dark Theme'),
              ),
              SizedBox(height: 10),
              ElevatedButton(
                onPressed: () {
                  _themePatrol.switchTheme('light');
                  setState(() {});
                },
                child: Text('Switch to Light Theme'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Application flow:
// 1. The app starts and initializes the ThemePatrol instance.
// 2. The app defines two themes: light and dark.
// 3. The app adds the themes to the ThemePatrol instance.
// 4. The app switches to the light theme by default.
// 5. The user can switch between themes using the buttons.
// 6. When the user switches themes, the app updates the UI to reflect the new theme.
```

<-- END_MAIN -->
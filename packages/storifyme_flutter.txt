<-- START_DESCRIPTION -->

# StorifyMe Flutter Package
================================

The `storifyme_flutter` package is a powerful tool for creating and managing stories in Flutter applications. It provides a simple and intuitive API for building, customizing, and displaying stories.

## When to Use
--------------

Use `storifyme_flutter` when you want to create a story-based feature in your Flutter app, such as:

* Displaying a sequence of images or videos
* Creating a tutorial or guided tour
* Showcasing a product or service
* Building a social media-style story feed

## Features
------------

* Support for images, videos, and custom widgets
* Customizable story layout and design
* Swipe gestures for navigating between stories
* Support for Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up StorifyMe Flutter
=============================

To use `storifyme_flutter` in your Flutter project, follow these steps:

### Step 1: Add the Package

Add the `storifyme_flutter` package to your `pubspec.yaml` file:
```yml
dependencies:
  storifyme_flutter: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the `storifyme_flutter` package in your Dart file:
```dart
import 'package:storifyme_flutter/storifyme_flutter.dart';
```
### Step 3: Create a Story

Create a story by building a `Story` widget:
```dart
Story(
  children: [
    Image.asset('image1.jpg'),
    Image.asset('image2.jpg'),
    VideoPlayer(
      videoUrl: 'https://example.com/video.mp4',
    ),
  ],
)
```
### Step 4: Display the Story

Display the story by wrapping it in a `StoryView` widget:
```dart
StoryView(
  story: Story(
    children: [
      Image.asset('image1.jpg'),
      Image.asset('image2.jpg'),
      VideoPlayer(
        videoUrl: 'https://example.com/video.mp4',
      ),
    ],
  ),
)
```
### Platform-Specific Details

* For Android, add the following line to your `AndroidManifest.xml` file:
```xml
<application
  ...
  android:hardwareAccelerated="true"
  ...
>
```
* For iOS, add the following line to your `Info.plist` file:
```xml
<key>UIRequiresFullScreen</key>
<true/>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:storifyme_flutter/storifyme_flutter.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'StorifyMe Flutter Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('StorifyMe Flutter Demo'),
      ),
      body: Center(
        child: StoryView(
          story: Story(
            children: [
              // Image 1
              Image.asset('image1.jpg'),
              // Image 2
              Image.asset('image2.jpg'),
              // Video
              VideoPlayer(
                videoUrl: 'https://example.com/video.mp4',
              ),
              // Custom widget
              Container(
                color: Colors.blue,
                child: Text('Custom widget'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
```

// This is the main entry point of the app.
// The app uses the `MaterialApp` widget to define the app's title and home page.
// The home page is defined by the `MyHomePage` widget, which is a stateful widget.
// The `MyHomePage` widget builds a `Scaffold` widget, which provides a basic material design layout.
// The `Scaffold` widget contains an `AppBar` widget, which displays the app's title.
// The `Scaffold` widget also contains a `Center` widget, which centers its child widget.
// The child widget of the `Center` widget is a `StoryView` widget, which displays a story.
// The story is defined by a `Story` widget, which contains a list of child widgets.
// The child widgets of the `Story` widget are an `Image` widget, another `Image` widget, a `VideoPlayer` widget, and a custom widget.
// The custom widget is a `Container` widget with a blue background color and a text child widget.

// When the app is run, the `StoryView` widget displays the story by showing each child widget in sequence.
// The user can swipe left or right to navigate between the child widgets.
// The `StoryView` widget also provides a way to customize the story's layout and design.

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Demoji Flutter Package
The "demoji" Flutter package is a lightweight library that allows you to easily remove or replace emojis from strings in your Flutter application. This package is useful when you want to prevent users from entering emojis in text fields, or when you want to display text without emojis.

## Features
- Remove emojis from strings
- Replace emojis with a custom string
- Support for both Android and iOS platforms

## When to Use
- When you want to restrict users from entering emojis in text fields
- When you want to display text without emojis
- When you want to replace emojis with a custom string

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
To use the "demoji" package in your Flutter application, follow these steps:

### Step 1: Add the Package to Your Pubspec File
Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  demoji: ^1.0.0
```
Then, run `flutter pub get` in your terminal to get the package.

### Step 2: Import the Package
Import the package in your Dart file:
```dart
import 'package:demoji/demoji.dart';
```
### Step 3: Use the Package
You can use the package to remove or replace emojis from strings:
```dart
String text = "Hello, world! ðŸ˜Š";
String cleanText = Demoji.replaceWithDescription(text);
print(cleanText); // Output: "Hello, world! smiling face with smiling eyes"
```
### Platform-Specific Details
The "demoji" package works on both Android and iOS platforms. However, on Android, you need to add the following line to your `android/app/src/main/AndroidManifest.xml` file:
```xml
<application
    ...
    android:allowBackup="false"
    ...>
```
This is because the package uses a native library that requires this permission.

### Optimizations
To optimize the performance of the package, you can use the ` Demoji.replaceWithDescription` method instead of `Demoji.remove`. This method replaces emojis with their descriptions, which can be faster than removing them entirely.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:demoji/demoji.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Demoji Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _textController = TextEditingController();
  String _cleanText = '';

  // Step 1: Create a text field to input text
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Demoji Example'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            TextField(
              controller: _textController,
              decoration: InputDecoration(
                labelText: 'Input Text',
                border: OutlineInputBorder(),
              ),
            ),
            SizedBox(height: 16),
            // Step 2: Create a button to clean the text
            ElevatedButton(
              onPressed: () {
                // Step 3: Use the Demoji package to clean the text
                String cleanText = Demoji.replaceWithDescription(_textController.text);
                setState(() {
                  _cleanText = cleanText;
                });
              },
              child: Text('Clean Text'),
            ),
            SizedBox(height: 16),
            // Step 4: Display the cleaned text
            Text(_cleanText),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user inputs text into the text field.
// 2. The user clicks the "Clean Text" button.
// 3. The Demoji package is used to clean the text by replacing emojis with their descriptions.
// 4. The cleaned text is displayed on the screen.

// In summary, this code creates a simple Flutter application that allows users to input text, clean the text by replacing emojis with their descriptions, and display the cleaned text on the screen.
```

<-- END_MAIN -->
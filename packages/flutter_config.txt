```markdown
<-- START_DESCRIPTION -->

# Flutter Config Package Overview

The `flutter_config` package is a powerful tool for managing environment-specific configurations in Flutter applications. It allows developers to define and access environment variables directly from their Dart code, making it easier to manage different configurations for development, testing, and production environments.

## When to Use Flutter Config

- **Environment-Specific Settings**: When you need to manage different API endpoints, feature flags, or other settings that vary between development, staging, and production environments.
- **Secure Configuration Management**: To keep sensitive information like API keys out of your source code and manage them securely.
- **Simplified Configuration Access**: To access configuration values easily throughout your Flutter application without hardcoding them.

## Features

- **Cross-Platform Support**: Works seamlessly on both Android and iOS platforms.
- **Easy Integration**: Simple setup and usage with minimal configuration required.
- **Environment Variable Management**: Allows you to define environment variables in a `.env` file and access them in your Flutter app.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Flutter Config Package Tutorial

In this tutorial, we will walk through the setup and usage of the `flutter_config` package in a Flutter application. We will cover platform-specific configurations for both Android and iOS.

## Setup Process

### Step 1: Add Dependency

Add the `flutter_config` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  flutter_config: ^1.0.0
```

Run `flutter pub get` to install the package.

### Step 2: Create a .env File

Create a `.env` file in the root of your Flutter project. This file will contain your environment-specific variables:

```
API_URL=https://api.example.com
API_KEY=your_api_key_here
```

### Step 3: Configure Android

1. Open `android/app/build.gradle`.
2. Add the following lines to the `defaultConfig` block:

```gradle
defaultConfig {
    ...
    resValue "string", "api_url", project.env.get("API_URL")
    resValue "string", "api_key", project.env.get("API_KEY")
}
```

### Step 4: Configure iOS

1. Open `ios/Runner.xcworkspace` in Xcode.
2. Select the Runner project in the Project Navigator.
3. Go to the Build Settings tab.
4. Add the following to the `User-Defined` section:

```
API_URL = $(API_URL)
API_KEY = $(API_KEY)
```

### Step 5: Access Environment Variables in Dart

Use the `FlutterConfig` class to access your environment variables in your Dart code:

```dart
import 'package:flutter_config/flutter_config.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await FlutterConfig.loadEnvVariables();
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    final apiUrl = FlutterConfig.get('API_URL');
    final apiKey = FlutterConfig.get('API_KEY');

    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Flutter Config Example')),
        body: Center(
          child: Text('API URL: $apiUrl\nAPI Key: $apiKey'),
        ),
      ),
    );
  }
}
```

<-- END_TUTORIAL -->

<-- MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_config/flutter_config.dart';

void main() async {
  // Ensure that widget binding is initialized before loading environment variables
  WidgetsFlutterBinding.ensureInitialized();
  
  // Load environment variables from the .env file
  await FlutterConfig.loadEnvVariables();
  
  // Run the main application
  runApp(RealFlutterApp());
}

class RealFlutterApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Retrieve the API URL and API Key from the environment variables
    final apiUrl = FlutterConfig.get('API_URL');
    final apiKey = FlutterConfig.get('API_KEY');

    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Flutter Config Example'), // Set the title of the app bar
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Text('API URL: $apiUrl'), // Display the API URL
              Text('API Key: $apiKey'), // Display the API Key
            ],
          ),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The application starts by ensuring that the widget binding is initialized.
// 2. Environment variables are loaded from the .env file using FlutterConfig.
// 3. The RealFlutterApp widget is run, which builds the main UI of the application.
// 4. The MaterialApp widget is used to set up the app's theme and navigation.
// 5. The Scaffold widget provides the basic structure of the app, including an AppBar and a body.
// 6. The Center widget centers its child widgets, which are two Text widgets displaying the API URL and API Key.
// 7. The FlutterConfig package is used to access the environment variables, demonstrating how to manage configurations securely.
```

<-- END_MAIN -->
```
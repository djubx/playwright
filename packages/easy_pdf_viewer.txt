<-- START_DESCRIPTION -->

Easy PDF Viewer
================

The `easy_pdf_viewer` Flutter package provides a simple and efficient way to display PDF files within your Flutter application. It supports both Android and iOS platforms, making it a versatile solution for developers.

When to Use
------------

This package is ideal for applications that require displaying PDF documents, such as:

* Document viewers
* E-book readers
* Report generators
* Educational resources

Features
--------

* Supports both Android and iOS platforms
* Displays PDF files with high-quality rendering
* Allows for zooming and panning
* Provides a simple and intuitive API

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
----------------

### Step 1: Add the Package to Your Project

Add the following dependency to your `pubspec.yaml` file:
```yml
dependencies:
  easy_pdf_viewer: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:easy_pdf_viewer/easy_pdf_viewer.dart';
```
### Step 3: Load the PDF File

Load the PDF file using the `PdfViewer` widget:
```dart
PdfViewer(
  filePath: 'path/to/your/pdf/file.pdf',
)
```
### Platform-Specific Details

#### Android

* Make sure to add the following permission to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
```
* If you're targeting Android 10 or later, you'll need to add the following code to your `build.gradle` file:
```groovy
android {
  ...
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
}
```
#### iOS

* Make sure to add the following framework to your `Info.plist` file:
```xml
<key>UIFileSharingEnabled</key>
<true/>
```
### Optimizations

* To improve performance, you can use the `PdfViewerController` to preload the PDF file:
```dart
PdfViewerController _controller = PdfViewerController();

@override
void initState() {
  super.initState();
  _controller.loadPdf('path/to/your/pdf/file.pdf');
}
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:easy_pdf_viewer/easy_pdf_viewer.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  PdfViewerController _controller = PdfViewerController();

  @override
  void initState() {
    super.initState();
    _controller.loadPdf('assets/example.pdf');
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Easy PDF Viewer Example'),
        ),
        body: PdfViewer(
          controller: _controller,
          filePath: 'assets/example.pdf',
          onPageChanged: (int page) {
            print('Page changed to $page');
          },
        ),
      ),
    );
  }
}
```

// The application flow is as follows:
// 1. The `RealFlutter` widget is created and run as the main application.
// 2. The `_RealFlutterState` class is created to manage the state of the `RealFlutter` widget.
// 3. In the `initState` method, the `PdfViewerController` is used to preload the PDF file.
// 4. The `PdfViewer` widget is created and displayed on the screen.
// 5. When the user navigates to a different page, the `onPageChanged` callback is called with the new page number.
// 6. The `PdfViewerController` is used to manage the state of the `PdfViewer` widget.

<-- END_MAIN -->
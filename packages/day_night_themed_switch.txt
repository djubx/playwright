<-- START_DESCRIPTION -->

# Day Night Themed Switch Flutter Package
=============================================

The `day_night_themed_switch` Flutter package provides a simple and elegant way to implement a day/night theme switch in your Flutter application. This package allows you to switch between two different themes, typically a light theme for daytime and a dark theme for nighttime.

### When to Use This Package

This package is useful when you want to provide a simple and intuitive way for users to switch between different themes in your application. For example, you can use this package to implement a day/night theme switch in a reading app, a news app, or any other app where users may want to switch between different themes.

### Features

*   Simple and elegant design
*   Easy to use and integrate into your Flutter application
*   Supports both light and dark themes
*   Customizable theme colors and styles

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Using the Day Night Themed Switch Flutter Package
===========================================================

### Step 1: Add the Package to Your Flutter Project

To use the `day_night_themed_switch` package, you need to add it to your Flutter project. You can do this by adding the following line to your `pubspec.yaml` file:

```yml
dependencies:
  day_night_themed_switch: ^1.0.0
```

Then, run `flutter pub get` to get the package.

### Step 2: Import the Package

To use the package, you need to import it into your Dart file. You can do this by adding the following line at the top of your file:

```dart
import 'package:day_night_themed_switch/day_night_themed_switch.dart';
```

### Step 3: Use the Package

To use the package, you can create a `DayNightThemedSwitch` widget and pass in the required properties. For example:

```dart
DayNightThemedSwitch(
  dayTheme: ThemeData(
    brightness: Brightness.light,
    primaryColor: Colors.blue,
  ),
  nightTheme: ThemeData(
    brightness: Brightness.dark,
    primaryColor: Colors.red,
  ),
  onChanged: (bool isNight) {
    // Handle the theme change here
  },
)
```

### Platform-Specific Details

The `day_night_themed_switch` package works on both Android and iOS platforms. However, you may need to configure some platform-specific settings to get the package working correctly.

For example, on Android, you need to add the following line to your `AndroidManifest.xml` file to enable the package to work correctly:

```xml
<application
  ...
  android:hardwareAccelerated="true"
  ...
>
```

On iOS, you need to add the following line to your `Info.plist` file to enable the package to work correctly:

```xml
<key>UIViewControllerBasedStatusBarAppearance</key>
<false/>
```

### Required Configurations and Optimizations

To get the package working correctly, you need to configure some settings and optimize some code. For example, you need to configure the theme colors and styles to match your app's design.

You also need to optimize the code to handle the theme change correctly. For example, you need to update the app's UI to reflect the new theme.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:day_night_themed_switch/day_night_themed_switch.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  bool _isNight = false;

  // Define the day theme
  ThemeData _dayTheme = ThemeData(
    brightness: Brightness.light,
    primaryColor: Colors.blue,
  );

  // Define the night theme
  ThemeData _nightTheme = ThemeData(
    brightness: Brightness.dark,
    primaryColor: Colors.red,
  );

  @override
  Widget build(BuildContext context) {
    // Create a Material app with the day or night theme
    return MaterialApp(
      title: 'Day Night Themed Switch Demo',
      theme: _isNight ? _nightTheme : _dayTheme,
      home: Scaffold(
        appBar: AppBar(
          title: Text('Day Night Themed Switch Demo'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              // Create a DayNightThemedSwitch widget
              DayNightThemedSwitch(
                dayTheme: _dayTheme,
                nightTheme: _nightTheme,
                onChanged: (bool isNight) {
                  // Handle the theme change here
                  setState(() {
                    _isNight = isNight;
                  });
                },
              ),
              SizedBox(height: 20),
              // Display the current theme
              Text(_isNight ? 'Night Theme' : 'Day Theme'),
            ],
          ),
        ),
      ),
    );
  }
}

// The app starts by running the main function, which creates a RealFlutter widget.
// The RealFlutter widget is a stateful widget that maintains the current theme.
// The build method of the RealFlutter widget creates a Material app with the day or night theme.
// The app's UI is updated to reflect the new theme when the user switches between the day and night themes.
// The DayNightThemedSwitch widget is used to switch between the day and night themes.
// The theme change is handled by updating the state of the RealFlutter widget.
```

<-- END_MAIN -->
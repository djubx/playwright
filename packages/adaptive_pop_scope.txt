<-- START_DESCRIPTION -->

# Adaptive Pop Scope Package
The `adaptive_pop_scope` package is a Flutter package that allows you to handle the Android back button and iOS swipe back gesture in a more flexible and customizable way. It provides a simple and easy-to-use API to control the pop behavior of your app.

## When to Use
You can use this package when you want to:

* Handle the Android back button and iOS swipe back gesture in a custom way
* Prevent the app from popping a route when the back button is pressed or the screen is swiped back
* Perform some action when the back button is pressed or the screen is swiped back

## Features
The package provides the following features:

* Customizable pop behavior
* Support for Android back button and iOS swipe back gesture
* Easy-to-use API

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
To use the `adaptive_pop_scope` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  adaptive_pop_scope: ^1.0.0
```
2. Import the package in your Dart file:
```dart
import 'package:adaptive_pop_scope/adaptive_pop_scope.dart';
```
3. Wrap your `MaterialApp` with `AdaptivePopScope`:
```dart
AdaptivePopScope(
  child: MaterialApp(
    // ...
  ),
)
```
4. Use the `AdaptivePopScope` API to control the pop behavior:
```dart
AdaptivePopScope.of(context).setPopCallback((_) {
  // Handle the back button press or swipe back gesture
});
```
### Platform-Specific Details
For Android, you need to add the following code to your `AndroidManifest.xml` file:
```xml
<application
  // ...
  android:hardwareAccelerated="true"
  // ...
>
```
For iOS, you need to add the following code to your `Info.plist` file:
```xml
<key>UIViewControllerBasedStatusBarAppearance</key>
<false/>
```
### Configurations and Optimizations
You can configure the `AdaptivePopScope` to fit your needs. For example, you can set the `popCallback` to null to disable the custom pop behavior.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:adaptive_pop_scope/adaptive_pop_scope.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return AdaptivePopScope(
      child: MaterialApp(
        title: 'Adaptive Pop Scope Demo',
        home: MyHomePage(),
      ),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Adaptive Pop Scope Demo'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            Navigator.push(
              context,
              MaterialPageRoute(builder: (context) => SecondPage()),
            );
          },
          child: Text('Go to Second Page'),
        ),
      ),
    );
  }
}

class SecondPage extends StatefulWidget {
  @override
  _SecondPageState createState() => _SecondPageState();
}

class _SecondPageState extends State<SecondPage> {
  @override
  void initState() {
    super.initState();
    AdaptivePopScope.of(context).setPopCallback((_) {
      // Handle the back button press or swipe back gesture
      print('Back button pressed or screen swiped back');
      // Return false to prevent the app from popping the route
      return false;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Second Page'),
      ),
      body: Center(
        child: Text('This is the second page'),
      ),
    );
  }
}
```

// The app starts with the `MyApp` widget, which wraps the `MaterialApp` with `AdaptivePopScope`.
// The `MyHomePage` widget is the home page of the app, and it contains a button to navigate to the `SecondPage`.
// When the button is pressed, the app navigates to the `SecondPage` using `Navigator.push`.
// In the `SecondPage`, we set the `popCallback` using `AdaptivePopScope.of(context).setPopCallback`.
// When the back button is pressed or the screen is swiped back, the `popCallback` is called.
// In this example, we print a message to the console and return false to prevent the app from popping the route.

// The app flow is as follows:
// 1. The app starts with the `MyApp` widget.
// 2. The user presses the button to navigate to the `SecondPage`.
// 3. The app navigates to the `SecondPage` using `Navigator.push`.
// 4. The user presses the back button or swipes back.
// 5. The `popCallback` is called, and the app prints a message to the console.
// 6. The app does not pop the route because the `popCallback` returns false.

<-- END_MAIN -->
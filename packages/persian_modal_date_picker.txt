```markdown
<!-- START_DESCRIPTION -->
# Overview of the `persian_modal_date_picker` Flutter Package

The `persian_modal_date_picker` package is a specialized Flutter package designed to provide a modal date picker that supports the Persian calendar. This package is particularly useful for applications targeting Persian-speaking users or regions where the Persian calendar is commonly used. 

## When to Use This Package
You should consider using the `persian_modal_date_picker` package in scenarios such as:
- Developing applications for Persian-speaking audiences.
- Creating scheduling or event management apps that require date selection in the Persian calendar.
- Building educational apps that teach about the Persian calendar.

## Key Features
- **Persian Calendar Support**: Allows users to select dates using the Persian calendar format.
- **Modal Interface**: Provides a user-friendly modal interface for date selection.
- **Customizable Appearance**: Offers options to customize the look and feel of the date picker.
- **Easy Integration**: Simple to integrate into existing Flutter applications with minimal setup.

Overall, the `persian_modal_date_picker` package enhances user experience by providing culturally relevant date selection options.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using `persian_modal_date_picker`

## Installation
To use the `persian_modal_date_picker` package, you need to add it to your `pubspec.yaml` file. Open your `pubspec.yaml` and add the following line under dependencies:

```yaml
dependencies:
  persian_modal_date_picker: ^latest_version
```

Make sure to replace `^latest_version` with the latest version available on [pub.dev](https://pub.dev/packages/persian_modal_date_picker).

## Platform-Specific Configuration
### Android
For Android, ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
        ...
    }
}
```

### iOS
For iOS, you may need to set the deployment target in your `ios/Podfile`:

```ruby
platform :ios, '10.0'
```

## Using the Package
To use the `persian_modal_date_picker`, you can follow these steps:

1. Import the package in your Dart file:
   ```dart
   import 'package:persian_modal_date_picker/persian_modal_date_picker.dart';
   ```

2. Create a function to show the date picker:
   ```dart
   void _selectDate(BuildContext context) async {
     final DateTime? pickedDate = await showPersianDatePicker(
       context: context,
       initialDate: DateTime.now(),
       firstDate: DateTime(1390),
       lastDate: DateTime(1500),
     );
     if (pickedDate != null) {
       // Handle the selected date
     }
   }
   ```

3. Call this function from a button or any other widget to trigger the date picker.

With these steps, you can easily integrate the Persian modal date picker into your Flutter application.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using `persian_modal_date_picker`

```dart
import 'package:flutter/material.dart';
import 'package:persian_modal_date_picker/persian_modal_date_picker.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Persian Date Picker Example',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Persian Date Picker'),
        ),
        body: Center(
          child: DatePickerButton(),
        ),
      ),
    );
  }
}

class DatePickerButton extends StatefulWidget {
  @override
  _DatePickerButtonState createState() => _DatePickerButtonState();
}

class _DatePickerButtonState extends State<DatePickerButton> {
  DateTime? selectedDate;

  // Function to show the Persian date picker
  void _selectDate(BuildContext context) async {
    final DateTime? pickedDate = await showPersianDatePicker(
      context: context,
      initialDate: DateTime.now(), // Set the initial date to today
      firstDate: DateTime(1390), // Minimum selectable date
      lastDate: DateTime(1500), // Maximum selectable date
    );
    if (pickedDate != null && pickedDate != selectedDate) {
      setState(() {
        selectedDate = pickedDate; // Update the selected date
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        Text(
          selectedDate == null
              ? 'No date selected!'
              : 'Selected Date: ${selectedDate!.toLocal()}',
          style: TextStyle(fontSize: 20),
        ),
        SizedBox(height: 20),
        ElevatedButton(
          onPressed: () => _selectDate(context), // Trigger the date picker
          child: Text('Select Date'),
        ),
      ],
    );
  }
}

// Application Flow Explanation:
// 1. The main function runs the RealFlutter app.
// 2. The RealFlutter widget builds a MaterialApp with a title and a home Scaffold.
// 3. Inside the Scaffold, a DatePickerButton widget is centered.
// 4. The DatePickerButton widget maintains the selected date state.
// 5. When the button is pressed, the _selectDate function is called.
// 6. The Persian date picker modal appears, allowing the user to select a date.
// 7. If a date is selected, it updates the state and displays the selected date on the screen.
```
<!-- END_MAIN -->
```

This structured blog post provides a comprehensive overview of the `persian_modal_date_picker` package, including its features, setup instructions, and a complete example with detailed comments explaining the application flow.
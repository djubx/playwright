<-- START_DESCRIPTION -->

# Flutter In-Store App Version Checker Package
=============================================

The `flutter_in_store_app_version_checker` package is a Flutter plugin that allows you to check the version of your app on the App Store (for iOS) and Google Play Store (for Android). This package is useful when you want to prompt users to update their app when a new version is available.

### Features

*   Check the current version of your app on the App Store and Google Play Store.
*   Compare the current version with the version on the stores.
*   Prompt users to update their app when a new version is available.

### When to Use This Package

You can use this package in the following scenarios:

*   You want to ensure that users are running the latest version of your app.
*   You want to prompt users to update their app when a new version is available.
*   You want to check the version of your app on the App Store and Google Play Store programmatically.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Package
=============================================

### Step 1: Add the Package to Your Flutter Project

Add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  flutter_in_store_app_version_checker: ^1.0.0
```

Then, run `flutter pub get` to get the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:flutter_in_store_app_version_checker/flutter_in_store_app_version_checker.dart';
```

### Step 3: Initialize the Package

Initialize the package by calling the `init` method:

```dart
await FlutterInStoreAppVersionChecker.init();
```

### Step 4: Check the App Version

Check the app version by calling the `checkVersion` method:

```dart
final version = await FlutterInStoreAppVersionChecker.checkVersion();
```

This method returns a `Version` object that contains the current version of your app on the App Store and Google Play Store.

### Platform-Specific Details

#### Android

On Android, you need to add the following metadata to your `AndroidManifest.xml` file:

```xml
<meta-data
    android:name="com.google.android.gms.version"
    android:value="@integer/google_play_services_version" />
```

#### iOS

On iOS, you need to add the following framework to your `Info.plist` file:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_in_store_app_version_checker/flutter_in_store_app_version_checker.dart';

void main() async {
  // Initialize the package
  await FlutterInStoreAppVersionChecker.init();

  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'App Version Checker Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  String _version = '';

  @override
  void initState() {
    super.initState();
    _checkVersion();
  }

  Future<void> _checkVersion() async {
    // Check the app version
    final version = await FlutterInStoreAppVersionChecker.checkVersion();

    // Update the UI with the version
    setState(() {
      _version = version.toString();
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('App Version Checker Demo'),
      ),
      body: Center(
        child: Text('App Version: $_version'),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app.
// 2. The app initializes the FlutterInStoreAppVersionChecker package.
// 3. The app checks the current version of the app on the App Store and Google Play Store.
// 4. The app updates the UI with the current version.
// 5. The user can see the current version of the app on the screen.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# cli_config Flutter Package: A Comprehensive Overview
=====================================================

The `cli_config` Flutter package is a powerful tool for managing application configurations from the command line. It allows developers to define and manage different configurations for their app, making it easier to switch between different environments, such as development, testing, and production.

### When to Use This Package

This package is particularly useful when:

* You need to switch between different API endpoints for development, testing, and production environments.
* You want to enable or disable certain features in your app based on the environment.
* You need to manage different sets of credentials or API keys for different environments.

### Features

The `cli_config` package offers the following features:

* Define and manage multiple configurations for your app.
* Switch between configurations using a simple command-line interface.
* Support for environment-specific configurations.
* Integration with Flutter's build process.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the cli_config Package
=============================================

### Step 1: Add the Package to Your pubspec.yaml File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  cli_config: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Define Your Configurations

Create a new file called `config.yaml` in the root of your project with the following content:
```yml
development:
  api_endpoint: https://dev.example.com/api
  feature_enabled: true

production:
  api_endpoint: https://example.com/api
  feature_enabled: false
```
This file defines two configurations: `development` and `production`.

### Step 3: Initialize the cli_config Package

In your `main.dart` file, add the following code:
```dart
import 'package:cli_config/cli_config.dart';

void main() {
  CliConfig.init();
  // ...
}
```
This initializes the `cli_config` package and loads the configurations from the `config.yaml` file.

### Step 4: Switch Between Configurations

To switch between configurations, use the following command:
```
flutter run --config development
```
This will run your app with the `development` configuration.

### Platform-Specific Details

* Android: You can use the `--config` option with the `flutter run` command to switch between configurations.
* iOS: You can use the `--config` option with the `flutter run` command to switch between configurations, but you need to add the following code to your `Info.plist` file:
```xml
<key>Config</key>
<string>development</string>
```
This sets the default configuration to `development`.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
// main.dart
import 'package:flutter/material.dart';
import 'package:cli_config/cli_config.dart';

void main() {
  // Initialize the cli_config package
  CliConfig.init();

  // Get the current configuration
  String config = CliConfig.currentConfig;

  // Print the current configuration
  print('Current configuration: $config');

  // Use the current configuration to set the API endpoint
  String apiEndpoint = CliConfig.get('api_endpoint');

  // Print the API endpoint
  print('API endpoint: $apiEndpoint');

  // Use the current configuration to enable or disable a feature
  bool featureEnabled = CliConfig.get('feature_enabled');

  // Print the feature status
  print('Feature enabled: $featureEnabled');

  // Run the app
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'cli_config Example',
      home: Scaffold(
        appBar: AppBar(
          title: Text('cli_config Example'),
        ),
        body: Center(
          child: Text('Hello, World!'),
        ),
      ),
    );
  }
}
```

// The application flow is as follows:
// 1. The `CliConfig.init()` function is called to initialize the `cli_config` package.
// 2. The `CliConfig.currentConfig` property is used to get the current configuration.
// 3. The `CliConfig.get()` function is used to get the API endpoint and feature status from the current configuration.
// 4. The API endpoint and feature status are printed to the console.
// 5. The `MyApp` widget is created and run.

// In summary, this code initializes the `cli_config` package, gets the current configuration, and uses it to set the API endpoint and feature status. It then runs the `MyApp` widget.

<-- END_MAIN -->
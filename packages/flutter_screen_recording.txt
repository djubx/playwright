<-- START_DESCRIPTION -->

# Flutter Screen Recording Package
=====================================

The `flutter_screen_recording` package is a powerful tool for recording the screen of a Flutter application. It provides a simple and easy-to-use API for capturing screen activity, making it ideal for a variety of use cases, such as:

* Creating tutorial videos
* Recording user interactions for testing and debugging purposes
* Generating video content for social media platforms

Key Features:

* Records the entire screen or a specific area
* Supports both Android and iOS platforms
* Allows for customization of video quality, frame rate, and output file format
* Provides a simple and intuitive API for starting and stopping recordings

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `flutter_screen_recording` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_screen_recording: ^1.0.0
```
2. Run `flutter pub get` to install the package.
3. Import the package in your Dart file:
```dart
import 'package:flutter_screen_recording/flutter_screen_recording.dart';
```
### Android Configuration

To use the package on Android, you need to add the following permissions to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.RECORD_AUDIO" />
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
```
### iOS Configuration

To use the package on iOS, you need to add the following lines to your `Info.plist` file:
```xml
<key>NSMicrophoneUsageDescription</key>
<string>This app needs access to the microphone to record audio.</string>
<key>NSPhotoLibraryAddUsageDescription</key>
<string>This app needs access to the photo library to save videos.</string>
```
### Basic Usage

To start recording the screen, use the `startRecording` method:
```dart
await FlutterScreenRecording.startRecording(
  // Set the output file path
  filePath: '/path/to/output/file.mp4',
  // Set the video quality
  quality: VideoQuality.high,
  // Set the frame rate
  frameRate: 30,
);
```
To stop recording, use the `stopRecording` method:
```dart
await FlutterScreenRecording.stopRecording();
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_screen_recording/flutter_screen_recording.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Screen Recording Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  bool _isRecording = false;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Screen Recording Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            // Start recording button
            ElevatedButton(
              onPressed: _startRecording,
              child: Text('Start Recording'),
            ),
            // Stop recording button
            ElevatedButton(
              onPressed: _stopRecording,
              child: Text('Stop Recording'),
            ),
            // Status text
            Text(_isRecording ? 'Recording...' : 'Not recording'),
          ],
        ),
      ),
    );
  }

  // Start recording function
  Future<void> _startRecording() async {
    // Set the output file path
    String filePath = '/path/to/output/file.mp4';
    // Set the video quality
    VideoQuality quality = VideoQuality.high;
    // Set the frame rate
    int frameRate = 30;

    // Start recording
    await FlutterScreenRecording.startRecording(
      filePath: filePath,
      quality: quality,
      frameRate: frameRate,
    );

    // Update the status text
    setState(() {
      _isRecording = true;
    });
  }

  // Stop recording function
  Future<void> _stopRecording() async {
    // Stop recording
    await FlutterScreenRecording.stopRecording();

    // Update the status text
    setState(() {
      _isRecording = false;
    });
  }
}

// Application flow:
// 1. The user opens the app and is presented with a start recording button.
// 2. When the user presses the start recording button, the app starts recording the screen.
// 3. The app displays a status text indicating that it is recording.
// 4. When the user presses the stop recording button, the app stops recording the screen.
// 5. The app displays a status text indicating that it is not recording.
// 6. The user can then view the recorded video at the specified output file path.

// Summary:
// This app demonstrates how to use the Flutter Screen Recording package to record the screen of a Flutter app.
// The app provides a simple and easy-to-use interface for starting and stopping recordings.
// The app also displays a status text indicating whether it is recording or not.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

**Keyboard Utils Fork Flutter Package**
=====================================

The `keyboard_utils_fork` Flutter package is a utility library that provides a simple way to manage keyboard visibility and layout adjustments in Flutter applications. It's a fork of the original `keyboard_utils` package, with additional features and improvements.

**When to Use This Package**
---------------------------

You should use this package when you need to:

* Detect keyboard visibility and adjust your layout accordingly
* Handle keyboard events, such as keyboard show and hide
* Customize keyboard behavior, such as preventing keyboard dismissal

**Features**
------------

* Keyboard visibility detection
* Keyboard event handling (show, hide, etc.)
* Customizable keyboard behavior
* Platform-specific configurations (Android and iOS)

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setup and Usage**
-------------------

### Step 1: Add the Package to Your Pubspec

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  keyboard_utils_fork: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:keyboard_utils_fork/keyboard_utils_fork.dart';
```
### Step 3: Initialize the Package

Initialize the package in your `main` function:
```dart
void main() {
  KeyboardUtilsFork.init();
  runApp(MyApp());
}
```
### Step 4: Use the Package

Use the package to detect keyboard visibility and handle keyboard events:
```dart
class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  bool _isKeyboardVisible = false;

  @override
  void initState() {
    super.initState();
    KeyboardUtilsFork.addKeyboardListener((isVisible) {
      setState(() {
        _isKeyboardVisible = isVisible;
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Keyboard Utils Fork Example'),
      ),
      body: Center(
        child: Text(
          _isKeyboardVisible ? 'Keyboard is visible' : 'Keyboard is not visible',
        ),
      ),
    );
  }
}
```
### Platform-Specific Configurations

For Android, add the following line to your `AndroidManifest.xml` file:
```xml
<application
  ...
  android:windowSoftInputMode="adjustResize"
  ...>
```
For iOS, add the following line to your `Info.plist` file:
```xml
<key>UIKeyboardAppearance</key>
<string>UIKeyboardAppearanceDefault</string>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:keyboard_utils_fork/keyboard_utils_fork.dart';

void main() {
  KeyboardUtilsFork.init();
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Keyboard Utils Fork Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  bool _isKeyboardVisible = false;

  // Step 1: Initialize the keyboard listener
  @override
  void initState() {
    super.initState();
    KeyboardUtilsFork.addKeyboardListener((isVisible) {
      setState(() {
        _isKeyboardVisible = isVisible;
      });
    });
  }

  // Step 2: Build the UI
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Keyboard Utils Fork Example'),
      ),
      body: Center(
        child: Text(
          _isKeyboardVisible ? 'Keyboard is visible' : 'Keyboard is not visible',
        ),
      ),
      // Step 3: Add a text field to trigger the keyboard
      bottomNavigationBar: TextField(
        decoration: InputDecoration(
          labelText: 'Type something',
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user opens the app and the keyboard is not visible.
// 2. The user taps on the text field and the keyboard becomes visible.
// 3. The keyboard listener detects the keyboard visibility change and updates the UI.
// 4. The UI displays the keyboard visibility status.
```

// Final summary:
// The code initializes the keyboard listener and builds the UI.
// When the user interacts with the text field, the keyboard visibility changes.
// The keyboard listener detects the change and updates the UI.
// The UI displays the keyboard visibility status.

<-- END_MAIN -->
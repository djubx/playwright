```markdown
<-- START_DESCRIPTION -->

# Day Night Switcher Flutter Package

The `day_night_switcher` Flutter package is a versatile tool designed to enhance user experience by allowing seamless transitions between day and night themes in your Flutter applications. This package is particularly useful for applications that require a dynamic theme change based on user preference or system settings, such as reading apps, productivity tools, or any app that aims to provide a comfortable viewing experience in varying lighting conditions.

## Features

- **Customizable Switch**: Offers a visually appealing switch widget that can be easily integrated into your app.
- **Smooth Transitions**: Provides smooth animations when toggling between day and night modes.
- **Theme Management**: Simplifies the management of light and dark themes within your app.
- **Platform Compatibility**: Works seamlessly across Android and iOS platforms.

### When to Use

- **User Preference**: Allow users to manually switch between light and dark themes.
- **System Settings**: Automatically adjust themes based on the device's system settings.
- **Time-Based Themes**: Change themes based on the time of day to reduce eye strain.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up Day Night Switcher

In this tutorial, we will walk through the process of setting up the `day_night_switcher` package in a Flutter project. We will cover platform-specific configurations for both Android and iOS to ensure smooth operation.

## Step 1: Add Dependency

First, add the `day_night_switcher` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  day_night_switcher: ^0.3.0
```

Run `flutter pub get` to install the package.

## Step 2: Basic Setup

Create a new Flutter project or open an existing one. Import the package in your Dart file:

```dart
import 'package:day_night_switcher/day_night_switcher.dart';
```

## Step 3: Implement the Switch

Integrate the day-night switcher into your widget tree. Hereâ€™s a simple implementation:

```dart
bool isDarkModeEnabled = false;

DayNightSwitcher(
  isDarkModeEnabled: isDarkModeEnabled,
  onStateChanged: (isDarkMode) {
    setState(() {
      isDarkModeEnabled = isDarkMode;
    });
  },
);
```

## Platform-Specific Details

### Android

Ensure your `AndroidManifest.xml` supports dark mode by setting the appropriate theme:

```xml
<application
    android:theme="@style/Theme.AppCompat.DayNight">
```

### iOS

For iOS, ensure your app supports dark mode by setting the `UIUserInterfaceStyle` in your `Info.plist`:

```xml
<key>UIUserInterfaceStyle</key>
<string>Automatic</string>
```

## Optimizations

- **Performance**: Use `setState` judiciously to avoid unnecessary rebuilds.
- **User Experience**: Provide feedback to users when the theme changes, such as a brief message or animation.

<-- END_TUTORIAL -->

<-- START_MAIN -->

# Complete Example: Flutter Main File

Below is a complete example of a Flutter application using the `day_night_switcher` package. This example demonstrates how to toggle between day and night themes and update the UI accordingly.

```dart
import 'package:flutter/material.dart';
import 'package:day_night_switcher/day_night_switcher.dart';

// Main entry point of the application
void main() {
  runApp(RealFlutter());
}

// Main application widget
class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // State variable to track the current theme mode
  bool isDarkModeEnabled = false;

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      // Use the current theme mode to set the theme
      theme: isDarkModeEnabled ? ThemeData.dark() : ThemeData.light(),
      home: Scaffold(
        appBar: AppBar(
          title: Text('Day Night Switcher Example'),
        ),
        body: Center(
          // DayNightSwitcher widget to toggle theme
          child: DayNightSwitcher(
            isDarkModeEnabled: isDarkModeEnabled,
            onStateChanged: (isDarkMode) {
              // Update the state when the switch is toggled
              setState(() {
                isDarkModeEnabled = isDarkMode;
              });
            },
          ),
        ),
      ),
    );
  }
}
```

// Application Flow Explanation
// 1. The `main` function initializes the app by running the `RealFlutter` widget.
// 2. `RealFlutter` is a stateful widget that manages the theme state.
// 3. The `_RealFlutterState` class contains a boolean `isDarkModeEnabled` to track the current theme.
// 4. The `MaterialApp` widget uses this boolean to decide between `ThemeData.dark()` and `ThemeData.light()`.
// 5. The `Scaffold` widget provides the basic structure with an `AppBar` and a `Center` widget.
// 6. The `DayNightSwitcher` widget is placed in the center, allowing users to toggle the theme.
// 7. When the switch is toggled, `onStateChanged` updates the `isDarkModeEnabled` state, triggering a UI rebuild with the new theme.

<-- END_MAIN -->
```

This blog post provides a comprehensive guide to using the `day_night_switcher` package in Flutter, from setup to implementation, ensuring a smooth transition between themes in your application.
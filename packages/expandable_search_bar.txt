```markdown
<-- START_DESCRIPTION -->

# Expandable Search Bar Flutter Package

The `expandable_search_bar` Flutter package is a versatile and user-friendly widget that allows developers to integrate a search bar with expandable functionality into their Flutter applications. This package is particularly useful in scenarios where space is limited, and a full-sized search bar would clutter the UI. By using an expandable search bar, you can maintain a clean and minimalistic design while still providing users with the ability to search through content efficiently.

## Features

- **Expandable and Collapsible**: The search bar can expand when focused and collapse when not in use, saving valuable screen space.
- **Customizable Appearance**: Developers can customize the appearance of the search bar to match the app's theme, including colors, icons, and animations.
- **Easy Integration**: The package is designed to be easily integrated into existing Flutter applications with minimal setup.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS platforms.

## When to Use

- **E-commerce Apps**: To allow users to search for products without taking up too much screen space.
- **Content-Heavy Apps**: In applications with a lot of content, such as news or blog apps, where users need to search for specific articles or posts.
- **Minimalistic UI Designs**: When the design requires a clean and uncluttered interface.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up the Expandable Search Bar

In this tutorial, we will walk through the process of setting up the `expandable_search_bar` package in a Flutter project. We will cover the installation, configuration, and usage of the package on both Android and iOS platforms.

## Installation

To use the `expandable_search_bar` package, add it to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  expandable_search_bar: ^1.0.0
```

Run `flutter pub get` to install the package.

## Android Configuration

For Android, ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```gradle
android {
    defaultConfig {
        minSdkVersion 21
    }
}
```

## iOS Configuration

For iOS, make sure your `ios/Podfile` has the platform set to at least iOS 10:

```ruby
platform :ios, '10.0'
```

## Using the Package

To use the `expandable_search_bar`, import it into your Dart file:

```dart
import 'package:expandable_search_bar/expandable_search_bar.dart';
```

### Basic Usage

Here is a simple example of how to integrate the `expandable_search_bar` into your app:

```dart
class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Expandable Search Bar Example'),
        actions: [
          ExpandableSearchBar(
            onSearch: (query) {
              // Handle the search query
              print('Searching for: $query');
            },
          ),
        ],
      ),
      body: Center(
        child: Text('Content goes here'),
      ),
    );
  }
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

# Complete Example: Expandable Search Bar in Action

Below is a complete Flutter application demonstrating the key features of the `expandable_search_bar` package.

```dart
import 'package:flutter/material.dart';
import 'package:expandable_search_bar/expandable_search_bar.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Expandable Search Bar Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  String _searchQuery = '';

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Expandable Search Bar Example'),
        actions: [
          // ExpandableSearchBar widget is added to the AppBar actions
          ExpandableSearchBar(
            onSearch: (query) {
              // Update the search query state when a search is performed
              setState(() {
                _searchQuery = query;
              });
            },
            hintText: 'Search...',
            backgroundColor: Colors.white,
            iconColor: Colors.blue,
          ),
        ],
      ),
      body: Center(
        // Display the current search query in the center of the screen
        child: Text(
          _searchQuery.isEmpty ? 'No search query entered' : 'Searching for: $_searchQuery',
          style: TextStyle(fontSize: 18),
        ),
      ),
    );
  }
}
```

// The application starts with the `main` function, which runs the `MyApp` widget.
// `MyApp` is a stateless widget that sets up the MaterialApp with a title and theme.
// The home of the app is set to the `RealFlutter` widget, which is a stateful widget.
// `RealFlutter` contains an `AppBar` with an `ExpandableSearchBar` in its actions.
// The `ExpandableSearchBar` is configured to update the `_searchQuery` state when a search is performed.
// The body of the scaffold displays the current search query or a default message if no query is entered.

<-- END_MAIN -->
```
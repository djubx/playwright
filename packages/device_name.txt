# Device Name Flutter Package

<!-- START_DESCRIPTION -->
## Description

The `device_name` Flutter package is a powerful tool that allows developers to retrieve the name of the device on which their Flutter application is running. This can be particularly useful for applications that require device-specific functionalities, such as logging, analytics, or personalized user experiences. 

### Key Features:
- **Cross-Platform Support**: Works seamlessly on both Android and iOS devices.
- **Simple API**: Easy to use with a straightforward API for fetching device names.
- **Real-Time Updates**: Provides real-time device name retrieval, ensuring that the information is always current.

### When to Use:
- When you need to display the device name in your application for user reference.
- For logging purposes, where identifying the device can help in debugging.
- In analytics, to segment user data based on device types.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
## Tutorial

### Installation

To use the `device_name` package, you need to add it to your `pubspec.yaml` file. Open your `pubspec.yaml` and add the following line under dependencies:

```yaml
dependencies:
  device_name: ^0.2.0
```

Then, run the following command in your terminal to install the package:

```bash
flutter pub get
```

### Platform-Specific Configuration

#### Android
For Android, ensure that your `AndroidManifest.xml` file has the necessary permissions. Open `android/app/src/main/AndroidManifest.xml` and add the following permission:

```xml
<uses-permission android:name="android.permission.READ_PHONE_STATE"/>
```

#### iOS
For iOS, you need to add a usage description in your `Info.plist` file. Open `ios/Runner/Info.plist` and add:

```xml
<key>NSBluetoothAlwaysUsageDescription</key>
<string>This app requires access to Bluetooth to identify the device.</string>
```

### Using the Package

To use the `device_name` package, you can import it into your Dart file:

```dart
import 'package:device_name/device_name.dart';
```

You can then retrieve the device name using the following code snippet:

```dart
String deviceName = await DeviceName.getDeviceName;
```

This will give you the name of the device as a string.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
## Complete Example

```dart
import 'package:flutter/material.dart'; // Importing Flutter material package
import 'package:device_name/device_name.dart'; // Importing device_name package

void main() {
  runApp(RealFlutter()); // Running the RealFlutter app
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState(); // Creating state for the app
}

class _RealFlutterState extends State<RealFlutter> {
  String _deviceName = 'Unknown'; // Initializing device name variable

  @override
  void initState() {
    super.initState(); // Calling the superclass initState
    _getDeviceName(); // Fetching the device name when the app starts
  }

  // Method to get the device name
  Future<void> _getDeviceName() async {
    String deviceName; // Variable to hold the device name
    try {
      deviceName = await DeviceName.getDeviceName; // Fetching device name
    } catch (e) {
      deviceName = 'Failed to get device name'; // Handling error
    }

    // Updating the state with the fetched device name
    setState(() {
      _deviceName = deviceName; // Setting the device name
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Device Name Example'), // App bar title
        ),
        body: Center(
          child: Text(
            'Device Name: $_deviceName', // Displaying the device name
            style: TextStyle(fontSize: 20), // Text style
          ),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts by running the RealFlutter widget.
// 2. In the RealFlutter state, the _deviceName variable is initialized to 'Unknown'.
// 3. The _getDeviceName method is called in initState to fetch the device name.
// 4. The device name is retrieved asynchronously using DeviceName.getDeviceName.
// 5. If successful, the device name is stored in the _deviceName variable; otherwise, an error message is set.
// 6. The state is updated, triggering a rebuild of the UI to display the device name.
// 7. The device name is shown in the center of the screen.
```

<!-- END_MAIN -->

## Summary
In this blog post, we explored the `device_name` Flutter package, which allows developers to easily retrieve the name of the device on which their application is running. We covered the installation process, platform-specific configurations, and provided a complete example demonstrating how to use the package effectively. The application flow was explained step-by-step, ensuring clarity on how the device name is fetched and displayed. This package is particularly useful for applications that require device identification for logging, analytics, or user personalization.
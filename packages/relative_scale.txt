<-- START_DESCRIPTION -->

Relative Scale Flutter Package
==============================

The `relative_scale` Flutter package is a utility library that allows you to easily scale your app's UI elements relative to the screen size. This package is particularly useful when you want to create responsive designs that adapt to different screen sizes and orientations.

When to Use
------------

You should use this package when:

* You want to create a responsive design that adapts to different screen sizes and orientations.
* You want to scale your UI elements relative to the screen size.
* You want to simplify your layout code and avoid using complex calculations to determine the size of your UI elements.

Features
--------

* Easy to use: Simply wrap your UI elements with the `RelativeScale` widget and specify the scale factor.
* Flexible: Supports scaling based on screen width, height, or both.
* Customizable: Allows you to specify a custom scale factor for each UI element.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
----------------

To use the `relative_scale` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  relative_scale: ^1.0.0
```
2. Import the package in your Dart file:
```dart
import 'package:relative_scale/relative_scale.dart';
```
3. Wrap your UI elements with the `RelativeScale` widget:
```dart
RelativeScale(
  scaleFactor: 0.5, // Scale factor (0.0 to 1.0)
  child: Text('Hello World'),
)
```
Platform-Specific Details
-------------------------

* Android: No additional configuration required.
* iOS: No additional configuration required.

Configurations and Optimizations
--------------------------------

* You can customize the scale factor for each UI element by specifying a different `scaleFactor` value.
* You can also use the `RelativeScale` widget to scale entire layouts or screens.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:relative_scale/relative_scale.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Relative Scale Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Relative Scale Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            // Scale a text widget to 50% of the screen width
            RelativeScale(
              scaleFactor: 0.5,
              child: Text('Hello World'),
            ),
            // Scale a button widget to 25% of the screen height
            RelativeScale(
              scaleFactor: 0.25,
              child: ElevatedButton(
                onPressed: () {},
                child: Text('Click me'),
              ),
            ),
            // Scale an entire layout to 75% of the screen width
            RelativeScale(
              scaleFactor: 0.75,
              child: Row(
                children: <Widget>[
                  Text('Item 1'),
                  Text('Item 2'),
                  Text('Item 3'),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// Application flow:
// 1. The app starts and displays the MyHomePage widget.
// 2. The MyHomePage widget contains a Column widget with three children.
// 3. The first child is a Text widget scaled to 50% of the screen width using the RelativeScale widget.
// 4. The second child is an ElevatedButton widget scaled to 25% of the screen height using the RelativeScale widget.
// 5. The third child is a Row widget scaled to 75% of the screen width using the RelativeScale widget.
// 6. The Row widget contains three Text widgets displaying the items.
```

// Summary: The code demonstrates the usage of the RelativeScale widget to scale UI elements relative to the screen size. The app displays a column with three children, each scaled to a different percentage of the screen width or height. The RelativeScale widget simplifies the layout code and allows for easy creation of responsive designs. 

<-- END_MAIN -->
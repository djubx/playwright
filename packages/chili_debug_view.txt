<-- START_DESCRIPTION -->

**Introduction to chili_debug_view**
=====================================

The `chili_debug_view` package is a powerful debugging tool for Flutter applications. It provides a simple and intuitive way to visualize and inspect the widget tree, allowing developers to quickly identify and fix issues.

**When to use chili_debug_view**
-------------------------------

* When you need to understand the widget tree structure of your application
* When you want to inspect the properties of a specific widget
* When you need to debug layout issues or unexpected behavior

**Key Features**
----------------

* Visualize the widget tree in a hierarchical structure
* Inspect the properties of individual widgets
* Search for specific widgets by name or type
* Highlight widgets in the app UI for easy identification

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setting up chili_debug_view**
=============================

To use `chili_debug_view` in your Flutter project, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  chili_debug_view: ^1.0.0
```
2. Run `flutter pub get` to install the package
3. Import the package in your Dart file:
```dart
import 'package:chili_debug_view/chili_debug_view.dart';
```
**Platform-Specific Configurations**
-----------------------------------

### Android

No additional configurations are required for Android.

### iOS

To use `chili_debug_view` on iOS, you need to add the following lines to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```
This allows the app to load the debug view UI.

**Using chili_debug_view**
-------------------------

To use `chili_debug_view`, simply wrap your app's `MaterialApp` widget with the `ChiliDebugView` widget:
```dart
ChiliDebugView(
  child: MaterialApp(
    title: 'My App',
    home: MyHomePage(),
  ),
)
```
This will enable the debug view for your app.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:chili_debug_view/chili_debug_view.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Wrap the app with the ChiliDebugView widget
    return ChiliDebugView(
      child: MaterialApp(
        title: 'Real Flutter',
        home: MyHomePage(),
      ),
    );
  }
}

class MyHomePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Create a sample widget tree
    return Scaffold(
      appBar: AppBar(
        title: Text('Real Flutter'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text('Hello, World!'),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                // Use the debug view to inspect the widget tree
                ChiliDebugView.of(context).showDebugView();
              },
              child: Text('Show Debug View'),
            ),
          ],
        ),
      ),
    );
  }
}

// The app flow is as follows:
// 1. The user runs the app and sees the sample widget tree.
// 2. The user clicks the "Show Debug View" button to inspect the widget tree.
// 3. The ChiliDebugView widget is used to visualize the widget tree in a hierarchical structure.
// 4. The user can inspect the properties of individual widgets and search for specific widgets by name or type.
// 5. The user can highlight widgets in the app UI for easy identification.
```

// In summary, the code flows as follows:
// The user runs the app and sees the sample widget tree.
// The user clicks the "Show Debug View" button to inspect the widget tree.
// The ChiliDebugView widget is used to visualize the widget tree in a hierarchical structure.
// The user can inspect the properties of individual widgets and search for specific widgets by name or type.
// The user can highlight widgets in the app UI for easy identification.

<-- END_MAIN -->
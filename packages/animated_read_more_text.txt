```markdown
<-- START_DESCRIPTION -->

# Animated Read More Text Flutter Package

The `animated_read_more_text` Flutter package is a versatile tool designed to enhance the user experience by providing a smooth, animated transition for text expansion and contraction. This package is particularly useful in scenarios where you want to display a preview of a long text and allow users to expand it to read more, without overwhelming them with too much information at once.

## When to Use

- **Blog or Article Previews**: Display a snippet of an article with the option to read more.
- **Product Descriptions**: Show a brief description of a product with the ability to expand for more details.
- **User Reviews**: Allow users to read a summary of reviews with the option to expand for full reviews.

## Features

- **Smooth Animation**: Provides a seamless transition between expanded and collapsed states.
- **Customizable**: Offers various customization options for text style, animation duration, and more.
- **Easy Integration**: Simple to integrate into existing Flutter applications with minimal setup.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using Animated Read More Text

In this tutorial, we will walk through the process of setting up and using the `animated_read_more_text` package in a Flutter application. We will cover platform-specific configurations for both Android and iOS to ensure smooth operation.

## Setup Process

### Step 1: Add Dependency

Add the package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  animated_read_more_text: ^1.0.0
```

Run `flutter pub get` to install the package.

### Step 2: Import the Package

In your Dart file, import the package:

```dart
import 'package:animated_read_more_text/animated_read_more_text.dart';
```

### Step 3: Platform-Specific Configurations

#### Android

Ensure your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```gradle
android {
    defaultConfig {
        minSdkVersion 21
    }
}
```

#### iOS

No specific configurations are required for iOS, but ensure your deployment target is set to iOS 9.0 or higher in your `ios/Podfile`:

```ruby
platform :ios, '9.0'
```

### Step 4: Using the Package

To use the `animated_read_more_text` package, wrap your text widget with `AnimatedReadMoreText` and configure its properties:

```dart
AnimatedReadMoreText(
  text: "This is a long text that needs to be truncated...",
  trimLines: 2,
  style: TextStyle(fontSize: 16),
  trimMode: TrimMode.Line,
  trimCollapsedText: 'Read more',
  trimExpandedText: 'Read less',
  moreStyle: TextStyle(fontSize: 14, fontWeight: FontWeight.bold, color: Colors.blue),
  lessStyle: TextStyle(fontSize: 14, fontWeight: FontWeight.bold, color: Colors.blue),
)
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:animated_read_more_text/animated_read_more_text.dart';

void main() {
  runApp(RealFlutterApp());
}

class RealFlutterApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Animated Read More Text Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: ReadMoreDemo(),
    );
  }
}

class ReadMoreDemo extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Read More Text Example'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: <Widget>[
            // AnimatedReadMoreText widget to display expandable text
            AnimatedReadMoreText(
              text: "Flutter is Google's UI toolkit for building natively compiled applications for mobile, web, and desktop from a single codebase. It is used by developers and organizations around the world, and is free and open source.",
              trimLines: 3, // Number of lines to show before truncating
              style: TextStyle(fontSize: 16), // Style for the main text
              trimMode: TrimMode.Line, // Mode of trimming text
              trimCollapsedText: 'Read more', // Text to show when collapsed
              trimExpandedText: 'Read less', // Text to show when expanded
              moreStyle: TextStyle(fontSize: 14, fontWeight: FontWeight.bold, color: Colors.blue), // Style for 'Read more'
              lessStyle: TextStyle(fontSize: 14, fontWeight: FontWeight.bold, color: Colors.blue), // Style for 'Read less'
            ),
          ],
        ),
      ),
    );
  }
}

// Application Flow:
// 1. The main function initializes the app by running RealFlutterApp.
// 2. RealFlutterApp is a StatelessWidget that sets up the MaterialApp with a title and theme.
// 3. The home property of MaterialApp is set to ReadMoreDemo, which is another StatelessWidget.
// 4. ReadMoreDemo builds a Scaffold with an AppBar and a body containing a Column.
// 5. Inside the Column, the AnimatedReadMoreText widget is used to display a long text with a 'Read more'/'Read less' toggle.
// 6. The text is initially truncated to 3 lines, and users can expand it by clicking 'Read more'.
// 7. The styles for the main text and the toggle text ('Read more'/'Read less') are customizable.
```

<-- END_MAIN -->
```
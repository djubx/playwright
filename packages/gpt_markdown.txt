<-- START_DESCRIPTION -->
# gpt_markdown Flutter Package
The `gpt_markdown` Flutter package is a powerful tool for rendering Markdown text in Flutter applications. It provides a simple and efficient way to display Markdown-formatted text, making it ideal for applications that require displaying user-generated content, documentation, or other types of formatted text.

## Features
* Supports most Markdown syntax elements, including headers, bold and italic text, lists, links, and images
* Customizable styling and layout options
* Supports rendering of inline HTML elements
* Works on both Android and iOS platforms

## When to Use
The `gpt_markdown` package is perfect for applications that require displaying formatted text, such as:

* Documentation and user manuals
* User-generated content, such as comments or forum posts
* Product descriptions and details
* Blog posts and articles

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->
# Setting Up and Using the gpt_markdown Package
To use the `gpt_markdown` package in your Flutter application, follow these steps:

### Step 1: Add the Package to Your pubspec.yaml File
Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  gpt_markdown: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package
Import the package in your Dart file:
```dart
import 'package:gpt_markdown/gpt_markdown.dart';
```
### Step 3: Use the MarkdownWidget
Use the `MarkdownWidget` to render your Markdown text:
```dart
MarkdownWidget(
  data: '# Hello World!',
)
```
This will render the Markdown text as a header.

### Platform-Specific Details
The `gpt_markdown` package works on both Android and iOS platforms. However, there are some platform-specific details to keep in mind:

* On Android, the package uses the `android.text.Html` class to render inline HTML elements. This means that some HTML elements may not be supported on older Android versions.
* On iOS, the package uses the `NSAttributedString` class to render formatted text. This means that some attributes, such as font sizes and colors, may not be supported on older iOS versions.

### Configurations and Optimizations
The `gpt_markdown` package provides several configuration options to customize the rendering of Markdown text. These include:

* `style`: A `TextStyle` object that defines the default text style for the rendered text.
* `layout`: A `Layout` object that defines the layout of the rendered text.
* `htmlParser`: An `HtmlParser` object that defines how inline HTML elements are parsed and rendered.

<-- END_TUTORIAL -->

<-- START_MAIN -->
```dart
import 'package:flutter/material.dart';
import 'package:gpt_markdown/gpt_markdown.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'gpt_markdown Example',
      home: Scaffold(
        appBar: AppBar(
          title: Text('gpt_markdown Example'),
        ),
        body: Padding(
          padding: const EdgeInsets.all(16.0),
          child: MarkdownWidget(
            data: '''
# Hello World!
This is a paragraph of text.

* This is a list item.
* This is another list item.

## This is a header.
This is a paragraph of text with a link: [Google](https://www.google.com)

### This is a subheader.
This is a paragraph of text with an image: ![Image](https://picsum.photos/200/300)
''',
          ),
        ),
      ),
    );
  }
}
// The application flow is as follows:
// 1. The user runs the application.
// 2. The `RealFlutter` widget is rendered, which contains a `MaterialApp` widget.
// 3. The `MaterialApp` widget contains a `Scaffold` widget, which defines the basic layout of the application.
// 4. The `Scaffold` widget contains an `AppBar` widget, which defines the title bar of the application.
// 5. The `Scaffold` widget also contains a `Padding` widget, which contains the `MarkdownWidget`.
// 6. The `MarkdownWidget` is rendered with the provided Markdown text.
// 7. The Markdown text is parsed and rendered as formatted text.
// 8. The user can view the rendered text and interact with it as needed.
```
<-- END_MAIN -->
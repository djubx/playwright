<-- START_DESCRIPTION -->

# eth_sig_util Flutter Package
================================

The `eth_sig_util` Flutter package is a utility library for working with Ethereum signatures in Flutter applications. It provides a set of functions for generating, verifying, and manipulating Ethereum signatures, as well as utilities for working with Ethereum addresses and transactions.

## Features

* Generate and verify Ethereum signatures using the `ecrecover` and `ecsign` functions
* Manipulate Ethereum signatures using the `toBuffer` and `fromBuffer` functions
* Work with Ethereum addresses using the `addressFromPublicKey` and `addressFromPrivateKey` functions
* Work with Ethereum transactions using the `transactionFromBuffer` and `transactionToBuffer` functions

## When to Use

The `eth_sig_util` package is useful for any Flutter application that needs to work with Ethereum signatures, addresses, or transactions. This includes:

* Cryptocurrency wallets and exchanges
* Decentralized applications (dApps)
* Blockchain-based games and services

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
================

## Step 1: Add the Package to Your Project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  eth_sig_util: ^1.0.0
```
Then run `flutter pub get` to install the package.

## Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:eth_sig_util/eth_sig_util.dart';
```
## Step 3: Use the Package

Use the package's functions to generate, verify, and manipulate Ethereum signatures, addresses, and transactions. For example:
```dart
void main() {
  // Generate a new Ethereum address
  final address = EthSigUtil.addressFromPrivateKey('0x1234567890abcdef');

  // Generate a new Ethereum signature
  final signature = EthSigUtil.ecsign('0x1234567890abcdef', 'Hello, World!');

  // Verify the signature
  final isValid = EthSigUtil.ecrecover(signature, 'Hello, World!');
  print(isValid); // prints: true
}
```
## Platform-Specific Details

### Android

On Android, the `eth_sig_util` package uses the `android.security.keystore` API to store and retrieve Ethereum private keys. This API is only available on Android 6.0 (API level 23) and later.

### iOS

On iOS, the `eth_sig_util` package uses the `Security` framework to store and retrieve Ethereum private keys. This framework is only available on iOS 10.0 and later.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:eth_sig_util/eth_sig_util.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Ethereum Signature Utility',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _privateKeyController = TextEditingController();
  final _messageController = TextEditingController();
  final _signatureController = TextEditingController();

  void _generateSignature() {
    // Get the private key and message from the text fields
    final privateKey = _privateKeyController.text;
    final message = _messageController.text;

    // Generate the signature using the ecsign function
    final signature = EthSigUtil.ecsign(privateKey, message);

    // Set the signature text field to the generated signature
    _signatureController.text = signature;
  }

  void _verifySignature() {
    // Get the signature, message, and private key from the text fields
    final signature = _signatureController.text;
    final message = _messageController.text;
    final privateKey = _privateKeyController.text;

    // Verify the signature using the ecrecover function
    final isValid = EthSigUtil.ecrecover(signature, message);

    // Show a dialog with the result
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Verification Result'),
        content: Text(isValid ? 'The signature is valid' : 'The signature is invalid'),
        actions: [
          TextButton(
            child: Text('OK'),
            onPressed: () => Navigator.of(context).pop(),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Ethereum Signature Utility'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Column(
          children: [
            TextField(
              controller: _privateKeyController,
              decoration: InputDecoration(
                labelText: 'Private Key',
                border: OutlineInputBorder(),
              ),
            ),
            SizedBox(height: 20),
            TextField(
              controller: _messageController,
              decoration: InputDecoration(
                labelText: 'Message',
                border: OutlineInputBorder(),
              ),
            ),
            SizedBox(height: 20),
            TextField(
              controller: _signatureController,
              decoration: InputDecoration(
                labelText: 'Signature',
                border: OutlineInputBorder(),
              ),
            ),
            SizedBox(height: 20),
            Row(
              children: [
                ElevatedButton(
                  onPressed: _generateSignature,
                  child: Text('Generate Signature'),
                ),
                SizedBox(width: 20),
                ElevatedButton(
                  onPressed: _verifySignature,
                  child: Text('Verify Signature'),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user enters their private key and message in the text fields.
// 2. The user clicks the "Generate Signature" button, which calls the _generateSignature function.
// 3. The _generateSignature function uses the ecsign function from the eth_sig_util package to generate a signature based on the private key and message.
// 4. The generated signature is displayed in the signature text field.
// 5. The user clicks the "Verify Signature" button, which calls the _verifySignature function.
// 6. The _verifySignature function uses the ecrecover function from the eth_sig_util package to verify the signature based on the signature, message, and private key.
// 7. The result of the verification is displayed in a dialog box.

// In summary, this application allows users to generate and verify Ethereum signatures using the eth_sig_util package.
```

<-- END_MAIN -->
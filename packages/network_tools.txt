<-- START_DESCRIPTION -->

# Network Tools Flutter Package
================================

The `network_tools` Flutter package provides a set of tools for working with network connections in Flutter applications. It allows you to easily check the network status, get the current network type, and more.

## When to Use

This package is useful when you need to:

* Check if the device is connected to the internet
* Get the current network type (e.g. Wi-Fi, cellular)
* Monitor changes in the network status

## Features

* Get the current network status
* Get the current network type
* Monitor changes in the network status

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
================

## Step 1: Add the Package to Your Project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  network_tools: ^1.0.0
```
Then, run `flutter pub get` to install the package.

## Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:network_tools/network_tools.dart';
```
## Step 3: Use the Package

Use the `NetworkTools` class to access the network tools:
```dart
NetworkTools networkTools = NetworkTools();
```
### Android-Specific Details

On Android, you need to add the following permission to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
```
### iOS-Specific Details

On iOS, you need to add the following line to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:network_tools/network_tools.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Network Tools Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  NetworkTools _networkTools = NetworkTools();
  String _networkStatus = '';
  String _networkType = '';

  @override
  void initState() {
    super.initState();
    _initNetworkTools();
  }

  Future<void> _initNetworkTools() async {
    // Get the current network status
    _networkStatus = await _networkTools.getNetworkStatus();
    // Get the current network type
    _networkType = await _networkTools.getNetworkType();
    setState(() {});
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Network Tools Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text('Network Status: $_networkStatus'),
            Text('Network Type: $_networkType'),
          ],
        ),
      ),
    );
  }
}

// Application flow:
// 1. The app starts and initializes the NetworkTools class.
// 2. The app gets the current network status and type using the NetworkTools class.
// 3. The app displays the network status and type on the screen.
// 4. The app monitors changes in the network status and updates the display accordingly.

// Summary:
// This code demonstrates how to use the NetworkTools class to get the current network status and type.
// It also shows how to monitor changes in the network status and update the display accordingly.
```

<-- END_MAIN -->
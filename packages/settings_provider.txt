# Understanding the "locally" Flutter Package

## <-- START_DESCRIPTION -->

### Description

The "locally" Flutter package is designed to simplify the management of local data storage in Flutter applications. It provides a straightforward API for storing and retrieving data locally, making it an excellent choice for developers who need to persist user preferences, application settings, or any other data that should remain available even after the app is closed.

### When to Use

You might consider using the "locally" package in scenarios such as:
- Storing user preferences (e.g., theme settings, language selection).
- Caching data fetched from a remote server to improve performance.
- Saving application state to restore it later.

### Features

- **Simple API**: The package offers an easy-to-use interface for data storage and retrieval.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS.
- **Data Types**: Supports various data types, including strings, integers, and lists.
- **Asynchronous Operations**: Utilizes asynchronous methods for data operations, ensuring smooth UI performance.

## <-- END_DESCRIPTION -->

## <-- START_TUTORIAL -->

### Tutorial

#### Installation

To add the "locally" package to your Flutter project, include it in your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  locally: ^1.0.0  # Check for the latest version on pub.dev
```

Run `flutter pub get` to install the package.

#### Platform-Specific Configuration

**For Android:**
- Ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21.

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

**For iOS:**
- No additional configuration is required for basic usage. However, ensure that your iOS deployment target is set appropriately in `ios/Podfile`.

#### Basic Usage

1. **Import the Package**: Start by importing the package in your Dart file.

```dart
import 'package:locally/locally.dart';
```

2. **Initialize Locally**: Before using the package, initialize it in your main function.

```dart
void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Locally.init();
  runApp(MyApp());
}
```

3. **Storing Data**: Use the `set` method to store data.

```dart
await Locally.set('username', 'JohnDoe');
```

4. **Retrieving Data**: Use the `get` method to retrieve data.

```dart
String? username = await Locally.get('username');
```

5. **Removing Data**: Use the `remove` method to delete data.

```dart
await Locally.remove('username');
```

## <-- END_TUTORIAL -->

## <-- START_MAIN -->

### Complete Example

```dart
import 'package:flutter/material.dart';
import 'package:locally/locally.dart';

void main() async {
  // Ensure Flutter binding is initialized before using Locally
  WidgetsFlutterBinding.ensureInitialized();
  
  // Initialize the Locally package
  await Locally.init();
  
  // Run the main application
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Locally Example',
      home: HomeScreen(),
    );
  }
}

class HomeScreen extends StatefulWidget {
  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  String _username = '';

  @override
  void initState() {
    super.initState();
    // Load the username from local storage when the screen initializes
    _loadUsername();
  }

  // Function to load the username from local storage
  void _loadUsername() async {
    String? username = await Locally.get('username');
    setState(() {
      _username = username ?? 'Guest'; // Default to 'Guest' if no username is found
    });
  }

  // Function to save the username to local storage
  void _saveUsername(String username) async {
    await Locally.set('username', username);
    setState(() {
      _username = username; // Update the local state
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Locally Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text('Hello, $_username!'), // Display the username
            SizedBox(height: 20),
            TextField(
              onSubmitted: _saveUsername, // Save username on submission
              decoration: InputDecoration(
                labelText: 'Enter your username',
                border: OutlineInputBorder(),
              ),
            ),
          ],
        ),
      ),
    );
  }
}
```

### Application Flow Explanation

// The application starts by initializing the Flutter engine and the Locally package.
// The `MyApp` widget is created, which sets up the MaterialApp and the HomeScreen.
// In the `HomeScreen`, the `_loadUsername` method is called during `initState` to retrieve the username from local storage.
// If a username is found, it is displayed; otherwise, it defaults to 'Guest'.
// The user can enter a new username in the TextField, which triggers the `_saveUsername` method on submission.
// This method saves the new username to local storage and updates the displayed username accordingly.

## <-- END_MAIN -->

### Summary

The "locally" Flutter package provides a simple and effective way to manage local data storage in Flutter applications. With its easy-to-use API and cross-platform support, it is an excellent choice for developers looking to persist user data. The provided example demonstrates how to set up the package, store and retrieve data, and manage application state effectively.
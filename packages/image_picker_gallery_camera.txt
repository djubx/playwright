<-- START_DESCRIPTION -->
# Image Picker Gallery Camera Package
=====================================

The `image_picker_gallery_camera` package is a powerful Flutter package that allows users to pick images from their device's gallery or take new photos using the camera. This package provides a simple and efficient way to handle image selection and capture in Flutter applications.

### When to Use This Package

This package is ideal for applications that require users to upload or share images, such as social media platforms, e-commerce apps, or photo editing tools.

### Features

*   Pick images from the device's gallery
*   Take new photos using the camera
*   Support for both Android and iOS platforms
*   Customizable image picker interface
*   Option to compress images for efficient storage and transfer

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Package
=============================================

### Step 1: Add the Package to Your Flutter Project

Add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  image_picker_gallery_camera: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:image_picker_gallery_camera/image_picker_gallery_camera.dart';
```

### Step 3: Use the Package

Use the `ImagePickerGalleryCamera` class to pick images or take new photos:

```dart
class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  File _image;

  Future<void> _pickImage() async {
    final File image = await ImagePickerGalleryCamera.pickImage(
      context: context,
      source: ImageSource.gallery,
    );
    setState(() {
      _image = image;
    });
  }

  Future<void> _takePhoto() async {
    final File image = await ImagePickerGalleryCamera.pickImage(
      context: context,
      source: ImageSource.camera,
    );
    setState(() {
      _image = image;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Image Picker Gallery Camera'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            if (_image != null)
              Image.file(_image)
            else
              Text('No image selected'),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _pickImage,
              child: Text('Pick Image from Gallery'),
            ),
            SizedBox(height: 10),
            ElevatedButton(
              onPressed: _takePhoto,
              child: Text('Take New Photo'),
            ),
          ],
        ),
      ),
    );
  }
}
```

### Platform-Specific Details

*   **Android:** Make sure to add the following permissions to your `AndroidManifest.xml` file:

    ```xml
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
<uses-permission android:name="android.permission.CAMERA" />
```

*   **iOS:** Make sure to add the following permissions to your `Info.plist` file:

    ```xml
<key>NSPhotoLibraryUsageDescription</key>
<string>This app needs photo library access to pick images.</string>
<key>NSCameraUsageDescription</key>
<string>This app needs camera access to take new photos.</string>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->
```dart
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:image_picker_gallery_camera/image_picker_gallery_camera.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Image Picker Gallery Camera Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  File _image;

  // Step 1: Define a function to pick an image from the gallery
  Future<void> _pickImage() async {
    // Step 2: Use the ImagePickerGalleryCamera class to pick an image
    final File image = await ImagePickerGalleryCamera.pickImage(
      context: context,
      source: ImageSource.gallery,
    );
    // Step 3: Update the state with the selected image
    setState(() {
      _image = image;
    });
  }

  // Step 4: Define a function to take a new photo
  Future<void> _takePhoto() async {
    // Step 5: Use the ImagePickerGalleryCamera class to take a new photo
    final File image = await ImagePickerGalleryCamera.pickImage(
      context: context,
      source: ImageSource.camera,
    );
    // Step 6: Update the state with the new photo
    setState(() {
      _image = image;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Image Picker Gallery Camera Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            // Step 7: Display the selected image or a default message
            if (_image != null)
              Image.file(_image)
            else
              Text('No image selected'),
            SizedBox(height: 20),
            // Step 8: Add a button to pick an image from the gallery
            ElevatedButton(
              onPressed: _pickImage,
              child: Text('Pick Image from Gallery'),
            ),
            SizedBox(height: 10),
            // Step 9: Add a button to take a new photo
            ElevatedButton(
              onPressed: _takePhoto,
              child: Text('Take New Photo'),
            ),
          ],
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user opens the app and is presented with two buttons: "Pick Image from Gallery" and "Take New Photo".
// 2. When the user clicks the "Pick Image from Gallery" button, the _pickImage function is called.
// 3. The _pickImage function uses the ImagePickerGalleryCamera class to pick an image from the gallery.
// 4. The selected image is then updated in the state using setState.
// 5. When the user clicks the "Take New Photo" button, the _takePhoto function is called.
// 6. The _takePhoto function uses the ImagePickerGalleryCamera class to take a new photo.
// 7. The new photo is then updated in the state using setState.
// 8. The selected image or new photo is displayed on the screen.
```
<-- END_MAIN -->
# Pinger Internet Status Flutter Package

<!-- START_DESCRIPTION -->
## Description

The `pinger_internet_status` Flutter package is a lightweight and efficient solution for monitoring internet connectivity in Flutter applications. It provides real-time updates on the internet status, allowing developers to create responsive applications that can react to changes in connectivity. This package is particularly useful for applications that require a stable internet connection, such as chat applications, streaming services, or any app that relies on real-time data.

### Key Features:
- **Real-time Connectivity Monitoring**: Automatically detects changes in internet connectivity and notifies the application.
- **Customizable Ping Settings**: Allows developers to configure the ping interval and timeout settings.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS platforms.
- **Simple API**: Easy to integrate and use within existing Flutter applications.

### When to Use:
- When building applications that require constant internet access.
- For apps that need to provide feedback to users about their connectivity status.
- In scenarios where you want to optimize data usage based on connectivity.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
## Tutorial

### Installation

To use the `pinger_internet_status` package, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  pinger_internet_status: ^latest_version
```

Make sure to replace `^latest_version` with the latest version available on [pub.dev](https://pub.dev/packages/pinger_internet_status).

### Platform-Specific Configuration

#### Android
1. Open the `AndroidManifest.xml` file located at `android/app/src/main/AndroidManifest.xml`.
2. Ensure you have the following permissions:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>
```

#### iOS
1. Open the `Info.plist` file located at `ios/Runner/Info.plist`.
2. Add the following key to request permission for network access:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

### Usage

To use the package, you need to import it into your Dart file:

```dart
import 'package:pinger_internet_status/pinger_internet_status.dart';
```

You can then create an instance of the `RealFlutter` class to start monitoring the internet status.

```dart
class RealFlutter {
  final PingerInternetStatus pinger = PingerInternetStatus();

  void startMonitoring() {
    pinger.startListening();
    pinger.onStatusChanged.listen((status) {
      // Handle the internet status change
      print('Internet status: $status');
    });
  }
}
```

Make sure to call `startMonitoring()` in your app's initialization phase, such as in the `initState()` method of your main widget.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
## Complete Example

```dart
import 'package:flutter/material.dart';
import 'package:pinger_internet_status/pinger_internet_status.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Pinger Internet Status Example',
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final PingerInternetStatus pinger = PingerInternetStatus();
  String internetStatus = 'Unknown';

  @override
  void initState() {
    super.initState();
    startMonitoring(); // Start monitoring internet status
  }

  void startMonitoring() {
    pinger.startListening(); // Start listening for internet status changes
    pinger.onStatusChanged.listen((status) {
      setState(() {
        internetStatus = status; // Update the internet status
      });
    });
  }

  @override
  void dispose() {
    pinger.stopListening(); // Stop listening when the widget is disposed
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Internet Status Monitor'),
      ),
      body: Center(
        child: Text(
          'Internet Status: $internetStatus', // Display the current internet status
          style: TextStyle(fontSize: 24),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The application starts with the main function, which runs the MyApp widget.
// 2. MyApp builds a MaterialApp with the title 'Pinger Internet Status Example'.
// 3. The RealFlutter widget is created, which is a StatefulWidget.
// 4. In the _RealFlutterState class, we initialize the PingerInternetStatus instance.
// 5. The startMonitoring method is called in initState to begin listening for internet status changes.
// 6. When the internet status changes, the onStatusChanged stream updates the internetStatus variable.
// 7. The UI is rebuilt to display the current internet status in the center of the screen.
// 8. When the widget is disposed, we stop listening to prevent memory leaks.
```

<!-- END_MAIN -->

## Summary
In this blog post, we explored the `pinger_internet_status` Flutter package, which provides a straightforward way to monitor internet connectivity in your applications. We covered the installation process, platform-specific configurations, and provided a complete example demonstrating how to implement the package effectively. By following the steps outlined, you can easily integrate internet status monitoring into your Flutter applications, enhancing user experience and responsiveness.
```markdown
<-- START_DESCRIPTION -->

# flutter_expandable_fab: A Comprehensive Overview

The `flutter_expandable_fab` package is a versatile and user-friendly Flutter package designed to create expandable floating action buttons (FABs) in your Flutter applications. This package is particularly useful when you need to provide multiple actions from a single FAB, enhancing the user interface by saving space and offering a clean, organized look.

## When to Use flutter_expandable_fab

- **Multiple Actions**: When your application requires multiple actions that can be grouped under a single FAB.
- **Space Optimization**: To save screen space by collapsing multiple buttons into one expandable FAB.
- **Enhanced User Experience**: To provide a modern and interactive user interface element that is both functional and visually appealing.

## Key Features

- **Customizable Appearance**: Easily customize the look and feel of the FAB and its children.
- **Smooth Animations**: Provides smooth and customizable animations for expanding and collapsing the FAB.
- **Flexible Positioning**: Allows flexible positioning of the FAB on the screen.
- **Platform Compatibility**: Works seamlessly on both Android and iOS platforms.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using flutter_expandable_fab

In this tutorial, we will walk through the setup process for the `flutter_expandable_fab` package and demonstrate how to integrate it into your Flutter project.

## Setup Process

1. **Add Dependency**: First, add the `flutter_expandable_fab` package to your `pubspec.yaml` file.

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     flutter_expandable_fab: ^1.0.0
   ```

2. **Install Packages**: Run `flutter pub get` to install the new package.

3. **Import the Package**: Import the package in your Dart file where you plan to use the expandable FAB.

   ```dart
   import 'package:flutter_expandable_fab/flutter_expandable_fab.dart';
   ```

## Platform-Specific Details

### Android

- Ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21 to support the animations.

  ```gradle
  defaultConfig {
      minSdkVersion 21
  }
  ```

### iOS

- No specific configurations are required for iOS, but ensure your deployment target is set to a version that supports Flutter.

## Using the Package

To use the `flutter_expandable_fab`, wrap your main widget with `ExpandableFab` and define the actions you want to include.

```dart
ExpandableFab(
  distance: 100.0,
  children: [
    ActionButton(
      icon: Icon(Icons.add),
      onPressed: () {
        // Define action
      },
    ),
    ActionButton(
      icon: Icon(Icons.edit),
      onPressed: () {
        // Define action
      },
    ),
  ],
)
```

<-- END_TUTORIAL -->

<-- MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_expandable_fab/flutter_expandable_fab.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Expandable FAB Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Expandable FAB Example'),
      ),
      body: Center(
        child: Text('Press the FAB to expand actions'),
      ),
      floatingActionButtonLocation: FloatingActionButtonLocation.centerDocked,
      floatingActionButton: ExpandableFab(
        distance: 100.0, // Distance between the main FAB and the action buttons
        children: [
          ActionButton(
            icon: Icon(Icons.add),
            onPressed: () {
              // Action for the first button
              print('Add button pressed');
            },
          ),
          ActionButton(
            icon: Icon(Icons.edit),
            onPressed: () {
              // Action for the second button
              print('Edit button pressed');
            },
          ),
          ActionButton(
            icon: Icon(Icons.delete),
            onPressed: () {
              // Action for the third button
              print('Delete button pressed');
            },
          ),
        ],
      ),
    );
  }
}

// Application Flow:
// 1. The application starts with the `main()` function, which runs `MyApp`.
// 2. `MyApp` is a stateless widget that sets up the MaterialApp with a title and theme.
// 3. The home screen of the app is set to `RealFlutter`, another stateless widget.
// 4. `RealFlutter` builds a Scaffold with an AppBar and a centered text widget.
// 5. The `ExpandableFab` is used as the `floatingActionButton` of the Scaffold.
// 6. The `ExpandableFab` contains three `ActionButton` widgets, each with an icon and an `onPressed` callback.
// 7. When the main FAB is pressed, it expands to show the action buttons.
// 8. Each action button performs a specific task, such as printing a message to the console when pressed.

```

<-- END_MAIN -->
```
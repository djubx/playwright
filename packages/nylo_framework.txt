<-- START_DESCRIPTION -->

Nylo Framework for Flutter
==========================

The Nylo framework is a micro-framework for building Flutter applications. It provides a simple and easy-to-use architecture for building robust and scalable applications.

Key Features
------------

*   Simple and easy-to-use architecture
*   Robust and scalable
*   Supports both Android and iOS platforms

When to Use
------------

The Nylo framework is suitable for building small to medium-sized applications. It's ideal for prototyping and proof-of-concept projects.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Configuration
-----------------------

### Step 1: Add the Nylo Framework to Your Project

Add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  nylo_framework: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Create a New Nylo App

Create a new file called `main.dart` and add the following code:

```dart
import 'package:flutter/material.dart';
import 'package:nylo_framework/nylo_framework.dart';

void main() {
  runApp(RealFlutter());
}
```

### Step 3: Configure the Nylo App

Create a new file called `app_config.dart` and add the following code:

```dart
import 'package:nylo_framework/nylo_framework.dart';

class AppConfig extends NyloConfig {
  @override
  String get baseUrl => 'https://api.example.com';

  @override
  String get apiVersion => 'v1';
}
```

### Step 4: Create a New Nylo Controller

Create a new file called `home_controller.dart` and add the following code:

```dart
import 'package:flutter/material.dart';
import 'package:nylo_framework/nylo_framework.dart';

class HomeController extends NyloController {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Home'),
      ),
      body: Center(
        child: Text('Welcome to the home page'),
      ),
    );
  }
}
```

### Step 5: Add the Nylo Controller to the App

Open the `main.dart` file and add the following code:

```dart
import 'package:flutter/material.dart';
import 'package:nylo_framework/nylo_framework.dart';
import 'package:real_flutter/app_config.dart';
import 'package:real_flutter/home_controller.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return NyloApp(
      config: AppConfig(),
      home: HomeController(),
    );
  }
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:nylo_framework/nylo_framework.dart';
import 'package:real_flutter/app_config.dart';
import 'package:real_flutter/home_controller.dart';

void main() {
  // Run the RealFlutter app
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  // Create a new instance of the RealFlutter app
  @override
  Widget build(BuildContext context) {
    // Return a new NyloApp instance with the AppConfig and HomeController
    return NyloApp(
      // Use the AppConfig as the config for the NyloApp
      config: AppConfig(),
      // Use the HomeController as the home page for the NyloApp
      home: HomeController(),
    );
  }
}

// This is the main application flow:
// 
// 1. The RealFlutter app is run using the runApp function.
// 2. The RealFlutter app creates a new instance of the NyloApp with the AppConfig and HomeController.
// 3. The NyloApp uses the AppConfig to configure the app and the HomeController to render the home page.
// 4. The HomeController renders the home page with a Scaffold, AppBar, and Center widget.
// 5. The home page is displayed to the user.

// This is the end of the main application flow.
```

<-- END_MAIN -->
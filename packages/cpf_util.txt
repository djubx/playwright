<-- START_DESCRIPTION -->

# cpf_util Flutter Package
The cpf_util package is a utility library for Flutter that provides a simple way to validate and format Brazilian CPF (Cadastro de Pessoas FÃ­sicas) numbers. It can be used to validate user input, format CPF numbers for display, and generate random CPF numbers for testing purposes.

## When to Use
This package is useful when developing applications that require user input of CPF numbers, such as:

* User registration forms
* Payment processing systems
* Government services

## Features

* Validates CPF numbers using the official algorithm
* Formats CPF numbers for display (e.g., 123.456.789-01)
* Generates random CPF numbers for testing purposes

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up cpf_util
To use the cpf_util package, add it to your pubspec.yaml file:

```yml
dependencies:
  cpf_util: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Platform-Specific Details
No platform-specific configurations are required for this package.

## Using cpf_util
To use the cpf_util package, import it into your Dart file:

```dart
import 'package:cpf_util/cpf_util.dart';
```

You can then use the `CPFUtil` class to validate and format CPF numbers:

```dart
void main() {
  String cpf = '12345678901';
  if (CPFUtil.isValid(cpf)) {
    print('CPF is valid');
  } else {
    print('CPF is invalid');
  }
  
  String formattedCpf = CPFUtil.format(cpf);
  print('Formatted CPF: $formattedCpf');
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:cpf_util/cpf_util.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final _cpfController = TextEditingController();
  String _formattedCpf = '';
  bool _isValid = false;

  // Step 1: Create a text field to input CPF number
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('CPF Util Example'),
        ),
        body: Padding(
          padding: const EdgeInsets.all(20.0),
          child: Column(
            children: [
              TextField(
                controller: _cpfController,
                decoration: InputDecoration(
                  labelText: 'CPF Number',
                  border: OutlineInputBorder(),
                ),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  // Step 2: Validate CPF number when button is pressed
                  String cpf = _cpfController.text;
                  if (CPFUtil.isValid(cpf)) {
                    // Step 3: Format CPF number if it is valid
                    _formattedCpf = CPFUtil.format(cpf);
                    _isValid = true;
                  } else {
                    _isValid = false;
                  }
                  setState(() {});
                },
                child: Text('Validate CPF'),
              ),
              SizedBox(height: 20),
              // Step 4: Display formatted CPF number and validity status
              Text(
                _isValid
                    ? 'CPF is valid: $_formattedCpf'
                    : 'CPF is invalid',
                style: TextStyle(fontSize: 20),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Application flow:
// 1. User inputs CPF number in the text field.
// 2. When the "Validate CPF" button is pressed, the CPF number is validated using CPFUtil.isValid().
// 3. If the CPF number is valid, it is formatted using CPFUtil.format() and stored in _formattedCpf.
// 4. The validity status and formatted CPF number (if valid) are displayed on the screen.
// The application uses setState() to update the UI when the button is pressed.

// Final summary: This code creates a simple Flutter application that takes a CPF number as input, validates it using the cpf_util package, and displays the formatted CPF number and validity status on the screen.

```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Variable App Icon Flutter Package
=====================================

The `variable_app_icon` Flutter package allows developers to change the app icon dynamically. This feature is useful when you want to provide users with a customizable app experience.

### When to Use This Package

*   When you want to provide users with a customizable app experience.
*   When you want to change the app icon based on the app's state or user's preference.
*   When you want to provide a feature to change the app icon to match the device's theme or color scheme.

### Features

*   Change the app icon dynamically.
*   Supports both Android and iOS platforms.
*   Easy to use and integrate into your existing Flutter app.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Using the Variable App Icon Flutter Package
=====================================================

### Step 1: Add the Package to Your Project

Add the `variable_app_icon` package to your `pubspec.yaml` file:

```yml
dependencies:
  variable_app_icon: ^1.0.0
```

Then, run `flutter pub get` to get the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:variable_app_icon/variable_app_icon.dart';
```

### Step 3: Change the App Icon

Use the `changeAppIcon` function to change the app icon:

```dart
await VariableAppIcon.changeAppIcon(iconName: 'new_icon');
```

Replace `'new_icon'` with the name of the icon you want to use.

### Platform-Specific Details

#### Android

*   Make sure to add the icons in the `android/app/src/main/res/mipmap` directory.
*   The icon name should be without the extension (e.g., `.png`).

#### iOS

*   Make sure to add the icons in the `ios/Runner/Assets.xcassets/AppIcon.appiconset` directory.
*   The icon name should be without the extension (e.g., `.png`).

### Required Configurations or Optimizations

*   Make sure to handle the case when the app icon is not changed successfully.
*   You can use the `onError` callback to handle any errors that may occur during the icon change process.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:variable_app_icon/variable_app_icon.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Variable App Icon Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  String _currentIcon = 'default_icon';

  void _changeAppIcon() async {
    // Change the app icon to 'new_icon'
    await VariableAppIcon.changeAppIcon(iconName: 'new_icon');

    // Update the current icon
    setState(() {
      _currentIcon = 'new_icon';
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Variable App Icon Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Current Icon: $_currentIcon',
              style: TextStyle(fontSize: 24),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _changeAppIcon,
              child: Text('Change App Icon'),
            ),
          ],
        ),
      ),
    );
  }
}

// The app starts by displaying the current icon name and a button to change the app icon.
// When the user clicks the button, the _changeAppIcon function is called.
// This function changes the app icon to 'new_icon' using the VariableAppIcon.changeAppIcon method.
// After the icon is changed, the current icon name is updated and the UI is rebuilt to reflect the new icon name.
// If any errors occur during the icon change process, they are handled by the onError callback.
```

<-- END_MAIN -->
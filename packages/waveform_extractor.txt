```markdown
<!-- START_DESCRIPTION -->
# Waveform Extractor Flutter Package

The **waveform_extractor** Flutter package is a powerful tool designed for developers who need to visualize audio waveforms in their applications. This package allows you to extract and display waveforms from audio files, making it ideal for music players, audio editing apps, or any application that requires audio visualization.

## When to Use This Package

You might consider using the waveform_extractor package in scenarios such as:
- Building a music player that displays the waveform of the currently playing track.
- Creating an audio editing application where users can visualize and manipulate audio clips.
- Developing educational tools that help users understand sound waves and audio properties.

## Features

- **Waveform Extraction**: Extracts waveforms from various audio formats.
- **Customizable Display**: Offers options to customize the appearance of the waveform.
- **Performance Optimizations**: Efficiently handles large audio files without significant performance hits.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS platforms.

With these features, the waveform_extractor package provides a robust solution for audio visualization needs in Flutter applications.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Waveform Extractor Package

## Step 1: Adding the Dependency

To get started, you need to add the waveform_extractor package to your Flutter project. Open your `pubspec.yaml` file and add the following line under dependencies:

```yaml
dependencies:
  waveform_extractor: ^1.0.0
```

Make sure to run `flutter pub get` to install the package.

## Step 2: Platform-Specific Configuration

### Android Configuration

For Android, ensure that your `android/app/build.gradle` file has the following configurations:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21 // Ensure this is set to at least 21
    }
}
```

### iOS Configuration

For iOS, you may need to add permissions to your `Info.plist` file to access audio files:

```xml
<key>NSMicrophoneUsageDescription</key>
<string>We need access to your microphone for audio recording.</string>
<key>NSAppleMusicUsageDescription</key>
<string>We need access to your music library to extract audio.</string>
```

## Step 3: Using the Package

Now that you have set up the package, you can start using it in your Flutter application. Below is a simple example of how to extract and display a waveform from an audio file.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using the Waveform Extractor

```dart
import 'package:flutter/material.dart';
import 'package:waveform_extractor/waveform_extractor.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Waveform Extractor Example',
      home: WaveformPage(),
    );
  }
}

class WaveformPage extends StatefulWidget {
  @override
  _WaveformPageState createState() => _WaveformPageState();
}

class _WaveformPageState extends State<WaveformPage> {
  // Variable to hold the waveform data
  List<double> _waveformData = [];

  @override
  void initState() {
    super.initState();
    // Load the waveform data from an audio file
    _loadWaveform();
  }

  // Function to load waveform data
  Future<void> _loadWaveform() async {
    // Specify the path to your audio file
    String audioFilePath = 'assets/audio/sample.mp3';
    
    // Extract the waveform data
    List<double> waveform = await WaveformExtractor.extractWaveform(audioFilePath);
    
    // Update the state with the extracted waveform data
    setState(() {
      _waveformData = waveform;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Waveform Extractor Example'),
      ),
      body: Center(
        child: _waveformData.isNotEmpty
            ? WaveformDisplay(data: _waveformData) // Display the waveform
            : CircularProgressIndicator(), // Show loading indicator while loading
      ),
    );
  }
}

// Custom widget to display the waveform
class WaveformDisplay extends StatelessWidget {
  final List<double> data;

  WaveformDisplay({required this.data});

  @override
  Widget build(BuildContext context) {
    return CustomPaint(
      size: Size(double.infinity, 200), // Set the size of the waveform display
      painter: WaveformPainter(data: data),
    );
  }
}

// Custom painter to draw the waveform
class WaveformPainter extends CustomPainter {
  final List<double> data;

  WaveformPainter({required this.data});

  @override
  void paint(Canvas canvas, Size size) {
    final paint = Paint()
      ..color = Colors.blue
      ..style = PaintingStyle.fill;

    // Draw the waveform
    for (int i = 0; i < data.length - 1; i++) {
      double x1 = (i / data.length) * size.width;
      double y1 = (1 - data[i]) * size.height; // Invert the y-axis
      double x2 = ((i + 1) / data.length) * size.width;
      double y2 = (1 - data[i + 1]) * size.height;

      canvas.drawLine(Offset(x1, y1), Offset(x2, y2), paint);
    }
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) {
    return true; // Repaint whenever the data changes
  }
}
```

```
// Explanation of the application flow:

// 1. The application starts with the main function, which runs the RealFlutter widget.
// 2. The RealFlutter widget sets up a MaterialApp with a title and a home page (WaveformPage).
// 3. In the WaveformPage, we initialize the state and load the waveform data from an audio file in the initState method.
// 4. The _loadWaveform function uses the WaveformExtractor to extract waveform data from the specified audio file.
// 5. Once the waveform data is loaded, the state is updated, triggering a rebuild of the widget.
// 6. The build method checks if the waveform data is available. If it is, it displays the waveform using the WaveformDisplay widget; otherwise, it shows a loading indicator.
// 7. The WaveformDisplay widget uses a CustomPainter (WaveformPainter) to draw the waveform on the screen.
// 8. The WaveformPainter iterates through the waveform data and draws lines between points to create the visual representation of the audio waveform.
```
<!-- END_MAIN -->
``` 

This structured blog provides a comprehensive overview of the waveform_extractor package, guiding users through its features, setup, and practical implementation in a Flutter application.
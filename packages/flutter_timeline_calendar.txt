<-- START_DESCRIPTION -->

# Flutter Timeline Calendar Package
=====================================

The `flutter_timeline_calendar` package is a powerful and customizable Flutter widget that allows you to display a timeline calendar in your app. It's perfect for apps that require a calendar-based interface, such as scheduling, planning, or tracking events.

### When to Use This Package

* When you need to display a calendar-based interface in your app.
* When you want to allow users to select dates or date ranges.
* When you need to display events or appointments on a calendar.

### Features

* Customizable calendar layout and design.
* Support for multiple date selection and date range selection.
* Ability to display events or appointments on the calendar.
* Compatible with both Android and iOS platforms.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `flutter_timeline_calendar` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_timeline_calendar: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:flutter_timeline_calendar/flutter_timeline_calendar.dart';
```
### Step 3: Create a Timeline Calendar Widget

Create a `TimelineCalendar` widget and customize its properties as needed:
```dart
TimelineCalendar(
  startDate: DateTime.now(),
  endDate: DateTime.now().add(Duration(days: 30)),
  selectedDate: DateTime.now(),
  onDateSelected: (date) {
    print('Selected date: $date');
  },
)
```
### Platform-Specific Details

* Android: No additional setup required.
* iOS: No additional setup required.

### Configurations and Optimizations

* You can customize the calendar layout and design by using the various properties provided by the `TimelineCalendar` widget.
* You can optimize the performance of the calendar by using the `cacheExtent` property to limit the number of dates displayed.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_timeline_calendar/flutter_timeline_calendar.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Timeline Calendar Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  DateTime _selectedDate = DateTime.now();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Timeline Calendar Demo'),
      ),
      body: Center(
        child: TimelineCalendar(
          startDate: DateTime.now(),
          endDate: DateTime.now().add(Duration(days: 30)),
          selectedDate: _selectedDate,
          onDateSelected: (date) {
            setState(() {
              _selectedDate = date;
            });
            print('Selected date: $date');
          },
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app and is presented with a timeline calendar.
// 2. The user selects a date on the calendar.
// 3. The `onDateSelected` callback is triggered, and the selected date is printed to the console.
// 4. The selected date is updated in the app's state, and the calendar is rebuilt to reflect the new selection.
// 5. The user can continue to select dates on the calendar, and the app will update accordingly.

// Final summary: This code demonstrates the basic usage of the `flutter_timeline_calendar` package. It creates a timeline calendar and allows the user to select dates. The selected date is printed to the console and updated in the app's state.
```

<-- END_MAIN -->
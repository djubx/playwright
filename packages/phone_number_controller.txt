```markdown
<!-- START_DESCRIPTION -->
# Overview of the phone_number_controller Flutter Package

The `phone_number_controller` package is a powerful tool for managing phone number input in Flutter applications. It provides a user-friendly way to format, validate, and manipulate phone numbers, making it an essential package for apps that require user contact information. 

## When to Use This Package
You should consider using the `phone_number_controller` package in scenarios such as:
- Building forms that require phone number input.
- Validating phone numbers to ensure they meet specific formats.
- Formatting phone numbers for display purposes.

## Key Features
- **Input Formatting**: Automatically formats phone numbers as users type.
- **Validation**: Validates phone numbers against various formats.
- **International Support**: Supports multiple country codes and formats.
- **Customizable**: Allows developers to customize the input behavior and appearance.

This package simplifies the process of handling phone numbers, ensuring that your application can manage user input effectively and accurately.
<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using phone_number_controller

## Installation
To get started with the `phone_number_controller` package, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  phone_number_controller: ^latest_version
```

Make sure to replace `^latest_version` with the most recent version available on [pub.dev](https://pub.dev/packages/phone_number_controller).

## Platform-Specific Configuration

### Android
For Android, ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file:

```gradle
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

### iOS
For iOS, you may need to add permissions in your `Info.plist` file if you plan to access the user's contacts or phone capabilities:

```xml
<key>NSContactsUsageDescription</key>
<string>This app requires access to your contacts.</string>
```

## Using the Package
To use the `phone_number_controller`, you can create a simple form with a text field for phone number input. Hereâ€™s how to implement it:

1. Import the package in your Dart file:

```dart
import 'package:phone_number_controller/phone_number_controller.dart';
```

2. Create a `PhoneNumberController` instance and use it in a `TextField`:

```dart
PhoneNumberController phoneController = PhoneNumberController();
```

3. Use the controller in your widget:

```dart
TextField(
  controller: phoneController,
  decoration: InputDecoration(
    labelText: 'Phone Number',
    hintText: 'Enter your phone number',
  ),
  keyboardType: TextInputType.phone,
);
```

This setup will allow you to handle phone number input effectively, with automatic formatting and validation.
<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of phone_number_controller

```dart
import 'package:flutter/material.dart';
import 'package:phone_number_controller/phone_number_controller.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Phone Number Controller Example',
      home: PhoneNumberScreen(),
    );
  }
}

class PhoneNumberScreen extends StatelessWidget {
  // Create an instance of PhoneNumberController
  final PhoneNumberController phoneController = PhoneNumberController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Phone Number Input'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            // TextField for phone number input
            TextField(
              controller: phoneController,
              decoration: InputDecoration(
                labelText: 'Phone Number',
                hintText: 'Enter your phone number',
                border: OutlineInputBorder(),
              ),
              keyboardType: TextInputType.phone,
            ),
            SizedBox(height: 20),
            // Button to print the formatted phone number
            ElevatedButton(
              onPressed: () {
                // Print the formatted phone number to console
                print('Formatted Phone Number: ${phoneController.text}');
              },
              child: Text('Submit'),
            ),
          ],
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the MyApp widget.
// 2. MyApp builds a MaterialApp with a title and sets PhoneNumberScreen as the home widget.
// 3. PhoneNumberScreen contains a TextField for phone number input, controlled by PhoneNumberController.
// 4. When the user types in the TextField, the phone number is automatically formatted.
// 5. The user can press the 'Submit' button to print the formatted phone number to the console.
```
<!-- END_MAIN -->
``` 

This structured approach provides a comprehensive overview of the `phone_number_controller` package, guiding developers through its features, setup, and practical usage in a Flutter application.
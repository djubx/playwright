<-- START_DESCRIPTION -->

# Agora Token Service Flutter Package
=====================================

The Agora Token Service Flutter package provides a simple and secure way to manage Agora.io tokens in your Flutter application. This package allows you to generate, renew, and manage tokens for Agora.io services such as video and audio conferencing, live streaming, and more.

## When to Use This Package
---------------------------

You should use this package when you need to integrate Agora.io services into your Flutter application and require a secure and efficient way to manage tokens.

## Features
------------

*   Generate tokens for Agora.io services
*   Renew tokens before they expire
*   Manage multiple tokens for different Agora.io services
*   Secure token storage using encryption

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Agora Token Service Flutter Package
====================================================================

## Step 1: Add the Package to Your Flutter Project
------------------------------------------------

Add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  agora_token_service: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Step 2: Import the Package
---------------------------

Import the package in your Dart file:

```dart
import 'package:agora_token_service/agora_token_service.dart';
```

## Step 3: Initialize the Agora Token Service
------------------------------------------

Initialize the Agora Token Service with your Agora.io app ID and app certificate:

```dart
AgoraTokenService _agoraTokenService = AgoraTokenService(
  appId: 'YOUR_APP_ID',
  appCertificate: 'YOUR_APP_CERTIFICATE',
);
```

## Step 4: Generate a Token
-------------------------

Generate a token for an Agora.io service:

```dart
String token = await _agoraTokenService.generateToken(
  channelName: 'YOUR_CHANNEL_NAME',
  uid: 0,
  expirationTimeInSeconds: 3600,
);
```

## Step 5: Renew a Token
----------------------

Renew a token before it expires:

```dart
String renewedToken = await _agoraTokenService.renewToken(
  token: token,
  expirationTimeInSeconds: 3600,
);
```

## Platform-Specific Details
---------------------------

### Android

*   Add the following permissions to your `AndroidManifest.xml` file:

    ```xml
<uses-permission android:name="android.permission.INTERNET" />
```

### iOS

*   Add the following lines to your `Info.plist` file:

    ```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:agora_token_service/agora_token_service.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Agora Token Service Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _appIdController = TextEditingController();
  final _appCertificateController = TextEditingController();
  final _channelNameController = TextEditingController();
  final _tokenController = TextEditingController();

  AgoraTokenService _agoraTokenService;

  @override
  void initState() {
    super.initState();
    _agoraTokenService = AgoraTokenService(
      appId: '',
      appCertificate: '',
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Agora Token Service Demo'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Column(
          children: [
            TextField(
              controller: _appIdController,
              decoration: InputDecoration(
                labelText: 'App ID',
                border: OutlineInputBorder(),
              ),
            ),
            SizedBox(height: 10),
            TextField(
              controller: _appCertificateController,
              decoration: InputDecoration(
                labelText: 'App Certificate',
                border: OutlineInputBorder(),
              ),
            ),
            SizedBox(height: 10),
            TextField(
              controller: _channelNameController,
              decoration: InputDecoration(
                labelText: 'Channel Name',
                border: OutlineInputBorder(),
              ),
            ),
            SizedBox(height: 10),
            ElevatedButton(
              onPressed: () async {
                // Initialize the Agora Token Service
                _agoraTokenService = AgoraTokenService(
                  appId: _appIdController.text,
                  appCertificate: _appCertificateController.text,
                );

                // Generate a token
                String token = await _agoraTokenService.generateToken(
                  channelName: _channelNameController.text,
                  uid: 0,
                  expirationTimeInSeconds: 3600,
                );

                // Display the generated token
                _tokenController.text = token;
              },
              child: Text('Generate Token'),
            ),
            SizedBox(height: 10),
            TextField(
              controller: _tokenController,
              decoration: InputDecoration(
                labelText: 'Generated Token',
                border: OutlineInputBorder(),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user enters their Agora.io app ID and app certificate.
// 2. The user enters the channel name for which they want to generate a token.
// 3. When the user clicks the "Generate Token" button, the Agora Token Service is initialized with the provided app ID and app certificate.
// 4. The Agora Token Service generates a token for the specified channel name and user ID (0 in this case).
// 5. The generated token is displayed in the "Generated Token" text field.
// 6. The user can then use this token to join the channel.

// Note: This is a basic example and does not include error handling or token renewal.
// In a real-world application, you would want to handle errors and exceptions properly and implement token renewal to ensure uninterrupted service.

```

<-- END_MAIN -->
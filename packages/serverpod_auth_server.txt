# serverpod_auth_server Flutter Package

<!-- START_DESCRIPTION -->
## Description

The `serverpod_auth_server` package is a powerful authentication solution designed for Flutter applications that require secure user authentication and management. This package is particularly useful for developers building applications that need to handle user sign-ups, logins, and session management seamlessly. 

### When to Use This Package
- When you need a robust authentication system for your Flutter app.
- If you are building applications that require user registration and login functionalities.
- When you want to manage user sessions and roles effectively.

### Key Features
- **User Registration**: Easily register new users with customizable fields.
- **Login and Logout**: Securely log users in and out of the application.
- **Session Management**: Handle user sessions with ease, including token management.
- **Role-Based Access Control**: Implement role-based permissions for different user types.
- **Integration with Serverpod**: Works seamlessly with the Serverpod backend framework for a complete solution.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
## Tutorial

### Setup Process

To get started with the `serverpod_auth_server` package, follow these steps:

1. **Add Dependency**: Open your `pubspec.yaml` file and add the package:

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     serverpod_auth_server: ^latest_version
   ```

   Replace `latest_version` with the most recent version of the package.

2. **Install Packages**: Run the following command in your terminal to install the new dependency:

   ```bash
   flutter pub get
   ```

3. **Platform-Specific Configuration**:
   - **Android**: Ensure that your `android/app/build.gradle` file has the correct minSdkVersion set (at least 21).
   - **iOS**: Open your `ios/Runner/Info.plist` file and add any necessary permissions for network access.

4. **Initialize the Package**: In your main application file, initialize the package with your server configuration.

### Example Configuration

Here’s how you can set up the package in your Flutter application:

```dart
import 'package:flutter/material.dart';
import 'package:serverpod_auth_server/serverpod_auth_server.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Serverpod Auth Example',
      home: AuthHome(),
    );
  }
}
```

In this example, we import the necessary packages and set up a basic Flutter application structure. 

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
## Complete Example

Here’s a complete example of a Flutter application using the `serverpod_auth_server` package:

```dart
import 'package:flutter/material.dart';
import 'package:serverpod_auth_server/serverpod_auth_server.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Serverpod Auth Example',
      home: AuthHome(),
    );
  }
}

class AuthHome extends StatefulWidget {
  @override
  _AuthHomeState createState() => _AuthHomeState();
}

class _AuthHomeState extends State<AuthHome> {
  final TextEditingController _emailController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();
  String _message = '';

  // Function to handle user login
  Future<void> _login() async {
    try {
      // Attempt to log in the user with the provided email and password
      final result = await AuthServer.login(
        email: _emailController.text,
        password: _passwordController.text,
      );

      // If successful, update the message
      setState(() {
        _message = 'Login successful: ${result.userId}';
      });
    } catch (e) {
      // If there's an error, update the message
      setState(() {
        _message = 'Login failed: $e';
      });
    }
  }

  // Function to handle user registration
  Future<void> _register() async {
    try {
      // Attempt to register the user with the provided email and password
      final result = await AuthServer.register(
        email: _emailController.text,
        password: _passwordController.text,
      );

      // If successful, update the message
      setState(() {
        _message = 'Registration successful: ${result.userId}';
      });
    } catch (e) {
      // If there's an error, update the message
      setState(() {
        _message = 'Registration failed: $e';
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Serverpod Auth Example'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            TextField(
              controller: _emailController,
              decoration: InputDecoration(labelText: 'Email'),
            ),
            TextField(
              controller: _passwordController,
              decoration: InputDecoration(labelText: 'Password'),
              obscureText: true,
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _login,
              child: Text('Login'),
            ),
            ElevatedButton(
              onPressed: _register,
              child: Text('Register'),
            ),
            SizedBox(height: 20),
            Text(_message),
          ],
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the MyApp class, which sets up the MaterialApp.
// 2. The AuthHome widget is displayed, which contains text fields for email and password.
// 3. When the user clicks the 'Login' button, the _login function is called.
// 4. The _login function attempts to log in the user using the AuthServer.login method.
// 5. If successful, it updates the message to indicate a successful login; otherwise, it shows an error.
// 6. Similarly, the 'Register' button calls the _register function, which registers the user.
// 7. The app displays messages based on the success or failure of login and registration attempts.
```

<!-- END_MAIN -->

## Summary
In this blog post, we explored the `serverpod_auth_server` package, which provides a comprehensive solution for user authentication in Flutter applications. We covered the setup process, including platform-specific configurations, and provided a complete example demonstrating how to implement user login and registration functionalities. The application flow was explained step-by-step through comments in the code, making it easier for developers to understand how to integrate this package into their projects. 

This package is ideal for developers looking to implement secure authentication mechanisms in their Flutter applications, leveraging the power of Serverpod for backend integration.
```markdown
<-- START_DESCRIPTION -->

# Avatar Stack Flutter Package: An Overview

The `avatar_stack` Flutter package is a versatile and user-friendly library designed to display a stack of circular avatars. This package is particularly useful in scenarios where you need to show a group of users or participants, such as in chat applications, collaborative tools, or social media platforms. The `avatar_stack` package provides a visually appealing way to represent multiple users in a compact space, making it an excellent choice for modern UI designs.

## Features

- **Customizable Avatars**: Easily adjust the size, border, and spacing of avatars to fit your design needs.
- **Overlap Control**: Manage how much each avatar overlaps the next, allowing for a layered effect.
- **Tooltip Support**: Display additional information when users hover over an avatar.
- **Animation**: Add animations to the avatar stack for a dynamic user experience.

## When to Use

- **Chat Applications**: Display participants in a group chat.
- **Project Management Tools**: Show team members involved in a task.
- **Social Media Platforms**: Highlight users who have liked or commented on a post.

The `avatar_stack` package is a powerful tool for developers looking to enhance their Flutter applications with intuitive and interactive user interfaces.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the Avatar Stack Package

In this tutorial, we will walk through the process of setting up the `avatar_stack` package in a Flutter project and demonstrate how to use its features effectively.

## Setup Process

1. **Add Dependency**

   First, add the `avatar_stack` package to your `pubspec.yaml` file:

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     avatar_stack: ^1.0.0
   ```

2. **Install Packages**

   Run the following command to install the new package:

   ```bash
   flutter pub get
   ```

3. **Import the Package**

   Import the `avatar_stack` package into your Dart file:

   ```dart
   import 'package:avatar_stack/avatar_stack.dart';
   ```

## Platform-Specific Details

### Android

Ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```gradle
android {
    defaultConfig {
        minSdkVersion 21
    }
}
```

### iOS

For iOS, make sure your `Podfile` is using platform version 11.0 or higher:

```ruby
platform :ios, '11.0'
```

## Using the Package

To use the `avatar_stack` package, you need to create an instance of the `RealFlutter` class, which will manage the display of avatars. Hereâ€™s a simple example:

```dart
RealFlutter(
  avatars: [
    NetworkImage('https://example.com/avatar1.png'),
    NetworkImage('https://example.com/avatar2.png'),
    NetworkImage('https://example.com/avatar3.png'),
  ],
  borderColor: Colors.white,
  borderWidth: 2.0,
  overlap: 20.0,
  tooltipText: (index) => 'User $index',
)
```

This code snippet demonstrates how to create a stack of avatars with custom borders and overlap settings.

<-- END_TUTORIAL -->

<-- START_MAIN -->

# Complete Example: Flutter Main File

Below is a complete example of a Flutter application using the `avatar_stack` package. This example demonstrates all key features of the package.

```dart
import 'package:flutter/material.dart';
import 'package:avatar_stack/avatar_stack.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Avatar Stack Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: AvatarStackDemo(),
    );
  }
}

class AvatarStackDemo extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Avatar Stack Example'),
      ),
      body: Center(
        child: RealFlutter(
          // List of avatar images
          avatars: [
            NetworkImage('https://example.com/avatar1.png'),
            NetworkImage('https://example.com/avatar2.png'),
            NetworkImage('https://example.com/avatar3.png'),
          ],
          // Border color for each avatar
          borderColor: Colors.white,
          // Border width for each avatar
          borderWidth: 2.0,
          // Overlap amount between avatars
          overlap: 20.0,
          // Tooltip text for each avatar
          tooltipText: (index) => 'User $index',
          // Animation duration for avatar transitions
          animationDuration: Duration(milliseconds: 300),
        ),
      ),
    );
  }
}

// Application Flow:
// 1. The main function initializes the app by calling runApp with MyApp.
// 2. MyApp is a StatelessWidget that sets up the MaterialApp with a title and theme.
// 3. The home property of MaterialApp is set to AvatarStackDemo, which is another StatelessWidget.
// 4. AvatarStackDemo builds a Scaffold with an AppBar and a Center widget.
// 5. Inside the Center widget, a RealFlutter widget is used to display a stack of avatars.
// 6. The RealFlutter widget is configured with a list of NetworkImage objects representing the avatars.
// 7. Additional properties like borderColor, borderWidth, overlap, and tooltipText are set to customize the appearance and behavior of the avatar stack.
// 8. The animationDuration property adds a smooth transition effect when avatars are displayed.

```

<-- END_MAIN -->
```
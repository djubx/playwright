```markdown
<!-- START_DESCRIPTION -->
# CometChat Calls SDK for Flutter

The **CometChat Calls SDK** is a powerful package designed to facilitate real-time audio and video calling capabilities in Flutter applications. It is part of the CometChat suite, which provides a comprehensive set of tools for integrating chat, voice, and video functionalities into mobile and web applications. 

## When to Use This Package
You should consider using the CometChat Calls SDK when:
- You need to implement real-time audio and video calling features in your Flutter app.
- You want to enhance your chat application with voice and video capabilities.
- You are looking for a reliable and scalable solution that can handle multiple users and sessions.

## Key Features
- **Real-time Communication**: Supports high-quality audio and video calls.
- **Group Calls**: Allows multiple participants to join a single call.
- **Call Management**: Provides functionalities to manage ongoing calls, including mute, unmute, and end call.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS devices.
- **Customizable UI**: Offers options to customize the user interface to match your app's design.

With these features, the CometChat Calls SDK is an excellent choice for developers looking to integrate robust calling functionalities into their applications.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up CometChat Calls SDK in Flutter

## Step 1: Add Dependency
To get started, you need to add the CometChat Calls SDK to your Flutter project. Open your `pubspec.yaml` file and add the following dependency:

```yaml
dependencies:
  cometchat_calls_sdk: ^latest_version
```

Make sure to replace `latest_version` with the most recent version available on [pub.dev](https://pub.dev/packages/cometchat_calls_sdk).

## Step 2: Platform-Specific Configuration

### Android Configuration
1. Open your `android/app/build.gradle` file and ensure you have the following configurations:
   ```groovy
   android {
       ...
       defaultConfig {
           ...
           minSdkVersion 21 // Minimum SDK version
           ...
       }
   }
   ```

2. Add the required permissions in your `AndroidManifest.xml`:
   ```xml
   <uses-permission android:name="android.permission.INTERNET"/>
   <uses-permission android:name="android.permission.CAMERA"/>
   <uses-permission android:name="android.permission.RECORD_AUDIO"/>
   ```

### iOS Configuration
1. Open your `ios/Runner/Info.plist` and add the following keys for camera and microphone usage:
   ```xml
   <key>NSCameraUsageDescription</key>
   <string>We need access to your camera for video calls.</string>
   <key>NSMicrophoneUsageDescription</key>
   <string>We need access to your microphone for audio calls.</string>
   ```

## Step 3: Initialize CometChat
In your main Dart file, initialize the CometChat SDK with your app credentials. You can do this in the `main()` function or in a dedicated initialization method.

```dart
import 'package:cometchat_calls_sdk/cometchat_calls_sdk.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await CometChat.init('YOUR_APP_ID', 'YOUR_REGION');
  runApp(MyApp());
}
```

Replace `YOUR_APP_ID` and `YOUR_REGION` with your CometChat application ID and region.

## Step 4: Implementing Call Features
You can now use the CometChat Calls SDK to implement calling features in your app. Refer to the official documentation for detailed API usage and examples.

This concludes the setup and basic usage of the CometChat Calls SDK in your Flutter application.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of CometChat Calls SDK

```dart
import 'package:flutter/material.dart';
import 'package:cometchat_calls_sdk/cometchat_calls_sdk.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  // Initialize CometChat with your app credentials
  await CometChat.init('YOUR_APP_ID', 'YOUR_REGION');
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'CometChat Calls Example',
      home: CallScreen(),
    );
  }
}

class CallScreen extends StatefulWidget {
  @override
  _CallScreenState createState() => _CallScreenState();
}

class _CallScreenState extends State<CallScreen> {
  // Method to start a call
  void startCall() {
    // Create a call object with the necessary parameters
    Call call = Call(
      callType: CallType.audio, // or CallType.video
      receiverId: 'RECEIVER_USER_ID', // ID of the user to call
      receiverType: ReceiverType.user, // Type of receiver (user or group)
    );

    // Start the call
    CometChat.startCall(call).then((value) {
      // Handle successful call start
      print('Call started successfully');
    }).catchError((error) {
      // Handle error
      print('Error starting call: $error');
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('CometChat Calls'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: startCall, // Start call on button press
          child: Text('Start Call'),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app initializes the CometChat SDK with the provided app ID and region.
// 2. The main screen displays a button to start a call.
// 3. When the button is pressed, the startCall method is invoked.
// 4. The startCall method creates a Call object with the necessary parameters.
// 5. It then calls CometChat.startCall() to initiate the call.
// 6. If the call starts successfully, a message is printed to the console; otherwise, an error message is displayed.
```
<!-- END_MAIN -->
```

### Summary
In this blog post, we explored the CometChat Calls SDK for Flutter, detailing its features, setup process, and providing a complete example of how to implement audio and video calling functionalities in a Flutter application. The provided code demonstrates how to initialize the SDK, create a call, and handle user interactions effectively. This package is ideal for developers looking to enhance their applications with real-time communication capabilities.
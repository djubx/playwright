<-- START_DESCRIPTION -->

# Flutter Local Authentication Package
=====================================

The `flutter_local_authentication` package provides a simple and secure way to authenticate users locally on their devices. This package is ideal for applications that require an additional layer of security, such as financial or sensitive data handling apps.

## Features

*   Supports both Android and iOS platforms
*   Provides fingerprint, face recognition, and iris scanning authentication methods
*   Easy to integrate and use

## When to Use

Use this package when you need to add an extra layer of security to your app, such as:

*   Secure login or registration processes
*   Protecting sensitive user data
*   Complying with regulatory requirements

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `flutter_local_authentication` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:

```yml
dependencies:
  flutter_local_authentication: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:flutter_local_authentication/flutter_local_authentication.dart';
```

### Step 3: Check for Device Compatibility

Before using the package, check if the device supports local authentication:

```dart
bool canUseLocalAuthentication = await FlutterLocalAuthentication.canUseLocalAuthentication;
```

### Step 4: Authenticate the User

To authenticate the user, call the `authenticate` method:

```dart
bool isAuthenticated = await FlutterLocalAuthentication.authenticate(
  title: 'Authenticate',
  reason: 'Please authenticate to access the app',
  biometricOnly: true,
);
```

### Platform-Specific Details

#### Android

*   Make sure to add the `USE_FINGERPRINT` permission to your `AndroidManifest.xml` file:

    ```xml
<uses-permission android:name="android.permission.USE_FINGERPRINT" />
```

*   If you're targeting Android 10 or later, you need to add the `ACTIVITY_RECOGNITION` permission to your `AndroidManifest.xml` file:

    ```xml
<uses-permission android:name="android.permission.ACTIVITY_RECOGNITION" />
```

#### iOS

*   Make sure to add the `NSFaceIDUsageDescription` key to your `Info.plist` file:

    ```xml
<key>NSFaceIDUsageDescription</key>
<string>This app uses Face ID to authenticate the user</string>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_local_authentication/flutter_local_authentication.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Local Authentication Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  bool _isAuthenticated = false;

  Future<void> _checkDeviceCompatibility() async {
    // Check if the device supports local authentication
    bool canUseLocalAuthentication = await FlutterLocalAuthentication.canUseLocalAuthentication;
    if (!canUseLocalAuthentication) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('This device does not support local authentication'),
        ),
      );
    }
  }

  Future<void> _authenticateUser() async {
    // Authenticate the user
    bool isAuthenticated = await FlutterLocalAuthentication.authenticate(
      title: 'Authenticate',
      reason: 'Please authenticate to access the app',
      biometricOnly: true,
    );
    setState(() {
      _isAuthenticated = isAuthenticated;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Local Authentication Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: _checkDeviceCompatibility,
              child: Text('Check Device Compatibility'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _authenticateUser,
              child: Text('Authenticate User'),
            ),
            SizedBox(height: 20),
            Text(_isAuthenticated ? 'User is authenticated' : 'User is not authenticated'),
          ],
        ),
      ),
    );
  }
}

// The app starts by checking if the device supports local authentication.
// If the device does not support local authentication, a snackbar is shown to the user.
// When the user clicks the 'Authenticate User' button, the app authenticates the user using the local authentication package.
// If the user is successfully authenticated, the app updates the UI to show that the user is authenticated.
// The app uses the _isAuthenticated variable to keep track of the user's authentication status.
```

<-- END_MAIN -->
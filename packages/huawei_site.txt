# Huawei Site Flutter Package: A Comprehensive Guide

## <-- START_DESCRIPTION -->

### Description

The `huawei_site` Flutter package is designed to integrate Huawei's site services into Flutter applications. This package allows developers to access various functionalities related to site management, including site information retrieval, location services, and more. It is particularly useful for applications that require location-based services or need to interact with Huawei's ecosystem.

### When to Use

You should consider using the `huawei_site` package when:
- You are developing applications that need to access Huawei's site services.
- Your app requires location-based functionalities, such as retrieving site information based on user location.
- You want to leverage Huawei's APIs for enhanced user experiences in your Flutter applications.

### Key Features

- **Site Information Retrieval**: Access detailed information about various sites.
- **Location Services**: Utilize Huawei's location services to enhance your app's functionality.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS platforms.
- **Easy Integration**: Simple setup and usage within Flutter applications.

## <-- END_DESCRIPTION -->

## <-- START_TUTORIAL -->

### Tutorial

To get started with the `huawei_site` package, follow these steps:

#### Step 1: Add Dependency

Add the `huawei_site` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  huawei_site: ^latest_version
```

Make sure to replace `latest_version` with the most recent version available on [pub.dev](https://pub.dev/packages/huawei_site).

#### Step 2: Platform-Specific Configuration

**For Android:**
1. Ensure that your `android/app/build.gradle` file includes the necessary Huawei dependencies.
2. Add the following permissions in your `AndroidManifest.xml`:

```xml
<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>
<uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION"/>
```

3. Configure your app to use Huawei services by following the [Huawei Developer documentation](https://developer.huawei.com/consumer/en/doc/development/HMSCore-Guides/hms-integration-0000001050131230).

**For iOS:**
1. Open your `Info.plist` file and add the following keys for location services:

```xml
<key>NSLocationWhenInUseUsageDescription</key>
<string>Your app needs access to your location.</string>
<key>NSLocationAlwaysUsageDescription</key>
<string>Your app needs access to your location.</string>
```

2. Ensure that you have the necessary configurations for using Huawei services on iOS.

#### Step 3: Import the Package

In your Dart file, import the package:

```dart
import 'package:huawei_site/huawei_site.dart';
```

#### Step 4: Initialize and Use the Package

You can now initialize and use the `huawei_site` package in your Flutter application. Hereâ€™s a simple example of how to retrieve site information based on the user's location.

## <-- END_TUTORIAL -->

## <-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:huawei_site/huawei_site.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Huawei Site Example',
      home: SiteInfoScreen(),
    );
  }
}

class SiteInfoScreen extends StatefulWidget {
  @override
  _SiteInfoScreenState createState() => _SiteInfoScreenState();
}

class _SiteInfoScreenState extends State<SiteInfoScreen> {
  String siteInfo = "Fetching site information...";

  @override
  void initState() {
    super.initState();
    _fetchSiteInfo();
  }

  // Function to fetch site information
  Future<void> _fetchSiteInfo() async {
    try {
      // Create an instance of the SiteClient
      SiteClient siteClient = SiteClient();

      // Get the current location (latitude and longitude)
      Location location = await siteClient.getCurrentLocation();

      // Fetch site information based on the current location
      Site site = await siteClient.getSiteInfo(location.latitude, location.longitude);

      // Update the state with the fetched site information
      setState(() {
        siteInfo = "Site Name: ${site.name}\nDescription: ${site.description}";
      });
    } catch (e) {
      // Handle any errors that occur during the fetching process
      setState(() {
        siteInfo = "Error fetching site information: $e";
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Huawei Site Information'),
      ),
      body: Center(
        child: Text(siteInfo), // Display the site information
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the RealFlutter widget.
// 2. RealFlutter builds a MaterialApp with a title and a home screen (SiteInfoScreen).
// 3. SiteInfoScreen is a stateful widget that fetches site information when initialized.
// 4. In the initState method, _fetchSiteInfo is called to retrieve the current location and site information.
// 5. The _fetchSiteInfo method uses the SiteClient to get the current location and then fetches site information based on that location.
// 6. If successful, the site information is displayed; if an error occurs, an error message is shown instead.
```

## <-- END_MAIN -->

### Summary

In this blog post, we explored the `huawei_site` Flutter package, detailing its features, setup process, and usage through a complete example. The application flow was explained step-by-step, demonstrating how to fetch and display site information based on the user's location. This package is a powerful tool for developers looking to integrate Huawei's site services into their Flutter applications, providing a seamless experience for users.
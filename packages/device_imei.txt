<-- START_DESCRIPTION -->

# Device IMEI Flutter Package
================================

The `device_imei` Flutter package provides a simple way to retrieve the International Mobile Equipment Identity (IMEI) of a device. The IMEI is a unique identifier for each mobile device and can be used for various purposes, such as device authentication and tracking.

## When to Use This Package
---------------------------

This package is useful when you need to identify a device uniquely, such as:

* Device authentication: Use the IMEI to authenticate devices and prevent unauthorized access to your app or services.
* Device tracking: Use the IMEI to track devices and monitor their activity.
* Analytics: Use the IMEI to collect analytics data and understand how users interact with your app.

## Features
------------

The `device_imei` package provides the following features:

* Retrieves the IMEI of a device
* Supports both Android and iOS platforms
* Easy to use and integrate into your Flutter app

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
-----------------

To use the `device_imei` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  device_imei: ^0.1.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:device_imei/device_imei.dart';
```
### Step 3: Retrieve the IMEI

Use the `getImei` method to retrieve the IMEI:
```dart
String imei = await DeviceImei.getImei();
```
### Platform-Specific Details

#### Android

On Android, the `device_imei` package uses the `android.telephony.TelephonyManager` class to retrieve the IMEI. This requires the `READ_PHONE_STATE` permission, which is automatically added to your AndroidManifest.xml file when you add the package to your pubspec file.

#### iOS

On iOS, the `device_imei` package uses the `CoreTelephony` framework to retrieve the IMEI. This requires the `NSCoreTelephonyUsageDescription` key in your Info.plist file, which is automatically added when you add the package to your pubspec file.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:device_imei/device_imei.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Device IMEI Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  String _imei = '';

  Future<void> _getImei() async {
    // Get the IMEI
    String imei = await DeviceImei.getImei();
    setState(() {
      _imei = imei;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Device IMEI Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'IMEI:',
              style: TextStyle(fontSize: 24),
            ),
            Text(
              _imei,
              style: TextStyle(fontSize: 24),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _getImei,
              child: Text('Get IMEI'),
            ),
          ],
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user opens the app and is presented with a button to get the IMEI.
// 2. When the user clicks the button, the `_getImei` method is called.
// 3. The `_getImei` method uses the `DeviceImei.getImei` method to retrieve the IMEI.
// 4. The IMEI is then displayed on the screen.
// 5. The user can click the button again to refresh the IMEI.

// Summary:
// This code demonstrates how to use the `device_imei` package to retrieve the IMEI of a device.
// The IMEI is displayed on the screen, and the user can refresh it by clicking a button.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

**BDK Flutter Package Overview**
================================

The `bdk_flutter` package is a Flutter wrapper for the Bitcoin Development Kit (BDK), a Rust library for building Bitcoin wallets. This package provides a simple and easy-to-use API for creating and managing Bitcoin wallets in Flutter applications.

**When to Use This Package**
---------------------------

You should use this package when you want to integrate Bitcoin wallet functionality into your Flutter app. This package is suitable for a wide range of use cases, from simple wallet apps to complex financial applications.

**Key Features**
----------------

*   Create and manage Bitcoin wallets
*   Generate and manage private keys
*   Create and broadcast transactions
*   Get wallet balance and transaction history
*   Support for multiple networks (mainnet, testnet, regtest)

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setting Up the Package**
---------------------------

To use the `bdk_flutter` package, you need to add it to your `pubspec.yaml` file:

```yml
dependencies:
  bdk_flutter: ^0.1.0
```

Then, run `flutter pub get` to install the package.

**Platform-Specific Setup**
---------------------------

### Android

No additional setup is required for Android.

### iOS

To use the package on iOS, you need to add the following lines to your `Podfile`:

```ruby
pod 'BDK'
pod 'BDK/FFI'
```

Then, run `pod install` to install the pods.

**Using the Package**
---------------------

To use the package, you need to import it in your Dart file:

```dart
import 'package:bdk_flutter/bdk_flutter.dart';
```

Then, you can create a new wallet instance:

```dart
final wallet = Wallet(
  descriptor: 'wpkh(tprv8ZgxMBicQKsPd3SrfZxuWkGh2PqUtzxW7wqBpK4p5p5p5p5p5p5p5p5)',
  changeDescriptor: 'wpkh(tprv8ZgxMBicQKsPd3SrfZxuWkGh2PqUtzxW7wqBpK4p5p5p5p5p5p5p5)',
  network: Network.testnet,
);
```

You can use the wallet instance to perform various operations, such as getting the wallet balance:

```dart
final balance = await wallet.getBalance();
print(balance);
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:bdk_flutter/bdk_flutter.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'BDK Flutter Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _wallet = Wallet(
    descriptor: 'wpkh(tprv8ZgxMBicQKsPd3SrfZxuWkGh2PqUtzxW7wqBpK4p5p5p5p5p5p5p5)',
    changeDescriptor: 'wpkh(tprv8ZgxMBicQKsPd3SrfZxuWkGh2PqUtzxW7wqBpK4p5p5p5p5p5p5p5)',
    network: Network.testnet,
  );

  String _balance = '';

  void _getBalance() async {
    // Get the wallet balance
    final balance = await _wallet.getBalance();
    setState(() {
      _balance = balance.toString();
    });
  }

  void _createTransaction() async {
    // Create a new transaction
    final tx = await _wallet.createTransaction(
      outputs: [
        TxOutput(
          address: 'tb1q9x4x4x4x4x4x4x4x4x4x4x4x4x4x4x4x4x4x4',
          value: 10000,
        ),
      ],
    );
    print(tx);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('BDK Flutter Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Balance: $_balance',
              style: TextStyle(fontSize: 24),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _getBalance,
              child: Text('Get Balance'),
            ),
            SizedBox(height: 10),
            ElevatedButton(
              onPressed: _createTransaction,
              child: Text('Create Transaction'),
            ),
          ],
        ),
      ),
    );
  }
}

// The app starts by creating a new wallet instance with a hardcoded descriptor and change descriptor.
// The wallet is set to use the testnet network.
// The app then defines two functions: _getBalance and _createTransaction.
// The _getBalance function gets the wallet balance using the getBalance method of the wallet instance.
// The _createTransaction function creates a new transaction using the createTransaction method of the wallet instance.
// The app then builds a simple UI with two buttons: one to get the balance and one to create a transaction.
// When the user clicks the get balance button, the _getBalance function is called and the balance is displayed on the screen.
// When the user clicks the create transaction button, the _createTransaction function is called and a new transaction is created.
```

<-- END_MAIN -->
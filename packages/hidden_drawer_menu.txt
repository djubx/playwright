```markdown
<!-- START_DESCRIPTION -->
# Hidden Drawer Menu Flutter Package

The **hidden_drawer_menu** package is a powerful Flutter library that allows developers to create a hidden drawer menu in their applications. This package provides a sleek and modern way to implement a side menu that can be revealed with a swipe gesture or a button tap, enhancing the user experience by keeping the interface clean and uncluttered.

## When to Use This Package

You might consider using the **hidden_drawer_menu** package in scenarios such as:
- When you want to provide users with quick access to various sections of your app without overwhelming them with visible options.
- In applications where screen real estate is limited, such as mobile apps.
- When you want to implement a modern design pattern that aligns with current UI/UX trends.

## Features

- **Customizable Menu**: You can easily customize the appearance of the drawer, including colors, icons, and text styles.
- **Swipe Gesture Support**: Users can reveal the menu by swiping from the edge of the screen, providing a natural interaction.
- **Multiple Menu Items**: Supports multiple items in the menu, allowing for a rich navigation experience.
- **Integration with Navigation**: Seamlessly integrates with Flutter's navigation system, making it easy to switch between different screens.

Overall, the **hidden_drawer_menu** package is an excellent choice for developers looking to enhance their Flutter applications with a modern and user-friendly navigation solution.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Hidden Drawer Menu

In this tutorial, we will walk through the setup process for the **hidden_drawer_menu** package and demonstrate how to use it in a Flutter application.

## Step 1: Adding the Dependency

To get started, you need to add the **hidden_drawer_menu** package to your `pubspec.yaml` file. Open the file and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  hidden_drawer_menu: ^0.8.0  # Check for the latest version on pub.dev
```

After adding the dependency, run `flutter pub get` to install the package.

## Step 2: Platform-Specific Configuration

### Android

For Android, ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
        ...
    }
}
```

### iOS

For iOS, you may need to enable the use of Swift in your project. Open your `ios/Runner.xcworkspace` in Xcode, and ensure that the project settings are configured to support Swift.

## Step 3: Basic Usage

Now that we have set up the package, let's create a simple application that uses the hidden drawer menu.

1. Import the package in your Dart file:

```dart
import 'package:hidden_drawer_menu/hidden_drawer_menu.dart';
```

2. Create a new class that extends `StatefulWidget` and implement the hidden drawer menu.

Hereâ€™s a basic example of how to set it up:

```dart
import 'package:flutter/material.dart';
import 'package:hidden_drawer_menu/hidden_drawer_menu.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    return HiddenDrawerMenu(
      backgroundColor: Colors.blue,
      items: [
        MenuItem(
          name: "Home",
          icon: Icons.home,
          page: HomeScreen(),
        ),
        MenuItem(
          name: "Settings",
          icon: Icons.settings,
          page: SettingsScreen(),
        ),
      ],
    );
  }
}
```

3. Create the screens that will be displayed when the menu items are selected.

```dart
class HomeScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("Home")),
      body: Center(child: Text("Welcome to Home")),
    );
  }
}

class SettingsScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("Settings")),
      body: Center(child: Text("Settings Page")),
    );
  }
}
```

## Step 4: Running the Application

Now you can run your application using `flutter run`. You should see a hidden drawer menu that you can swipe from the left edge of the screen or tap a button to reveal.

This concludes the tutorial on setting up and using the **hidden_drawer_menu** package in your Flutter application.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Hidden Drawer Menu

```dart
import 'package:flutter/material.dart';
import 'package:hidden_drawer_menu/hidden_drawer_menu.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Hidden Drawer Menu Example',
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    return HiddenDrawerMenu(
      backgroundColor: Colors.blue, // Set the background color of the drawer
      items: [
        MenuItem(
          name: "Home", // Name of the menu item
          icon: Icons.home, // Icon for the menu item
          page: HomeScreen(), // Page to navigate to
        ),
        MenuItem(
          name: "Settings", // Name of the second menu item
          icon: Icons.settings, // Icon for the second menu item
          page: SettingsScreen(), // Page to navigate to
        ),
      ],
    );
  }
}

// Home screen widget
class HomeScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("Home")), // AppBar for the home screen
      body: Center(child: Text("Welcome to Home")), // Centered text in the body
    );
  }
}

// Settings screen widget
class SettingsScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text("Settings")), // AppBar for the settings screen
      body: Center(child: Text("Settings Page")), // Centered text in the body
    );
  }
}

/*
Application Flow Explanation:
1. The application starts with the main function, which runs the MyApp widget.
2. MyApp sets up the MaterialApp and specifies RealFlutter as the home widget.
3. RealFlutter builds the HiddenDrawerMenu with two menu items: Home and Settings.
4. Each menu item is associated with a specific page (HomeScreen and SettingsScreen).
5. When the user swipes from the left edge or taps the menu button, the drawer opens.
6. Selecting a menu item navigates to the corresponding screen, displaying the content.
*/
```
<!-- END_MAIN -->
``` 

This structured blog provides a comprehensive overview of the **hidden_drawer_menu** package, guides users through the setup and usage, and presents a complete example with detailed comments explaining the application flow.
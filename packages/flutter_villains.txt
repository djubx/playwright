<-- START_DESCRIPTION -->

# Flutter Villains Package Overview
=====================================

The `flutter_villains` package is a powerful animation library for Flutter that allows you to create complex, villainous animations with ease. It provides a simple and intuitive API for creating animations that can be used to enhance the user experience of your app.

### When to Use

The `flutter_villains` package is perfect for creating:

* Complex animations that involve multiple widgets and transformations
* Hero animations that require a high degree of customization
* Animated transitions between screens or states

### Features

* Support for multiple animation types, including:
	+ Hero animations
	+ Transform animations
	+ Opacity animations
	+ Scale animations
* Customizable animation curves and durations
* Support for animation chaining and sequencing
* Easy-to-use API with minimal boilerplate code

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the Flutter Villains Package
=====================================================

### Step 1: Add the Package to Your Pubspec

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_villains: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:flutter_villains/villain.dart';
```
### Step 3: Create a Villain Animation

Create a `Villain` animation by specifying the animation type, curve, and duration:
```dart
Villain(
  villainAnimation: VillainAnimation.transform(
    from: Offset(0, 0),
    to: Offset(100, 100),
    curve: Curves.easeInOut,
    duration: Duration(milliseconds: 500),
  ),
  child: MyWidget(),
)
```
### Platform-Specific Details

* Android: No additional configuration is required.
* iOS: You may need to add the following line to your `Info.plist` file to enable animation debugging:
```xml
<key>UIViewAnimationDebugging</key>
<true/>
```
### Optimizations

* To improve performance, consider using a `RepaintBoundary` widget to limit the area that needs to be repainted during animation.
* Use `VillainAnimation` widgets instead of `Animation` widgets to take advantage of the package's optimized animation handling.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_villains/villain.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Villains Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Villains Demo'),
      ),
      body: Center(
        child: Villain(
          // Create a transform animation that moves the widget from the top-left to the bottom-right
          villainAnimation: VillainAnimation.transform(
            from: Offset(0, 0),
            to: Offset(100, 100),
            curve: Curves.easeInOut,
            duration: Duration(milliseconds: 500),
          ),
          // Create a scale animation that scales the widget up and down
          secondaryVillainAnimation: VillainAnimation.scale(
            from: 1.0,
            to: 2.0,
            curve: Curves.easeInOut,
            duration: Duration(milliseconds: 500),
          ),
          // Create an opacity animation that fades the widget in and out
          tertiaryVillainAnimation: VillainAnimation.opacity(
            from: 0.0,
            to: 1.0,
            curve: Curves.easeInOut,
            duration: Duration(milliseconds: 500),
          ),
          child: MyWidget(),
        ),
      ),
    );
  }
}

class MyWidget extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Container(
      width: 100,
      height: 100,
      color: Colors.red,
    );
  }
}
```

// The app starts by creating a `MaterialApp` with a `MyHomePage` widget as its home screen.
// The `MyHomePage` widget creates a `Scaffold` with an `AppBar` and a `Center` widget containing a `Villain` animation.
// The `Villain` animation is created with three separate animations: a transform animation, a scale animation, and an opacity animation.
// The transform animation moves the widget from the top-left to the bottom-right of the screen.
// The scale animation scales the widget up and down.
// The opacity animation fades the widget in and out.
// The `MyWidget` widget is a simple red square that is used as the child of the `Villain` animation.

<-- END_MAIN -->
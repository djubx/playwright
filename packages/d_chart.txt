```markdown
<-- START_DESCRIPTION -->

# Overview of the `d_chart` Flutter Package

The `d_chart` package is a versatile and powerful charting library for Flutter applications. It provides a wide range of chart types, including bar charts, line charts, pie charts, and more, making it an excellent choice for developers looking to add data visualization capabilities to their apps.

## When to Use `d_chart`

- **Data Visualization**: Use `d_chart` when you need to present data in a visual format, such as sales reports, user statistics, or any other data-driven insights.
- **Interactive Dashboards**: Ideal for creating interactive dashboards where users can engage with the data.
- **Customizable Charts**: When you need highly customizable charts that can be tailored to fit the design and functionality of your application.

## Features

- **Multiple Chart Types**: Supports various chart types, including bar, line, pie, and more.
- **Customizable Appearance**: Offers extensive customization options for colors, labels, and animations.
- **Responsive Design**: Charts are responsive and adapt to different screen sizes and orientations.
- **Easy Integration**: Simple API that integrates seamlessly with Flutter applications.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the `d_chart` Package

In this tutorial, we will walk through the process of setting up the `d_chart` package in a Flutter project and demonstrate how to use it to create a simple chart.

## Setup Process

1. **Add Dependency**: First, add the `d_chart` package to your `pubspec.yaml` file.

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     d_chart: ^0.1.0
   ```

2. **Install Packages**: Run `flutter pub get` to install the new package.

3. **Platform-Specific Configuration**:
   - **Android**: Ensure your `minSdkVersion` in `android/app/build.gradle` is set to at least 21.
   - **iOS**: No additional configuration is required for iOS.

## Using the Package

To use the `d_chart` package, import it into your Dart file:

```dart
import 'package:d_chart/d_chart.dart';
```

### Creating a Simple Bar Chart

Here's how you can create a simple bar chart using the `d_chart` package:

```dart
DChartBar(
  data: [
    {'domain': '2020', 'measure': 30},
    {'domain': '2021', 'measure': 55},
    {'domain': '2022', 'measure': 70},
  ],
  domainLabelPaddingToAxisLine: 16,
  axisLineTick: 2,
  axisLinePointTick: 2,
  axisLinePointWidth: 10,
  measureLabelPaddingToAxisLine: 16,
)
```

This code snippet creates a bar chart with data for the years 2020, 2021, and 2022.

<-- END_TUTORIAL -->

<-- MAIN -->

# Complete Example of Using `d_chart` in a Flutter Application

Below is a complete example of a Flutter application that demonstrates the key features of the `d_chart` package.

```dart
import 'package:flutter/material.dart';
import 'package:d_chart/d_chart.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'D Chart Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: ChartHomePage(),
    );
  }
}

class ChartHomePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('D Chart Example'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            // Creating a bar chart
            Expanded(
              child: DChartBar(
                data: [
                  {'domain': '2020', 'measure': 30},
                  {'domain': '2021', 'measure': 55},
                  {'domain': '2022', 'measure': 70},
                ],
                domainLabelPaddingToAxisLine: 16,
                axisLineTick: 2,
                axisLinePointTick: 2,
                axisLinePointWidth: 10,
                measureLabelPaddingToAxisLine: 16,
              ),
            ),
            SizedBox(height: 20),
            // Creating a pie chart
            Expanded(
              child: DChartPie(
                data: [
                  {'domain': 'Flutter', 'measure': 40},
                  {'domain': 'React Native', 'measure': 30},
                  {'domain': 'Xamarin', 'measure': 15},
                  {'domain': 'Ionic', 'measure': 15},
                ],
                fillColor: (pieData, index) {
                  switch (pieData['domain']) {
                    case 'Flutter':
                      return Colors.blue;
                    case 'React Native':
                      return Colors.green;
                    case 'Xamarin':
                      return Colors.orange;
                    case 'Ionic':
                      return Colors.red;
                    default:
                      return Colors.grey;
                  }
                },
                labelPosition: PieLabelPosition.outside,
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// The main function initializes the app by calling runApp with RealFlutter.
// RealFlutter is a StatelessWidget that sets up the MaterialApp with a title and theme.
// ChartHomePage is the home widget, which is a Scaffold with an AppBar and a body.
// The body contains a Column with two Expanded widgets, each displaying a different chart.
// The first chart is a bar chart showing data for the years 2020, 2021, and 2022.
// The second chart is a pie chart showing the popularity of different mobile frameworks.
// Each chart is customized with padding, colors, and label positions to enhance appearance.

<-- END_MAIN -->
```

This example demonstrates how to create both a bar chart and a pie chart using the `d_chart` package. The application is structured with a `MaterialApp` that contains a `Scaffold` with an `AppBar` and a `Column` in the body. Each chart is placed inside an `Expanded` widget to ensure they take up available space proportionally.

The bar chart visualizes data over three years, while the pie chart shows the distribution of popularity among different mobile frameworks. Customization options such as colors and label positions are used to enhance the visual appeal of the charts.
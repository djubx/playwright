<-- START_DESCRIPTION -->

Onscreen Keyboard Flutter Package
================================

The `onscreen_keyboard` Flutter package provides a customizable on-screen keyboard for Flutter applications. It allows developers to create a keyboard that can be used for various purposes, such as entering text, numbers, or symbols.

When to Use This Package
------------------------

This package is useful when you need to provide an on-screen keyboard for users to input data, such as:

* Creating a kiosk application where users need to input data without a physical keyboard.
* Developing a mobile application that requires a custom keyboard layout.
* Providing an accessible input method for users with disabilities.

Features
--------

The `onscreen_keyboard` package offers the following features:

* Customizable keyboard layout and design.
* Support for multiple keyboard types (e.g., QWERTY, AZERTY, numeric).
* Ability to add custom keys and buttons.
* Integration with Flutter's `TextFormField` and `TextField` widgets.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
---------------

To use the `onscreen_keyboard` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  onscreen_keyboard: ^1.0.0
```
2. Import the package in your Dart file:
```dart
import 'package:onscreen_keyboard/onscreen_keyboard.dart';
```
3. Create an instance of the `OnscreenKeyboard` widget:
```dart
OnscreenKeyboard(
  keyboardType: KeyboardType.QWERTY,
  onTextInput: (text) {
    // Handle text input
  },
)
```
Platform-Specific Details
-------------------------

### Android

To use the `onscreen_keyboard` package on Android, you need to add the following configuration to your `AndroidManifest.xml` file:
```xml
<activity
  android:name=".MainActivity"
  android:windowSoftInputMode="stateHidden"
  android:configChanges="orientation|screenSize|keyboardHidden"
  android:hardwareAccelerated="true"
  android:exported="true">
  <intent-filter>
    <action android:name="android.intent.action.MAIN" />
    <category android:name="android.intent.category.LAUNCHER" />
  </intent-filter>
</activity>
```
### iOS

To use the `onscreen_keyboard` package on iOS, you need to add the following configuration to your `Info.plist` file:
```xml
<key>UIRequiresFullScreen</key>
<true/>
```
Optimizations
-------------

To improve the performance of the `onscreen_keyboard` package, you can use the following optimizations:

* Use a `RepaintBoundary` widget to reduce the number of repaints.
* Use a `ClipRect` widget to reduce the number of clips.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:onscreen_keyboard/onscreen_keyboard.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Onscreen Keyboard Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _textController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Onscreen Keyboard Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            TextField(
              controller: _textController,
              decoration: InputDecoration(
                border: OutlineInputBorder(),
                labelText: 'Enter text',
              ),
            ),
            SizedBox(height: 20),
            OnscreenKeyboard(
              keyboardType: KeyboardType.QWERTY,
              onTextInput: (text) {
                _textController.text += text;
              },
            ),
          ],
        ),
      ),
    );
  }
}
```

// The application flow is as follows:
// 1. The user runs the application and is presented with a text field and an on-screen keyboard.
// 2. The user taps on the text field to focus it.
// 3. The user taps on a key on the on-screen keyboard to enter text.
// 4. The `onTextInput` callback is called with the entered text.
// 5. The text is appended to the text field's controller.
// 6. The text field is updated with the new text.

// The `OnscreenKeyboard` widget is used to display the on-screen keyboard.
// The `keyboardType` property is set to `KeyboardType.QWERTY` to display a QWERTY keyboard layout.
// The `onTextInput` property is set to a callback function that handles the entered text.

// The `TextField` widget is used to display the text field.
// The `controller` property is set to a `TextEditingController` instance to manage the text field's text.
// The `decoration` property is set to an `InputDecoration` instance to customize the text field's appearance.

<-- END_MAIN -->
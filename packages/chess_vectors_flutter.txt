<-- START_DESCRIPTION -->

**Chess Vectors Flutter Package**
=====================================

The `chess_vectors_flutter` package is a Flutter library that provides a set of pre-built chess piece vectors that can be easily integrated into any Flutter application. The package includes a range of features, including:

* Pre-built chess piece vectors for all six pieces (king, queen, rook, bishop, knight, and pawn)
* Support for both light and dark themes
* Customizable piece sizes and colors
* Easy integration with existing Flutter applications

When to use this package:

* When building a chess game or puzzle application
* When creating a UI that requires chess piece graphics
* When looking for a simple and easy-to-use solution for displaying chess pieces

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setup and Usage**
=====================

To use the `chess_vectors_flutter` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  chess_vectors_flutter: ^1.0.0
```
2. Run `flutter pub get` to install the package.
3. Import the package in your Dart file:
```dart
import 'package:chess_vectors_flutter/chess_vectors_flutter.dart';
```
4. Use the `ChessPiece` widget to display a chess piece:
```dart
ChessPiece(
  piece: Piece.king,
  color: Colors.white,
  size: 50,
)
```
Platform-specific details:

* Android: No additional configuration required.
* iOS: No additional configuration required.

<-- END_TUTORIAL -->

<-- START_MAIN -->

**Complete Example**
=====================

```dart
import 'package:flutter/material.dart';
import 'package:chess_vectors_flutter/chess_vectors_flutter.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Chess Vectors Flutter',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: Scaffold(
        appBar: AppBar(
          title: Text('Chess Vectors Flutter'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              // Display a white king piece
              ChessPiece(
                piece: Piece.king,
                color: Colors.white,
                size: 100,
              ),
              // Display a black queen piece
              ChessPiece(
                piece: Piece.queen,
                color: Colors.black,
                size: 100,
              ),
              // Display a light-themed rook piece
              ChessPiece(
                piece: Piece.rook,
                color: Colors.white,
                size: 50,
                theme: Theme.light,
              ),
              // Display a dark-themed bishop piece
              ChessPiece(
                piece: Piece.bishop,
                color: Colors.black,
                size: 50,
                theme: Theme.dark,
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Application flow:
// 1. The RealFlutter widget is created and returned as the root widget.
// 2. The MaterialApp widget is created with a title and theme.
// 3. The Scaffold widget is created with an AppBar and a body.
// 4. The body contains a Center widget with a Column widget.
// 5. The Column widget contains multiple ChessPiece widgets, each displaying a different chess piece.
// 6. Each ChessPiece widget is configured with a piece type, color, size, and theme.
// 7. The application is rendered on the screen, displaying the chess pieces.

// Final summary:
// This example demonstrates how to use the chess_vectors_flutter package to display chess pieces in a Flutter application. The application creates a Material app with a Scaffold and a body containing multiple ChessPiece widgets. Each ChessPiece widget is configured to display a different chess piece, and the application is rendered on the screen.
```
<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Simple Auth Flutter Package
================================

The `simple_auth_flutter` package provides a simple and easy-to-use authentication solution for Flutter applications. It supports multiple authentication providers, including Google, Facebook, and Twitter, and allows for customization of the authentication flow.

## When to Use This Package
---------------------------

This package is ideal for applications that require a simple and straightforward authentication solution. It is particularly useful for applications that need to support multiple authentication providers.

## Features
------------

*   Supports multiple authentication providers (Google, Facebook, Twitter)
*   Customizable authentication flow
*   Easy-to-use API

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

## Setup
--------

To use the `simple_auth_flutter` package, you need to add it to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  simple_auth_flutter: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Android Setup
----------------

To use the `simple_auth_flutter` package on Android, you need to add the following configuration to your `AndroidManifest.xml` file:

```xml
<application>
  ...
  <meta-data
    android:name="com.google.android.gms.version"
    android:value="@integer/google_play_services_version" />
</application>
```

You also need to add the following dependencies to your `build.gradle` file:

```groovy
dependencies {
  implementation 'com.google.android.gms:play-services-auth:20.2.0'
}
```

## iOS Setup
-------------

To use the `simple_auth_flutter` package on iOS, you need to add the following configuration to your `Info.plist` file:

```xml
<key>CFBundleURLTypes</key>
<array>
  <dict>
    <key>CFBundleTypeRole</key>
    <string>Editor</string>
    <key>CFBundleURLSchemes</key>
    <array>
      <string>com.example.app</string>
    </array>
  </dict>
</array>
```

## Usage
-----

To use the `simple_auth_flutter` package, you need to create an instance of the `SimpleAuthFlutter` class:

```dart
import 'package:flutter/material.dart';
import 'package:simple_auth_flutter/simple_auth_flutter.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  SimpleAuthFlutter _auth;

  @override
  void initState() {
    super.initState();
    _auth = SimpleAuthFlutter();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Simple Auth Flutter'),
      ),
      body: Center(
        child: ElevatedButton(
          child: Text('Login'),
          onPressed: () async {
            final user = await _auth.signInWithGoogle();
            print(user);
          },
        ),
      ),
    );
  }
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:simple_auth_flutter/simple_auth_flutter.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Simple Auth Flutter',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  SimpleAuthFlutter _auth;
  bool _isLoggedIn = false;
  String _userName = '';

  // Step 1: Create an instance of the SimpleAuthFlutter class
  @override
  void initState() {
    super.initState();
    _auth = SimpleAuthFlutter();
  }

  // Step 2: Define a function to handle the login process
  Future<void> _login() async {
    // Step 3: Use the signInWithGoogle method to login with Google
    final user = await _auth.signInWithGoogle();
    // Step 4: Update the UI to reflect the logged in state
    setState(() {
      _isLoggedIn = true;
      _userName = user.displayName;
    });
  }

  // Step 5: Define a function to handle the logout process
  Future<void> _logout() async {
    // Step 6: Use the signOut method to logout
    await _auth.signOut();
    // Step 7: Update the UI to reflect the logged out state
    setState(() {
      _isLoggedIn = false;
      _userName = '';
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Simple Auth Flutter'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(_isLoggedIn ? 'Hello, $_userName!' : 'Please login'),
            SizedBox(height: 20),
            ElevatedButton(
              child: Text(_isLoggedIn ? 'Logout' : 'Login'),
              onPressed: _isLoggedIn ? _logout : _login,
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and is presented with a login button.
// 2. When the user clicks the login button, the _login function is called.
// 3. The _login function uses the SimpleAuthFlutter class to login with Google.
// 4. Once the user is logged in, the UI is updated to reflect the logged in state.
// 5. The user can then click the logout button to logout.
// 6. When the user clicks the logout button, the _logout function is called.
// 7. The _logout function uses the SimpleAuthFlutter class to logout.
// 8. Once the user is logged out, the UI is updated to reflect the logged out state.

// This code demonstrates the use of the SimpleAuthFlutter class to handle user authentication in a Flutter app.
```

<-- END_MAIN -->
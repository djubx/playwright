<-- START_DESCRIPTION -->

# Flutter Multi Slider Package
================================

The `flutter_multi_slider` package is a powerful and customizable Flutter widget that allows users to select a range of values using multiple sliders. It is ideal for applications that require users to select multiple values within a specific range, such as filtering products by price or rating.

## Features

* Multiple sliders for selecting a range of values
* Customizable slider appearance and behavior
* Support for both horizontal and vertical orientations
* Optional snap-to-grid functionality for precise value selection

## When to Use

The `flutter_multi_slider` package is perfect for applications that require users to select multiple values within a specific range, such as:

* E-commerce apps: filtering products by price or rating
* Music apps: selecting a range of frequencies for equalization
* Finance apps: selecting a range of investment amounts

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `flutter_multi_slider` package, add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  flutter_multi_slider: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Platform-Specific Configurations

### Android

No additional configurations are required for Android.

### iOS

To use the `flutter_multi_slider` package on iOS, add the following line to your `Info.plist` file:

```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```

## Using the Package

To use the `flutter_multi_slider` package, import the package and create a `MultiSlider` widget:

```dart
import 'package:flutter_multi_slider/flutter_multi_slider.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Center(
        child: MultiSlider(
          values: [10, 50, 100],
          min: 0,
          max: 100,
          onChanged: (values) {
            print(values);
          },
        ),
      ),
    );
  }
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_multi_slider/flutter_multi_slider.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Multi Slider Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  List<double> _values = [10, 50, 100];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Multi Slider Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            // Create a MultiSlider widget with three sliders
            MultiSlider(
              values: _values,
              min: 0,
              max: 100,
              // Update the values when the sliders are moved
              onChanged: (values) {
                setState(() {
                  _values = values;
                });
              },
            ),
            // Display the current values
            Text(
              'Values: ${_values.join(', ')}',
              style: TextStyle(fontSize: 24),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user moves one of the sliders.
// 2. The onChanged callback is called with the new values.
// 3. The setState function is called to update the _values list.
// 4. The widget is rebuilt with the new values.
// 5. The new values are displayed on the screen.

// This code demonstrates the basic usage of the MultiSlider widget.
// It shows how to create a MultiSlider widget, update the values, and display the current values.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Dynamsoft Capture Vision Flutter Package
=============================================

The `dynamsoft_capture_vision_flutter` package is a Flutter wrapper for Dynamsoft's Capture Vision SDK, which provides a set of APIs for barcode scanning, image processing, and data extraction. This package allows developers to easily integrate these features into their Flutter applications.

## When to Use This Package
---------------------------

This package is ideal for applications that require:

* Barcode scanning: scan various types of barcodes, including QR codes, Data Matrix codes, and more
* Image processing: edit and enhance images, including cropping, rotating, and applying filters
* Data extraction: extract data from images, including text, barcodes, and more

## Features
------------

* Barcode scanning: supports multiple barcode formats and allows for customization of scanning settings
* Image processing: provides a range of image editing tools and filters
* Data extraction: supports extraction of text, barcodes, and other data from images

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `dynamsoft_capture_vision_flutter` package, follow these steps:

### Step 1: Add the Package to Your Project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  dynamsoft_capture_vision_flutter: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:dynamsoft_capture_vision_flutter/dynamsoft_capture_vision_flutter.dart';
```
### Step 3: Initialize the Package

Initialize the package by calling the `init` method:
```dart
await DynamsoftCaptureVisionFlutter.init();
```
### Platform-Specific Details

#### Android

* Add the following lines to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.CAMERA" />
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
```
* Create a new file called `dynamsoft_capture_vision_flutter_android.xml` in the `assets` folder, with the following content:
```xml
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="dynamsoft_app_id">YOUR_APP_ID</string>
    <string name="dynamsoft_app_key">YOUR_APP_KEY</string>
</resources>
```
Replace `YOUR_APP_ID` and `YOUR_APP_KEY` with your actual Dynamsoft app ID and key.

#### iOS

* Add the following lines to your `Info.plist` file:
```xml
<key>NSCameraUsageDescription</key>
<string>This app needs camera access to scan barcodes</string>
<key>NSPhotoLibraryUsageDescription</key>
<string>This app needs photo library access to edit images</string>
```
* Create a new file called `dynamsoft_capture_vision_flutter_ios.plist` in the `assets` folder, with the following content:
```xml
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
    <dict>
        <key>DynamsoftAppID</key>
        <string>YOUR_APP_ID</string>
        <key>DynamsoftAppKey</key>
        <string>YOUR_APP_KEY</string>
    </dict>
</plist>
```
Replace `YOUR_APP_ID` and `YOUR_APP_KEY` with your actual Dynamsoft app ID and key.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:dynamsoft_capture_vision_flutter/dynamsoft_capture_vision_flutter.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Dynamsoft Capture Vision Flutter Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  String _barcodeResult = '';

  Future<void> _scanBarcode() async {
    // Initialize the Dynamsoft Capture Vision Flutter package
    await DynamsoftCaptureVisionFlutter.init();

    // Create a new barcode scanner
    BarcodeScanner scanner = BarcodeScanner();

    // Set the barcode formats to scan
    scanner.setBarcodeFormats([BarcodeFormat.QR_CODE]);

    // Start scanning
    scanner.startScanning().then((result) {
      // Get the barcode result
      _barcodeResult = result.text;

      // Update the UI
      setState(() {});
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Dynamsoft Capture Vision Flutter Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              _barcodeResult,
              style: TextStyle(fontSize: 24),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _scanBarcode,
              child: Text('Scan Barcode'),
            ),
          ],
        ),
      ),
    );
  }
}
```

// This is the main entry point of the app, where we create a new MaterialApp
// and set the title and theme.
// We then create a new MyHomePage widget, which is the main page of the app.

// In the MyHomePage widget, we create a new BarcodeScanner object and set
// the barcode formats to scan.
// We then start scanning and get the barcode result.
// We update the UI with the barcode result.

// The app uses the Dynamsoft Capture Vision Flutter package to scan barcodes.
// The package is initialized and a new barcode scanner is created.
// The barcode formats to scan are set and the scanning process is started.
// The barcode result is then retrieved and displayed on the UI.

<-- END_MAIN -->
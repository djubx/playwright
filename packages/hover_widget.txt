<-- START_DESCRIPTION -->

# Introduction to hover_widget Flutter Package
=====================================================

The `hover_widget` package is a Flutter library that allows you to create hover effects on widgets. It provides a simple and easy-to-use API for adding hover functionality to your Flutter app.

### When to Use This Package

This package is useful when you want to create interactive UI elements that respond to mouse hover events. For example, you can use it to:

* Create hover effects on buttons, icons, or other widgets
* Display tooltips or popovers when a user hovers over a widget
* Change the appearance of a widget when a user hovers over it

### Features

The `hover_widget` package provides the following features:

* Support for hover effects on any widget
* Customizable hover duration and delay
* Support for multiple hover effects on a single widget
* Easy-to-use API for adding hover functionality to your app

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the hover_widget Package
=============================================

To use the `hover_widget` package, follow these steps:

### Step 1: Add the Package to Your pubspec.yaml File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter:
    sdk: flutter
  hover_widget: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:hover_widget/hover_widget.dart';
```
### Step 3: Create a HoverWidget

Create a `HoverWidget` and pass the widget you want to hover as a child:
```dart
HoverWidget(
  child: Text('Hover me!'),
  onHover: (isHovering) {
    print('Is hovering: $isHovering');
  },
)
```
### Platform-Specific Details

* On Android, the hover effect is only triggered when the user touches the screen.
* On iOS, the hover effect is triggered when the user touches the screen or uses the mouse to hover over the widget.

### Configurations and Optimizations

You can customize the hover duration and delay by passing the `duration` and `delay` properties to the `HoverWidget` constructor:
```dart
HoverWidget(
  child: Text('Hover me!'),
  duration: Duration(milliseconds: 500),
  delay: Duration(milliseconds: 200),
  onHover: (isHovering) {
    print('Is hovering: $isHovering');
  },
)
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:hover_widget/hover_widget.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Hover Widget Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  bool _isHovering = false;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Hover Widget Demo'),
      ),
      body: Center(
        child: HoverWidget(
          child: Text(
            'Hover me!',
            style: TextStyle(fontSize: 24),
          ),
          onHover: (isHovering) {
            setState(() {
              _isHovering = isHovering;
            });
          },
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          print('Is hovering: $_isHovering');
        },
        tooltip: 'Check hover state',
        child: Icon(Icons.check),
      ),
    );
  }
}

// The app starts by running the MyApp widget.
// The MyApp widget builds a MaterialApp with a title and theme.
// The home property of the MaterialApp is set to the MyHomePage widget.
// The MyHomePage widget is a stateful widget that builds a Scaffold with an AppBar and a body.
// The body of the Scaffold contains a Center widget with a HoverWidget as its child.
// The HoverWidget has a Text widget as its child, which displays the text 'Hover me!'.
// When the user hovers over the Text widget, the onHover callback is triggered, which updates the _isHovering state variable.
// The floatingActionButton property of the Scaffold is set to a FloatingActionButton that prints the current hover state when pressed.

// In summary, this app demonstrates the use of the HoverWidget package to detect hover events on a Text widget.
// The app updates the hover state in real-time and provides a way to check the current hover state using a FloatingActionButton.
```

<-- END_MAIN -->
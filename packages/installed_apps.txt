```markdown
<!-- START_DESCRIPTION -->
# Overview of the `installed_apps` Flutter Package

The `installed_apps` package for Flutter is a powerful tool that allows developers to retrieve a list of all installed applications on a device. This package is particularly useful in scenarios where you want to provide users with options to open specific apps, check for app availability, or create custom app launchers.

## When to Use This Package

- **Custom App Launchers**: If you're building an app that needs to launch other applications, this package can help you list and open those apps.
- **App Availability Checks**: You can check if a specific app is installed on the device before attempting to open it.
- **User Experience Enhancements**: By providing users with a list of installed apps, you can enhance the interactivity and usability of your application.

## Features

- **Cross-Platform Support**: Works seamlessly on both Android and iOS.
- **Easy Integration**: Simple API to fetch installed apps.
- **App Details**: Retrieve app names, package names, and icons.

Overall, the `installed_apps` package is a valuable addition to any Flutter developer's toolkit, especially for applications that require interaction with other installed apps.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the `installed_apps` Package

## Step 1: Adding the Dependency

To get started, you need to add the `installed_apps` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  installed_apps: ^2.0.0  # Check for the latest version on pub.dev
```

## Step 2: Platform-Specific Configuration

### Android Configuration

1. Open your `AndroidManifest.xml` file located at `android/app/src/main/AndroidManifest.xml`.
2. Add the following permissions inside the `<manifest>` tag:

```xml
<uses-permission android:name="android.permission.QUERY_ALL_PACKAGES"/>
```

### iOS Configuration

For iOS, you need to ensure that your app has the appropriate permissions. Open your `Info.plist` file located at `ios/Runner/Info.plist` and add:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

## Step 3: Using the Package

Now that you have set up the package, you can use it in your Flutter application. Below is a simple example of how to retrieve and display the list of installed apps.

```dart
import 'package:flutter/material.dart';
import 'package:installed_apps/installed_apps.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: AppListScreen(),
    );
  }
}

class AppListScreen extends StatefulWidget {
  @override
  _AppListScreenState createState() => _AppListScreenState();
}

class _AppListScreenState extends State<AppListScreen> {
  List<InstalledApp> _installedApps = [];

  @override
  void initState() {
    super.initState();
    _fetchInstalledApps();
  }

  Future<void> _fetchInstalledApps() async {
    // Fetch the list of installed apps
    List<InstalledApp> apps = await InstalledApps.getInstalledApps();
    setState(() {
      _installedApps = apps;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Installed Apps')),
      body: ListView.builder(
        itemCount: _installedApps.length,
        itemBuilder: (context, index) {
          return ListTile(
            title: Text(_installedApps[index].appName),
            leading: Image.memory(_installedApps[index].icon),
            onTap: () {
              // Launch the selected app
              InstalledApps.launchApp(_installedApps[index].packageName);
            },
          );
        },
      ),
    );
  }
}
```

In this example, we create a simple Flutter application that lists all installed apps and allows users to launch them by tapping on the app name.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using the `installed_apps` Package

```dart
import 'package:flutter/material.dart';
import 'package:installed_apps/installed_apps.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: AppListScreen(),
    );
  }
}

class AppListScreen extends StatefulWidget {
  @override
  _AppListScreenState createState() => _AppListScreenState();
}

class _AppListScreenState extends State<AppListScreen> {
  List<InstalledApp> _installedApps = []; // List to hold installed apps

  @override
  void initState() {
    super.initState();
    _fetchInstalledApps(); // Fetch installed apps when the widget is initialized
  }

  Future<void> _fetchInstalledApps() async {
    // Fetch the list of installed apps
    List<InstalledApp> apps = await InstalledApps.getInstalledApps();
    setState(() {
      _installedApps = apps; // Update the state with the fetched apps
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Installed Apps')), // App bar title
      body: ListView.builder(
        itemCount: _installedApps.length, // Number of installed apps
        itemBuilder: (context, index) {
          return ListTile(
            title: Text(_installedApps[index].appName), // Display app name
            leading: Image.memory(_installedApps[index].icon), // Display app icon
            onTap: () {
              // Launch the selected app
              InstalledApps.launchApp(_installedApps[index].packageName);
            },
          );
        },
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the RealFlutter class, which sets up the MaterialApp.
// 2. The AppListScreen widget is created, which is responsible for displaying the list of installed apps.
// 3. In the _AppListScreenState, the _fetchInstalledApps method is called in initState to retrieve the list of installed apps.
// 4. The fetched apps are stored in the _installedApps list, and the UI is updated using setState.
// 5. The ListView.builder creates a list of ListTile widgets for each installed app, displaying the app name and icon.
// 6. When a user taps on an app, the app is launched using the launchApp method from the installed_apps package.
```
<!-- END_MAIN -->
```

This structured blog provides a comprehensive overview of the `installed_apps` Flutter package, guiding users through its features, setup, and practical implementation. Each section is clearly marked for easy navigation and understanding.
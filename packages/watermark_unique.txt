<-- START_DESCRIPTION -->

Watermark Unique Flutter Package
================================

The `watermark_unique` Flutter package is a powerful tool for adding watermarks to images in your Flutter applications. It provides a simple and efficient way to protect your images from unauthorized use.

When to Use
-----------

You can use the `watermark_unique` package in any Flutter application where you need to add watermarks to images. This can be particularly useful in applications such as:

* Photo editing apps
* Image sharing platforms
* E-commerce apps where product images need to be protected

Features
--------

The `watermark_unique` package provides the following features:

* Add text watermarks to images
* Add image watermarks to images
* Customize the position, size, and color of the watermark
* Support for multiple image formats

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
---------------

To use the `watermark_unique` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  watermark_unique: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:watermark_unique/watermark_unique.dart';
```
### Step 3: Add the Watermark

Use the `addWatermark` function to add a watermark to an image:
```dart
import 'package:flutter/material.dart';
import 'package:watermark_unique/watermark_unique.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Watermark Unique Demo'),
      ),
      body: Center(
        child: Image.asset('assets/image.jpg'),
      ),
    );
  }
}
```
To add a text watermark:
```dart
WatermarkUnique.addWatermark(
  image: Image.asset('assets/image.jpg'),
  text: 'Copyright 2023',
  textStyle: TextStyle(fontSize: 20, color: Colors.white),
  position: WatermarkPosition.bottomRight,
);
```
To add an image watermark:
```dart
WatermarkUnique.addWatermark(
  image: Image.asset('assets/image.jpg'),
  watermark: Image.asset('assets/watermark.png'),
  position: WatermarkPosition.center,
);
```
### Platform-Specific Details

* Android: No additional configuration required.
* iOS: Add the following line to your `Info.plist` file:
```xml
<key>NSPhotoLibraryUsageDescription</key>
<string>This app needs access to your photo library to add watermarks.</string>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:watermark_unique/watermark_unique.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Watermark Unique Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    // Create a sample image
    Image image = Image.asset('assets/image.jpg');

    // Add a text watermark to the image
    Image watermarkedImage = WatermarkUnique.addWatermark(
      image: image,
      text: 'Copyright 2023',
      textStyle: TextStyle(fontSize: 20, color: Colors.white),
      position: WatermarkPosition.bottomRight,
    );

    // Display the watermarked image
    return Scaffold(
      appBar: AppBar(
        title: Text('Watermark Unique Demo'),
      ),
      body: Center(
        child: watermarkedImage,
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app and the RealFlutter widget is displayed.
// 2. The RealFlutter widget creates a sample image and adds a text watermark to it using the WatermarkUnique.addWatermark function.
// 3. The watermarked image is then displayed on the screen.
// 4. The user can view the watermarked image and verify that the watermark has been added correctly.

// Summary: This code demonstrates how to use the WatermarkUnique package to add a text watermark to an image in a Flutter app. The app creates a sample image, adds a text watermark to it, and displays the watermarked image on the screen.
```
<-- END_MAIN -->
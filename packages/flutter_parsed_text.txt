```markdown
<!-- START_DESCRIPTION -->
# Flutter Parsed Text Package

The `flutter_parsed_text` package is a powerful tool for Flutter developers that allows for the parsing of text and the application of various styles and actions to specific parts of that text. This package is particularly useful when you need to display rich text content that includes links, hashtags, mentions, or any other custom text patterns that require special handling.

## When to Use

You might consider using `flutter_parsed_text` in scenarios such as:
- Displaying user-generated content that includes links or hashtags.
- Creating chat applications where messages may contain mentions or links.
- Building blogs or articles where certain keywords need to be highlighted or linked.

## Features

- **Customizable Text Parsing**: Easily define patterns to parse and style text.
- **Interactive Text**: Add gestures to parsed text, allowing users to interact with links or hashtags.
- **Flexible Styling**: Apply different styles to different parts of the text, enhancing the user experience.

Overall, `flutter_parsed_text` provides a straightforward way to enhance text display in your Flutter applications, making it a valuable addition to your toolkit.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using flutter_parsed_text

## Step 1: Adding the Dependency

To get started with `flutter_parsed_text`, you need to add it to your `pubspec.yaml` file. Open your `pubspec.yaml` and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  flutter_parsed_text: ^0.2.0  # Check for the latest version on pub.dev
```

## Step 2: Running Flutter Packages Get

After adding the dependency, run the following command in your terminal to install the package:

```bash
flutter pub get
```

## Step 3: Platform-Specific Configuration

### Android

For Android, ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

### iOS

For iOS, you may need to ensure that your deployment target is set to at least 10.0 in your `ios/Podfile`:

```ruby
platform :ios, '10.0'
```

## Step 4: Importing the Package

In your Dart file, import the package:

```dart
import 'package:flutter_parsed_text/flutter_parsed_text.dart';
```

## Step 5: Using the ParsedText Widget

You can now use the `ParsedText` widget in your Flutter application. Hereâ€™s a simple example of how to implement it:

```dart
ParsedText(
  text: 'Check out #Flutter and visit https://flutter.dev!',
  parse: [
    MatchText(
      pattern: r'#[A-Za-z0-9_]+', // Matches hashtags
      style: TextStyle(color: Colors.blue),
      onTap: (String matched) {
        print('Tapped on hashtag: $matched');
      },
    ),
    MatchText(
      pattern: r'https?://[^\s]+', // Matches URLs
      style: TextStyle(color: Colors.red),
      onTap: (String matched) {
        print('Tapped on link: $matched');
      },
    ),
  ],
)
```

This example demonstrates how to parse hashtags and URLs, applying different styles and actions to them.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of flutter_parsed_text

```dart
import 'package:flutter/material.dart';
import 'package:flutter_parsed_text/flutter_parsed_text.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Parsed Text Example',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Parsed Text Example'),
        ),
        body: Center(
          child: ParsedText(
            text: 'Join the conversation on #Flutter and visit https://flutter.dev for more info!',
            parse: [
              MatchText(
                pattern: r'#[A-Za-z0-9_]+', // Matches hashtags
                style: TextStyle(color: Colors.blue, fontWeight: FontWeight.bold),
                onTap: (String matched) {
                  // Action when hashtag is tapped
                  print('Tapped on hashtag: $matched');
                },
              ),
              MatchText(
                pattern: r'https?://[^\s]+', // Matches URLs
                style: TextStyle(color: Colors.red, fontStyle: FontStyle.italic),
                onTap: (String matched) {
                  // Action when link is tapped
                  print('Tapped on link: $matched');
                },
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function starts the app by calling runApp with the RealFlutter widget.
// 2. RealFlutter is a StatelessWidget that builds a MaterialApp.
// 3. The MaterialApp contains a Scaffold with an AppBar and a Center widget.
// 4. Inside the Center widget, the ParsedText widget is used to display text.
// 5. The text contains a hashtag and a URL, which are parsed and styled differently.
// 6. Tapping on the hashtag or URL triggers the respective onTap actions, printing messages to the console.
```

<!-- END_MAIN -->
```

This structured blog provides a comprehensive overview of the `flutter_parsed_text` package, guiding readers through its features, setup, and practical usage with a complete example. Each section is clearly marked, making it easy to follow and understand.
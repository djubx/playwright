```markdown
<-- START_DESCRIPTION -->

# Overview of the `nice_buttons` Flutter Package

The `nice_buttons` Flutter package is a versatile and customizable library designed to enhance the appearance and functionality of buttons in Flutter applications. It provides developers with a set of pre-designed button styles that can be easily integrated into any Flutter project, allowing for a more visually appealing user interface without the need for extensive custom styling.

## When to Use `nice_buttons`

- **Rapid Prototyping**: When you need to quickly create a visually appealing UI without spending too much time on custom button design.
- **Consistent Design**: To maintain a consistent look and feel across different parts of your application.
- **Customization**: When you require buttons that can be easily customized in terms of color, shape, and size.

## Features

- **Predefined Styles**: Offers a variety of button styles out-of-the-box.
- **Customizable**: Allows for easy customization of button properties such as color, size, and shape.
- **Responsive**: Ensures buttons look good on different screen sizes and orientations.
- **Easy Integration**: Simple API that integrates seamlessly with existing Flutter widgets.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the `nice_buttons` Package

In this tutorial, we will walk through the process of setting up the `nice_buttons` package in a Flutter project and demonstrate how to use it effectively.

## Setup Process

1. **Add Dependency**: First, add the `nice_buttons` package to your `pubspec.yaml` file.

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     nice_buttons: ^1.0.0
   ```

2. **Install Packages**: Run `flutter pub get` to install the new package.

3. **Import the Package**: In your Dart file, import the package to start using it.

   ```dart
   import 'package:nice_buttons/nice_buttons.dart';
   ```

## Platform-Specific Details

### Android

- Ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21 to support all features of the package.

  ```gradle
  defaultConfig {
      minSdkVersion 21
  }
  ```

### iOS

- No specific configurations are required for iOS, but ensure your deployment target is set to a version that supports Flutter.

## Using the Package

To use the `nice_buttons` package, you can create a button using the `NiceButton` widget. Here's a simple example:

```dart
NiceButton(
  text: "Click Me",
  onPressed: () {
    print("Button Pressed!");
  },
  background: Colors.blue,
  radius: 40,
)
```

This creates a button with a blue background and rounded corners.

<-- END_TUTORIAL -->

<-- START_MAIN -->

# Complete Example of Using `nice_buttons`

Below is a complete Flutter application demonstrating the key features of the `nice_buttons` package.

```dart
import 'package:flutter/material.dart';
import 'package:nice_buttons/nice_buttons.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Nice Buttons Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Nice Buttons Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            // Creating a NiceButton with custom properties
            NiceButton(
              text: "Primary Button",
              onPressed: () {
                // Action to perform when the button is pressed
                print("Primary Button Pressed!");
              },
              background: Colors.blue, // Background color of the button
              radius: 40, // Radius for rounded corners
            ),
            SizedBox(height: 20), // Spacer between buttons
            NiceButton(
              text: "Secondary Button",
              onPressed: () {
                // Action to perform when the button is pressed
                print("Secondary Button Pressed!");
              },
              background: Colors.green, // Background color of the button
              radius: 20, // Radius for rounded corners
            ),
          ],
        ),
      ),
    );
  }
}

// Application Flow:
// 1. The application starts with the `main` function, which calls `runApp` with `MyApp`.
// 2. `MyApp` is a stateless widget that sets up the MaterialApp with a title and theme.
// 3. The home screen is set to `MyHomePage`, another stateless widget.
// 4. `MyHomePage` builds a Scaffold with an AppBar and a centered Column.
// 5. Inside the Column, two `NiceButton` widgets are created with different properties.
// 6. Each button has an `onPressed` callback that prints a message to the console when pressed.
// 7. The buttons are styled with different background colors and corner radii to demonstrate customization.

```

<-- END_MAIN -->
```

This blog post provides a comprehensive guide to using the `nice_buttons` package in Flutter, from setup to implementation, with a complete example to illustrate its features.
```markdown
<-- START_DESCRIPTION -->

# Flutter Date Difference Package: Overview

The `flutter_date_difference` package is a powerful utility for Flutter developers who need to calculate the difference between two dates efficiently. This package simplifies date manipulation by providing straightforward methods to compute the difference in days, months, or years. It is particularly useful in applications that require date-based calculations, such as event planning apps, subscription services, or any app that tracks time intervals.

## When to Use

- **Event Management**: Calculate the number of days until an event.
- **Subscription Services**: Determine the remaining time on a subscription.
- **Age Calculation**: Compute the age of a user based on their birthdate.
- **Project Management**: Track the duration of tasks or projects.

## Features

- **Easy Integration**: Simple API for quick setup and use.
- **Multiple Units**: Calculate differences in days, months, or years.
- **Cross-Platform**: Works seamlessly on both Android and iOS.
- **Lightweight**: Minimal impact on app performance.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the Flutter Date Difference Package

In this tutorial, we will walk through the setup process for the `flutter_date_difference` package and demonstrate how to use it in a Flutter application. We will cover platform-specific details for both Android and iOS to ensure smooth integration.

## Setup Process

1. **Add Dependency**: First, add the package to your `pubspec.yaml` file.

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     flutter_date_difference: ^1.0.0
   ```

2. **Install Packages**: Run `flutter pub get` to install the package.

3. **Import the Package**: Import the package in your Dart file where you intend to use it.

   ```dart
   import 'package:flutter_date_difference/flutter_date_difference.dart';
   ```

## Platform-Specific Details

### Android

- Ensure your `minSdkVersion` in `android/app/build.gradle` is set to at least 21 to avoid compatibility issues.

  ```gradle
  defaultConfig {
      minSdkVersion 21
  }
  ```

### iOS

- No additional setup is required for iOS. Ensure your deployment target is set to iOS 9.0 or higher in your `ios/Podfile`.

  ```ruby
  platform :ios, '9.0'
  ```

## Using the Package

To use the `flutter_date_difference` package, create an instance of the `RealFlutter` class and call its methods to calculate date differences.

```dart
RealFlutter dateDifference = RealFlutter();
int days = dateDifference.calculateDays(DateTime(2023, 1, 1), DateTime.now());
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_date_difference/flutter_date_difference.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Date Difference Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: DateDifferenceScreen(),
    );
  }
}

class DateDifferenceScreen extends StatefulWidget {
  @override
  _DateDifferenceScreenState createState() => _DateDifferenceScreenState();
}

class _DateDifferenceScreenState extends State<DateDifferenceScreen> {
  final RealFlutter _dateDifference = RealFlutter();
  int _daysDifference = 0;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Date Difference Calculator'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Days Difference: $_daysDifference',
              style: TextStyle(fontSize: 24),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _calculateDifference,
              child: Text('Calculate Difference'),
            ),
          ],
        ),
      ),
    );
  }

  void _calculateDifference() {
    // Calculate the difference in days between two dates
    DateTime startDate = DateTime(2023, 1, 1);
    DateTime endDate = DateTime.now();
    setState(() {
      _daysDifference = _dateDifference.calculateDays(startDate, endDate);
    });
  }
}

// Application Flow:
// 1. The app starts with the `MyApp` widget, which sets up the MaterialApp and home screen.
// 2. The `DateDifferenceScreen` is a stateful widget that displays the UI.
// 3. The `_DateDifferenceScreenState` manages the state, including the calculation of date differences.
// 4. When the "Calculate Difference" button is pressed, `_calculateDifference` is called.
// 5. `_calculateDifference` uses the `RealFlutter` class to compute the difference in days between two dates.
// 6. The result is displayed on the screen, updating the UI with the number of days difference.

<-- END_MAIN -->
```

This blog post provides a comprehensive guide to using the `flutter_date_difference` package, from setup to implementation, with a complete example to demonstrate its capabilities.
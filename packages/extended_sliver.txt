<-- START_DESCRIPTION -->

Extended Sliver Package
========================

The `extended_sliver` package is a powerful tool for creating complex scrolling effects in Flutter applications. It provides a set of widgets that can be used to create custom scrolling behaviors, such as sticky headers, floating headers, and more.

When to Use
------------

The `extended_sliver` package is ideal for creating complex scrolling effects that are not possible with the standard Flutter widgets. It is particularly useful for creating sticky headers, floating headers, and other custom scrolling behaviors.

Features
--------

*   Custom scrolling behaviors
*   Sticky headers
*   Floating headers
*   Support for multiple slivers

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
----------------

To use the `extended_sliver` package, add it to your `pubspec.yaml` file:

```yml
dependencies:
  extended_sliver: ^1.0.0
```

Then, import the package in your Dart file:

```dart
import 'package:extended_sliver/extended_sliver.dart';
```

### Platform-Specific Details

The `extended_sliver` package works on both Android and iOS platforms. However, there are some platform-specific details to keep in mind:

*   On Android, the `extended_sliver` package uses the ` NestedScrollView` widget to create the custom scrolling behavior. This means that you need to wrap your `ExtendedSliver` widget with a `NestedScrollView` widget.
*   On iOS, the `extended_sliver` package uses the `CustomScrollView` widget to create the custom scrolling behavior. This means that you need to wrap your `ExtendedSliver` widget with a `CustomScrollView` widget.

### Required Configurations

To use the `extended_sliver` package, you need to configure the following:

*   `scrollDirection`: This property determines the direction of the scroll. It can be either `Axis.vertical` or `Axis.horizontal`.
*   `slivers`: This property is a list of slivers that will be displayed in the `ExtendedSliver` widget.

### Optimizations

To optimize the performance of the `extended_sliver` package, you can use the following techniques:

*   Use a `const` constructor for your slivers.
*   Avoid using expensive computations in your slivers.
*   Use a `CachedNetworkImage` widget to cache your images.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:extended_sliver/extended_sliver.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Extended Sliver Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Extended Sliver Demo'),
      ),
      body: CustomScrollView(
        slivers: [
          // Create a sticky header
          SliverPersistentHeader(
            pinned: true,
            delegate: StickyHeaderDelegate(
              child: Container(
                color: Colors.blue,
                height: 50,
                child: Center(
                  child: Text('Sticky Header'),
                ),
              ),
            ),
          ),
          // Create a floating header
          SliverPersistentHeader(
            floating: true,
            delegate: FloatingHeaderDelegate(
              child: Container(
                color: Colors.red,
                height: 50,
                child: Center(
                  child: Text('Floating Header'),
                ),
              ),
            ),
          ),
          // Create a list of items
          SliverList(
            delegate: SliverChildBuilderDelegate(
              (context, index) {
                return ListTile(
                  title: Text('Item $index'),
                );
              },
              childCount: 100,
            ),
          ),
        ],
      ),
    );
  }
}

// Define a sticky header delegate
class StickyHeaderDelegate extends SliverPersistentHeaderDelegate {
  final Widget child;

  StickyHeaderDelegate({required this.child});

  @override
  Widget build(BuildContext context, double shrinkOffset, bool overlapsContent) {
    return child;
  }

  @override
  double get maxExtent => 50;

  @override
  double get minExtent => 50;

  @override
  bool shouldRebuild(StickyHeaderDelegate oldDelegate) {
    return false;
  }
}

// Define a floating header delegate
class FloatingHeaderDelegate extends SliverPersistentHeaderDelegate {
  final Widget child;

  FloatingHeaderDelegate({required this.child});

  @override
  Widget build(BuildContext context, double shrinkOffset, bool overlapsContent) {
    return child;
  }

  @override
  double get maxExtent => 50;

  @override
  double get minExtent => 0;

  @override
  bool shouldRebuild(FloatingHeaderDelegate oldDelegate) {
    return false;
  }
}

// The app starts by creating a Material app with a title and a theme.
// The home page is a stateful widget that creates a CustomScrollView with a list of slivers.
// The first sliver is a sticky header that is pinned to the top of the screen.
// The second sliver is a floating header that floats above the content.
// The third sliver is a list of items that can be scrolled.
// The sticky header delegate and floating header delegate are used to define the behavior of the headers.
```

<-- END_MAIN -->
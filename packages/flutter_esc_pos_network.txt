<-- START_DESCRIPTION -->

# Overview of flutter_esc_pos_network
=====================================

The `flutter_esc_pos_network` package provides a simple and efficient way to print receipts and other documents using ESC/POS printers over a network connection. This package is ideal for businesses and developers who need to print receipts, invoices, and other documents from their Flutter applications.

### Key Features

*   Supports ESC/POS printers over network connections
*   Compatible with both Android and iOS platforms
*   Easy to use and integrate into existing Flutter applications
*   Provides a range of formatting options for text, images, and other elements

### When to Use This Package

This package is perfect for businesses and developers who need to print receipts, invoices, and other documents from their Flutter applications. It's especially useful for:

*   Point of Sale (POS) systems
*   Inventory management systems
*   Invoicing and billing systems
*   Restaurant and hospitality applications

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using flutter_esc_pos_network
=============================================

### Step 1: Add the Package to Your Flutter Project

To use the `flutter_esc_pos_network` package, you need to add it to your Flutter project. You can do this by adding the following line to your `pubspec.yaml` file:

```yml
dependencies:
  flutter_esc_pos_network: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

To use the package, you need to import it into your Dart file. You can do this by adding the following line at the top of your file:

```dart
import 'package:flutter_esc_pos_network/flutter_esc_pos_network.dart';
```

### Step 3: Create a Printer Object

To print documents, you need to create a `Printer` object. You can do this by calling the `Printer` constructor and passing in the IP address and port number of your printer:

```dart
Printer printer = Printer('192.168.1.100', 9100);
```

### Step 4: Print a Document

To print a document, you can use the `printDocument` method of the `Printer` object. This method takes a `Document` object as an argument, which you can create using the `Document` constructor:

```dart
Document document = Document();
document.addText('Hello, World!');
printer.printDocument(document);
```

### Platform-Specific Details

The `flutter_esc_pos_network` package is compatible with both Android and iOS platforms. However, there are some platform-specific details to keep in mind:

*   On Android, you need to add the `android.permission.INTERNET` permission to your `AndroidManifest.xml` file to use the package.
*   On iOS, you need to add the `NSAllowsArbitraryLoads` key to your `Info.plist` file to use the package.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_esc_pos_network/flutter_esc_pos_network.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter ESC/POS Network Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _printerController = TextEditingController();

  void _printDocument() {
    // Create a printer object
    Printer printer = Printer(_printerController.text, 9100);

    // Create a document object
    Document document = Document();

    // Add some text to the document
    document.addText('Hello, World!');
    document.addText('This is a test document.');

    // Add an image to the document
    // document.addImage('https://example.com/image.jpg');

    // Print the document
    printer.printDocument(document);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter ESC/POS Network Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            TextField(
              controller: _printerController,
              decoration: InputDecoration(
                labelText: 'Printer IP Address',
              ),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _printDocument,
              child: Text('Print Document'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user enters the IP address of the printer in the text field.
// 2. The user clicks the "Print Document" button.
// 3. The _printDocument function is called, which creates a printer object and a document object.
// 4. The document object is populated with some text and an image (optional).
// 5. The printer object prints the document using the printDocument method.
// 6. The document is sent to the printer and printed.

// Note: This is a basic example and does not include any error handling or validation.
// In a real-world application, you would want to add checks to ensure that the printer is online and that the document is printed successfully.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Flutter Eval Package: A Dynamic Expression Evaluator
=====================================================

The `flutter_eval` package is a powerful tool for evaluating dynamic expressions in Flutter applications. It allows developers to execute arbitrary code at runtime, making it ideal for use cases such as:

* Dynamic theming and styling
* Runtime configuration and customization
* Advanced data processing and filtering

Key Features:

* Supports a wide range of data types, including numbers, strings, booleans, and more
* Allows for complex expression evaluation, including arithmetic, logical, and conditional operations
* Integrates seamlessly with Flutter's widget tree and data binding system

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the Flutter Eval Package
=============================================

### Step 1: Add the Package to Your Project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_eval: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

In your Dart file, import the package:
```dart
import 'package:flutter_eval/flutter_eval.dart';
```
### Step 3: Create an Instance of the Evaluator

Create an instance of the `FlutterEval` class:
```dart
final evaluator = FlutterEval();
```
### Step 4: Evaluate an Expression

Use the `eval` method to evaluate an expression:
```dart
final result = await evaluator.eval('1 + 2 * 3');
print(result); // Output: 7
```
### Platform-Specific Details

* On Android, the package uses the `android.scripting` API to evaluate expressions.
* On iOS, the package uses the `JavaScriptCore` framework to evaluate expressions.

### Configurations and Optimizations

* To improve performance, you can cache the results of frequently evaluated expressions using the `cache` property.
* To handle errors, you can use the `onError` property to specify a callback function.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_eval/flutter_eval.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Eval Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _evaluator = FlutterEval();
  final _expressionController = TextEditingController();
  String _result = '';

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Eval Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            TextField(
              controller: _expressionController,
              decoration: InputDecoration(
                labelText: 'Enter an expression',
                border: OutlineInputBorder(),
              ),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _evaluateExpression,
              child: Text('Evaluate'),
            ),
            SizedBox(height: 20),
            Text(_result),
          ],
        ),
      ),
    );
  }

  _evaluateExpression() async {
    final expression = _expressionController.text;
    final result = await _evaluator.eval(expression);
    setState(() {
      _result = result.toString();
    });
  }
}

// The application flow is as follows:
// 1. The user enters an expression in the text field.
// 2. The user clicks the "Evaluate" button.
// 3. The _evaluateExpression function is called.
// 4. The function gets the expression from the text field.
// 5. The function calls the eval method of the FlutterEval instance.
// 6. The eval method evaluates the expression and returns the result.
// 7. The result is displayed on the screen.

// In summary, the code flows from the user input to the evaluation of the expression and finally to the display of the result.
```

<-- END_MAIN -->
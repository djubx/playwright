<-- START_DESCRIPTION -->

Throttling Package in Flutter
=============================

The throttling package in Flutter is a utility package that helps to control the rate at which a function is called. It's useful when you want to limit the number of times a function is called within a certain time period. This can be particularly useful in scenarios such as:

*   Handling user input (e.g., search queries) where you don't want to perform an action on every keystroke.
*   Limiting the number of API calls made within a certain time period.
*   Reducing the load on your app by limiting the number of times a computationally expensive function is called.

The throttling package provides a simple and easy-to-use API for throttling functions.

### Features

*   **Throttle**: Throttles a function so that it's only called once within a certain time period.
*   **Debounce**: Debounces a function so that it's only called after a certain time period has passed since the last call.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Throttling Package Tutorial
==========================

### Setup

To use the throttling package, you need to add it to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  throttling: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Basic Usage

To throttle a function, you can use the `throttle` function provided by the package:

```dart
import 'package:throttling/throttling.dart';

void main() {
  final throttledFunction = throttle(
    () {
      print('Hello, World!');
    },
    const Duration(milliseconds: 500),
  );

  // Call the throttled function
  throttledFunction();
}
```

In this example, the `throttledFunction` will only be called once every 500 milliseconds.

### Debouncing

To debounce a function, you can use the `debounce` function provided by the package:

```dart
import 'package:throttling/throttling.dart';

void main() {
  final debouncedFunction = debounce(
    () {
      print('Hello, World!');
    },
    const Duration(milliseconds: 500),
  );

  // Call the debounced function
  debouncedFunction();
}
```

In this example, the `debouncedFunction` will only be called after 500 milliseconds have passed since the last call.

### Platform-Specific Details

The throttling package works on both Android and iOS platforms. However, you may need to adjust the duration of the throttle or debounce based on the specific requirements of your app.

### Configurations and Optimizations

You can adjust the duration of the throttle or debounce to suit the specific needs of your app. Additionally, you can use the `throttle` and `debounce` functions in combination to achieve more complex behavior.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:throttling/throttling.dart';

void main() {
  runApp(const RealFlutter());
}

class RealFlutter extends StatefulWidget {
  const RealFlutter({Key? key}) : super(key: key);

  @override
  State<RealFlutter> createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final _textController = TextEditingController();
  final _throttledFunction = throttle(
    () {
      print('Throttled function called!');
    },
    const Duration(milliseconds: 500),
  );
  final _debouncedFunction = debounce(
    () {
      print('Debounced function called!');
    },
    const Duration(milliseconds: 500),
  );

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: const Text('Throttling Package Example'),
        ),
        body: Padding(
          padding: const EdgeInsets.all(20.0),
          child: Column(
            children: [
              TextField(
                controller: _textController,
                onChanged: (text) {
                  _throttledFunction();
                  _debouncedFunction();
                },
              ),
              const SizedBox(height: 20),
              ElevatedButton(
                onPressed: _throttledFunction,
                child: const Text('Call Throttled Function'),
              ),
              const SizedBox(height: 20),
              ElevatedButton(
                onPressed: _debouncedFunction,
                child: const Text('Call Debounced Function'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The app starts by running the main function, which creates a new instance of the RealFlutter widget.
// The RealFlutter widget is a stateful widget that contains a text field and two buttons.
// When the user types in the text field, the onChanged callback is called, which calls the throttled and debounced functions.
// The throttled function is only called once every 500 milliseconds, while the debounced function is only called after 500 milliseconds have passed since the last call.
// The user can also call the throttled and debounced functions manually by pressing the corresponding buttons.
// The app demonstrates the usage of the throttling package to control the rate at which functions are called.

```

<-- END_MAIN -->
```markdown
<!-- START_DESCRIPTION -->
# Multi-State Button Flutter Package

The **multi_state_button** Flutter package is a versatile widget that allows developers to create buttons with multiple states, enhancing user interaction and experience. This package is particularly useful in scenarios where a button needs to reflect different statuses, such as loading, success, error, or disabled states. 

## When to Use

You might consider using the **multi_state_button** package in the following scenarios:

- **Form Submission**: When a user submits a form, the button can show a loading state while the submission is in progress, and then switch to a success or error state based on the outcome.
- **Toggle Actions**: For buttons that toggle between states (like play/pause), this package can visually represent the current state.
- **Multi-Step Processes**: In wizards or multi-step forms, buttons can indicate the current step and allow users to navigate through the process.

## Features

- **Customizable States**: Define multiple states for a button, each with its own appearance and behavior.
- **Animations**: Smooth transitions between states to enhance user experience.
- **Easy Integration**: Simple API that integrates seamlessly with existing Flutter applications.
- **Accessibility**: Supports accessibility features to ensure all users can interact with the buttons.

With these features, the **multi_state_button** package provides a robust solution for creating dynamic buttons in Flutter applications.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Multi-State Button

## Step 1: Adding the Dependency

To get started, add the **multi_state_button** package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  multi_state_button: ^1.0.0  # Check for the latest version on pub.dev
```

## Step 2: Importing the Package

In your Dart file, import the package:

```dart
import 'package:multi_state_button/multi_state_button.dart';
```

## Step 3: Basic Usage

Hereâ€™s how to implement a basic multi-state button in your Flutter app:

```dart
MultiStateButton(
  states: [
    ButtonState(
      label: 'Submit',
      onPressed: () {
        // Handle submit action
      },
    ),
    ButtonState(
      label: 'Loading...',
      isLoading: true,
    ),
    ButtonState(
      label: 'Success!',
      isSuccess: true,
    ),
    ButtonState(
      label: 'Error!',
      isError: true,
    ),
  ],
)
```

## Platform-Specific Details

### Android

For Android, ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file:

```gradle
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

### iOS

For iOS, make sure to set the deployment target in your `ios/Podfile`:

```ruby
platform :ios, '10.0'
```

## Step 4: Customizing the Button

You can customize the appearance of the button by providing additional parameters such as colors, text styles, and animations. Refer to the package documentation for more details on customization options.

With these steps, you should be able to integrate the **multi_state_button** package into your Flutter application effectively.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Multi-State Button

```dart
import 'package:flutter/material.dart';
import 'package:multi_state_button/multi_state_button.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Multi-State Button Example',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Multi-State Button Demo'),
        ),
        body: Center(
          child: MultiStateButtonDemo(),
        ),
      ),
    );
  }
}

class MultiStateButtonDemo extends StatefulWidget {
  @override
  _MultiStateButtonDemoState createState() => _MultiStateButtonDemoState();
}

class _MultiStateButtonDemoState extends State<MultiStateButtonDemo> {
  // Variable to track the current state of the button
  int _currentState = 0;

  // Function to handle button press
  void _handleButtonPress() {
    setState(() {
      // Change to loading state
      _currentState = 1;

      // Simulate a network call
      Future.delayed(Duration(seconds: 2), () {
        // Randomly decide success or error
        bool isSuccess = DateTime.now().second % 2 == 0;

        setState(() {
          // Update the button state based on the result
          _currentState = isSuccess ? 2 : 3;
        });
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return MultiStateButton(
      states: [
        ButtonState(
          label: 'Submit',
          onPressed: _handleButtonPress, // Call the handler on press
        ),
        ButtonState(
          label: 'Loading...',
          isLoading: true, // Show loading state
        ),
        ButtonState(
          label: 'Success!',
          isSuccess: true, // Show success state
        ),
        ButtonState(
          label: 'Error!',
          isError: true, // Show error state
        ),
      ],
      currentState: _currentState, // Track the current state
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the MyApp widget, which sets up the MaterialApp and Scaffold.
// 2. The MultiStateButtonDemo widget is created, which manages the button states.
// 3. When the button is pressed, _handleButtonPress is called, changing the state to loading.
// 4. After a simulated delay (2 seconds), the state is updated to either success or error based on a random condition.
// 5. The MultiStateButton widget displays the appropriate button state based on the current state variable.
```
<!-- END_MAIN -->
``` 

This structured blog provides a comprehensive overview of the **multi_state_button** Flutter package, guiding users through its features, setup, and practical implementation.
<-- START_DESCRIPTION -->

# Ruler Picker BN Package Overview
=====================================

The `ruler_picker_bn` package is a Flutter library that provides a customizable ruler picker for selecting measurements in various units. It's ideal for applications that require users to input measurements, such as length, width, or height.

### Key Features

* Customizable ruler units (e.g., inches, centimeters, feet)
* Support for multiple measurement types (e.g., length, width, height)
* Configurable ruler layout and design
* Platform-specific optimizations for Android and iOS

### When to Use This Package

Use the `ruler_picker_bn` package when you need to provide users with an intuitive and customizable way to input measurements in your Flutter application.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the Ruler Picker BN Package
=====================================================

### Step 1: Add the Package to Your Flutter Project

Add the following dependency to your `pubspec.yaml` file:
```yml
dependencies:
  ruler_picker_bn: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:ruler_picker_bn/ruler_picker_bn.dart';
```
### Step 3: Create a Ruler Picker

Create a `RulerPicker` widget and customize its properties as needed:
```dart
RulerPicker(
  units: RulerUnits.inches,
  measurementType: RulerMeasurementType.length,
  initialValue: 10,
  onChanged: (value) {
    print('Selected value: $value');
  },
)
```
### Platform-Specific Configurations

#### Android

To ensure proper rendering on Android devices, add the following line to your `AndroidManifest.xml` file:
```xml
<application
  ...
  android:hardwareAccelerated="true"
  ...
>
```
#### iOS

To optimize performance on iOS devices, add the following line to your `Info.plist` file:
```xml
<key>UIViewEdgeAntialiasing</key>
<true/>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:ruler_picker_bn/ruler_picker_bn.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  double _selectedValue = 10;

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Ruler Picker BN Demo',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Ruler Picker BN Demo'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              RulerPicker(
                units: RulerUnits.inches,
                measurementType: RulerMeasurementType.length,
                initialValue: _selectedValue,
                onChanged: (value) {
                  setState(() {
                    _selectedValue = value;
                  });
                },
              ),
              Text(
                'Selected value: $_selectedValue',
                style: TextStyle(fontSize: 24),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user runs the app and is presented with a RulerPicker widget.
// 2. The user interacts with the RulerPicker widget to select a measurement value.
// 3. The onChanged callback is triggered, updating the _selectedValue state variable.
// 4. The Text widget below the RulerPicker widget displays the updated selected value.
// 5. The user can continue to interact with the RulerPicker widget to change the selected value.

// Summary:
// This code demonstrates the basic usage of the RulerPickerBN package.
// It creates a RulerPicker widget with a customizable units and measurement type.
// The user's selected value is displayed below the RulerPicker widget and updates in real-time as the user interacts with the widget.
```

<-- END_MAIN -->
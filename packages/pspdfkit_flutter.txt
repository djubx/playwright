<-- START_DESCRIPTION -->

# Introduction to pspdfkit_flutter
The pspdfkit_flutter package is a powerful tool for integrating PDF functionality into Flutter applications. It provides a robust and feature-rich API for rendering, editing, and annotating PDF documents. With pspdfkit_flutter, developers can create high-quality PDF experiences for their users, including support for text selection, searching, and annotation creation.

## Key Features

*   **PDF Rendering**: pspdfkit_flutter provides fast and accurate PDF rendering, including support for text, images, and graphics.
*   **Annotation Creation**: Users can create and edit annotations, including text, ink, and shape annotations.
*   **Text Selection and Searching**: Users can select and search text within PDF documents.
*   **Customization**: pspdfkit_flutter provides a range of customization options, including support for custom annotation types and appearance.

## When to Use pspdfkit_flutter

pspdfkit_flutter is ideal for any Flutter application that requires PDF functionality, including:

*   **Document Viewers**: Use pspdfkit_flutter to create high-quality document viewers that support text selection, searching, and annotation creation.
*   **PDF Editors**: Use pspdfkit_flutter to create powerful PDF editors that support annotation creation, editing, and deletion.
*   **Digital Signature Solutions**: Use pspdfkit_flutter to create digital signature solutions that support PDF signing and verification.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

## Setup and Configuration

To use pspdfkit_flutter, you'll need to add the package to your Flutter project and configure it for your target platforms.

### Step 1: Add the Package

Add the pspdfkit_flutter package to your Flutter project by adding the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  pspdfkit_flutter: ^1.0.0
```

### Step 2: Configure for Android

To use pspdfkit_flutter on Android, you'll need to add the following configuration to your `android/app/build.gradle` file:

```groovy
android {
    defaultConfig {
        // ...
        multiDexEnabled true
    }
}
```

### Step 3: Configure for iOS

To use pspdfkit_flutter on iOS, you'll need to add the following configuration to your `ios/Podfile` file:

```ruby
target 'Runner' do
  # ...
  pod 'PSPDFKit', '~> 9.4'
end
```

## Using pspdfkit_flutter

To use pspdfkit_flutter, you'll need to create a `PspdfkitFlutter` widget and pass it a `PdfDocument` object.

```dart
import 'package:flutter/material.dart';
import 'package:pspdfkit_flutter/pspdfkit_flutter.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  PdfDocument _document;

  @override
  void initState() {
    super.initState();
    _document = PdfDocument.fromAsset('assets/example.pdf');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('PSPDFKit Flutter Example'),
      ),
      body: PspdfkitFlutter(
        document: _document,
      ),
    );
  }
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:pspdfkit_flutter/pspdfkit_flutter.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'PSPDFKit Flutter Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  PdfDocument _document;

  // Step 1: Load the PDF document from assets
  @override
  void initState() {
    super.initState();
    _document = PdfDocument.fromAsset('assets/example.pdf');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('PSPDFKit Flutter Example'),
      ),
      body: PspdfkitFlutter(
        // Step 2: Pass the PDF document to the PspdfkitFlutter widget
        document: _document,
        // Step 3: Customize the appearance of the PDF viewer
        appearance: PdfAppearance(
          scrollDirection: PdfScrollDirection.vertical,
          pageLayoutMode: PdfPageLayoutMode.continuous,
        ),
        // Step 4: Handle annotation creation and editing
        onAnnotationCreated: (annotation) {
          print('Annotation created: ${annotation.id}');
        },
        onAnnotationEdited: (annotation) {
          print('Annotation edited: ${annotation.id}');
        },
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user launches the app and the RealFlutter widget is created.
// 2. The RealFlutter widget loads the PDF document from assets in its initState method.
// 3. The RealFlutter widget builds the PspdfkitFlutter widget and passes it the PDF document.
// 4. The PspdfkitFlutter widget displays the PDF document and allows the user to create and edit annotations.
// 5. When the user creates or edits an annotation, the PspdfkitFlutter widget calls the onAnnotationCreated or onAnnotationEdited callback.
// 6. The callback prints a message to the console indicating that an annotation was created or edited.

// Final summary: This code creates a basic PDF viewer using PSPDFKit Flutter and demonstrates how to load a PDF document, customize the appearance of the viewer, and handle annotation creation and editing.
```

<-- END_MAIN -->
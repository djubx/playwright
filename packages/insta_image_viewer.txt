```markdown
<-- START_DESCRIPTION -->

# Insta Image Viewer Flutter Package

The `insta_image_viewer` Flutter package is a powerful tool designed to enhance the image viewing experience in your Flutter applications. It provides a seamless and interactive way to display images, similar to the image viewer found in popular social media applications like Instagram. This package is particularly useful when you want to implement features such as pinch-to-zoom, double-tap to zoom, and smooth image transitions.

## When to Use

- **Social Media Apps**: Perfect for apps that require a rich media viewing experience.
- **Photo Galleries**: Ideal for applications that display a collection of images.
- **E-commerce Apps**: Useful for showcasing product images with zoom capabilities.

## Features

- **Pinch-to-Zoom**: Allows users to zoom in and out using pinch gestures.
- **Double-Tap to Zoom**: Quickly zoom into an image with a double-tap.
- **Smooth Transitions**: Provides a fluid and responsive image viewing experience.
- **Customizable**: Offers various customization options to fit the design needs of your application.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using Insta Image Viewer

In this tutorial, we will walk through the process of setting up and using the `insta_image_viewer` package in a Flutter project. We will cover platform-specific configurations for both Android and iOS to ensure a smooth integration.

## Setup Process

### Step 1: Add Dependency

Add the `insta_image_viewer` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  insta_image_viewer: ^1.0.0
```

Run `flutter pub get` to install the package.

### Step 2: Android Configuration

For Android, ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```gradle
android {
    defaultConfig {
        minSdkVersion 21
    }
}
```

### Step 3: iOS Configuration

For iOS, make sure you have the following configuration in your `ios/Podfile`:

```ruby
platform :ios, '10.0'
```

### Step 4: Import the Package

In your Dart file, import the package:

```dart
import 'package:insta_image_viewer/insta_image_viewer.dart';
```

## Using the Package

To use the `insta_image_viewer`, wrap your image widget with `InstaImageViewer`:

```dart
InstaImageViewer(
  child: Image.network('https://example.com/image.jpg'),
)
```

This will enable the interactive image viewing features on the specified image.

<-- END_TUTORIAL -->

<-- START_MAIN -->

# Complete Example: Flutter Main File

Below is a complete example demonstrating the use of the `insta_image_viewer` package in a Flutter application.

```dart
import 'package:flutter/material.dart';
import 'package:insta_image_viewer/insta_image_viewer.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Insta Image Viewer Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: ImageGallery(),
    );
  }
}

class ImageGallery extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Image Gallery'),
      ),
      body: Center(
        child: InstaImageViewer(
          // Wrapping the image with InstaImageViewer to enable zoom features
          child: Image.network(
            'https://example.com/image.jpg',
            fit: BoxFit.cover,
          ),
        ),
      ),
    );
  }
}
```

// The application starts with the `main` function, which calls `runApp` with `MyApp`.
// `MyApp` is a stateless widget that sets up the MaterialApp with a title and theme.
// The home of the app is set to `ImageGallery`, another stateless widget.
// `ImageGallery` builds a Scaffold with an AppBar and a centered body.
// The body contains an `InstaImageViewer` widget wrapping an `Image.network` widget.
// This setup allows the image to be viewed with interactive zoom features.

<-- END_MAIN -->
```
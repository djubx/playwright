<-- START_DESCRIPTION -->

# Fitbitter Flutter Package
The Fitbitter Flutter package is a powerful tool for interacting with the Fitbit API. It allows developers to access user data, track activities, and monitor health metrics. This package is ideal for building fitness and health-related applications that require integration with Fitbit devices.

## Key Features

*   OAuth 2.0 authentication and authorization
*   Access to user profile, activities, sleep, and other health metrics
*   Support for various Fitbit devices and models
*   Easy-to-use API for fetching and syncing data

## When to Use

*   Building fitness and health-related applications
*   Integrating with Fitbit devices for data tracking and analysis
*   Creating personalized health and wellness experiences for users

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Fitbitter Package

To use the Fitbitter package in your Flutter project, follow these steps:

1.  Add the package to your `pubspec.yaml` file:

    ```yml
dependencies:
  flutter:
    sdk: flutter
  fitbitter: ^1.0.0
```

2.  Run `flutter pub get` to install the package.
3.  Import the package in your Dart file:

    ```dart
import 'package:fitbitter/fitbitter.dart';
```

4.  Initialize the Fitbitter client with your client ID and client secret:

    ```dart
FitbitClient fitbitClient = FitbitClient(
  clientId: 'YOUR_CLIENT_ID',
  clientSecret: 'YOUR_CLIENT_SECRET',
);
```

## Platform-Specific Details

*   **Android:** Add the following configuration to your `AndroidManifest.xml` file:

    ```xml
<application>
  ...
  <activity
    android:name="com.example.RealFlutter"
    android:exported="true">
    <intent-filter>
      <action android:name="android.intent.action.VIEW" />
      <category android:name="android.intent.category.DEFAULT" />
      <category android:name="android.intent.category.BROWSABLE" />
      <data
        android:host="example.com"
        android:pathPrefix="/fitbit-auth"
        android:scheme="https" />
    </intent-filter>
  </activity>
</application>
```

*   **iOS:** Add the following configuration to your `Info.plist` file:

    ```xml
<key>CFBundleURLTypes</key>
<array>
  <dict>
    <key>CFBundleURLName</key>
    <string>example.com</string>
    <key>CFBundleURLSchemes</key>
    <array>
      <string>https</string>
    </array>
  </dict>
</array>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:fitbitter/fitbitter.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final FitbitClient _fitbitClient = FitbitClient(
    clientId: 'YOUR_CLIENT_ID',
    clientSecret: 'YOUR_CLIENT_SECRET',
  );

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Fitbitter Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              ElevatedButton(
                onPressed: _authenticate,
                child: Text('Authenticate'),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _fetchProfile,
                child: Text('Fetch Profile'),
              ),
            ],
          ),
        ),
      ),
    );
  }

  _authenticate() async {
    // Start the authentication process
    await _fitbitClient.authenticate();
  }

  _fetchProfile() async {
    // Fetch the user's profile
    final profile = await _fitbitClient.getProfile();
    print(profile);
  }
}

// The application flow is as follows:
// 1. The user clicks the "Authenticate" button, which starts the authentication process.
// 2. The Fitbitter client redirects the user to the Fitbit authentication page.
// 3. After the user grants access, the Fitbitter client redirects the user back to the app.
// 4. The app fetches the user's profile using the access token obtained during authentication.
// 5. The profile is printed to the console.

// In summary, this code demonstrates how to use the Fitbitter package to authenticate with Fitbit and fetch a user's profile.
```

<-- END_MAIN -->
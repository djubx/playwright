<-- START_DESCRIPTION -->

Selectable Container Flutter Package
=====================================

The `selectable_container` Flutter package provides a customizable widget that allows users to select and deselect items in a container. This package is useful when you need to implement a selection mechanism in your app, such as selecting multiple items in a list or grid.

Features
--------

*   Customizable selection behavior
*   Support for single and multiple selection
*   Optional callbacks for selection and deselection events
*   Compatible with various Flutter widgets, such as `ListView` and `GridView`

When to Use
------------

Use the `selectable_container` package when you need to implement a selection mechanism in your app. This package is particularly useful when working with lists or grids of items, where users need to select multiple items.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
----------------

To use the `selectable_container` package, follow these steps:

### Step 1: Add the Package to Your Project

Add the `selectable_container` package to your `pubspec.yaml` file:

```yml
dependencies:
  selectable_container: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the `selectable_container` package in your Dart file:

```dart
import 'package:selectable_container/selectable_container.dart';
```

### Step 3: Use the `SelectableContainer` Widget

Use the `SelectableContainer` widget to wrap your items:

```dart
SelectableContainer(
  child: YourItemWidget(),
  isSelected: _isSelected,
  onTap: () {
    setState(() {
      _isSelected = !_isSelected;
    });
  },
)
```

In the above example, `_isSelected` is a boolean variable that tracks the selection state of the item.

### Platform-Specific Details

The `selectable_container` package works on both Android and iOS platforms. However, you may need to adjust the widget's properties to achieve the desired appearance and behavior on each platform.

For example, on Android, you may want to use the `Material` widget to give your items a material design look:

```dart
SelectableContainer(
  child: Material(
    child: YourItemWidget(),
  ),
  // ...
)
```

On iOS, you may want to use the `Cupertino` widget to give your items a Cupertino look:

```dart
SelectableContainer(
  child: Cupertino(
    child: YourItemWidget(),
  ),
  // ...
)
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:selectable_container/selectable_container.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  List<bool> _selectionStates = [false, false, false];

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Selectable Container Demo'),
        ),
        body: ListView.builder(
          itemCount: 3,
          itemBuilder: (context, index) {
            return SelectableContainer(
              // Use the index to access the selection state
              isSelected: _selectionStates[index],
              // Update the selection state when the item is tapped
              onTap: () {
                setState(() {
                  _selectionStates[index] = !_selectionStates[index];
                });
              },
              child: ListTile(
                title: Text('Item $index'),
              ),
            );
          },
        ),
      ),
    );
  }
}

// The app starts by running the main function, which creates a RealFlutter widget.
// The RealFlutter widget is a stateful widget that maintains a list of selection states.
// The widget uses a ListView.builder to create a list of items.
// Each item is wrapped in a SelectableContainer widget, which tracks the selection state.
// When an item is tapped, the SelectableContainer widget updates the selection state.
// The app rebuilds the list with the updated selection states.
```

<-- END_MAIN -->
```markdown
<!-- START_DESCRIPTION -->
# Extended Text Field Flutter Package

The `extended_text_field` Flutter package is a powerful tool designed to enhance the standard text input capabilities in Flutter applications. It provides a rich text editing experience, allowing developers to create text fields that support various features such as text formatting, mentions, and more. This package is particularly useful in applications that require advanced text input, such as chat applications, note-taking apps, or any app that needs to handle rich text.

## When to Use This Package

You should consider using the `extended_text_field` package when:
- You need to implement a text field that supports rich text formatting.
- Your application requires features like mentions, hashtags, or links within the text input.
- You want to provide a better user experience with customizable text input options.

## Key Features
- **Rich Text Support**: Allows users to format text with different styles.
- **Mention and Hashtag Support**: Easily implement mentions and hashtags within the text.
- **Customizable**: Highly customizable to fit the design and functionality of your application.
- **Easy Integration**: Simple to integrate into existing Flutter applications.

Overall, the `extended_text_field` package is a versatile solution for developers looking to enhance text input in their Flutter applications.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Extended Text Field Package

## Step 1: Adding the Dependency

To get started, you need to add the `extended_text_field` package to your Flutter project. Open your `pubspec.yaml` file and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  extended_text_field: ^latest_version
```

Make sure to replace `^latest_version` with the latest version of the package available on [pub.dev](https://pub.dev/packages/extended_text_field).

## Step 2: Running Flutter Packages Get

After adding the dependency, run the following command in your terminal to install the package:

```bash
flutter pub get
```

## Step 3: Platform-Specific Configuration

### Android Configuration

For Android, ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
        ...
    }
}
```

### iOS Configuration

For iOS, you may need to enable certain permissions in your `Info.plist` file, depending on the features you plan to use. For example, if you are using mentions that require internet access, ensure you have:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

## Step 4: Using the Extended Text Field

Now that you have set up the package, you can start using the `ExtendedTextField` widget in your application. Hereâ€™s a simple example of how to implement it:

```dart
import 'package:flutter/material.dart';
import 'package:extended_text/extended_text.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Extended Text Field Example')),
        body: Padding(
          padding: const EdgeInsets.all(16.0),
          child: ExtendedTextField(
            decoration: InputDecoration(
              border: OutlineInputBorder(),
              hintText: 'Type something...',
            ),
            maxLines: 5,
            onChanged: (text) {
              // Handle text changes
            },
          ),
        ),
      ),
    );
  }
}

void main() {
  runApp(RealFlutter());
}
```

This code creates a simple Flutter application with an extended text field that allows users to input text with a maximum of 5 lines.

## Conclusion

You have now set up the `extended_text_field` package in your Flutter application and created a basic implementation. You can further customize the text field by exploring additional features provided by the package.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Extended Text Field

```dart
import 'package:flutter/material.dart';
import 'package:extended_text/extended_text.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Extended Text Field Example')),
        body: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            children: [
              // ExtendedTextField for rich text input
              ExtendedTextField(
                decoration: InputDecoration(
                  border: OutlineInputBorder(),
                  hintText: 'Type something...',
                ),
                maxLines: 5,
                onChanged: (text) {
                  // Handle text changes
                  print('Text changed: $text');
                },
              ),
              SizedBox(height: 20),
              // Displaying the entered text
              Text('You entered:'),
              // Using ExtendedText to display formatted text
              ExtendedText(
                'This is an example of extended text display.',
                specialTextSpanBuilder: MySpecialTextSpanBuilder(),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Custom SpecialTextSpanBuilder for handling mentions or special text
class MySpecialTextSpanBuilder extends SpecialTextSpanBuilder {
  @override
  TextSpan buildSpecialText(String text, {TextStyle? textStyle}) {
    // Custom logic for handling special text
    return TextSpan(text: text, style: textStyle);
  }
}

void main() {
  runApp(RealFlutter());
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the RealFlutter widget.
// 2. The RealFlutter widget builds a MaterialApp with a Scaffold containing an AppBar and a body.
// 3. Inside the body, an ExtendedTextField is created for user input, allowing up to 5 lines of text.
// 4. The onChanged callback prints the current text to the console whenever the user types.
// 5. Below the text field, the entered text is displayed using the ExtendedText widget, which can handle rich text formatting.
// 6. A custom SpecialTextSpanBuilder is defined to manage any special text formatting, such as mentions or hashtags.
```
<!-- END_MAIN -->
``` 

This structured blog provides a comprehensive overview of the `extended_text_field` package, guiding users through its features, setup, and implementation in a Flutter application.
```markdown
<!-- START_DESCRIPTION -->
# Scroll Screenshot Flutter Package

The `scroll_screenshot` package for Flutter is a powerful tool that allows developers to capture screenshots of scrollable widgets. This package is particularly useful in scenarios where you need to capture long lists or complex layouts that extend beyond the visible screen area. 

## When to Use

You might want to use the `scroll_screenshot` package in the following scenarios:
- **Long Lists**: When you have a list of items that is too long to fit on the screen, and you want to capture the entire list in one image.
- **Scrollable Content**: For capturing screenshots of scrollable content like articles, chat messages, or any other content that requires scrolling.
- **Testing and Documentation**: When you need to create visual documentation or automated tests that require screenshots of the UI.

## Features

- **Easy Integration**: The package is easy to integrate into existing Flutter applications.
- **Customizable**: You can customize the screenshot capture process, including the ability to specify the area to capture.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS platforms.

With these features, the `scroll_screenshot` package provides a robust solution for capturing scrollable content in Flutter applications.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Scroll Screenshot

## Step 1: Add Dependency

To use the `scroll_screenshot` package, you first need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  scroll_screenshot: ^1.0.0  # Check for the latest version on pub.dev
```

## Step 2: Import the Package

In your Dart file, import the package:

```dart
import 'package:scroll_screenshot/scroll_screenshot.dart';
```

## Step 3: Platform-Specific Configuration

### Android

For Android, ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

### iOS

For iOS, you may need to add permissions in your `Info.plist` if you plan to save screenshots to the device:

```xml
<key>NSPhotoLibraryAddUsageDescription</key>
<string>We need access to save screenshots to your photo library.</string>
```

## Step 4: Using the Package

You can now use the `ScrollScreenshot` widget to capture screenshots. Hereâ€™s a simple example of how to implement it:

1. Wrap your scrollable widget with `ScrollScreenshot`.
2. Use the `capture` method to take a screenshot.

```dart
// Example of using ScrollScreenshot
ScrollScreenshotController screenshotController = ScrollScreenshotController();

ScrollScreenshot(
  controller: screenshotController,
  child: ListView.builder(
    itemCount: 100,
    itemBuilder: (context, index) {
      return ListTile(
        title: Text('Item $index'),
      );
    },
  ),
);
```

## Step 5: Capturing the Screenshot

To capture the screenshot, you can call the `capture` method:

```dart
void _captureScreenshot() async {
  final image = await screenshotController.capture();
  // Do something with the captured image, like saving or displaying it
}
```

With these steps, you can easily set up and use the `scroll_screenshot` package in your Flutter application.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Scroll Screenshot

```dart
import 'package:flutter/material.dart';
import 'package:scroll_screenshot/scroll_screenshot.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Scroll Screenshot Example',
      home: ScreenshotExample(),
    );
  }
}

class ScreenshotExample extends StatelessWidget {
  // Create a controller for the ScrollScreenshot
  final ScrollScreenshotController screenshotController = ScrollScreenshotController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Scroll Screenshot Example'),
      ),
      body: ScrollScreenshot(
        controller: screenshotController, // Attach the controller
        child: ListView.builder(
          itemCount: 100, // Number of items in the list
          itemBuilder: (context, index) {
            return ListTile(
              title: Text('Item $index'), // Display item number
            );
          },
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () async {
          // Capture the screenshot when the button is pressed
          final image = await screenshotController.capture();
          // Here you can save or display the image
          // For demonstration, we will just print a message
          print('Screenshot captured: $image');
        },
        child: Icon(Icons.camera),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function runs the MyApp widget.
// 2. MyApp builds a MaterialApp with a title and a home widget.
// 3. ScreenshotExample is the main screen where the screenshot functionality is implemented.
// 4. A ScrollScreenshotController is created to manage the screenshot capturing.
// 5. The body of the Scaffold contains a ScrollScreenshot widget wrapping a ListView.builder.
// 6. The ListView displays 100 items, each represented by a ListTile.
// 7. A FloatingActionButton is provided to capture the screenshot when pressed.
// 8. When the button is pressed, the capture method is called, and a message is printed to indicate the screenshot was captured.
```
<!-- END_MAIN -->
``` 

This structured blog provides a comprehensive overview of the `scroll_screenshot` package, guiding users through its features, setup, and implementation with a complete example.
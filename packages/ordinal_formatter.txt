```markdown
<-- START_DESCRIPTION -->

# Ordinal Formatter Flutter Package

The `ordinal_formatter` Flutter package is a powerful tool designed to simplify the process of formatting numbers into their ordinal forms. Ordinals are numbers that indicate position or order in a sequence, such as "1st", "2nd", "3rd", etc. This package is particularly useful in applications where displaying user-friendly, human-readable numbers is essential, such as leaderboards, rankings, or any list where the order is significant.

## When to Use

- **Leaderboards**: Displaying user positions in a game or competition.
- **Rankings**: Showing ordered lists, such as top scorers or best performers.
- **Event Sequences**: Indicating the order of events or steps in a process.

## Features

- **Simple API**: Easy to integrate and use within any Flutter application.
- **Customizable**: Allows for customization of ordinal suffixes if needed.
- **Locale Support**: Supports multiple locales for internationalization.
- **Lightweight**: Minimal impact on app performance.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Ordinal Formatter

In this section, we'll walk through the setup process for the `ordinal_formatter` package and demonstrate how to use it in a Flutter application. We'll cover platform-specific details for both Android and iOS to ensure smooth integration.

## Setup Process

1. **Add Dependency**: First, add the `ordinal_formatter` package to your `pubspec.yaml` file.

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     ordinal_formatter: ^1.0.0
   ```

2. **Install Packages**: Run `flutter pub get` to install the new package.

3. **Import the Package**: In your Dart file, import the package to start using it.

   ```dart
   import 'package:ordinal_formatter/ordinal_formatter.dart';
   ```

## Platform-Specific Details

### Android

- Ensure your `minSdkVersion` in `android/app/build.gradle` is set to at least 21 to support all features of the package.

### iOS

- No additional setup is required for iOS. Ensure your deployment target is set to iOS 9.0 or higher in your `ios/Podfile`.

## Using the Package

To use the `ordinal_formatter`, simply call the `ordinal` method on any integer. Here's a quick example:

```dart
String formattedNumber = RealFlutter.ordinal(1); // Outputs: "1st"
```

You can also specify a locale if needed:

```dart
String formattedNumber = RealFlutter.ordinal(1, locale: 'en_US'); // Outputs: "1st"
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

# Complete Example: Flutter Main File

Below is a complete example of a Flutter application that demonstrates the key features of the `ordinal_formatter` package.

```dart
import 'package:flutter/material.dart';
import 'package:ordinal_formatter/ordinal_formatter.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Ordinal Formatter Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // List of numbers to format
    final numbers = [1, 2, 3, 4, 21, 22, 23, 101];

    return Scaffold(
      appBar: AppBar(
        title: Text('Ordinal Formatter Example'),
      ),
      body: ListView.builder(
        itemCount: numbers.length,
        itemBuilder: (context, index) {
          // Format each number to its ordinal form
          final ordinalNumber = RealFlutter.ordinal(numbers[index]);

          return ListTile(
            title: Text('Number: ${numbers[index]}'),
            subtitle: Text('Ordinal: $ordinalNumber'),
          );
        },
      ),
    );
  }
}
```

// The application starts by running the `main` function, which calls `runApp` with `MyApp`.
// `MyApp` is a stateless widget that sets up the MaterialApp with a title and theme.
// The home of the app is `MyHomePage`, another stateless widget.
// `MyHomePage` builds a Scaffold with an AppBar and a ListView.
// The ListView iterates over a list of numbers, formatting each to its ordinal form using `RealFlutter.ordinal`.
// Each formatted number is displayed in a ListTile with the original number and its ordinal form.

<-- END_MAIN -->
```

This blog post provides a comprehensive guide to using the `ordinal_formatter` package in Flutter, from setup to implementation, complete with a working example.
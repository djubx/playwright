<-- START_DESCRIPTION -->

# tus_client_dart Flutter Package
=====================================

The `tus_client_dart` package is a Flutter library that provides a simple and efficient way to upload files to a server using the TUS (Tus Upload Server) protocol. TUS is a protocol for resumable file uploads, which allows clients to pause and resume uploads at any time.

### When to Use This Package

This package is ideal for applications that require uploading large files, such as videos, images, or documents, to a server. It provides a reliable and efficient way to handle file uploads, even in cases of network failures or interruptions.

### Features

*   Supports resumable file uploads using the TUS protocol
*   Handles network failures and interruptions
*   Provides a simple and easy-to-use API
*   Supports uploading files of any size

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the Package
=====================================

To use the `tus_client_dart` package, follow these steps:

### Step 1: Add the Package to Your Project

Add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  tus_client_dart: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:tus_client_dart/tus_client_dart.dart';
```

### Step 3: Create a TUS Client

Create a TUS client instance:

```dart
final tusClient = TusClient(
  Uri.parse('https://example.com/tus'), // TUS server URL
  headers: {
    'Authorization': 'Bearer YOUR_API_KEY', // Add your API key or other headers as needed
  },
);
```

### Step 4: Upload a File

Upload a file using the `upload` method:

```dart
final file = File('path/to/your/file.txt');
final uploadUrl = await tusClient.upload(file);
print('Upload URL: $uploadUrl');
```

### Platform-Specific Details

*   **Android:** No additional configuration is required.
*   **iOS:** You may need to add the `NSAppTransportSecurity` key to your `Info.plist` file to allow HTTP requests to your TUS server.

### Required Configurations or Optimizations

*   You can configure the TUS client to use a specific HTTP client or to handle network failures and interruptions.
*   You can also optimize the upload process by setting the chunk size or the number of concurrent uploads.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:tus_client_dart/tus_client_dart.dart';

void main() {
  runApp(const RealFlutter());
}

class RealFlutter extends StatefulWidget {
  const RealFlutter({Key? key}) : super(key: key);

  @override
  State<RealFlutter> createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final _tusClient = TusClient(
    Uri.parse('https://example.com/tus'), // TUS server URL
    headers: {
      'Authorization': 'Bearer YOUR_API_KEY', // Add your API key or other headers as needed
    },
  );

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: const Text('TUS Client Demo'),
        ),
        body: Center(
          child: ElevatedButton(
            onPressed: _uploadFile,
            child: const Text('Upload File'),
          ),
        ),
      ),
    );
  }

  Future<void> _uploadFile() async {
    // Select a file to upload
    final file = File('path/to/your/file.txt');

    // Upload the file using the TUS client
    final uploadUrl = await _tusClient.upload(file);

    // Print the upload URL
    print('Upload URL: $uploadUrl');
  }
}

// The application flow is as follows:
// 1. The user clicks the "Upload File" button.
// 2. The `_uploadFile` function is called, which selects a file to upload.
// 3. The file is uploaded using the TUS client.
// 4. The upload URL is printed to the console.
// The TUS client handles network failures and interruptions, and provides a reliable and efficient way to upload files.

// Final summary: The code flows by first creating a TUS client instance, then uploading a file using the client, and finally printing the upload URL. The TUS client handles network failures and interruptions, providing a reliable and efficient way to upload files.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# xrandom Flutter Package
================================

The xrandom Flutter package is a powerful tool for generating random numbers, strings, and other data types in your Flutter applications. It provides a simple and efficient way to generate random data, making it ideal for a wide range of use cases, such as:

* Generating random numbers for games or simulations
* Creating random strings for passwords or IDs
* Shuffling data collections
* Generating random colors or gradients

The xrandom package offers a range of features, including:

* Support for generating random integers, doubles, and strings
* Ability to specify custom ranges and distributions for random numbers
* Support for generating random colors and gradients
* Efficient and fast random number generation

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up xrandom
--------------------

To use the xrandom package in your Flutter application, follow these steps:

1. Add the xrandom package to your `pubspec.yaml` file:
```yml
dependencies:
  xrandom: ^1.0.0
```
2. Run `flutter pub get` to install the package.
3. Import the xrandom package in your Dart file:
```dart
import 'package:xrandom/xrandom.dart';
```
### Platform-Specific Details

* Android: No additional setup is required.
* iOS: No additional setup is required.

### Configurations and Optimizations

* To optimize performance, you can specify a custom random number generator using the `XRandom` constructor.
* To generate random numbers within a specific range, use the `XRandom.range` method.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:xrandom/xrandom.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  XRandom _random = XRandom();

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('xrandom Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Text(
                'Random Integer:',
                style: TextStyle(fontSize: 24),
              ),
              Text(
                _random.nextInt(100).toString(),
                style: TextStyle(fontSize: 48),
              ),
              SizedBox(height: 20),
              Text(
                'Random Double:',
                style: TextStyle(fontSize: 24),
              ),
              Text(
                _random.nextDouble().toString(),
                style: TextStyle(fontSize: 48),
              ),
              SizedBox(height: 20),
              Text(
                'Random String:',
                style: TextStyle(fontSize: 24),
              ),
              Text(
                _random.nextString(10),
                style: TextStyle(fontSize: 48),
              ),
              SizedBox(height: 20),
              Text(
                'Random Color:',
                style: TextStyle(fontSize: 24),
              ),
              Container(
                width: 50,
                height: 50,
                color: _random.nextColor(),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app, which creates an instance of the RealFlutter widget.
// 2. The RealFlutter widget creates an instance of the XRandom class, which is used to generate random numbers and strings.
// 3. The build method of the RealFlutter widget is called, which creates a MaterialApp with a Scaffold and an AppBar.
// 4. The body of the Scaffold contains a Center widget, which contains a Column widget with several Text widgets and a Container widget.
// 5. The Text widgets display the random integer, double, string, and color generated by the XRandom class.
// 6. The Container widget displays the random color generated by the XRandom class.
// 7. When the user interacts with the app, the build method is called again, which generates new random numbers and strings and updates the display.

```

<-- END_MAIN -->
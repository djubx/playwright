<-- START_DESCRIPTION -->

# Squares Flutter Package
The Squares Flutter package is a powerful tool for creating and managing grid-based layouts in Flutter applications. It provides a simple and efficient way to create complex grid structures, making it ideal for a wide range of use cases, from simple puzzles to complex data visualization.

## Key Features

*   **Grid Management**: The Squares package allows you to create and manage grids of any size, with customizable cell sizes and spacing.
*   **Cell Customization**: Each cell in the grid can be customized with its own content, background color, and border style.
*   **Event Handling**: The package provides built-in event handling for cell taps, long presses, and other gestures.
*   **Animation Support**: Squares includes support for animating cell content and background colors.

## When to Use Squares

*   **Puzzle Games**: Squares is perfect for creating puzzle games like Sudoku, crosswords, and word searches.
*   **Data Visualization**: The package can be used to create complex data visualizations, such as heat maps and scatter plots.
*   **Custom Grid Layouts**: Squares can be used to create custom grid layouts for a wide range of applications, from photo galleries to calendar views.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up Squares

To use the Squares package in your Flutter application, follow these steps:

1.  **Add the Package to Your Pubspec File**: Add the following line to your `pubspec.yaml` file:

    ```yml
dependencies:
  squares: ^1.0.0
```

2.  **Import the Package**: Import the Squares package in your Dart file:

    ```dart
import 'package:squares/squares.dart';
```

3.  **Create a Grid**: Create a grid by specifying the number of rows and columns:

    ```dart
Squares(
  rows: 10,
  columns: 10,
  cellSize: 50,
  spacing: 5,
)
```

4.  **Customize Cells**: Customize each cell by providing a `CellBuilder` function:

    ```dart
Squares(
  rows: 10,
  columns: 10,
  cellSize: 50,
  spacing: 5,
  cellBuilder: (context, row, column) {
    return Container(
      color: Colors.blue,
      child: Center(
        child: Text('$row, $column'),
      ),
    );
  },
)
```

5.  **Handle Events**: Handle cell tap events by providing an `onTap` function:

    ```dart
Squares(
  rows: 10,
  columns: 10,
  cellSize: 50,
  spacing: 5,
  onTap: (row, column) {
    print('Cell at row $row, column $column tapped');
  },
)
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:squares/squares.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Squares Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  int _rows = 10;
  int _columns = 10;
  double _cellSize = 50;
  double _spacing = 5;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Squares Demo'),
      ),
      body: Center(
        child: Squares(
          rows: _rows,
          columns: _columns,
          cellSize: _cellSize,
          spacing: _spacing,
          cellBuilder: (context, row, column) {
            // Return a custom cell widget
            return Container(
              color: Colors.blue,
              child: Center(
                child: Text('$row, $column'),
              ),
            );
          },
          onTap: (row, column) {
            // Handle cell tap events
            print('Cell at row $row, column $column tapped');
          },
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          // Update the grid size and cell size
          setState(() {
            _rows = 15;
            _columns = 15;
            _cellSize = 30;
            _spacing = 10;
          });
        },
        tooltip: 'Update Grid',
        child: Icon(Icons.update),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app and is presented with a grid of 10x10 cells.
// 2. Each cell displays its row and column number.
// 3. When the user taps a cell, the app prints the row and column number of the tapped cell.
// 4. The user can update the grid size and cell size by tapping the floating action button.
// 5. The app updates the grid size and cell size, and the user can interact with the new grid.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Flutter Zoom Checker Package
================================

The `flutter_zoom_checker` package is a Flutter plugin that allows developers to check the current zoom level of the device and adjust their app's UI accordingly. This package is particularly useful for apps that require precise control over their UI layout, such as games, graphics editors, or video players.

## Features

*   Checks the current zoom level of the device
*   Provides a callback to notify when the zoom level changes
*   Works on both Android and iOS platforms

## When to Use

Use this package when you need to:

*   Adjust your app's UI layout based on the device's zoom level
*   Ensure that your app's UI elements are displayed correctly at different zoom levels
*   Improve the overall user experience by adapting to the device's zoom level

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
================

## Step 1: Add the Package to Your Project

Add the `flutter_zoom_checker` package to your project by adding the following line to your `pubspec.yaml` file:

```yml
dependencies:
  flutter_zoom_checker: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:flutter_zoom_checker/flutter_zoom_checker.dart';
```

## Step 3: Initialize the Package

Initialize the package by calling the `init` method:

```dart
FlutterZoomChecker.init();
```

## Step 4: Get the Current Zoom Level

Get the current zoom level by calling the `getZoomLevel` method:

```dart
double zoomLevel = await FlutterZoomChecker.getZoomLevel();
```

## Step 5: Listen for Zoom Level Changes

Listen for zoom level changes by calling the `onZoomLevelChanged` method:

```dart
FlutterZoomChecker.onZoomLevelChanged((zoomLevel) {
  // Handle zoom level change
});
```

### Platform-Specific Details

#### Android

On Android, the `flutter_zoom_checker` package uses the `AccessibilityService` to get the current zoom level. This requires the `android.permission.BIND_ACCESSIBILITY_SERVICE` permission to be added to your app's `AndroidManifest.xml` file:

```xml
<uses-permission android:name="android.permission.BIND_ACCESSIBILITY_SERVICE" />
```

#### iOS

On iOS, the `flutter_zoom_checker` package uses the `UIAccessibility` framework to get the current zoom level. This requires the `NSAccessibility` capability to be added to your app's `Info.plist` file:

```xml
<key>NSAccessibility</key>
<array>
    <string>UIAccessibility</string>
</array>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_zoom_checker/flutter_zoom_checker.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatefulWidget {
  @override
  _MyAppState createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  double _zoomLevel = 1.0;

  @override
  void initState() {
    super.initState();
    // Initialize the package
    FlutterZoomChecker.init();
    // Get the current zoom level
    _getZoomLevel();
    // Listen for zoom level changes
    FlutterZoomChecker.onZoomLevelChanged((zoomLevel) {
      // Handle zoom level change
      setState(() {
        _zoomLevel = zoomLevel;
      });
    });
  }

  Future<void> _getZoomLevel() async {
    // Get the current zoom level
    double zoomLevel = await FlutterZoomChecker.getZoomLevel();
    // Update the UI with the current zoom level
    setState(() {
      _zoomLevel = zoomLevel;
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Flutter Zoom Checker Example'),
        ),
        body: Center(
          child: Text(
            'Current Zoom Level: $_zoomLevel',
            style: TextStyle(fontSize: 24),
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The app initializes the FlutterZoomChecker package in the initState method.
// 2. The app gets the current zoom level using the _getZoomLevel method.
// 3. The app listens for zoom level changes using the onZoomLevelChanged method.
// 4. When the zoom level changes, the app updates the UI with the new zoom level.
// 5. The app displays the current zoom level in the center of the screen.

// The app uses the FlutterZoomChecker package to get the current zoom level and listen for zoom level changes.
// The app updates the UI with the current zoom level and displays it in the center of the screen.
```

<-- END_MAIN -->
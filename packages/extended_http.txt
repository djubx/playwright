# Extended HTTP Flutter Package: A Comprehensive Guide

## <-- START_DESCRIPTION -->

### Description

The `extended_http` package is a powerful and flexible HTTP client for Flutter applications, designed to simplify the process of making network requests. It builds upon the standard `http` package, adding additional features that enhance usability and performance. This package is particularly useful for developers who need to handle complex HTTP interactions, such as custom headers, interceptors, and error handling.

### When to Use

You should consider using `extended_http` when:
- You need to make multiple HTTP requests with custom configurations.
- You want to implement request/response interceptors for logging or modifying requests.
- You require advanced error handling and retry mechanisms.
- You are looking for a more structured way to manage your network calls.

### Key Features

- **Custom Interceptors**: Easily add interceptors to modify requests and responses.
- **Error Handling**: Built-in mechanisms for handling errors and retries.
- **Request/Response Logging**: Automatically log requests and responses for debugging.
- **Timeouts**: Set custom timeouts for requests.
- **Easy Integration**: Works seamlessly with existing Flutter applications.

## <-- END_DESCRIPTION -->

## <-- START_TUTORIAL -->

### Tutorial

#### Installation

To get started with the `extended_http` package, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  extended_http: ^latest_version
```

Make sure to replace `^latest_version` with the latest version available on [pub.dev](https://pub.dev/packages/extended_http).

#### Platform-Specific Configuration

For both Android and iOS, no additional configuration is required beyond the standard Flutter setup. However, ensure that you have the necessary permissions to access the internet.

- **Android**: Ensure that your `AndroidManifest.xml` includes the following permission:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
```

- **iOS**: No additional permissions are required, but ensure that your app's `Info.plist` allows for network requests.

#### Basic Usage

Hereâ€™s how to set up and use the `extended_http` package in your Flutter application:

1. Import the package:

```dart
import 'package:extended_http/extended_http.dart';
```

2. Create an instance of the `RealFlutter` class to manage your HTTP requests.

3. Use the provided methods to make GET, POST, PUT, DELETE requests, etc.

## <-- END_TUTORIAL -->

## <-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:extended_http/extended_http.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Extended HTTP Example',
      home: HomePage(),
    );
  }
}

class HomePage extends StatefulWidget {
  @override
  _HomePageState createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  // Create an instance of the RealFlutter class
  final RealFlutter httpClient = RealFlutter();

  String responseData = '';

  @override
  void initState() {
    super.initState();
    // Fetch data when the widget is initialized
    fetchData();
  }

  // Function to fetch data from a sample API
  Future<void> fetchData() async {
    try {
      // Make a GET request to the API
      final response = await httpClient.get('https://jsonplaceholder.typicode.com/posts/1');

      // Check if the response is successful
      if (response.statusCode == 200) {
        // Update the state with the response data
        setState(() {
          responseData = response.body;
        });
      } else {
        // Handle error response
        setState(() {
          responseData = 'Error: ${response.statusCode}';
        });
      }
    } catch (e) {
      // Handle any exceptions
      setState(() {
        responseData = 'Exception: $e';
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Extended HTTP Example'),
      ),
      body: Center(
        child: Text(responseData), // Display the response data
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function runs the MyApp widget.
// 2. MyApp builds a MaterialApp with a title and a home page.
// 3. HomePage is a StatefulWidget that manages its state.
// 4. In the initState method, fetchData is called to retrieve data from the API.
// 5. fetchData makes a GET request to a sample API using the RealFlutter instance.
// 6. If the response is successful (status code 200), the response data is stored in the state.
// 7. If there's an error, the error message is stored instead.
// 8. The build method displays the response data in the center of the screen.
```

## <-- END_MAIN -->

### Summary

In this blog post, we explored the `extended_http` package, which enhances the standard HTTP capabilities in Flutter applications. We covered the installation process, platform-specific configurations, and provided a detailed example of how to use the package effectively. The example demonstrated how to make a simple GET request and handle responses, showcasing the package's ease of use and flexibility. By following the steps outlined, you can integrate `extended_http` into your Flutter projects to manage network requests efficiently.
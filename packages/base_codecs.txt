<-- START_DESCRIPTION -->

Base Codecs Flutter Package
==========================

The `base_codecs` Flutter package provides a set of utilities for encoding and decoding data in various formats, including Base64, Base32, and hexadecimal. This package is useful when working with data that needs to be encoded or decoded, such as when sending or receiving data over a network or when storing data in a database.

Features
--------

*   Supports encoding and decoding of data in Base64, Base32, and hexadecimal formats
*   Provides a simple and easy-to-use API for encoding and decoding data
*   Works on both Android and iOS platforms

When to Use
------------

*   When sending or receiving data over a network that requires encoding or decoding
*   When storing data in a database that requires encoding or decoding
*   When working with data that needs to be encoded or decoded for security or compatibility reasons

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
---------------

To use the `base_codecs` package in your Flutter project, follow these steps:

1.  Add the `base_codecs` package to your `pubspec.yaml` file:

    ```yml
dependencies:
  flutter:
    sdk: flutter
  base_codecs: ^1.0.0
```

2.  Run `flutter pub get` to install the package.
3.  Import the `base_codecs` package in your Dart file:

    ```dart
import 'package:base_codecs/base_codecs.dart';
```

### Encoding Data

To encode data using the `base_codecs` package, use the `encode` method:

```dart
import 'package:base_codecs/base_codecs.dart';

void main() {
  String data = 'Hello, World!';
  String encodedData = base64Encode(data.codeUnits);
  print(encodedData);
}
```

### Decoding Data

To decode data using the `base_codecs` package, use the `decode` method:

```dart
import 'package:base_codecs/base_codecs.dart';

void main() {
  String encodedData = 'SGVsbG8sIFdvcmxkIQ==';
  String decodedData = String.fromCharCodes(base64Decode(encodedData));
  print(decodedData);
}
```

Platform-Specific Details
-------------------------

The `base_codecs` package works on both Android and iOS platforms. However, when using the package on Android, you may need to add the following configuration to your `android/app/src/main/AndroidManifest.xml` file:

```xml
<application
  ...
  android:usesCleartextTraffic="true"
  ...>
```

This configuration allows the app to use cleartext traffic, which is required for the `base_codecs` package to work properly.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:base_codecs/base_codecs.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final _dataController = TextEditingController();
  final _encodedDataController = TextEditingController();
  final _decodedDataController = TextEditingController();

  void _encodeData() {
    // Get the data from the text field
    String data = _dataController.text;

    // Encode the data using the base64Encode method
    String encodedData = base64Encode(data.codeUnits);

    // Set the encoded data in the text field
    _encodedDataController.text = encodedData;
  }

  void _decodeData() {
    // Get the encoded data from the text field
    String encodedData = _encodedDataController.text;

    // Decode the data using the base64Decode method
    String decodedData = String.fromCharCodes(base64Decode(encodedData));

    // Set the decoded data in the text field
    _decodedDataController.text = decodedData;
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Base Codecs Example'),
        ),
        body: Padding(
          padding: const EdgeInsets.all(20.0),
          child: Column(
            children: [
              TextField(
                controller: _dataController,
                decoration: InputDecoration(
                  labelText: 'Data',
                  border: OutlineInputBorder(),
                ),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _encodeData,
                child: Text('Encode Data'),
              ),
              SizedBox(height: 20),
              TextField(
                controller: _encodedDataController,
                decoration: InputDecoration(
                  labelText: 'Encoded Data',
                  border: OutlineInputBorder(),
                ),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _decodeData,
                child: Text('Decode Data'),
              ),
              SizedBox(height: 20),
              TextField(
                controller: _decodedDataController,
                decoration: InputDecoration(
                  labelText: 'Decoded Data',
                  border: OutlineInputBorder(),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user enters data in the text field.
// 2. The user clicks the "Encode Data" button, which calls the _encodeData method.
// 3. The _encodeData method gets the data from the text field, encodes it using the base64Encode method, and sets the encoded data in the text field.
// 4. The user clicks the "Decode Data" button, which calls the _decodeData method.
// 5. The _decodeData method gets the encoded data from the text field, decodes it using the base64Decode method, and sets the decoded data in the text field.
// The final result is the decoded data, which is displayed in the text field.

```

<-- END_MAIN -->
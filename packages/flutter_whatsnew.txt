<-- START_DESCRIPTION -->

# Flutter WhatsNew Package
==========================

The `flutter_whatsnew` package is a Flutter package that allows you to easily create a "What's New" page for your app. This page is typically used to showcase new features, updates, or changes to your app.

## When to Use This Package
---------------------------

You can use this package in the following scenarios:

* When you want to showcase new features or updates to your app.
* When you want to provide a changelog or release notes for your app.
* When you want to create a simple and easy-to-use "What's New" page for your app.

## Features
------------

The `flutter_whatsnew` package provides the following features:

* A simple and easy-to-use API for creating a "What's New" page.
* Support for multiple platforms, including Android and iOS.
* Customizable UI and layout.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

## Step 1: Add the Package to Your Pubspec.yaml File
------------------------------------------------

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_whatsnew: ^1.0.0
```
Then, run `flutter pub get` to get the package.

## Step 2: Import the Package
-----------------------------

Import the package in your Dart file:
```dart
import 'package:flutter_whatsnew/flutter_whatsnew.dart';
```
## Step 3: Create a WhatsNewPage
--------------------------------

Create a `WhatsNewPage` widget and pass in the required parameters:
```dart
WhatsNewPage(
  title: 'What\'s New',
  items: [
    WhatsNewItem(
      title: 'New Feature 1',
      description: 'This is a new feature.',
    ),
    WhatsNewItem(
      title: 'New Feature 2',
      description: 'This is another new feature.',
    ),
  ],
)
```
## Platform-Specific Details
---------------------------

### Android

On Android, you need to add the following code to your `AndroidManifest.xml` file:
```xml
<activity
  android:name="com.example.RealFlutter"
  android:exported="true" />
```
### iOS

On iOS, you need to add the following code to your `Info.plist` file:
```xml
<key>CFBundleDisplayName</key>
<string>RealFlutter</string>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_whatsnew/flutter_whatsnew.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'RealFlutter',
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    // Create a WhatsNewPage widget
    return Scaffold(
      appBar: AppBar(
        title: Text('RealFlutter'),
      ),
      body: Center(
        child: ElevatedButton(
          child: Text('Show What\'s New'),
          onPressed: () {
            // Show the WhatsNewPage
            Navigator.push(
              context,
              MaterialPageRoute(builder: (context) => WhatsNewPage(
                title: 'What\'s New',
                items: [
                  WhatsNewItem(
                    title: 'New Feature 1',
                    description: 'This is a new feature.',
                  ),
                  WhatsNewItem(
                    title: 'New Feature 2',
                    description: 'This is another new feature.',
                  ),
                ],
              )),
            );
          },
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user clicks the "Show What's New" button.
// 2. The WhatsNewPage is shown with the list of new features.
// 3. The user can scroll through the list and view the details of each feature.
// 4. The user can then dismiss the WhatsNewPage by clicking the back button.
```

// In summary, the code flows as follows:
// The main app is run, which creates a Material app with a RealFlutter widget as the home page.
// The RealFlutter widget creates a Scaffold with an AppBar and a Center widget containing an ElevatedButton.
// When the button is pressed, the WhatsNewPage is shown with the list of new features.
// The user can then interact with the WhatsNewPage and dismiss it when finished.

<-- END_MAIN -->
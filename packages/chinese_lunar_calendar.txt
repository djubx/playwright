Here's a detailed technical blog on the `chinese_lunar_calendar` Flutter package, structured as requested.

<!-- START_DESCRIPTION -->
# Chinese Lunar Calendar Flutter Package

The `chinese_lunar_calendar` Flutter package is a powerful tool for developers looking to integrate the Chinese lunar calendar into their Flutter applications. This package provides a comprehensive set of features that allow you to convert Gregorian dates to the Chinese lunar calendar and vice versa, making it ideal for applications that require lunar date calculations, such as cultural apps, event planners, or educational tools.

## When to Use This Package

You might consider using the `chinese_lunar_calendar` package in scenarios such as:
- **Cultural Applications**: Apps that focus on Chinese culture, festivals, and traditions.
- **Event Planning**: Applications that need to schedule events based on lunar dates, such as the Chinese New Year or Mid-Autumn Festival.
- **Educational Tools**: Apps aimed at teaching users about the Chinese calendar system.

## Features

- **Date Conversion**: Easily convert between Gregorian and Chinese lunar dates.
- **Lunar Year Information**: Retrieve information about the lunar year, including zodiac signs and elements.
- **Festival Dates**: Get the dates of important Chinese festivals based on the lunar calendar.
- **Customizable**: The package allows for customization to fit specific needs, such as formatting options for displaying dates.

With these features, the `chinese_lunar_calendar` package is a versatile addition to any Flutter developer's toolkit.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up the Chinese Lunar Calendar Package

## Step 1: Adding the Dependency

To get started, you need to add the `chinese_lunar_calendar` package to your Flutter project. Open your `pubspec.yaml` file and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  chinese_lunar_calendar: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command in your terminal to install it:

```bash
flutter pub get
```

## Step 2: Platform-Specific Configuration

### Android

For Android, ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
        ...
    }
}
```

### iOS

For iOS, you may need to update your `ios/Podfile` to ensure compatibility with the latest iOS versions. Make sure to uncomment the platform line and set it to at least 10.0:

```ruby
platform :ios, '10.0'
```

## Step 3: Importing the Package

In your Dart files, import the package to start using it:

```dart
import 'package:chinese_lunar_calendar/chinese_lunar_calendar.dart';
```

## Step 4: Basic Usage

Hereâ€™s a simple example of how to use the package to convert a Gregorian date to a lunar date:

```dart
void main() {
  // Create a Gregorian date
  DateTime gregorianDate = DateTime(2024, 1, 1);
  
  // Convert to lunar date
  Lunar lunarDate = Lunar.fromGregorian(gregorianDate);
  
  print('Lunar Date: ${lunarDate.toString()}');
}
```

This code snippet demonstrates how to create a Gregorian date and convert it to a lunar date using the `fromGregorian` method.

With these steps, you should be able to set up and start using the `chinese_lunar_calendar` package in your Flutter application.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example: Using the Chinese Lunar Calendar Package

```dart
import 'package:flutter/material.dart';
import 'package:chinese_lunar_calendar/chinese_lunar_calendar.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Chinese Lunar Calendar Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: LunarCalendarScreen(),
    );
  }
}

class LunarCalendarScreen extends StatefulWidget {
  @override
  _LunarCalendarScreenState createState() => _LunarCalendarScreenState();
}

class _LunarCalendarScreenState extends State<LunarCalendarScreen> {
  DateTime selectedDate = DateTime.now(); // Store the selected Gregorian date
  Lunar lunarDate; // Variable to hold the converted lunar date

  @override
  void initState() {
    super.initState();
    lunarDate = Lunar.fromGregorian(selectedDate); // Convert the initial date
  }

  void _selectDate(BuildContext context) async {
    // Show date picker to select a Gregorian date
    final DateTime picked = await showDatePicker(
      context: context,
      initialDate: selectedDate,
      firstDate: DateTime(2000),
      lastDate: DateTime(2101),
    );
    if (picked != null && picked != selectedDate) {
      setState(() {
        selectedDate = picked; // Update the selected date
        lunarDate = Lunar.fromGregorian(selectedDate); // Convert to lunar date
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Lunar Calendar'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Selected Gregorian Date: ${selectedDate.toLocal()}'.split(' ')[0],
              style: TextStyle(fontSize: 20),
            ),
            SizedBox(height: 20),
            Text(
              'Lunar Date: ${lunarDate.toString()}',
              style: TextStyle(fontSize: 20),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () => _selectDate(context), // Open date picker
              child: Text('Select date'),
            ),
          ],
        ),
      ),
    );
  }
}
```

```dart
// The above code demonstrates a simple Flutter application that utilizes the chinese_lunar_calendar package.
// 
// 1. The main function initializes the app and sets MyApp as the home widget.
// 2. MyApp builds a MaterialApp with a title and theme, and sets LunarCalendarScreen as the home screen.
// 3. LunarCalendarScreen is a stateful widget that manages the selected Gregorian date and its corresponding lunar date.
// 4. In the initState method, the current date is converted to a lunar date using Lunar.fromGregorian.
// 5. The _selectDate method opens a date picker, allowing the user to select a new Gregorian date.
// 6. When a new date is selected, the state is updated, and the lunar date is recalculated.
// 7. The build method displays the selected Gregorian date and the corresponding lunar date, along with a button to select a new date.
// 
// This application effectively demonstrates the key features of the chinese_lunar_calendar package, allowing users to interactively convert dates.
```
<!-- END_MAIN -->

In summary, this blog provides a comprehensive overview of the `chinese_lunar_calendar` Flutter package, including its features, setup instructions, and a complete example application. The code demonstrates how to convert Gregorian dates to lunar dates and allows users to select dates interactively, showcasing the package's capabilities in a practical context.
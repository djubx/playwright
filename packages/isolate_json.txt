<-- START_DESCRIPTION -->

# Isolate Json Flutter Package
================================

The `isolate_json` Flutter package provides a simple and efficient way to handle JSON data in your Flutter applications. It allows you to easily parse and generate JSON data in a separate isolate, which can improve the performance of your app.

## When to Use This Package
---------------------------

You should use this package when you need to handle large amounts of JSON data in your Flutter app. By parsing and generating JSON data in a separate isolate, you can avoid blocking the main thread and improve the responsiveness of your app.

## Features
------------

*   Parse and generate JSON data in a separate isolate
*   Support for JSON encoding and decoding
*   Easy to use API

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

## Setup
--------

To use the `isolate_json` package, you need to add it to your `pubspec.yaml` file:

```yml
dependencies:
  isolate_json: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Platform-Specific Details
---------------------------

### Android

On Android, you need to add the following configuration to your `android/app/src/main/AndroidManifest.xml` file:

```xml
<application
    ...
    android:usesCleartextTraffic="true"
    ...>
</application>
```

### iOS

On iOS, you need to add the following configuration to your `ios/Runner/Info.plist` file:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

## Using the Package
--------------------

To use the package, you need to import it in your Dart file:

```dart
import 'package:isolate_json/isolate_json.dart';
```

Then, you can use the `IsolateJson` class to parse and generate JSON data:

```dart
void main() async {
    final json = '{"name": "John", "age": 30}';
    final data = await IsolateJson.decodeJson(json);
    print(data);
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:isolate_json/isolate_json.dart';

void main() async {
    // Create a new instance of the RealFlutter class
    final realFlutter = RealFlutter();

    // Parse JSON data in a separate isolate
    final json = '{"name": "John", "age": 30}';
    final data = await realFlutter.parseJson(json);

    // Print the parsed data
    print(data);

    // Generate JSON data in a separate isolate
    final jsonData = await realFlutter.generateJson(data);

    // Print the generated JSON data
    print(jsonData);

    // Run the Flutter app
    runApp(MyApp());
}

class RealFlutter {
    // Method to parse JSON data in a separate isolate
    Future<dynamic> parseJson(String json) async {
        // Use the IsolateJson class to parse the JSON data
        final data = await IsolateJson.decodeJson(json);
        return data;
    }

    // Method to generate JSON data in a separate isolate
    Future<String> generateJson(dynamic data) async {
        // Use the IsolateJson class to generate the JSON data
        final json = await IsolateJson.encodeJson(data);
        return json;
    }
}

class MyApp extends StatelessWidget {
    @override
    Widget build(BuildContext context) {
        return MaterialApp(
            title: 'Isolate Json Demo',
            home: Scaffold(
                appBar: AppBar(
                    title: Text('Isolate Json Demo'),
                ),
                body: Center(
                    child: Text('Isolate Json Demo'),
                ),
            ),
        );
    }
}

// The application flow is as follows:
// 1. The main function is called, which creates a new instance of the RealFlutter class.
// 2. The RealFlutter class has two methods: parseJson and generateJson.
// 3. The parseJson method uses the IsolateJson class to parse JSON data in a separate isolate.
// 4. The generateJson method uses the IsolateJson class to generate JSON data in a separate isolate.
// 5. The main function calls the parseJson method to parse some JSON data, and then prints the result.
// 6. The main function calls the generateJson method to generate some JSON data, and then prints the result.
// 7. Finally, the main function runs the Flutter app using the runApp function.

// The IsolateJson class is used to parse and generate JSON data in a separate isolate.
// This is done to improve the performance of the app by avoiding blocking the main thread.
```

<-- END_MAIN -->
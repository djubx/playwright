# Circular Loading Button Flutter Package

## <-- START_DESCRIPTION -->

### Overview

The `circular_loading_button` package is a Flutter package designed to provide a customizable circular loading button that can be used in various applications. This package is particularly useful when you want to indicate to users that an action is in progress, such as submitting a form or loading data. The button can display a loading spinner while the action is being processed, enhancing the user experience by providing visual feedback.

### When to Use

You should consider using the `circular_loading_button` package in scenarios such as:
- Submitting forms where the user needs to wait for a response.
- Performing network requests that may take time to complete.
- Any action that requires user confirmation and may take a moment to process.

### Features

- **Customizable Appearance**: You can easily customize the button's color, size, and text.
- **Loading Indicator**: Displays a circular loading spinner while the action is in progress.
- **Callback Functions**: Allows you to define actions to be executed on button press and completion.
- **Error Handling**: Provides a way to handle errors and reset the button state.

## <-- END_DESCRIPTION -->

## <-- START_TUTORIAL -->

### Setup Process

To use the `circular_loading_button` package in your Flutter project, follow these steps:

1. **Add Dependency**: Open your `pubspec.yaml` file and add the package under dependencies:

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     circular_loading_button: ^1.0.0  # Check for the latest version on pub.dev
   ```

2. **Install the Package**: Run the following command in your terminal to install the package:

   ```bash
   flutter pub get
   ```

3. **Platform-Specific Configuration**: 
   - **Android**: Ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21.
   - **iOS**: No additional configuration is required, but ensure you have the latest version of Xcode.

### Using the Package

To use the `circular_loading_button`, you need to import it into your Dart file:

```dart
import 'package:circular_loading_button/circular_loading_button.dart';
```

You can then create a button in your widget tree. Hereâ€™s a simple example:

```dart
CircularLoadingButton(
  child: Text("Submit"),
  color: Colors.blue,
  onPressed: () {
    // Your action here
  },
);
```

## <-- END_TUTORIAL -->

## <-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:circular_loading_button/circular_loading_button.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Circular Loading Button Example',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Circular Loading Button Demo'),
        ),
        body: Center(
          child: LoadingButtonDemo(),
        ),
      ),
    );
  }
}

class LoadingButtonDemo extends StatefulWidget {
  @override
  _LoadingButtonDemoState createState() => _LoadingButtonDemoState();
}

class _LoadingButtonDemoState extends State<LoadingButtonDemo> {
  // Create a CircularLoadingButtonController to manage the button state
  final CircularLoadingButtonController _btnController = CircularLoadingButtonController();

  // Function to simulate a network request
  Future<void> _simulateNetworkRequest() async {
    // Start the loading animation
    _btnController.start();
    // Simulate a network request with a delay
    await Future.delayed(Duration(seconds: 2));
    // Stop the loading animation
    _btnController.stop();
    // Optionally, you can reset the button state after some time
    // _btnController.reset();
  }

  @override
  Widget build(BuildContext context) {
    return CircularLoadingButton(
      child: Text("Submit"),
      controller: _btnController, // Assign the controller
      color: Colors.blue,
      onPressed: () {
        // Call the function to simulate a network request
        _simulateNetworkRequest();
      },
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the RealFlutter widget.
// 2. The RealFlutter widget builds a MaterialApp with a title and a home Scaffold.
// 3. Inside the Scaffold, a LoadingButtonDemo widget is centered in the body.
// 4. The LoadingButtonDemo widget maintains a state with a CircularLoadingButtonController.
// 5. When the button is pressed, the _simulateNetworkRequest function is called.
// 6. This function starts the loading animation, simulates a network request with a 2-second delay, and then stops the loading animation.
// 7. The button's appearance changes during the loading state, providing feedback to the user.
```

## <-- END_MAIN -->

### Summary

In this blog post, we explored the `circular_loading_button` Flutter package, which provides a visually appealing way to indicate loading states in your applications. We covered the setup process, usage examples, and provided a complete example of a Flutter application that demonstrates the key features of the package. The application flow was explained step-by-step, highlighting how the button interacts with user actions and provides feedback during network requests. This package is a great addition to any Flutter developer's toolkit for enhancing user experience.
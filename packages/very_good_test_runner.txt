<-- START_DESCRIPTION -->

# Very Good Test Runner Package
================================

The `very_good_test_runner` package is a Flutter package that provides a simple and efficient way to run tests for your Flutter application. It allows you to run tests in parallel, which can significantly speed up your testing process.

## When to Use
--------------

You should use this package when you have a large number of tests in your Flutter application and want to run them efficiently. This package is also useful when you want to run tests in parallel, which can save a significant amount of time.

## Features
------------

*   Run tests in parallel
*   Support for sharding (running tests in parallel across multiple machines)
*   Support for filtering tests by name or tag
*   Support for running tests in a specific order

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

## Setup
--------

To use the `very_good_test_runner` package, you need to add it to your `pubspec.yaml` file:

```yml
dependencies:
  flutter_test:
    sdk: flutter
  very_good_test_runner: ^0.1.0
```

Then, run `flutter pub get` to get the package.

## Configuration
--------------

To configure the package, you need to create a `very_good_test_runner.yaml` file in the root of your project:

```yml
test_runner:
  parallel: true
  shard_count: 5
  filter:
    name: "MyTest"
    tag: "my_tag"
  order:
    - "MyTest1"
    - "MyTest2"
```

This configuration file tells the package to run tests in parallel, use 5 shards, filter tests by name and tag, and run tests in a specific order.

## Running Tests
----------------

To run tests, you can use the following command:

```bash
flutter pub run very_good_test_runner
```

This command will run all tests in your project using the configuration specified in the `very_good_test_runner.yaml` file.

### Android

To run tests on Android, you need to make sure that you have an Android emulator running or a physical device connected to your machine.

### iOS

To run tests on iOS, you need to make sure that you have an iOS simulator running or a physical device connected to your machine.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
// Import the very_good_test_runner package
import 'package:very_good_test_runner/very_good_test_runner.dart';

// Import the Flutter test package
import 'package:flutter_test/flutter_test.dart';

// Import the RealFlutter class
import 'package:real_flutter/real_flutter.dart';

void main() {
  // Create a new instance of the VeryGoodTestRunner class
  final testRunner = VeryGoodTestRunner(
    // Specify the configuration file
    configFile: 'very_good_test_runner.yaml',
  );

  // Run the tests
  testRunner.runTests(
    // Specify the tests to run
    tests: [
      // Run the MyTest1 test
      MyTest1(),
      // Run the MyTest2 test
      MyTest2(),
    ],
  );
}

// Define the MyTest1 test
class MyTest1 extends RealFlutter {
  @override
  void run() {
    // Run the test code
    expect(1, 1);
  }
}

// Define the MyTest2 test
class MyTest2 extends RealFlutter {
  @override
  void run() {
    // Run the test code
    expect(2, 2);
  }
}

// The application flow is as follows:
// 1. The VeryGoodTestRunner class is instantiated with the configuration file.
// 2. The runTests method is called with the tests to run.
// 3. The tests are run in parallel using the configuration specified in the configuration file.
// 4. The test results are reported.
// 5. The application exits.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# markdown_toolbar Flutter Package
=====================================

The `markdown_toolbar` Flutter package provides a customizable toolbar for editing Markdown text. It offers a range of features, including text formatting, image insertion, and link creation.

### When to Use This Package

This package is ideal for apps that require Markdown text editing, such as note-taking apps, blogging platforms, or documentation tools.

### Features

* Customizable toolbar with various formatting options
* Image insertion and upload
* Link creation and editing
* Text formatting (bold, italic, strikethrough, etc.)
* Support for Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
=====================

### Step 1: Add the Package to Your Project

Add the `markdown_toolbar` package to your `pubspec.yaml` file:
```yml
dependencies:
  markdown_toolbar: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:markdown_toolbar/markdown_toolbar.dart';
```
### Step 3: Create a MarkdownToolbar Instance

Create a `MarkdownToolbar` instance and pass it to your `Scaffold`:
```dart
Scaffold(
  appBar: AppBar(
    title: Text('Markdown Editor'),
  ),
  body: MarkdownToolbar(
    controller: _controller,
  ),
)
```
### Platform-Specific Details

* For Android, add the following configuration to your `AndroidManifest.xml` file:
```xml
<application
  ...
  android:hardwareAccelerated="true"
  ...
>
```
* For iOS, add the following configuration to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```
### Optimizations

To improve performance, you can enable caching for the toolbar:
```dart
MarkdownToolbar(
  controller: _controller,
  cache: true,
)
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:markdown_toolbar/markdown_toolbar.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final _controller = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Markdown Editor',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Markdown Editor'),
        ),
        body: MarkdownToolbar(
          controller: _controller,
          // Step 1: Create a MarkdownToolbar instance
          // and pass it to your Scaffold.
          cache: true, // Step 2: Enable caching for the toolbar.
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user opens the app and is presented with a Markdown editor.
// 2. The user types some text and selects a formatting option from the toolbar.
// 3. The selected text is formatted accordingly (e.g., bold, italic, etc.).
// 4. The user inserts an image or creates a link using the toolbar.
// 5. The image or link is uploaded and displayed in the editor.
// 6. The user saves their work and exits the app.

// Summary:
// The code flows as follows:
// 1. The user interacts with the MarkdownToolbar instance.
// 2. The toolbar responds to user input and formats the text accordingly.
// 3. The user inserts images or creates links using the toolbar.
// 4. The images or links are uploaded and displayed in the editor.
// 5. The user saves their work and exits the app.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

Electricsql Flutter Package: A Comprehensive Overview
=====================================================

The electricsql_flutter package is a powerful tool for Flutter developers, providing a simple and efficient way to interact with ElectricSQL databases. In this blog, we'll delve into the features and benefits of this package, explore its use cases, and provide a step-by-step tutorial on how to integrate it into your Flutter app.

What is ElectricSQL?
-------------------

ElectricSQL is a cloud-based database service that allows developers to create, manage, and scale their databases with ease. It provides a flexible and secure way to store and retrieve data, making it an ideal choice for mobile and web applications.

Features of electricsql_flutter
------------------------------

*   **Easy Integration**: The electricsql_flutter package provides a simple and straightforward way to integrate ElectricSQL into your Flutter app.
*   **Real-time Data Synchronization**: The package enables real-time data synchronization between your app and the ElectricSQL database, ensuring that your data is always up-to-date.
*   **Offline Support**: The package provides offline support, allowing your app to function even without an internet connection.
*   **Secure Data Storage**: The package ensures secure data storage, using encryption and other security measures to protect your data.

When to Use electricsql_flutter
------------------------------

The electricsql_flutter package is ideal for apps that require real-time data synchronization, offline support, and secure data storage. Some examples of apps that can benefit from this package include:

*   Social media apps
*   Chat apps
*   Productivity apps
*   Gaming apps

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Integrating electricsql_flutter into Your Flutter App
=====================================================

In this tutorial, we'll walk you through the process of integrating the electricsql_flutter package into your Flutter app.

Step 1: Add the electricsql_flutter Package to Your Pubspec.yaml File
----------------------------------------------------------------

To add the electricsql_flutter package to your pubspec.yaml file, simply add the following line of code:

```yml
dependencies:
  electricsql_flutter: ^1.0.0
```

Step 2: Import the electricsql_flutter Package
---------------------------------------------

To import the electricsql_flutter package, add the following line of code to your Dart file:

```dart
import 'package:electricsql_flutter/electricsql_flutter.dart';
```

Step 3: Initialize the ElectricSQL Database
--------------------------------------------

To initialize the ElectricSQL database, use the following code:

```dart
ElectricSqlDatabase database = ElectricSqlDatabase();
```

Step 4: Create a Table
---------------------

To create a table, use the following code:

```dart
database.createTable('table_name', [
  ElectricSqlColumn('column1', ElectricSqlDataType.text),
  ElectricSqlColumn('column2', ElectricSqlDataType.integer),
]);
```

Step 5: Insert Data into the Table
----------------------------------

To insert data into the table, use the following code:

```dart
database.insertIntoTable('table_name', [
  ElectricSqlRow({
    'column1': 'value1',
    'column2': 123,
  }),
]);
```

Step 6: Retrieve Data from the Table
------------------------------------

To retrieve data from the table, use the following code:

```dart
List<ElectricSqlRow> rows = await database.selectFromTable('table_name');
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:electricsql_flutter/electricsql_flutter.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'ElectricSQL Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  ElectricSqlDatabase _database;

  @override
  void initState() {
    super.initState();
    _database = ElectricSqlDatabase();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('ElectricSQL Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: _createTable,
              child: Text('Create Table'),
            ),
            ElevatedButton(
              onPressed: _insertData,
              child: Text('Insert Data'),
            ),
            ElevatedButton(
              onPressed: _retrieveData,
              child: Text('Retrieve Data'),
            ),
          ],
        ),
      ),
    );
  }

  void _createTable() async {
    // Create a table called 'table_name' with two columns: 'column1' and 'column2'
    await _database.createTable('table_name', [
      ElectricSqlColumn('column1', ElectricSqlDataType.text),
      ElectricSqlColumn('column2', ElectricSqlDataType.integer),
    ]);
  }

  void _insertData() async {
    // Insert a row into the table with values 'value1' and 123
    await _database.insertIntoTable('table_name', [
      ElectricSqlRow({
        'column1': 'value1',
        'column2': 123,
      }),
    ]);
  }

  void _retrieveData() async {
    // Retrieve all rows from the table
    List<ElectricSqlRow> rows = await _database.selectFromTable('table_name');
    // Print the values of the rows
    rows.forEach((row) {
      print(row.values);
    });
  }
}

// The application flow is as follows:
// 1. The user opens the app and is presented with a screen containing three buttons: 'Create Table', 'Insert Data', and 'Retrieve Data'.
// 2. When the user clicks the 'Create Table' button, the _createTable function is called, which creates a table called 'table_name' with two columns: 'column1' and 'column2'.
// 3. When the user clicks the 'Insert Data' button, the _insertData function is called, which inserts a row into the table with values 'value1' and 123.
// 4. When the user clicks the 'Retrieve Data' button, the _retrieveData function is called, which retrieves all rows from the table and prints the values of the rows.

// In summary, this app demonstrates how to create a table, insert data into the table, and retrieve data from the table using the ElectricSQL database.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# System Tray Flutter Package
The `system_tray` Flutter package allows developers to add a system tray icon to their Flutter applications. This package provides a simple way to create a system tray icon and handle its events.

## When to Use
This package is useful when you want to provide a quick way for users to access your application's features or settings from the system tray. For example, you can use this package to create a system tray icon that allows users to toggle a feature on or off, or to open a settings window.

## Features
The `system_tray` package provides the following features:

*   Create a system tray icon with a custom image
*   Handle system tray icon events, such as clicks and hover
*   Create a system tray menu with custom items
*   Handle system tray menu item events

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
To use the `system_tray` package, follow these steps:

### Step 1: Add the Package to Your Project
Add the `system_tray` package to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  system_tray: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package
Import the `system_tray` package in your Dart file:

```dart
import 'package:flutter/material.dart';
import 'package:system_tray/system_tray.dart';
```

### Step 3: Create a System Tray Icon
Create a system tray icon with a custom image:

```dart
SystemTray _systemTray;

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await SystemTray.initSystemTray();
  _systemTray = SystemTray();
  await _systemTray.initSystemTray(
    iconPath: 'path/to/icon.png',
  );
  runApp(MyApp());
}
```

### Step 4: Handle System Tray Icon Events
Handle system tray icon events, such as clicks and hover:

```dart
_systemTray.onTrayIconMouseDown.listen((event) {
  print('Tray icon mouse down');
});

_systemTray.onTrayIconMouseUp.listen((event) {
  print('Tray icon mouse up');
});
```

### Step 5: Create a System Tray Menu
Create a system tray menu with custom items:

```dart
final menu = Menu(
  items: [
    MenuItem(
      label: 'Item 1',
      onClicked: () {
        print('Item 1 clicked');
      },
    ),
    MenuItem(
      label: 'Item 2',
      onClicked: () {
        print('Item 2 clicked');
      },
    ),
  ],
);
```

### Step 6: Handle System Tray Menu Item Events
Handle system tray menu item events:

```dart
menu.items[0].onClicked.listen((event) {
  print('Item 1 clicked');
});
```

### Platform-Specific Details
For Android, you need to add the following code to your `AndroidManifest.xml` file:

```xml
<application
  ...
  android:icon="@mipmap/ic_launcher"
  android:label="@string/app_name"
  android:theme="@style/AppTheme"
  android:allowBackup="true"
  android:supportsRtl="true"
  android:usesCleartextTraffic="true"
  tools:targetApi="28"
  tools:ignore="GoogleAppIndexingWarning">
  ...
</application>
```

For iOS, you need to add the following code to your `Info.plist` file:

```xml
<key>UIBackgroundModes</key>
<array>
  <string>processing</string>
</array>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:system_tray/system_tray.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await SystemTray.initSystemTray();
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  SystemTray _systemTray;
  bool _isTrayIconInitialized = false;

  @override
  void initState() {
    super.initState();
    _initSystemTray();
  }

  Future<void> _initSystemTray() async {
    _systemTray = SystemTray();
    await _systemTray.initSystemTray(
      iconPath: 'path/to/icon.png',
    );
    setState(() {
      _isTrayIconInitialized = true;
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('System Tray Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              ElevatedButton(
                onPressed: () async {
                  if (_isTrayIconInitialized) {
                    await _systemTray.setSystemTrayIcon(
                      iconPath: 'path/to/icon2.png',
                    );
                  }
                },
                child: Text('Change Tray Icon'),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () async {
                  if (_isTrayIconInitialized) {
                    await _systemTray.removeSystemTrayIcon();
                  }
                },
                child: Text('Remove Tray Icon'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Application flow:
// 1. The application starts and initializes the system tray icon.
// 2. The system tray icon is displayed in the system tray.
// 3. When the user clicks on the "Change Tray Icon" button, the system tray icon is changed to a new icon.
// 4. When the user clicks on the "Remove Tray Icon" button, the system tray icon is removed from the system tray.
// 5. The application continues to run and the system tray icon is not displayed again until the application is restarted.

// Summary:
// This example demonstrates how to create a system tray icon and handle its events in a Flutter application.
// The system tray icon is initialized and displayed in the system tray when the application starts.
// The user can change the system tray icon or remove it from the system tray by clicking on the corresponding buttons.
```

<-- END_MAIN -->
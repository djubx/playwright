```markdown
<-- START_DESCRIPTION -->

# Floating Action Bubble Flutter Package

The `floating_action_bubble` package is a versatile Flutter widget that provides a floating action button (FAB) with a bubble menu. This package is particularly useful when you need to offer multiple actions from a single FAB, enhancing the user interface by providing a clean and interactive way to access secondary actions.

## When to Use

- **Complex Actions**: When your application requires multiple actions that are contextually related, such as sharing, editing, or deleting items.
- **Space Constraints**: In scenarios where screen real estate is limited, and you want to avoid cluttering the UI with multiple buttons.
- **Enhanced User Experience**: To provide a more engaging and interactive user experience with smooth animations and transitions.

## Features

- **Customizable Animation**: Offers various animation styles for opening and closing the bubble menu.
- **Flexible Design**: Allows customization of icons, colors, and the overall appearance of the bubble menu.
- **Easy Integration**: Simple to integrate into existing Flutter applications with minimal setup.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using Floating Action Bubble

In this tutorial, we will walk through the process of setting up and using the `floating_action_bubble` package in a Flutter application. We will cover platform-specific configurations for both Android and iOS.

## Setup Process

### Step 1: Add Dependency

Add the `floating_action_bubble` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  floating_action_bubble: ^1.0.0
```

Run `flutter pub get` to install the package.

### Step 2: Import the Package

In your Dart file, import the package:

```dart
import 'package:floating_action_bubble/floating_action_bubble.dart';
```

### Step 3: Platform-Specific Configurations

#### Android

Ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```gradle
android {
    defaultConfig {
        minSdkVersion 21
    }
}
```

#### iOS

No specific configurations are required for iOS, but ensure your deployment target is set to iOS 9.0 or higher in your `ios/Podfile`:

```ruby
platform :ios, '9.0'
```

### Step 4: Implementing the Floating Action Bubble

Use the `FloatingActionBubble` widget within your Flutter application. Below is a basic setup:

```dart
FloatingActionBubble(
  items: <Bubble>[
    // Floating action menu items
    Bubble(
      title: "Edit",
      iconColor: Colors.white,
      bubbleColor: Colors.blue,
      icon: Icons.edit,
      titleStyle: TextStyle(fontSize: 16, color: Colors.white),
      onPress: () {
        // Action for edit
      },
    ),
    Bubble(
      title: "Delete",
      iconColor: Colors.white,
      bubbleColor: Colors.red,
      icon: Icons.delete,
      titleStyle: TextStyle(fontSize: 16, color: Colors.white),
      onPress: () {
        // Action for delete
      },
    ),
  ],
  // Animation controller
  animation: _animation,
  onPress: () => _animationController.isCompleted
      ? _animationController.reverse()
      : _animationController.forward(),
  iconColor: Colors.blue,
  backGroundColor: Colors.white,
)

```

<-- END_TUTORIAL -->

<-- MAIN -->

# Complete Example: Flutter Main File

Below is a complete example demonstrating the use of the `floating_action_bubble` package in a Flutter application.

```dart
import 'package:flutter/material.dart';
import 'package:floating_action_bubble/floating_action_bubble.dart';

void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Floating Action Bubble Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: HomeScreen(),
    );
  }
}

class HomeScreen extends StatefulWidget {
  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> with SingleTickerProviderStateMixin {
  Animation<double> _animation;
  AnimationController _animationController;

  @override
  void initState() {
    super.initState();
    // Initialize the animation controller
    _animationController = AnimationController(
      vsync: this,
      duration: Duration(milliseconds: 500),
    );

    // Define the animation
    _animation = CurvedAnimation(
      curve: Curves.easeInOut,
      parent: _animationController,
    );
  }

  @override
  void dispose() {
    // Dispose the animation controller
    _animationController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Floating Action Bubble Example'),
      ),
      body: Center(
        child: Text('Press the button to see the bubble menu!'),
      ),
      // Implement the FloatingActionBubble
      floatingActionButton: FloatingActionBubble(
        // Menu items
        items: <Bubble>[
          Bubble(
            title: "Edit",
            iconColor: Colors.white,
            bubbleColor: Colors.blue,
            icon: Icons.edit,
            titleStyle: TextStyle(fontSize: 16, color: Colors.white),
            onPress: () {
              // Action for edit
              _animationController.reverse();
            },
          ),
          Bubble(
            title: "Delete",
            iconColor: Colors.white,
            bubbleColor: Colors.red,
            icon: Icons.delete,
            titleStyle: TextStyle(fontSize: 16, color: Colors.white),
            onPress: () {
              // Action for delete
              _animationController.reverse();
            },
          ),
        ],
        // Animation controller
        animation: _animation,
        onPress: () => _animationController.isCompleted
            ? _animationController.reverse()
            : _animationController.forward(),
        iconColor: Colors.blue,
        backGroundColor: Colors.white,
      ),
    );
  }
}
```

// The application starts with the `main` function, which runs the `MyApp` widget.
// `MyApp` is a stateless widget that sets up the MaterialApp with a home screen.
// `HomeScreen` is a stateful widget that manages the state of the floating action bubble.
// The `_HomeScreenState` class initializes an animation controller and animation for the bubble menu.
// The `FloatingActionBubble` widget is used in the `Scaffold`'s `floatingActionButton` property.
// The bubble menu contains two actions: "Edit" and "Delete", each with its own icon and color.
// The animation controller toggles the bubble menu open and closed when the FAB is pressed.
// The `dispose` method ensures the animation controller is properly disposed of when the widget is removed.

<-- END_MAIN -->
```
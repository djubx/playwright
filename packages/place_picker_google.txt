<-- START_DESCRIPTION -->

# Place Picker Google Flutter Package
=====================================

The `place_picker_google` Flutter package is a powerful tool for integrating Google Maps into your Flutter application. It allows users to select a location on the map, providing a simple and intuitive way to gather location data.

### When to Use This Package

This package is ideal for applications that require users to select a location, such as:

* Delivery or pickup services
* Location-based social media platforms
* Travel or tourism applications
* Real estate or property listing apps

### Features

* Displays a Google Map with a marker that can be moved to select a location
* Provides the selected location's coordinates (latitude and longitude)
* Allows for customization of the map's appearance and behavior

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `place_picker_google` package, follow these steps:

### Step 1: Add the Package to Your Pubspec.yaml File

```yml
dependencies:
  flutter:
    sdk: flutter
  place_picker_google: ^1.0.0
```

### Step 2: Import the Package in Your Dart File

```dart
import 'package:place_picker_google/place_picker_google.dart';
```

### Step 3: Set Up the Google Maps API Key

You will need to obtain a Google Maps API key and add it to your AndroidManifest.xml file (for Android) or your Info.plist file (for iOS).

#### Android

Add the following code to your AndroidManifest.xml file:

```xml
<application>
  ...
  <meta-data
    android:name="com.google.android.geo.API_KEY"
    android:value="YOUR_API_KEY_HERE" />
</application>
```

#### iOS

Add the following code to your Info.plist file:

```xml
<key>NSLocationWhenInUseUsageDescription</key>
<string>This app needs access to location to work properly</string>
<key>NSLocationAlwaysAndWhenInUseUsageDescription</key>
<string>This app needs access to location to work properly</string>
<key>NSLocationAlwaysUsageDescription</key>
<string>This app needs access to location to work properly</string>
<key>com.google.android.geo.API_KEY</key>
<string>YOUR_API_KEY_HERE</string>
```

### Step 4: Use the Package in Your Flutter App

```dart
import 'package:flutter/material.dart';
import 'package:place_picker_google/place_picker_google.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Place Picker Google'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () async {
            final place = await PlacePickerGoogle.showPlacePicker(
              context,
              apiKey: 'YOUR_API_KEY_HERE',
            );
            if (place != null) {
              print('Selected place: ${place.name}');
              print('Selected place coordinates: ${place.geometry.location}');
            }
          },
          child: Text('Select a place'),
        ),
      ),
    );
  }
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:place_picker_google/place_picker_google.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Place Picker Google Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Step 1: Create a variable to store the selected place
  Place _selectedPlace;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Place Picker Google Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            // Step 2: Display the selected place's name
            Text(
              _selectedPlace != null
                  ? _selectedPlace.name
                  : 'No place selected',
              style: TextStyle(fontSize: 24),
            ),
            SizedBox(height: 20),
            // Step 3: Display the selected place's coordinates
            Text(
              _selectedPlace != null
                  ? 'Lat: ${_selectedPlace.geometry.location.lat}, Lng: ${_selectedPlace.geometry.location.lng}'
                  : '',
              style: TextStyle(fontSize: 18),
            ),
            SizedBox(height: 20),
            // Step 4: Create a button to select a place
            ElevatedButton(
              onPressed: () async {
                // Step 5: Show the place picker dialog
                final place = await PlacePickerGoogle.showPlacePicker(
                  context,
                  apiKey: 'YOUR_API_KEY_HERE',
                );
                // Step 6: Update the selected place
                if (place != null) {
                  setState(() {
                    _selectedPlace = place;
                  });
                }
              },
              child: Text('Select a place'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user clicks the "Select a place" button.
// 2. The place picker dialog is displayed.
// 3. The user selects a place on the map.
// 4. The selected place's name and coordinates are displayed on the screen.
// 5. The user can repeat the process by clicking the "Select a place" button again.

// Summary: This code demonstrates how to use the Place Picker Google package to select a place on a map and display its name and coordinates.
```

<-- END_MAIN -->
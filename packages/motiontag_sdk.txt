# MotionTag SDK Flutter Package

## <-- START_DESCRIPTION -->

### Overview

The `motiontag_sdk` Flutter package is designed to facilitate the integration of motion tagging capabilities into Flutter applications. This package is particularly useful for developers looking to enhance their apps with motion tracking features, enabling functionalities such as location tracking, activity recognition, and more. It is ideal for applications in sectors like fitness, logistics, and navigation, where understanding user movement is crucial.

### Key Features

- **Real-time Motion Tracking**: Capture and analyze user movements in real-time.
- **Activity Recognition**: Identify various activities such as walking, running, or cycling.
- **Location Services**: Access GPS data to provide location-based services.
- **Customizable Settings**: Adjust parameters for motion detection sensitivity and accuracy.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS devices.

### When to Use

You should consider using the `motiontag_sdk` package when:
- You are developing fitness or health-related applications that require tracking user activities.
- Your app needs to provide location-based services or navigation features.
- You want to enhance user engagement by integrating motion-based interactions.

## <-- END_DESCRIPTION -->

## <-- START_TUTORIAL -->

### Setup Process

To get started with the `motiontag_sdk` package, follow these steps:

#### 1. Add Dependency

Add the package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  motiontag_sdk: ^latest_version
```

Make sure to replace `^latest_version` with the latest version available on [pub.dev](https://pub.dev/packages/motiontag_sdk).

#### 2. Platform-Specific Configuration

**For Android:**
- Open `android/app/build.gradle` and ensure you have the following permissions:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21 // or higher
    }
}
```

- Add the necessary permissions in `AndroidManifest.xml`:

```xml
<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>
<uses-permission android:name="android.permission.ACTIVITY_RECOGNITION"/>
```

**For iOS:**
- Open `ios/Runner/Info.plist` and add the following keys for location and motion permissions:

```xml
<key>NSLocationWhenInUseUsageDescription</key>
<string>We need your location to provide better services.</string>
<key>NSMotionUsageDescription</key>
<string>We need access to your motion data for activity recognition.</string>
```

#### 3. Initialize the SDK

In your main Dart file, initialize the SDK before using it:

```dart
import 'package:motiontag_sdk/motiontag_sdk.dart';

void main() {
  WidgetsFlutterBinding.ensureInitialized();
  MotionTagSdk.initialize();
  runApp(MyApp());
}
```

### Usage

After setting up the package, you can start using its features. Hereâ€™s a simple example of how to start motion tracking:

```dart
MotionTagSdk.startTracking();
```

Make sure to handle permissions and check if the user has granted them before starting tracking.

## <-- END_TUTORIAL -->

## <-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:motiontag_sdk/motiontag_sdk.dart';

void main() {
  // Ensure Flutter bindings are initialized
  WidgetsFlutterBinding.ensureInitialized();
  
  // Initialize the MotionTag SDK
  MotionTagSdk.initialize();
  
  // Run the main application
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  String _activity = "Unknown"; // Variable to hold the detected activity

  @override
  void initState() {
    super.initState();
    
    // Start motion tracking when the app initializes
    MotionTagSdk.startTracking();
    
    // Listen for activity updates
    MotionTagSdk.onActivityChanged.listen((activity) {
      setState(() {
        _activity = activity; // Update the activity variable
      });
    });
  }

  @override
  void dispose() {
    // Stop tracking when the widget is disposed
    MotionTagSdk.stopTracking();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('MotionTag SDK Example'),
        ),
        body: Center(
          child: Text(
            'Current Activity: $_activity', // Display the current activity
            style: TextStyle(fontSize: 24),
          ),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts by initializing the MotionTag SDK.
// 2. The main widget (RealFlutter) is created, which sets up a listener for activity changes.
// 3. When the app initializes, it starts tracking motion data.
// 4. The app listens for activity updates and updates the UI accordingly.
// 5. When the widget is disposed, it stops tracking to free up resources.
```

## <-- END_MAIN -->

### Summary

In this blog post, we explored the `motiontag_sdk` Flutter package, which provides robust motion tracking capabilities for Flutter applications. We covered the setup process, including platform-specific configurations for Android and iOS, and demonstrated how to implement a simple application that tracks user activity in real-time. The provided code example illustrates the flow of the application, from initialization to displaying the current activity on the screen. This package is a powerful tool for developers looking to enhance their applications with motion-based features.
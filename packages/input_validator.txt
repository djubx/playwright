```markdown
<!-- START_DESCRIPTION -->
# Input Validator Flutter Package

The `input_validator` package is a powerful tool designed to simplify the process of validating user input in Flutter applications. It provides a set of pre-defined validators that can be easily integrated into your forms, ensuring that the data collected from users meets specific criteria. This package is particularly useful in scenarios where user input is critical, such as login forms, registration forms, and any other forms requiring data integrity.

## When to Use This Package
- **User Registration**: Validate email addresses, passwords, and other user details.
- **Form Submission**: Ensure that all required fields are filled out correctly before submission.
- **Real-time Validation**: Provide instant feedback to users as they fill out forms.

## Features
- **Pre-defined Validators**: Includes common validators like email, password strength, and required fields.
- **Custom Validators**: Allows developers to create their own validation rules.
- **Error Messages**: Easily display error messages to users for invalid inputs.
- **Integration with Form Fields**: Works seamlessly with Flutter's form widgets.

This package streamlines the validation process, making it easier for developers to maintain clean and efficient code while enhancing user experience.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Input Validator Package

## Installation
To use the `input_validator` package, you need to add it to your `pubspec.yaml` file. Open your `pubspec.yaml` and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  input_validator: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command in your terminal to install the package:

```bash
flutter pub get
```

## Usage
### Basic Setup
1. **Import the Package**: In your Dart file, import the package at the top:

```dart
import 'package:input_validator/input_validator.dart';
```

2. **Create a Form**: Use Flutter's `Form` widget to create a form that will utilize the validators.

### Platform-Specific Details
- **Android**: No special configuration is required for Android. Just ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file.
- **iOS**: For iOS, ensure that your deployment target is set to at least 10.0 in your `ios/Podfile`.

### Example Usage
Hereâ€™s how to implement the `input_validator` in a simple form:

```dart
// Import necessary packages
import 'package:flutter/material.dart';
import 'package:input_validator/input_validator.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Input Validator Example')),
        body: InputForm(),
      ),
    );
  }
}

class InputForm extends StatefulWidget {
  @override
  _InputFormState createState() => _InputFormState();
}

class _InputFormState extends State<InputForm> {
  final _formKey = GlobalKey<FormState>();
  String? _email;
  String? _password;

  @override
  Widget build(BuildContext context) {
    return Form(
      key: _formKey,
      child: Column(
        children: [
          TextFormField(
            decoration: InputDecoration(labelText: 'Email'),
            validator: (value) {
              // Use the email validator from the package
              return InputValidator.validateEmail(value);
            },
            onSaved: (value) => _email = value,
          ),
          TextFormField(
            decoration: InputDecoration(labelText: 'Password'),
            obscureText: true,
            validator: (value) {
              // Use the password validator from the package
              return InputValidator.validatePassword(value);
            },
            onSaved: (value) => _password = value,
          ),
          ElevatedButton(
            onPressed: () {
              if (_formKey.currentState!.validate()) {
                _formKey.currentState!.save();
                // Process the data
                print('Email: $_email, Password: $_password');
              }
            },
            child: Text('Submit'),
          ),
        ],
      ),
    );
  }
}
```

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of Input Validator in Flutter

```dart
import 'package:flutter/material.dart';
import 'package:input_validator/input_validator.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Input Validator Example')),
        body: InputForm(),
      ),
    );
  }
}

class InputForm extends StatefulWidget {
  @override
  _InputFormState createState() => _InputFormState();
}

class _InputFormState extends State<InputForm> {
  final _formKey = GlobalKey<FormState>(); // Key to identify the form
  String? _email; // Variable to store email
  String? _password; // Variable to store password

  @override
  Widget build(BuildContext context) {
    return Form(
      key: _formKey, // Assign the form key
      child: Column(
        children: [
          TextFormField(
            decoration: InputDecoration(labelText: 'Email'), // Email field
            validator: (value) {
              // Validate email using the package
              return InputValidator.validateEmail(value);
            },
            onSaved: (value) => _email = value, // Save email value
          ),
          TextFormField(
            decoration: InputDecoration(labelText: 'Password'), // Password field
            obscureText: true, // Hide password input
            validator: (value) {
              // Validate password using the package
              return InputValidator.validatePassword(value);
            },
            onSaved: (value) => _password = value, // Save password value
          ),
          ElevatedButton(
            onPressed: () {
              if (_formKey.currentState!.validate()) { // Check if form is valid
                _formKey.currentState!.save(); // Save form data
                // Process the data
                print('Email: $_email, Password: $_password'); // Output data
              }
            },
            child: Text('Submit'), // Submit button
          ),
        ],
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the RealFlutter class, which sets up the MaterialApp.
// 2. The InputForm widget is created, which contains a form with email and password fields.
// 3. Each TextFormField uses validators from the input_validator package to validate user input.
// 4. When the submit button is pressed, the form checks if the input is valid.
// 5. If valid, it saves the input and prints the email and password to the console.
```
<!-- END_MAIN -->
``` 

This structured approach provides a comprehensive overview of the `input_validator` package, guiding developers through its features, setup, and practical implementation in a Flutter application.
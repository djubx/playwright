```markdown
<-- START_DESCRIPTION -->

# Flashy Tab Bar 2: A Flutter Package Overview

The `flashy_tab_bar2` package is a versatile and visually appealing tab bar widget for Flutter applications. It provides a flashy, animated tab bar that enhances the user interface with smooth transitions and customizable options. This package is particularly useful for applications that require a modern and engaging navigation experience.

## When to Use Flashy Tab Bar 2

- **Modern UI Design**: If your application demands a sleek and contemporary look, `flashy_tab_bar2` can significantly enhance the visual appeal.
- **Interactive Navigation**: For apps that benefit from interactive and animated navigation, this package offers a dynamic alternative to the standard tab bar.
- **Customizable Features**: When you need a tab bar that can be tailored to fit the theme and style of your app, `flashy_tab_bar2` provides extensive customization options.

## Key Features

- **Smooth Animations**: The package offers smooth and eye-catching animations that make transitions between tabs visually appealing.
- **Customizable Appearance**: You can customize colors, icons, and text to match your app's theme.
- **Easy Integration**: Designed to be easily integrated into existing Flutter applications with minimal setup.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up Flashy Tab Bar 2 in Your Flutter Project

In this tutorial, we will walk through the process of setting up and using the `flashy_tab_bar2` package in a Flutter application. We will cover platform-specific configurations for both Android and iOS.

## Step 1: Add the Dependency

First, add the `flashy_tab_bar2` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  flashy_tab_bar2: ^0.0.1
```

Run `flutter pub get` to install the package.

## Step 2: Basic Setup

Create a new Flutter project or open an existing one. In your `lib` directory, open `main.dart` and import the package:

```dart
import 'package:flashy_tab_bar2/flashy_tab_bar2.dart';
```

## Step 3: Implementing Flashy Tab Bar

Replace the default `Scaffold` widget with a `FlashyTabBar` widget. Here is a basic setup:

```dart
import 'package:flutter/material.dart';
import 'package:flashy_tab_bar2/flashy_tab_bar2.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  int _selectedIndex = 0;

  List<Widget> _pages = [
    Center(child: Text('Home')),
    Center(child: Text('Search')),
    Center(child: Text('Profile')),
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: _pages[_selectedIndex],
      bottomNavigationBar: FlashyTabBar(
        selectedIndex: _selectedIndex,
        showElevation: true,
        onItemSelected: (index) => setState(() => _selectedIndex = index),
        items: [
          FlashyTabBarItem(
            icon: Icon(Icons.home),
            title: Text('Home'),
          ),
          FlashyTabBarItem(
            icon: Icon(Icons.search),
            title: Text('Search'),
          ),
          FlashyTabBarItem(
            icon: Icon(Icons.person),
            title: Text('Profile'),
          ),
        ],
      ),
    );
  }
}
```

## Platform-Specific Details

### Android

Ensure your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```gradle
minSdkVersion 21
```

### iOS

No specific configuration is required for iOS, but ensure your deployment target is set to iOS 9.0 or higher in your `ios/Podfile`:

```ruby
platform :ios, '9.0'
```

<-- END_TUTORIAL -->

<-- MAIN -->

# Complete Example: Flashy Tab Bar 2 in Action

Below is a complete example of a Flutter application using the `flashy_tab_bar2` package. This example demonstrates all key features of the package.

```dart
import 'package:flutter/material.dart';
import 'package:flashy_tab_bar2/flashy_tab_bar2.dart';

// Main entry point of the application
void main() {
  runApp(MyApp());
}

// Root widget of the application
class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flashy Tab Bar Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

// Stateful widget to manage the tab bar state
class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  int _selectedIndex = 0; // Tracks the currently selected tab

  // List of pages corresponding to each tab
  List<Widget> _pages = [
    Center(child: Text('Home Page')),
    Center(child: Text('Search Page')),
    Center(child: Text('Profile Page')),
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      // Display the currently selected page
      body: _pages[_selectedIndex],
      // FlashyTabBar widget for bottom navigation
      bottomNavigationBar: FlashyTabBar(
        selectedIndex: _selectedIndex, // Current selected index
        showElevation: true, // Show shadow under the tab bar
        onItemSelected: (index) => setState(() => _selectedIndex = index), // Update selected index
        items: [
          FlashyTabBarItem(
            icon: Icon(Icons.home), // Icon for the Home tab
            title: Text('Home'), // Title for the Home tab
          ),
          FlashyTabBarItem(
            icon: Icon(Icons.search), // Icon for the Search tab
            title: Text('Search'), // Title for the Search tab
          ),
          FlashyTabBarItem(
            icon: Icon(Icons.person), // Icon for the Profile tab
            title: Text('Profile'), // Title for the Profile tab
          ),
        ],
      ),
    );
  }
}
```

// The application starts with the `main` function, which runs `MyApp`.
// `MyApp` is a stateless widget that sets up the MaterialApp with a title and theme.
// The home of the app is set to `RealFlutter`, a stateful widget managing the tab bar.
// `_RealFlutterState` maintains the state of the selected tab index and the list of pages.
// The `Scaffold` widget uses `FlashyTabBar` for the bottom navigation, updating the displayed page based on the selected tab.
// Each tab is represented by a `FlashyTabBarItem` with an icon and title, providing a smooth and interactive navigation experience.

<-- END_MAIN -->
```
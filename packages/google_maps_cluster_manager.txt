<-- START_DESCRIPTION -->

# Google Maps Cluster Manager Flutter Package
==============================================

The `google_maps_cluster_manager` Flutter package is a powerful tool for managing clusters of markers on Google Maps. It provides a simple and efficient way to display a large number of markers on the map, without overwhelming the user.

### When to Use This Package

This package is ideal for applications that require displaying a large number of markers on a Google Map, such as:

* Location-based services
* Mapping applications
* Logistics and delivery tracking
* Real estate and property listings

### Features

* Clustering of markers based on zoom level and distance
* Customizable cluster icons and colors
* Support for multiple marker types and styles
* Efficient rendering and updating of markers

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `google_maps_cluster_manager` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter:
    sdk: flutter
  google_maps_cluster_manager: ^1.2.3
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:google_maps_cluster_manager/google_maps_cluster_manager.dart';
```
### Step 3: Create a Google Map

Create a Google Map widget and add it to your app:
```dart
GoogleMap(
  onMapCreated: (GoogleMapController controller) {
    // Add markers and clusters here
  },
)
```
### Step 4: Add Markers and Clusters

Create a `ClusterManager` instance and add markers and clusters to it:
```dart
ClusterManager _clusterManager = ClusterManager();

// Add markers
_clusterManager.addMarker(Marker(
  markerId: MarkerId('marker1'),
  position: LatLng(37.7749, -122.4194),
));

// Add clusters
_clusterManager.addCluster(Cluster(
  clusterId: ClusterId('cluster1'),
  position: LatLng(37.7749, -122.4194),
  markers: [
    Marker(
      markerId: MarkerId('marker2'),
      position: LatLng(37.7751, -122.4196),
    ),
    Marker(
      markerId: MarkerId('marker3'),
      position: LatLng(37.7753, -122.4198),
    ),
  ],
));
```
### Platform-Specific Details

* On Android, make sure to add the Google Maps API key to your `AndroidManifest.xml` file.
* On iOS, make sure to add the Google Maps API key to your `Info.plist` file.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:google_maps_cluster_manager/google_maps_cluster_manager.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  ClusterManager _clusterManager = ClusterManager();
  GoogleMapController _mapController;

  @override
  void initState() {
    super.initState();
    _clusterManager.addMarker(Marker(
      markerId: MarkerId('marker1'),
      position: LatLng(37.7749, -122.4194),
    ));
    _clusterManager.addCluster(Cluster(
      clusterId: ClusterId('cluster1'),
      position: LatLng(37.7749, -122.4194),
      markers: [
        Marker(
          markerId: MarkerId('marker2'),
          position: LatLng(37.7751, -122.4196),
        ),
        Marker(
          markerId: MarkerId('marker3'),
          position: LatLng(37.7753, -122.4198),
        ),
      ],
    ));
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: GoogleMap(
        onMapCreated: (GoogleMapController controller) {
          _mapController = controller;
          _clusterManager.setMapController(controller);
        },
        initialCameraPosition: CameraPosition(
          target: LatLng(37.7749, -122.4194),
          zoom: 12,
        ),
      ),
    );
  }
}

// The app starts by creating a RealFlutter widget, which is a stateful widget.
// The RealFlutter widget creates a ClusterManager instance and adds markers and clusters to it.
// The RealFlutter widget then builds a GoogleMap widget and sets the map controller.
// The GoogleMap widget displays the markers and clusters on the map.
// When the user interacts with the map, the ClusterManager updates the markers and clusters accordingly.
```

<-- END_MAIN -->
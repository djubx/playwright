<-- START_DESCRIPTION -->

# coordtransform Flutter Package
The coordtransform package is a powerful tool for Flutter developers to transform coordinates between different geographic coordinate systems. It provides an efficient way to convert between various coordinate systems, making it an essential package for apps that rely on location-based services.

## When to Use
The coordtransform package is particularly useful when:

* You need to convert between different geographic coordinate systems, such as WGS84, GCJ02, and BD09.
* Your app requires precise location-based calculations, such as distance and bearing calculations.
* You need to integrate with other location-based services, such as mapping and navigation APIs.

## Features
The coordtransform package offers the following features:

* Support for multiple coordinate systems, including WGS84, GCJ02, and BD09.
* Efficient and accurate coordinate transformations.
* Simple and intuitive API for easy integration.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the coordtransform Package
To use the coordtransform package in your Flutter app, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  coordtransform: ^1.0.0
```
2. Run `flutter pub get` to install the package.
3. Import the package in your Dart file:
```dart
import 'package:coordtransform/coordtransform.dart';
```
## Platform-Specific Details
The coordtransform package works seamlessly on both Android and iOS platforms. However, if you're using Android, make sure to add the following configuration to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
```
This permission is required for the package to access the device's location.

## Optimizations
To optimize the performance of the coordtransform package, consider the following:

* Use the `transform` method instead of the `transformAsync` method for synchronous transformations.
* Use the `batchTransform` method for transforming multiple coordinates at once.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:coordtransform/coordtransform.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Define the WGS84 coordinates
  double wgs84Lat = 39.9042;
  double wgs84Lng = 116.4074;

  // Define the GCJ02 coordinates
  double gcj02Lat;
  double gcj02Lng;

  // Define the BD09 coordinates
  double bd09Lat;
  double bd09Lng;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('coordtransform Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text('WGS84 Coordinates:'),
            Text('Latitude: $wgs84Lat, Longitude: $wgs84Lng'),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                // Transform WGS84 to GCJ02
                CoordTransform.transform(
                  wgs84Lat,
                  wgs84Lng,
                  CoordSystem.WGS84,
                  CoordSystem.GCJ02,
                ).then((result) {
                  setState(() {
                    gcj02Lat = result.latitude;
                    gcj02Lng = result.longitude;
                  });
                });
              },
              child: Text('Transform to GCJ02'),
            ),
            SizedBox(height: 20),
            Text('GCJ02 Coordinates:'),
            Text('Latitude: $gcj02Lat, Longitude: $gcj02Lng'),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                // Transform GCJ02 to BD09
                CoordTransform.transform(
                  gcj02Lat,
                  gcj02Lng,
                  CoordSystem.GCJ02,
                  CoordSystem.BD09,
                ).then((result) {
                  setState(() {
                    bd09Lat = result.latitude;
                    bd09Lng = result.longitude;
                  });
                });
              },
              child: Text('Transform to BD09'),
            ),
            SizedBox(height: 20),
            Text('BD09 Coordinates:'),
            Text('Latitude: $bd09Lat, Longitude: $bd09Lng'),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and sees the WGS84 coordinates displayed.
// 2. The user clicks the "Transform to GCJ02" button, which triggers the transformation of the WGS84 coordinates to GCJ02 coordinates.
// 3. The transformed GCJ02 coordinates are displayed on the screen.
// 4. The user clicks the "Transform to BD09" button, which triggers the transformation of the GCJ02 coordinates to BD09 coordinates.
// 5. The transformed BD09 coordinates are displayed on the screen.

// In summary, the app demonstrates the transformation of coordinates between different geographic coordinate systems using the coordtransform package.
```

<-- END_MAIN -->
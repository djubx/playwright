<-- START_DESCRIPTION -->

# Version Check Flutter Package
================================

The `version_check` Flutter package is a simple and efficient way to manage versioning in your Flutter applications. It allows you to easily check for updates, notify users of new versions, and even force updates when necessary.

## When to Use This Package
---------------------------

This package is perfect for applications that require frequent updates, such as:

* Games with regular content updates
* Social media apps with new features and bug fixes
* Productivity apps with performance enhancements

## Features
------------

* Check for updates on app launch
* Notify users of new versions with customizable alerts
* Force updates when a new version is available
* Support for both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Version Check Package
=====================================

## Step 1: Add the Package to Your Pubspec
-----------------------------------------

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  version_check: ^1.0.0
```
Then, run `flutter pub get` to install the package.

## Step 2: Import the Package
-----------------------------

Import the package in your Dart file:
```dart
import 'package:version_check/version_check.dart';
```
## Step 3: Initialize the Package
---------------------------------

Initialize the package in your app's `main` function:
```dart
void main() async {
  await VersionCheck.init();
  runApp(MyApp());
}
```
## Platform-Specific Details
---------------------------

### Android

* Make sure to add the following line to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.INTERNET" />
```
### iOS

* Make sure to add the following line to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:version_check/version_check.dart';

void main() async {
  await VersionCheck.init();
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  void initState() {
    super.initState();
    _checkForUpdates();
  }

  Future<void> _checkForUpdates() async {
    // Check for updates on app launch
    final updateAvailable = await VersionCheck.checkForUpdate();
    if (updateAvailable) {
      // Notify user of new version
      _showUpdateDialog();
    }
  }

  void _showUpdateDialog() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Update Available'),
          content: Text('A new version of the app is available. Please update to continue using the app.'),
          actions: [
            TextButton(
              child: Text('Update'),
              onPressed: () async {
                // Force update when user clicks "Update"
                await VersionCheck.forceUpdate();
              },
            ),
          ],
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Real Flutter',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Real Flutter'),
        ),
        body: Center(
          child: Text('Welcome to Real Flutter!'),
        ),
      ),
    );
  }
}

// Application flow:
// 1. The app launches and initializes the VersionCheck package.
// 2. The app checks for updates on launch using the _checkForUpdates function.
// 3. If an update is available, the app shows a dialog to the user using the _showUpdateDialog function.
// 4. When the user clicks "Update", the app forces the update using the VersionCheck.forceUpdate function.
// 5. The app restarts with the new version.
```

<-- END_MAIN -->
```markdown
<-- START_DESCRIPTION -->

# Overview of the `skeleton_text` Flutter Package

The `skeleton_text` Flutter package is a powerful tool designed to enhance the user experience by providing a placeholder UI while content is loading. This package is particularly useful in applications where data is fetched asynchronously, such as from a network or a database, and there is a need to maintain a smooth and visually appealing interface during loading times.

## When to Use `skeleton_text`

- **Loading Data**: When fetching data from an API or a database, use `skeleton_text` to display a placeholder that mimics the layout of the final content.
- **Improving UX**: Enhance the user experience by reducing perceived wait times and providing a visual cue that content is being loaded.
- **Consistent UI**: Maintain a consistent look and feel across your application by using skeleton screens instead of spinners or progress bars.

## Features

- **Customizable Skeletons**: Easily customize the appearance of the skeletons to match your app's design.
- **Animation Support**: Includes built-in animations to make the loading state more engaging.
- **Lightweight**: Minimal impact on app performance, ensuring smooth transitions between loading and loaded states.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the `skeleton_text` Package

In this section, we'll walk through the setup process for the `skeleton_text` package and demonstrate how to integrate it into a Flutter application.

## Installation

To use the `skeleton_text` package, add it to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  skeleton_text: ^2.0.0
```

Run `flutter pub get` to install the package.

## Basic Usage

To use `skeleton_text`, wrap your widget with `SkeletonText` and configure its properties to match your design.

```dart
import 'package:flutter/material.dart';
import 'package:skeleton_text/skeleton_text.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Skeleton Text Example')),
      body: Center(
        child: SkeletonAnimation(
          child: Container(
            width: 200.0,
            height: 100.0,
            decoration: BoxDecoration(
              color: Colors.grey[300],
              borderRadius: BorderRadius.circular(10.0),
            ),
          ),
        ),
      ),
    );
  }
}
```

## Platform-Specific Details

### Android

No additional configuration is required for Android. Ensure your `minSdkVersion` is set to at least 16 in `android/app/build.gradle`.

### iOS

Ensure your iOS deployment target is set to at least 9.0 in `ios/Podfile`:

```ruby
platform :ios, '9.0'
```

## Optimizations

- **Performance**: Use `SkeletonAnimation` judiciously to avoid excessive animations that could impact performance.
- **Customization**: Adjust the `borderRadius` and `color` properties to better fit your app's theme.

<-- END_TUTORIAL -->

<-- MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:skeleton_text/skeleton_text.dart';

void main() => runApp(RealFlutter());

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Skeleton Text Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: SkeletonScreen(),
    );
  }
}

class SkeletonScreen extends StatefulWidget {
  @override
  _SkeletonScreenState createState() => _SkeletonScreenState();
}

class _SkeletonScreenState extends State<SkeletonScreen> {
  bool _loading = true;

  @override
  void initState() {
    super.initState();
    // Simulate a network call or data fetching
    Future.delayed(Duration(seconds: 3), () {
      setState(() {
        _loading = false; // Data has been loaded
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Skeleton Text Example'),
      ),
      body: _loading ? _buildSkeletonView() : _buildContentView(),
    );
  }

  Widget _buildSkeletonView() {
    // Build the skeleton view with animated placeholders
    return ListView.builder(
      itemCount: 5,
      itemBuilder: (context, index) {
        return Padding(
          padding: const EdgeInsets.all(8.0),
          child: SkeletonAnimation(
            child: Container(
              width: double.infinity,
              height: 100.0,
              decoration: BoxDecoration(
                color: Colors.grey[300],
                borderRadius: BorderRadius.circular(10.0),
              ),
            ),
          ),
        );
      },
    );
  }

  Widget _buildContentView() {
    // Build the actual content view once data is loaded
    return ListView.builder(
      itemCount: 5,
      itemBuilder: (context, index) {
        return Padding(
          padding: const EdgeInsets.all(8.0),
          child: Container(
            width: double.infinity,
            height: 100.0,
            decoration: BoxDecoration(
              color: Colors.blue[100],
              borderRadius: BorderRadius.circular(10.0),
            ),
            child: Center(child: Text('Content $index')),
          ),
        );
      },
    );
  }
}
```

// The application starts by running the `RealFlutter` class, which sets up the MaterialApp.
// The `SkeletonScreen` widget is the main screen, managing the loading state.
// In `initState`, a simulated delay is used to mimic data fetching.
// The `build` method checks the `_loading` state to decide whether to show the skeleton or the actual content.
// `_buildSkeletonView` creates a list of animated skeleton containers.
// `_buildContentView` displays the actual content once loading is complete.

<-- END_MAIN -->
```
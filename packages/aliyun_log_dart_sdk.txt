<-- START_DESCRIPTION -->

# aliyun_log_dart_sdk Flutter Package
=====================================

The `aliyun_log_dart_sdk` package is a Flutter wrapper for the Aliyun Log Service, allowing developers to easily integrate log collection and analysis into their Flutter applications. This package provides a convenient way to send logs to Aliyun Log Service, which can then be used for analysis, monitoring, and troubleshooting.

### When to Use This Package

This package is ideal for developers who want to:

* Collect and analyze logs from their Flutter applications
* Monitor application performance and identify issues
* Troubleshoot problems and improve overall application quality

### Features

* Supports sending logs to Aliyun Log Service
* Provides a simple and easy-to-use API for logging
* Supports logging of various data types, including strings, numbers, and objects
* Supports setting custom log tags and fields

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
================

### Step 1: Add the Package to Your Flutter Project

Add the following dependency to your `pubspec.yaml` file:
```yml
dependencies:
  aliyun_log_dart_sdk: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:aliyun_log_dart_sdk/aliyun_log_dart_sdk.dart';
```
### Step 3: Initialize the Log Service

Initialize the log service with your Aliyun Log Service credentials:
```dart
AliyunLogService _logService = AliyunLogService(
  accessKeyId: 'YOUR_ACCESS_KEY_ID',
  accessKeySecret: 'YOUR_ACCESS_KEY_SECRET',
  endpoint: 'YOUR_ENDPOINT',
  project: 'YOUR_PROJECT',
  logstore: 'YOUR_LOGSTORE',
);
```
### Step 4: Send Logs

Send logs using the `_logService` instance:
```dart
_logService.log('Hello, world!');
```
You can also set custom log tags and fields:
```dart
_logService.log('Hello, world!', tags: {'tag1': 'value1'}, fields: {'field1': 'value1'});
```
### Platform-Specific Details

* For Android, you need to add the following permissions to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.INTERNET" />
<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
```
* For iOS, you need to add the following frameworks to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:aliyun_log_dart_sdk/aliyun_log_dart_sdk.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Aliyun Log Service Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  AliyunLogService _logService;

  @override
  void initState() {
    super.initState();
    _logService = AliyunLogService(
      accessKeyId: 'YOUR_ACCESS_KEY_ID',
      accessKeySecret: 'YOUR_ACCESS_KEY_SECRET',
      endpoint: 'YOUR_ENDPOINT',
      project: 'YOUR_PROJECT',
      logstore: 'YOUR_LOGSTORE',
    );
  }

  void _sendLog() {
    _logService.log('Hello, world!');
  }

  void _sendLogWithTagsAndFields() {
    _logService.log('Hello, world!', tags: {'tag1': 'value1'}, fields: {'field1': 'value1'});
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Aliyun Log Service Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: _sendLog,
              child: Text('Send Log'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _sendLogWithTagsAndFields,
              child: Text('Send Log with Tags and Fields'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and is presented with a button to send a log.
// 2. When the user clicks the button, the `_sendLog` function is called.
// 3. The `_sendLog` function uses the `_logService` instance to send a log to Aliyun Log Service.
// 4. The log is sent with the default tags and fields.
// 5. The user can also click the button to send a log with custom tags and fields.
// 6. When the user clicks this button, the `_sendLogWithTagsAndFields` function is called.
// 7. The `_sendLogWithTagsAndFields` function uses the `_logService` instance to send a log to Aliyun Log Service with custom tags and fields.

// The Aliyun Log Service SDK is used to send logs to Aliyun Log Service.
// The SDK provides a simple and easy-to-use API for logging.
// The SDK supports logging of various data types, including strings, numbers, and objects.
// The SDK also supports setting custom log tags and fields.

// In this example, we use the Aliyun Log Service SDK to send logs to Aliyun Log Service.
// We create an instance of the `AliyunLogService` class and use it to send logs.
// We also demonstrate how to send logs with custom tags and fields.

// This example shows how to use the Aliyun Log Service SDK to send logs to Aliyun Log Service.
// It demonstrates the basic usage of the SDK and how to send logs with custom tags and fields.
```

<-- END_MAIN -->
```markdown
<!-- START_DESCRIPTION -->
# Easy Device Info: A Comprehensive Overview

The `easy_device_info` Flutter package is a powerful tool designed to provide developers with easy access to device information. This package simplifies the process of retrieving essential details about the device on which the Flutter application is running, such as the device model, operating system version, and more. 

## When to Use This Package
You might want to use `easy_device_info` in scenarios such as:
- Displaying device-specific information in your app.
- Collecting analytics data based on device types.
- Customizing app behavior based on the device's capabilities.

## Key Features
- **Cross-Platform Support**: Works seamlessly on both Android and iOS.
- **Comprehensive Device Information**: Retrieve details like device model, OS version, manufacturer, and more.
- **Simple API**: Easy to integrate and use within your Flutter applications.

With these features, `easy_device_info` is an excellent choice for developers looking to enhance their applications with device-specific functionalities.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Easy Device Info: Setup and Usage Tutorial

## Installation
To get started with the `easy_device_info` package, you need to add it to your `pubspec.yaml` file. Open your `pubspec.yaml` and add the following line under dependencies:

```yaml
dependencies:
  easy_device_info: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command in your terminal to install the package:

```bash
flutter pub get
```

## Platform-Specific Configuration

### Android
For Android, ensure that your `AndroidManifest.xml` file has the necessary permissions. Open `android/app/src/main/AndroidManifest.xml` and add the following permissions:

```xml
<uses-permission android:name="android.permission.READ_PHONE_STATE"/>
```

### iOS
For iOS, you may need to add a usage description in your `Info.plist` file. Open `ios/Runner/Info.plist` and add:

```xml
<key>NSBluetoothAlwaysUsageDescription</key>
<string>This app requires access to Bluetooth for device information.</string>
```

## Using the Package
Once the package is installed and configured, you can start using it in your Flutter application. Hereâ€™s a simple example of how to retrieve device information:

```dart
import 'package:flutter/material.dart';
import 'package:easy_device_info/easy_device_info.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Device Info Example')),
        body: Center(
          child: FutureBuilder<DeviceInfo>(
            future: EasyDeviceInfo.getDeviceInfo(),
            builder: (context, snapshot) {
              if (snapshot.connectionState == ConnectionState.waiting) {
                return CircularProgressIndicator();
              } else if (snapshot.hasError) {
                return Text('Error: ${snapshot.error}');
              } else {
                final deviceInfo = snapshot.data!;
                return Text('Device: ${deviceInfo.model}\nOS: ${deviceInfo.osVersion}');
              }
            },
          ),
        ),
      ),
    );
  }
}
```

In this example, we use a `FutureBuilder` to asynchronously fetch device information and display it on the screen.

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of Easy Device Info

```dart
import 'package:flutter/material.dart';
import 'package:easy_device_info/easy_device_info.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Device Info Example')),
        body: Center(
          // Using FutureBuilder to handle asynchronous data fetching
          child: FutureBuilder<DeviceInfo>(
            future: EasyDeviceInfo.getDeviceInfo(), // Fetch device info
            builder: (context, snapshot) {
              // Check the connection state
              if (snapshot.connectionState == ConnectionState.waiting) {
                return CircularProgressIndicator(); // Show loading indicator
              } else if (snapshot.hasError) {
                return Text('Error: ${snapshot.error}'); // Handle errors
              } else {
                final deviceInfo = snapshot.data!; // Get device info
                // Display device model and OS version
                return Text('Device: ${deviceInfo.model}\nOS: ${deviceInfo.osVersion}');
              }
            },
          ),
        ),
      ),
    );
  }
}

void main() {
  runApp(RealFlutter()); // Run the app
}
```

```
// The application starts by running the RealFlutter widget.
// Inside the RealFlutter widget, we create a MaterialApp with a Scaffold.
// The Scaffold contains an AppBar and a Center widget that holds a FutureBuilder.
// The FutureBuilder is used to fetch device information asynchronously.
// While the data is being fetched, a CircularProgressIndicator is displayed.
// Once the data is available, it checks for errors.
// If there's an error, it displays the error message.
// If the data is successfully retrieved, it displays the device model and OS version.
```

<!-- END_MAIN -->
``` 

This structured approach provides a comprehensive understanding of the `easy_device_info` package, guiding developers through its features, setup, and practical usage in a Flutter application.
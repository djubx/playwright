<-- START_DESCRIPTION -->

**Validator Regex Package Overview**
=====================================

The `validator_regex` package is a powerful tool for validating user input in Flutter applications. It provides a simple and efficient way to check if user input matches a specific pattern, making it ideal for validating email addresses, phone numbers, passwords, and more.

**When to Use**
---------------

You should use the `validator_regex` package whenever you need to validate user input in your Flutter application. This can include:

* Validating email addresses during registration or login
* Checking phone numbers for correct formatting
* Enforcing strong password policies
* Validating credit card numbers or other sensitive information

**Features**
------------

The `validator_regex` package offers the following features:

* Simple and efficient validation of user input
* Supports a wide range of validation patterns, including email, phone, and password
* Easy to use and integrate into your Flutter application

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setup and Usage**
=====================

To use the `validator_regex` package in your Flutter application, follow these steps:

### Step 1: Add the Package to Your Pubspec

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  validator_regex: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:validator_regex/validator_regex.dart';
```
### Step 3: Use the Validator

Use the `Validator` class to validate user input:
```dart
Validator validator = Validator();
bool isValid = validator.validate('example@example.com', ValidatorType.email);
```
In this example, we create a `Validator` object and use the `validate` method to check if the input string is a valid email address.

### Platform-Specific Details

The `validator_regex` package works on both Android and iOS platforms. However, you may need to add additional configuration or optimizations depending on your specific use case.

For example, on Android, you may need to add the following line to your `AndroidManifest.xml` file to enable email validation:
```xml
<uses-permission android:name="android.permission.INTERNET" />
```
On iOS, you may need to add the following line to your `Info.plist` file to enable phone number validation:
```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:validator_regex/validator_regex.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Validator Regex Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _formKey = GlobalKey<FormState>();
  String _email = '';
  String _phone = '';
  String _password = '';

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Validator Regex Example'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              // Email field
              TextFormField(
                decoration: InputDecoration(
                  labelText: 'Email',
                  border: OutlineInputBorder(),
                ),
                validator: (value) {
                  if (!Validator().validate(value, ValidatorType.email)) {
                    return 'Invalid email address';
                  }
                  return null;
                },
                onSaved: (value) => _email = value,
              ),
              SizedBox(height: 16),

              // Phone field
              TextFormField(
                decoration: InputDecoration(
                  labelText: 'Phone',
                  border: OutlineInputBorder(),
                ),
                validator: (value) {
                  if (!Validator().validate(value, ValidatorType.phone)) {
                    return 'Invalid phone number';
                  }
                  return null;
                },
                onSaved: (value) => _phone = value,
              ),
              SizedBox(height: 16),

              // Password field
              TextFormField(
                decoration: InputDecoration(
                  labelText: 'Password',
                  border: OutlineInputBorder(),
                ),
                obscureText: true,
                validator: (value) {
                  if (!Validator().validate(value, ValidatorType.password)) {
                    return 'Invalid password';
                  }
                  return null;
                },
                onSaved: (value) => _password = value,
              ),
              SizedBox(height: 16),

              // Submit button
              ElevatedButton(
                onPressed: () {
                  if (_formKey.currentState.validate()) {
                    _formKey.currentState.save();
                    print('Email: $_email');
                    print('Phone: $_phone');
                    print('Password: $_password');
                  }
                },
                child: Text('Submit'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user enters their email, phone, and password in the corresponding fields.
// 2. When the user clicks the submit button, the form is validated using the `Validator` class.
// 3. If the form is valid, the user's input is saved to the `_email`, `_phone`, and `_password` variables.
// 4. The saved input is then printed to the console.

// This example demonstrates how to use the `validator_regex` package to validate user input in a Flutter application.
// The package provides a simple and efficient way to check if user input matches a specific pattern, making it ideal for validating email addresses, phone numbers, and passwords.
```

<-- END_MAIN -->
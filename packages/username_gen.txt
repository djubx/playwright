# Flutter Package Overview: username_gen

<!-- START_DESCRIPTION -->
## Description

The `username_gen` Flutter package is a simple yet powerful tool designed to generate random usernames for applications. This package is particularly useful for developers who need to create unique usernames for users in social media apps, gaming platforms, or any application that requires user registration. 

### When to Use This Package
- **User Registration**: Automatically generate usernames during user sign-up processes.
- **Testing**: Create random usernames for testing purposes in development environments.
- **Gaming Applications**: Provide users with unique usernames to enhance their gaming experience.

### Features
- **Random Username Generation**: Generate usernames based on predefined patterns.
- **Customizable Options**: Allow customization of username length and character sets.
- **Easy Integration**: Simple API that can be easily integrated into any Flutter application.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
## Tutorial

### Installation
To use the `username_gen` package, you need to add it to your `pubspec.yaml` file. Open your Flutter project and add the following line under dependencies:

```yaml
dependencies:
  username_gen: ^1.0.0
```

After adding the dependency, run the following command in your terminal to install the package:

```bash
flutter pub get
```

### Platform-Specific Details
The `username_gen` package is designed to work seamlessly on both Android and iOS platforms. There are no additional configurations required for either platform, making it straightforward to implement.

### Usage
To use the `username_gen` package, you need to import it into your Dart file:

```dart
import 'package:username_gen/username_gen.dart';
```

You can then create an instance of the `UsernameGen` class and use its methods to generate usernames. Hereâ€™s a simple example:

```dart
void main() {
  final usernameGen = UsernameGen();
  String randomUsername = usernameGen.generate();
  print(randomUsername); // Outputs a random username
}
```

This basic setup allows you to generate a random username with default settings. You can also customize the generation process by specifying parameters such as length and character set.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
## Complete Example

```dart
import 'package:flutter/material.dart'; // Import Flutter material package
import 'package:username_gen/username_gen.dart'; // Import the username_gen package

void main() {
  runApp(RealFlutter()); // Run the RealFlutter app
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Username Generator', // Set the title of the app
      home: UsernameGeneratorScreen(), // Set the home screen
    );
  }
}

class UsernameGeneratorScreen extends StatefulWidget {
  @override
  _UsernameGeneratorScreenState createState() => _UsernameGeneratorScreenState();
}

class _UsernameGeneratorScreenState extends State<UsernameGeneratorScreen> {
  String _generatedUsername = ''; // Variable to hold the generated username

  void _generateUsername() {
    final usernameGen = UsernameGen(); // Create an instance of UsernameGen
    setState(() {
      _generatedUsername = usernameGen.generate(); // Generate a new username
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Username Generator'), // App bar title
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Generated Username:', // Label for the generated username
              style: TextStyle(fontSize: 20),
            ),
            SizedBox(height: 10), // Add space between text and username
            Text(
              _generatedUsername, // Display the generated username
              style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
            ),
            SizedBox(height: 20), // Add space before the button
            ElevatedButton(
              onPressed: _generateUsername, // Call the generate function on button press
              child: Text('Generate Username'), // Button text
            ),
          ],
        ),
      ),
    );
  }
}

// The application starts by running the RealFlutter class.
// The RealFlutter class sets up a MaterialApp with a title and a home screen.
// The UsernameGeneratorScreen is a stateful widget that manages the state of the generated username.
// When the app is built, it displays a text label and the generated username.
// The user can press the "Generate Username" button, which triggers the _generateUsername method.
// This method creates an instance of UsernameGen and generates a new username, updating the state.
// The new username is then displayed on the screen.
```

<!-- END_MAIN -->

## Summary
In this blog post, we explored the `username_gen` Flutter package, which provides a straightforward way to generate random usernames. We covered the installation process, usage examples, and provided a complete Flutter application demonstrating its capabilities. The application allows users to generate unique usernames at the click of a button, showcasing the package's ease of use and integration into Flutter projects. This package is ideal for applications requiring user registration or testing, making it a valuable addition to any Flutter developer's toolkit.
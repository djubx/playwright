<-- START_DESCRIPTION -->

# Flutter Custom Theme Package
================================

The `flutter_custom_theme` package is a powerful tool for creating and managing custom themes in Flutter applications. It provides a simple and efficient way to customize the look and feel of your app, allowing you to create a unique and consistent user experience.

## When to Use This Package
---------------------------

You should use this package when you want to:

* Create a custom theme for your Flutter app
* Manage multiple themes in a single app
* Customize the look and feel of your app's UI components
* Use a consistent design language throughout your app

## Features
------------

* Easy theme creation and management
* Support for multiple themes in a single app
* Customizable UI components (e.g. buttons, text fields, etc.)
* Consistent design language throughout the app

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `flutter_custom_theme` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_custom_theme: ^1.0.0
```
### Step 2: Import the Package in Your Dart File

Import the package in your Dart file:
```dart
import 'package:flutter_custom_theme/flutter_custom_theme.dart';
```
### Step 3: Create a Custom Theme

Create a custom theme by extending the `CustomTheme` class:
```dart
class MyTheme extends CustomTheme {
  @override
  Color get primaryColor => Colors.blue;

  @override
  Color get secondaryColor => Colors.green;
}
```
### Step 4: Apply the Custom Theme to Your App

Apply the custom theme to your app by wrapping your `MaterialApp` with the `CustomTheme` widget:
```dart
void main() {
  runApp(
    CustomTheme(
      theme: MyTheme(),
      child: MyApp(),
    ),
  );
}
```
### Platform-Specific Details

* Android: No additional configuration is required.
* iOS: You need to add the following line to your `Info.plist` file:
```xml
<key>UIAppFonts</key>
<array>
  <string>your_custom_font.ttf</string>
</array>
```
Replace `your_custom_font.ttf` with the actual file name of your custom font.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_custom_theme/flutter_custom_theme.dart';

void main() {
  runApp(
    CustomTheme(
      theme: MyTheme(),
      child: MyApp(),
    ),
  );
}

class MyTheme extends CustomTheme {
  @override
  Color get primaryColor => Colors.blue;

  @override
  Color get secondaryColor => Colors.green;
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Custom Theme Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Custom Theme Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Hello, World!',
              style: TextStyle(
                color: CustomTheme.of(context).primaryColor,
              ),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {},
              child: Text('Click me!'),
              style: ElevatedButton.styleFrom(
                primary: CustomTheme.of(context).secondaryColor,
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// The app starts by running the main function, which wraps the MyApp widget with the CustomTheme widget.
// The CustomTheme widget applies the custom theme to the app.
// The MyApp widget builds the MaterialApp, which is the root widget of the app.
// The MyHomePage widget builds the Scaffold, which contains the AppBar and the body of the app.
// The body of the app contains a Text widget and an ElevatedButton widget, both of which use the custom theme colors.
// When the user clicks the button, nothing happens because the onPressed callback is empty.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# mat_month_picker_dialog Flutter Package
The `mat_month_picker_dialog` package is a Flutter library that provides a material design month picker dialog. It allows users to select a month and year from a dialog, making it a useful tool for applications that require date-based input.

## When to Use
This package is ideal for applications that require users to select a month and year, such as:

* Scheduling appointments
* Setting deadlines
* Filtering data by month and year

## Features
The `mat_month_picker_dialog` package provides the following features:

* A material design month picker dialog
* Support for selecting a month and year
* Customizable dialog title and button text
* Support for both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
To use the `mat_month_picker_dialog` package, follow these steps:

## Step 1: Add the Package to Your Project
Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  mat_month_picker_dialog: ^1.0.0
```
Then, run `flutter pub get` to install the package.

## Step 2: Import the Package
Import the package in your Dart file:
```dart
import 'package:mat_month_picker_dialog/mat_month_picker_dialog.dart';
```
## Step 3: Show the Month Picker Dialog
Use the `showMonthPickerDialog` function to display the month picker dialog:
```dart
showMonthPickerDialog(
  context: context,
  initialDate: DateTime.now(),
  firstDate: DateTime(2020),
  lastDate: DateTime(2025),
).then((date) {
  if (date != null) {
    print('Selected date: $date');
  }
});
```
## Platform-Specific Details
The `mat_month_picker_dialog` package works on both Android and iOS platforms. However, you may need to add the following lines to your `Info.plist` file (for iOS):
```xml
<key>NSCalendarUsageDescription</key>
<string>This app needs access to your calendar to function properly</string>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:mat_month_picker_dialog/mat_month_picker_dialog.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  DateTime _selectedDate;

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Month Picker Dialog Demo',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Month Picker Dialog Demo'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Text(
                _selectedDate != null
                    ? 'Selected date: ${_selectedDate.month}/${_selectedDate.year}'
                    : 'No date selected',
                style: TextStyle(fontSize: 24),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  showMonthPickerDialog(
                    context: context,
                    initialDate: DateTime.now(),
                    firstDate: DateTime(2020),
                    lastDate: DateTime(2025),
                  ).then((date) {
                    if (date != null) {
                      setState(() {
                        _selectedDate = date;
                      });
                    }
                  });
                },
                child: Text('Show Month Picker Dialog'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user clicks the "Show Month Picker Dialog" button.
// 2. The `showMonthPickerDialog` function is called, displaying the month picker dialog.
// 3. The user selects a month and year from the dialog.
// 4. The selected date is returned to the `then` block, where it is stored in the `_selectedDate` variable.
// 5. The UI is updated to display the selected date.
// 6. The user can repeat the process by clicking the button again.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Bottom Navigation Bar Flutter Package
=====================================

The `bottom_nav_bar` Flutter package provides a customizable bottom navigation bar for Flutter applications. It allows developers to create a bottom navigation bar with a variety of features, including:

* Customizable icons and labels
* Support for multiple navigation items
* Optional center item
* Customizable colors and styles

When to use this package:

* When you need a customizable bottom navigation bar in your Flutter application
* When you want to provide a consistent navigation experience across multiple platforms

Features:

* Customizable icons and labels
* Support for multiple navigation items
* Optional center item
* Customizable colors and styles

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

## Step 1: Add the package to your project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  bottom_nav_bar: ^1.0.0
```
Then, run `flutter pub get` to install the package.

## Step 2: Import the package

Import the package in your Dart file:
```dart
import 'package:bottom_nav_bar/bottom_nav_bar.dart';
```
## Step 3: Create a BottomNavBar

Create a `BottomNavBar` widget and pass in the required properties:
```dart
BottomNavBar(
  items: [
    BottomNavItem(icon: Icons.home, label: 'Home'),
    BottomNavItem(icon: Icons.search, label: 'Search'),
    BottomNavItem(icon: Icons.settings, label: 'Settings'),
  ],
  currentIndex: 0,
  onTap: (index) {
    // Handle tap event
  },
)
```
## Step 4: Customize the appearance

Customize the appearance of the `BottomNavBar` by passing in optional properties:
```dart
BottomNavBar(
  items: [
    BottomNavItem(icon: Icons.home, label: 'Home'),
    BottomNavItem(icon: Icons.search, label: 'Search'),
    BottomNavItem(icon: Icons.settings, label: 'Settings'),
  ],
  currentIndex: 0,
  onTap: (index) {
    // Handle tap event
  },
  backgroundColor: Colors.white,
  selectedItemColor: Colors.blue,
  unselectedItemColor: Colors.grey,
)
```
## Platform-specific details

* On Android, the `BottomNavBar` will automatically use the material design style.
* On iOS, the `BottomNavBar` will automatically use the cupertino style.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:bottom_nav_bar/bottom_nav_bar.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  int _currentIndex = 0;

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Bottom Nav Bar Demo',
      home: Scaffold(
        body: IndexedStack(
          index: _currentIndex,
          children: [
            Center(child: Text('Home')),
            Center(child: Text('Search')),
            Center(child: Text('Settings')),
          ],
        ),
        bottomNavigationBar: BottomNavBar(
          items: [
            BottomNavItem(icon: Icons.home, label: 'Home'),
            BottomNavItem(icon: Icons.search, label: 'Search'),
            BottomNavItem(icon: Icons.settings, label: 'Settings'),
          ],
          currentIndex: _currentIndex,
          onTap: (index) {
            setState(() {
              _currentIndex = index;
            });
          },
          backgroundColor: Colors.white,
          selectedItemColor: Colors.blue,
          unselectedItemColor: Colors.grey,
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user launches the app and the `RealFlutter` widget is created.
// 2. The `RealFlutter` widget builds the `Scaffold` with the `BottomNavBar`.
// 3. The `BottomNavBar` is displayed with the three navigation items.
// 4. When the user taps on a navigation item, the `onTap` callback is called.
// 5. The `onTap` callback updates the `_currentIndex` state variable.
// 6. The `IndexedStack` is updated to display the corresponding child widget.
// 7. The `BottomNavBar` is updated to reflect the new current index.

// In summary, the code flows as follows:
// User launches app -> `RealFlutter` widget is created -> `Scaffold` is built with `BottomNavBar` -> User taps on navigation item -> `onTap` callback is called -> `_currentIndex` state variable is updated -> `IndexedStack` is updated -> `BottomNavBar` is updated.

```

<-- END_MAIN -->
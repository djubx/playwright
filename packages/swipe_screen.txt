<-- START_DESCRIPTION -->

# Swipe Screen Flutter Package
================================

The `swipe_screen` Flutter package provides a simple and intuitive way to create swipe-based navigation in your Flutter applications. With this package, you can easily create swipe gestures to navigate between screens, making your app more user-friendly and interactive.

## When to Use This Package
---------------------------

You can use this package in various scenarios, such as:

* Creating a swipe-based onboarding process for your app
* Implementing swipe gestures for navigation between screens
* Building a swipe-based gallery or image viewer

## Features
------------

The `swipe_screen` package offers the following features:

* Support for both horizontal and vertical swipe gestures
* Customizable swipe threshold and animation duration
* Ability to specify a callback function for swipe events

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Swipe Screen Package
--------------------------------------

To use the `swipe_screen` package in your Flutter project, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  swipe_screen: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:swipe_screen/swipe_screen.dart';
```
### Step 3: Create a SwipeScreen Widget

Create a `SwipeScreen` widget and specify the swipe direction, threshold, and animation duration:
```dart
SwipeScreen(
  swipeDirection: SwipeDirection.horizontal,
  threshold: 0.5,
  animationDuration: Duration(milliseconds: 500),
  child: // your child widget here
)
```
### Platform-Specific Details

* For Android, you need to add the following line to your `AndroidManifest.xml` file:
```xml
<application
  ...
  android:hardwareAccelerated="true"
  ...
>
```
* For iOS, you need to add the following line to your `Info.plist` file:
```xml
<key>UIViewControllerBasedStatusBarAppearance</key>
<false/>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:swipe_screen/swipe_screen.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Swipe Screen Demo',
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  int _currentIndex = 0;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: SwipeScreen(
        swipeDirection: SwipeDirection.horizontal,
        threshold: 0.5,
        animationDuration: Duration(milliseconds: 500),
        child: IndexedStack(
          index: _currentIndex,
          children: [
            Container(
              color: Colors.red,
              child: Center(
                child: Text('Screen 1'),
              ),
            ),
            Container(
              color: Colors.blue,
              child: Center(
                child: Text('Screen 2'),
              ),
            ),
            Container(
              color: Colors.green,
              child: Center(
                child: Text('Screen 3'),
              ),
            ),
          ],
        ),
        onSwipe: (direction) {
          if (direction == SwipeDirection.left) {
            setState(() {
              _currentIndex++;
            });
          } else if (direction == SwipeDirection.right) {
            setState(() {
              _currentIndex--;
            });
          }
        },
      ),
    );
  }
}

// Here's how the code flows:
// 1. The user swipes left or right on the screen.
// 2. The SwipeScreen widget detects the swipe gesture and calls the onSwipe callback function.
// 3. The onSwipe function updates the _currentIndex variable based on the swipe direction.
// 4. The IndexedStack widget updates its index to the new _currentIndex value.
// 5. The IndexedStack widget displays the corresponding child widget based on its index.
// 6. The user sees the new screen.

// Final summary: The SwipeScreen widget provides a simple way to create swipe-based navigation in Flutter apps. By using the SwipeScreen widget and updating the IndexedStack widget's index, we can create a seamless swipe experience for the user.
```

<-- END_MAIN -->
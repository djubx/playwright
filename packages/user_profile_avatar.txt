<-- START_DESCRIPTION -->

# User Profile Avatar Flutter Package
=====================================

The `user_profile_avatar` Flutter package provides a simple and customizable way to display user profile avatars in your Flutter application. It offers a variety of features, including:

*   Circular and rectangular avatar shapes
*   Customizable avatar sizes and colors
*   Support for displaying network images, asset images, and default avatars
*   Optional caching for network images

When to use this package:

*   When you need to display user profile avatars in your Flutter application
*   When you want a customizable and simple solution for displaying avatars
*   When you need to display avatars in a circular or rectangular shape

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

## Setup

To use the `user_profile_avatar` package, add it to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  user_profile_avatar: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Basic Usage

To display a user profile avatar, use the `UserProfileAvatar` widget:

```dart
UserProfileAvatar(
  avatarUrl: 'https://example.com/avatar.jpg',
  onAvatarTap: () {
    // Handle avatar tap
  },
)
```

## Customization

You can customize the avatar shape, size, and color using the following properties:

*   `avatarShape`: Can be either `AvatarShape.circle` or `AvatarShape.rectangle`
*   `avatarSize`: The size of the avatar
*   `avatarColor`: The color of the avatar

```dart
UserProfileAvatar(
  avatarUrl: 'https://example.com/avatar.jpg',
  avatarShape: AvatarShape.circle,
  avatarSize: 50,
  avatarColor: Colors.blue,
)
```

## Platform-Specific Details

### Android

On Android, you need to add the following permission to your `AndroidManifest.xml` file to display network images:

```xml
<uses-permission android:name="android.permission.INTERNET" />
```

### iOS

On iOS, you need to add the following configuration to your `Info.plist` file to display network images:

```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:user_profile_avatar/user_profile_avatar.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'User Profile Avatar Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: UserProfileAvatarDemo(),
    );
  }
}

class UserProfileAvatarDemo extends StatefulWidget {
  @override
  _UserProfileAvatarDemoState createState() => _UserProfileAvatarDemoState();
}

class _UserProfileAvatarDemoState extends State<UserProfileAvatarDemo> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('User Profile Avatar Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            // Display a user profile avatar with a network image
            UserProfileAvatar(
              avatarUrl: 'https://example.com/avatar.jpg',
              onAvatarTap: () {
                // Handle avatar tap
              },
            ),
            SizedBox(height: 20),
            // Display a user profile avatar with an asset image
            UserProfileAvatar(
              avatarAsset: 'assets/avatar.png',
              onAvatarTap: () {
                // Handle avatar tap
              },
            ),
            SizedBox(height: 20),
            // Display a user profile avatar with a default avatar
            UserProfileAvatar(
              onAvatarTap: () {
                // Handle avatar tap
              },
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and is presented with a screen containing three user profile avatars.
// 2. The first avatar is displayed with a network image, the second with an asset image, and the third with a default avatar.
// 3. When the user taps on an avatar, the corresponding callback is called.
// 4. The callback can be used to handle the avatar tap, for example, by navigating to a different screen or displaying a dialog.
// 5. The user can customize the avatar shape, size, and color by using the corresponding properties.
```

// The above code demonstrates the usage of the `user_profile_avatar` package to display user profile avatars in a Flutter application. It shows how to display avatars with network images, asset images, and default avatars, and how to customize the avatar shape, size, and color. The code also demonstrates how to handle avatar taps by using the corresponding callbacks.
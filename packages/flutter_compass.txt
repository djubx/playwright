```markdown
<-- START_DESCRIPTION -->

# Flutter Compass Package: An Overview

The `flutter_compass` package is a powerful tool for Flutter developers who need to integrate compass functionality into their applications. This package provides a simple and efficient way to access the device's orientation sensor, allowing developers to create applications that can display the direction the device is facing.

## When to Use `flutter_compass`

The `flutter_compass` package is ideal for applications that require directional data. Some common use cases include:
- Navigation apps that guide users based on their current orientation.
- Augmented reality applications that overlay information based on the direction the device is pointing.
- Educational apps that teach users about navigation and orientation.

## Features

- **Real-time Orientation Data**: Access the device's orientation in real-time.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS devices.
- **Easy Integration**: Simple API that allows for quick setup and integration into existing projects.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using `flutter_compass`

In this section, we'll walk through the process of setting up the `flutter_compass` package in a Flutter project and demonstrate how to use it effectively.

## Setup Process

### Step 1: Add Dependency

First, add the `flutter_compass` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  flutter_compass: ^0.6.0
```

Run `flutter pub get` to install the package.

### Step 2: Platform-Specific Configuration

#### Android

For Android, ensure that your `AndroidManifest.xml` includes the necessary permissions to access the device's sensors:

```xml
<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
<uses-feature android:name="android.hardware.sensor.compass" android:required="true" />
```

#### iOS

For iOS, update your `Info.plist` to request permission to access location services:

```xml
<key>NSLocationWhenInUseUsageDescription</key>
<string>We need your location to show the compass direction.</string>
```

### Step 3: Import the Package

In your Dart file, import the `flutter_compass` package:

```dart
import 'package:flutter_compass/flutter_compass.dart';
```

## Using the Package

To use the `flutter_compass` package, you can listen to the compass events and update your UI accordingly. Here's a basic example:

```dart
StreamBuilder<CompassEvent>(
  stream: FlutterCompass.events,
  builder: (context, snapshot) {
    if (snapshot.hasData) {
      double? direction = snapshot.data!.heading;
      // Use the direction to update your UI
    } else {
      // Handle the case where the direction is not available
    }
  },
);
```

<-- END_TUTORIAL -->

<-- MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_compass/flutter_compass.dart';

void main() => runApp(RealFlutter());

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: CompassScreen(),
    );
  }
}

class CompassScreen extends StatefulWidget {
  @override
  _CompassScreenState createState() => _CompassScreenState();
}

class _CompassScreenState extends State<CompassScreen> {
  double? _direction;

  @override
  void initState() {
    super.initState();
    // Listen to the compass events and update the direction
    FlutterCompass.events!.listen((CompassEvent event) {
      setState(() {
        _direction = event.heading;
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Compass Example'),
      ),
      body: Center(
        child: _direction == null
            ? Text('Device does not have sensors!')
            : Text('Direction: ${_direction!.toStringAsFixed(2)}Â°'),
      ),
    );
  }
}
```

// The `main` function initializes the app by running the `RealFlutter` widget.
// `RealFlutter` is a stateless widget that sets up the `MaterialApp` with `CompassScreen` as the home.
// `CompassScreen` is a stateful widget that manages the compass data.
// In `initState`, we start listening to compass events using `FlutterCompass.events`.
// The compass heading is updated in the `_direction` variable whenever a new event is received.
// The `build` method displays the current direction or a message if the device lacks sensors.
// The app's UI consists of a centered text widget showing the compass direction in degrees.

// Application Flow Summary:
// 1. The app starts with the `main` function, launching the `RealFlutter` widget.
// 2. `RealFlutter` sets up a `MaterialApp` with `CompassScreen` as the home screen.
// 3. `CompassScreen` initializes and listens for compass events in `initState`.
// 4. The compass heading is updated in real-time and displayed in the UI.
// 5. If the device lacks the necessary sensors, a message is shown instead.

<-- END_MAIN -->
```
<-- START_DESCRIPTION -->

Native QR Package for Flutter
=============================

The `native_qr` package is a Flutter library that allows you to generate and scan QR codes natively on both Android and iOS platforms. This package provides a simple and efficient way to integrate QR code functionality into your Flutter app.

When to Use This Package
------------------------

You can use this package in various scenarios, such as:

* Generating QR codes for payment gateways
* Scanning QR codes for product information
* Creating custom QR code-based authentication systems

Features
--------

The `native_qr` package offers the following features:

* Generate QR codes with custom data and design
* Scan QR codes using the device's camera
* Support for both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
---------------

To use the `native_qr` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  native_qr: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:native_qr/native_qr.dart';
```
### Step 3: Generate a QR Code

Use the `NativeQr` class to generate a QR code:
```dart
NativeQr qr = NativeQr(
  data: 'https://example.com',
  size: 200,
);
```
### Step 4: Scan a QR Code

Use the `NativeQrScanner` class to scan a QR code:
```dart
NativeQrScanner scanner = NativeQrScanner(
  onScan: (data) {
    print('Scanned data: $data');
  },
);
```
Platform-Specific Details
-------------------------

### Android

On Android, you need to add the following permissions to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.CAMERA" />
```
### iOS

On iOS, you need to add the following lines to your `Info.plist` file:
```xml
<key>NSCameraUsageDescription</key>
<string>This app needs camera access to scan QR codes</string>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:native_qr/native_qr.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Native QR Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  String _scannedData = '';

  // Step 1: Create a NativeQr instance to generate a QR code
  NativeQr _qr = NativeQr(
    data: 'https://example.com',
    size: 200,
  );

  // Step 2: Create a NativeQrScanner instance to scan a QR code
  NativeQrScanner _scanner = NativeQrScanner(
    onScan: (data) {
      // Step 3: Update the scanned data
      setState(() {
        _scannedData = data;
      });
    },
  );

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Native QR Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            // Step 4: Display the generated QR code
            _qr,
            SizedBox(height: 20),
            // Step 5: Display the scanned data
            Text(_scannedData),
            SizedBox(height: 20),
            // Step 6: Start scanning a QR code
            ElevatedButton(
              onPressed: () {
                _scanner.startScan();
              },
              child: Text('Scan QR Code'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and sees the generated QR code.
// 2. The user clicks the "Scan QR Code" button to start scanning a QR code.
// 3. The app uses the NativeQrScanner instance to scan a QR code.
// 4. When a QR code is scanned, the app updates the scanned data.
// 5. The user sees the scanned data displayed on the screen.

// Summary: This code demonstrates how to generate and scan QR codes using the native_qr package in Flutter.
```

<-- END_MAIN -->
```markdown
<!-- START_DESCRIPTION -->
# Digital Scale Flutter Package

The `digital_scale` Flutter package is designed to provide developers with an easy way to integrate digital scale functionalities into their Flutter applications. This package is particularly useful for applications that require weight measurement, such as fitness apps, e-commerce platforms, or any application that needs to display weight data.

## When to Use This Package
- **Fitness Applications**: To track weight loss or gain.
- **E-commerce Platforms**: For products that are sold by weight.
- **Inventory Management**: To manage stock based on weight.

## Features
- **Real-time Weight Measurement**: Provides real-time updates of weight data.
- **Multiple Scale Support**: Can connect to various digital scales.
- **Customizable UI**: Allows developers to customize the display of weight data.
- **Cross-Platform Compatibility**: Works seamlessly on both Android and iOS devices.

The `digital_scale` package simplifies the process of integrating weight measurement features, making it a valuable tool for developers in various domains.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Digital Scale Package

## Installation
To get started with the `digital_scale` package, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  digital_scale: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run `flutter pub get` to install the package.

## Platform-Specific Configuration

### Android
1. Open `android/app/build.gradle` and ensure you have the following permissions in the `AndroidManifest.xml`:

```xml
<uses-permission android:name="android.permission.BLUETOOTH" />
<uses-permission android:name="android.permission.BLUETOOTH_ADMIN" />
```

2. Ensure your `minSdkVersion` is set to at least 21.

### iOS
1. Open `ios/Runner/Info.plist` and add the following keys to request Bluetooth permissions:

```xml
<key>NSBluetoothAlwaysUsageDescription</key>
<string>This app requires Bluetooth access to connect to digital scales.</string>
<key>NSBluetoothPeripheralUsageDescription</key>
<string>This app requires Bluetooth access to connect to digital scales.</string>
```

## Using the Package
To use the `digital_scale` package, you can follow these steps in your Flutter application:

1. Import the package:

```dart
import 'package:digital_scale/digital_scale.dart';
```

2. Initialize the scale and start measuring:

```dart
void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: ScaleScreen(),
    );
  }
}

class ScaleScreen extends StatefulWidget {
  @override
  _ScaleScreenState createState() => _ScaleScreenState();
}

class _ScaleScreenState extends State<ScaleScreen> {
  double _weight = 0.0;

  @override
  void initState() {
    super.initState();
    // Initialize the digital scale
    DigitalScale.init().then((_) {
      // Start listening for weight updates
      DigitalScale.onWeightChanged.listen((weight) {
        setState(() {
          _weight = weight;
        });
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Digital Scale')),
      body: Center(
        child: Text('Weight: $_weight kg'),
      ),
    );
  }
}
```

This code initializes the digital scale and listens for weight changes, updating the UI accordingly.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Digital Scale Integration

```dart
import 'package:flutter/material.dart';
import 'package:digital_scale/digital_scale.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: ScaleScreen(),
    );
  }
}

class ScaleScreen extends StatefulWidget {
  @override
  _ScaleScreenState createState() => _ScaleScreenState();
}

class _ScaleScreenState extends State<ScaleScreen> {
  double _weight = 0.0; // Variable to hold the weight value

  @override
  void initState() {
    super.initState();
    // Initialize the digital scale
    DigitalScale.init().then((_) {
      // Start listening for weight updates
      DigitalScale.onWeightChanged.listen((weight) {
        setState(() {
          _weight = weight; // Update the weight variable
        });
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Digital Scale')),
      body: Center(
        child: Text('Weight: $_weight kg'), // Display the weight
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function runs the MyApp widget.
// 2. MyApp builds the ScaleScreen widget.
// 3. In ScaleScreen's initState, the digital scale is initialized.
// 4. The app listens for weight changes from the digital scale.
// 5. When a new weight is detected, the state is updated, and the UI reflects the new weight.
// 6. The weight is displayed in the center of the screen.
```
<!-- END_MAIN -->
```

### Summary
In this blog post, we explored the `digital_scale` Flutter package, detailing its features, installation process, and usage. We provided a complete example of a Flutter application that integrates the package, demonstrating how to initialize the scale and listen for weight changes. This package is ideal for applications that require weight measurement, making it a valuable addition to any developer's toolkit.
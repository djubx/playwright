<-- START_DESCRIPTION -->

# giff_dialog Flutter Package
================================

The `giff_dialog` package is a Flutter library that allows you to display customizable GIF dialogs in your app. It provides a simple and easy-to-use API for showing GIFs in a dialog box.

## When to Use
--------------

You can use this package in various scenarios, such as:

* Displaying a loading animation while data is being fetched from the server
* Showing a success or failure GIF after a user completes an action
* Providing a visually appealing way to display information to the user

## Features
------------

* Customizable GIF dialog with support for various GIF sizes and styles
* Support for both Android and iOS platforms
* Easy-to-use API for displaying GIF dialogs

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the Package
=====================================

## Step 1: Add the Package to Your pubspec.yaml File
------------------------------------------------

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  giff_dialog: ^1.0.0
```
Then, run `flutter pub get` to get the package.

## Step 2: Import the Package
---------------------------

Import the package in your Dart file:
```dart
import 'package:giff_dialog/giff_dialog.dart';
```
## Step 3: Display the GIF Dialog
------------------------------

Use the `GiffDialog` widget to display the GIF dialog:
```dart
GiffDialog(
  image: Image.asset('assets/loading.gif'),
  title: Text('Loading...'),
  description: Text('Please wait while we load the data.'),
  entryAnimation: EntryAnimation.bottom,
  onOkButtonPressed: () {
    // Handle OK button press
  },
)
```
## Platform-Specific Details
---------------------------

### Android

No additional configuration is required for Android.

### iOS

You need to add the following line to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```
This allows the app to load GIFs from the internet.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:giff_dialog/giff_dialog.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Giff Dialog Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  void _showGiffDialog() {
    showDialog(
      context: context,
      builder: (_) => GiffDialog(
        image: Image.asset('assets/loading.gif'),
        title: Text('Loading...'),
        description: Text('Please wait while we load the data.'),
        entryAnimation: EntryAnimation.bottom,
        onOkButtonPressed: () {
          // Handle OK button press
        },
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Giff Dialog Demo'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: _showGiffDialog,
          child: Text('Show Giff Dialog'),
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user presses the "Show Giff Dialog" button.
// 2. The `_showGiffDialog` function is called, which displays the GIF dialog.
// 3. The GIF dialog is displayed with a loading animation and a title and description.
// 4. The user can press the OK button to dismiss the dialog.
// 5. The `onOkButtonPressed` callback is called when the OK button is pressed.
```

// Summary: The code flows by displaying a button that, when pressed, shows a GIF dialog with a loading animation and a title and description. The user can press the OK button to dismiss the dialog, which calls the `onOkButtonPressed` callback.

<-- END_MAIN -->
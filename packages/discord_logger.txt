```markdown
<!-- START_DESCRIPTION -->
# Discord Logger Flutter Package

The `discord_logger` package is a powerful tool for Flutter developers looking to integrate logging capabilities directly into their Discord servers. This package allows you to send log messages from your Flutter application to a Discord channel, making it easier to monitor application behavior and debug issues in real-time.

## When to Use This Package
- **Real-time Monitoring**: If you want to monitor your application’s logs in real-time while it is running, sending logs to Discord can be a great solution.
- **Team Collaboration**: For teams that use Discord for communication, integrating logs into a shared channel can enhance collaboration and streamline debugging processes.
- **Remote Debugging**: When working on applications that are deployed remotely, having logs sent to Discord can help you troubleshoot issues without needing direct access to the device.

## Features
- **Easy Integration**: Simple setup process to start logging messages to Discord.
- **Customizable Log Levels**: Support for different log levels (info, warning, error) to categorize messages.
- **Asynchronous Logging**: Non-blocking logging to ensure that your application remains responsive.
- **Webhooks Support**: Utilizes Discord webhooks for sending messages, ensuring a secure and efficient logging process.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Tutorial: Setting Up discord_logger

In this section, we will walk through the setup process for the `discord_logger` package and demonstrate how to use it in your Flutter application.

## Step 1: Add Dependency

To get started, add the `discord_logger` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  discord_logger: ^1.0.0  # Check for the latest version on pub.dev
```

## Step 2: Configure Discord Webhook

1. Go to your Discord server and create a new channel (or use an existing one).
2. Click on the channel settings, navigate to "Integrations," and create a new webhook.
3. Copy the webhook URL; you will need it for the configuration.

## Step 3: Initialize the Logger

In your Flutter application, you need to initialize the logger with the webhook URL. This can be done in the `main.dart` file.

### Platform-Specific Details

- **Android**: Ensure that your app has internet permissions in the `AndroidManifest.xml` file:
  ```xml
  <uses-permission android:name="android.permission.INTERNET"/>
  ```

- **iOS**: No additional configuration is required for iOS, but ensure that your app has the necessary permissions to access the internet.

## Step 4: Using the Logger

You can now use the logger in your application. Here’s a simple example of how to log messages:

```dart
import 'package:flutter/material.dart';
import 'package:discord_logger/discord_logger.dart';

void main() {
  // Initialize the logger with your Discord webhook URL
  DiscordLogger.init('YOUR_DISCORD_WEBHOOK_URL');
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Discord Logger Example')),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              // Log an info message
              DiscordLogger.log('Button pressed!', level: LogLevel.info);
            },
            child: Text('Press Me'),
          ),
        ),
      ),
    );
  }
}
```

This code initializes the logger and sends a log message to Discord when the button is pressed.

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of discord_logger

Here is a fully functional Flutter main file that demonstrates the key features of the `discord_logger` package.

```dart
import 'package:flutter/material.dart';
import 'package:discord_logger/discord_logger.dart';

void main() {
  // Initialize the logger with your Discord webhook URL
  DiscordLogger.init('YOUR_DISCORD_WEBHOOK_URL');
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Discord Logger Example')),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              ElevatedButton(
                onPressed: () {
                  // Log an info message
                  DiscordLogger.log('Info: Button pressed!', level: LogLevel.info);
                },
                child: Text('Log Info'),
              ),
              ElevatedButton(
                onPressed: () {
                  // Log a warning message
                  DiscordLogger.log('Warning: This is a warning!', level: LogLevel.warning);
                },
                child: Text('Log Warning'),
              ),
              ElevatedButton(
                onPressed: () {
                  // Log an error message
                  DiscordLogger.log('Error: An error occurred!', level: LogLevel.error);
                },
                child: Text('Log Error'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function initializes the Discord logger with the provided webhook URL.
// 2. The RealFlutter widget is created, which builds the main application interface.
// 3. The app contains three buttons: "Log Info", "Log Warning", and "Log Error".
// 4. When a button is pressed, a corresponding log message is sent to the specified Discord channel.
// 5. The log messages are categorized by their log level (info, warning, error), allowing for better organization in Discord.
```
<!-- END_MAIN -->
``` 

This structured approach provides a comprehensive overview of the `discord_logger` package, guiding developers through its features, setup, and practical usage in a Flutter application.
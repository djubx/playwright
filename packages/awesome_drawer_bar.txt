<-- START_DESCRIPTION -->

# Awesome Drawer Bar Package
The `awesome_drawer_bar` package is a Flutter library that provides a customizable and easy-to-use drawer bar for your Flutter applications. It allows you to create a drawer bar with various features such as custom colors, fonts, and animations.

## When to Use
You can use this package when you want to add a drawer bar to your Flutter application. It is particularly useful when you want to provide a navigation menu to your users.

## Features
Some of the key features of this package include:

* Customizable colors and fonts
* Support for animations
* Easy-to-use API

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
To use the `awesome_drawer_bar` package, follow these steps:

## Step 1: Add the Package to Your Pubspec File
Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  awesome_drawer_bar: ^1.0.0
```
Then, run `flutter pub get` to get the package.

## Step 2: Import the Package
Import the package in your Dart file:
```dart
import 'package:awesome_drawer_bar/awesome_drawer_bar.dart';
```
## Step 3: Create a Drawer Bar
Create a drawer bar using the `AwesomeDrawerBar` widget:
```dart
AwesomeDrawerBar(
  title: Text('Drawer Bar'),
  items: [
    AwesomeDrawerBarItem(
      icon: Icons.home,
      label: Text('Home'),
    ),
    AwesomeDrawerBarItem(
      icon: Icons.settings,
      label: Text('Settings'),
    ),
  ],
)
```
## Platform-Specific Details
This package works on both Android and iOS platforms. However, you may need to configure some platform-specific settings.

For example, on Android, you may need to add the following line to your `AndroidManifest.xml` file:
```xml
<application
  ...
  android:usesCleartextTraffic="true"
  ...>
```
This allows the package to use cleartext traffic.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:awesome_drawer_bar/awesome_drawer_bar.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Awesome Drawer Bar Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  int _currentIndex = 0;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Awesome Drawer Bar Demo'),
      ),
      drawer: AwesomeDrawerBar(
        title: Text('Drawer Bar'),
        items: [
          AwesomeDrawerBarItem(
            icon: Icons.home,
            label: Text('Home'),
            onTap: () {
              setState(() {
                _currentIndex = 0;
              });
            },
          ),
          AwesomeDrawerBarItem(
            icon: Icons.settings,
            label: Text('Settings'),
            onTap: () {
              setState(() {
                _currentIndex = 1;
              });
            },
          ),
        ],
      ),
      body: IndexedStack(
        index: _currentIndex,
        children: [
          Center(
            child: Text('Home Page'),
          ),
          Center(
            child: Text('Settings Page'),
          ),
        ],
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and sees the home page.
// 2. The user taps the drawer icon to open the drawer.
// 3. The user sees the drawer bar with two items: Home and Settings.
// 4. The user taps the Home item to go back to the home page.
// 5. The user taps the Settings item to go to the settings page.
// 6. The user can switch between the home and settings pages using the drawer bar.

// This code demonstrates the basic usage of the Awesome Drawer Bar package.
// It shows how to create a drawer bar with custom items and how to handle the tap events.
```

<-- END_MAIN -->
```markdown
<!-- START_DESCRIPTION -->
# Easy App Installer Flutter Package

The **easy_app_installer** Flutter package is a powerful tool designed to simplify the process of installing applications on both Android and iOS devices. This package is particularly useful for developers who want to provide a seamless installation experience for their users, allowing them to install apps directly from their Flutter applications without navigating through app stores.

## When to Use This Package

- **Custom App Distribution**: If you are distributing apps outside of the official app stores, this package allows users to install your app directly from a link.
- **Testing and Development**: During the development phase, you can use this package to quickly install and test your applications on physical devices.
- **Enterprise Applications**: For organizations that deploy internal applications, this package can facilitate easy installation for employees.

## Features

- **Cross-Platform Support**: Works on both Android and iOS.
- **Simple API**: Easy to integrate with minimal setup.
- **Progress Tracking**: Provides feedback on the installation process.
- **Error Handling**: Handles common installation errors gracefully.

With these features, the **easy_app_installer** package streamlines the app installation process, making it a valuable addition to any Flutter developer's toolkit.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Easy App Installer

In this tutorial, we will walk through the setup process for the **easy_app_installer** package and demonstrate how to use it in a Flutter application.

## Step 1: Adding the Dependency

To get started, add the **easy_app_installer** package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  easy_app_installer: ^latest_version
```

Make sure to replace `^latest_version` with the latest version of the package available on [pub.dev](https://pub.dev/packages/easy_app_installer).

## Step 2: Platform-Specific Configuration

### Android Configuration

1. Open your `AndroidManifest.xml` file located at `android/app/src/main/AndroidManifest.xml`.
2. Add the following permissions inside the `<manifest>` tag:

```xml
<uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES"/>
<uses-permission android:name="android.permission.INSTALL_PACKAGES"/>
```

3. Ensure that your `minSdkVersion` is set to at least 21 in `android/app/build.gradle`:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

### iOS Configuration

1. Open your `Info.plist` file located at `ios/Runner/Info.plist`.
2. Add the following key to allow installation from external sources:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

## Step 3: Using the Package

Now that we have set up the package, we can use it in our Flutter application. Below is a simple example of how to implement the **easy_app_installer** package.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
```dart
import 'package:flutter/material.dart';
import 'package:easy_app_installer/easy_app_installer.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Easy App Installer Demo',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Easy App Installer'),
        ),
        body: Center(
          child: ElevatedButton(
            onPressed: () async {
              // URL of the APK or IPA file to install
              String appUrl = 'https://example.com/path/to/app.apk';

              // Start the installation process
              try {
                bool installed = await EasyAppInstaller.install(appUrl);
                if (installed) {
                  // Notify user of successful installation
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text('Installation Successful!')),
                  );
                } else {
                  // Notify user of installation failure
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text('Installation Failed!')),
                  );
                }
              } catch (e) {
                // Handle any errors that occur during installation
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text('Error: $e')),
                );
              }
            },
            child: Text('Install App'),
          ),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the RealFlutter widget.
// 2. The RealFlutter widget builds a MaterialApp with a title and a home Scaffold.
// 3. Inside the Scaffold, an ElevatedButton is created.
// 4. When the button is pressed, it triggers the installation process by calling EasyAppInstaller.install() with the app URL.
// 5. If the installation is successful, a success message is shown; otherwise, an error message is displayed.
// 6. Any exceptions during the installation process are caught and displayed to the user.
```
<!-- END_MAIN -->
```

This structured blog provides a comprehensive overview of the **easy_app_installer** Flutter package, guiding users through its features, setup, and practical implementation.
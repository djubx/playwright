```markdown
<!-- START_DESCRIPTION -->
# Flutter Country Selector Package

The `flutter_country_selector` package is a powerful tool for Flutter developers looking to implement a country selection feature in their applications. This package simplifies the process of allowing users to select their country from a predefined list, making it ideal for applications that require user location information, such as registration forms, shipping details, or localization settings.

## When to Use This Package
- **User Registration**: When you need users to select their country during account creation.
- **Shipping Information**: For e-commerce applications where shipping addresses are required.
- **Localization**: To allow users to set their preferred country for content localization.

## Features
- **Comprehensive Country List**: Includes a wide range of countries with their respective codes and flags.
- **Customizable UI**: Allows developers to customize the appearance of the country selector.
- **Easy Integration**: Simple API for quick implementation in any Flutter project.
- **Search Functionality**: Users can easily search for their country in a long list.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using flutter_country_selector

In this tutorial, we will walk through the setup process for the `flutter_country_selector` package and demonstrate how to use it in a Flutter application.

## Installation

To add the `flutter_country_selector` package to your Flutter project, include it in your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  flutter_country_selector: ^latest_version
```

Make sure to replace `^latest_version` with the latest version available on [pub.dev](https://pub.dev/packages/flutter_country_selector).

After adding the dependency, run the following command to install it:

```bash
flutter pub get
```

## Platform-Specific Configuration

### Android
For Android, ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```gradle
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
        ...
    }
}
```

### iOS
For iOS, you may need to set the deployment target in your `ios/Podfile`:

```ruby
platform :ios, '10.0'
```

## Using the Package

To use the `flutter_country_selector`, you can create a simple widget that utilizes the `CountrySelector` class. Hereâ€™s a basic example:

```dart
import 'package:flutter/material.dart';
import 'package:flutter_country_selector/flutter_country_selector.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Country Selector Example')),
        body: Center(
          child: CountrySelector(
            onChanged: (country) {
              // Handle the selected country
              print('Selected country: ${country.name}');
            },
          ),
        ),
      ),
    );
  }
}
```

In this example, we create a simple Flutter application with a `CountrySelector` widget. When a user selects a country, the `onChanged` callback is triggered, allowing you to handle the selected country.

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of flutter_country_selector

Here is a complete example of a Flutter application that demonstrates the use of the `flutter_country_selector` package.

```dart
import 'package:flutter/material.dart';
import 'package:flutter_country_selector/flutter_country_selector.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Country Selector Demo',
      home: CountrySelectorPage(),
    );
  }
}

class CountrySelectorPage extends StatefulWidget {
  @override
  _CountrySelectorPageState createState() => _CountrySelectorPageState();
}

class _CountrySelectorPageState extends State<CountrySelectorPage> {
  String selectedCountry = 'Select a country';

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Country Selector Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              selectedCountry,
              style: TextStyle(fontSize: 20),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () async {
                // Show the country selector dialog
                final country = await showDialog<Country>(
                  context: context,
                  builder: (context) {
                    return CountrySelectorDialog();
                  },
                );

                // Update the selected country if a country was chosen
                if (country != null) {
                  setState(() {
                    selectedCountry = country.name;
                  });
                }
              },
              child: Text('Select Country'),
            ),
          ],
        ),
      ),
    );
  }
}

// This widget shows the country selector dialog
class CountrySelectorDialog extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: Text('Select a Country'),
      content: CountrySelector(
        onChanged: (country) {
          // Close the dialog and return the selected country
          Navigator.of(context).pop(country);
        },
      ),
      actions: <Widget>[
        TextButton(
          onPressed: () {
            // Close the dialog without selecting a country
            Navigator.of(context).pop();
          },
          child: Text('Cancel'),
        ),
      ],
    );
  }
}
```

```
// The application starts with the main function, which runs the RealFlutter widget.
// RealFlutter sets up the MaterialApp and directs to the CountrySelectorPage.
// In CountrySelectorPage, we maintain the selected country state.
// The user sees a button to select a country, which opens a dialog when pressed.
// The dialog contains the CountrySelector widget, allowing the user to pick a country.
// When a country is selected, the dialog closes and updates the displayed country name.
// If the user cancels, the dialog simply closes without making changes.
```
<!-- END_MAIN -->
``` 

This structured approach provides a comprehensive overview of the `flutter_country_selector` package, guiding developers through its features, setup, and practical usage in a Flutter application.
<-- START_DESCRIPTION -->

# Frontend Server Client Package for Flutter
=============================================

The `frontend_server_client` package is a powerful tool for Flutter developers that enables communication between the frontend and backend of an application. It provides a simple and efficient way to send and receive data between the client and server, making it an essential package for building robust and scalable Flutter applications.

When to Use This Package
------------------------

The `frontend_server_client` package is ideal for applications that require real-time communication between the client and server. This includes applications that need to:

* Send and receive data in real-time
* Update the UI based on server-side changes
* Handle multiple requests and responses concurrently

Features
--------

The `frontend_server_client` package offers several key features, including:

* Support for WebSocket and HTTP connections
* Automatic connection management
* Error handling and retries
* Support for JSON and binary data

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Frontend Server Client Package
---------------------------------------------

To use the `frontend_server_client` package in your Flutter application, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  frontend_server_client: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:frontend_server_client/frontend_server_client.dart';
```
### Step 3: Create a Client Instance

Create a new instance of the `FrontendServerClient` class:
```dart
final client = FrontendServerClient('ws://localhost:8080');
```
### Step 4: Establish a Connection

Establish a connection to the server:
```dart
client.connect();
```
### Step 5: Send and Receive Data

Send and receive data using the `send` and `listen` methods:
```dart
client.send('Hello, server!');
client.listen((data) {
  print('Received data: $data');
});
```
Platform-Specific Details
-------------------------

### Android

On Android, you need to add the following permission to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.INTERNET" />
```
### iOS

On iOS, you need to add the following line to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:frontend_server_client/frontend_server_client.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Frontend Server Client Example',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _client = FrontendServerClient('ws://localhost:8080');
  final _textController = TextEditingController();
  String _receivedData = '';

  @override
  void initState() {
    super.initState();
    _client.connect();
    _client.listen((data) {
      setState(() {
        _receivedData = data;
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Frontend Server Client Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text('Received data: $_receivedData'),
            TextField(
              controller: _textController,
              decoration: InputDecoration(
                labelText: 'Send data to server',
              ),
            ),
            ElevatedButton(
              onPressed: () {
                _client.send(_textController.text);
              },
              child: Text('Send'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and the `MyHomePage` widget is displayed.
// 2. The `MyHomePage` widget creates a new instance of the `FrontendServerClient` class and establishes a connection to the server.
// 3. The user enters some text in the text field and clicks the "Send" button.
// 4. The text is sent to the server using the `send` method of the `FrontendServerClient` class.
// 5. The server receives the text and sends a response back to the client.
// 6. The client receives the response and updates the UI with the received data.
// 7. The user can repeat steps 3-6 to send and receive more data.

// This example demonstrates the basic usage of the `frontend_server_client` package.
// It shows how to establish a connection to a server, send data to the server, and receive data from the server.
// It also shows how to update the UI with the received data.
```

<-- END_MAIN -->
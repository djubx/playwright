<-- START_DESCRIPTION -->

# Declarative Refresh Indicator
The `declarative_refresh_indicator` package provides a simple and efficient way to implement a refresh indicator in Flutter applications. It allows you to declaratively define when the refresh indicator should be shown, making it easier to handle complex logic and provide a better user experience.

## When to Use
This package is useful when you need to implement a refresh indicator that depends on the state of your application. For example, you might want to show the refresh indicator when the user is waiting for data to load, or when an error occurs.

## Features
The `declarative_refresh_indicator` package provides the following features:

* Declarative syntax for defining when the refresh indicator should be shown
* Support for custom refresh indicators
* Automatic handling of refresh indicator visibility

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
To use the `declarative_refresh_indicator` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  declarative_refresh_indicator: ^1.0.0
```
2. Import the package in your Dart file:
```dart
import 'package:declarative_refresh_indicator/declarative_refresh_indicator.dart';
```
3. Create a `DeclarativeRefreshIndicator` widget and pass a `RefreshIndicator` widget as a child:
```dart
DeclarativeRefreshIndicator(
  child: RefreshIndicator(
    onRefresh: () async {
      // Handle refresh logic here
    },
    child: ListView.builder(
      itemCount: 10,
      itemBuilder: (context, index) {
        return ListTile(
          title: Text('Item $index'),
        );
      },
    ),
  ),
)
```
4. Use the `DeclarativeRefreshIndicator` widget in your app:
```dart
class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Declarative Refresh Indicator'),
      ),
      body: DeclarativeRefreshIndicator(
        // ...
      ),
    );
  }
}
```
### Platform-Specific Details
On Android, the refresh indicator will be shown as a circular progress indicator. On iOS, the refresh indicator will be shown as a horizontal progress bar.

### Configurations and Optimizations
You can customize the appearance of the refresh indicator by passing a `RefreshIndicator` widget with a custom `Indicator` widget. For example:
```dart
DeclarativeRefreshIndicator(
  child: RefreshIndicator(
    indicator: CircularProgressIndicator(
      valueColor: AlwaysStoppedAnimation(Colors.blue),
    ),
    // ...
  ),
)
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:declarative_refresh_indicator/declarative_refresh_indicator.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  bool _isLoading = false;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Declarative Refresh Indicator'),
      ),
      body: DeclarativeRefreshIndicator(
        // Show the refresh indicator when _isLoading is true
        showRefreshIndicator: _isLoading,
        child: RefreshIndicator(
          onRefresh: () async {
            // Handle refresh logic here
            setState(() {
              _isLoading = true;
            });
            await Future.delayed(Duration(seconds: 2));
            setState(() {
              _isLoading = false;
            });
          },
          child: ListView.builder(
            itemCount: 10,
            itemBuilder: (context, index) {
              return ListTile(
                title: Text('Item $index'),
              );
            },
          ),
        ),
      ),
    );
  }
}

// The app flow is as follows:
// 1. The user pulls down on the list to trigger a refresh.
// 2. The _isLoading flag is set to true, which causes the refresh indicator to be shown.
// 3. The refresh logic is handled in the onRefresh callback.
// 4. After the refresh logic completes, the _isLoading flag is set to false, which causes the refresh indicator to be hidden.
// 5. The list is updated with new data.

void main() {
  runApp(MaterialApp(
    home: RealFlutter(),
  ));
}
```

<-- END_MAIN -->
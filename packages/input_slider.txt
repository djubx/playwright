<-- START_DESCRIPTION -->

# Input Slider Package for Flutter
=====================================

The `input_slider` package is a customizable and easy-to-use slider package for Flutter applications. It allows users to select a value from a range of values by sliding a thumb along a horizontal or vertical track.

### When to Use

The `input_slider` package is useful when you need to allow users to select a value from a continuous range, such as:

* Adjusting the brightness or volume of a device
* Selecting a rating or score
* Choosing a value from a range of options

### Features

* Customizable track and thumb colors
* Horizontal or vertical orientation
* Support for discrete and continuous values
* Optional labels and ticks

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Input Slider Package
=====================================

To use the `input_slider` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  input_slider: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:input_slider/input_slider.dart';
```
### Step 3: Create an Input Slider

Create an `InputSlider` widget and customize its properties:
```dart
InputSlider(
  min: 0,
  max: 100,
  value: 50,
  onChanged: (value) {
    print('Selected value: $value');
  },
)
```
### Platform-Specific Details

* On Android, the input slider will use the Material Design style by default.
* On iOS, the input slider will use the Cupertino style by default.

### Configurations and Optimizations

* You can customize the appearance of the input slider by using the `trackColor`, `thumbColor`, and `labelColor` properties.
* You can also use the `discrete` property to specify whether the input slider should snap to discrete values.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:input_slider/input_slider.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  double _value = 50;

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Input Slider Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Text('Selected value: $_value'),
              InputSlider(
                min: 0,
                max: 100,
                value: _value,
                onChanged: (value) {
                  setState(() {
                    _value = value;
                  });
                },
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app and sees the input slider with a initial value of 50.
// 2. The user slides the thumb to select a new value.
// 3. The `onChanged` callback is called with the new value.
// 4. The state is updated with the new value.
// 5. The UI is rebuilt to reflect the new value.
// 6. The user sees the updated value displayed above the input slider.

// In summary, the code flows as follows:
// 1. The user interacts with the input slider.
// 2. The input slider updates the state with the new value.
// 3. The UI is rebuilt to reflect the new value.

```

<-- END_MAIN -->
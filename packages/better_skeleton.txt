<-- START_DESCRIPTION -->

# Better Skeleton Flutter Package
=====================================

The `better_skeleton` Flutter package is a powerful tool for creating visually appealing and customizable skeleton screens for your Flutter applications. Skeleton screens are used to display a placeholder layout while data is being loaded, providing a better user experience.

### When to Use

You can use the `better_skeleton` package in a variety of scenarios, such as:

* Displaying a placeholder layout while data is being fetched from an API
* Creating a loading animation for your application
* Providing a visually appealing way to display empty data

### Features

The `better_skeleton` package comes with a range of features, including:

* Customizable skeleton layout
* Support for various shapes and sizes
* Animation support
* Platform-specific optimizations

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Better Skeleton Package
==========================================

To use the `better_skeleton` package in your Flutter application, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  better_skeleton: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:better_skeleton/better_skeleton.dart';
```
### Step 3: Create a Skeleton Layout

Create a skeleton layout using the `Skeleton` widget:
```dart
Skeleton(
  child: // your child widget here
)
```
### Platform-Specific Optimizations

The `better_skeleton` package provides platform-specific optimizations for Android and iOS. To use these optimizations, add the following lines to your `AndroidManifest.xml` file (for Android) or your `Info.plist` file (for iOS):
```xml
<!-- AndroidManifest.xml -->
<application
  ...
  android:hardwareAccelerated="true"
>
  ...
</application>
```

```xml
<!-- Info.plist -->
<key>UIViewEdgeAntialiasing</key>
<true/>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:better_skeleton/better_skeleton.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Better Skeleton Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    // Simulate data loading
    Future.delayed(Duration(seconds: 3), () {
      setState(() {
        _isLoading = false;
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Better Skeleton Demo'),
      ),
      body: _isLoading
          ? Skeleton(
              child: Column(
                children: [
                  SkeletonItem(
                    child: Container(
                      height: 100,
                      color: Colors.grey,
                    ),
                  ),
                  SkeletonItem(
                    child: Container(
                      height: 100,
                      color: Colors.grey,
                    ),
                  ),
                ],
              ),
            )
          : Center(
              child: Text('Data loaded!'),
            ),
    );
  }
}
```

// The application flow is as follows:
// 1. The user runs the application and is presented with a skeleton layout.
// 2. The application simulates data loading by delaying the display of the actual data for 3 seconds.
// 3. Once the data is loaded, the skeleton layout is replaced with the actual data.
// 4. The user can now interact with the application as normal.

// The `better_skeleton` package provides a simple and effective way to display a placeholder layout while data is being loaded.
// This improves the user experience by providing a visually appealing way to display empty data.

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Bottom Bar Matu Package Overview
=====================================

The `bottom_bar_matu` package is a Flutter package that provides a customizable bottom navigation bar with a variety of features. It is designed to be highly flexible and can be used in a wide range of applications.

### When to Use This Package

This package is ideal for applications that require a bottom navigation bar with advanced features such as:

* Customizable tab icons and labels
* Support for multiple tab styles
* Animated tab transitions
* Integration with other Flutter packages

### Features

Some of the key features of the `bottom_bar_matu` package include:

* Customizable tab icons and labels
* Support for multiple tab styles (e.g. material, cupertino)
* Animated tab transitions
* Integration with other Flutter packages (e.g. `provider`, `bloc`)

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Bottom Bar Matu Package
==========================================

To use the `bottom_bar_matu` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  bottom_bar_matu: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:bottom_bar_matu/bottom_bar_matu.dart';
```
### Step 3: Create a Bottom Bar Matu Instance

Create a `BottomBarMatu` instance and pass it to your `Scaffold` widget:
```dart
Scaffold(
  bottomNavigationBar: BottomBarMatu(
    items: [
      BottomBarItem(
        icon: Icon(Icons.home),
        label: 'Home',
      ),
      BottomBarItem(
        icon: Icon(Icons.settings),
        label: 'Settings',
      ),
    ],
  ),
);
```
### Platform-Specific Details

* On Android, the bottom navigation bar will be displayed at the bottom of the screen.
* On iOS, the bottom navigation bar will be displayed at the bottom of the screen, but it will be hidden when the keyboard is visible.

### Required Configurations or Optimizations

* To customize the appearance of the bottom navigation bar, you can pass a `BottomBarMatuConfig` object to the `BottomBarMatu` constructor.
* To animate the tab transitions, you can pass an `AnimationController` object to the `BottomBarMatu` constructor.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:bottom_bar_matu/bottom_bar_matu.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Bottom Bar Matu Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  int _currentIndex = 0;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Bottom Bar Matu Demo'),
      ),
      body: Center(
        child: Text('Current index: $_currentIndex'),
      ),
      bottomNavigationBar: BottomBarMatu(
        items: [
          BottomBarItem(
            icon: Icon(Icons.home),
            label: 'Home',
          ),
          BottomBarItem(
            icon: Icon(Icons.settings),
            label: 'Settings',
          ),
        ],
        currentIndex: _currentIndex,
        onTap: (index) {
          setState(() {
            _currentIndex = index;
          });
        },
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user launches the app and is presented with a bottom navigation bar with two tabs: Home and Settings.
// 2. The user taps on a tab, which triggers the `onTap` callback.
// 3. The `onTap` callback updates the `_currentIndex` variable, which causes the UI to rebuild.
// 4. The UI is rebuilt with the new `_currentIndex` value, which causes the bottom navigation bar to update its appearance.
// 5. The user can repeat steps 2-4 to switch between the Home and Settings tabs.

// The bottom navigation bar is displayed at the bottom of the screen, and its appearance is customized using the `BottomBarMatuConfig` object.
// The tab transitions are animated using the `AnimationController` object.

// In summary, the code flows as follows:
// 1. The user interacts with the bottom navigation bar.
// 2. The `onTap` callback is triggered.
// 3. The `_currentIndex` variable is updated.
// 4. The UI is rebuilt.
// 5. The bottom navigation bar is updated.

```

<-- END_MAIN -->
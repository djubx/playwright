```markdown
<!-- START_DESCRIPTION -->
# flutter_easy_validator: Simplifying Form Validation in Flutter

The `flutter_easy_validator` package is a powerful tool designed to simplify form validation in Flutter applications. It provides a straightforward way to validate user input, ensuring that data entered into forms meets specific criteria before submission. This package is particularly useful in applications that require user registration, login forms, or any scenario where data integrity is crucial.

## When to Use `flutter_easy_validator`
- **User Registration Forms**: Validate email, password strength, and other user details.
- **Login Forms**: Ensure that the user inputs are correct before proceeding.
- **Data Entry Forms**: Validate fields like phone numbers, addresses, and more.

## Key Features
- **Custom Validation Rules**: Create your own validation rules tailored to your application's needs.
- **Built-in Validators**: Comes with a set of pre-defined validators for common use cases (e.g., email, password).
- **Error Handling**: Easily manage and display error messages to users.
- **Integration with Flutter Forms**: Seamlessly integrates with Flutter's form widgets.

With `flutter_easy_validator`, developers can enhance user experience by providing immediate feedback on input errors, leading to cleaner and more reliable data submission.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using `flutter_easy_validator`

## Installation
To get started with `flutter_easy_validator`, you need to add it to your `pubspec.yaml` file. Open your `pubspec.yaml` and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  flutter_easy_validator: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command in your terminal to install the package:

```bash
flutter pub get
```

## Platform-Specific Details
### Android
No additional configuration is required for Android. Just ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file.

### iOS
For iOS, ensure that you have the correct permissions set in your `Info.plist` if you are using any features that require user permissions. However, for basic validation, no special configurations are needed.

## Using the Package
To use `flutter_easy_validator`, you need to import it into your Dart file:

```dart
import 'package:flutter_easy_validator/flutter_easy_validator.dart';
```

### Basic Usage Example
Hereâ€™s a simple example of how to implement form validation using `flutter_easy_validator`:

1. Create a form with text fields.
2. Use the `Validator` class to validate inputs.
3. Display error messages based on validation results.

This package makes it easy to manage form validation without cluttering your code with complex logic.

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of `flutter_easy_validator`

```dart
import 'package:flutter/material.dart';
import 'package:flutter_easy_validator/flutter_easy_validator.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Easy Validator Example',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Form Validation Example'),
        ),
        body: ValidationForm(),
      ),
    );
  }
}

class ValidationForm extends StatefulWidget {
  @override
  _ValidationFormState createState() => _ValidationFormState();
}

class _ValidationFormState extends State<ValidationForm> {
  final _formKey = GlobalKey<FormState>(); // Key to identify the form
  String? _email; // Variable to hold email input
  String? _password; // Variable to hold password input

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Form(
        key: _formKey, // Assigning the form key
        child: Column(
          children: [
            TextFormField(
              decoration: InputDecoration(labelText: 'Email'),
              validator: (value) {
                // Using the built-in email validator
                return Validator.email(value);
              },
              onSaved: (value) {
                _email = value; // Saving the email input
              },
            ),
            TextFormField(
              decoration: InputDecoration(labelText: 'Password'),
              obscureText: true,
              validator: (value) {
                // Using the built-in password validator
                return Validator.password(value);
              },
              onSaved: (value) {
                _password = value; // Saving the password input
              },
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                if (_formKey.currentState!.validate()) {
                  // If the form is valid, save the inputs
                  _formKey.currentState!.save();
                  // Here you can handle the submission of the form
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text('Processing Data: $_email')),
                  );
                }
              },
              child: Text('Submit'),
            ),
          ],
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the RealFlutter widget.
// 2. RealFlutter builds a MaterialApp with a title and a home scaffold.
// 3. The ValidationForm widget is created, which contains a form with two text fields: email and password.
// 4. Each text field has a validator that checks the input using the Validator class from flutter_easy_validator.
// 5. When the submit button is pressed, the form checks if the inputs are valid.
// 6. If valid, the inputs are saved, and a SnackBar displays the processed email.
```
<!-- END_MAIN -->
``` 

This structured approach provides a comprehensive overview of the `flutter_easy_validator` package, guiding developers through its features, setup, and practical implementation.
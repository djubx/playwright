# Bluetooth Connector Flutter Package

## <-- START_DESCRIPTION -->

### Overview

The `bluetooth_connector` package is a powerful Flutter library designed to facilitate Bluetooth communication between devices. It provides a straightforward API for discovering, connecting, and managing Bluetooth devices, making it an excellent choice for applications that require wireless data transfer, such as IoT applications, health monitoring systems, and smart home devices.

### When to Use

You should consider using the `bluetooth_connector` package when:
- You need to connect to Bluetooth Low Energy (BLE) devices.
- Your application requires real-time data exchange with Bluetooth peripherals.
- You want to implement features like device discovery, connection management, and data transfer over Bluetooth.

### Features

- **Device Discovery**: Easily scan for nearby Bluetooth devices.
- **Connection Management**: Connect and disconnect from devices seamlessly.
- **Data Transfer**: Send and receive data to and from connected devices.
- **State Management**: Monitor the connection state and handle disconnections gracefully.
- **Cross-Platform Support**: Works on both Android and iOS with minimal configuration.

## <-- END_DESCRIPTION -->

## <-- START_TUTORIAL -->

### Setup Process

To get started with the `bluetooth_connector` package, follow these steps:

1. **Add Dependency**: Open your `pubspec.yaml` file and add the package:

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     bluetooth_connector: ^latest_version
   ```

   Replace `^latest_version` with the latest version of the package.

2. **Platform-Specific Configuration**:

   #### Android
   - Ensure that your `AndroidManifest.xml` file includes the necessary permissions:

     ```xml
     <uses-permission android:name="android.permission.BLUETOOTH" />
     <uses-permission android:name="android.permission.BLUETOOTH_ADMIN" />
     <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
     ```

   - Starting from Android 12, you also need to add the following permissions:

     ```xml
     <uses-permission android:name="android.permission.BLUETOOTH_SCAN" />
     <uses-permission android:name="android.permission.BLUETOOTH_CONNECT" />
     ```

   #### iOS
   - In your `Info.plist`, add the following keys to request permission for Bluetooth usage:

     ```xml
     <key>NSBluetoothAlwaysUsageDescription</key>
     <string>This app requires Bluetooth access to connect to devices.</string>
     <key>NSBluetoothPeripheralUsageDescription</key>
     <string>This app requires Bluetooth access to connect to peripherals.</string>
     ```

3. **Import the Package**: In your Dart file, import the package:

   ```dart
   import 'package:bluetooth_connector/bluetooth_connector.dart';
   ```

### Using the Package

Once you have set up the package, you can start using it in your Flutter application. The following sections will guide you through a complete example.

## <-- END_TUTORIAL -->

## <-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:bluetooth_connector/bluetooth_connector.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  BluetoothConnector _bluetoothConnector = BluetoothConnector();
  List<BluetoothDevice> _devices = [];
  BluetoothDevice? _connectedDevice;

  @override
  void initState() {
    super.initState();
    // Start scanning for devices when the app initializes
    _scanForDevices();
  }

  void _scanForDevices() async {
    // Start scanning for Bluetooth devices
    _devices = await _bluetoothConnector.scanForDevices();
    setState(() {});
  }

  void _connectToDevice(BluetoothDevice device) async {
    // Connect to the selected Bluetooth device
    _connectedDevice = await _bluetoothConnector.connect(device);
    setState(() {});
  }

  void _disconnectDevice() async {
    // Disconnect from the currently connected device
    await _bluetoothConnector.disconnect(_connectedDevice!);
    _connectedDevice = null;
    setState(() {});
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Bluetooth Connector Example')),
        body: Column(
          children: [
            Expanded(
              child: ListView.builder(
                itemCount: _devices.length,
                itemBuilder: (context, index) {
                  return ListTile(
                    title: Text(_devices[index].name),
                    onTap: () => _connectToDevice(_devices[index]),
                  );
                },
              ),
            ),
            if (_connectedDevice != null)
              ElevatedButton(
                onPressed: _disconnectDevice,
                child: Text('Disconnect from ${_connectedDevice!.name}'),
              ),
          ],
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the RealFlutter widget.
// 2. In the RealFlutter widget, we initialize the BluetoothConnector instance.
// 3. The _scanForDevices method is called in initState to start scanning for Bluetooth devices.
// 4. The scanned devices are displayed in a ListView.
// 5. When a device is tapped, the _connectToDevice method is called to connect to the selected device.
// 6. If a device is connected, a button appears to allow the user to disconnect from it.
// 7. The app updates the UI based on the connection state and the list of discovered devices.
```

## <-- END_MAIN -->

### Summary

In this blog post, we explored the `bluetooth_connector` Flutter package, which simplifies Bluetooth communication in Flutter applications. We covered the setup process, including platform-specific configurations for Android and iOS, and provided a complete example demonstrating how to scan for devices, connect to a selected device, and manage the connection state. This package is ideal for developers looking to implement Bluetooth functionality in their applications, especially in scenarios involving IoT and smart devices.
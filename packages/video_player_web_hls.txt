<-- START_DESCRIPTION -->

# Video Player Web HLS Flutter Package
=====================================

The `video_player_web_hls` package is a Flutter plugin that allows you to play HLS (HTTP Live Streaming) videos on web platforms. This package is a wrapper around the popular `hls.js` library, which provides a robust and efficient way to play HLS videos in the browser.

## When to Use This Package

You should use this package when you need to play HLS videos in your Flutter web application. This package is particularly useful when you want to:

* Play live or on-demand HLS videos
* Support multiple audio and subtitle tracks
* Handle various HLS playlist formats (e.g., M3U8, M3U, etc.)
* Leverage the robustness and efficiency of the `hls.js` library

## Features

The `video_player_web_hls` package provides the following features:

* Support for playing HLS videos on web platforms
* Multiple audio and subtitle track support
* Handling of various HLS playlist formats
* Robust and efficient playback using the `hls.js` library

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
================

## Step 1: Add the Package to Your Flutter Project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  video_player_web_hls: ^1.0.0
```
Then, run `flutter pub get` to install the package.

## Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:video_player_web_hls/video_player_web_hls.dart';
```
## Step 3: Create a Video Player Instance

Create a `VideoPlayerWebHLS` instance and pass the HLS video URL:
```dart
final videoPlayer = VideoPlayerWebHLS(
  url: 'https://example.com/hls/playlist.m3u8',
);
```
## Step 4: Add the Video Player to Your Widget Tree

Add the `VideoPlayerWebHLS` instance to your widget tree:
```dart
Scaffold(
  appBar: AppBar(
    title: Text('Video Player Web HLS Example'),
  ),
  body: Center(
    child: videoPlayer,
  ),
);
```
## Platform-Specific Details

### Android

No additional setup is required for Android.

### iOS

No additional setup is required for iOS.

## Required Configurations or Optimizations

No additional configurations or optimizations are required.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:video_player_web_hls/video_player_web_hls.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Video Player Web HLS Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final videoPlayer = VideoPlayerWebHLS(
    url: 'https://example.com/hls/playlist.m3u8',
  );

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Video Player Web HLS Example'),
      ),
      body: Center(
        child: videoPlayer,
      ),
    );
  }
}
```

// The application flow is as follows:
// 1. The user runs the app, and the `MyApp` widget is created.
// 2. The `MyApp` widget builds the `MaterialApp` widget, which contains the `MyHomePage` widget.
// 3. The `MyHomePage` widget creates a `VideoPlayerWebHLS` instance and passes the HLS video URL.
// 4. The `VideoPlayerWebHLS` instance is added to the widget tree.
// 5. The `VideoPlayerWebHLS` instance plays the HLS video.

// In summary, the code flows as follows:
// 1. The app is run, and the `MyApp` widget is created.
// 2. The `MyApp` widget builds the `MaterialApp` widget.
// 3. The `MaterialApp` widget contains the `MyHomePage` widget.
// 4. The `MyHomePage` widget creates a `VideoPlayerWebHLS` instance.
// 5. The `VideoPlayerWebHLS` instance plays the HLS video.

<-- END_MAIN -->
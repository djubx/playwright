```markdown
<!-- START_DESCRIPTION -->
# Ezetap SDK Flutter Package

The **ezetap_sdk** Flutter package is designed to facilitate seamless integration with Ezetap's payment processing services. This package allows developers to implement payment solutions in their Flutter applications, enabling users to make transactions easily and securely. 

## When to Use This Package
You should consider using the **ezetap_sdk** package when:
- You are developing a mobile application that requires payment processing capabilities.
- You want to provide a smooth and secure payment experience for your users.
- You are targeting markets where Ezetap is a preferred payment solution.

## Key Features
- **Payment Processing**: Easily handle various payment methods, including card payments and mobile wallets.
- **Transaction Management**: Manage and track transactions directly from your Flutter app.
- **User Authentication**: Securely authenticate users before processing payments.
- **Cross-Platform Support**: Works on both Android and iOS platforms, ensuring a wide reach.

The **ezetap_sdk** package simplifies the integration of payment solutions, making it a valuable tool for developers looking to enhance their applications with payment functionalities.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Setting Up the Ezetap SDK Flutter Package

In this section, we will walk through the setup process for the **ezetap_sdk** package and explain how to use it in your Flutter application.

## Installation

To add the **ezetap_sdk** package to your Flutter project, include it in your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  ezetap_sdk: ^latest_version
```

Make sure to replace `latest_version` with the most recent version available on [pub.dev](https://pub.dev/packages/ezetap_sdk).

## Platform-Specific Configuration

### Android
1. **Permissions**: Ensure you have the necessary permissions in your `AndroidManifest.xml` file:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>
```

2. **Gradle Configuration**: Update your `android/app/build.gradle` file to include the Ezetap SDK dependencies.

### iOS
1. **Info.plist**: Add the required permissions in your `Info.plist` file:

```xml
<key>NSCameraUsageDescription</key>
<string>Camera access is required for scanning cards.</string>
<key>NSLocationWhenInUseUsageDescription</key>
<string>Location access is required for payment processing.</string>
```

2. **CocoaPods**: Ensure you have the necessary CocoaPods installed for iOS.

## Using the Package

Once the package is installed and configured, you can start using it in your Flutter application. Hereâ€™s a basic example of how to initialize the SDK and process a payment.

```dart
import 'package:flutter/material.dart';
import 'package:ezetap_sdk/ezetap_sdk.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Ezetap Payment')),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              // Initialize the Ezetap SDK
              EzetapSdk.initialize('YOUR_API_KEY');
              // Start payment process
              EzetapSdk.startPayment(amount: 100, currency: 'INR');
            },
            child: Text('Pay Now'),
          ),
        ),
      ),
    );
  }
}
```

In this example, we initialize the Ezetap SDK with an API key and start a payment process when the button is pressed.

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of Ezetap SDK in Flutter

Here is a fully functional Flutter main file that demonstrates the key features of the **ezetap_sdk** package.

```dart
import 'package:flutter/material.dart';
import 'package:ezetap_sdk/ezetap_sdk.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Ezetap Payment')),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              // Initialize the Ezetap SDK with your API key
              EzetapSdk.initialize('YOUR_API_KEY');

              // Start the payment process
              EzetapSdk.startPayment(
                amount: 100, // Amount to be paid
                currency: 'INR', // Currency type
              ).then((result) {
                // Handle the payment result
                if (result.success) {
                  // Payment was successful
                  showDialog(
                    context: context,
                    builder: (context) => AlertDialog(
                      title: Text('Payment Successful'),
                      content: Text('Transaction ID: ${result.transactionId}'),
                      actions: [
                        TextButton(
                          onPressed: () => Navigator.of(context).pop(),
                          child: Text('OK'),
                        ),
                      ],
                    ),
                  );
                } else {
                  // Payment failed
                  showDialog(
                    context: context,
                    builder: (context) => AlertDialog(
                      title: Text('Payment Failed'),
                      content: Text('Error: ${result.errorMessage}'),
                      actions: [
                        TextButton(
                          onPressed: () => Navigator.of(context).pop(),
                          child: Text('OK'),
                        ),
                      ],
                    ),
                  );
                }
              });
            },
            child: Text('Pay Now'),
          ),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts and displays a button labeled "Pay Now".
// 2. When the button is pressed, the Ezetap SDK is initialized with the provided API key.
// 3. The payment process is initiated with a specified amount and currency.
// 4. The SDK returns a result indicating whether the payment was successful or failed.
// 5. Based on the result, an appropriate dialog is shown to the user, displaying either the transaction ID or an error message.

```
<!-- END_MAIN -->
``` 

This structured approach provides a comprehensive overview of the **ezetap_sdk** package, guiding developers through its features, setup, and practical usage in a Flutter application.
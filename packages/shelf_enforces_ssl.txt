<-- START_DESCRIPTION -->

# Shelf Enforces SSL Package
================================

The `shelf_enforces_ssl` package is a Flutter package that allows you to enforce SSL/TLS encryption for your Flutter app's HTTP requests. This package is useful when you want to ensure that your app's communication with the server is secure and encrypted.

## When to Use This Package
---------------------------

You should use this package when:

* You want to ensure that your app's HTTP requests are encrypted and secure.
* You want to prevent man-in-the-middle attacks and eavesdropping.
* You want to comply with security regulations and standards.

## Features
------------

* Enforces SSL/TLS encryption for HTTP requests.
* Supports both Android and iOS platforms.
* Easy to use and integrate with your existing Flutter app.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Shelf Enforces SSL Package
===========================================================

## Step 1: Add the Package to Your Pubspec.yaml File
------------------------------------------------

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  shelf_enforces_ssl: ^1.0.0
```
Then, run `flutter pub get` to install the package.

## Step 2: Import the Package in Your Dart File
---------------------------------------------

Import the package in your Dart file:
```dart
import 'package:shelf_enforces_ssl/shelf_enforces_ssl.dart';
```
## Step 3: Create a Shelf Enforces SSL Instance
---------------------------------------------

Create a `ShelfEnforcesSsl` instance:
```dart
final shelfEnforcesSsl = ShelfEnforcesSsl();
```
## Step 4: Use the Shelf Enforces SSL Instance to Make HTTP Requests
----------------------------------------------------------------

Use the `ShelfEnforcesSsl` instance to make HTTP requests:
```dart
final response = await shelfEnforcesSsl.get('https://example.com');
```
## Platform-Specific Details
---------------------------

### Android

On Android, you need to add the following configuration to your `AndroidManifest.xml` file:
```xml
<application
    ...
    android:usesCleartextTraffic="false"
    ...>
</application>
```
This configuration prevents the app from using cleartext traffic.

### iOS

On iOS, you need to add the following configuration to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <false/>
</dict>
```
This configuration prevents the app from loading arbitrary loads.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:shelf_enforces_ssl/shelf_enforces_ssl.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Shelf Enforces SSL Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _shelfEnforcesSsl = ShelfEnforcesSsl();

  Future<void> _makeRequest() async {
    // Make a GET request to the example.com website
    final response = await _shelfEnforcesSsl.get('https://example.com');

    // Print the response status code
    print('Response status code: ${response.statusCode}');

    // Print the response body
    print('Response body: ${response.body}');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Shelf Enforces SSL Demo'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: _makeRequest,
          child: Text('Make Request'),
        ),
      ),
    );
  }
}

// The app starts by creating a Material app with a title and a theme.
// The home page is a stateful widget that creates a ShelfEnforcesSsl instance.
// When the user presses the "Make Request" button, the app makes a GET request to the example.com website using the ShelfEnforcesSsl instance.
// The response status code and body are printed to the console.
// The app uses the ShelfEnforcesSsl package to enforce SSL/TLS encryption for the HTTP request.
// The package is configured to prevent cleartext traffic on Android and to prevent loading arbitrary loads on iOS.
```

<-- END_MAIN -->
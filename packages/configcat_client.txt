<-- START_DESCRIPTION -->

# ConfigCat Client Flutter Package
=====================================

The ConfigCat Client Flutter package is a feature flag management solution for Flutter applications. It allows developers to manage feature flags and settings from a centralized dashboard, making it easier to roll out new features, perform A/B testing, and manage different application configurations.

## When to Use This Package
---------------------------

This package is ideal for applications that require feature flag management, A/B testing, or have different configurations for different environments or user groups.

## Features
------------

*   Feature flag management: Create and manage feature flags from a centralized dashboard.
*   A/B testing: Run A/B tests to determine the effectiveness of new features or changes.
*   Environment-specific configurations: Manage different application configurations for different environments or user groups.
*   Real-time updates: Update feature flags and settings in real-time without requiring application restarts.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

## Setup
--------

To use the ConfigCat Client Flutter package, follow these steps:

1.  Add the package to your `pubspec.yaml` file:

    ```yml
dependencies:
  configcat_client: ^1.0.0
```

2.  Run `flutter pub get` to install the package.

3.  Import the package in your Dart file:

    ```dart
import 'package:configcat_client/configcat_client.dart';
```

## Android-Specific Configuration
---------------------------------

No additional configuration is required for Android.

## iOS-Specific Configuration
-----------------------------

No additional configuration is required for iOS.

## Using the Package
---------------------

To use the package, create a `ConfigCatClient` instance and initialize it with your SDK key:

```dart
final client = ConfigCatClient(
  sdkKey: 'YOUR_SDK_KEY',
  options: ConfigCatOptions(
    pollingMode: PollingMode.autoPoll(),
  ),
);
```

You can then use the client to get feature flag values:

```dart
final bool featureEnabled = await client.getValue('myFeatureFlag', defaultValue: false);
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:configcat_client/configcat_client.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'ConfigCat Client Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _client = ConfigCatClient(
    sdkKey: 'YOUR_SDK_KEY',
    options: ConfigCatOptions(
      pollingMode: PollingMode.autoPoll(),
    ),
  );

  bool _featureEnabled = false;

  @override
  void initState() {
    super.initState();
    _initConfigCatClient();
  }

  Future<void> _initConfigCatClient() async {
    // Initialize the ConfigCat client
    await _client.init();

    // Get the feature flag value
    final bool featureEnabled = await _client.getValue('myFeatureFlag', defaultValue: false);

    // Update the UI with the feature flag value
    setState(() {
      _featureEnabled = featureEnabled;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('ConfigCat Client Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              _featureEnabled ? 'Feature enabled' : 'Feature disabled',
              style: TextStyle(fontSize: 24),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The ConfigCat client is created and initialized with the SDK key.
// 2. The client is used to get the feature flag value.
// 3. The feature flag value is used to update the UI.
// 4. The UI is updated with the feature flag value.
// This demonstrates how the ConfigCat client can be used to manage feature flags and update the UI in real-time.

// The application uses the ConfigCat client to manage feature flags and update the UI in real-time.
// The client is initialized with the SDK key and used to get the feature flag value.
// The feature flag value is then used to update the UI.
// This demonstrates how the ConfigCat client can be used to manage feature flags and update the UI in real-time.
```

<-- END_MAIN -->
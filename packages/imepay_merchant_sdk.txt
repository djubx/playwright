```markdown
<!-- START_DESCRIPTION -->
# Overview of the imepay_merchant_sdk Flutter Package

The `imepay_merchant_sdk` is a Flutter package designed to facilitate seamless payment processing for merchants. It provides a robust set of features that enable developers to integrate payment functionalities into their Flutter applications easily. This package is particularly useful for businesses looking to accept payments through various methods, including credit/debit cards, mobile wallets, and more.

## When to Use This Package
- **E-commerce Applications**: If you are building an online store and need to handle transactions securely.
- **Service-Based Apps**: For applications that require payment for services rendered, such as booking platforms.
- **Subscription Services**: If your app offers subscription-based services, this package can help manage recurring payments.

## Key Features
- **Multiple Payment Methods**: Supports various payment options, including cards and wallets.
- **Secure Transactions**: Implements industry-standard security measures to protect sensitive data.
- **User-Friendly Interface**: Provides a simple and intuitive UI for payment processing.
- **Real-time Transaction Updates**: Allows merchants to receive instant notifications about transaction statuses.

Overall, the `imepay_merchant_sdk` package is an essential tool for Flutter developers looking to implement payment solutions in their applications efficiently.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using imepay_merchant_sdk

## Installation
To get started with the `imepay_merchant_sdk`, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  imepay_merchant_sdk: ^latest_version
```

Make sure to replace `latest_version` with the most recent version available on [pub.dev](https://pub.dev/packages/imepay_merchant_sdk).

## Platform-Specific Configuration

### Android
1. **Update AndroidManifest.xml**: Add the necessary permissions and metadata in your `AndroidManifest.xml` file:

```xml
<manifest>
    <uses-permission android:name="android.permission.INTERNET"/>
    <application>
        <meta-data
            android:name="IMEPAY_MERCHANT_KEY"
            android:value="YOUR_MERCHANT_KEY"/>
    </application>
</manifest>
```

2. **Gradle Configuration**: Ensure your `build.gradle` file includes the required dependencies.

### iOS
1. **Update Info.plist**: Add the following keys to your `Info.plist` file:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

2. **CocoaPods**: Make sure to run `pod install` in the `ios` directory after adding the package.

## Basic Usage
To use the `imepay_merchant_sdk`, you will need to initialize it and create a payment request. Hereâ€™s a simple example:

```dart
import 'package:flutter/material.dart';
import 'package:imepay_merchant_sdk/imepay_merchant_sdk.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('IMEPay Merchant SDK Example')),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              // Initialize the payment process
              initiatePayment();
            },
            child: Text('Pay Now'),
          ),
        ),
      ),
    );
  }

  void initiatePayment() {
    // Create a payment request
    final paymentRequest = PaymentRequest(
      amount: 100.0,
      currency: 'INR',
      merchantId: 'YOUR_MERCHANT_ID',
      orderId: 'ORDER_ID',
    );

    // Start the payment process
    IMEPayMerchantSdk.startPayment(paymentRequest).then((result) {
      // Handle the payment result
      if (result.isSuccess) {
        print('Payment Successful: ${result.transactionId}');
      } else {
        print('Payment Failed: ${result.errorMessage}');
      }
    });
  }
}
```

This code initializes the payment process when the user clicks the "Pay Now" button, creating a payment request and handling the result accordingly.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of imepay_merchant_sdk

```dart
import 'package:flutter/material.dart';
import 'package:imepay_merchant_sdk/imepay_merchant_sdk.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('IMEPay Merchant SDK Example')),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              // Step 1: Initiate the payment process when the button is pressed
              initiatePayment();
            },
            child: Text('Pay Now'),
          ),
        ),
      ),
    );
  }

  void initiatePayment() {
    // Step 2: Create a payment request with necessary details
    final paymentRequest = PaymentRequest(
      amount: 100.0, // Amount to be paid
      currency: 'INR', // Currency type
      merchantId: 'YOUR_MERCHANT_ID', // Your merchant ID
      orderId: 'ORDER_ID', // Unique order ID
    );

    // Step 3: Start the payment process using the IMEPay SDK
    IMEPayMerchantSdk.startPayment(paymentRequest).then((result) {
      // Step 4: Handle the payment result
      if (result.isSuccess) {
        // Payment was successful
        print('Payment Successful: ${result.transactionId}');
      } else {
        // Payment failed, handle the error
        print('Payment Failed: ${result.errorMessage}');
      }
    });
  }
}

// Application Flow Explanation:
// 1. The app displays a button labeled "Pay Now".
// 2. When the button is pressed, the `initiatePayment` function is called.
// 3. A `PaymentRequest` object is created with the payment details.
// 4. The `startPayment` method of `IMEPayMerchantSdk` is called to initiate the payment process.
// 5. The result of the payment is handled in the `then` callback, where it checks if the payment was successful or failed.
// 6. If successful, it prints the transaction ID; if failed, it prints the error message.
```
<!-- END_MAIN -->
```

This structured blog post provides a comprehensive overview of the `imepay_merchant_sdk` package, guiding developers through its features, setup, and usage with clear examples and explanations.
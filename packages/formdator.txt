<-- START_DESCRIPTION -->

# Formdator Flutter Package
The Formdator Flutter package is a powerful tool for managing forms in Flutter applications. It provides a simple and efficient way to handle form data, validate user input, and perform asynchronous operations. With Formdator, you can easily create complex forms with multiple fields, validate user input, and submit the form data to a server or database.

## When to Use Formdator
Formdator is ideal for any Flutter application that requires complex form management. It is particularly useful for applications that require:

* Multiple form fields with different data types (e.g., text, email, password, date, etc.)
* Validation of user input (e.g., checking for empty fields, invalid email addresses, etc.)
* Asynchronous operations (e.g., submitting form data to a server or database)

## Features
Formdator provides a range of features to make form management easy and efficient. Some of its key features include:

* Simple and intuitive API for creating and managing forms
* Support for multiple form fields with different data types
* Built-in validation for common data types (e.g., email, password, date, etc.)
* Support for custom validation rules
* Asynchronous operation support for submitting form data

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up Formdator
To use Formdator in your Flutter application, you need to add it to your project's `pubspec.yaml` file. Here's how:

1. Open your project's `pubspec.yaml` file and add the following line to the `dependencies` section:
```yml
dependencies:
  flutter:
    sdk: flutter
  formdator: ^1.0.0
```
2. Run `flutter pub get` in your terminal to install the Formdator package.

## Using Formdator
To use Formdator, you need to create a `Formdator` instance and pass it a `Form` widget. Here's an example:
```dart
import 'package:flutter/material.dart';
import 'package:formdator/formdator.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final _formKey = GlobalKey<FormState>();
  final _formdator = Formdator();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Formdator Example'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              TextFormField(
                decoration: InputDecoration(
                  labelText: 'Email',
                ),
                validator: _formdator.emailValidator,
              ),
              TextFormField(
                decoration: InputDecoration(
                  labelText: 'Password',
                ),
                validator: _formdator.passwordValidator,
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  if (_formKey.currentState.validate()) {
                    // Submit the form data
                  }
                },
                child: Text('Submit'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
```
In this example, we create a `Formdator` instance and pass it to the `Form` widget. We then define two `TextFormField` widgets with email and password validators. When the user submits the form, we check if the form is valid using the `_formKey.currentState.validate()` method. If the form is valid, we can submit the form data.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:formdator/formdator.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final _formKey = GlobalKey<FormState>();
  final _formdator = Formdator();

  // Step 1: Create a Formdator instance
  @override
  void initState() {
    super.initState();
    _formdator.init();
  }

  // Step 2: Define the form fields
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Formdator Example'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              // Step 3: Define the email field
              TextFormField(
                decoration: InputDecoration(
                  labelText: 'Email',
                ),
                validator: _formdator.emailValidator,
              ),
              // Step 4: Define the password field
              TextFormField(
                decoration: InputDecoration(
                  labelText: 'Password',
                ),
                validator: _formdator.passwordValidator,
              ),
              SizedBox(height: 20),
              // Step 5: Define the submit button
              ElevatedButton(
                onPressed: () {
                  // Step 6: Validate the form
                  if (_formKey.currentState.validate()) {
                    // Step 7: Submit the form data
                    _formdator.submit();
                  }
                },
                child: Text('Submit'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow:
// 1. The user opens the app and is presented with a form.
// 2. The user enters their email and password.
// 3. The user submits the form.
// 4. The form is validated using the Formdator instance.
// 5. If the form is valid, the form data is submitted.
// 6. The user is presented with a success message.
```

// The final summary:
// The code flows as follows:
// 1. The user is presented with a form.
// 2. The user enters their email and password.
// 3. The user submits the form.
// 4. The form is validated using the Formdator instance.
// 5. If the form is valid, the form data is submitted.
// 6. The user is presented with a success message.

<-- END_MAIN -->
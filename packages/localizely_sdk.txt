Here's a detailed technical blog on the `localizely_sdk` Flutter package, structured as requested.

<!-- START_DESCRIPTION -->
# Localizely SDK Flutter Package

The `localizely_sdk` is a powerful Flutter package designed to facilitate localization and internationalization in Flutter applications. It provides developers with a seamless way to manage translations and adapt their apps for different languages and regions. This package is particularly useful for applications targeting a global audience, as it simplifies the process of integrating multiple languages and ensures that the user experience is consistent across different locales.

## When to Use This Package

You should consider using the `localizely_sdk` package when:
- You are developing a Flutter application that needs to support multiple languages.
- You want to manage translations efficiently without hardcoding strings in your application.
- You need to dynamically update translations without requiring a new app build.

## Key Features

- **Easy Integration**: The package can be easily integrated into existing Flutter applications.
- **Dynamic Updates**: Supports fetching translations from the Localizely platform, allowing for real-time updates.
- **Automatic Language Detection**: Automatically detects the user's device language and applies the appropriate translations.
- **Support for Pluralization**: Handles plural forms and gender variations in translations.
- **Customizable Fallbacks**: Allows developers to set fallback languages in case a translation is missing.

By leveraging the `localizely_sdk`, developers can enhance their applications' accessibility and usability for a diverse user base.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Localizely SDK

In this tutorial, we will walk through the setup process for the `localizely_sdk` package and demonstrate how to use it in a Flutter application.

## Step 1: Adding the Dependency

To get started, add the `localizely_sdk` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  localizely_sdk: ^1.0.0  # Check for the latest version on pub.dev
```

Run `flutter pub get` to install the package.

## Step 2: Platform-Specific Configuration

### Android Configuration

1. Open `android/app/build.gradle` and ensure that you have the following configurations:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21 // Ensure this is set to at least 21
    }
}
```

2. Add the necessary permissions in `AndroidManifest.xml`:

```xml
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.yourapp">
    <application
        ...
        android:usesCleartextTraffic="true"> <!-- If using HTTP -->
        ...
    </application>
</manifest>
```

### iOS Configuration

1. Open `ios/Runner/Info.plist` and add the following:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

2. Ensure your deployment target is set to at least iOS 10.0 in `ios/Podfile`:

```ruby
platform :ios, '10.0'
```

## Step 3: Initializing the SDK

In your main Dart file, initialize the Localizely SDK. Hereâ€™s how to do it:

```dart
import 'package:flutter/material.dart';
import 'package:localizely_sdk/localizely_sdk.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Initialize Localizely SDK
    LocalizelySdk.initialize(
      projectId: 'YOUR_PROJECT_ID', // Replace with your Localizely project ID
      apiKey: 'YOUR_API_KEY', // Replace with your Localizely API key
    );

    return MaterialApp(
      title: 'Localizely SDK Demo',
      home: HomeScreen(),
    );
  }
}
```

## Step 4: Using Translations

To use translations in your widgets, you can call the `LocalizelySdk.translate` method:

```dart
class HomeScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(LocalizelySdk.translate('app_title')),
      ),
      body: Center(
        child: Text(LocalizelySdk.translate('welcome_message')),
      ),
    );
  }
}
```

## Step 5: Testing Your Application

Run your application on an emulator or physical device. Ensure that the device language is set to one of the languages you have translations for. The app should display the appropriate translations based on the device's language settings.

By following these steps, you can successfully integrate and use the `localizely_sdk` package in your Flutter application.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Localizely SDK in Flutter

```dart
import 'package:flutter/material.dart';
import 'package:localizely_sdk/localizely_sdk.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Initialize Localizely SDK with your project ID and API key
    LocalizelySdk.initialize(
      projectId: 'YOUR_PROJECT_ID', // Replace with your Localizely project ID
      apiKey: 'YOUR_API_KEY', // Replace with your Localizely API key
    );

    return MaterialApp(
      title: 'Localizely SDK Demo',
      home: HomeScreen(),
    );
  }
}

class HomeScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(LocalizelySdk.translate('app_title')), // Translated app title
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(LocalizelySdk.translate('welcome_message')), // Translated welcome message
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                // Change language to Spanish
                LocalizelySdk.setLanguage('es');
              },
              child: Text(LocalizelySdk.translate('change_language')), // Button to change language
            ),
          ],
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the MyApp widget.
// 2. MyApp initializes the Localizely SDK with the project ID and API key.
// 3. The MaterialApp widget is created, setting the home to HomeScreen.
// 4. In HomeScreen, the AppBar displays the translated app title.
// 5. The body contains a centered column with a welcome message and a button.
// 6. Pressing the button changes the app's language to Spanish using LocalizelySdk.setLanguage.
// 7. The app dynamically updates the displayed text based on the selected language.
```

<!-- END_MAIN -->

In this blog, we covered the `localizely_sdk` Flutter package, including its description, setup tutorial, and a complete example. By following the steps outlined, developers can easily integrate localization into their Flutter applications, enhancing accessibility and user experience for a global audience.
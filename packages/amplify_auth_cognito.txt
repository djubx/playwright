```markdown
<-- START_DESCRIPTION -->

# Amplify Auth Cognito Flutter Package

The `amplify_auth_cognito` Flutter package is a part of the Amplify Framework, which provides a set of libraries, tools, and services to help developers build scalable and secure cloud-powered applications. This package specifically focuses on authentication using Amazon Cognito, a service that provides user sign-up, sign-in, and access control.

## When to Use `amplify_auth_cognito`

This package is ideal for Flutter developers who need to implement authentication features in their applications. It is particularly useful when:
- You want to leverage AWS's robust security features.
- You need to manage user authentication and authorization seamlessly.
- You are building applications that require user sign-up, sign-in, and password recovery functionalities.

## Features

- **User Sign-Up and Sign-In**: Easily integrate user registration and login functionalities.
- **Multi-Factor Authentication (MFA)**: Enhance security with optional MFA.
- **Password Recovery**: Allow users to reset their passwords securely.
- **Social Sign-In**: Support for social identity providers like Google, Facebook, etc.
- **Session Management**: Automatically manage user sessions and tokens.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up `amplify_auth_cognito` in Flutter

In this tutorial, we will walk through the process of setting up the `amplify_auth_cognito` package in a Flutter application. We will cover platform-specific configurations for both Android and iOS.

## Prerequisites

- Flutter SDK installed on your machine.
- An AWS account with Cognito User Pool configured.

## Step 1: Add Dependencies

Add the following dependencies to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  amplify_flutter: ^0.3.0
  amplify_auth_cognito: ^0.3.0
```

## Step 2: Configure Amplify

Create a file named `amplifyconfiguration.dart` in your `lib` directory and add your Amplify configuration details. This file should contain your Cognito User Pool and Identity Pool details.

## Step 3: Initialize Amplify

In your `main.dart` file, initialize Amplify before running the app:

```dart
import 'package:flutter/material.dart';
import 'package:amplify_flutter/amplify.dart';
import 'package:amplify_auth_cognito/amplify_auth_cognito.dart';
import 'amplifyconfiguration.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: AuthExample(),
    );
  }
}

class AuthExample extends StatefulWidget {
  @override
  _AuthExampleState createState() => _AuthExampleState();
}

class _AuthExampleState extends State<AuthExample> {
  @override
  void initState() {
    super.initState();
    _configureAmplify();
  }

  void _configureAmplify() async {
    try {
      Amplify.addPlugin(AmplifyAuthCognito());
      await Amplify.configure(amplifyconfig);
      print('Successfully configured Amplify');
    } catch (e) {
      print('Could not configure Amplify: $e');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Amplify Auth Example')),
      body: Center(child: Text('Welcome to Amplify Auth')),
    );
  }
}
```

## Step 4: Platform-Specific Configurations

### Android

1. Update `android/app/build.gradle` to include the necessary dependencies for AWS services.
2. Ensure that your `minSdkVersion` is set to at least 21.

### iOS

1. Update your `ios/Podfile` to use frameworks and ensure the platform is set to iOS 11.0 or higher.
2. Run `pod install` in the `ios` directory to install the necessary pods.

<-- END_TUTORIAL -->

<-- MAIN -->

# Complete Example: Flutter Main File with `amplify_auth_cognito`

Below is a complete example of a Flutter application using the `amplify_auth_cognito` package. This example demonstrates user sign-up, sign-in, and sign-out functionalities.

```dart
import 'package:flutter/material.dart';
import 'package:amplify_flutter/amplify.dart';
import 'package:amplify_auth_cognito/amplify_auth_cognito.dart';
import 'amplifyconfiguration.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: AuthExample(),
    );
  }
}

class AuthExample extends StatefulWidget {
  @override
  _AuthExampleState createState() => _AuthExampleState();
}

class _AuthExampleState extends State<AuthExample> {
  @override
  void initState() {
    super.initState();
    _configureAmplify();
  }

  void _configureAmplify() async {
    try {
      Amplify.addPlugin(AmplifyAuthCognito());
      await Amplify.configure(amplifyconfig);
      print('Successfully configured Amplify');
    } catch (e) {
      print('Could not configure Amplify: $e');
    }
  }

  Future<void> _signUp() async {
    try {
      SignUpResult res = await Amplify.Auth.signUp(
        username: 'testuser',
        password: 'Password123!',
        options: CognitoSignUpOptions(userAttributes: {
          'email': 'testuser@example.com',
        }),
      );
      print('Sign up result: ${res.isSignUpComplete}');
    } catch (e) {
      print('Sign up failed: $e');
    }
  }

  Future<void> _signIn() async {
    try {
      SignInResult res = await Amplify.Auth.signIn(
        username: 'testuser',
        password: 'Password123!',
      );
      print('Sign in result: ${res.isSignedIn}');
    } catch (e) {
      print('Sign in failed: $e');
    }
  }

  Future<void> _signOut() async {
    try {
      await Amplify.Auth.signOut();
      print('Signed out');
    } catch (e) {
      print('Sign out failed: $e');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Amplify Auth Example')),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: _signUp,
              child: Text('Sign Up'),
            ),
            ElevatedButton(
              onPressed: _signIn,
              child: Text('Sign In'),
            ),
            ElevatedButton(
              onPressed: _signOut,
              child: Text('Sign Out'),
            ),
          ],
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app initializes and configures Amplify in the `initState` method of `_AuthExampleState`.
// 2. Three buttons are provided for user actions: Sign Up, Sign In, and Sign Out.
// 3. `_signUp` method is called when the "Sign Up" button is pressed, registering a new user.
// 4. `_signIn` method is called when the "Sign In" button is pressed, logging in the user.
// 5. `_signOut` method is called when the "Sign Out" button is pressed, logging out the user.
// 6. Each method prints the result of the operation to the console for debugging purposes.
```

<-- END_MAIN -->
```
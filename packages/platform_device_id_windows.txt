<-- START_DESCRIPTION -->

# platform_device_id_windows Flutter Package
=============================================

The `platform_device_id_windows` Flutter package provides a simple way to retrieve the device ID on Windows platforms. This package is useful when you need to uniquely identify a device, such as for authentication or analytics purposes.

### Features

* Retrieves the device ID on Windows platforms
* Easy to use and integrate into your Flutter app

### When to Use

* When you need to uniquely identify a device for authentication or analytics purposes
* When you need to retrieve the device ID on Windows platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
------------------

### Step 1: Add the Package to Your pubspec.yaml File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  platform_device_id_windows: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:platform_device_id_windows/platform_device_id_windows.dart';
```
### Step 3: Retrieve the Device ID

Use the `getDeviceId()` method to retrieve the device ID:
```dart
String deviceId = await PlatformDeviceIdWindows.getDeviceId();
```
Note: This method returns a `Future`, so you need to use `await` to wait for the result.

### Platform-Specific Details

* On Windows, this package uses the `GetComputerNameEx` function to retrieve the device ID.
* On Android and iOS, this package is not applicable, as there are separate packages available for those platforms.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:platform_device_id_windows/platform_device_id_windows.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Platform Device ID Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  String _deviceId = '';

  @override
  void initState() {
    super.initState();
    _getDeviceId();
  }

  Future<void> _getDeviceId() async {
    // Use the getDeviceId() method to retrieve the device ID
    String deviceId = await PlatformDeviceIdWindows.getDeviceId();
    setState(() {
      _deviceId = deviceId;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Platform Device ID Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Device ID:',
              style: TextStyle(fontSize: 24),
            ),
            Text(
              _deviceId,
              style: TextStyle(fontSize: 24),
            ),
          ],
        ),
      ),
    );
  }
}

// Application flow:
// 1. The app starts and runs the main() function.
// 2. The main() function creates a new instance of the MyApp widget.
// 3. The MyApp widget builds the app's UI, including the MyHomePage widget.
// 4. The MyHomePage widget retrieves the device ID using the _getDeviceId() method.
// 5. The _getDeviceId() method uses the PlatformDeviceIdWindows.getDeviceId() method to retrieve the device ID.
// 6. The device ID is stored in the _deviceId variable and displayed on the screen.
// 7. The app updates the UI to display the device ID.

// Final summary:
// This code demonstrates how to use the platform_device_id_windows package to retrieve the device ID on Windows platforms.
// The app uses the getDeviceId() method to retrieve the device ID and displays it on the screen.
```

<-- END_MAIN -->
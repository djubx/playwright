```markdown
<!-- START_DESCRIPTION -->
# Flutter Reaction Button Package

The `flutter_reaction_button` package is a versatile Flutter widget that allows developers to create interactive reaction buttons, similar to those found on social media platforms. This package enhances user engagement by enabling users to express their feelings or reactions to content with a simple tap.

## When to Use This Package

You might consider using the `flutter_reaction_button` package in scenarios such as:
- **Social Media Applications**: To allow users to react to posts, comments, or messages.
- **Feedback Mechanisms**: To gather user feedback on various features or content.
- **Interactive Content**: To create engaging quizzes or polls where users can express their opinions.

## Features

- **Customizable Reactions**: You can define your own set of reactions, including icons and colors.
- **Animation Support**: The package provides smooth animations for button interactions, enhancing the user experience.
- **Easy Integration**: It can be easily integrated into existing Flutter applications with minimal setup.

Overall, the `flutter_reaction_button` package is a powerful tool for enhancing user interaction in Flutter applications, making it a great addition to any developer's toolkit.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Flutter Reaction Button Package

## Step 1: Adding the Dependency

To get started, you need to add the `flutter_reaction_button` package to your `pubspec.yaml` file. Open your `pubspec.yaml` and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  flutter_reaction_button: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command in your terminal to install it:

```bash
flutter pub get
```

## Step 2: Platform-Specific Configuration

### Android

For Android, ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

### iOS

For iOS, you may need to update your `ios/Podfile` to ensure compatibility with the latest iOS versions. Make sure to set the platform version:

```ruby
platform :ios, '10.0'
```

## Step 3: Using the Package

Now that you have set up the package, you can start using it in your Flutter application. Below is a simple example of how to implement the `flutter_reaction_button` in your app.

1. Import the package in your Dart file:

```dart
import 'package:flutter_reaction_button/flutter_reaction_button.dart';
```

2. Create a widget that uses the `ReactionButton`:

```dart
class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Reaction Button Example')),
      body: Center(
        child: ReactionButton(
          reactions: [
            Reaction(
              icon: Icon(Icons.thumb_up, color: Colors.blue),
              title: Text('Like'),
            ),
            Reaction(
              icon: Icon(Icons.favorite, color: Colors.red),
              title: Text('Love'),
            ),
            Reaction(
              icon: Icon(Icons.sentiment_satisfied, color: Colors.yellow),
              title: Text('Haha'),
            ),
          ],
          onReactionChanged: (reaction) {
            // Handle the reaction change
            print('User selected: ${reaction.title}');
          },
        ),
      ),
    );
  }
}
```

This code sets up a simple reaction button with three reactions: Like, Love, and Haha. The `onReactionChanged` callback is triggered when a user selects a reaction.

With these steps, you can easily integrate the `flutter_reaction_button` package into your Flutter application and start enhancing user interactions.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using the Flutter Reaction Button Package

```dart
import 'package:flutter/material.dart';
import 'package:flutter_reaction_button/flutter_reaction_button.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Reaction Button Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Reaction Button Example')),
      body: Center(
        child: ReactionButton(
          reactions: [
            // Define the reactions with icons and titles
            Reaction(
              icon: Icon(Icons.thumb_up, color: Colors.blue),
              title: Text('Like'),
            ),
            Reaction(
              icon: Icon(Icons.favorite, color: Colors.red),
              title: Text('Love'),
            ),
            Reaction(
              icon: Icon(Icons.sentiment_satisfied, color: Colors.yellow),
              title: Text('Haha'),
            ),
          ],
          onReactionChanged: (reaction) {
            // This callback is triggered when a reaction is selected
            print('User selected: ${reaction.title}');
          },
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function initializes the app by calling runApp with MyApp.
// 2. MyApp sets up the MaterialApp with a title and theme, and specifies RealFlutter as the home widget.
// 3. RealFlutter builds a Scaffold with an AppBar and a centered ReactionButton.
// 4. The ReactionButton is configured with three reactions: Like, Love, and Haha, each with an icon and title.
// 5. When a user taps on a reaction, the onReactionChanged callback is triggered, printing the selected reaction's title to the console.
```
<!-- END_MAIN -->
``` 

This structured blog provides a comprehensive overview of the `flutter_reaction_button` package, guiding users through its setup, usage, and a complete example with detailed comments explaining the application flow.
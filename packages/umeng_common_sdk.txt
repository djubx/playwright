```markdown
<!-- START_DESCRIPTION -->
# Umeng Common SDK Flutter Package

The `umeng_common_sdk` Flutter package is a powerful tool designed for integrating Umeng's analytics and reporting capabilities into Flutter applications. Umeng is a popular analytics platform in China, providing developers with insights into user behavior, app performance, and marketing effectiveness. This package allows Flutter developers to leverage Umeng's features seamlessly, making it easier to track events, user statistics, and more.

## When to Use This Package
- **Analytics Tracking**: If you need to track user interactions and events within your app.
- **User Engagement**: To analyze user behavior and improve engagement strategies.
- **Performance Monitoring**: To monitor app performance and identify areas for improvement.

## Key Features
- **Event Tracking**: Easily log custom events to understand user interactions.
- **User Statistics**: Gain insights into user demographics and behavior.
- **Crash Reporting**: Automatically report crashes and exceptions to help improve app stability.
- **Multi-Platform Support**: Works on both Android and iOS, providing a unified API for analytics.

Overall, the `umeng_common_sdk` package is an essential tool for developers looking to enhance their app's analytics capabilities and gain valuable insights into user behavior.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Setting Up and Using the Umeng Common SDK

In this section, we will walk through the setup process for the `umeng_common_sdk` package and explain how to use it effectively in your Flutter application.

## Installation

To add the `umeng_common_sdk` package to your Flutter project, include it in your `pubspec.yaml` file:

```yaml
dependencies:
  umeng_common_sdk: ^latest_version
```

Run `flutter pub get` to install the package.

## Platform-Specific Setup

### Android Configuration
1. **Add Permissions**: Open your `AndroidManifest.xml` file and add the following permissions:

   ```xml
   <uses-permission android:name="android.permission.INTERNET"/>
   <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>
   ```

2. **Initialize SDK**: In your `MainActivity.java` or `MainActivity.kt`, initialize the Umeng SDK in the `onCreate` method:

   ```java
   import io.flutter.embedding.android.FlutterActivity;
   import com.umeng.analytics.MobclickAgent;

   public class MainActivity extends FlutterActivity {
       @Override
       protected void onCreate(Bundle savedInstanceState) {
           super.onCreate(savedInstanceState);
           MobclickAgent.setScenarioType(this, MobclickAgent.EScenarioType.E_UM_NORMAL);
           MobclickAgent.openActivityDurationTrack(false);
       }
   }
   ```

### iOS Configuration
1. **Add Permissions**: Open your `Info.plist` file and add the following:

   ```xml
   <key>NSAppTransportSecurity</key>
   <dict>
       <key>NSAllowsArbitraryLoads</key>
       <true/>
   </dict>
   ```

2. **Initialize SDK**: In your `AppDelegate.swift`, initialize the Umeng SDK:

   ```swift
   import UIKit
   import Flutter
   import UMCommon

   @UIApplicationMain
   class AppDelegate: FlutterAppDelegate {
       override func application(
           _ application: UIApplication,
           didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?
       ) -> Bool {
           UMConfigure.initWithAppkey("YOUR_APP_KEY", channel: "App Store")
           return super.application(application, didFinishLaunchingWithOptions: launchOptions)
       }
   }
   ```

## Using the Package

Once the package is installed and configured, you can start using it in your Flutter application. Hereâ€™s how to log an event:

```dart
import 'package:flutter/material.dart';
import 'package:umeng_common_sdk/umeng_common_sdk.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Umeng SDK Example')),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              // Log a custom event
              UmengCommonSdk.onEvent("button_clicked");
            },
            child: Text('Click Me'),
          ),
        ),
      ),
    );
  }
}
```

In this example, when the button is clicked, the event "button_clicked" is logged to Umeng.

With this setup, you can now track user interactions and gain insights into your app's performance.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using Umeng Common SDK

```dart
import 'package:flutter/material.dart';
import 'package:umeng_common_sdk/umeng_common_sdk.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Umeng SDK Example')),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              // Log a custom event when the button is clicked
              UmengCommonSdk.onEvent("button_clicked");
            },
            child: Text('Click Me'),
          ),
        ),
      ),
    );
  }
}

void main() {
  // Initialize the Umeng SDK before running the app
  WidgetsFlutterBinding.ensureInitialized();
  UmengCommonSdk.init("YOUR_APP_KEY"); // Replace with your actual app key
  runApp(RealFlutter());
}

/*
Application Flow Explanation:
1. The main function is the entry point of the application.
2. It initializes the Umeng SDK with the provided app key.
3. The RealFlutter widget is created, which builds the main UI of the app.
4. The UI consists of a Scaffold with an AppBar and a Center widget containing a button.
5. When the button is clicked, the onPressed callback is triggered, logging the "button_clicked" event to Umeng.
6. This allows you to track user interactions and analyze them through the Umeng analytics dashboard.
*/
```
<!-- END_MAIN -->
```

### Summary
In this blog post, we explored the `umeng_common_sdk` Flutter package, detailing its features, setup process, and usage. We provided a complete example demonstrating how to log events and initialize the SDK. This package is particularly useful for developers looking to integrate robust analytics into their Flutter applications, especially for the Chinese market. By following the steps outlined, you can effectively track user interactions and gain valuable insights into your app's performance.
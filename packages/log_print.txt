<-- START_DESCRIPTION -->
### Log Print Flutter Package
The `log_print` Flutter package is a utility library that allows developers to print log messages in a more structured and readable way. It provides a simple and easy-to-use API for logging messages at different levels, such as debug, info, warning, and error.

#### When to Use
This package is useful when you want to add logging capabilities to your Flutter app, especially during development and testing phases. It can help you identify and diagnose issues, track app behavior, and improve overall app performance.

#### Features

*   Supports different log levels: debug, info, warning, and error
*   Customizable log message format
*   Supports logging to console, file, or both
*   Can be used with other logging libraries or frameworks

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->
### Setting Up and Using Log Print

#### Step 1: Add the Package to Your Project

Add the `log_print` package to your `pubspec.yaml` file:

```yml
dependencies:
  log_print: ^1.0.0
```

Then, run `flutter pub get` to install the package.

#### Step 2: Import the Package

Import the `log_print` package in your Dart file:

```dart
import 'package:log_print/log_print.dart';
```

#### Step 3: Configure the Logger

Configure the logger by setting the log level and output:

```dart
void main() {
  LogPrint.config(
    level: LogLevel.debug,
    output: LogOutput.both,
  );
  runApp(MyApp());
}
```

#### Step 4: Log Messages

Log messages using the `LogPrint` class:

```dart
class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  void initState() {
    super.initState();
    LogPrint.debug('This is a debug message');
    LogPrint.info('This is an info message');
    LogPrint.warning('This is a warning message');
    LogPrint.error('This is an error message');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Log Print Example'),
      ),
      body: Center(
        child: Text('Log Print Example'),
      ),
    );
  }
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->
```dart
import 'package:flutter/material.dart';
import 'package:log_print/log_print.dart';

void main() {
  // Configure the logger
  LogPrint.config(
    level: LogLevel.debug,
    output: LogOutput.both,
  );
  
  // Run the app
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Log Print Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  void initState() {
    super.initState();
    
    // Log messages
    LogPrint.debug('This is a debug message');
    LogPrint.info('This is an info message');
    LogPrint.warning('This is a warning message');
    LogPrint.error('This is an error message');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Log Print Example'),
      ),
      body: Center(
        child: Text('Log Print Example'),
      ),
    );
  }
}

// The app starts by configuring the logger with the debug level and both console and file output.
// Then, it runs the app with the RealFlutter widget as the home screen.
// In the RealFlutter widget, it logs messages at different levels in the initState method.
// Finally, it builds the UI with a scaffold and a text widget.
// The log messages are printed to the console and written to a file.
```
<-- END_MAIN -->
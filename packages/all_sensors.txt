<-- START_DESCRIPTION -->

# All Sensors Flutter Package
The `all_sensors` Flutter package provides a simple and efficient way to access various device sensors, including accelerometer, gyroscope, magnetometer, and more. This package is ideal for applications that require real-time sensor data, such as games, fitness trackers, and augmented reality experiences.

## Features
* Supports multiple sensors: accelerometer, gyroscope, magnetometer, barometer, and proximity sensor
* Provides real-time sensor data
* Easy to use and integrate into existing Flutter projects
* Works on both Android and iOS platforms

## When to Use
Use the `all_sensors` package when you need to access device sensor data in your Flutter application. This package is particularly useful for applications that require real-time sensor data, such as:

* Games that use device motion for input
* Fitness trackers that monitor user activity
* Augmented reality experiences that use device sensors for tracking

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the All Sensors Package
To use the `all_sensors` package in your Flutter project, follow these steps:

### Step 1: Add the Package to Your Project
Add the `all_sensors` package to your `pubspec.yaml` file:
```yml
dependencies:
  all_sensors: ^2.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package
Import the `all_sensors` package in your Dart file:
```dart
import 'package:all_sensors/all_sensors.dart';
```
### Step 3: Request Sensor Permissions
Request the necessary sensor permissions for your application. For Android, add the following permissions to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
<uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
```
For iOS, add the following permissions to your `Info.plist` file:
```xml
<key>NSLocationWhenInUseUsageDescription</key>
<string>This app needs access to location to work properly</string>
<key>NSLocationAlwaysAndWhenInUseUsageDescription</key>
<string>This app needs access to location to work properly</string>
```
### Step 4: Initialize the Sensors
Initialize the sensors in your Dart file:
```dart
import 'package:all_sensors/all_sensors.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  void initState() {
    super.initState();
    _initSensors();
  }

  void _initSensors() async {
    await AllSensors.init();
  }
}
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:all_sensors/all_sensors.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'All Sensors Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Step 1: Initialize the sensors
  void _initSensors() async {
    await AllSensors.init();
  }

  // Step 2: Get the sensor data
  void _getSensorData() async {
    final accelerometerData = await AllSensors.getAccelerometerData();
    final gyroscopeData = await AllSensors.getGyroscopeData();
    final magnetometerData = await AllSensors.getMagnetometerData();
    final barometerData = await AllSensors.getBarometerData();
    final proximityData = await AllSensors.getProximityData();

    // Step 3: Display the sensor data
    setState(() {
      _accelerometerText = 'Accelerometer: $accelerometerData';
      _gyroscopeText = 'Gyroscope: $gyroscopeData';
      _magnetometerText = 'Magnetometer: $magnetometerData';
      _barometerText = 'Barometer: $barometerData';
      _proximityText = 'Proximity: $proximityData';
    });
  }

  String _accelerometerText = '';
  String _gyroscopeText = '';
  String _magnetometerText = '';
  String _barometerText = '';
  String _proximityText = '';

  @override
  void initState() {
    super.initState();
    _initSensors();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('All Sensors Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(_accelerometerText),
            Text(_gyroscopeText),
            Text(_magnetometerText),
            Text(_barometerText),
            Text(_proximityText),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _getSensorData,
              child: Text('Get Sensor Data'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and the sensors are initialized.
// 2. The user clicks the "Get Sensor Data" button.
// 3. The app retrieves the sensor data from the device.
// 4. The app displays the sensor data on the screen.
// 5. The user can repeat steps 2-4 to retrieve and display new sensor data.
```

<-- END_MAIN -->
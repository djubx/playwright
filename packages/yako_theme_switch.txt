<-- START_DESCRIPTION -->

# yako_theme_switch Flutter Package
=====================================

The `yako_theme_switch` Flutter package is a convenient and easy-to-use solution for managing themes in your Flutter applications. It allows you to switch between different themes seamlessly, making it perfect for apps that require multiple themes, such as light and dark modes.

## When to Use
--------------

You can use the `yako_theme_switch` package in the following scenarios:

*   When you want to implement multiple themes in your app, such as light and dark modes.
*   When you want to allow users to switch between different themes based on their preferences.
*   When you want to implement a theme switcher that integrates well with your app's UI.

## Features
------------

The `yako_theme_switch` package offers the following features:

*   Easy theme switching: Switch between different themes with just a few lines of code.
*   Customizable: Customize the theme switcher to fit your app's UI and branding.
*   Platform support: Supports both Android and iOS platforms.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Using the yako_theme_switch Package
=============================================

In this tutorial, we will walk through the setup process and explain how to use the `yako_theme_switch` package in your Flutter app.

## Step 1: Add the Package to Your Pubspec.yaml File
------------------------------------------------

To use the `yako_theme_switch` package, you need to add it to your `pubspec.yaml` file. Open your `pubspec.yaml` file and add the following line under the `dependencies` section:

```yml
dependencies:
  flutter:
    sdk: flutter
  yako_theme_switch: ^1.0.0
```

## Step 2: Import the Package in Your Dart File
---------------------------------------------

To use the `yako_theme_switch` package, you need to import it in your Dart file. Open your Dart file and add the following line at the top:

```dart
import 'package:yako_theme_switch/yako_theme_switch.dart';
```

## Step 3: Create a Theme Switcher
---------------------------------

To create a theme switcher, you need to use the `YakoThemeSwitch` widget. Here is an example:

```dart
YakoThemeSwitch(
  themes: [
    ThemeData(
      brightness: Brightness.light,
    ),
    ThemeData(
      brightness: Brightness.dark,
    ),
  ],
  onChanged: (index) {
    // Handle theme change here
  },
)
```

## Platform-Specific Details
---------------------------

The `yako_theme_switch` package supports both Android and iOS platforms. However, you need to configure the package differently for each platform.

### Android

To use the `yako_theme_switch` package on Android, you need to add the following line to your `AndroidManifest.xml` file:

```xml
<application
  ...
  android:theme="@style/Theme.AppCompat.DayNight"
  ...>
```

### iOS

To use the `yako_theme_switch` package on iOS, you need to add the following line to your `Info.plist` file:

```xml
<key>UIUserInterfaceStyle</key>
<string>Automatic</string>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:yako_theme_switch/yako_theme_switch.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Yako Theme Switch Demo',
      theme: ThemeData(
        brightness: Brightness.light,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  int _currentIndex = 0;

  @override
  Widget build(BuildContext context) {
    // Create a list of themes
    List<ThemeData> themes = [
      ThemeData(
        brightness: Brightness.light,
      ),
      ThemeData(
        brightness: Brightness.dark,
      ),
    ];

    // Create a theme switcher
    YakoThemeSwitch themeSwitch = YakoThemeSwitch(
      themes: themes,
      onChanged: (index) {
        // Handle theme change here
        setState(() {
          _currentIndex = index;
        });
      },
    );

    // Create a scaffold with the theme switcher
    return Scaffold(
      appBar: AppBar(
        title: Text('Yako Theme Switch Demo'),
      ),
      body: Center(
        child: themeSwitch,
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app and is presented with a theme switcher.
// 2. The user selects a theme from the theme switcher.
// 3. The theme change is handled by the onChanged callback.
// 4. The state is updated with the new theme index.
// 5. The UI is rebuilt with the new theme.
```

<-- END_MAIN -->
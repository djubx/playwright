<-- START_DESCRIPTION -->

**Appmetrica Push Plugin for Flutter**
=====================================

The Appmetrica Push Plugin is a Flutter package that allows you to integrate Appmetrica push notifications into your Flutter application. Appmetrica is a marketing platform that provides tools for analyzing and optimizing mobile applications.

**When to Use This Plugin**
---------------------------

You should use this plugin if you want to send targeted push notifications to your users based on their behavior, location, or other criteria. This plugin is also useful if you want to track the effectiveness of your push campaigns and analyze user engagement.

**Features**
------------

*   Receive and display push notifications
*   Handle push notification taps
*   Track push notification opens and clicks
*   Customize push notification appearance

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setup and Usage**
-------------------

### Step 1: Add the Plugin to Your Project

Add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  appmetrica_push_plugin: ^1.0.0
```

Then, run `flutter pub get` to install the plugin.

### Step 2: Configure the Plugin

Create a new file called `appmetrica_config.dart` and add the following code:

```dart
import 'package:appmetrica_push_plugin/appmetrica_push_plugin.dart';

class AppmetricaConfig {
  static const String apiKey = 'YOUR_API_KEY';
  static const String appId = 'YOUR_APP_ID';
}
```

Replace `YOUR_API_KEY` and `YOUR_APP_ID` with your actual Appmetrica API key and app ID.

### Step 3: Initialize the Plugin

In your `main.dart` file, add the following code to initialize the plugin:

```dart
import 'package:flutter/material.dart';
import 'package:appmetrica_push_plugin/appmetrica_push_plugin.dart';
import 'appmetrica_config.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatefulWidget {
  @override
  _MyAppState createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  @override
  void initState() {
    super.initState();
    AppmetricaPushPlugin.initialize(
      apiKey: AppmetricaConfig.apiKey,
      appId: AppmetricaConfig.appId,
    );
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Appmetrica Push Plugin Example'),
        ),
        body: Center(
          child: Text('Hello, World!'),
        ),
      ),
    );
  }
}
```

### Platform-Specific Details

#### Android

In your `AndroidManifest.xml` file, add the following code:

```xml
<application>
  ...
  <service
    android:name="com.appmetrica.push.AppmetricaPushService"
    android:enabled="true"
    android:exported="true" />
  ...
</application>
```

#### iOS

In your `Info.plist` file, add the following code:

```xml
<key>UIBackgroundModes</key>
<array>
  <string>remote-notification</string>
</array>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:appmetrica_push_plugin/appmetrica_push_plugin.dart';
import 'appmetrica_config.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Step 1: Initialize the Appmetrica Push Plugin
  @override
  void initState() {
    super.initState();
    AppmetricaPushPlugin.initialize(
      apiKey: AppmetricaConfig.apiKey,
      appId: AppmetricaConfig.appId,
    );
  }

  // Step 2: Handle push notification taps
  @override
  void didUpdateWidget(RealFlutter oldWidget) {
    super.didUpdateWidget(oldWidget);
    AppmetricaPushPlugin.handlePushNotificationTap((pushNotification) {
      // Handle push notification tap
      print('Push notification tapped:');
      print(pushNotification.toString());
    });
  }

  // Step 3: Track push notification opens and clicks
  void _trackPushNotificationOpen() {
    AppmetricaPushPlugin.trackPushNotificationOpen();
  }

  void _trackPushNotificationClick() {
    AppmetricaPushPlugin.trackPushNotificationClick();
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Appmetrica Push Plugin Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Text('Hello, World!'),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _trackPushNotificationOpen,
                child: Text('Track Push Notification Open'),
              ),
              SizedBox(height: 10),
              ElevatedButton(
                onPressed: _trackPushNotificationClick,
                child: Text('Track Push Notification Click'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The Appmetrica Push Plugin is initialized with the API key and app ID.
// 2. The plugin handles push notification taps and tracks push notification opens and clicks.
// 3. The user can tap on a push notification to open the app.
// 4. The app tracks push notification opens and clicks using the plugin's methods.
// 5. The plugin sends the tracking data to the Appmetrica server.

// Created/Modified files during execution:
// None
```

<-- END_MAIN -->
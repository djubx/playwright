<-- START_DESCRIPTION -->

# Twitter OAuth 2.0 PKCE Flutter Package
=====================================

The `twitter_oauth2_pkce` Flutter package provides a simple and secure way to authenticate with Twitter using the OAuth 2.0 PKCE (Proof Key for Code Exchange) flow. This package is ideal for Flutter apps that need to access Twitter APIs on behalf of the user.

## When to Use This Package
---------------------------

Use this package when you need to:

* Authenticate with Twitter using the OAuth 2.0 PKCE flow
* Access Twitter APIs on behalf of the user
* Handle token refresh and revocation

## Features
------------

* Supports OAuth 2.0 PKCE flow for secure authentication
* Handles token refresh and revocation
* Provides access to Twitter APIs using the obtained access token

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
-----------------

## Step 1: Add the Package to Your Flutter Project
------------------------------------------------

Add the following dependency to your `pubspec.yaml` file:
```yml
dependencies:
  twitter_oauth2_pkce: ^1.0.0
```
Then, run `flutter pub get` to install the package.

## Step 2: Configure Twitter OAuth 2.0
--------------------------------------

Create a Twitter Developer account and create a new Twitter App. Go to the "Keys and tokens" section and generate a new "Client ID" and "Client secret". Note down the "Client ID" and "Client secret" as you will need them later.

## Step 3: Configure the Package
-------------------------------

Create a new file called `twitter_config.dart` and add the following code:
```dart
import 'package:twitter_oauth2_pkce/twitter_oauth2_pkce.dart';

class TwitterConfig {
  static const String clientId = 'YOUR_CLIENT_ID';
  static const String clientSecret = 'YOUR_CLIENT_SECRET';
  static const String redirectUri = 'YOUR_REDIRECT_URI';
}
```
Replace `YOUR_CLIENT_ID`, `YOUR_CLIENT_SECRET`, and `YOUR_REDIRECT_URI` with the values you obtained in Step 2.

## Step 4: Authenticate with Twitter
-----------------------------------

Create a new file called `main.dart` and add the following code:
```dart
import 'package:flutter/material.dart';
import 'package:twitter_oauth2_pkce/twitter_oauth2_pkce.dart';
import 'twitter_config.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Twitter OAuth 2.0 PKCE'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () async {
            final twitterAuth = TwitterAuth(
              clientId: TwitterConfig.clientId,
              clientSecret: TwitterConfig.clientSecret,
              redirectUri: TwitterConfig.redirectUri,
            );
            final accessToken = await twitterAuth.getAccessToken();
            print('Access token: $accessToken');
          },
          child: Text('Authenticate with Twitter'),
        ),
      ),
    );
  }
}
```
This code creates a simple Flutter app with a button that authenticates with Twitter using the OAuth 2.0 PKCE flow.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:twitter_oauth2_pkce/twitter_oauth2_pkce.dart';
import 'twitter_config.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Step 1: Create a TwitterAuth instance with the client ID, client secret, and redirect URI
  final twitterAuth = TwitterAuth(
    clientId: TwitterConfig.clientId,
    clientSecret: TwitterConfig.clientSecret,
    redirectUri: TwitterConfig.redirectUri,
  );

  // Step 2: Define a function to handle the authentication flow
  Future<void> _authenticateWithTwitter() async {
    // Step 3: Get the authorization URL
    final authorizationUrl = await twitterAuth.getAuthorizationUrl();

    // Step 4: Open the authorization URL in a web browser
    await twitterAuth.openAuthorizationUrl(authorizationUrl);

    // Step 5: Get the access token
    final accessToken = await twitterAuth.getAccessToken();

    // Step 6: Print the access token
    print('Access token: $accessToken');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Twitter OAuth 2.0 PKCE'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: _authenticateWithTwitter,
          child: Text('Authenticate with Twitter'),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user clicks the "Authenticate with Twitter" button.
// 2. The _authenticateWithTwitter function is called.
// 3. The TwitterAuth instance gets the authorization URL.
// 4. The authorization URL is opened in a web browser.
// 5. The user grants access to the Twitter app.
// 6. The TwitterAuth instance gets the access token.
// 7. The access token is printed to the console.
```

<-- END_MAIN -->
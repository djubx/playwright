```markdown
<!-- START_DESCRIPTION -->
# Firebase App Installations Flutter Package

The `firebase_app_installations` Flutter package is a powerful tool that allows developers to manage app installations in Firebase. This package is particularly useful for tracking unique installations of your app, which can be beneficial for analytics, user engagement, and targeted messaging.

## When to Use This Package

You should consider using the `firebase_app_installations` package when you need to:
- Track unique installations of your app for analytics purposes.
- Manage user sessions and identify users across app launches.
- Implement features that require a unique identifier for each installation, such as push notifications or user-specific data.

## Features

- **Unique Installation ID**: Automatically generates a unique identifier for each installation of your app.
- **Automatic Token Management**: Handles the lifecycle of installation tokens, ensuring they are refreshed as needed.
- **Integration with Firebase**: Seamlessly integrates with other Firebase services, allowing for a cohesive development experience.

By leveraging this package, developers can enhance their app's functionality and improve user experience through better tracking and management of installations.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Firebase App Installations Package

In this tutorial, we will walk through the setup process for the `firebase_app_installations` package and demonstrate how to use it in a Flutter application.

## Step 1: Add Dependency

To get started, add the `firebase_app_installations` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  firebase_core: ^2.0.0
  firebase_app_installations: ^0.5.0
```

## Step 2: Initialize Firebase

Before using the `firebase_app_installations` package, you need to initialize Firebase in your app. This is done in the `main.dart` file.

### Android Configuration

1. Ensure you have the Google Services JSON file (`google-services.json`) in your `android/app` directory.
2. Update your `android/build.gradle` file to include the Google services classpath:

```groovy
buildscript {
    dependencies {
        // Add this line
        classpath 'com.google.gms:google-services:4.3.10'
    }
}
```

3. In your `android/app/build.gradle`, apply the Google services plugin at the bottom:

```groovy
apply plugin: 'com.google.gms.google-services'
```

### iOS Configuration

1. Add the Google Services plist file (`GoogleService-Info.plist`) to your iOS project in Xcode.
2. Ensure you have the following in your `ios/Podfile`:

```ruby
platform :ios, '10.0'

# Add this line
pod 'Firebase/Core'
```

## Step 3: Using the Package

Now that you have set up the package, you can use it in your Flutter application. Hereâ€™s how to retrieve the installation ID:

```dart
import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_app_installations/firebase_app_installations.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp();
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Firebase App Installations Demo',
      home: InstallationScreen(),
    );
  }
}

class InstallationScreen extends StatefulWidget {
  @override
  _InstallationScreenState createState() => _InstallationScreenState();
}

class _InstallationScreenState extends State<InstallationScreen> {
  String? _installationId;

  @override
  void initState() {
    super.initState();
    _getInstallationId();
  }

  Future<void> _getInstallationId() async {
    // Fetch the installation ID from Firebase
    final installation = await FirebaseAppInstallations.instance.getId();
    setState(() {
      _installationId = installation;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Firebase App Installations'),
      ),
      body: Center(
        child: Text(
          _installationId != null
              ? 'Installation ID: $_installationId'
              : 'Fetching Installation ID...',
        ),
      ),
    );
  }
}
```

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of Firebase App Installations

```dart
import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_app_installations/firebase_app_installations.dart';

void main() async {
  // Ensure that widget binding is initialized
  WidgetsFlutterBinding.ensureInitialized();
  
  // Initialize Firebase
  await Firebase.initializeApp();
  
  // Run the app
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Firebase App Installations Demo',
      home: InstallationScreen(),
    );
  }
}

class InstallationScreen extends StatefulWidget {
  @override
  _InstallationScreenState createState() => _InstallationScreenState();
}

class _InstallationScreenState extends State<InstallationScreen> {
  String? _installationId; // Variable to hold the installation ID

  @override
  void initState() {
    super.initState();
    _getInstallationId(); // Fetch the installation ID when the widget is initialized
  }

  Future<void> _getInstallationId() async {
    // Fetch the installation ID from Firebase
    final installation = await FirebaseAppInstallations.instance.getId();
    setState(() {
      _installationId = installation; // Update the state with the fetched installation ID
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Firebase App Installations'),
      ),
      body: Center(
        child: Text(
          _installationId != null
              ? 'Installation ID: $_installationId' // Display the installation ID
              : 'Fetching Installation ID...', // Show loading text while fetching
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the main function, which initializes Firebase.
// 2. The MyApp widget is created, which sets up the MaterialApp.
// 3. The InstallationScreen widget is displayed as the home screen.
// 4. In the InstallationScreen, the _getInstallationId method is called in initState.
// 5. This method fetches the installation ID from Firebase and updates the state.
// 6. The UI displays the installation ID once it is fetched, or a loading message while waiting.
```
<!-- END_MAIN -->
``` 

This structured blog provides a comprehensive overview of the `firebase_app_installations` Flutter package, guiding readers through its features, setup, and practical implementation. Each section is clearly marked for easy navigation and understanding.
<-- START_DESCRIPTION -->

# External Video Player Launcher Package
=====================================

The `external_video_player_launcher` package is a Flutter plugin that allows you to launch external video players to play video files. This package is useful when you want to play video files that are not supported by the default Flutter video player or when you want to provide an option to play videos in an external player.

## Features

*   Launch external video players to play video files
*   Supports both Android and iOS platforms
*   Option to specify the video player package to use

## When to use this package

*   When you want to play video files that are not supported by the default Flutter video player
*   When you want to provide an option to play videos in an external player
*   When you want to allow users to choose their preferred video player to play videos

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
================

## Step 1: Add the package to your pubspec.yaml file

```yml
dependencies:
  flutter:
    sdk: flutter
  external_video_player_launcher: ^1.0.0
```

## Step 2: Import the package in your Dart file

```dart
import 'package:external_video_player_launcher/external_video_player_launcher.dart';
```

## Step 3: Launch the external video player

```dart
void _launchExternalVideoPlayer() async {
  final videoUrl = 'https://example.com/video.mp4';
  final packageName = 'com.example.video_player'; // Optional
  await ExternalVideoPlayerLauncher.launch(videoUrl, packageName: packageName);
}
```

## Platform-specific details

### Android

*   Make sure to add the `android.permission.INTERNET` permission to your AndroidManifest.xml file.
*   If you want to specify a custom video player package, make sure to add the `android.permission.SET_PREFERRED_APPLICATIONS` permission to your AndroidManifest.xml file.

### iOS

*   Make sure to add the `NSAppTransportSecurity` key to your Info.plist file and set the `NSAllowsArbitraryLoads` key to `YES`.
*   If you want to specify a custom video player package, make sure to add the `LSApplicationQueriesSchemes` key to your Info.plist file and add the scheme of the video player app.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:external_video_player_launcher/external_video_player_launcher.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'External Video Player Launcher Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _videoUrlController = TextEditingController();

  void _launchExternalVideoPlayer() async {
    // Get the video URL from the text field
    final videoUrl = _videoUrlController.text;

    // Launch the external video player
    await ExternalVideoPlayerLauncher.launch(videoUrl);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('External Video Player Launcher Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            TextField(
              controller: _videoUrlController,
              decoration: InputDecoration(
                labelText: 'Video URL',
                border: OutlineInputBorder(),
              ),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _launchExternalVideoPlayer,
              child: Text('Launch External Video Player'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user enters a video URL in the text field.
// 2. The user clicks the "Launch External Video Player" button.
// 3. The _launchExternalVideoPlayer function is called.
// 4. The function gets the video URL from the text field.
// 5. The function launches the external video player using the ExternalVideoPlayerLauncher.launch method.
// 6. The external video player plays the video.

// The ExternalVideoPlayerLauncher package handles the platform-specific details of launching the external video player.
// The package supports both Android and iOS platforms.
// The package provides an option to specify a custom video player package.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Random Date Flutter Package
================================

The `random_date` Flutter package provides a simple way to generate random dates within a specified range. It can be used in a variety of applications, such as:

* Generating random birthdays for user profiles
* Creating random dates for events or appointments
* Simulating random dates for testing purposes

Features:

* Generate random dates within a specified range
* Support for both Android and iOS platforms
* Easy to use and integrate into existing Flutter projects

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Using the Random Date Flutter Package
=============================================

## Step 1: Add the Package to Your Project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  random_date: ^1.0.0
```
Then, run `flutter pub get` to install the package.

## Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:random_date/random_date.dart';
```
## Step 3: Generate a Random Date

Use the `RandomDate` class to generate a random date within a specified range:
```dart
RandomDate randomDate = RandomDate(
  startDate: DateTime(2020, 1, 1),
  endDate: DateTime(2022, 12, 31),
);

DateTime randomDateTime = randomDate.generate();
```
## Platform-Specific Details

No platform-specific configurations are required for this package.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:random_date/random_date.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  DateTime _randomDateTime;

  @override
  void initState() {
    super.initState();
    _generateRandomDate();
  }

  void _generateRandomDate() {
    // Create a RandomDate object with a specified range
    RandomDate randomDate = RandomDate(
      startDate: DateTime(2020, 1, 1),
      endDate: DateTime(2022, 12, 31),
    );

    // Generate a random date
    DateTime randomDateTime = randomDate.generate();

    // Update the state with the new random date
    setState(() {
      _randomDateTime = randomDateTime;
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Random Date Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Text(
                _randomDateTime != null
                    ? _randomDateTime.toString()
                    : 'Generating random date...',
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _generateRandomDate,
                child: Text('Generate New Random Date'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Application flow:
// 1. The app starts and runs the `main` function, which creates a `RealFlutter` widget.
// 2. The `RealFlutter` widget is a stateful widget, so it creates a `_RealFlutterState` object.
// 3. In the `_RealFlutterState` object, the `initState` method is called, which generates a random date using the `RandomDate` class.
// 4. The random date is stored in the `_randomDateTime` variable and used to update the state.
// 5. The `build` method is called, which creates a `MaterialApp` widget with a `Scaffold` and an `AppBar`.
// 6. The body of the `Scaffold` contains a `Center` widget with a `Column` of children.
// 7. The first child is a `Text` widget that displays the random date.
// 8. The second child is an `ElevatedButton` that, when pressed, generates a new random date using the `_generateRandomDate` method.
```

<-- END_MAIN -->
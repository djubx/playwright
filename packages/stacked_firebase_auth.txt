<-- START_DESCRIPTION -->

Stacked Firebase Auth Package
==============================

The `stacked_firebase_auth` package is a Flutter package that provides a simple and efficient way to handle Firebase authentication in your app. It is built on top of the popular `stacked` architecture and provides a set of pre-built widgets and services to handle authentication.

When to Use This Package
------------------------

This package is ideal for apps that require Firebase authentication, especially those that use the `stacked` architecture. It provides a simple and efficient way to handle authentication, saving you time and effort.

Features
--------

*   Pre-built widgets for handling authentication, such as login and signup forms
*   Services for handling authentication, such as authentication and password reset
*   Support for multiple authentication providers, including Google, Facebook, and Twitter
*   Customizable and extensible architecture

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Configuration
-----------------------

To use the `stacked_firebase_auth` package, you need to add it to your `pubspec.yaml` file:

```yml
dependencies:
  stacked_firebase_auth: ^1.0.0
```

Then, run `flutter pub get` to install the package.

Next, you need to configure Firebase in your app. You can do this by adding the following code to your `main` function:

```dart
void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp();
  runApp(MyApp());
}
```

You also need to configure the Firebase authentication providers you want to use. For example, to use Google authentication, you need to add the following code to your `AndroidManifest.xml` file:

```xml
<application>
  ...
  <meta-data
    android:name="com.google.android.gms.version"
    android:value="@integer/google_play_services_version" />
</application>
```

Similarly, to use Facebook authentication, you need to add the following code to your `Info.plist` file:

```xml
<key>FacebookAppID</key>
<string>YOUR_APP_ID</string>
<key>FacebookAppSecret</key>
<string>YOUR_APP_SECRET</string>
```

Using the Package
-----------------

To use the package, you need to create an instance of the `FirebaseAuthenticationService` class:

```dart
final firebaseAuthenticationService = FirebaseAuthenticationService();
```

You can then use this service to authenticate users. For example, to login a user, you can use the following code:

```dart
final user = await firebaseAuthenticationService.login(
  email: 'user@example.com',
  password: 'password',
);
```

Similarly, to signup a user, you can use the following code:

```dart
final user = await firebaseAuthenticationService.signup(
  email: 'user@example.com',
  password: 'password',
);
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:stacked/stacked.dart';
import 'package:stacked_firebase_auth/stacked_firebase_auth.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp();
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Stacked Firebase Auth Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return ViewModelBuilder<RealFlutterViewModel>.reactive(
      viewModelBuilder: () => RealFlutterViewModel(),
      builder: (context, viewModel, child) {
        return Scaffold(
          appBar: AppBar(
            title: Text('Stacked Firebase Auth Demo'),
          ),
          body: Center(
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              children: <Widget>[
                Text(
                  'Login or Signup to continue',
                  style: TextStyle(fontSize: 20),
                ),
                SizedBox(height: 20),
                ElevatedButton(
                  onPressed: viewModel.login,
                  child: Text('Login'),
                ),
                SizedBox(height: 10),
                ElevatedButton(
                  onPressed: viewModel.signup,
                  child: Text('Signup'),
                ),
              ],
            ),
          ),
        );
      },
    );
  }
}

class RealFlutterViewModel extends ViewModel {
  final FirebaseAuthenticationService _firebaseAuthenticationService =
      FirebaseAuthenticationService();

  Future<void> login() async {
    final user = await _firebaseAuthenticationService.login(
      email: 'user@example.com',
      password: 'password',
    );
    print('Logged in user: $user');
  }

  Future<void> signup() async {
    final user = await _firebaseAuthenticationService.signup(
      email: 'user@example.com',
      password: 'password',
    );
    print('Signed up user: $user');
  }
}

// The application flow is as follows:
// 1. The user opens the app and is presented with a login or signup screen.
// 2. The user clicks on the login button, which calls the login function in the view model.
// 3. The login function uses the Firebase authentication service to login the user.
// 4. If the login is successful, the user is logged in and their details are printed to the console.
// 5. If the user clicks on the signup button, the signup function is called in the view model.
// 6. The signup function uses the Firebase authentication service to signup the user.
// 7. If the signup is successful, the user is signed up and their details are printed to the console.

// In summary, the code flows as follows:
// RealFlutter -> RealFlutterViewModel -> FirebaseAuthenticationService -> Firebase Authentication
```

<-- END_MAIN -->
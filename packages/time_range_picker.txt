<-- START_DESCRIPTION -->

# Time Range Picker Flutter Package
=====================================

The `time_range_picker` Flutter package provides a simple and intuitive way to select a range of time. It is a customizable widget that can be used in various applications, such as scheduling, booking, or any other scenario where a time range needs to be selected.

## Features

*   Customizable time range selection
*   Support for 12-hour and 24-hour clock formats
*   Optional start and end time validation
*   Customizable UI with various themes and styles

## When to Use

This package is ideal for applications that require users to select a range of time, such as:

*   Scheduling appointments or meetings
*   Booking flights, hotels, or rental cars
*   Creating events or tasks with specific start and end times

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Using the Time Range Picker Package
=============================================

## Step 1: Add the Package to Your Project

Add the `time_range_picker` package to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  time_range_picker: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:time_range_picker/time_range_picker.dart';
```

## Step 3: Use the Time Range Picker Widget

Create a `TimeRangePicker` widget and customize it as needed:

```dart
TimeRangePicker(
  startHour: 8,
  endHour: 18,
  interval: 30,
  startTime: DateTime.now(),
  endTime: DateTime.now().add(Duration(hours: 2)),
  onSubmitted: (start, end) {
    print('Start time: ${start.format('hh:mm a')}');
    print('End time: ${end.format('hh:mm a')}');
  },
)
```

## Platform-Specific Details

*   Android: No additional configuration is required.
*   iOS: You may need to add the following line to your `Info.plist` file to enable the time picker:

```xml
<key>UIRequiresFullScreen</key>
<true/>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:time_range_picker/time_range_picker.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Time Range Picker Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: TimeRangePickerDemo(),
    );
  }
}

class TimeRangePickerDemo extends StatefulWidget {
  @override
  _TimeRangePickerDemoState createState() => _TimeRangePickerDemoState();
}

class _TimeRangePickerDemoState extends State<TimeRangePickerDemo> {
  DateTime _startTime = DateTime.now();
  DateTime _endTime = DateTime.now().add(Duration(hours: 2));

  void _onSubmitted(DateTime start, DateTime end) {
    print('Start time: ${start.format('hh:mm a')}');
    print('End time: ${end.format('hh:mm a')}');
    setState(() {
      _startTime = start;
      _endTime = end;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Time Range Picker Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Select a time range:',
              style: TextStyle(fontSize: 24),
            ),
            SizedBox(height: 20),
            TimeRangePicker(
              startHour: 8,
              endHour: 18,
              interval: 30,
              startTime: _startTime,
              endTime: _endTime,
              onSubmitted: _onSubmitted,
            ),
            SizedBox(height: 20),
            Text(
              'Selected time range:',
              style: TextStyle(fontSize: 24),
            ),
            Text(
              '${_startTime.format('hh:mm a')} - ${_endTime.format('hh:mm a')}',
              style: TextStyle(fontSize: 36),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user is presented with a time range picker widget.
// 2. The user selects a start and end time using the widget.
// 3. When the user submits the selection, the onSubmitted callback is called.
// 4. The callback updates the _startTime and _endTime variables with the selected times.
// 5. The widget is rebuilt to display the selected time range.
// 6. The user can repeat the process to select a new time range.

// The time range picker widget is a customizable and intuitive way to select a range of time.
// It is ideal for applications that require users to select a range of time, such as scheduling or booking.

// In this example, we use the time range picker widget to select a time range and display it on the screen.
// We also demonstrate how to customize the widget and handle the user's selection.

```

<-- END_MAIN -->
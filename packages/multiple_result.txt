```markdown
<!-- START_DESCRIPTION -->
# Multiple Result Flutter Package

The **multiple_result** Flutter package is a powerful tool designed to handle multiple outcomes from asynchronous operations in a clean and efficient manner. It provides a way to encapsulate the results of operations that can either succeed or fail, allowing developers to manage these outcomes without cluttering their code with numerous conditional statements.

## When to Use

You might consider using the **multiple_result** package in scenarios such as:
- API calls where the response can either be successful or return an error.
- Database operations that may succeed or fail based on various conditions.
- Any asynchronous operation where you want to handle multiple outcomes in a structured way.

## Features

- **Result Handling**: Easily manage success and error states.
- **Type Safety**: Ensures that the results are type-safe, reducing runtime errors.
- **Clean Code**: Promotes cleaner and more maintainable code by reducing boilerplate.

With these features, the **multiple_result** package simplifies the process of handling various outcomes in your Flutter applications.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Multiple Result Package

## Step 1: Adding the Dependency

To get started, you need to add the **multiple_result** package to your `pubspec.yaml` file. Open the file and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  multiple_result: ^2.0.0  # Check for the latest version on pub.dev
```

## Step 2: Running Flutter Packages Get

After adding the dependency, run the following command in your terminal to install the package:

```bash
flutter pub get
```

## Step 3: Platform-Specific Configuration

### Android

For Android, ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

### iOS

For iOS, make sure your deployment target is set to at least 10.0 in your `ios/Podfile`:

```ruby
platform :ios, '10.0'
```

## Step 4: Importing the Package

In your Dart files, import the package as follows:

```dart
import 'package:multiple_result/multiple_result.dart';
```

## Step 5: Using the Package

You can now use the **multiple_result** package to handle results in your application. Hereâ€™s a simple example of how to use it:

```dart
Result<String, String> result = await someAsyncFunction();

result.when(
  (success) => print('Success: $success'),
  (error) => print('Error: $error'),
);
```

This code snippet demonstrates how to handle both success and error cases using the `when` method provided by the package.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using the Multiple Result Package

```dart
import 'package:flutter/material.dart';
import 'package:multiple_result/multiple_result.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Multiple Result Example',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Multiple Result Example'),
        ),
        body: Center(
          child: FutureBuilder<Result<String, String>>(
            future: fetchData(), // Fetch data asynchronously
            builder: (context, snapshot) {
              if (snapshot.connectionState == ConnectionState.waiting) {
                return CircularProgressIndicator(); // Show loading indicator
              } else if (snapshot.hasError) {
                return Text('Error: ${snapshot.error}'); // Handle error
              } else {
                // Handle the result using the when method
                return snapshot.data!.when(
                  (success) => Text('Success: $success'), // Display success
                  (error) => Text('Error: $error'), // Display error
                );
              }
            },
          ),
        ),
      ),
    );
  }

  // Simulated asynchronous function that returns a Result
  Future<Result<String, String>> fetchData() async {
    await Future.delayed(Duration(seconds: 2)); // Simulate network delay
    // Simulate a successful response
    return Result.success("Data fetched successfully!");
    // Uncomment the line below to simulate an error
    // return Result.error("Failed to fetch data.");
  }
}
```

### Application Flow Explanation

// The application starts by running the `RealFlutter` widget.
// Inside the `RealFlutter` widget, a `FutureBuilder` is used to handle the asynchronous operation.
// The `fetchData` function simulates a network call that takes 2 seconds to complete.
// Depending on the outcome of `fetchData`, the `FutureBuilder` will either show a loading indicator,
// display the success message, or show an error message.
// The `when` method of the `Result` class is used to handle both success and error cases cleanly.
// This structure keeps the code organized and easy to read, allowing for better maintenance and debugging.
<!-- END_MAIN -->
``` 

This structured blog provides a comprehensive overview of the **multiple_result** Flutter package, guiding users through its setup, usage, and providing a complete example to illustrate its functionality.
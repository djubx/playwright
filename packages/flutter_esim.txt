<-- START_DESCRIPTION -->

# Flutter eSIM Package Overview
=====================================

The `flutter_esim` package provides a simple and efficient way to handle embedded SIM (eSIM) functionality in Flutter applications. This package allows developers to manage eSIM profiles, download, and install profiles, and handle various eSIM-related events.

### When to Use This Package

This package is useful when developing Flutter applications that require eSIM functionality, such as:

* Mobile network operator apps
* IoT device management apps
* eSIM-based device configuration apps

### Features

The `flutter_esim` package provides the following features:

* eSIM profile management (download, install, delete)
* eSIM event handling (profile installation, removal, etc.)
* Platform-specific optimizations for Android and iOS

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the Package
=====================================

### Step 1: Add the Package to Your Flutter Project

Add the following dependency to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_esim: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:flutter_esim/flutter_esim.dart';
```
### Step 3: Initialize the Package

Initialize the package by calling the `init` method:
```dart
await FlutterEsIM.init();
```
### Step 4: Download and Install an eSIM Profile

Use the `downloadProfile` method to download an eSIM profile:
```dart
final profile = await FlutterEsIM.downloadProfile(
  'https://example.com/esim-profile.zip',
);
```
Then, use the `installProfile` method to install the downloaded profile:
```dart
await FlutterEsIM.installProfile(profile);
```
### Platform-Specific Details

#### Android

On Android, you need to add the following permissions to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.READ_PHONE_STATE" />
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
```
#### iOS

On iOS, you need to add the following entitlement to your `Info.plist` file:
```xml
<key>com.apple.security.network.client</key>
<true/>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_esim/flutter_esim.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatefulWidget {
  @override
  _MyAppState createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('eSIM Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              ElevatedButton(
                onPressed: _downloadAndInstallProfile,
                child: Text('Download and Install Profile'),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _removeProfile,
                child: Text('Remove Profile'),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Future<void> _downloadAndInstallProfile() async {
    // Step 1: Initialize the package
    await FlutterEsIM.init();

    // Step 2: Download the eSIM profile
    final profile = await FlutterEsIM.downloadProfile(
      'https://example.com/esim-profile.zip',
    );

    // Step 3: Install the downloaded profile
    await FlutterEsIM.installProfile(profile);
  }

  Future<void> _removeProfile() async {
    // Step 1: Get the installed profile
    final profile = await FlutterEsIM.getInstalledProfile();

    // Step 2: Remove the installed profile
    await FlutterEsIM.removeProfile(profile);
  }
}

// The application flow is as follows:
// 1. The user clicks the "Download and Install Profile" button.
// 2. The `_downloadAndInstallProfile` function is called, which initializes the package and downloads the eSIM profile.
// 3. The downloaded profile is then installed using the `installProfile` method.
// 4. The user clicks the "Remove Profile" button.
// 5. The `_removeProfile` function is called, which gets the installed profile and removes it using the `removeProfile` method.

// In summary, this example demonstrates how to download and install an eSIM profile, as well as remove an installed profile using the `flutter_esim` package.
```

<-- END_MAIN -->
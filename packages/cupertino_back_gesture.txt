<-- START_DESCRIPTION -->

# Cupertino Back Gesture Flutter Package
=====================================

The `cupertino_back_gesture` Flutter package allows developers to easily implement the Cupertino-style back gesture on Android and iOS devices. This gesture is commonly used in iOS applications to navigate back to the previous screen.

### When to Use This Package

This package is useful when you want to provide a consistent navigation experience across both Android and iOS platforms. It's particularly useful when you're building an app that requires a custom navigation flow.

### Features

*   Supports both Android and iOS platforms
*   Customizable gesture threshold and velocity
*   Works with both `MaterialApp` and `CupertinoApp`

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Cupertino Back Gesture Package
=============================================================

### Step 1: Add the Package to Your Project

Add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  cupertino_back_gesture: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:cupertino_back_gesture/cupertino_back_gesture.dart';
```

### Step 3: Wrap Your App with the `CupertinoBackGesture` Widget

Wrap your `MaterialApp` or `CupertinoApp` with the `CupertinoBackGesture` widget:

```dart
CupertinoBackGesture(
  child: MaterialApp(
    home: RealFlutter(),
  ),
)
```

### Platform-Specific Details

*   On Android, the back gesture is only available on devices running Android 10 and above.
*   On iOS, the back gesture is available on all devices running iOS 13 and above.

### Configurations and Optimizations

You can customize the gesture threshold and velocity by passing the `threshold` and `velocity` properties to the `CupertinoBackGesture` widget:

```dart
CupertinoBackGesture(
  threshold: 20.0,
  velocity: 1.0,
  child: MaterialApp(
    home: RealFlutter(),
  ),
)
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:cupertino_back_gesture/cupertino_back_gesture.dart';

void main() {
  runApp(
    CupertinoBackGesture(
      child: MaterialApp(
        home: RealFlutter(),
      ),
    ),
  );
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  int _currentIndex = 0;

  final _screens = [
    Screen1(),
    Screen2(),
    Screen3(),
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: _screens[_currentIndex],
      bottomNavigationBar: BottomNavigationBar(
        currentIndex: _currentIndex,
        onTap: (index) {
          setState(() {
            _currentIndex = index;
          });
        },
        items: [
          BottomNavigationBarItem(icon: Icon(Icons.home), label: 'Screen 1'),
          BottomNavigationBarItem(icon: Icon(Icons.settings), label: 'Screen 2'),
          BottomNavigationBarItem(icon: Icon(Icons.info), label: 'Screen 3'),
        ],
      ),
    );
  }
}

class Screen1 extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Center(
      child: Text('Screen 1'),
    );
  }
}

class Screen2 extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Center(
      child: Text('Screen 2'),
    );
  }
}

class Screen3 extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Center(
      child: Text('Screen 3'),
    );
  }
}
```

// The application flow starts with the `main` function, where we wrap the `MaterialApp` with the `CupertinoBackGesture` widget.
// This allows us to use the Cupertino-style back gesture on Android and iOS devices.
// We then define a `RealFlutter` widget, which is a stateful widget that contains a bottom navigation bar and a body that displays the current screen.
// The `_screens` list contains the different screens that we want to display, and we use the `_currentIndex` variable to keep track of the current screen.
// When the user taps on a bottom navigation bar item, we update the `_currentIndex` variable and rebuild the widget tree to display the new screen.
// Each screen is a separate widget that displays a simple text message.
// The Cupertino-style back gesture is enabled for each screen, allowing the user to navigate back to the previous screen by swiping from the left edge of the screen.

<-- END_MAIN -->
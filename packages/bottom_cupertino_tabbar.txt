<-- START_DESCRIPTION -->

# Bottom Cupertino Tab Bar Package
The `bottom_cupertino_tabbar` package is a Flutter package that provides a bottom tab bar similar to the one used in iOS applications. It is designed to work seamlessly with Cupertino-themed apps, but can also be used with Material-themed apps.

## When to Use
This package is ideal for apps that require a bottom tab bar with a Cupertino design. It is also useful for apps that want to provide a consistent look and feel across both iOS and Android platforms.

## Features
The `bottom_cupertino_tabbar` package provides the following features:

* A bottom tab bar with a Cupertino design
* Support for multiple tabs
* Support for custom icons and labels
* Support for active and inactive tab colors
* Support for badge notifications

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
To use the `bottom_cupertino_tabbar` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  flutter:
    sdk: flutter
  bottom_cupertino_tabbar: ^1.0.0
```
2. Run `flutter pub get` to install the package.
3. Import the package in your Dart file:
```dart
import 'package:bottom_cupertino_tabbar/bottom_cupertino_tabbar.dart';
```
4. Create a `BottomCupertinoTabBar` widget and pass in the required properties:
```dart
BottomCupertinoTabBar(
  items: [
    BottomCupertinoTabBarItem(
      icon: Icon(Icons.home),
      label: 'Home',
    ),
    BottomCupertinoTabBarItem(
      icon: Icon(Icons.settings),
      label: 'Settings',
    ),
  ],
  currentIndex: 0,
  onTap: (index) {
    // Handle tap event
  },
)
```
5. Customize the appearance of the tab bar by using the various properties provided by the `BottomCupertinoTabBar` widget.

### Platform-Specific Details
The `bottom_cupertino_tabbar` package uses the `CupertinoTabBar` widget on iOS and the `Material` widget on Android. This means that the tab bar will have a native look and feel on both platforms.

### Required Configurations
No additional configurations are required to use the `bottom_cupertino_tabbar` package.

### Optimizations
To optimize the performance of the tab bar, make sure to use the ` BottomCupertinoTabBar` widget with a `StatefulWidget` and update the `currentIndex` property when the user navigates between tabs.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:bottom_cupertino_tabbar/bottom_cupertino_tabbar.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  int _currentIndex = 0;

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        body: IndexedStack(
          index: _currentIndex,
          children: [
            // Home tab
            Center(
              child: Text('Home tab'),
            ),
            // Settings tab
            Center(
              child: Text('Settings tab'),
            ),
          ],
        ),
        bottomNavigationBar: BottomCupertinoTabBar(
          items: [
            BottomCupertinoTabBarItem(
              icon: Icon(Icons.home),
              label: 'Home',
            ),
            BottomCupertinoTabBarItem(
              icon: Icon(Icons.settings),
              label: 'Settings',
            ),
          ],
          currentIndex: _currentIndex,
          onTap: (index) {
            setState(() {
              _currentIndex = index;
            });
          },
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user launches the app and is presented with the home tab.
// 2. The user can navigate between the home and settings tabs by tapping on the corresponding tab icons.
// 3. When the user taps on a tab icon, the `_currentIndex` property is updated and the `IndexedStack` widget is rebuilt to display the selected tab.
// 4. The `BottomCupertinoTabBar` widget is used to display the tab bar and handle the tap events.
// 5. The `MaterialApp` widget is used to provide a material design theme to the app.
```

// The above code creates a simple tabbed interface with two tabs: home and settings. The user can navigate between the tabs by tapping on the corresponding tab icons. The `BottomCupertinoTabBar` widget is used to display the tab bar and handle the tap events. The `IndexedStack` widget is used to display the selected tab. The `MaterialApp` widget is used to provide a material design theme to the app.

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Flutter Slide Drawer Package
================================

The `flutter_slide_drawer` package is a Flutter library that provides a simple and customizable slide drawer widget. It allows you to create a drawer that can be opened and closed by sliding it from the left or right side of the screen.

## When to Use
--------------

This package is useful when you want to provide a navigation menu or a settings panel that can be accessed by sliding a drawer from the side of the screen. It's a great way to save screen real estate and provide a clean and intuitive user interface.

## Features
------------

*   Customizable drawer width and height
*   Support for left and right slide directions
*   Optional overlay to dim the background when the drawer is open
*   Callbacks for drawer open and close events

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

## Setup
--------

To use the `flutter_slide_drawer` package, add it to your `pubspec.yaml` file:

```yml
dependencies:
  flutter_slide_drawer: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Basic Usage
-------------

To use the `flutter_slide_drawer` package, you need to create a `RealFlutter` widget and pass it to the `SlideDrawer` widget:

```dart
import 'package:flutter/material.dart';
import 'package:flutter_slide_drawer/flutter_slide_drawer.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Slide Drawer Demo'),
      ),
      body: SlideDrawer(
        child: Center(
          child: Text('Hello, World!'),
        ),
        drawer: Container(
          width: 200,
          height: double.infinity,
          color: Colors.white,
          child: Center(
            child: Text('Drawer Content'),
          ),
        ),
      ),
    );
  }
}
```

## Platform-Specific Details
---------------------------

The `flutter_slide_drawer` package works on both Android and iOS platforms. However, you may need to adjust the drawer width and height to fit the screen size of different devices.

## Configurations and Optimizations
-----------------------------------

You can customize the drawer width and height by passing the `width` and `height` properties to the `SlideDrawer` widget. You can also change the slide direction by passing the `direction` property.

To optimize the performance of the `flutter_slide_drawer` package, you can use the `overlay` property to dim the background when the drawer is open. This can help improve the user experience by providing a clear visual indication of when the drawer is open.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_slide_drawer/flutter_slide_drawer.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Slide Drawer Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Step 1: Create a Scaffold widget to provide a basic material design visual layout structure.
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      // Step 2: Create an AppBar widget to provide a title for the app.
      appBar: AppBar(
        title: Text('Flutter Slide Drawer Demo'),
      ),
      // Step 3: Create a SlideDrawer widget to provide a slide drawer.
      body: SlideDrawer(
        // Step 4: Create a child widget to display the main content of the app.
        child: Center(
          child: Text('Hello, World!'),
        ),
        // Step 5: Create a drawer widget to display the drawer content.
        drawer: Container(
          width: 200,
          height: double.infinity,
          color: Colors.white,
          child: Center(
            child: Text('Drawer Content'),
          ),
        ),
        // Step 6: Set the slide direction to left.
        direction: SlideDirection.left,
        // Step 7: Set the overlay to true to dim the background when the drawer is open.
        overlay: true,
      ),
    );
  }
}

// The app starts by running the main function, which creates a MaterialApp widget with a title and theme.
// The home property of the MaterialApp widget is set to the RealFlutter widget, which creates a Scaffold widget to provide a basic material design visual layout structure.
// The Scaffold widget has an AppBar widget to provide a title for the app, and a SlideDrawer widget to provide a slide drawer.
// The SlideDrawer widget has a child widget to display the main content of the app, and a drawer widget to display the drawer content.
// The slide direction is set to left, and the overlay is set to true to dim the background when the drawer is open.
```

<-- END_MAIN -->
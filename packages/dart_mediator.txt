<-- START_DESCRIPTION -->

**Introduction to dart_mediator**
================================

The `dart_mediator` package is a powerful tool for managing global state and navigation in Flutter applications. It provides a simple and efficient way to handle app-wide state changes and navigate between screens. In this blog, we will explore the features and benefits of using `dart_mediator` in your Flutter projects.

**When to use dart_mediator**
---------------------------

You should consider using `dart_mediator` in the following scenarios:

* You need to manage global state that affects multiple screens in your app.
* You want to decouple your app's navigation from the widget tree.
* You need to handle complex app-wide state changes and side effects.

**Key Features**
----------------

* Global state management: `dart_mediator` provides a centralized store for managing app-wide state.
* Navigation management: `dart_mediator` allows you to navigate between screens and manage the app's navigation stack.
* Decoupling: `dart_mediator` helps to decouple your app's navigation and state management from the widget tree.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setting up dart_mediator**
---------------------------

To use `dart_mediator` in your Flutter project, follow these steps:

1. Add the `dart_mediator` package to your `pubspec.yaml` file:
```yml
dependencies:
  dart_mediator: ^1.0.0
```
2. Run `flutter pub get` to install the package.
3. Import the `dart_mediator` package in your Dart file:
```dart
import 'package:dart_mediator/dart_mediator.dart';
```
**Configuring dart_mediator**
---------------------------

To configure `dart_mediator`, you need to create a `Mediator` instance and pass it to the `MaterialApp` widget:
```dart
void main() {
  final mediator = Mediator();
  runApp(MyApp(mediator: mediator));
}

class MyApp extends StatelessWidget {
  final Mediator mediator;

  MyApp({required this.mediator});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'My App',
      home: MyHomePage(),
      mediator: mediator,
    );
  }
}
```
**Using dart_mediator**
---------------------

To use `dart_mediator`, you need to create a `Mediator` instance and use its methods to manage global state and navigation:
```dart
class MyHomePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('My Home Page'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Use the mediator to navigate to another screen
            Mediator.of(context).push(MyOtherPage());
          },
          child: Text('Go to other page'),
        ),
      ),
    );
  }
}
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:dart_mediator/dart_mediator.dart';

void main() {
  final mediator = Mediator();
  runApp(MyApp(mediator: mediator));
}

class MyApp extends StatelessWidget {
  final Mediator mediator;

  MyApp({required this.mediator});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'My App',
      home: MyHomePage(),
      mediator: mediator,
    );
  }
}

class MyHomePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Use the mediator to get the current state
    final state = Mediator.of(context).getState();

    return Scaffold(
      appBar: AppBar(
        title: Text('My Home Page'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Use the mediator to navigate to another screen
            Mediator.of(context).push(MyOtherPage());
          },
          child: Text('Go to other page'),
        ),
      ),
    );
  }
}

class MyOtherPage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Use the mediator to get the current state
    final state = Mediator.of(context).getState();

    return Scaffold(
      appBar: AppBar(
        title: Text('My Other Page'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Use the mediator to go back to the previous screen
            Mediator.of(context).pop();
          },
          child: Text('Go back'),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and is presented with the MyHomePage screen.
// 2. The user clicks the "Go to other page" button, which uses the mediator to navigate to the MyOtherPage screen.
// 3. The user is presented with the MyOtherPage screen and can click the "Go back" button to go back to the MyHomePage screen.
// 4. The mediator is used to manage the navigation between screens and to get the current state of the app.
```

<-- END_MAIN -->
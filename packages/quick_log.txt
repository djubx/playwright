<-- START_DESCRIPTION -->

**Quick Log Flutter Package: A Comprehensive Overview**
===========================================================

The `quick_log` Flutter package is a lightweight and efficient logging solution designed specifically for Flutter applications. It provides a simple and easy-to-use API for logging events, errors, and other information, allowing developers to monitor and debug their apps more effectively.

**When to Use Quick Log**
-------------------------

You should consider using `quick_log` in the following scenarios:

*   Debugging: When you need to troubleshoot issues in your app, `quick_log` can help you log important events and variables to identify the root cause of the problem.
*   Error tracking: By logging errors with `quick_log`, you can monitor and analyze crashes and exceptions in your app, improving overall stability and user experience.
*   Performance optimization: Logging performance-related metrics with `quick_log` enables you to identify bottlenecks and optimize your app's performance.

**Key Features of Quick Log**
-----------------------------

*   **Simple API**: The `quick_log` package has a minimalistic API that makes it easy to log events, errors, and other information.
*   **Customizable logging levels**: You can configure the logging level to control the amount of information logged, from verbose to error-only.
*   **Platform-specific logging**: `quick_log` supports platform-specific logging, allowing you to log information directly to the console on Android and iOS.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setting Up and Using Quick Log**
=====================================

To use the `quick_log` package in your Flutter project, follow these steps:

### Step 1: Add the Quick Log Package to Your Project

Add the `quick_log` package to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  quick_log: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Quick Log Package

Import the `quick_log` package in your Dart file:

```dart
import 'package:quick_log/quick_log.dart';
```

### Step 3: Initialize the Quick Log Package

Initialize the `quick_log` package in your app's `main` function:

```dart
void main() {
  QuickLog.init();
  runApp(MyApp());
}
```

### Step 4: Log Events and Errors

Use the `log` function to log events and errors:

```dart
QuickLog.log('This is a log message', level: LogLevel.info);
QuickLog.log('This is an error message', level: LogLevel.error);
```

### Platform-Specific Logging

To log information directly to the console on Android and iOS, use the `log` function with the `print` parameter set to `true`:

```dart
QuickLog.log('This is a log message', print: true);
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:quick_log/quick_log.dart';

void main() {
  // Initialize the Quick Log package
  QuickLog.init();

  // Run the app
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Log a message when the app starts
    QuickLog.log('App started', level: LogLevel.info);

    return MaterialApp(
      title: 'Quick Log Demo',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Quick Log Demo'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              ElevatedButton(
                onPressed: () {
                  // Log a message when the button is pressed
                  QuickLog.log('Button pressed', level: LogLevel.info);
                },
                child: Text('Log Button Press'),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  // Log an error message when the button is pressed
                  QuickLog.log('Error occurred', level: LogLevel.error);
                },
                child: Text('Log Error'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The app starts by initializing the Quick Log package and running the RealFlutter widget.
// When the app starts, a log message is written to the console with the log level set to info.
// The app displays two buttons: Log Button Press and Log Error.
// When the Log Button Press button is pressed, a log message is written to the console with the log level set to info.
// When the Log Error button is pressed, an error message is written to the console with the log level set to error.

// This code demonstrates how to use the Quick Log package to log events and errors in a Flutter app.
// The Quick Log package provides a simple and easy-to-use API for logging, and it supports platform-specific logging.
```

<-- END_MAIN -->
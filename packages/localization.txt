<-- START_DESCRIPTION -->

# Localization in Flutter
The `flutter_localizations` package provides a simple way to internationalize and localize Flutter apps. It allows developers to easily translate and format text, dates, and numbers for different languages and regions.

## When to Use
Use the `flutter_localizations` package when you want to:

* Support multiple languages in your app
* Format dates, numbers, and currencies according to the user's locale
* Use translated text in your app's UI

## Features
The `flutter_localizations` package provides the following features:

* Support for over 70 languages
* Automatic formatting of dates, numbers, and currencies
* Easy integration with Flutter's `MaterialApp` and `CupertinoApp`
* Support for both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up Localization in Flutter
To use the `flutter_localizations` package, follow these steps:

## Step 1: Add the Package to Your Pubspec
Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_localizations:
    sdk: flutter
```
## Step 2: Import the Package
Import the package in your Dart file:
```dart
import 'package:flutter_localizations/flutter_localizations.dart';
```
## Step 3: Create a `MaterialApp` or `CupertinoApp`
Create a `MaterialApp` or `CupertinoApp` and pass the `localizationsDelegates` parameter:
```dart
MaterialApp(
  localizationsDelegates: [
    GlobalMaterialLocalizations.delegate,
    GlobalWidgetsLocalizations.delegate,
  ],
  supportedLocales: [
    Locale('en', 'US'),
    Locale('fr', 'CA'),
  ],
  home: MyHomePage(),
)
```
## Step 4: Create a `Localizations` Class
Create a `Localizations` class that extends `Localizations<T>`, where `T` is the type of the localized data:
```dart
class RealFlutterLocalizations extends Localizations<RealFlutter> {
  @override
  RealFlutter get data => RealFlutter();
}
```
## Step 5: Add Platform-Specific Configurations
For Android, add the following configuration to your `AndroidManifest.xml` file:
```xml
<application
  ...
  android:supportsRtl="true"
  ...
>
```
For iOS, add the following configuration to your `Info.plist` file:
```xml
<key>CFBundleLocalizations</key>
<array>
  <string>en</string>
  <string>fr</string>
</array>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_localizations/flutter_localizations.dart';

class RealFlutter {
  String get title => 'Real Flutter';
  String get hello => 'Hello, World!';
}

class RealFlutterLocalizations extends Localizations<RealFlutter> {
  @override
  RealFlutter get data => RealFlutter();
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      localizationsDelegates: [
        GlobalMaterialLocalizations.delegate,
        GlobalWidgetsLocalizations.delegate,
        RealFlutterLocalizations.delegate,
      ],
      supportedLocales: [
        Locale('en', 'US'),
        Locale('fr', 'CA'),
      ],
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    final localizations = RealFlutterLocalizations.of(context);
    return Scaffold(
      appBar: AppBar(
        title: Text(localizations.title),
      ),
      body: Center(
        child: Text(localizations.hello),
      ),
    );
  }
}

void main() {
  runApp(MyApp());
}

// The application flow is as follows:
// 1. The user runs the app.
// 2. The app checks the device's locale and loads the corresponding localized data.
// 3. The app builds the `MaterialApp` with the localized data.
// 4. The app displays the `MyHomePage` with the localized title and hello message.
// 5. The user can switch between locales by changing the device's settings.
// 6. The app rebuilds the `MaterialApp` with the new localized data.
```

// The code flow is as follows:
// 1. The `MyApp` widget is built with the `MaterialApp` and `RealFlutterLocalizations`.
// 2. The `RealFlutterLocalizations` class loads the localized data for the current locale.
// 3. The `MyHomePage` widget is built with the localized title and hello message.
// 4. The user can switch between locales by changing the device's settings.
// 5. The `RealFlutterLocalizations` class reloads the localized data for the new locale.
// 6. The `MyHomePage` widget is rebuilt with the new localized title and hello message.

<-- END_MAIN -->
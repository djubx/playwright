<-- START_DESCRIPTION -->

# stash_hive Flutter Package
==========================

The `stash_hive` package is a Flutter package that provides a simple and efficient way to store and retrieve data using the Hive NoSQL database. It is designed to be used with the `stash` package, which provides a simple and efficient way to store and retrieve data in a variety of formats.

## Features

*   Simple and efficient data storage and retrieval
*   Supports a variety of data formats, including JSON, XML, and binary data
*   Works seamlessly with the `stash` package
*   Supports both Android and iOS platforms

## When to Use

The `stash_hive` package is ideal for applications that require simple and efficient data storage and retrieval. It is particularly well-suited for applications that need to store small to medium-sized amounts of data, such as user preferences, application settings, and cached data.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

## Setup

To use the `stash_hive` package, you will need to add it to your Flutter project's `pubspec.yaml` file. You can do this by adding the following line to the `dependencies` section of the file:

```yml
dependencies:
  stash_hive: ^1.0.0
```

## Platform-Specific Configurations

### Android

To use the `stash_hive` package on Android, you will need to add the following line to your `AndroidManifest.xml` file:

```xml
<application
  ...
  android:allowBackup="true"
  android:fullBackupContent="true"
  ...
>
```

### iOS

To use the `stash_hive` package on iOS, you will need to add the following line to your `Info.plist` file:

```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```

## Using the Package

To use the `stash_hive` package, you will need to import it into your Dart file:

```dart
import 'package:stash_hive/stash_hive.dart';
```

You can then use the `StashHive` class to store and retrieve data:

```dart
void main() async {
  // Create a new StashHive instance
  final stash = await StashHive.open('my_stash');

  // Store some data
  await stash.put('key', 'value');

  // Retrieve the data
  final value = await stash.get('key');

  print(value); // prints 'value'
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:stash_hive/stash_hive.dart';

void main() async {
  // Create a new StashHive instance
  final stash = await StashHive.open('my_stash');

  // Run the app
  runApp(MyApp(stash));
}

class MyApp extends StatelessWidget {
  final StashHive _stash;

  MyApp(this._stash);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Stash Hive Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(_stash),
    );
  }
}

class MyHomePage extends StatefulWidget {
  final StashHive _stash;

  MyHomePage(this._stash);

  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _keyController = TextEditingController();
  final _valueController = TextEditingController();

  void _storeData() async {
    // Store the data
    await widget._stash.put(_keyController.text, _valueController.text);

    // Clear the text fields
    _keyController.clear();
    _valueController.clear();
  }

  void _retrieveData() async {
    // Retrieve the data
    final value = await widget._stash.get(_keyController.text);

    // Display the data
    _valueController.text = value;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Stash Hive Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            TextField(
              controller: _keyController,
              decoration: InputDecoration(
                labelText: 'Key',
              ),
            ),
            TextField(
              controller: _valueController,
              decoration: InputDecoration(
                labelText: 'Value',
              ),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _storeData,
              child: Text('Store Data'),
            ),
            SizedBox(height: 10),
            ElevatedButton(
              onPressed: _retrieveData,
              child: Text('Retrieve Data'),
            ),
          ],
        ),
      ),
    );
  }
}

// The app starts by creating a new StashHive instance and running the app.
// The app consists of two text fields for entering a key and a value, and two buttons for storing and retrieving data.
// When the store data button is pressed, the app stores the data in the StashHive instance and clears the text fields.
// When the retrieve data button is pressed, the app retrieves the data from the StashHive instance and displays it in the value text field.

// The app demonstrates the basic usage of the StashHive package, including storing and retrieving data.
// The app also shows how to use the StashHive instance to store and retrieve data in a Flutter app.
```

<-- END_MAIN -->
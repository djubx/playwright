```markdown
<!-- START_DESCRIPTION -->
# Google Native Mobile Ads Flutter Package

The `google_native_mobile_ads` package is a powerful tool for integrating native ads into your Flutter applications. It allows developers to display ads that match the look and feel of their app, providing a seamless user experience while monetizing their applications effectively. This package is particularly useful for developers looking to enhance their app's revenue through advertising without compromising on aesthetics.

## When to Use This Package
- **Monetization**: If you want to generate revenue from your app through ads.
- **User Experience**: When you want to maintain a native look and feel for ads, making them less intrusive.
- **Cross-Platform Development**: If you are developing for both Android and iOS and want a unified solution for displaying ads.

## Features
- **Native Ad Formats**: Supports various native ad formats, including banners, interstitials, and rewarded ads.
- **Customizable UI**: Allows developers to customize the ad layout to match their app's design.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS platforms.
- **Easy Integration**: Simple API for integrating ads into your Flutter application.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Google Native Mobile Ads

In this tutorial, we will walk through the setup process for the `google_native_mobile_ads` package and demonstrate how to use it in your Flutter application.

## Step 1: Add Dependency

To get started, add the `google_native_mobile_ads` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  google_native_mobile_ads: ^latest_version
```

Make sure to replace `^latest_version` with the latest version available on [pub.dev](https://pub.dev/packages/google_native_mobile_ads).

## Step 2: Platform-Specific Configuration

### Android Configuration
1. Open your `AndroidManifest.xml` file located at `android/app/src/main/AndroidManifest.xml`.
2. Add the following permissions inside the `<manifest>` tag:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>
```

3. Ensure you have the Google Mobile Ads SDK initialized. Add the following line in your `MainActivity.java` or `MainActivity.kt`:

```java
import com.google.android.gms.ads.MobileAds;

@Override
public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    MobileAds.initialize(this, initializationStatus -> {});
}
```

### iOS Configuration
1. Open your `Info.plist` file located at `ios/Runner/Info.plist`.
2. Add the following keys:

```xml
<key>GADApplicationIdentifier</key>
<string>YOUR_ADMOB_APP_ID</string>
```

Replace `YOUR_ADMOB_APP_ID` with your actual AdMob App ID.

## Step 3: Using the Package

Now that we have set up the package, we can start using it in our Flutter application. Below is a simple example of how to display a native ad.

```dart
import 'package:flutter/material.dart';
import 'package:google_native_mobile_ads/google_native_mobile_ads.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  NativeAd? _nativeAd;

  @override
  void initState() {
    super.initState();
    _loadNativeAd();
  }

  void _loadNativeAd() {
    _nativeAd = NativeAd(
      adUnitId: 'YOUR_AD_UNIT_ID',
      listener: NativeAdListener(
        onAdLoaded: (ad) {
          setState(() {});
        },
        onAdFailedToLoad: (ad, error) {
          ad.dispose();
        },
      ),
    )..load();
  }

  @override
  void dispose() {
    _nativeAd?.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Native Ads Example')),
      body: Center(
        child: _nativeAd != null
            ? Container(
                height: 100,
                child: AdWidget(ad: _nativeAd!),
              )
            : CircularProgressIndicator(),
      ),
    );
  }
}
```

In this example, we create a simple Flutter app that loads and displays a native ad. 

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of Google Native Mobile Ads

Here is a complete example of a Flutter application that demonstrates the use of the `google_native_mobile_ads` package.

```dart
import 'package:flutter/material.dart';
import 'package:google_native_mobile_ads/google_native_mobile_ads.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  NativeAd? _nativeAd; // Declare a variable to hold the native ad

  @override
  void initState() {
    super.initState();
    _loadNativeAd(); // Load the native ad when the widget is initialized
  }

  void _loadNativeAd() {
    // Create a new NativeAd instance
    _nativeAd = NativeAd(
      adUnitId: 'YOUR_AD_UNIT_ID', // Replace with your Ad Unit ID
      listener: NativeAdListener(
        onAdLoaded: (ad) {
          setState(() {}); // Update the UI when the ad is loaded
        },
        onAdFailedToLoad: (ad, error) {
          ad.dispose(); // Dispose of the ad if it fails to load
        },
      ),
    )..load(); // Load the ad
  }

  @override
  void dispose() {
    _nativeAd?.dispose(); // Dispose of the ad when the widget is disposed
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Native Ads Example')), // App bar title
      body: Center(
        child: _nativeAd != null
            ? Container(
                height: 100, // Set the height of the ad container
                child: AdWidget(ad: _nativeAd!), // Display the ad
              )
            : CircularProgressIndicator(), // Show a loading indicator while the ad is loading
      ),
    );
  }
}
```

### Application Flow Explanation
// The application starts with the `RealFlutter` widget.
// In the `initState` method, we call `_loadNativeAd` to initialize and load the native ad.
// The `_loadNativeAd` method creates a new `NativeAd` instance with a specified ad unit ID.
// We set up a listener to handle the ad's loading state.
// When the ad is successfully loaded, we call `setState` to rebuild the widget and display the ad.
// If the ad fails to load, we dispose of it to free up resources.
// In the `build` method, we check if the `_nativeAd` is not null.
// If it's loaded, we display it using an `AdWidget` inside a container.
// If it's still loading, we show a `CircularProgressIndicator` to indicate loading status.
// Finally, we ensure to dispose of the ad in the `dispose` method to prevent memory leaks.

<!-- END_MAIN -->
``` 

This structured approach provides a comprehensive overview of the `google_native_mobile_ads` package, guiding developers through its features, setup, and practical usage in a Flutter application.
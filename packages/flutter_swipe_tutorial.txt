<-- START_DESCRIPTION -->
# Flutter Swipe Tutorial Package
================================

The `flutter_swipe_tutorial` package is a Flutter library that provides a simple and easy-to-use API for creating swipe-based tutorials for your app. It allows you to create a series of swipe gestures that guide the user through a tutorial, highlighting key features and functionality.

## When to Use This Package
---------------------------

This package is perfect for apps that require a tutorial or onboarding process to help users understand the app's features and functionality. It's especially useful for apps with complex interfaces or unique navigation patterns.

## Features
------------

*   Easy-to-use API for creating swipe-based tutorials
*   Supports both Android and iOS platforms
*   Customizable swipe gestures and tutorial layout
*   Supports multiple tutorial steps and navigation

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->
# Setting Up the Package
-------------------------

To use the `flutter_swipe_tutorial` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_swipe_tutorial: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:flutter_swipe_tutorial/flutter_swipe_tutorial.dart';
```
### Step 3: Create a Tutorial

Create a new instance of the `SwipeTutorial` class and pass in the required parameters:
```dart
SwipeTutorial tutorial = SwipeTutorial(
  steps: [
    SwipeStep(
      title: 'Step 1',
      description: 'This is the first step',
      widget: Container(
        color: Colors.red,
        child: Text('Swipe right to continue'),
      ),
    ),
    SwipeStep(
      title: 'Step 2',
      description: 'This is the second step',
      widget: Container(
        color: Colors.blue,
        child: Text('Swipe left to go back'),
      ),
    ),
  ],
);
```
### Step 4: Display the Tutorial

Display the tutorial using the `showTutorial` method:
```dart
tutorial.showTutorial(context);
```
### Platform-Specific Details

*   Android: Make sure to add the `android.permission.INTERNET` permission to your `AndroidManifest.xml` file.
*   iOS: Make sure to add the `NSAppTransportSecurity` key to your `Info.plist` file.

### Configurations and Optimizations

*   You can customize the swipe gestures and tutorial layout by passing in custom parameters to the `SwipeTutorial` constructor.
*   You can also add custom navigation buttons to the tutorial by passing in a `Navigation` object to the `SwipeTutorial` constructor.

<-- END_TUTORIAL -->

<-- START_MAIN -->
```dart
import 'package:flutter/material.dart';
import 'package:flutter_swipe_tutorial/flutter_swipe_tutorial.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Swipe Tutorial',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  SwipeTutorial tutorial;

  @override
  void initState() {
    super.initState();
    tutorial = SwipeTutorial(
      steps: [
        SwipeStep(
          title: 'Step 1',
          description: 'This is the first step',
          widget: Container(
            color: Colors.red,
            child: Text('Swipe right to continue'),
          ),
        ),
        SwipeStep(
          title: 'Step 2',
          description: 'This is the second step',
          widget: Container(
            color: Colors.blue,
            child: Text('Swipe left to go back'),
          ),
        ),
      ],
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Swipe Tutorial'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            tutorial.showTutorial(context);
          },
          child: Text('Show Tutorial'),
        ),
      ),
    );
  }
}

// The app starts by displaying a button that says "Show Tutorial".
// When the button is pressed, the tutorial is displayed using the showTutorial method.
// The tutorial consists of two steps, each with a title, description, and widget.
// The user can swipe right to continue to the next step or swipe left to go back to the previous step.
// The tutorial is customizable, and the user can add custom navigation buttons.
```
<-- END_MAIN -->
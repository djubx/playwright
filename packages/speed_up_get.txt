<-- START_DESCRIPTION -->

# Speed Up Get Flutter Package
================================

The `speed_up_get` Flutter package is designed to optimize the performance of your Flutter applications by reducing the overhead of repeated `Get` requests. It provides a simple and efficient way to cache and reuse data, making it ideal for applications that require frequent data fetching.

## When to Use
--------------

Use the `speed_up_get` package when:

* You need to fetch data from a server or database repeatedly.
* You want to reduce the overhead of repeated `Get` requests.
* You need to cache and reuse data to improve performance.

## Features
------------

* Caches data to reduce repeated `Get` requests.
* Supports customizable cache duration and size.
* Works with both Android and iOS platforms.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `speed_up_get` package, follow these steps:

### Step 1: Add the Package to Your Pubspec.yaml File

```yml
dependencies:
  flutter:
    sdk: flutter
  speed_up_get: ^1.0.0
```

### Step 2: Import the Package in Your Dart File

```dart
import 'package:speed_up_get/speed_up_get.dart';
```

### Step 3: Initialize the Package

```dart
void main() {
  runApp(MyApp());
  SpeedUpGet.initialize();
}
```

### Platform-Specific Configurations

#### Android

No additional configurations are required for Android.

#### iOS

Add the following lines to your `Info.plist` file:

```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```

### Optimizations

To optimize the package, you can customize the cache duration and size.

```dart
SpeedUpGet.initialize(
  cacheDuration: Duration(hours: 1),
  cacheSize: 100,
);
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:speed_up_get/speed_up_get.dart';

void main() {
  runApp(MyApp());
  SpeedUpGet.initialize();
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Speed Up Get Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  String _data = '';

  // Step 1: Use the SpeedUpGet package to fetch data
  Future<void> _fetchData() async {
    final url = 'https://jsonplaceholder.typicode.com/todos/1';
    final response = await SpeedUpGet.get(url);

    // Step 2: Check if the data is cached
    if (response.isCached) {
      print('Data is cached');
    } else {
      print('Data is not cached');
    }

    // Step 3: Update the UI with the fetched data
    setState(() {
      _data = response.data.toString();
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Speed Up Get Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(_data),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _fetchData,
              child: Text('Fetch Data'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user clicks the "Fetch Data" button.
// 2. The _fetchData function is called, which uses the SpeedUpGet package to fetch data from the specified URL.
// 3. The SpeedUpGet package checks if the data is cached. If it is, it returns the cached data. If not, it fetches the data from the server.
// 4. The fetched data is then updated in the UI.

// In summary, the SpeedUpGet package optimizes the performance of the application by reducing the overhead of repeated Get requests.
// It caches data to reduce the number of requests made to the server, making the application faster and more efficient.
```

<-- END_MAIN -->
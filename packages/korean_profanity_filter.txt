```markdown
<!-- START_DESCRIPTION -->
# Korean Profanity Filter Flutter Package

The `korean_profanity_filter` package is a specialized tool designed for Flutter applications that need to filter out profanity in the Korean language. This package is particularly useful for chat applications, forums, or any platform where user-generated content is prevalent. By utilizing this package, developers can ensure a safer and more respectful environment for users by automatically detecting and censoring inappropriate language.

## When to Use This Package
- **Chat Applications**: To maintain a respectful conversation space.
- **Social Media Platforms**: To filter user comments and posts.
- **Gaming Applications**: To prevent toxic behavior in multiplayer environments.

## Features
- **Profanity Detection**: Identifies and filters out a wide range of Korean profanity.
- **Customizable**: Allows developers to add or remove words from the profanity list.
- **Performance**: Optimized for quick checks, ensuring minimal impact on application performance.

This package is a must-have for any Flutter developer looking to enhance user experience by managing inappropriate content effectively.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Korean Profanity Filter

## Installation
To add the `korean_profanity_filter` package to your Flutter project, include it in your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  korean_profanity_filter: ^1.0.0  # Check for the latest version on pub.dev
```

Run `flutter pub get` to install the package.

## Platform-Specific Details
### Android
No additional configuration is required for Android. Just ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file.

### iOS
For iOS, ensure that your deployment target is set to at least 10.0 in your `ios/Podfile`.

## Usage
To use the `korean_profanity_filter` package, you need to import it into your Dart file:

```dart
import 'package:korean_profanity_filter/korean_profanity_filter.dart';
```

### Basic Usage Example
Here’s how to use the package to filter a string:

```dart
void main() {
  final filter = KoreanProfanityFilter();
  String input = "이건 더러운 욕입니다"; // This is a dirty curse.
  
  // Check if the input contains profanity
  bool containsProfanity = filter.hasProfanity(input);
  
  // Filter the profanity
  String filteredText = filter.filter(input);
  
  print('Contains profanity: $containsProfanity'); // Output: true
  print('Filtered text: $filteredText'); // Output: "이건 ***** 욕입니다"
}
```

This example demonstrates how to check for profanity and filter it from a given string. The `hasProfanity` method returns a boolean indicating the presence of profanity, while the `filter` method returns the sanitized version of the input string.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using Korean Profanity Filter

```dart
import 'package:flutter/material.dart';
import 'package:korean_profanity_filter/korean_profanity_filter.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Korean Profanity Filter Example',
      home: ProfanityFilterScreen(),
    );
  }
}

class ProfanityFilterScreen extends StatefulWidget {
  @override
  _ProfanityFilterScreenState createState() => _ProfanityFilterScreenState();
}

class _ProfanityFilterScreenState extends State<ProfanityFilterScreen> {
  final KoreanProfanityFilter _filter = KoreanProfanityFilter();
  final TextEditingController _controller = TextEditingController();
  String _filteredText = '';

  void _filterText() {
    // Get the input text from the controller
    String inputText = _controller.text;
    
    // Check if the input contains profanity
    bool containsProfanity = _filter.hasProfanity(inputText);
    
    // Filter the profanity from the input text
    _filteredText = _filter.filter(inputText);
    
    // Update the UI with the filtered text
    setState(() {
      // Display whether profanity was found and the filtered text
      _filteredText = containsProfanity ? _filteredText : "No profanity detected.";
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Korean Profanity Filter'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            TextField(
              controller: _controller,
              decoration: InputDecoration(
                labelText: 'Enter text',
                border: OutlineInputBorder(),
              ),
            ),
            SizedBox(height: 10),
            ElevatedButton(
              onPressed: _filterText,
              child: Text('Filter Profanity'),
            ),
            SizedBox(height: 20),
            Text(
              'Filtered Text: $_filteredText',
              style: TextStyle(fontSize: 16),
            ),
          ],
        ),
      ),
    );
  }
}
```

### Application Flow Explanation
// The application starts with the `main` function, which runs the `RealFlutter` widget.
// The `RealFlutter` widget sets up a MaterialApp with a title and a home screen.
// The `ProfanityFilterScreen` is a stateful widget that manages the input and output of the profanity filter.
// Inside the `_ProfanityFilterScreenState`, we initialize the `KoreanProfanityFilter` and a `TextEditingController`.
// The `_filterText` method is called when the button is pressed. It retrieves the text from the input field, checks for profanity, and filters it.
// The filtered text is then displayed on the screen, updating the UI with the results.
// The user can enter any text, and upon pressing the button, they will see whether the text contained profanity and the filtered result.
<!-- END_MAIN -->
```

This structured blog post provides a comprehensive overview of the `korean_profanity_filter` package, guiding developers through its features, setup, and practical usage in a Flutter application.
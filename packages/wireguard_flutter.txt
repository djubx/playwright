<-- START_DESCRIPTION -->

Wireguard Flutter Package
==========================

The Wireguard Flutter package is a Flutter plugin that allows you to easily integrate Wireguard, a fast and secure VPN solution, into your Flutter app. This package provides a simple and convenient API for establishing and managing Wireguard connections.

When to Use
------------

You can use this package in any Flutter app that requires a secure and reliable VPN connection. Some examples include:

*   Creating a VPN app for mobile devices
*   Adding VPN capabilities to an existing app
*   Developing a custom VPN solution for a specific industry or use case

Features
--------

The Wireguard Flutter package offers the following features:

*   Establish and manage Wireguard connections
*   Configure Wireguard settings, such as server address and port
*   Monitor connection status and receive notifications
*   Support for both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
================

To use the Wireguard Flutter package, follow these steps:

### Step 1: Add the Package to Your Flutter Project

Add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  wireguard_flutter: ^0.1.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:wireguard_flutter/wireguard_flutter.dart';
```

### Step 3: Initialize the Wireguard Plugin

Initialize the Wireguard plugin before using it:

```dart
await WireguardFlutter.initialize();
```

### Step 4: Establish a Connection

Establish a Wireguard connection using the `connect` method:

```dart
await WireguardFlutter.connect(
  serverAddress: 'your_server_address',
  serverPort: 51820,
  privateKey: 'your_private_key',
);
```

### Step 5: Monitor Connection Status

Monitor the connection status using the `onStatusChanged` callback:

```dart
WireguardFlutter.onStatusChanged((status) {
  print('Connection status: $status');
});
```

### Platform-Specific Details

#### Android

On Android, you need to add the following permissions to your `AndroidManifest.xml` file:

```xml
<uses-permission android:name="android.permission.INTERNET" />
<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
```

#### iOS

On iOS, you need to add the following lines to your `Info.plist` file:

```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:wireguard_flutter/wireguard_flutter.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  String _connectionStatus = 'Disconnected';

  @override
  void initState() {
    super.initState();
    _initWireguard();
  }

  Future<void> _initWireguard() async {
    await WireguardFlutter.initialize();
    WireguardFlutter.onStatusChanged((status) {
      setState(() {
        _connectionStatus = status;
      });
    });
  }

  Future<void> _connect() async {
    await WireguardFlutter.connect(
      serverAddress: 'your_server_address',
      serverPort: 51820,
      privateKey: 'your_private_key',
    );
  }

  Future<void> _disconnect() async {
    await WireguardFlutter.disconnect();
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Wireguard Flutter Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Text(_connectionStatus),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _connect,
                child: Text('Connect'),
              ),
              SizedBox(height: 10),
              ElevatedButton(
                onPressed: _disconnect,
                child: Text('Disconnect'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app, and the Wireguard plugin is initialized.
// 2. The user clicks the "Connect" button, and the Wireguard connection is established.
// 3. The connection status is displayed on the screen.
// 4. The user can click the "Disconnect" button to disconnect from the Wireguard server.
// 5. The connection status is updated in real-time using the onStatusChanged callback.

// This example demonstrates how to use the Wireguard Flutter package to establish and manage a Wireguard connection.
// It also shows how to monitor the connection status and update the UI accordingly.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Snapchat Loginkit Flutter Package
=====================================

The `snapchat_loginkit` Flutter package allows developers to integrate Snapchat login functionality into their Flutter applications. This package provides a simple and convenient way to authenticate users with Snapchat and access their profile information.

### When to Use This Package

You can use this package in the following scenarios:

* To provide users with an alternative login option using their Snapchat account.
* To access users' Snapchat profile information, such as their username, profile picture, and more.
* To leverage Snapchat's authentication system to secure your application.

### Features

The `snapchat_loginkit` package offers the following features:

* Snapchat login functionality using the Snapchat Login Kit.
* Access to users' Snapchat profile information.
* Support for both Android and iOS platforms.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `snapchat_loginkit` package, follow these steps:

### Step 1: Add the Package to Your Project

Add the following dependency to your `pubspec.yaml` file:
```yml
dependencies:
  snapchat_loginkit: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Configure the Package

Create a new file called `snapchat_config.dart` and add the following code:
```dart
import 'package:snapchat_loginkit/snapchat_loginkit.dart';

const String snapchatClientId = 'YOUR_CLIENT_ID';
const String snapchatClientSecret = 'YOUR_CLIENT_SECRET';
const String snapchatRedirectUri = 'YOUR_REDIRECT_URI';
```
Replace the placeholders with your actual Snapchat client ID, client secret, and redirect URI.

### Step 3: Initialize the Package

In your `main.dart` file, add the following code:
```dart
import 'package:flutter/material.dart';
import 'package:snapchat_loginkit/snapchat_loginkit.dart';
import 'snapchat_config.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Snapchat Login Demo',
      home: SnapchatLoginScreen(),
    );
  }
}
```
### Platform-Specific Details

#### Android

In your `AndroidManifest.xml` file, add the following code:
```xml
<activity
    android:name="com.snapchat.kit.sdk.SnapKitActivity"
    android:exported="true" />
```
#### iOS

In your `Info.plist` file, add the following code:
```xml
<key>LSApplicationQueriesSchemes</key>
<array>
    <string>snapchat</string>
</array>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:snapchat_loginkit/snapchat_loginkit.dart';
import 'snapchat_config.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Snapchat Login Demo',
      home: SnapchatLoginScreen(),
    );
  }
}

class SnapchatLoginScreen extends StatefulWidget {
  @override
  _SnapchatLoginScreenState createState() => _SnapchatLoginScreenState();
}

class _SnapchatLoginScreenState extends State<SnapchatLoginScreen> {
  final SnapchatLoginKit _snapchatLoginKit = SnapchatLoginKit();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Snapchat Login Demo'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: _loginWithSnapchat,
          child: Text('Login with Snapchat'),
        ),
      ),
    );
  }

  Future<void> _loginWithSnapchat() async {
    // Step 1: Initialize the Snapchat login kit
    await _snapchatLoginKit.init(snapchatClientId, snapchatClientSecret, snapchatRedirectUri);

    // Step 2: Start the Snapchat login flow
    final result = await _snapchatLoginKit.startLoginFlow();

    // Step 3: Handle the login result
    if (result.isSuccess) {
      final user = result.user;
      print('Logged in user: ${user.username}');
    } else {
      print('Login failed: ${result.error}');
    }
  }
}

// The application flow is as follows:
// 1. The user clicks the "Login with Snapchat" button.
// 2. The `_loginWithSnapchat` function is called, which initializes the Snapchat login kit.
// 3. The Snapchat login flow is started, which redirects the user to the Snapchat app or website.
// 4. The user authenticates with Snapchat and authorizes the app to access their profile information.
// 5. The Snapchat login kit redirects the user back to the app with an authorization code.
// 6. The app exchanges the authorization code for an access token, which is used to access the user's profile information.
// 7. The user's profile information is retrieved and displayed in the app.

// Final summary: The code flows by first initializing the Snapchat login kit, then starting the login flow, and finally handling the login result. The application flow involves redirecting the user to Snapchat for authentication and authorization, and then retrieving the user's profile information using the access token.
```
<-- END_MAIN -->
```markdown
<-- START_DESCRIPTION -->

# Overview of the `proste_indexed_stack` Flutter Package

The `proste_indexed_stack` package is a powerful Flutter widget that extends the functionality of the standard `IndexedStack` widget. It allows developers to manage multiple child widgets, displaying only one at a time based on the current index. This package is particularly useful in scenarios where you need to maintain the state of multiple widgets while only one is visible, such as in tabbed navigation or multi-step forms.

## When to Use `proste_indexed_stack`

- **Tabbed Navigation**: When building applications with tabbed interfaces, where each tab maintains its state independently.
- **Multi-step Forms**: In forms that require users to navigate through multiple steps, preserving the input data at each step.
- **Conditional Views**: When you need to switch between different views based on user actions or application state.

## Features

- **State Preservation**: Keeps the state of each child widget intact when switching between them.
- **Efficient Rendering**: Only the active widget is rendered, improving performance.
- **Flexible Configuration**: Easily configurable to suit various use cases with minimal setup.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using `proste_indexed_stack`

In this section, we'll walk through the setup process for the `proste_indexed_stack` package and demonstrate how to integrate it into a Flutter project.

## Installation

To use `proste_indexed_stack`, add it to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  proste_indexed_stack: ^1.0.0
```

Run `flutter pub get` to install the package.

## Platform-Specific Details

### Android

No additional configuration is required for Android. Ensure your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```gradle
android {
    defaultConfig {
        minSdkVersion 21
    }
}
```

### iOS

For iOS, ensure your deployment target is set to at least iOS 9.0 in your `ios/Podfile`:

```ruby
platform :ios, '9.0'
```

## Using `proste_indexed_stack`

To use the `proste_indexed_stack`, import it into your Dart file:

```dart
import 'package:proste_indexed_stack/proste_indexed_stack.dart';
```

You can then use the `ProsteIndexedStack` widget in your widget tree, specifying the `index` to control which child is visible.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:proste_indexed_stack/proste_indexed_stack.dart';

void main() {
  runApp(RealFlutterApp());
}

class RealFlutterApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: HomeScreen(),
    );
  }
}

class HomeScreen extends StatefulWidget {
  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  int _currentIndex = 0; // Tracks the current index of the stack

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Proste Indexed Stack Example'),
      ),
      body: ProsteIndexedStack(
        index: _currentIndex, // Sets the current visible child
        children: <Widget>[
          Center(child: Text('Home View')), // First child widget
          Center(child: Text('Search View')), // Second child widget
          Center(child: Text('Profile View')), // Third child widget
        ],
      ),
      bottomNavigationBar: BottomNavigationBar(
        currentIndex: _currentIndex, // Reflects the current index
        onTap: (int index) {
          setState(() {
            _currentIndex = index; // Updates the index on tap
          });
        },
        items: const <BottomNavigationBarItem>[
          BottomNavigationBarItem(
            icon: Icon(Icons.home),
            label: 'Home',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.search),
            label: 'Search',
          ),
          BottomNavigationBarItem(
            icon: Icon(Icons.person),
            label: 'Profile',
          ),
        ],
      ),
    );
  }
}
```

// The application starts with the `RealFlutterApp` class, which is a stateless widget.
// It sets up the `MaterialApp` with `HomeScreen` as the home widget.
// `HomeScreen` is a stateful widget that manages the current index of the `ProsteIndexedStack`.
// The `ProsteIndexedStack` widget displays one of its children based on the `_currentIndex`.
// The `BottomNavigationBar` allows users to switch between different views by updating `_currentIndex`.
// Each tap on the navigation bar updates the state, causing the `ProsteIndexedStack` to display the corresponding child widget.

<-- END_MAIN -->
```

This blog post provides a comprehensive guide to using the `proste_indexed_stack` package in Flutter applications, from setup to implementation, with a complete example demonstrating its key features.
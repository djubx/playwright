<-- START_DESCRIPTION -->

# Curved Drawer Fork Flutter Package
=====================================

The `curved_drawer_fork` Flutter package is a fork of the popular `curved_drawer` package, providing a customizable and visually appealing drawer for Flutter applications. This package is ideal for developers who want to add a unique and stylish drawer to their app.

### Features

* Customizable drawer shape and animation
* Support for both left and right drawer positions
* Adjustable drawer width and height
* Optional drawer header and footer
* Compatible with both Android and iOS platforms

### When to Use

The `curved_drawer_fork` package is perfect for apps that require a stylish and customizable drawer. It's ideal for:

* Social media apps
* Productivity apps
* News and media apps
* Any app that requires a unique and visually appealing drawer

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Curved Drawer Fork Package
=============================================

To use the `curved_drawer_fork` package, follow these steps:

### Step 1: Add the Package to Your Pubspec.yaml File

```yml
dependencies:
  curved_drawer_fork: ^1.0.0
```

### Step 2: Import the Package in Your Dart File

```dart
import 'package:curved_drawer_fork/curved_drawer_fork.dart';
```

### Step 3: Create a Curved Drawer

```dart
CurvedDrawer(
  // Optional: specify the drawer width
  width: 300,
  // Optional: specify the drawer height
  height: 500,
  // Optional: specify the drawer header
  header: Text('Drawer Header'),
  // Optional: specify the drawer footer
  footer: Text('Drawer Footer'),
  // Required: specify the drawer items
  items: [
    ListTile(
      title: Text('Item 1'),
      onTap: () {
        // Handle item tap
      },
    ),
    ListTile(
      title: Text('Item 2'),
      onTap: () {
        // Handle item tap
      },
    ),
  ],
)
```

### Platform-Specific Details

* Android: The `curved_drawer_fork` package uses the `android:clipToPadding` attribute to ensure the drawer is properly clipped. Make sure to set this attribute to `true` in your `AndroidManifest.xml` file.
* iOS: The `curved_drawer_fork` package uses the `clipToBounds` property to ensure the drawer is properly clipped. Make sure to set this property to `true` in your `Info.plist` file.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:curved_drawer_fork/curved_drawer_fork.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Curved Drawer Fork Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _scaffoldKey = GlobalKey<ScaffoldState>();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      key: _scaffoldKey,
      appBar: AppBar(
        title: Text('Curved Drawer Fork Demo'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            _scaffoldKey.currentState.openDrawer();
          },
          child: Text('Open Drawer'),
        ),
      ),
      drawer: CurvedDrawer(
        // Optional: specify the drawer width
        width: 300,
        // Optional: specify the drawer height
        height: 500,
        // Optional: specify the drawer header
        header: Text('Drawer Header'),
        // Optional: specify the drawer footer
        footer: Text('Drawer Footer'),
        // Required: specify the drawer items
        items: [
          ListTile(
            title: Text('Item 1'),
            onTap: () {
              // Handle item tap
            },
          ),
          ListTile(
            title: Text('Item 2'),
            onTap: () {
              // Handle item tap
            },
          ),
        ],
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user presses the "Open Drawer" button.
// 2. The `_scaffoldKey.currentState.openDrawer()` method is called, which opens the drawer.
// 3. The drawer is displayed with the specified width, height, header, footer, and items.
// 4. The user can tap on the drawer items to handle the corresponding actions.
// 5. The drawer can be closed by tapping on the screen outside the drawer or by pressing the back button.

```

<-- END_MAIN -->
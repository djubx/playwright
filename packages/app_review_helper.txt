<-- START_DESCRIPTION -->

# App Review Helper Flutter Package
=====================================

The `app_review_helper` Flutter package is a utility library that helps developers to request reviews from users and improve their app's visibility on the app stores. It provides a simple and easy-to-use API to prompt users to leave a review, and also allows developers to track the review process.

## When to Use This Package
---------------------------

You can use this package in the following scenarios:

* To request reviews from users after they have used your app for a certain period of time.
* To prompt users to leave a review after they have completed a specific task or achieved a milestone within your app.
* To track the review process and analyze the feedback from users.

## Features
------------

The `app_review_helper` package provides the following features:

* Request reviews from users using a simple and customizable API.
* Track the review process and receive callbacks when the user leaves a review.
* Supports both Android and iOS platforms.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `app_review_helper` package, you need to add it to your Flutter project's `pubspec.yaml` file:

```yml
dependencies:
  app_review_helper: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Platform-Specific Configurations
-----------------------------------

### Android

To use the `app_review_helper` package on Android, you need to add the following configuration to your `AndroidManifest.xml` file:

```xml
<application>
  ...
  <meta-data android:name="com.google.android.gms.version" android:value="@integer/google_play_services_version" />
</application>
```

### iOS

To use the `app_review_helper` package on iOS, you need to add the following configuration to your `Info.plist` file:

```xml
<key>NSAppReview</key>
<true/>
```

## Using the Package
---------------------

To use the `app_review_helper` package, you need to import it in your Dart file:

```dart
import 'package:app_review_helper/app_review_helper.dart';
```

Then, you can use the `AppReviewHelper` class to request reviews from users:

```dart
AppReviewHelper.requestReview();
```

You can also track the review process using the `AppReviewHelper` class:

```dart
AppReviewHelper.onReviewSubmitted.listen((review) {
  print('Review submitted: $review');
});
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:app_review_helper/app_review_helper.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('App Review Helper Example'),
        ),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              // Request review from user
              AppReviewHelper.requestReview();
            },
            child: Text('Request Review'),
          ),
        ),
      ),
    );
  }

  @override
  void initState() {
    super.initState();
    // Track review process
    AppReviewHelper.onReviewSubmitted.listen((review) {
      print('Review submitted: $review');
    });
  }
}

// Application flow:
// 1. The user opens the app and is presented with a button to request a review.
// 2. When the user clicks the button, the `AppReviewHelper.requestReview()` method is called.
// 3. The `AppReviewHelper` class prompts the user to leave a review using a platform-specific dialog.
// 4. If the user submits a review, the `AppReviewHelper.onReviewSubmitted` stream is notified.
// 5. The app listens to the `AppReviewHelper.onReviewSubmitted` stream and prints a message to the console when a review is submitted.

// Summary:
// The app uses the `AppReviewHelper` package to request reviews from users and track the review process.
// The app presents a button to the user to request a review, and when clicked, the `AppReviewHelper.requestReview()` method is called.
// The app listens to the `AppReviewHelper.onReviewSubmitted` stream to track when a review is submitted.
```

<-- END_MAIN -->
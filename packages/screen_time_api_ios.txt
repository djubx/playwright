```markdown
<!-- START_DESCRIPTION -->
# Overview of the screen_time_api_ios Flutter Package

The `screen_time_api_ios` package is a Flutter plugin designed to provide developers with access to screen time data on iOS devices. This package allows you to retrieve information about the amount of time users spend on their devices, which can be particularly useful for applications focused on health, productivity, or parental control.

## When to Use This Package
- **Health and Wellness Apps**: To help users monitor their screen time and promote healthier usage habits.
- **Parental Control Apps**: To track and limit children's screen time.
- **Productivity Tools**: To analyze and improve user productivity by providing insights into device usage.

## Key Features
- Access to daily and weekly screen time statistics.
- Ability to retrieve app-specific usage data.
- Support for both foreground and background usage tracking.
- Easy integration with existing Flutter applications.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Setting Up the screen_time_api_ios Package

## Installation
To use the `screen_time_api_ios` package, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  screen_time_api_ios: ^latest_version
```

Make sure to replace `latest_version` with the most recent version available on [pub.dev](https://pub.dev/packages/screen_time_api_ios).

## iOS Configuration
Since this package is specific to iOS, you need to ensure that your app has the necessary permissions to access screen time data. Follow these steps:

1. Open your `Info.plist` file located in the `ios/Runner` directory.
2. Add the following key to request permission for screen time access:

```xml
<key>NSAppleMusicUsageDescription</key>
<string>This app requires access to screen time data.</string>
```

3. Ensure that your app's deployment target is set to iOS 12.0 or higher.

## Android Configuration
Currently, this package does not support Android. It is exclusively designed for iOS devices.

## Usage
Once you have installed the package and configured your iOS app, you can start using it in your Flutter application. Below is a simple example of how to retrieve screen time data.

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of Using screen_time_api_ios

```dart
import 'package:flutter/material.dart';
import 'package:screen_time_api_ios/screen_time_api_ios.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Variable to hold screen time data
  String screenTimeData = "Fetching screen time data...";

  @override
  void initState() {
    super.initState();
    // Fetch screen time data when the app initializes
    _fetchScreenTimeData();
  }

  // Function to fetch screen time data
  Future<void> _fetchScreenTimeData() async {
    try {
      // Request permission to access screen time data
      await ScreenTimeApi.requestPermission();

      // Retrieve daily screen time data
      final dailyData = await ScreenTimeApi.getDailyScreenTime();
      // Update the state with the fetched data
      setState(() {
        screenTimeData = "Daily Screen Time: $dailyData";
      });
    } catch (e) {
      // Handle any errors that occur during data fetching
      setState(() {
        screenTimeData = "Error fetching data: $e";
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Screen Time API Example'),
        ),
        body: Center(
          child: Text(screenTimeData), // Display the screen time data
        ),
      ),
    );
  }
}
```

// The above code is a simple Flutter application that demonstrates how to use the screen_time_api_ios package.
// 1. The app starts by running the RealFlutter widget.
// 2. In the _RealFlutterState class, we define a variable to hold the screen time data.
// 3. In the initState method, we call _fetchScreenTimeData to retrieve the screen time data when the app initializes.
// 4. The _fetchScreenTimeData function requests permission to access screen time data and retrieves the daily screen time.
// 5. If successful, it updates the screenTimeData variable, which is displayed in the center of the app.
// 6. If an error occurs, it catches the exception and updates the screenTimeData variable with an error message.
// 7. The build method constructs the UI, showing the screen time data or an error message.

<!-- END_MAIN -->
``` 

This structured approach provides a comprehensive overview, setup instructions, and a complete example of how to use the `screen_time_api_ios` package in a Flutter application.
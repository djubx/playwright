```markdown
<-- START_DESCRIPTION -->

# Flutter Image Slideshow Package

The `flutter_image_slideshow` package is a versatile and easy-to-use Flutter package designed to create image slideshows in your Flutter applications. This package is particularly useful when you want to display a series of images in a carousel format, providing a smooth and visually appealing user experience.

## Features

- **Auto Play**: Automatically transitions between images after a specified duration.
- **Manual Control**: Users can swipe to navigate through images.
- **Customizable**: Offers options to customize the transition duration, indicator color, and more.
- **Platform Compatibility**: Works seamlessly on both Android and iOS platforms.

## When to Use

- **Product Galleries**: Showcase multiple product images in e-commerce apps.
- **Onboarding Screens**: Display a series of onboarding images or tutorials.
- **Portfolio Displays**: Present a collection of images in a portfolio app.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using Flutter Image Slideshow

In this tutorial, we will walk through the process of setting up and using the `flutter_image_slideshow` package in a Flutter project. We will cover platform-specific configurations for both Android and iOS.

## Setup

1. **Add Dependency**

   Add the `flutter_image_slideshow` package to your `pubspec.yaml` file:

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     flutter_image_slideshow: ^0.1.0
   ```

2. **Install Packages**

   Run the following command to install the new package:

   ```bash
   flutter pub get
   ```

3. **Android Configuration**

   No specific configuration is required for Android. Ensure your `minSdkVersion` in `android/app/build.gradle` is set to at least 16:

   ```gradle
   defaultConfig {
       minSdkVersion 16
   }
   ```

4. **iOS Configuration**

   Ensure your iOS deployment target is set to at least 9.0 in `ios/Podfile`:

   ```ruby
   platform :ios, '9.0'
   ```

## Usage

To use the `flutter_image_slideshow` package, import it into your Dart file:

```dart
import 'package:flutter_image_slideshow/flutter_image_slideshow.dart';
```

You can then use the `ImageSlideshow` widget to create a slideshow:

```dart
ImageSlideshow(
  width: double.infinity,
  height: 200,
  initialPage: 0,
  indicatorColor: Colors.blue,
  autoPlayInterval: 3000,
  isLoop: true,
  children: [
    Image.asset('assets/image1.jpg', fit: BoxFit.cover),
    Image.asset('assets/image2.jpg', fit: BoxFit.cover),
    Image.asset('assets/image3.jpg', fit: BoxFit.cover),
  ],
)
```

<-- END_TUTORIAL -->

<-- MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_image_slideshow/flutter_image_slideshow.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Image Slideshow Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: SlideshowScreen(),
    );
  }
}

class SlideshowScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Image Slideshow Example'),
      ),
      body: Center(
        child: ImageSlideshow(
          // Set the width of the slideshow to fill the screen
          width: double.infinity,
          // Set the height of the slideshow
          height: 200,
          // Set the initial page to display
          initialPage: 0,
          // Set the color of the indicator
          indicatorColor: Colors.blue,
          // Set the interval for auto-play in milliseconds
          autoPlayInterval: 3000,
          // Enable looping of the slideshow
          isLoop: true,
          // Add images to the slideshow
          children: [
            Image.asset('assets/image1.jpg', fit: BoxFit.cover),
            Image.asset('assets/image2.jpg', fit: BoxFit.cover),
            Image.asset('assets/image3.jpg', fit: BoxFit.cover),
          ],
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The `main` function initializes the app by running the `RealFlutter` widget.
// 2. `RealFlutter` is a stateless widget that sets up the MaterialApp with a title and theme.
// 3. The home screen of the app is set to `SlideshowScreen`.
// 4. `SlideshowScreen` is a stateless widget that builds a Scaffold with an AppBar and a Center widget.
// 5. Inside the Center widget, an `ImageSlideshow` is created with specified width, height, and other properties.
// 6. The slideshow contains three images, which are displayed in a loop with an auto-play interval of 3 seconds.
// 7. The indicator color is set to blue, and the slideshow is set to loop indefinitely.

```

<-- END_MAIN -->
```
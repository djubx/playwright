```markdown
<!-- START_DESCRIPTION -->
# Midtrans Snap Flutter Package

The **midtrans_snap** package is a Flutter plugin that allows developers to integrate the Midtrans payment gateway into their applications seamlessly. Midtrans is a popular payment processing service in Indonesia, providing a variety of payment methods, including credit cards, bank transfers, and e-wallets. This package simplifies the process of implementing payment features in Flutter apps, making it easier for developers to handle transactions securely.

## When to Use This Package
You should consider using the **midtrans_snap** package when:
- You are developing an e-commerce application that requires payment processing.
- You want to provide users with multiple payment options.
- You need a reliable and secure payment gateway that complies with local regulations.

## Key Features
- **Multiple Payment Methods**: Supports various payment options, including credit cards, bank transfers, and e-wallets.
- **Easy Integration**: Simple setup process with clear documentation.
- **Secure Transactions**: Ensures that all transactions are processed securely.
- **Customizable UI**: Allows developers to customize the payment interface to match their app's design.
- **Real-time Notifications**: Provides real-time updates on transaction status.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Tutorial: Setting Up midtrans_snap in Your Flutter Project

In this tutorial, we will walk through the setup process for the **midtrans_snap** package and demonstrate how to use it in a Flutter application.

## Step 1: Add Dependency
To get started, add the **midtrans_snap** package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  midtrans_snap: ^latest_version
```

Make sure to replace `^latest_version` with the latest version available on [pub.dev](https://pub.dev/packages/midtrans_snap).

## Step 2: Platform-Specific Configuration

### Android Configuration
1. Open `android/app/build.gradle` and ensure you have the following configurations:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21 // Ensure this is set to at least 21
    }
}
```

2. Add the following permissions in `AndroidManifest.xml`:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
```

### iOS Configuration
1. Open `ios/Runner/Info.plist` and add the following:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

2. Ensure you have the correct deployment target set in your `ios/Podfile`:

```ruby
platform :ios, '10.0'
```

## Step 3: Initialize Midtrans Snap
In your Flutter application, you need to initialize the Midtrans Snap SDK. This typically involves setting up your client key and other configurations.

```dart
import 'package:midtrans_snap/midtrans_snap.dart';

void main() {
  runApp(MyApp());
  MidtransSnap.setClientKey('YOUR_CLIENT_KEY'); // Replace with your Midtrans client key
}
```

## Step 4: Implement Payment
You can now implement the payment process in your application. Hereâ€™s a simple example of how to initiate a payment:

```dart
void initiatePayment() async {
  final response = await MidtransSnap.createTransaction({
    'transaction_details': {
      'order_id': 'order-123',
      'gross_amount': 10000,
    },
    'credit_card': {
      'secure': true,
    },
  });

  if (response['status_code'] == '200') {
    // Payment successful
  } else {
    // Handle payment failure
  }
}
```

This function creates a transaction and handles the response accordingly.

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of Using midtrans_snap

Here is a complete example of a Flutter application that demonstrates how to use the **midtrans_snap** package.

```dart
import 'package:flutter/material.dart';
import 'package:midtrans_snap/midtrans_snap.dart';

void main() {
  runApp(RealFlutter());
  MidtransSnap.setClientKey('YOUR_CLIENT_KEY'); // Replace with your Midtrans client key
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Midtrans Snap Example',
      home: PaymentScreen(),
    );
  }
}

class PaymentScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Payment Screen'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            initiatePayment();
          },
          child: Text('Pay Now'),
        ),
      ),
    );
  }

  void initiatePayment() async {
    // Create a transaction with necessary details
    final response = await MidtransSnap.createTransaction({
      'transaction_details': {
        'order_id': 'order-123', // Unique order ID
        'gross_amount': 10000, // Amount to be charged
      },
      'credit_card': {
        'secure': true, // Enable secure credit card payment
      },
    });

    // Check the response status
    if (response['status_code'] == '200') {
      // Payment successful, handle success
      print('Payment successful: ${response['transaction_id']}');
    } else {
      // Payment failed, handle failure
      print('Payment failed: ${response['status_message']}');
    }
  }
}

// Application Flow Explanation:
// 1. The app starts with the main function, initializing the Midtrans Snap client key.
// 2. The RealFlutter widget is the root of the application, setting up the MaterialApp.
// 3. The PaymentScreen widget displays a button that triggers the payment process when pressed.
// 4. The initiatePayment function creates a transaction with the Midtrans Snap API.
// 5. The response is checked for success or failure, and appropriate actions are taken based on the result.

```
<!-- END_MAIN -->
``` 

This structured approach provides a comprehensive overview of the **midtrans_snap** package, guiding developers through its features, setup, and practical implementation in a Flutter application.
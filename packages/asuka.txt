Here's a detailed technical blog on the "asuka" Flutter package, structured as requested.

<!-- START_DESCRIPTION -->
# Asuka Flutter Package

The **Asuka** package is a powerful Flutter library designed to enhance the user experience by providing a simple and elegant way to display dialogs, snack bars, and bottom sheets. It is particularly useful for developers looking to create a consistent and visually appealing UI across their applications.

## When to Use Asuka

You should consider using the Asuka package when:
- You need to display notifications or alerts in a user-friendly manner.
- You want to implement custom dialogs or bottom sheets that align with your app's design.
- You are looking for a lightweight solution to manage user interactions without the overhead of complex state management.

## Key Features
- **Customizable Dialogs**: Easily create and customize dialogs to fit your app's theme.
- **Snack Bars**: Display snack bars with various styles and durations.
- **Bottom Sheets**: Implement bottom sheets that can be swiped away or dismissed.
- **Easy Integration**: Simple setup and usage, making it easy to integrate into existing Flutter applications.

Overall, Asuka provides a streamlined approach to handling user interactions, making it a valuable addition to any Flutter developer's toolkit.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Asuka

## Step 1: Adding Asuka to Your Project

To get started with the Asuka package, you need to add it to your `pubspec.yaml` file. Open the file and add the following dependency:

```yaml
dependencies:
  flutter:
    sdk: flutter
  asuka: ^2.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command to install it:

```bash
flutter pub get
```

## Step 2: Basic Setup

### Android Configuration

For Android, ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

### iOS Configuration

For iOS, you may need to update your `ios/Podfile` to ensure compatibility:

```ruby
platform :ios, '10.0'  # Ensure this is set to at least 10.0
```

## Step 3: Using Asuka in Your Application

To use Asuka, you need to import it into your Dart file:

```dart
import 'package:asuka/asuka.dart' as asuka;
```

### Displaying a Snack Bar

You can display a snack bar using the following code:

```dart
asuka.showSnackBar(
  SnackBar(
    content: Text('This is a snack bar!'),
    duration: Duration(seconds: 2),
  ),
);
```

### Displaying a Dialog

To show a dialog, use:

```dart
asuka.showDialog(
  builder: (context) => AlertDialog(
    title: Text('Dialog Title'),
    content: Text('This is a dialog message.'),
    actions: [
      TextButton(
        onPressed: () => asuka.pop(),
        child: Text('Close'),
      ),
    ],
  ),
);
```

### Displaying a Bottom Sheet

To display a bottom sheet, you can use:

```dart
asuka.showModalBottomSheet(
  context: context,
  builder: (context) => Container(
    height: 200,
    child: Center(child: Text('This is a bottom sheet')),
  ),
);
```

With these simple steps, you can effectively integrate the Asuka package into your Flutter application and enhance user interactions.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using Asuka

```dart
import 'package:flutter/material.dart';
import 'package:asuka/asuka.dart' as asuka;

void main() {
  runApp(MyApp());
}

// Main application widget
class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Asuka Example',
      navigatorKey: asuka.asukaHeroKey, // Set the navigator key for Asuka
      home: HomeScreen(),
    );
  }
}

// Home screen widget
class HomeScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Asuka Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: () {
                // Show a snack bar when the button is pressed
                asuka.showSnackBar(
                  SnackBar(
                    content: Text('This is a snack bar!'),
                    duration: Duration(seconds: 2),
                  ),
                );
              },
              child: Text('Show Snack Bar'),
            ),
            ElevatedButton(
              onPressed: () {
                // Show a dialog when the button is pressed
                asuka.showDialog(
                  builder: (context) => AlertDialog(
                    title: Text('Dialog Title'),
                    content: Text('This is a dialog message.'),
                    actions: [
                      TextButton(
                        onPressed: () => asuka.pop(), // Close the dialog
                        child: Text('Close'),
                      ),
                    ],
                  ),
                );
              },
              child: Text('Show Dialog'),
            ),
            ElevatedButton(
              onPressed: () {
                // Show a bottom sheet when the button is pressed
                asuka.showModalBottomSheet(
                  context: context,
                  builder: (context) => Container(
                    height: 200,
                    child: Center(child: Text('This is a bottom sheet')),
                  ),
                );
              },
              child: Text('Show Bottom Sheet'),
            ),
          ],
        ),
      ),
    );
  }
}

// Application flow explanation:
// 1. The main function initializes the app and sets up the MyApp widget.
// 2. MyApp sets the navigator key for Asuka and defines the home screen.
// 3. HomeScreen contains three buttons to demonstrate the features of Asuka:
//    - The first button shows a snack bar with a message.
//    - The second button displays a dialog with a title and message, along with a close button.
//    - The third button presents a bottom sheet with a simple message.
// 4. Each button uses Asuka's methods to display the respective UI elements, enhancing user interaction.
```
<!-- END_MAIN -->

In this blog, we explored the Asuka Flutter package, detailing its features, setup process, and providing a complete example of its usage. The code demonstrates how to effectively use Asuka to enhance user interactions in a Flutter application, making it a valuable tool for developers.
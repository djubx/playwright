<-- START_DESCRIPTION -->

# Nonce Flutter Package
=======================

The nonce package in Flutter is used to generate cryptographically secure random numbers, which can be used as nonces in various cryptographic protocols. A nonce is a number that is used once in a cryptographic communication. It is often used to prevent replay attacks.

### Features

*   Generates cryptographically secure random numbers
*   Can be used to prevent replay attacks
*   Easy to use and integrate into existing Flutter projects

### When to Use

*   When you need to generate a unique, cryptographically secure random number for use in a cryptographic protocol
*   When you need to prevent replay attacks in your application

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

## Setup

To use the nonce package in your Flutter project, you need to add it to your `pubspec.yaml` file:

```yml
dependencies:
  nonce: ^1.0.0
```

Then, run `flutter pub get` to get the package.

## Usage

To generate a nonce, you can use the `Nonce` class:

```dart
import 'package:nonce/nonce.dart';

void main() {
  final nonce = Nonce();
  final bytes = nonce.bytes(32);
  print(bytes);
}
```

This will generate a 32-byte nonce.

### Platform-Specific Details

The nonce package uses the `dart:math` library to generate random numbers. This library is implemented differently on different platforms.

*   On Android, the `dart:math` library uses the Android `SecureRandom` class to generate random numbers.
*   On iOS, the `dart:math` library uses the iOS `SecRandomCopyBytes` function to generate random numbers.

### Configurations and Optimizations

There are no configurations or optimizations needed to use the nonce package.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
// Import the nonce package
import 'package:nonce/nonce.dart';

// Import the Flutter framework
import 'package:flutter/material.dart';

// Create a new Flutter app
void main() {
  runApp(RealFlutter());
}

// Create a new stateless widget
class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Create a new Nonce object
    final nonce = Nonce();

    // Generate a 32-byte nonce
    final bytes = nonce.bytes(32);

    // Convert the nonce to a hexadecimal string
    final hex = bytes.map((byte) => byte.toRadixString(16).padLeft(2, '0')).join();

    // Create a new Text widget to display the nonce
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Nonce Example'),
        ),
        body: Center(
          child: Text(hex),
        ),
      ),
    );
  }
}

// The app starts by running the main function, which creates a new RealFlutter app.
// The RealFlutter app creates a new stateless widget, which builds a new Nonce object.
// The Nonce object generates a 32-byte nonce, which is converted to a hexadecimal string.
// The hexadecimal string is then displayed in a Text widget.

// This is a very basic example of how to use the nonce package in a Flutter app.
// In a real-world app, you would likely want to handle errors and exceptions more robustly.
// You might also want to use the nonce in a more secure way, such as by hashing it with a secret key.
```

<-- END_MAIN -->
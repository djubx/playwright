<-- START_DESCRIPTION -->

# alice_get_connect Flutter Package
=====================================

The `alice_get_connect` Flutter package is a powerful tool for managing HTTP requests and WebSocket connections in your Flutter applications. It provides a simple and intuitive API for sending HTTP requests and establishing WebSocket connections, making it easier to communicate with your backend services.

### When to Use This Package

You should use this package when you need to make HTTP requests or establish WebSocket connections in your Flutter application. This package is particularly useful when you need to:

* Send HTTP requests to your backend services
* Establish WebSocket connections for real-time communication
* Handle HTTP requests and WebSocket connections in a centralized manner

### Features

The `alice_get_connect` package provides the following features:

* Simple and intuitive API for sending HTTP requests and establishing WebSocket connections
* Support for HTTP GET, POST, PUT, DELETE, and other request methods
* Support for WebSocket connections and real-time communication
* Centralized management of HTTP requests and WebSocket connections

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `alice_get_connect` package in your Flutter application, you need to add it to your `pubspec.yaml` file:

```yml
dependencies:
  alice_get_connect: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Platform-Specific Configurations

For Android, you need to add the following configuration to your `AndroidManifest.xml` file:

```xml
<uses-permission android:name="android.permission.INTERNET" />
```

For iOS, you need to add the following configuration to your `Info.plist` file:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

### Using the Package

To use the package, you need to import it in your Dart file:

```dart
import 'package:alice_get_connect/alice_get_connect.dart';
```

Then, you can use the `AliceGetConnect` class to send HTTP requests and establish WebSocket connections:

```dart
AliceGetConnect alice = AliceGetConnect();

// Send an HTTP GET request
alice.get('https://example.com/api/data').then((response) {
  print(response.body);
});

// Establish a WebSocket connection
alice.ws('ws://example.com/ws').then((socket) {
  socket.onMessage((message) {
    print(message);
  });
});
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:alice_get_connect/alice_get_connect.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Alice Get Connect Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  AliceGetConnect _alice = AliceGetConnect();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Alice Get Connect Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: _sendGetRequest,
              child: Text('Send GET Request'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _establishWebSocketConnection,
              child: Text('Establish WebSocket Connection'),
            ),
          ],
        ),
      ),
    );
  }

  void _sendGetRequest() {
    // Send an HTTP GET request
    _alice.get('https://example.com/api/data').then((response) {
      print(response.body);
    });
  }

  void _establishWebSocketConnection() {
    // Establish a WebSocket connection
    _alice.ws('ws://example.com/ws').then((socket) {
      socket.onMessage((message) {
        print(message);
      });
    });
  }
}

// The application flow is as follows:
// 1. The user clicks the "Send GET Request" button, which calls the _sendGetRequest function.
// 2. The _sendGetRequest function sends an HTTP GET request to the specified URL using the AliceGetConnect class.
// 3. The response from the server is printed to the console.
// 4. The user clicks the "Establish WebSocket Connection" button, which calls the _establishWebSocketConnection function.
// 5. The _establishWebSocketConnection function establishes a WebSocket connection to the specified URL using the AliceGetConnect class.
// 6. When a message is received from the server, it is printed to the console.

// This code demonstrates the basic usage of the AliceGetConnect class for sending HTTP requests and establishing WebSocket connections.

// Created/Modified files during execution:
// None
```

<-- END_MAIN -->
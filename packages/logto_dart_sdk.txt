```markdown
<!-- START_DESCRIPTION -->
# Overview of the logto_dart_sdk Flutter Package

The `logto_dart_sdk` package is a powerful tool designed for Flutter developers who want to integrate authentication and authorization features into their applications seamlessly. This package provides a robust solution for managing user sessions, handling tokens, and ensuring secure access to resources.

## When to Use This Package
You should consider using the `logto_dart_sdk` package when:
- You need to implement user authentication in your Flutter application.
- You want to manage user sessions and tokens efficiently.
- You are looking for a solution that supports various authentication methods, including OAuth2.

## Key Features
- **Session Management**: Easily manage user sessions with built-in support for token storage and retrieval.
- **OAuth2 Support**: Integrate with OAuth2 providers for secure authentication.
- **Cross-Platform Compatibility**: Works seamlessly on both Android and iOS platforms.
- **Customizable**: Offers flexibility to customize authentication flows according to your app's requirements.

By leveraging the `logto_dart_sdk`, developers can focus on building their applications while ensuring that authentication is handled securely and efficiently.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Setting Up the logto_dart_sdk Package

To get started with the `logto_dart_sdk`, follow these steps:

## Installation
1. Open your `pubspec.yaml` file.
2. Add the `logto_dart_sdk` dependency:

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     logto_dart_sdk: ^latest_version
   ```

3. Run `flutter pub get` to install the package.

## Platform-Specific Configuration

### Android
1. Open `android/app/build.gradle`.
2. Ensure that you have the following permissions in your `AndroidManifest.xml`:

   ```xml
   <uses-permission android:name="android.permission.INTERNET"/>
   ```

3. If you are using OAuth2, configure your redirect URI in the `AndroidManifest.xml`:

   ```xml
   <activity android:name="com.yourpackage.MainActivity">
       <intent-filter>
           <action android:name="android.intent.action.VIEW"/>
           <category android:name="android.intent.category.DEFAULT"/>
           <category android:name="android.intent.category.BROWSABLE"/>
           <data android:scheme="your_scheme" android:host="your_host"/>
       </intent-filter>
   </activity>
   ```

### iOS
1. Open `ios/Runner/Info.plist`.
2. Add the following permissions:

   ```xml
   <key>NSAppTransportSecurity</key>
   <dict>
       <key>NSAllowsArbitraryLoads</key>
       <true/>
   </dict>
   ```

3. Configure your redirect URI in the `Info.plist`:

   ```xml
   <key>CFBundleURLTypes</key>
   <array>
       <dict>
           <key>CFBundleURLSchemes</key>
           <array>
               <string>your_scheme</string>
           </array>
       </dict>
   </array>
   ```

## Basic Usage
After setting up the package, you can start using it in your Flutter application. Initialize the SDK and implement authentication flows as needed.

```dart
import 'package:logto_dart_sdk/logto_dart_sdk.dart';

void main() {
  // Initialize the Logto SDK
  Logto.initialize(
    clientId: 'your_client_id',
    redirectUri: 'your_redirect_uri',
  );
}
```

This setup will allow you to start implementing authentication features in your app.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using logto_dart_sdk

```dart
import 'package:flutter/material.dart';
import 'package:logto_dart_sdk/logto_dart_sdk.dart';

void main() {
  // Initialize the Logto SDK with your client ID and redirect URI
  Logto.initialize(
    clientId: 'your_client_id',
    redirectUri: 'your_redirect_uri',
  );
  
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Logto Dart SDK Example',
      home: HomeScreen(),
    );
  }
}

class HomeScreen extends StatefulWidget {
  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  String _userInfo = 'Not logged in';

  // Function to handle login
  void _login() async {
    try {
      // Start the login process
      final result = await Logto.login();
      setState(() {
        // Update user info on successful login
        _userInfo = 'Logged in as: ${result.user.name}';
      });
    } catch (e) {
      // Handle login error
      setState(() {
        _userInfo = 'Login failed: $e';
      });
    }
  }

  // Function to handle logout
  void _logout() async {
    await Logto.logout();
    setState(() {
      // Update user info on logout
      _userInfo = 'Not logged in';
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Logto Dart SDK Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(_userInfo), // Display user info
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _login, // Trigger login
              child: Text('Login'),
            ),
            ElevatedButton(
              onPressed: _logout, // Trigger logout
              child: Text('Logout'),
            ),
          ],
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts by initializing the Logto SDK with the client ID and redirect URI.
// 2. The HomeScreen widget is displayed, showing the current login status.
// 3. When the user clicks the "Login" button, the _login function is called.
// 4. The _login function invokes the Logto.login() method, which handles the authentication process.
// 5. On successful login, the user information is updated and displayed.
// 6. If the user clicks the "Logout" button, the _logout function is called, which logs the user out and updates the UI accordingly.
```
<!-- END_MAIN -->
```

### Summary
In this blog post, we explored the `logto_dart_sdk` package, detailing its features, setup process, and providing a complete example of how to implement user authentication in a Flutter application. The provided code demonstrates how to manage user sessions effectively, making it a valuable resource for developers looking to enhance their apps with secure authentication features.
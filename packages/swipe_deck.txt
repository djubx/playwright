<-- START_DESCRIPTION -->

# Swipe Deck Flutter Package
================================

The Swipe Deck Flutter package is a powerful and customizable widget that allows users to swipe through a deck of cards. It's perfect for applications such as dating apps, quiz games, or any other scenario where users need to quickly swipe through a series of options.

## Features

* Customizable swipe gestures
* Support for multiple card types
* Animated transitions between cards
* Optional callback functions for swipe events

## When to Use

The Swipe Deck package is ideal for applications that require a fast and intuitive way for users to browse through a series of options. Some examples include:

* Dating apps: Allow users to swipe through potential matches
* Quiz games: Present users with a series of questions or challenges
* Product showcases: Display a series of products or features

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up Swipe Deck
-------------------------

To use the Swipe Deck package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  swipe_deck: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

In your Dart file, import the Swipe Deck package:
```dart
import 'package:swipe_deck/swipe_deck.dart';
```
### Step 3: Create a Swipe Deck Widget

Create a Swipe Deck widget and pass in a list of cards:
```dart
SwipeDeck(
  cards: [
    Card(
      child: Text('Card 1'),
    ),
    Card(
      child: Text('Card 2'),
    ),
    Card(
      child: Text('Card 3'),
    ),
  ],
)
```
### Step 4: Customize Swipe Gestures (Optional)

To customize the swipe gestures, pass in a `SwipeOptions` object:
```dart
SwipeDeck(
  cards: [
    // ...
  ],
  swipeOptions: SwipeOptions(
    threshold: 0.5,
    direction: SwipeDirection.horizontal,
  ),
)
```
### Platform-Specific Details

* On Android, the Swipe Deck package uses the `GestureDetector` widget to detect swipe gestures.
* On iOS, the Swipe Deck package uses the `UISwipeGestureRecognizer` to detect swipe gestures.

### Required Configurations or Optimizations

* To improve performance, consider using a `ListView` or `GridView` to display the cards instead of a `Column` or `Row`.
* To handle edge cases, consider adding a `Container` or `SizedBox` around the Swipe Deck widget to provide padding or margins.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:swipe_deck/swipe_deck.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  List<Card> _cards = [
    Card(
      child: Text('Card 1'),
    ),
    Card(
      child: Text('Card 2'),
    ),
    Card(
      child: Text('Card 3'),
    ),
  ];

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Swipe Deck Demo'),
        ),
        body: SwipeDeck(
          cards: _cards,
          swipeOptions: SwipeOptions(
            threshold: 0.5,
            direction: SwipeDirection.horizontal,
          ),
          onSwipe: (index, direction) {
            print('Swiped card $index in direction $direction');
          },
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app and is presented with a Swipe Deck widget containing three cards.
// 2. The user swipes left or right on a card to navigate through the deck.
// 3. When the user swipes a card, the onSwipe callback function is called with the index of the card and the direction of the swipe.
// 4. The app prints a message to the console indicating which card was swiped and in which direction.
// 5. The user can continue swiping through the deck until they reach the end.
// 6. At the end of the deck, the app does not perform any further actions.

// In summary, this code demonstrates a basic Swipe Deck implementation with three cards and a horizontal swipe gesture.
// The app responds to swipe events by printing a message to the console indicating which card was swiped and in which direction.
```

<-- END_MAIN -->
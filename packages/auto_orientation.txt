```markdown
<-- START_DESCRIPTION -->
# Auto Orientation Flutter Package

The `auto_orientation` Flutter package is a powerful tool designed to manage and control the orientation of your Flutter applications dynamically. This package is particularly useful in scenarios where you need to adjust the screen orientation based on specific user interactions or application states, such as video playback, gaming, or reading applications.

## Features
- **Dynamic Orientation Control**: Change the orientation of your app on the fly without restarting the app.
- **Platform Support**: Works seamlessly on both Android and iOS platforms.
- **Ease of Use**: Simple API that integrates easily into existing Flutter projects.

## When to Use
- **Video Players**: Automatically switch to landscape mode when a video is played in full screen.
- **Games**: Lock the orientation to landscape for a better gaming experience.
- **Reading Apps**: Allow users to switch between portrait and landscape modes for better readability.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Auto Orientation Package

In this tutorial, we will walk through the process of setting up and using the `auto_orientation` package in a Flutter project. We will cover platform-specific configurations for both Android and iOS.

## Setup

### Step 1: Add Dependency
Add the `auto_orientation` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  auto_orientation: ^2.0.0
```

### Step 2: Install the Package
Run the following command to install the package:

```bash
flutter pub get
```

### Step 3: Android Configuration
For Android, ensure that your `AndroidManifest.xml` file allows for orientation changes. Add the following configuration:

```xml
<activity
  android:name=".MainActivity"
  android:configChanges="orientation|screenSize"
  android:screenOrientation="unspecified">
</activity>
```

### Step 4: iOS Configuration
For iOS, ensure that your app supports all orientations. In your `Info.plist`, add:

```xml
<key>UISupportedInterfaceOrientations</key>
<array>
  <string>UIInterfaceOrientationPortrait</string>
  <string>UIInterfaceOrientationLandscapeLeft</string>
  <string>UIInterfaceOrientationLandscapeRight</string>
  <string>UIInterfaceOrientationPortraitUpsideDown</string>
</array>
```

## Using the Package

To use the `auto_orientation` package, import it into your Dart file:

```dart
import 'package:auto_orientation/auto_orientation.dart';
```

You can then call `AutoOrientation.landscapeAutoMode()` to switch to landscape mode or `AutoOrientation.portraitAutoMode()` to switch to portrait mode.

<-- END_TUTORIAL -->

<-- START_MAIN -->
# Complete Example: Flutter Main File

Below is a complete example demonstrating how to use the `auto_orientation` package in a Flutter application.

```dart
import 'package:flutter/material.dart';
import 'package:auto_orientation/auto_orientation.dart';

void main() {
  runApp(RealFlutterApp());
}

class RealFlutterApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Auto Orientation Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: OrientationDemoPage(),
    );
  }
}

class OrientationDemoPage extends StatefulWidget {
  @override
  _OrientationDemoPageState createState() => _OrientationDemoPageState();
}

class _OrientationDemoPageState extends State<OrientationDemoPage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Auto Orientation Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: () {
                // Switch to landscape mode
                AutoOrientation.landscapeAutoMode();
              },
              child: Text('Switch to Landscape'),
            ),
            ElevatedButton(
              onPressed: () {
                // Switch to portrait mode
                AutoOrientation.portraitAutoMode();
              },
              child: Text('Switch to Portrait'),
            ),
          ],
        ),
      ),
    );
  }
}
```

// Application Flow Explanation
// 1. The `main` function initializes the app by running `RealFlutterApp`.
// 2. `RealFlutterApp` is a stateless widget that sets up the MaterialApp with a home page.
// 3. `OrientationDemoPage` is a stateful widget that manages the orientation changes.
// 4. The UI consists of two buttons: one to switch to landscape mode and another to switch to portrait mode.
// 5. When a button is pressed, the corresponding method from the `auto_orientation` package is called to change the orientation.

<-- END_MAIN -->
```

This blog post provides a comprehensive guide to using the `auto_orientation` package in Flutter, from setup to implementation, with a complete example to demonstrate its capabilities.
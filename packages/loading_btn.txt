```markdown
<-- START_DESCRIPTION -->

# Overview of the `loading_btn` Flutter Package

The `loading_btn` package is a versatile Flutter widget that provides a button with a built-in loading indicator. This package is particularly useful in scenarios where you need to perform asynchronous operations, such as network requests or database transactions, and want to provide users with visual feedback that an operation is in progress.

## When to Use `loading_btn`

- **Network Requests**: When fetching data from an API, you can use `loading_btn` to indicate that the request is being processed.
- **Form Submissions**: Use it to show users that their form data is being submitted and processed.
- **File Uploads**: Provide feedback during file uploads to keep users informed about the progress.

## Features

- **Customizable Appearance**: You can customize the button's color, size, and shape to fit your app's theme.
- **Built-in Loading Indicator**: Automatically displays a loading spinner when the button is pressed.
- **Callback Support**: Easily integrate with your existing functions and handle button press events.
- **State Management**: Automatically manages the loading state, reducing boilerplate code.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using `loading_btn` in Flutter

In this tutorial, we'll walk through the process of setting up the `loading_btn` package in a Flutter project and demonstrate how to use it effectively.

## Setup Process

1. **Add Dependency**: First, add the `loading_btn` package to your `pubspec.yaml` file.

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     loading_btn: ^1.0.0
   ```

2. **Install Packages**: Run `flutter pub get` to install the new package.

3. **Import the Package**: In your Dart file, import the package to use its features.

   ```dart
   import 'package:loading_btn/loading_btn.dart';
   ```

## Platform-Specific Details

### Android

Ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```gradle
android {
    defaultConfig {
        minSdkVersion 21
    }
}
```

### iOS

Make sure your iOS deployment target is set to at least 9.0 in your `ios/Podfile`:

```ruby
platform :ios, '9.0'
```

## Using the `loading_btn` Package

Here's a basic example of how to use the `loading_btn` in your Flutter app:

```dart
LoadingBtn(
  onPressed: () async {
    // Simulate a network request or any async operation
    await Future.delayed(Duration(seconds: 2));
  },
  child: Text('Submit'),
  loading: false, // This should be managed by your state management solution
)
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:loading_btn/loading_btn.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Loading Button Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: LoadingButtonExample(),
    );
  }
}

class LoadingButtonExample extends StatefulWidget {
  @override
  _LoadingButtonExampleState createState() => _LoadingButtonExampleState();
}

class _LoadingButtonExampleState extends State<LoadingButtonExample> {
  bool _isLoading = false; // State to manage loading status

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Loading Button Example'),
      ),
      body: Center(
        child: LoadingBtn(
          onPressed: _handleButtonPress, // Function to handle button press
          child: Text('Submit'),
          loading: _isLoading, // Bind loading state to button
          color: Colors.blue, // Customize button color
        ),
      ),
    );
  }

  Future<void> _handleButtonPress() async {
    setState(() {
      _isLoading = true; // Set loading to true when button is pressed
    });

    // Simulate a network request or any async operation
    await Future.delayed(Duration(seconds: 2));

    setState(() {
      _isLoading = false; // Reset loading state after operation completes
    });
  }
}

// Application Flow:
// 1. The app starts with the `RealFlutter` widget, which sets up the MaterialApp.
// 2. The `LoadingButtonExample` widget is the home screen, displaying a button.
// 3. The button uses the `LoadingBtn` widget from the `loading_btn` package.
// 4. When the button is pressed, `_handleButtonPress` is called.
// 5. `_handleButtonPress` sets `_isLoading` to true, triggering the loading indicator.
// 6. A simulated delay represents an async operation (e.g., network request).
// 7. After the delay, `_isLoading` is set to false, hiding the loading indicator.
// 8. The button is ready to be pressed again, completing the cycle.
```

<-- END_MAIN -->
```
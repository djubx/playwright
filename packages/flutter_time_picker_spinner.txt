<-- START_DESCRIPTION -->

# Flutter Time Picker Spinner Package
=====================================

The `flutter_time_picker_spinner` package provides a customizable time picker spinner for Flutter applications. It allows users to select time in a convenient and user-friendly way.

### When to Use

This package is useful when you need to allow users to select a specific time in your application, such as:

* Scheduling appointments
* Setting reminders
* Selecting a specific time for a task

### Features

* Customizable time picker spinner
* Supports 12-hour and 24-hour formats
* Optional minute interval selection
* Supports localization

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

### Setup

To use the `flutter_time_picker_spinner` package, add it to your `pubspec.yaml` file:

```yml
dependencies:
  flutter_time_picker_spinner: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Basic Usage

To use the time picker spinner, import the package and create a `TimePickerSpinner` widget:

```dart
import 'package:flutter_time_picker_spinner/flutter_time_picker_spinner.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: TimePickerSpinner(
        is24HourMode: false,
        onTimeChange: (time) {
          print(time);
        },
      ),
    );
  }
}
```

### Platform-Specific Details

* Android: No additional configuration is required.
* iOS: You need to add the following line to your `Info.plist` file:

```xml
<key>UIRequiresFullScreen</key>
<true/>
```

### Configurations and Optimizations

* You can customize the time picker spinner by using the `TimePickerSpinner` constructor parameters, such as `is24HourMode`, `minuteInterval`, and `locale`.
* You can also use the `TimePickerSpinner` widget as a child of another widget, such as a `Container` or a `Card`.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_time_picker_spinner/flutter_time_picker_spinner.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Time Picker Spinner Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  DateTime _dateTime = DateTime.now();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Time Picker Spinner Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            TimePickerSpinner(
              is24HourMode: false,
              onTimeChange: (time) {
                setState(() {
                  _dateTime = time;
                });
              },
            ),
            SizedBox(height: 20),
            Text(
              _dateTime.toString(),
              style: TextStyle(fontSize: 24),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app and is presented with a time picker spinner.
// 2. The user selects a time using the time picker spinner.
// 3. The selected time is displayed below the time picker spinner.
// 4. When the user selects a new time, the displayed time is updated.

// In summary, this code creates a simple time picker spinner demo app that allows the user to select a time and displays the selected time.
```

<-- END_MAIN -->
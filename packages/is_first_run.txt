```markdown
<!-- START_DESCRIPTION -->
# Overview of the `is_first_run` Flutter Package

The `is_first_run` package is a simple yet powerful utility for Flutter applications that helps developers determine whether the app is being run for the first time. This can be particularly useful for initializing settings, displaying onboarding screens, or setting up user preferences.

## When to Use This Package

You might want to use the `is_first_run` package in scenarios such as:
- **Onboarding**: Show a tutorial or onboarding screen only on the first launch.
- **Initial Setup**: Set default configurations or preferences when the app is first installed.
- **User Experience**: Enhance user experience by providing a tailored experience based on whether the app is being run for the first time.

## Features

- **Simple API**: Easy to integrate and use within your Flutter application.
- **Cross-Platform**: Works seamlessly on both Android and iOS.
- **Persistent Storage**: Utilizes shared preferences to store the first run state, ensuring that the information persists across app restarts.

By leveraging the `is_first_run` package, developers can create a more engaging and personalized experience for their users right from the first launch.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the `is_first_run` Package

## Step 1: Adding the Dependency

To get started, you need to add the `is_first_run` package to your `pubspec.yaml` file. Open the file and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  is_first_run: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run `flutter pub get` to install the package.

## Step 2: Importing the Package

In your Dart file, import the package:

```dart
import 'package:is_first_run/is_first_run.dart';
```

## Step 3: Using the Package

You can now use the `IsFirstRun` class to check if the app is being run for the first time. Here’s how to do it:

### Android Configuration

For Android, ensure that your `AndroidManifest.xml` file has the necessary permissions for shared preferences, although typically, no additional permissions are required for basic usage.

### iOS Configuration

For iOS, ensure that your app's deployment target is set to a version that supports shared preferences. This is usually set in the `ios/Podfile`.

## Example Usage

Here’s a simple example of how to use the `is_first_run` package in your Flutter app:

```dart
void main() async {
  WidgetsFlutterBinding.ensureInitialized(); // Ensure Flutter is initialized
  bool isFirstRun = await IsFirstRun.isFirstRun(); // Check if it's the first run
  runApp(MyApp(isFirstRun: isFirstRun)); // Pass the result to the app
}
```

In this example, we check if the app is being run for the first time and pass that information to the main application widget.

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of Using the `is_first_run` Package

```dart
import 'package:flutter/material.dart';
import 'package:is_first_run/is_first_run.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized(); // Ensure Flutter is initialized
  bool isFirstRun = await IsFirstRun.isFirstRun(); // Check if it's the first run
  runApp(MyApp(isFirstRun: isFirstRun)); // Pass the result to the app
}

class MyApp extends StatelessWidget {
  final bool isFirstRun;

  MyApp({required this.isFirstRun}); // Constructor to accept the first run status

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Is First Run Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: isFirstRun ? OnboardingScreen() : HomeScreen(), // Show onboarding or home based on first run
    );
  }
}

class OnboardingScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Welcome to the App!')),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text('This is your first time here!'),
            ElevatedButton(
              onPressed: () {
                // Navigate to the home screen and mark the first run as complete
                IsFirstRun.markAsNotFirstRun(); // Mark as not first run
                Navigator.pushReplacement(
                  context,
                  MaterialPageRoute(builder: (context) => HomeScreen()),
                );
              },
              child: Text('Get Started'),
            ),
          ],
        ),
      ),
    );
  }
}

class HomeScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Home')),
      body: Center(
        child: Text('Welcome back!'), // Message for returning users
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function initializes the Flutter engine and checks if it's the first run.
// 2. Based on the result, it either shows the OnboardingScreen or HomeScreen.
// 3. If it's the first run, the user sees the onboarding screen with a welcome message.
// 4. Upon clicking "Get Started", the app marks the first run as complete and navigates to the HomeScreen.
// 5. Returning users will directly see the HomeScreen with a welcome back message.

```
<!-- END_MAIN -->
``` 

This structured blog provides a comprehensive overview of the `is_first_run` package, guiding users through its setup and usage while offering a complete example to illustrate its functionality.
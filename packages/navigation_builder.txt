```markdown
<!-- START_DESCRIPTION -->
# Overview of the `navigation_builder` Flutter Package

The `navigation_builder` package is a powerful tool designed to simplify navigation in Flutter applications. It provides a declarative way to define routes and manage navigation stacks, making it easier to handle complex navigation scenarios. This package is particularly useful for applications with multiple screens and nested navigation, as it allows developers to create a clear and maintainable navigation structure.

## When to Use `navigation_builder`

- **Complex Navigation**: When your app has multiple screens and nested navigation, `navigation_builder` helps manage the complexity.
- **Dynamic Routing**: If your app requires dynamic route generation based on user actions or data, this package provides a flexible solution.
- **Declarative Syntax**: For developers who prefer a declarative approach to UI and navigation, this package aligns well with Flutter's design philosophy.

## Key Features

- **Declarative Routing**: Define routes in a clear and concise manner.
- **Nested Navigation**: Easily manage nested navigators for complex UIs.
- **Dynamic Route Generation**: Create routes based on runtime conditions.
- **Custom Transition Animations**: Implement custom animations for route transitions.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Setting Up and Using `navigation_builder`

## Installation

To get started with the `navigation_builder` package, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  navigation_builder: ^latest_version
```

Make sure to replace `^latest_version` with the latest version available on [pub.dev](https://pub.dev/packages/navigation_builder).

## Platform-Specific Configuration

### Android

For Android, ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
        ...
    }
}
```

### iOS

For iOS, you may need to update your `Info.plist` to allow for certain navigation features, especially if you are using deep linking or custom URL schemes.

## Basic Usage

To use the `navigation_builder` package, you will typically define your routes in a central location and use the `Navigator` widget to manage navigation. Hereâ€™s a simple example of how to set it up:

1. Import the package:

```dart
import 'package:navigation_builder/navigation_builder.dart';
```

2. Define your routes:

```dart
final routes = {
  '/': (context) => HomeScreen(),
  '/details': (context) => DetailsScreen(),
};
```

3. Use the `NavigationBuilder` widget to manage navigation:

```dart
void main() {
  runApp(
    MaterialApp(
      home: NavigationBuilder(
        routes: routes,
      ),
    ),
  );
}
```

This setup allows you to navigate between `HomeScreen` and `DetailsScreen` using the defined routes.

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of `navigation_builder`

```dart
import 'package:flutter/material.dart';
import 'package:navigation_builder/navigation_builder.dart';

// Main entry point of the application
void main() {
  runApp(MyApp());
}

// Define the main application widget
class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Navigation Builder Example',
      home: NavigationBuilder(
        routes: {
          '/': (context) => HomeScreen(), // Home screen route
          '/details': (context) => DetailsScreen(), // Details screen route
        },
      ),
    );
  }
}

// Home screen widget
class HomeScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Home')),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Navigate to the details screen
            Navigator.pushNamed(context, '/details');
          },
          child: Text('Go to Details'),
        ),
      ),
    );
  }
}

// Details screen widget
class DetailsScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Details')),
      body: Center(
        child: Text('This is the details screen.'),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the MyApp widget, which sets up the MaterialApp.
// 2. The NavigationBuilder widget is used to define the routes for the app.
// 3. The HomeScreen is displayed as the initial screen.
// 4. When the user taps the "Go to Details" button, the app navigates to the DetailsScreen using the defined route.
// 5. The DetailsScreen displays a simple message and can be extended with more functionality.
```
<!-- END_MAIN -->
``` 

This structured approach provides a comprehensive overview of the `navigation_builder` package, guiding developers through its features, setup, and practical usage in a Flutter application.
```markdown
<-- START_DESCRIPTION -->

# Motion Toast Flutter Package: An Overview

The `motion_toast` Flutter package is a versatile and visually appealing library designed to display animated toast notifications in Flutter applications. Toast notifications are small, unobtrusive messages that appear on the screen to provide feedback to users. The `motion_toast` package enhances this experience by offering a variety of animations and customization options, making it an excellent choice for developers looking to improve user interaction and feedback in their apps.

## When to Use Motion Toast

- **User Feedback**: Display success, error, warning, or informational messages in response to user actions.
- **Notifications**: Alert users about new messages, updates, or changes in the application state.
- **Guidance**: Provide tips or instructions to users without interrupting their workflow.

## Features

- **Custom Animations**: Choose from a variety of built-in animations or create your own.
- **Rich Customization**: Customize colors, icons, text styles, and more to match your app's theme.
- **Flexible Positioning**: Display toasts at different positions on the screen (top, center, bottom).
- **Ease of Use**: Simple API that integrates seamlessly with existing Flutter applications.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using Motion Toast in Flutter

In this tutorial, we will walk through the process of setting up the `motion_toast` package in a Flutter project and demonstrate how to use its features effectively.

## Setup Process

1. **Add Dependency**: First, add the `motion_toast` package to your `pubspec.yaml` file.

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     motion_toast: ^2.0.0
   ```

2. **Install Packages**: Run `flutter pub get` to install the new package.

3. **Import the Package**: Import `motion_toast` in your Dart file where you want to use it.

   ```dart
   import 'package:motion_toast/motion_toast.dart';
   ```

## Platform-Specific Details

### Android

- Ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21 to support all animations.

  ```gradle
  android {
      defaultConfig {
          minSdkVersion 21
      }
  }
  ```

### iOS

- No specific configurations are required for iOS, but ensure your deployment target is set to a version that supports Flutter.

## Using Motion Toast

To display a motion toast, you can use the `MotionToast` class. Here's a simple example:

```dart
MotionToast.success(
  title: Text("Success"),
  description: Text("The operation was successful!"),
).show(context);
```

This code snippet will display a success toast with a default animation and style.

<-- END_TUTORIAL -->

<-- MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:motion_toast/motion_toast.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Motion Toast Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: ToastDemoPage(),
    );
  }
}

class ToastDemoPage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Motion Toast Example'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Display a success motion toast
            MotionToast.success(
              title: Text("Success"),
              description: Text("The operation was successful!"),
              animationType: AnimationType.fromLeft, // Animation from the left
              position: MotionToastPosition.top, // Display at the top
            ).show(context);
          },
          child: Text('Show Success Toast'),
        ),
      ),
    );
  }
}

// Application Flow:
// 1. The application starts with the `main` function, which runs the `RealFlutter` widget.
// 2. `RealFlutter` is a stateless widget that sets up the MaterialApp with a title and theme.
// 3. The home of the app is `ToastDemoPage`, which is a stateless widget displaying a Scaffold.
// 4. The Scaffold contains an AppBar and a Center widget with an ElevatedButton.
// 5. When the button is pressed, a success motion toast is displayed using `MotionToast.success`.
// 6. The toast appears at the top of the screen with an animation from the left, providing feedback to the user.

```

<-- END_MAIN -->
```
<-- START_DESCRIPTION -->

# Celest Flutter Package: A Comprehensive Overview
=====================================================

The Celest Flutter package is a powerful tool for creating visually stunning and interactive celestial maps within your Flutter applications. With its robust set of features and customizable options, Celest allows developers to bring the wonders of the universe to life on mobile devices.

### Key Features:

*   Interactive celestial maps with zooming and panning capabilities
*   Customizable map styles and themes
*   Support for various celestial objects, including stars, planets, and galaxies
*   Integration with device location services for augmented reality experiences

### When to Use Celest:

*   Creating educational apps for astronomy and space exploration
*   Developing interactive exhibits for planetariums and museums
*   Building augmented reality experiences that incorporate celestial objects

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using Celest
=============================

### Step 1: Add Celest to Your Flutter Project

Add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  celest: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import Celest and Initialize the Map

Import the Celest package in your Dart file:

```dart
import 'package:celest/celest.dart';
```

 Initialize the Celest map with a specified width and height:

```dart
CelestMap map = CelestMap(
  width: 400,
  height: 600,
);
```

### Step 3: Customize the Map Style and Theme

Celest provides various map styles and themes to choose from. You can customize the map's appearance using the `style` and `theme` properties:

```dart
map.style = CelestStyle.DARK;
map.theme = CelestTheme.GALAXY;
```

### Step 4: Add Celestial Objects to the Map

You can add various celestial objects to the map using the `addObject` method:

```dart
map.addObject(
  CelestialObject(
    type: CelestialObjectType.STAR,
    name: 'Sirius',
    coordinates: CelestialCoordinates(
      rightAscension: 6.752,
      declination: -16.716,
    ),
  ),
);
```

### Platform-Specific Details:

*   **Android:** Make sure to add the necessary permissions to your `AndroidManifest.xml` file for device location services:

    ```xml
<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
```

*   **iOS:** Add the `NSLocationWhenInUseUsageDescription` key to your `Info.plist` file to enable device location services:

    ```xml
<key>NSLocationWhenInUseUsageDescription</key>
<string>This app needs access to your location to provide augmented reality experiences.</string>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:celest/celest.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  CelestMap map;

  @override
  void initState() {
    super.initState();
    map = CelestMap(
      width: 400,
      height: 600,
    );
    map.style = CelestStyle.DARK;
    map.theme = CelestTheme.GALAXY;

    // Add celestial objects to the map
    map.addObject(
      CelestialObject(
        type: CelestialObjectType.STAR,
        name: 'Sirius',
        coordinates: CelestialCoordinates(
          rightAscension: 6.752,
          declination: -16.716,
        ),
      ),
    );

    map.addObject(
      CelestialObject(
        type: CelestialObjectType.PLANET,
        name: 'Jupiter',
        coordinates: CelestialCoordinates(
          rightAscension: 12.123,
          declination: 3.456,
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Celest Demo',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Celest Demo'),
        ),
        body: Center(
          child: CelestMapWidget(map),
        ),
      ),
    );
  }
}

// The app starts by initializing the Celest map with a specified width and height.
// It then sets the map style and theme to DARK and GALAXY, respectively.
// Celestial objects are added to the map using the addObject method.
// The app uses the CelestMapWidget to display the Celest map.
// The map is interactive, allowing users to zoom and pan across the celestial landscape.
// The app also demonstrates the use of device location services for augmented reality experiences.
```

<-- END_MAIN -->
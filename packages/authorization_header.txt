# Authorization Header Flutter Package

<!-- START_DESCRIPTION -->
## Description

The `authorization_header` Flutter package is designed to simplify the process of managing authorization headers in HTTP requests. This package is particularly useful when working with APIs that require token-based authentication, such as OAuth2 or JWT. By abstracting the complexity of handling authorization headers, developers can focus on building their applications without worrying about the intricacies of authentication.

### When to Use

- When your Flutter application interacts with APIs that require authorization headers.
- When you need to manage multiple types of authentication tokens (e.g., Bearer tokens, Basic Auth).
- When you want to streamline the process of adding authorization headers to your HTTP requests.

### Features

- **Easy Integration**: Simple API to add authorization headers to your HTTP requests.
- **Support for Multiple Auth Types**: Easily switch between different types of authorization (Bearer, Basic, etc.).
- **Token Management**: Automatically handles token expiration and refresh logic.
- **Customizable**: Allows for custom header configurations to meet specific API requirements.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
## Tutorial

### Installation

To add the `authorization_header` package to your Flutter project, include it in your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  authorization_header: ^1.0.0  # Check for the latest version on pub.dev
```

Run the following command to install the package:

```bash
flutter pub get
```

### Platform-Specific Configuration

#### Android

For Android, ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file:

```gradle
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

#### iOS

For iOS, you may need to configure your `Info.plist` to allow network requests if you are using HTTP instead of HTTPS:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

### Using the Package

To use the `authorization_header` package, you will typically follow these steps:

1. Import the package in your Dart file:
   ```dart
   import 'package:authorization_header/authorization_header.dart';
   ```

2. Create an instance of the `AuthorizationHeader` class and configure it with your token:
   ```dart
   final authHeader = AuthorizationHeader(
     token: 'your_token_here',
     authType: AuthType.bearer, // or AuthType.basic
   );
   ```

3. Use the `getHeaders()` method to retrieve the headers for your HTTP requests:
   ```dart
   final headers = authHeader.getHeaders();
   ```

4. Pass the headers to your HTTP client when making requests.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
## Complete Example

```dart
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'package:authorization_header/authorization_header.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Authorization Header Example',
      home: HomePage(),
    );
  }
}

class HomePage extends StatefulWidget {
  @override
  _HomePageState createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  String _response = '';

  // Function to make an API call
  Future<void> _makeApiCall() async {
    // Create an instance of AuthorizationHeader with your token
    final authHeader = AuthorizationHeader(
      token: 'your_token_here', // Replace with your actual token
      authType: AuthType.bearer, // Using Bearer token
    );

    // Get the headers for the request
    final headers = authHeader.getHeaders();

    // Make the HTTP GET request
    final response = await http.get(
      Uri.parse('https://api.example.com/data'), // Replace with your API endpoint
      headers: headers,
    );

    // Update the response state
    setState(() {
      _response = response.body; // Store the response body
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Authorization Header Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: _makeApiCall, // Call the API when button is pressed
              child: Text('Make API Call'),
            ),
            SizedBox(height: 20),
            Text('Response: $_response'), // Display the API response
          ],
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the RealFlutter widget.
// 2. RealFlutter builds a MaterialApp with a HomePage as its home.
// 3. HomePage contains a button that, when pressed, triggers the _makeApiCall function.
// 4. _makeApiCall creates an AuthorizationHeader instance with a Bearer token.
// 5. It retrieves the headers and makes an HTTP GET request to the specified API endpoint.
// 6. The response from the API is stored in the _response state variable.
// 7. The UI updates to display the API response below the button.
```

<!-- END_MAIN -->

## Summary

In this blog post, we explored the `authorization_header` Flutter package, which simplifies the management of authorization headers in HTTP requests. We covered the installation process, platform-specific configurations, and provided a complete example demonstrating how to use the package effectively. The example application showcases how to make an API call using a Bearer token, making it easy for developers to integrate authentication into their Flutter applications.
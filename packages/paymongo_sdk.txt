```markdown
<!-- START_DESCRIPTION -->
# Paymongo SDK Flutter Package

The **paymongo_sdk** Flutter package is a powerful tool designed to facilitate payment processing in Flutter applications. It provides a seamless integration with PayMongo, a payment gateway that allows developers to accept online payments in the Philippines. This package is particularly useful for e-commerce applications, subscription services, and any app that requires payment processing.

## When to Use This Package
- **E-commerce Applications**: If you're building an online store, this package allows you to handle transactions securely.
- **Subscription Services**: For apps that require recurring payments, the Paymongo SDK can manage subscriptions effectively.
- **Donation Platforms**: Non-profit organizations can use this package to accept donations easily.

## Features
- **Multiple Payment Methods**: Supports various payment options including credit/debit cards, e-wallets, and bank transfers.
- **Secure Transactions**: Ensures that all payment data is handled securely, complying with industry standards.
- **Easy Integration**: Simple setup process that allows developers to integrate payment processing with minimal effort.
- **Real-time Payment Status**: Provides real-time updates on payment status, allowing for a smooth user experience.

Overall, the paymongo_sdk package is an essential tool for Flutter developers looking to implement payment solutions in their applications.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Paymongo SDK

In this tutorial, we will walk through the setup process for the paymongo_sdk package and demonstrate how to use it in a Flutter application.

## Step 1: Adding the Package to Your Project
To get started, add the paymongo_sdk package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  paymongo_sdk: ^latest_version
```

Make sure to replace `latest_version` with the most recent version of the package.

## Step 2: Platform-Specific Configuration

### Android Configuration
1. Open `android/app/build.gradle` and ensure that you have the following configurations:
   ```groovy
   android {
       ...
       defaultConfig {
           ...
           minSdkVersion 21 // Ensure this is set to at least 21
       }
   }
   ```

2. Add the necessary permissions in `AndroidManifest.xml`:
   ```xml
   <uses-permission android:name="android.permission.INTERNET"/>
   ```

### iOS Configuration
1. Open `ios/Runner/Info.plist` and add the following:
   ```xml
   <key>NSAppTransportSecurity</key>
   <dict>
       <key>NSAllowsArbitraryLoads</key>
       <true/>
   </dict>
   ```

2. Ensure that your iOS deployment target is set to at least 10.0 in `ios/Podfile`:
   ```ruby
   platform :ios, '10.0'
   ```

## Step 3: Using the Package
Now that we have set up the package, we can start using it in our Flutter application. Below is a simple example of how to initiate a payment.

```dart
import 'package:flutter/material.dart';
import 'package:paymongo_sdk/paymongo_sdk.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Paymongo Payment Example')),
        body: Center(
          child: ElevatedButton(
            onPressed: () async {
              // Initialize Paymongo SDK
              final paymongo = Paymongo();

              // Create a payment intent
              final paymentIntent = await paymongo.createPaymentIntent(
                amount: 10000, // Amount in cents
                currency: 'PHP',
                paymentMethod: 'card', // Payment method type
              );

              // Handle the payment response
              if (paymentIntent.status == 'succeeded') {
                // Payment was successful
                print('Payment successful: ${paymentIntent.id}');
              } else {
                // Payment failed
                print('Payment failed: ${paymentIntent.error}');
              }
            },
            child: Text('Pay Now'),
          ),
        ),
      ),
    );
  }
}
```
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Paymongo SDK in Flutter

```dart
import 'package:flutter/material.dart';
import 'package:paymongo_sdk/paymongo_sdk.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Paymongo Payment Example')),
        body: Center(
          child: ElevatedButton(
            onPressed: () async {
              // Step 1: Initialize Paymongo SDK
              final paymongo = Paymongo();

              // Step 2: Create a payment intent
              final paymentIntent = await paymongo.createPaymentIntent(
                amount: 10000, // Amount in cents (100 PHP)
                currency: 'PHP', // Currency code
                paymentMethod: 'card', // Payment method type
              );

              // Step 3: Handle the payment response
              if (paymentIntent.status == 'succeeded') {
                // Payment was successful
                print('Payment successful: ${paymentIntent.id}');
              } else {
                // Payment failed
                print('Payment failed: ${paymentIntent.error}');
              }
            },
            child: Text('Pay Now'), // Button to initiate payment
          ),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with a MaterialApp containing a Scaffold.
// 2. An AppBar is displayed with the title 'Paymongo Payment Example'.
// 3. The body contains a Center widget with an ElevatedButton.
// 4. When the button is pressed, the Paymongo SDK is initialized.
// 5. A payment intent is created with a specified amount and currency.
// 6. The response from the payment intent is checked.
// 7. If the payment is successful, the payment ID is printed.
// 8. If the payment fails, the error message is printed.
```
<!-- END_MAIN -->
```

### Summary
In this blog post, we explored the **paymongo_sdk** Flutter package, detailing its features, setup process, and usage through a complete example. The provided code demonstrates how to integrate payment processing into a Flutter application, making it easier for developers to implement secure and efficient payment solutions. By following the steps outlined, you can quickly set up and start accepting payments in your Flutter apps.
```markdown
<!-- START_DESCRIPTION -->
# Flutter Multi Formatter Package

The `flutter_multi_formatter` package is a powerful tool for Flutter developers that simplifies the process of formatting input fields. It provides a variety of formatters that can be applied to text fields, making it easier to handle user input in a consistent and user-friendly manner. This package is particularly useful for applications that require specific input formats, such as phone numbers, credit card numbers, dates, and more.

## When to Use This Package

You should consider using `flutter_multi_formatter` in scenarios where:
- You need to enforce specific input formats for user data.
- You want to improve user experience by providing real-time formatting feedback.
- You are developing applications that require validation of formatted input, such as forms for payments or registrations.

## Key Features

- **Multiple Formatters**: The package supports various formatters, including phone number, credit card, and date formatters.
- **Customizable**: You can create custom formatters to meet specific requirements.
- **Easy Integration**: The package is easy to integrate into existing Flutter applications with minimal setup.

Overall, `flutter_multi_formatter` enhances the input experience in Flutter applications, ensuring that user data is collected in the correct format.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using flutter_multi_formatter

## Step 1: Adding the Dependency

To get started with `flutter_multi_formatter`, you need to add it to your `pubspec.yaml` file. Open your `pubspec.yaml` and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  flutter_multi_formatter: ^2.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run `flutter pub get` to install it.

## Step 2: Importing the Package

In your Dart file, import the package:

```dart
import 'package:flutter_multi_formatter/flutter_multi_formatter.dart';
```

## Step 3: Using the Formatters

You can use the formatters provided by the package in your `TextField` or `TextFormField`. Below are examples of how to use different formatters.

### Example for Phone Number Formatter

```dart
TextField(
  keyboardType: TextInputType.phone,
  inputFormatters: [
    MaskedInputFormatter('(+##) ###-###-###'), // Example format for international phone numbers
  ],
)
```

### Example for Credit Card Formatter

```dart
TextField(
  keyboardType: TextInputType.number,
  inputFormatters: [
    CreditCardFormatter(), // Automatically formats credit card input
  ],
)
```

### Example for Date Formatter

```dart
TextField(
  keyboardType: TextInputType.datetime,
  inputFormatters: [
    MaskedInputFormatter('##/##/####'), // Format for dates (MM/DD/YYYY)
  ],
)
```

## Platform-Specific Details

### Android

For Android, ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file:

```gradle
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

### iOS

For iOS, you may need to configure your `Info.plist` to allow for certain permissions if your app requires them, but generally, no specific configurations are needed for using this package.

## Step 4: Testing Your Application

After setting up the formatters, run your application on an emulator or a physical device to test the input fields. Ensure that the formatting works as expected and that the user experience is smooth.

With these steps, you should be able to successfully integrate and use the `flutter_multi_formatter` package in your Flutter application.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of flutter_multi_formatter

```dart
import 'package:flutter/material.dart';
import 'package:flutter_multi_formatter/flutter_multi_formatter.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Multi Formatter Example',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Input Formatter Example'),
        ),
        body: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            children: [
              // Phone Number Input Field
              TextField(
                keyboardType: TextInputType.phone,
                inputFormatters: [
                  MaskedInputFormatter('(+##) ###-###-###'), // Format for international phone numbers
                ],
                decoration: InputDecoration(
                  labelText: 'Phone Number',
                  hintText: '(+XX) XXX-XXX-XXX',
                ),
              ),
              SizedBox(height: 20), // Space between fields
              // Credit Card Input Field
              TextField(
                keyboardType: TextInputType.number,
                inputFormatters: [
                  CreditCardFormatter(), // Automatically formats credit card input
                ],
                decoration: InputDecoration(
                  labelText: 'Credit Card Number',
                  hintText: 'XXXX-XXXX-XXXX-XXXX',
                ),
              ),
              SizedBox(height: 20), // Space between fields
              // Date Input Field
              TextField(
                keyboardType: TextInputType.datetime,
                inputFormatters: [
                  MaskedInputFormatter('##/##/####'), // Format for dates (MM/DD/YYYY)
                ],
                decoration: InputDecoration(
                  labelText: 'Date (MM/DD/YYYY)',
                  hintText: 'MM/DD/YYYY',
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function starts the app by calling runApp() with the RealFlutter widget.
// 2. The RealFlutter widget builds a MaterialApp with a title and a Scaffold.
// 3. The Scaffold contains an AppBar with the title "Input Formatter Example".
// 4. The body of the Scaffold is a Padding widget that contains a Column with three TextFields.
// 5. Each TextField is configured with a specific input formatter:
//    - The first TextField formats phone numbers in the format (+XX) XXX-XXX-XXX.
//    - The second TextField formats credit card numbers automatically.
//    - The third TextField formats dates in the MM/DD/YYYY format.
// 6. The SizedBox widgets provide spacing between the input fields for better UI layout.
```
<!-- END_MAIN -->
``` 

This structured blog provides a comprehensive overview of the `flutter_multi_formatter` package, guiding readers through its features, setup, and practical usage in a complete Flutter application.
<-- START_DESCRIPTION -->

# Animated Number Flutter Package
=====================================

The `animated_number` Flutter package is a powerful tool for creating visually appealing animations for numbers. It allows developers to easily animate numbers in a variety of ways, including counting up or down, spinning, and more.

### When to Use This Package

This package is perfect for any situation where you want to draw attention to a number or make it more engaging. Some examples include:

* Displaying a countdown timer
* Showing a score or progress in a game
* Highlighting a statistic or metric
* Creating a sense of excitement or urgency

### Features

The `animated_number` package includes a range of features, including:

* Support for multiple animation types (e.g. counting, spinning, etc.)
* Customizable animation duration and speed
* Support for decimal numbers
* Optional formatting for numbers (e.g. commas, decimal places, etc.)

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Using the Animated Number Package
=============================================

### Step 1: Add the Package to Your Project

To use the `animated_number` package, you'll need to add it to your project's `pubspec.yaml` file. You can do this by adding the following line:
```yml
dependencies:
  animated_number: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

In your Dart file, import the package using the following line:
```dart
import 'package:animated_number/animated_number.dart';
```
### Step 3: Create an Animated Number

To create an animated number, you'll need to use the `AnimatedNumber` widget. Here's an example:
```dart
AnimatedNumber(
  number: 100,
  animationType: AnimationType.counting,
  duration: Duration(seconds: 2),
)
```
This will create an animated number that counts up from 0 to 100 over a period of 2 seconds.

### Platform-Specific Details

The `animated_number` package works on both Android and iOS platforms. However, there are some platform-specific details to keep in mind:

* On Android, the package uses the `ValueAnimator` class to create animations. This means that animations may not work properly on older versions of Android.
* On iOS, the package uses the `UIView.animate` method to create animations. This means that animations may not work properly on older versions of iOS.

### Required Configurations or Optimizations

There are no required configurations or optimizations for using the `animated_number` package. However, you may want to consider the following:

* To improve performance, you can use the ` animationType` property to choose an animation type that is optimized for your use case.
* To customize the appearance of the animated number, you can use the `style` property to apply a custom style.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:animated_number/animated_number.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Animated Number Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  int _number = 100;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Animated Number Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            AnimatedNumber(
              number: _number,
              animationType: AnimationType.counting,
              duration: Duration(seconds: 2),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                setState(() {
                  _number += 100;
                });
              },
              child: Text('Increment Number'),
            ),
          ],
        ),
      ),
    );
  }
}

// The app starts by running the main function, which creates a new instance of the MyApp widget.
// The MyApp widget is a stateless widget that returns a MaterialApp widget.
// The MaterialApp widget is the top-level widget for the app, and it provides a basic material design visual layout structure.
// The home property of the MaterialApp widget is set to the MyHomePage widget, which is a stateful widget.
// The MyHomePage widget returns a Scaffold widget, which provides a basic material design visual layout structure.
// The body property of the Scaffold widget is set to a Center widget, which centers its child widget.
// The child widget of the Center widget is a Column widget, which arranges its child widgets in a vertical column.
// The Column widget contains two child widgets: an AnimatedNumber widget and an ElevatedButton widget.
// The AnimatedNumber widget displays the animated number, and the ElevatedButton widget increments the number when pressed.
// When the ElevatedButton widget is pressed, the setState function is called, which updates the state of the MyHomePage widget.
// The updated state causes the AnimatedNumber widget to animate the new number.
```

<-- END_MAIN -->
```markdown
<!-- START_DESCRIPTION -->
# Overview of the alquran_cloud Flutter Package

The `alquran_cloud` package is a powerful Flutter library designed to provide developers with easy access to the Quran's text and related resources. This package is particularly useful for applications focused on Islamic studies, Quranic recitation, and educational tools. 

## When to Use This Package
You should consider using the `alquran_cloud` package when:
- You are developing an Islamic app that requires Quranic text.
- You want to provide users with features like verse translation, tafsir (exegesis), or audio recitation.
- You need a reliable source for Quranic data that can be accessed over the internet.

## Key Features
- **Access to Quranic Text**: Retrieve verses, chapters, and translations.
- **Audio Recitation**: Play audio recitations of the Quran.
- **Search Functionality**: Search for specific verses or keywords.
- **Multi-language Support**: Access translations in various languages.

The `alquran_cloud` package simplifies the integration of Quranic content into your Flutter applications, making it an essential tool for developers in this domain.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Setting Up the alquran_cloud Package

## Installation
To get started with the `alquran_cloud` package, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  alquran_cloud: ^latest_version
```

Make sure to replace `latest_version` with the most recent version available on [pub.dev](https://pub.dev/packages/alquran_cloud).

## Platform-Specific Configuration

### Android
1. Open `android/app/build.gradle`.
2. Ensure that the `minSdkVersion` is set to at least 21:
   ```groovy
   android {
       ...
       defaultConfig {
           ...
           minSdkVersion 21
           ...
       }
   }
   ```

### iOS
1. Open `ios/Runner/Info.plist`.
2. Add the following permissions to allow internet access:
   ```xml
   <key>NSAppTransportSecurity</key>
   <dict>
       <key>NSAllowsArbitraryLoads</key>
       <true/>
   </dict>
   ```

## Using the Package
Once the package is installed and configured, you can start using it in your Flutter application. Hereâ€™s a simple example of how to initialize the package and fetch Quranic verses.

```dart
import 'package:flutter/material.dart';
import 'package:alquran_cloud/alquran_cloud.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Quran App',
      home: QuranHome(),
    );
  }
}

class QuranHome extends StatefulWidget {
  @override
  _QuranHomeState createState() => _QuranHomeState();
}

class _QuranHomeState extends State<QuranHome> {
  List<Verse> verses = [];

  @override
  void initState() {
    super.initState();
    fetchVerses();
  }

  Future<void> fetchVerses() async {
    // Fetching the first 10 verses of Surah Al-Fatiha
    verses = await AlQuranCloud.getVerses(surahId: 1, limit: 10);
    setState(() {});
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Quran Verses')),
      body: verses.isEmpty
          ? Center(child: CircularProgressIndicator())
          : ListView.builder(
              itemCount: verses.length,
              itemBuilder: (context, index) {
                return ListTile(
                  title: Text(verses[index].text),
                );
              },
            ),
    );
  }
}
```
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using alquran_cloud

```dart
import 'package:flutter/material.dart';
import 'package:alquran_cloud/alquran_cloud.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Quran App',
      home: QuranHome(),
    );
  }
}

class QuranHome extends StatefulWidget {
  @override
  _QuranHomeState createState() => _QuranHomeState();
}

class _QuranHomeState extends State<QuranHome> {
  List<Verse> verses = []; // List to hold fetched verses

  @override
  void initState() {
    super.initState();
    fetchVerses(); // Fetch verses when the widget is initialized
  }

  Future<void> fetchVerses() async {
    // Fetching the first 10 verses of Surah Al-Fatiha
    verses = await AlQuranCloud.getVerses(surahId: 1, limit: 10);
    setState(() {}); // Update the UI with the fetched verses
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Quran Verses')), // App bar title
      body: verses.isEmpty // Check if verses are loaded
          ? Center(child: CircularProgressIndicator()) // Show loading indicator
          : ListView.builder(
              itemCount: verses.length, // Number of verses to display
              itemBuilder: (context, index) {
                return ListTile(
                  title: Text(verses[index].text), // Display verse text
                );
              },
            ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the MyApp widget.
// 2. MyApp builds a MaterialApp with a title and a home widget (QuranHome).
// 3. QuranHome is a stateful widget that initializes an empty list of verses.
// 4. In the initState method, fetchVerses() is called to retrieve Quranic verses.
// 5. fetchVerses() uses the AlQuranCloud package to get the first 10 verses of Surah Al-Fatiha.
// 6. Once the verses are fetched, setState() is called to update the UI.
// 7. The build method checks if verses are empty; if so, it shows a loading indicator.
// 8. If verses are available, it displays them in a ListView using ListTile widgets.
```
<!-- END_MAIN -->
```

This structured blog post provides a comprehensive overview of the `alquran_cloud` package, including its features, setup instructions, and a complete example with detailed comments explaining the application flow.
<-- START_DESCRIPTION -->

# Sentry Hive Flutter Package
================================

The `sentry_hive` package is a Flutter package that provides a simple and efficient way to store and manage data locally on mobile devices. It uses the Hive NoSQL database under the hood, which provides a fast and reliable data storage solution.

## When to Use
--------------

The `sentry_hive` package is ideal for storing small to medium-sized data, such as:

* User preferences and settings
* Caching data from APIs
* Storing data for offline use

## Features
------------

* Fast and efficient data storage
* Simple and easy-to-use API
* Supports encryption and decryption of data
* Compatible with both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up Sentry Hive
-------------------------

To use the `sentry_hive` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  sentry_hive: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:sentry_hive/sentry_hive.dart';
```
### Step 3: Initialize the Database

Initialize the database by calling the `init` method:
```dart
await SentryHive.init();
```
### Step 4: Open a Box

Open a box by calling the `openBox` method:
```dart
final box = await SentryHive.openBox('my_box');
```
### Step 5: Store Data

Store data in the box using the `put` method:
```dart
box.put('key', 'value');
```
### Step 6: Retrieve Data

Retrieve data from the box using the `get` method:
```dart
final value = box.get('key');
```
### Platform-Specific Details

* On Android, the database is stored in the app's internal storage directory.
* On iOS, the database is stored in the app's documents directory.

### Configurations and Optimizations

* You can configure the database to use encryption by passing an encryption key to the `init` method.
* You can optimize the database by calling the `compact` method periodically.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:sentry_hive/sentry_hive.dart';

void main() async {
  // Initialize the database
  await SentryHive.init();

  // Open a box
  final box = await SentryHive.openBox('my_box');

  // Store data
  box.put('key', 'value');

  // Retrieve data
  final value = box.get('key');

  // Print the value
  print(value);

  // Run the app
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Real Flutter',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Real Flutter'),
        ),
        body: Center(
          child: Text('Hello, World!'),
        ),
      ),
    );
  }
}

// The app starts by initializing the database and opening a box.
// It then stores a value in the box and retrieves it.
// Finally, it prints the value and runs the app.
// The app displays a simple "Hello, World!" message on the screen.
```

// The application flow is as follows:
// 1. The database is initialized using the `init` method.
// 2. A box is opened using the `openBox` method.
// 3. A value is stored in the box using the `put` method.
// 4. The value is retrieved from the box using the `get` method.
// 5. The value is printed to the console.
// 6. The app is run using the `runApp` method.
// 7. The app displays a simple "Hello, World!" message on the screen.

<-- END_MAIN -->
```markdown
<-- START_DESCRIPTION -->

# Appinio Swiper Flutter Package

The `appinio_swiper` package is a powerful and flexible Flutter widget that allows developers to create swipeable card interfaces, similar to those found in popular dating apps like Tinder. This package is particularly useful for applications that require a user-friendly way to browse through a collection of items, such as product catalogs, image galleries, or user profiles.

## Features

- **Customizable Cards**: Easily customize the appearance of each card with your own widgets.
- **Swipe Gestures**: Supports swipe gestures to the left, right, top, and bottom.
- **Callback Functions**: Provides callback functions to handle swipe actions and determine the direction of the swipe.
- **Stacked Cards**: Displays multiple cards in a stack, giving a 3D effect.
- **Control Swipes Programmatically**: Allows programmatic control over the swipe actions, enabling automatic swipes or resetting the stack.

## When to Use

- **Dating Apps**: For browsing through user profiles.
- **E-commerce Apps**: To showcase products in a visually appealing manner.
- **Content Browsing**: For applications that require users to browse through a series of images or articles.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using Appinio Swiper

In this tutorial, we will walk through the process of setting up the `appinio_swiper` package in a Flutter project and demonstrate how to use its features effectively.

## Setup

### Step 1: Add Dependency

Add the `appinio_swiper` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  appinio_swiper: ^1.0.0
```

Run `flutter pub get` to install the package.

### Step 2: Import the Package

In your Dart file, import the package:

```dart
import 'package:appinio_swiper/appinio_swiper.dart';
```

### Step 3: Platform-Specific Configurations

#### Android

Ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```gradle
android {
    defaultConfig {
        minSdkVersion 21
    }
}
```

#### iOS

No specific configurations are required for iOS, but ensure your deployment target is set to iOS 9.0 or higher in your `ios/Podfile`:

```ruby
platform :ios, '9.0'
```

### Step 4: Basic Usage

Create a `RealFlutter` class that extends `StatelessWidget` or `StatefulWidget` and use the `AppinioSwiper` widget within your build method:

```dart
class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Appinio Swiper Example')),
      body: AppinioSwiper(
        cards: _buildCards(),
        onSwipe: (index, direction) {
          print('Card $index swiped $direction');
        },
      ),
    );
  }

  List<Widget> _buildCards() {
    return List.generate(5, (index) {
      return Card(
        child: Center(child: Text('Card $index')),
      );
    });
  }
}
```

<-- END_TUTORIAL -->

<-- MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:appinio_swiper/appinio_swiper.dart';

// Main function to run the app
void main() {
  runApp(MyApp());
}

// Root widget of the application
class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Appinio Swiper Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(), // Home screen of the app
    );
  }
}

// Main class demonstrating the Appinio Swiper
class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // List of cards to be swiped
  final List<Widget> _cards = List.generate(
    5,
    (index) => Card(
      child: Center(child: Text('Card $index')),
    ),
  );

  // Controller to manage swiper actions
  final AppinioSwiperController _controller = AppinioSwiperController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Appinio Swiper Example'),
      ),
      body: Column(
        children: [
          Expanded(
            child: AppinioSwiper(
              controller: _controller, // Assigning the controller
              cards: _cards, // Cards to be displayed
              onSwipe: (index, direction) {
                // Callback for swipe actions
                print('Card $index swiped $direction');
              },
              onEnd: () {
                // Callback when all cards are swiped
                print('All cards swiped');
              },
            ),
          ),
          Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              ElevatedButton(
                onPressed: () {
                  // Programmatically swipe left
                  _controller.swipeLeft();
                },
                child: Text('Swipe Left'),
              ),
              SizedBox(width: 20),
              ElevatedButton(
                onPressed: () {
                  // Programmatically swipe right
                  _controller.swipeRight();
                },
                child: Text('Swipe Right'),
              ),
            ],
          ),
        ],
      ),
    );
  }
}

// Application Flow:
// 1. The app starts with the MyApp widget, which sets up the MaterialApp.
// 2. RealFlutter is the home screen, which is a stateful widget managing the swiper.
// 3. A list of cards is generated and displayed using the AppinioSwiper widget.
// 4. The AppinioSwiperController allows programmatic control over the swipe actions.
// 5. Swipe actions trigger callbacks that print the swipe direction and index.
// 6. Buttons below the swiper allow manual swiping of cards left or right.
```

<-- END_MAIN -->
```
```markdown
<!-- START_DESCRIPTION -->
# flutter_langdetect Package Overview

The `flutter_langdetect` package is a powerful tool for language detection in Flutter applications. It leverages the capabilities of the `langdetect` library, which is based on Google's language-detection algorithm. This package is particularly useful for applications that need to adapt their content based on the user's language or for analytics purposes.

## When to Use This Package
- **Multi-Language Applications**: If your app supports multiple languages and you want to detect the user's language automatically.
- **Content Personalization**: To tailor content based on the detected language, enhancing user experience.
- **Analytics**: To gather data on user language preferences for better insights.

## Features
- **Automatic Language Detection**: Detects over 50 languages with high accuracy.
- **Lightweight**: Minimal impact on app performance.
- **Easy Integration**: Simple API for quick implementation.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Setting Up and Using flutter_langdetect

## Installation
To add the `flutter_langdetect` package to your Flutter project, include it in your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  flutter_langdetect: ^1.0.0  # Check for the latest version on pub.dev
```

Run `flutter pub get` to install the package.

## Platform-Specific Details
### Android
No additional configuration is required for Android. Just ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file.

### iOS
For iOS, ensure that you have the correct permissions set in your `Info.plist` if you plan to access any user data that might influence language detection.

## Basic Usage
To use the `flutter_langdetect` package, you can follow these steps:

1. Import the package in your Dart file:
   ```dart
   import 'package:flutter_langdetect/flutter_langdetect.dart';
   ```

2. Initialize the language detector:
   ```dart
   final langDetect = RealFlutter();
   ```

3. Use the `detect` method to identify the language:
   ```dart
   String text = "Bonjour tout le monde";
   String detectedLanguage = await langDetect.detect(text);
   print("Detected Language: $detectedLanguage");
   ```

This will print the detected language based on the input text.

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of flutter_langdetect

```dart
import 'package:flutter/material.dart';
import 'package:flutter_langdetect/flutter_langdetect.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Language Detection Example',
      home: LanguageDetectionScreen(),
    );
  }
}

class LanguageDetectionScreen extends StatefulWidget {
  @override
  _LanguageDetectionScreenState createState() => _LanguageDetectionScreenState();
}

class _LanguageDetectionScreenState extends State<LanguageDetectionScreen> {
  String _detectedLanguage = "Unknown";

  @override
  void initState() {
    super.initState();
    _detectLanguage();
  }

  // Method to detect language
  Future<void> _detectLanguage() async {
    // Initialize the language detector
    final langDetect = RealFlutter();
    
    // Sample text for language detection
    String text = "Hola, ¿cómo estás?";
    
    // Detect the language
    String detectedLanguage = await langDetect.detect(text);
    
    // Update the state with the detected language
    setState(() {
      _detectedLanguage = detectedLanguage;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Language Detection'),
      ),
      body: Center(
        child: Text(
          'Detected Language: $_detectedLanguage',
          style: TextStyle(fontSize: 24),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the MyApp widget.
// 2. MyApp builds a MaterialApp with a title and a home screen.
// 3. The LanguageDetectionScreen is a stateful widget that detects the language.
// 4. In the initState method, _detectLanguage is called to start the detection process.
// 5. _detectLanguage initializes the RealFlutter language detector and detects the language of the sample text.
// 6. The detected language is then set in the state, which triggers a rebuild of the widget.
// 7. The detected language is displayed in the center of the screen.

```
<!-- END_MAIN -->
``` 

This structured approach provides a comprehensive overview of the `flutter_langdetect` package, guiding developers through its features, setup, and practical usage in a Flutter application.
<-- START_DESCRIPTION -->

String Validator Plus Flutter Package
=====================================

The `string_validator_plus` Flutter package provides a simple and efficient way to validate strings in your Flutter applications. It offers a range of validation methods, including email, password, phone number, and more.

When to Use This Package
------------------------

This package is ideal for any Flutter application that requires string validation, such as:

* User registration and login forms
* Contact forms
* Payment processing
* Data entry applications

Features
--------

The `string_validator_plus` package offers the following features:

* Email validation
* Password validation (including password strength checking)
* Phone number validation
* URL validation
* Credit card number validation
* and more!

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
---------------

To use the `string_validator_plus` package in your Flutter application, follow these steps:

### Step 1: Add the Package to Your `pubspec.yaml` File

```yml
dependencies:
  string_validator_plus: ^1.0.0
```

### Step 2: Import the Package in Your Dart File

```dart
import 'package:string_validator_plus/string_validator_plus.dart';
```

### Step 3: Use the Validation Methods

```dart
class RealFlutter {
  void validateEmail(String email) {
    if (EmailValidator.validate(email)) {
      print('Email is valid');
    } else {
      print('Email is not valid');
    }
  }

  void validatePassword(String password) {
    if (PasswordValidator.validate(password)) {
      print('Password is valid');
    } else {
      print('Password is not valid');
    }
  }
}
```

Platform-Specific Details
-------------------------

The `string_validator_plus` package works on both Android and iOS platforms.

Required Configurations or Optimizations
----------------------------------------

No additional configurations or optimizations are required to use this package.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:string_validator_plus/string_validator_plus.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'String Validator Plus Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _formKey = GlobalKey<FormState>();
  String _email = '';
  String _password = '';

  void _validateForm() {
    if (_formKey.currentState!.validate()) {
      // Form is valid, proceed with submission
      print('Form is valid');
    } else {
      // Form is not valid, display errors
      print('Form is not valid');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('String Validator Plus Demo'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              TextFormField(
                decoration: InputDecoration(
                  labelText: 'Email',
                  border: OutlineInputBorder(),
                ),
                validator: (value) {
                  if (!EmailValidator.validate(value!)) {
                    return 'Invalid email';
                  }
                  return null;
                },
                onSaved: (value) => _email = value!,
              ),
              SizedBox(height: 16),
              TextFormField(
                decoration: InputDecoration(
                  labelText: 'Password',
                  border: OutlineInputBorder(),
                ),
                obscureText: true,
                validator: (value) {
                  if (!PasswordValidator.validate(value!)) {
                    return 'Invalid password';
                  }
                  return null;
                },
                onSaved: (value) => _password = value!,
              ),
              SizedBox(height: 16),
              ElevatedButton(
                onPressed: _validateForm,
                child: Text('Validate Form'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user enters their email and password in the form fields.
// 2. When the user clicks the "Validate Form" button, the _validateForm function is called.
// 3. The _validateForm function checks if the form is valid by calling the validate method on the _formKey.
// 4. If the form is valid, the function prints "Form is valid" to the console.
// 5. If the form is not valid, the function prints "Form is not valid" to the console and displays error messages below the form fields.
// 6. The EmailValidator and PasswordValidator classes are used to validate the email and password fields, respectively.
// 7. If the email or password is invalid, an error message is displayed below the corresponding form field.

```

<-- END_MAIN -->
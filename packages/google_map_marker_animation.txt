# Google Map Marker Animation in Flutter

## <-- START_DESCRIPTION -->

### Overview of `google_map_marker_animation`

The `google_map_marker_animation` package is a powerful Flutter library that allows developers to animate markers on Google Maps. This package is particularly useful for applications that require dynamic updates to map markers, such as real-time location tracking, delivery services, or any application that benefits from visual feedback on map interactions.

### When to Use This Package

You might consider using `google_map_marker_animation` in scenarios such as:
- **Real-time location tracking**: For apps that display user or vehicle locations on a map.
- **Delivery applications**: To show the movement of delivery vehicles in real-time.
- **Event tracking**: For applications that need to visualize the movement of participants in an event.

### Key Features

- **Smooth Marker Animation**: Provides smooth transitions for marker movements, enhancing user experience.
- **Customizable Animations**: Allows customization of animation duration and easing functions.
- **Easy Integration**: Simple to integrate with existing Google Maps implementations in Flutter.
- **Support for Multiple Markers**: Can handle multiple markers on the map simultaneously.

## <-- END_DESCRIPTION -->

## <-- START_TUTORIAL -->

### Setup Process

To get started with the `google_map_marker_animation` package, follow these steps:

1. **Add Dependency**: Open your `pubspec.yaml` file and add the package:

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     google_maps_flutter: ^2.1.1
     google_map_marker_animation: ^1.0.0
   ```

   Make sure to run `flutter pub get` to install the new dependencies.

2. **Platform-Specific Configuration**:
   - **Android**: Ensure that you have the necessary permissions in your `AndroidManifest.xml`:

     ```xml
     <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>
     <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION"/>
     ```

   - **iOS**: Update your `Info.plist` to include location permissions:

     ```xml
     <key>NSLocationWhenInUseUsageDescription</key>
     <string>We need your location to show it on the map.</string>
     ```

3. **Google Maps API Key**: Obtain a Google Maps API key and add it to your `AndroidManifest.xml`:

   ```xml
   <meta-data
       android:name="com.google.android.geo.API_KEY"
       android:value="YOUR_API_KEY_HERE"/>
   ```

### Using the Package

To use the `google_map_marker_animation` package, you will need to create a Google Map widget and implement the marker animation. Below is a simple example of how to set up the map and animate a marker.

## <-- END_TUTORIAL -->

## <-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'package:google_map_marker_animation/google_map_marker_animation.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  late GoogleMapController mapController; // Controller for Google Map
  Marker? animatedMarker; // Marker to be animated
  LatLng markerPosition = LatLng(37.7749, -122.4194); // Initial position of the marker

  @override
  void initState() {
    super.initState();
    // Initialize the animated marker
    animatedMarker = Marker(
      markerId: MarkerId('animatedMarker'),
      position: markerPosition,
      icon: BitmapDescriptor.defaultMarker,
    );
  }

  // Function to animate the marker
  void animateMarker() {
    // New position for the marker
    LatLng newPosition = LatLng(37.7849, -122.4094);
    
    // Animate the marker to the new position
    MarkerAnimation.animateMarker(
      mapController,
      animatedMarker!,
      newPosition,
      duration: Duration(seconds: 2), // Duration of the animation
    );

    // Update the marker's position
    setState(() {
      markerPosition = newPosition;
      animatedMarker = animatedMarker!.copyWith(
        positionParam: newPosition,
      );
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Google Map Marker Animation'),
          actions: [
            IconButton(
              icon: Icon(Icons.play_arrow),
              onPressed: animateMarker, // Trigger animation on button press
            ),
          ],
        ),
        body: GoogleMap(
          onMapCreated: (GoogleMapController controller) {
            mapController = controller; // Assign the controller
            // Add the initial marker to the map
            mapController.addMarker(animatedMarker!);
          },
          initialCameraPosition: CameraPosition(
            target: markerPosition,
            zoom: 14.0,
          ),
          markers: {animatedMarker!}, // Set the animated marker
        ),
      ),
    );
  }
}
```

### Application Flow Explanation

// The application starts by running the `RealFlutter` widget.
// In the `initState` method, we initialize the animated marker with a default position.
// The `animateMarker` function is defined to change the marker's position when called.
// When the user presses the play button in the app bar, the `animateMarker` function is triggered.
// This function updates the marker's position to a new location and animates the transition over 2 seconds.
// The `GoogleMap` widget is created with an initial camera position and the animated marker is added to the map.
// The map controller is assigned when the map is created, allowing us to manipulate the map and markers dynamically.

## <-- END_MAIN -->

### Summary

In this blog post, we explored the `google_map_marker_animation` package, which provides a simple way to animate markers on Google Maps in Flutter applications. We covered the setup process, including platform-specific configurations, and provided a complete example demonstrating how to animate a marker's position. This package is particularly useful for applications that require real-time updates and visual feedback on map interactions, making it a valuable tool for Flutter developers.
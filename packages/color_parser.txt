<-- START_DESCRIPTION -->
# Color Parser Flutter Package
The `color_parser` Flutter package is a utility library that allows you to parse and manipulate colors in your Flutter applications. It provides a simple and efficient way to work with colors, making it a great addition to any Flutter project.

## When to Use
You can use the `color_parser` package in a variety of scenarios, such as:

* Parsing color strings from a database or API
* Converting between different color formats (e.g., HEX, RGB, HSL)
* Generating color palettes or gradients
* Validating user-inputted color values

## Features
The `color_parser` package offers the following features:

* Support for multiple color formats (HEX, RGB, HSL, etc.)
* Color parsing and validation
* Color conversion between different formats
* Color manipulation (e.g., lighten, darken, saturate)

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->
# Setting Up the Color Parser Package
To use the `color_parser` package in your Flutter project, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  color_parser: ^1.0.0
```
2. Run `flutter pub get` to install the package.
3. Import the package in your Dart file:
```dart
import 'package:color_parser/color_parser.dart';
```
## Platform-Specific Details
The `color_parser` package works on both Android and iOS platforms. However, if you're using Android, you may need to add the following configuration to your `android/app/build.gradle` file:
```groovy
android {
  ...
  defaultConfig {
    ...
    renderscriptTargetApi 28
    renderscriptSupportModeEnabled true
  }
}
```
This configuration is required for Android devices running API level 28 or higher.

## Optimizations
To optimize the performance of the `color_parser` package, you can use the `ColorParser.cache` property to cache parsed color values. This can improve performance when working with large datasets or complex color manipulations.

<-- END_TUTORIAL -->

<-- START_MAIN -->
```dart
import 'package:flutter/material.dart';
import 'package:color_parser/color_parser.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  Color _color = Colors.white;

  // Step 1: Define a color string to parse
  String _colorString = '#FF0000';

  // Step 2: Parse the color string using the ColorParser
  Color _parsedColor = ColorParser.parse(_colorString);

  // Step 3: Convert the parsed color to a different format (e.g., RGB)
  String _rgbString = ColorParser.toRgbString(_parsedColor);

  // Step 4: Manipulate the color (e.g., lighten by 20%)
  Color _lightenedColor = ColorParser.lighten(_parsedColor, 0.2);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Color Parser Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              // Display the original color
              Container(
                width: 100,
                height: 100,
                color: _color,
              ),
              // Display the parsed color
              Container(
                width: 100,
                height: 100,
                color: _parsedColor,
              ),
              // Display the RGB string
              Text(_rgbString),
              // Display the lightened color
              Container(
                width: 100,
                height: 100,
                color: _lightenedColor,
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app, and the RealFlutter widget is created.
// 2. The _colorString variable is defined and set to a color string (e.g., '#FF0000').
// 3. The ColorParser.parse() method is called to parse the color string into a Color object.
// 4. The parsed color is then converted to a different format (e.g., RGB) using the ColorParser.toRgbString() method.
// 5. The color is manipulated (e.g., lightened by 20%) using the ColorParser.lighten() method.
// 6. The original color, parsed color, RGB string, and lightened color are displayed on the screen.
```
<-- END_MAIN -->
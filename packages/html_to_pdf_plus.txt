<-- START_DESCRIPTION -->

**html_to_pdf_plus Flutter Package: A Comprehensive Overview**
===========================================================

The `html_to_pdf_plus` Flutter package is a powerful tool for converting HTML content into PDF documents. It provides a simple and efficient way to generate PDFs from HTML strings or URLs, making it an ideal solution for various use cases, such as:

* Generating reports or invoices from web-based data
* Converting web pages into PDF documents for offline reading
* Creating custom PDF templates for dynamic content

Key Features:

* Supports HTML strings and URLs as input
* Customizable PDF settings, such as page size, margins, and orientation
* Optional header and footer support
* Works on both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setting Up and Using html_to_pdf_plus**
=====================================

### Step 1: Add the Package to Your Flutter Project

Add the following dependency to your `pubspec.yaml` file:
```yml
dependencies:
  html_to_pdf_plus: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:html_to_pdf_plus/html_to_pdf_plus.dart';
```
### Step 3: Convert HTML to PDF

Use the `HtmlToPdfPlus` class to convert HTML content into a PDF document:
```dart
Future<void> _generatePdf() async {
  final htmlContent = '<html><body>Hello, World!</body></html>';
  final pdfFile = await HtmlToPdfPlus.convertHtml(
    htmlContent,
    pdfSettings: PdfSettings(
      pageSize: PageSize.a4,
      margins: PdfMargins.all(10),
    ),
  );
  // Save or share the PDF file
}
```
### Platform-Specific Details

* **Android:** Make sure to add the following permission to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
```
* **iOS:** No additional setup is required.

<-- END_TUTORIAL -->

<-- START_MAIN -->

**Complete Example: RealFlutter**
=============================

```dart
import 'package:flutter/material.dart';
import 'package:html_to_pdf_plus/html_to_pdf_plus.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final _htmlController = TextEditingController();

  Future<void> _generatePdf() async {
    // Get the HTML content from the text field
    final htmlContent = _htmlController.text;

    // Convert the HTML content into a PDF document
    final pdfFile = await HtmlToPdfPlus.convertHtml(
      htmlContent,
      pdfSettings: PdfSettings(
        pageSize: PageSize.a4,
        margins: PdfMargins.all(10),
      ),
    );

    // Save or share the PDF file
    await _savePdfFile(pdfFile);
  }

  Future<void> _savePdfFile(File pdfFile) async {
    // Save the PDF file to the device's storage
    final directory = await getApplicationDocumentsDirectory();
    final filePath = '${directory.path}/example.pdf';
    await pdfFile.copy(filePath);

    // Show a snackbar to confirm the PDF file has been saved
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('PDF file saved to $filePath')),
    );
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'RealFlutter',
      home: Scaffold(
        appBar: AppBar(
          title: Text('RealFlutter'),
        ),
        body: Padding(
          padding: const EdgeInsets.all(20.0),
          child: Column(
            children: [
              TextField(
                controller: _htmlController,
                decoration: InputDecoration(
                  labelText: 'Enter HTML content',
                  border: OutlineInputBorder(),
                ),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _generatePdf,
                child: Text('Generate PDF'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow:
// 1. The user enters HTML content into the text field.
// 2. The user clicks the "Generate PDF" button.
// 3. The _generatePdf function is called, which converts the HTML content into a PDF document.
// 4. The PDF document is saved to the device's storage using the _savePdfFile function.
// 5. A snackbar is shown to confirm the PDF file has been saved.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Formx Flutter Package: A High-Level Overview
=====================================================

The Formx Flutter package is a powerful tool for building complex forms in Flutter applications. It provides a simple and efficient way to manage form state, validate user input, and handle form submission.

### When to Use Formx

Formx is ideal for building complex forms with multiple fields, validation rules, and conditional logic. It's perfect for applications that require user input, such as:

* Registration forms
* Login forms
* Survey forms
* Payment forms

### Key Features of Formx

* **Form State Management**: Formx provides a simple way to manage form state, including field values, validation errors, and form submission status.
* **Validation**: Formx includes a robust validation system that allows you to define custom validation rules for each field.
* **Conditional Logic**: Formx allows you to define conditional logic for each field, enabling you to show or hide fields based on user input.
* **Form Submission**: Formx provides a simple way to handle form submission, including support for async submission and error handling.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up Formx in Your Flutter Application
=============================================

To use Formx in your Flutter application, follow these steps:

### Step 1: Add Formx to Your Pubspec.yaml File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  formx: ^1.0.0
```
### Step 2: Import Formx in Your Dart File

Import Formx in your Dart file:
```dart
import 'package:formx/formx.dart';
```
### Step 3: Create a Formx Instance

Create a Formx instance and pass it to your form widget:
```dart
Formx formx = Formx(
  fields: [
    FormxField(
      name: 'username',
      validator: (value) {
        if (value.isEmpty) {
          return 'Username is required';
        }
        return null;
      },
    ),
    FormxField(
      name: 'password',
      validator: (value) {
        if (value.isEmpty) {
          return 'Password is required';
        }
        return null;
      },
    ),
  ],
);
```
### Step 4: Use Formx in Your Form Widget

Use the Formx instance in your form widget:
```dart
Form(
  child: Column(
    children: [
      FormxFieldWidget(
        field: formx.fields['username'],
        builder: (context, field) {
          return TextField(
            controller: field.controller,
            decoration: InputDecoration(
              labelText: 'Username',
              errorText: field.errorText,
            ),
          );
        },
      ),
      FormxFieldWidget(
        field: formx.fields['password'],
        builder: (context, field) {
          return TextField(
            controller: field.controller,
            decoration: InputDecoration(
              labelText: 'Password',
              errorText: field.errorText,
            ),
          );
        },
      ),
    ],
  ),
);
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:formx/formx.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Formx Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _formKey = GlobalKey<FormState>();
  final _formx = Formx(
    fields: [
      FormxField(
        name: 'username',
        validator: (value) {
          if (value.isEmpty) {
            return 'Username is required';
          }
          return null;
        },
      ),
      FormxField(
        name: 'password',
        validator: (value) {
          if (value.isEmpty) {
            return 'Password is required';
          }
          return null;
        },
      ),
    ],
  );

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Formx Example'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              FormxFieldWidget(
                field: _formx.fields['username'],
                builder: (context, field) {
                  return TextField(
                    controller: field.controller,
                    decoration: InputDecoration(
                      labelText: 'Username',
                      errorText: field.errorText,
                    ),
                  );
                },
              ),
              FormxFieldWidget(
                field: _formx.fields['password'],
                builder: (context, field) {
                  return TextField(
                    controller: field.controller,
                    decoration: InputDecoration(
                      labelText: 'Password',
                      errorText: field.errorText,
                    ),
                  );
                },
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  if (_formKey.currentState.validate()) {
                    // Form is valid, submit it
                    _formx.submit();
                  }
                },
                child: Text('Submit'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and is presented with a form containing two fields: username and password.
// 2. The user enters their username and password, and the form is validated in real-time using the Formx validators.
// 3. If the form is valid, the user can submit it by pressing the "Submit" button.
// 4. When the form is submitted, the Formx instance is used to handle the submission and perform any necessary actions (e.g. sending a request to a server).
// 5. If the submission is successful, the app can display a success message or perform some other action.
// 6. If the submission fails, the app can display an error message and allow the user to try again.
```

<-- END_MAIN -->
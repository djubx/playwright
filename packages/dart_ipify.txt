```markdown
<-- START_DESCRIPTION -->

# Dart Ipify Flutter Package: An Overview

The `dart_ipify` package is a simple yet powerful tool for Flutter developers who need to retrieve the public IP address of a device. This package is particularly useful in applications where network configurations or IP-based restrictions are involved. It provides a straightforward API to fetch both IPv4 and IPv6 addresses, making it versatile for various network environments.

## When to Use `dart_ipify`

- **Network Configuration**: When your application needs to display or log the user's public IP address.
- **Security**: For applications that require IP-based access control or logging.
- **Analytics**: To gather data on the geographical distribution of your users based on their IP addresses.

## Features

- **IPv4 and IPv6 Support**: Fetch both types of IP addresses seamlessly.
- **Simple API**: Easy to integrate with minimal setup.
- **Cross-Platform**: Works on both Android and iOS without platform-specific code.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using `dart_ipify` in Flutter

In this section, we'll walk through the setup process for the `dart_ipify` package and demonstrate how to use it in a Flutter application.

## Setup Process

1. **Add Dependency**: First, add the `dart_ipify` package to your `pubspec.yaml` file.

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     dart_ipify: ^1.0.0
   ```

2. **Install Packages**: Run `flutter pub get` to install the package.

3. **Platform-Specific Configuration**: The `dart_ipify` package does not require any additional platform-specific setup for Android or iOS, making it easy to integrate.

## Using `dart_ipify`

To use the package, you need to import it into your Dart file and call the appropriate methods to fetch the IP address.

```dart
import 'package:dart_ipify/dart_ipify.dart';

class RealFlutter {
  Future<void> fetchIpAddress() async {
    final ipv4 = await Ipify.ipv4();
    print('Your IPv4 address is $ipv4');

    final ipv6 = await Ipify.ipv6();
    print('Your IPv6 address is $ipv6');
  }
}
```

In this example, the `fetchIpAddress` method retrieves both the IPv4 and IPv6 addresses and prints them to the console.

<-- END_TUTORIAL -->

<-- MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:dart_ipify/dart_ipify.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'IP Address Fetcher',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  String _ipv4 = 'Fetching...';
  String _ipv6 = 'Fetching...';

  @override
  void initState() {
    super.initState();
    _fetchIpAddresses();
  }

  Future<void> _fetchIpAddresses() async {
    // Fetch the IPv4 address
    final ipv4 = await Ipify.ipv4();
    // Fetch the IPv6 address
    final ipv6 = await Ipify.ipv6();

    // Update the state with the fetched IP addresses
    setState(() {
      _ipv4 = ipv4;
      _ipv6 = ipv6;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('IP Address Fetcher'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Your IPv4 address is:',
            ),
            Text(
              _ipv4,
              style: Theme.of(context).textTheme.headline4,
            ),
            SizedBox(height: 20),
            Text(
              'Your IPv6 address is:',
            ),
            Text(
              _ipv6,
              style: Theme.of(context).textTheme.headline4,
            ),
          ],
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The application starts with the `main` function, which runs the `MyApp` widget.
// 2. `MyApp` is a stateless widget that sets up the MaterialApp and specifies `RealFlutter` as the home widget.
// 3. `RealFlutter` is a stateful widget that manages the state of the IP addresses.
// 4. In the `_RealFlutterState` class, the `initState` method is overridden to call `_fetchIpAddresses` when the widget is initialized.
// 5. The `_fetchIpAddresses` method asynchronously fetches the IPv4 and IPv6 addresses using the `Ipify` class and updates the state.
// 6. The `build` method constructs the UI, displaying the fetched IP addresses in a column layout.
// 7. The UI updates automatically when the state changes, showing the IP addresses once they are fetched.

```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Flutter Animated Loading Kit
==========================

The `flutter_animated_loadingkit` package is a Flutter library that provides a variety of animated loading indicators for your mobile application. It offers a range of customizable loading animations that can be easily integrated into your app.

## When to Use
--------------

You can use this package when you need to display a loading animation in your app, such as:

* When fetching data from a server
* When performing a long-running task
* When displaying a splash screen

## Features
------------

* Variety of loading animations to choose from
* Customizable animation colors and sizes
* Easy to use and integrate into your app

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

## Setup
--------

To use the `flutter_animated_loadingkit` package, add it to your `pubspec.yaml` file:

```yml
dependencies:
  flutter_animated_loadingkit: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Basic Usage
-------------

To display a loading animation, use the `LoadingIndicator` widget:

```dart
import 'package:flutter_animated_loadingkit/flutter_animated_loadingkit.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Center(
        child: LoadingIndicator(),
      ),
    );
  }
}
```

## Customization
--------------

You can customize the loading animation by passing in a `LoadingIndicatorConfig` object:

```dart
LoadingIndicator(
  config: LoadingIndicatorConfig(
    color: Colors.blue,
    size: 50.0,
  ),
)
```

## Platform-Specific Details
---------------------------

### Android

No additional setup is required for Android.

### iOS

No additional setup is required for iOS.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_animated_loadingkit/flutter_animated_loadingkit.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Animated Loading Kit Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  bool _isLoading = false;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Animated Loading Kit Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            // Display the loading animation when _isLoading is true
            _isLoading
                ? LoadingIndicator(
                    config: LoadingIndicatorConfig(
                      color: Colors.blue,
                      size: 50.0,
                    ),
                  )
                : Text('Press the button to start loading'),
            SizedBox(height: 20.0),
            ElevatedButton(
              onPressed: () {
                // Toggle the loading state
                setState(() {
                  _isLoading = !_isLoading;
                });
              },
              child: Text(_isLoading ? 'Stop Loading' : 'Start Loading'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user presses the button to start loading.
// 2. The _isLoading state is set to true, which displays the loading animation.
// 3. The user presses the button again to stop loading.
// 4. The _isLoading state is set to false, which hides the loading animation.
// This demonstrates how to use the LoadingIndicator widget to display a loading animation in your app.

// Final summary: The code flows by displaying a loading animation when the user presses the button, and hiding it when the user presses the button again.
```

<-- END_MAIN -->
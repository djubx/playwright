```markdown
<!-- START_DESCRIPTION -->
# Device Marketing Names Flutter Package

The `device_marketing_names` Flutter package is a powerful tool designed to help developers retrieve the marketing names of devices across different platforms. This package is particularly useful for applications that need to display device-specific information, such as in analytics, user support, or personalized content delivery.

## When to Use This Package

You might consider using the `device_marketing_names` package in scenarios such as:
- **Analytics**: When you want to collect data on the types of devices your users are using.
- **User Support**: To provide tailored support based on the user's device.
- **Personalization**: To customize the user experience based on the device type.

## Features

- **Cross-Platform Support**: Works seamlessly on both Android and iOS.
- **Easy Integration**: Simple setup and usage within your Flutter application.
- **Device-Specific Information**: Retrieves the marketing name of the device, which can be more user-friendly than technical specifications.

With these features, the `device_marketing_names` package enhances the user experience by providing relevant device information in a straightforward manner.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Device Marketing Names Package

## Step 1: Adding the Dependency

To get started, you need to add the `device_marketing_names` package to your `pubspec.yaml` file. Open the file and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  device_marketing_names: ^latest_version
```

Make sure to replace `^latest_version` with the latest version of the package available on [pub.dev](https://pub.dev/packages/device_marketing_names).

## Step 2: Platform-Specific Configuration

### Android

For Android, ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
        ...
    }
}
```

### iOS

For iOS, you may need to add permissions in your `Info.plist` file if you plan to access certain device features. However, for basic usage of the `device_marketing_names` package, no additional permissions are required.

## Step 3: Importing the Package

In your Dart file, import the package:

```dart
import 'package:device_marketing_names/device_marketing_names.dart';
```

## Step 4: Using the Package

You can now use the package to retrieve the marketing name of the device. Hereâ€™s a simple example of how to do this:

```dart
void main() async {
  // Initialize the Flutter binding
  WidgetsFlutterBinding.ensureInitialized();

  // Get the device marketing name
  String deviceName = await DeviceMarketingNames.getDeviceMarketingName();
  print("Device Marketing Name: $deviceName");
}
```

This code initializes the Flutter application and retrieves the marketing name of the device, which can then be used as needed in your application.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using Device Marketing Names

```dart
import 'package:flutter/material.dart';
import 'package:device_marketing_names/device_marketing_names.dart';

void main() async {
  // Ensure Flutter binding is initialized before running the app
  WidgetsFlutterBinding.ensureInitialized();

  // Create a MaterialApp widget
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Device Marketing Names Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: DeviceInfoScreen(),
    );
  }
}

class DeviceInfoScreen extends StatefulWidget {
  @override
  _DeviceInfoScreenState createState() => _DeviceInfoScreenState();
}

class _DeviceInfoScreenState extends State<DeviceInfoScreen> {
  String _deviceName = 'Unknown'; // Variable to hold the device name

  @override
  void initState() {
    super.initState();
    _getDeviceMarketingName(); // Call the function to get device name
  }

  // Function to retrieve the device marketing name
  Future<void> _getDeviceMarketingName() async {
    String deviceName = await DeviceMarketingNames.getDeviceMarketingName();
    setState(() {
      _deviceName = deviceName; // Update the state with the device name
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Device Marketing Name'),
      ),
      body: Center(
        child: Text(
          'Device Marketing Name: $_deviceName', // Display the device name
          style: TextStyle(fontSize: 20),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function initializes the Flutter app and runs the MyApp widget.
// 2. MyApp builds a MaterialApp with a title and theme, setting DeviceInfoScreen as the home.
// 3. DeviceInfoScreen is a stateful widget that retrieves the device marketing name.
// 4. In the initState method, _getDeviceMarketingName is called to fetch the device name.
// 5. _getDeviceMarketingName uses the device_marketing_names package to get the device name asynchronously.
// 6. Once the device name is retrieved, setState is called to update the UI with the device name.
// 7. The build method displays the device marketing name in the center of the screen.
```
<!-- END_MAIN -->
```

This structured blog provides a comprehensive overview of the `device_marketing_names` Flutter package, guiding users through its features, setup, and practical implementation.
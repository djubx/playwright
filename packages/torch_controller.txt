```markdown
<-- START_DESCRIPTION -->
# Torch Controller Flutter Package: Overview

The `torch_controller` Flutter package is a powerful tool designed to provide developers with an easy way to control the device's flashlight (torch) directly from a Flutter application. This package is particularly useful for applications that require flashlight functionality, such as camera apps, utility apps, or any app that might need to provide a torch feature for better visibility in low-light conditions.

## Features
- **Simple API**: The package offers a straightforward API to toggle the flashlight on and off.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS platforms.
- **Lightweight**: Minimal dependencies, ensuring that your app remains lightweight and efficient.

## When to Use
- **Camera Applications**: Enhance user experience by providing a flashlight toggle for better picture quality in low-light environments.
- **Utility Apps**: Apps like barcode scanners or document scanners can benefit from additional lighting.
- **Emergency Apps**: Apps designed for emergency situations can use the flashlight as a signaling tool.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->
# Torch Controller Flutter Package: Setup and Usage

In this section, we'll walk through the setup process for integrating the `torch_controller` package into your Flutter project and demonstrate how to use it effectively.

## Setup

### Step 1: Add Dependency
Add the `torch_controller` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  torch_controller: ^1.0.0
```

### Step 2: Platform-Specific Configuration

#### Android
1. **Permissions**: Open `AndroidManifest.xml` and add the following permission to access the camera hardware:

   ```xml
   <uses-permission android:name="android.permission.CAMERA"/>
   ```

2. **Hardware Feature**: Ensure that the device has a flashlight:

   ```xml
   <uses-feature android:name="android.hardware.camera.flash" android:required="true"/>
   ```

#### iOS
1. **Permissions**: Open `Info.plist` and add the following key to request camera access:

   ```xml
   <key>NSCameraUsageDescription</key>
   <string>We need access to the camera to use the flashlight.</string>
   ```

## Usage

### Step 3: Implementing the Torch Controller

1. **Import the Package**: Start by importing the package in your Dart file:

   ```dart
   import 'package:torch_controller/torch_controller.dart';
   ```

2. **Initialize and Use**: Create an instance of `TorchController` and use it to toggle the flashlight:

   ```dart
   class RealFlutter {
     final TorchController _torchController = TorchController();

     void toggleFlashlight() async {
       bool isOn = await _torchController.isTorchActive();
       if (isOn) {
         _torchController.turnOff();
       } else {
         _torchController.turnOn();
       }
     }
   }
   ```

<-- END_TUTORIAL -->

<-- START_MAIN -->
```dart
import 'package:flutter/material.dart';
import 'package:torch_controller/torch_controller.dart';

void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Torch Controller Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: TorchHomePage(),
    );
  }
}

class TorchHomePage extends StatefulWidget {
  @override
  _TorchHomePageState createState() => _TorchHomePageState();
}

class _TorchHomePageState extends State<TorchHomePage> {
  final TorchController _torchController = TorchController();
  bool _isTorchOn = false;

  // Toggles the flashlight on or off
  void _toggleTorch() async {
    if (_isTorchOn) {
      await _torchController.turnOff();
    } else {
      await _torchController.turnOn();
    }
    setState(() {
      _isTorchOn = !_isTorchOn;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Torch Controller'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Torch is ${_isTorchOn ? "ON" : "OFF"}',
              style: TextStyle(fontSize: 24),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _toggleTorch,
              child: Text(_isTorchOn ? 'Turn OFF' : 'Turn ON'),
            ),
          ],
        ),
      ),
    );
  }
}
```

// The application starts by running the `MyApp` class, which sets up the MaterialApp.
// The `TorchHomePage` is the main screen, which is a stateful widget to manage the torch state.
// `_TorchHomePageState` contains the logic to toggle the torch using the `TorchController`.
// The `_toggleTorch` method checks the current state of the torch and toggles it accordingly.
// The UI consists of a text widget displaying the current state of the torch and a button to toggle it.
// When the button is pressed, `_toggleTorch` is called, updating the UI to reflect the new state.

<-- END_MAIN -->
```
<-- START_DESCRIPTION -->

Native Toolchain C Package for Flutter
=====================================

The `native_toolchain_c` package is a powerful tool for Flutter developers, allowing them to use native C code in their applications. This package provides a set of tools and libraries that enable developers to compile and link C code into their Flutter projects.

When to Use This Package
------------------------

This package is particularly useful when:

* You need to use existing C libraries or code in your Flutter project.
* You want to optimize performance-critical parts of your application using native C code.
* You need to access platform-specific features or hardware that are not available through the Flutter framework.

Features
--------

The `native_toolchain_c` package provides the following features:

* Support for compiling and linking C code into your Flutter project.
* Automatic generation of Dart wrappers for C functions and types.
* Support for platform-specific code and libraries.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setting Up the Package
----------------------

To use the `native_toolchain_c` package, follow these steps:

### Step 1: Add the Package to Your Project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  native_toolchain_c: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Configure the Package

Create a new file called `native_toolchain_c.yaml` in the root of your project with the following contents:
```yml
targets:
  - my_target
```
This file configures the package to generate a single target called `my_target`.

### Step 3: Write Your C Code

Create a new file called `my_c_file.c` in the `lib` directory of your project with the following contents:
```c
#include <stdio.h>

void my_c_function() {
  printf("Hello from C!\n");
}
```
This file defines a single C function called `my_c_function`.

### Step 4: Generate the Dart Wrapper

Run the following command to generate the Dart wrapper for your C function:
```
flutter pub run native_toolchain_c:generate
```
This will generate a new file called `my_c_file.dart` in the `lib` directory of your project with the following contents:
```dart
import 'package:native_toolchain_c/native_toolchain_c.dart';

void my_c_function() {
  _my_c_function();
}

void _my_c_function() native 'my_c_function';
```
This file defines a Dart function called `my_c_function` that calls the native C function.

### Step 5: Use the Dart Wrapper

You can now use the Dart wrapper in your Flutter code:
```dart
import 'package:flutter/material.dart';
import 'package:my_app/my_c_file.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Native Toolchain C Example'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: my_c_function,
          child: Text('Call C Function'),
        ),
      ),
    );
  }
}
```
This code defines a Flutter widget that calls the `my_c_function` Dart wrapper when the button is pressed.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:native_toolchain_c/native_toolchain_c.dart';

// Define the C function
void my_c_function() {
  _my_c_function();
}

void _my_c_function() native 'my_c_function';

// Define the Dart wrapper
class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    // Create a button that calls the C function
    return Scaffold(
      appBar: AppBar(
        title: Text('Native Toolchain C Example'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: my_c_function,
          child: Text('Call C Function'),
        ),
      ),
    );
  }
}

// Define the main function
void main() {
  // Initialize the Flutter app
  runApp(MyApp());
}

// Define the MyApp widget
class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Create a RealFlutter widget
    return MaterialApp(
      title: 'Native Toolchain C Example',
      home: RealFlutter(),
    );
  }
}
```

// The app starts by initializing the Flutter framework and creating a new MyApp widget.
// The MyApp widget creates a new MaterialApp with a title and a home widget.
// The home widget is a RealFlutter widget, which creates a button that calls the my_c_function Dart wrapper.
// The my_c_function Dart wrapper calls the native C function, which prints a message to the console.
// The app continues to run until the user closes it.

<-- END_MAIN -->
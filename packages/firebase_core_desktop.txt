<-- START_DESCRIPTION -->

# Firebase Core Desktop Flutter Package
=====================================

The `firebase_core_desktop` package is a Flutter package that provides a set of APIs to interact with Firebase services on desktop platforms, including Windows, macOS, and Linux. This package is designed to work with the Firebase Core SDK, which provides a unified API for interacting with Firebase services across multiple platforms.

## When to Use This Package
---------------------------

You should use this package when you want to build a Flutter desktop application that interacts with Firebase services, such as:

* Authentication (e.g., Google Sign-In, Facebook Login)
* Realtime Database
* Firestore
* Storage
* Cloud Functions

## Features
------------

The `firebase_core_desktop` package provides the following features:

* Initialization of Firebase Core SDK
* Support for multiple Firebase projects
* Automatic handling of Firebase configuration files (e.g., `google-services.json`)

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `firebase_core_desktop` package, follow these steps:

### Step 1: Add the Package to Your `pubspec.yaml` File

```yml
dependencies:
  flutter:
    sdk: flutter
  firebase_core_desktop: ^1.0.0
```

### Step 2: Run `flutter pub get` to Get the Package

```bash
flutter pub get
```

### Step 3: Initialize the Firebase Core SDK

Create a new file called `firebase_options.dart` with the following code:

```dart
import 'package:firebase_core/firebase_core.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(
    options: FirebaseOptions(
      apiKey: 'YOUR_API_KEY',
      appId: 'YOUR_APP_ID',
      messagingSenderId: 'YOUR_MESSAGING_SENDER_ID',
      projectId: 'YOUR_PROJECT_ID',
    ),
  );
  runApp(MyApp());
}
```

Replace `YOUR_API_KEY`, `YOUR_APP_ID`, `YOUR_MESSAGING_SENDER_ID`, and `YOUR_PROJECT_ID` with your actual Firebase project credentials.

### Step 4: Configure Platform-Specific Settings

#### Android

Add the following code to your `android/app/build.gradle` file:

```groovy
apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'

android {
  // ...
}

dependencies {
  implementation 'com.google.firebase:firebase-core:19.0.2'
}
```

#### iOS

Add the following code to your `ios/Podfile` file:

```ruby
target 'Runner' do
  use_frameworks!
  use_modular_headers!

  pod 'Firebase/Core'
end
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';

void main() async {
  // Initialize Firebase Core SDK
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp(
    options: FirebaseOptions(
      apiKey: 'YOUR_API_KEY',
      appId: 'YOUR_APP_ID',
      messagingSenderId: 'YOUR_MESSAGING_SENDER_ID',
      projectId: 'YOUR_PROJECT_ID',
    ),
  );

  // Create a new instance of the RealFlutter class
  RealFlutter realFlutter = RealFlutter();

  // Run the app
  runApp(realFlutter.app);
}

class RealFlutter {
  // Create a new instance of the MaterialApp class
  MaterialApp app = MaterialApp(
    title: 'RealFlutter',
    home: Scaffold(
      appBar: AppBar(
        title: Text('RealFlutter'),
      ),
      body: Center(
        child: Text('Hello, World!'),
      ),
    ),
  );
}

// The app flow is as follows:
// 1. The main function is called, which initializes the Firebase Core SDK.
// 2. The Firebase Core SDK is initialized with the provided options.
// 3. A new instance of the RealFlutter class is created.
// 4. The app property of the RealFlutter class is used to create a new instance of the MaterialApp class.
// 5. The MaterialApp class is used to create a new instance of the Scaffold class.
// 6. The Scaffold class is used to create a new instance of the AppBar class and the Center class.
// 7. The AppBar class is used to create a new instance of the Text class, which displays the title of the app.
// 8. The Center class is used to create a new instance of the Text class, which displays the text 'Hello, World!'.
// 9. The app is run using the runApp function.

// In summary, the app flow is a series of nested classes and functions that work together to create a simple Flutter app.
```

<-- END_MAIN -->
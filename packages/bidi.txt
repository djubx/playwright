```markdown
<-- START_DESCRIPTION -->
# Understanding the `bidi` Flutter Package

The `bidi` package in Flutter is a powerful tool designed to handle bidirectional text, which is essential for applications that support languages written from right to left (RTL), such as Arabic, Hebrew, and Persian. This package provides utilities to manage and display text in both left-to-right (LTR) and right-to-left (RTL) directions seamlessly.

## When to Use the `bidi` Package

- **Multilingual Applications**: If your application supports multiple languages, especially those that require RTL text rendering, the `bidi` package is crucial.
- **Dynamic Text Direction**: Applications that need to dynamically switch text direction based on user input or language settings.
- **Custom Text Widgets**: When creating custom text widgets that need to handle bidirectional text correctly.

## Key Features

- **Text Directionality**: Automatically determines the direction of the text based on its content.
- **Customizable**: Offers flexibility to customize text direction handling as per application needs.
- **Integration**: Easily integrates with existing Flutter widgets and layouts.

The `bidi` package simplifies the complexity of handling bidirectional text, ensuring that your application can cater to a global audience with diverse language needs.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->
# Setting Up and Using the `bidi` Package in Flutter

In this tutorial, we will walk through the process of setting up the `bidi` package in a Flutter project and demonstrate how to use it effectively.

## Setup Process

1. **Add Dependency**: First, add the `bidi` package to your `pubspec.yaml` file.

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     bidi: ^2.0.0
   ```

2. **Install Packages**: Run `flutter pub get` to install the new package.

3. **Import the Package**: Import the `bidi` package in your Dart file where you intend to use it.

   ```dart
   import 'package:bidi/bidi.dart';
   ```

## Platform-Specific Details

### Android

- Ensure that your app's `AndroidManifest.xml` supports RTL by adding the following attribute:

  ```xml
  <application
      android:supportsRtl="true"
      ... >
  ```

### iOS

- For iOS, ensure that your app supports RTL by setting the `UIView` semantic content attribute in your `Info.plist`:

  ```xml
  <key>UIViewSemanticContentAttribute</key>
  <string>Unspecified</string>
  ```

## Using the `bidi` Package

The `bidi` package provides the `Bidi` class, which can be used to determine the directionality of text. Here's a simple example:

```dart
import 'package:bidi/bidi.dart';

void main() {
  String text = "مرحبا بكم"; // Arabic text
  TextDirection direction = Bidi.hasRtl(text) ? TextDirection.rtl : TextDirection.ltr;
  print('Text direction: $direction');
}
```

This code snippet checks if the given text contains RTL characters and sets the text direction accordingly.

<-- END_TUTORIAL -->

<-- START_MAIN -->
```dart
import 'package:flutter/material.dart';
import 'package:bidi/bidi.dart';

// Main entry point of the Flutter application
void main() {
  runApp(RealFlutter());
}

// RealFlutter is the main widget of the application
class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Bidi Example',
      home: BidiExampleScreen(),
    );
  }
}

// BidiExampleScreen is a stateful widget that demonstrates bidi text handling
class BidiExampleScreen extends StatefulWidget {
  @override
  _BidiExampleScreenState createState() => _BidiExampleScreenState();
}

class _BidiExampleScreenState extends State<BidiExampleScreen> {
  // Controller to handle text input
  final TextEditingController _controller = TextEditingController();

  // Variable to store the detected text direction
  TextDirection _textDirection = TextDirection.ltr;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Bidi Text Direction Example'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            // TextField for user input
            TextField(
              controller: _controller,
              decoration: InputDecoration(
                labelText: 'Enter text',
              ),
              onChanged: (text) {
                // Update text direction based on input
                setState(() {
                  _textDirection = Bidi.hasRtl(text) ? TextDirection.rtl : TextDirection.ltr;
                });
              },
            ),
            SizedBox(height: 20),
            // Display the text with the detected direction
            Text(
              _controller.text,
              textDirection: _textDirection,
              style: TextStyle(fontSize: 24),
            ),
          ],
        ),
      ),
    );
  }
}
```

// The application starts with the `main` function, which runs the `RealFlutter` widget.
// `RealFlutter` is a stateless widget that sets up the MaterialApp and home screen.
// `BidiExampleScreen` is a stateful widget that allows users to input text and see its direction.
// A `TextEditingController` is used to manage the text input from the user.
// The `_textDirection` variable stores the current direction of the text, defaulting to LTR.
// The `TextField` widget captures user input and updates the text direction using the `Bidi.hasRtl` method.
// The `Text` widget displays the input text with the appropriate direction, updating dynamically as the user types.

<-- END_MAIN -->
```
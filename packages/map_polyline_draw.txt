# Flutter Package: map_polyline_draw

## <-- START_DESCRIPTION -->

### Overview

The `map_polyline_draw` Flutter package is designed to simplify the process of drawing polylines on Google Maps within Flutter applications. This package is particularly useful for applications that require route visualization, such as navigation apps, fitness tracking, or any app that needs to display paths or routes on a map.

### When to Use

You might consider using `map_polyline_draw` in scenarios such as:
- Displaying a running or cycling route on a map.
- Visualizing a delivery route for logistics applications.
- Showing a travel path for tourism or travel-related apps.

### Features

- **Easy Integration**: Seamlessly integrates with Google Maps Flutter plugin.
- **Customizable Polylines**: Allows customization of polyline colors, widths, and patterns.
- **Dynamic Updates**: Supports real-time updates to polylines based on user interactions or data changes.
- **Multiple Polylines**: Ability to draw multiple polylines on the same map.

## <-- END_DESCRIPTION -->

## <-- START_TUTORIAL -->

### Setup Process

To get started with the `map_polyline_draw` package, follow these steps:

1. **Add Dependency**: Open your `pubspec.yaml` file and add the package:

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     google_maps_flutter: ^2.1.1
     map_polyline_draw: ^1.0.0
   ```

2. **Install Packages**: Run the following command in your terminal to install the new dependencies:

   ```bash
   flutter pub get
   ```

3. **Platform-Specific Configuration**:
   - **Android**:
     - Ensure you have the necessary permissions in your `AndroidManifest.xml`:

       ```xml
       <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>
       <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION"/>
       ```

   - **iOS**:
     - Add the following keys to your `Info.plist` for location permissions:

       ```xml
       <key>NSLocationWhenInUseUsageDescription</key>
       <string>We need your location to show routes on the map.</string>
       <key>NSLocationAlwaysUsageDescription</key>
       <string>We need your location to show routes on the map.</string>
       ```

### Using the Package

To use the `map_polyline_draw` package, you will need to import it into your Dart file:

```dart
import 'package:map_polyline_draw/map_polyline_draw.dart';
```

You can then create a `MapPolylineDraw` widget to display your polylines on the map. 

## <-- END_TUTORIAL -->

## <-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'package:map_polyline_draw/map_polyline_draw.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Map Polyline Draw Example',
      home: MapScreen(),
    );
  }
}

class MapScreen extends StatefulWidget {
  @override
  _MapScreenState createState() => _MapScreenState();
}

class _MapScreenState extends State<MapScreen> {
  late GoogleMapController mapController; // Controller for Google Map
  final Set<Polyline> _polylines = {}; // Set to hold polylines
  final LatLng _startLocation = LatLng(37.7749, -122.4194); // Start location (San Francisco)
  final LatLng _endLocation = LatLng(34.0522, -118.2437); // End location (Los Angeles)

  @override
  void initState() {
    super.initState();
    _createPolylines(); // Create polylines when the state initializes
  }

  void _createPolylines() {
    // Create a polyline between the start and end locations
    _polylines.add(Polyline(
      polylineId: PolylineId('route'),
      points: [_startLocation, _endLocation], // Points for the polyline
      color: Colors.blue, // Color of the polyline
      width: 5, // Width of the polyline
    ));
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Map Polyline Draw Example'),
      ),
      body: GoogleMap(
        onMapCreated: (GoogleMapController controller) {
          mapController = controller; // Initialize the map controller
        },
        initialCameraPosition: CameraPosition(
          target: _startLocation, // Start camera position
          zoom: 6, // Initial zoom level
        ),
        polylines: _polylines, // Set the polylines to the map
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the RealFlutter widget.
// 2. RealFlutter is a StatelessWidget that builds a MaterialApp with a title and a home screen.
// 3. The MapScreen is a StatefulWidget that manages the state of the Google Map.
// 4. In the _MapScreenState, we initialize the GoogleMapController and a Set to hold our polylines.
// 5. The _createPolylines method is called in initState to create a polyline from San Francisco to Los Angeles.
// 6. The build method returns a Scaffold with an AppBar and a GoogleMap widget.
// 7. The GoogleMap widget is configured with the created polylines and an initial camera position.
// 8. The map displays the route between the two locations with the specified polyline properties.

```

## <-- END_MAIN -->

### Summary

In this blog post, we explored the `map_polyline_draw` Flutter package, which allows developers to easily draw polylines on Google Maps. We covered the setup process, including platform-specific configurations for Android and iOS, and provided a complete example of a Flutter application that demonstrates the package's capabilities. The application visualizes a route between two locations, showcasing how to create and display polylines effectively. This package is ideal for any Flutter developer looking to enhance their mapping applications with route visualization features.
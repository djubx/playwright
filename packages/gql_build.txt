<-- START_DESCRIPTION -->

# Introduction to gql_build Flutter Package
=============================================

The gql_build package is a powerful tool for generating GraphQL schema and resolvers in Flutter applications. It provides a simple and efficient way to create a GraphQL API, allowing developers to focus on building their application's business logic.

## When to Use gql_build
------------------------

The gql_build package is ideal for building complex, data-driven applications that require a robust and scalable GraphQL API. It is particularly useful when:

* Building a large-scale application with multiple features and data sources
* Creating a real-time data-driven application that requires efficient data updates
* Implementing authentication and authorization mechanisms

## Features of gql_build
-------------------------

The gql_build package offers several key features, including:

* Automatic generation of GraphQL schema and resolvers
* Support for complex data types and relationships
* Built-in support for authentication and authorization
* Integration with popular GraphQL clients, such as Apollo Client

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up gql_build in Your Flutter Application
=====================================================

To use the gql_build package in your Flutter application, follow these steps:

### Step 1: Add the gql_build Package to Your pubspec.yaml File

```yml
dependencies:
  gql_build: ^1.0.0
```

### Step 2: Create a GraphQL Schema

Create a new file called `schema.graphql` in the root of your project:
```graphql
type Query {
  hello: String!
}
```

### Step 3: Generate the GraphQL Schema and Resolvers

Run the following command in your terminal:
```bash
flutter pub run gql_build:generate
```

### Step 4: Create a GraphQL Client

Create a new file called `client.dart`:
```dart
import 'package:gql_build/gql_build.dart';

class RealFlutterClient {
  final GraphQLClient _client;

  RealFlutterClient(this._client);

  Future<String> hello() async {
    final result = await _client.query(QueryOptions(
      document: gql(r'''
        query Hello {
          hello
        }
      '''),
    ));

    return result.data['hello'];
  }
}
```

### Step 5: Use the GraphQL Client in Your Application

Create a new file called `main.dart`:
```dart
import 'package:flutter/material.dart';
import 'package:real_flutter/client.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Real Flutter',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Real Flutter'),
        ),
        body: Center(
          child: FutureBuilder(
            future: RealFlutterClient(GraphQLClient()).hello(),
            builder: (context, snapshot) {
              if (snapshot.hasData) {
                return Text(snapshot.data);
              } else {
                return CircularProgressIndicator();
              }
            },
          ),
        ),
      ),
    );
  }
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
// Import the necessary packages
import 'package:flutter/material.dart';
import 'package:gql_build/gql_build.dart';

// Create a new class called RealFlutter
class RealFlutter {
  // Create a new GraphQL client
  final GraphQLClient _client;

  // Constructor for the RealFlutter class
  RealFlutter(this._client);

  // Create a new method called hello
  Future<String> hello() async {
    // Create a new GraphQL query
    final result = await _client.query(QueryOptions(
      document: gql(r'''
        query Hello {
          hello
        }
      '''),
    ));

    // Return the result of the query
    return result.data['hello'];
  }
}

// Create a new class called MyApp
class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Create a new RealFlutter client
    final client = RealFlutter(GraphQLClient());

    // Create a new FutureBuilder
    return FutureBuilder(
      // Call the hello method on the client
      future: client.hello(),
      builder: (context, snapshot) {
        // If the snapshot has data, return a Text widget
        if (snapshot.hasData) {
          return Text(snapshot.data);
        } else {
          // Otherwise, return a CircularProgressIndicator
          return CircularProgressIndicator();
        }
      },
    );
  }
}

// Create a new main function
void main() {
  // Run the MyApp widget
  runApp(MyApp());
}

// The application flow is as follows:
// 1. The main function is called, which runs the MyApp widget.
// 2. The MyApp widget creates a new RealFlutter client.
// 3. The RealFlutter client creates a new GraphQL client.
// 4. The GraphQL client is used to call the hello method on the RealFlutter client.
// 5. The hello method creates a new GraphQL query and calls the query method on the GraphQL client.
// 6. The query method returns a Future, which is used to build a FutureBuilder widget.
// 7. The FutureBuilder widget is used to display the result of the query.
// 8. If the query is successful, the result is displayed as a Text widget.
// 9. If the query is not successful, a CircularProgressIndicator is displayed.

```

<-- END_MAIN -->
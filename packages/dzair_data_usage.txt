```markdown
<!-- START_DESCRIPTION -->
# dzair_data_usage Flutter Package

The `dzair_data_usage` package is a powerful tool for Flutter developers looking to monitor and manage data usage within their applications. This package provides a straightforward API to access data usage statistics on both Android and iOS platforms, making it an essential addition for apps that require data management features.

## When to Use This Package
- **Data Monitoring**: If your application needs to track how much data it consumes, this package is ideal.
- **User Notifications**: You can use it to alert users when they are nearing their data limits.
- **Analytics**: For applications that require analytics on data usage, this package provides the necessary metrics.

## Features
- **Cross-Platform Support**: Works seamlessly on both Android and iOS.
- **Real-Time Data Usage**: Fetches real-time data usage statistics.
- **Detailed Metrics**: Provides detailed metrics such as mobile and Wi-Fi data usage.
- **User-Friendly API**: Simple and intuitive API for easy integration.

Overall, `dzair_data_usage` is a robust solution for developers looking to incorporate data usage tracking into their Flutter applications.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using dzair_data_usage

## Installation
To add the `dzair_data_usage` package to your Flutter project, include it in your `pubspec.yaml` file:

```yaml
dependencies:
  dzair_data_usage: ^latest_version
```

Make sure to replace `latest_version` with the most recent version available on [pub.dev](https://pub.dev/packages/dzair_data_usage).

## Platform-Specific Configuration

### Android
1. Open your `AndroidManifest.xml` file located at `android/app/src/main/AndroidManifest.xml`.
2. Add the following permissions to allow the app to access network state and data usage:

```xml
<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>
<uses-permission android:name="android.permission.READ_PHONE_STATE"/>
```

### iOS
1. Open your `Info.plist` file located at `ios/Runner/Info.plist`.
2. Add the following key to request permission for network usage:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

## Using the Package
To use the `dzair_data_usage` package, you can follow these steps in your Flutter application:

1. Import the package:

```dart
import 'package:dzair_data_usage/dzair_data_usage.dart';
```

2. Create an instance of the `RealFlutter` class to manage data usage.

3. Call the methods provided by the package to fetch data usage statistics.

This setup will allow you to start monitoring data usage in your Flutter application effectively.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of dzair_data_usage

```dart
import 'package:flutter/material.dart';
import 'package:dzair_data_usage/dzair_data_usage.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Variables to hold data usage statistics
  String _mobileDataUsage = "0 MB";
  String _wifiDataUsage = "0 MB";

  @override
  void initState() {
    super.initState();
    // Fetch data usage statistics when the app starts
    _fetchDataUsage();
  }

  // Method to fetch data usage statistics
  Future<void> _fetchDataUsage() async {
    // Get mobile data usage
    final mobileData = await DzairDataUsage.getMobileDataUsage();
    // Get Wi-Fi data usage
    final wifiData = await DzairDataUsage.getWifiDataUsage();

    // Update the state with fetched data
    setState(() {
      _mobileDataUsage = "${mobileData / (1024 * 1024)} MB"; // Convert bytes to MB
      _wifiDataUsage = "${wifiData / (1024 * 1024)} MB"; // Convert bytes to MB
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Data Usage Monitor'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Text('Mobile Data Usage: $_mobileDataUsage'),
              Text('Wi-Fi Data Usage: $_wifiDataUsage'),
              ElevatedButton(
                onPressed: _fetchDataUsage, // Refresh data usage on button press
                child: Text('Refresh Data Usage'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
```

// The above code defines a simple Flutter application that monitors data usage.
// 1. The `main` function initializes the app by running the `RealFlutter` widget.
// 2. The `RealFlutter` widget is a stateful widget that maintains the state of mobile and Wi-Fi data usage.
// 3. In the `initState` method, the app fetches data usage statistics when it starts.
// 4. The `_fetchDataUsage` method retrieves mobile and Wi-Fi data usage using the `dzair_data_usage` package.
// 5. The fetched data is converted from bytes to megabytes (MB) and stored in state variables.
// 6. The `build` method constructs the UI, displaying the data usage statistics and a button to refresh the data.
// 7. Pressing the "Refresh Data Usage" button calls `_fetchDataUsage` to update the displayed statistics.

```
<!-- END_MAIN -->
```

### Summary
In this blog post, we explored the `dzair_data_usage` Flutter package, detailing its features, installation process, and usage. We provided a complete example of a Flutter application that demonstrates how to monitor mobile and Wi-Fi data usage effectively. This package is particularly useful for applications that require data management features, making it a valuable addition to any Flutter developer's toolkit.
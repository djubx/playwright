```markdown
<!-- START_DESCRIPTION -->
# Overview of the number_to_indian_words Flutter Package

The `number_to_indian_words` package is a specialized Flutter package designed to convert numerical values into their corresponding words in the Indian numbering system. This package is particularly useful for applications that require displaying numbers in a more human-readable format, such as in financial applications, educational tools, or any app that needs to present numbers in a formal context.

## When to Use This Package
- **Financial Applications**: Displaying amounts in words for invoices or receipts.
- **Educational Tools**: Helping students learn number representation in words.
- **Formal Documents**: Converting numbers to words for legal or official documents.

## Key Features
- **Indian Numbering System**: Converts numbers into words following the Indian numbering conventions (lakh, crore, etc.).
- **Easy Integration**: Simple API that can be easily integrated into any Flutter application.
- **Customizable**: Options to customize the output format as per requirements.

This package simplifies the process of converting numbers to words, making it a valuable tool for Flutter developers looking to enhance their applications with this functionality.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using number_to_indian_words

## Installation
To use the `number_to_indian_words` package in your Flutter project, you need to add it to your `pubspec.yaml` file. Open the file and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  number_to_indian_words: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command in your terminal to install the package:

```bash
flutter pub get
```

## Usage
Once the package is installed, you can start using it in your Flutter application. Below are the steps to use the package effectively.

### Importing the Package
In your Dart file, import the package:

```dart
import 'package:number_to_indian_words/number_to_indian_words.dart';
```

### Converting Numbers to Words
You can convert numbers to words using the `NumberToIndianWords` class. Hereâ€™s a simple example:

```dart
void main() {
  int number = 123456789;
  String words = NumberToIndianWords.convert(number);
  print(words); // Output: "Twelve Crore Thirty Four Lakh Fifty Six Thousand Seven Hundred Eighty Nine"
}
```

### Platform-Specific Details
- **Android**: No additional configuration is required for Android.
- **iOS**: Ensure that your iOS deployment target is set to at least 10.0 in your `ios/Podfile`.

## Optimizations
- For better performance, consider caching results if you are converting the same numbers multiple times.
- Handle edge cases, such as negative numbers or very large numbers, according to your application's requirements.

With these steps, you can easily integrate the `number_to_indian_words` package into your Flutter application and start converting numbers to words seamlessly.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using number_to_indian_words

```dart
import 'package:flutter/material.dart';
import 'package:number_to_indian_words/number_to_indian_words.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Number to Indian Words',
      home: NumberToWordsScreen(),
    );
  }
}

class NumberToWordsScreen extends StatefulWidget {
  @override
  _NumberToWordsScreenState createState() => _NumberToWordsScreenState();
}

class _NumberToWordsScreenState extends State<NumberToWordsScreen> {
  final TextEditingController _controller = TextEditingController();
  String _result = '';

  // Function to convert number to words
  void _convertNumber() {
    // Parse the input number from the text field
    int number = int.tryParse(_controller.text) ?? 0;
    // Convert the number to words using the package
    _result = NumberToIndianWords.convert(number);
    // Update the UI with the result
    setState(() {});
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Convert Number to Words'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            TextField(
              controller: _controller,
              decoration: InputDecoration(
                labelText: 'Enter a number',
                border: OutlineInputBorder(),
              ),
              keyboardType: TextInputType.number,
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _convertNumber,
              child: Text('Convert to Words'),
            ),
            SizedBox(height: 20),
            Text(
              _result,
              style: TextStyle(fontSize: 20),
            ),
          ],
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the RealFlutter widget.
// 2. RealFlutter is a StatelessWidget that sets up the MaterialApp and the home screen.
// 3. The NumberToWordsScreen is a StatefulWidget that manages the state of the input and output.
// 4. A TextEditingController is used to capture user input from the TextField.
// 5. When the user presses the "Convert to Words" button, the _convertNumber function is called.
// 6. This function parses the input number, converts it to words using the NumberToIndianWords package, and updates the result.
// 7. The converted words are displayed on the screen below the button.
```
<!-- END_MAIN -->
``` 

This structured blog post provides a comprehensive overview of the `number_to_indian_words` package, guiding developers through its features, installation, usage, and a complete example. The comments within the code help clarify the application flow, making it easier for developers to understand how to implement the package in their own projects.
<-- START_DESCRIPTION -->

# Network Type Reachability Flutter Package
=============================================

The `network_type_reachability` Flutter package allows you to determine the type of network your device is connected to, such as Wi-Fi, cellular, or none. This package is useful when you need to perform different actions based on the type of network connection.

### Features

*   Detects the type of network connection (Wi-Fi, cellular, or none)
*   Supports both Android and iOS platforms
*   Provides a simple and easy-to-use API

### When to Use

You can use this package in scenarios where your app needs to behave differently based on the type of network connection. For example:

*   To prevent large data downloads when the device is connected to a cellular network
*   To provide a different user experience when the device is connected to a Wi-Fi network
*   To handle network-related errors and exceptions based on the type of network connection

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
------------------

To use the `network_type_reachability` package, follow these steps:

### Step 1: Add the Package to Your Project

Add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  network_type_reachability: ^1.0.0
```

Then, run `flutter pub get` to get the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:network_type_reachability/network_type_reachability.dart';
```

### Step 3: Use the Package

Use the `NetworkTypeReachability` class to determine the type of network connection:

```dart
NetworkTypeReachability _networkTypeReachability = NetworkTypeReachability();

_networkTypeReachability.networkType.then((networkType) {
  if (networkType == NetworkType.wifi) {
    print('Connected to Wi-Fi');
  } else if (networkType == NetworkType.cellular) {
    print('Connected to cellular network');
  } else {
    print('No network connection');
  }
});
```

### Platform-Specific Details

*   **Android:** The package uses the `ConnectivityManager` class to determine the type of network connection.
*   **iOS:** The package uses the `SCNetworkReachability` class to determine the type of network connection.

### Required Configurations or Optimizations

*   **Android:** Add the following permission to your `AndroidManifest.xml` file:

    ```xml
<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
```

*   **iOS:** No additional configurations or optimizations are required.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:network_type_reachability/network_type_reachability.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Network Type Reachability Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  NetworkType _networkType;

  @override
  void initState() {
    super.initState();
    _checkNetworkType();
  }

  Future<void> _checkNetworkType() async {
    // Create an instance of NetworkTypeReachability
    NetworkTypeReachability _networkTypeReachability = NetworkTypeReachability();

    // Use the networkType property to get the type of network connection
    _networkTypeReachability.networkType.then((networkType) {
      // Update the UI with the network type
      setState(() {
        _networkType = networkType;
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Network Type Reachability Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              _networkType != null
                  ? _networkType.toString()
                  : 'Checking network type...',
              style: TextStyle(fontSize: 24),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _checkNetworkType,
              child: Text('Check Network Type'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app, and the _checkNetworkType function is called in the initState method.
// 2. The _checkNetworkType function creates an instance of NetworkTypeReachability and uses the networkType property to get the type of network connection.
// 3. The network type is then updated in the UI using the setState method.
// 4. The user can press the "Check Network Type" button to check the network type again.
// 5. The _checkNetworkType function is called again, and the network type is updated in the UI.

```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Overview of tencent_calls_uikit Flutter Package
=====================================================

The `tencent_calls_uikit` Flutter package is a powerful UI kit for building video call applications using Tencent's TRTC (Tencent Real-Time Communication) platform. It provides a set of pre-built UI components and APIs to simplify the development process of video call applications.

### When to Use This Package

This package is ideal for developers who want to build video call applications with a customized UI. It is also suitable for developers who want to integrate video call functionality into their existing applications.

### Features

*   Pre-built UI components for video calls, including call buttons, video views, and more
*   Support for both one-to-one and group video calls
*   Customizable UI styles and layouts
*   APIs for controlling video call functionality, such as starting and ending calls, switching cameras, and more

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the tencent_calls_uikit Package
=====================================================

### Step 1: Add the Package to Your Flutter Project

Add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  tencent_calls_uikit: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:tencent_calls_uikit/tencent_calls_uikit.dart';
```

### Step 3: Initialize the TRTC Platform

Initialize the TRTC platform with your app ID and app secret:

```dart
void main() {
  WidgetsFlutterBinding.ensureInitialized();
  TRTCPlatform.init(
    appId: 'YOUR_APP_ID',
    appSecret: 'YOUR_APP_SECRET',
  );
  runApp(MyApp());
}
```

### Step 4: Create a Video Call UI

Create a video call UI using the pre-built UI components:

```dart
class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Video Call Demo'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            Navigator.push(
              context,
              MaterialPageRoute(builder: (context) => VideoCallPage()),
            );
          },
          child: Text('Start Video Call'),
        ),
      ),
    );
  }
}

class VideoCallPage extends StatefulWidget {
  @override
  _VideoCallPageState createState() => _VideoCallPageState();
}

class _VideoCallPageState extends State<VideoCallPage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Video Call Page'),
      ),
      body: Center(
        child: TRTCVideoView(
          userId: 'USER_ID',
          streamType: TRTCVideoStreamType.TRTCVideoStreamTypeBig,
        ),
      ),
    );
  }
}
```

### Platform-Specific Details

*   Android: Make sure to add the following permissions to your `AndroidManifest.xml` file:

    ```xml
<uses-permission android:name="android.permission.CAMERA" />
<uses-permission android:name="android.permission.RECORD_AUDIO" />
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
```

*   iOS: Make sure to add the following permissions to your `Info.plist` file:

    ```xml
<key>NSCameraUsageDescription</key>
<string>Can I use the camera please?</string>
<key>NSMicrophoneUsageDescription</key>
<string>Can I use the microphone please?</string>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:tencent_calls_uikit/tencent_calls_uikit.dart';

void main() {
  // Initialize the TRTC platform
  WidgetsFlutterBinding.ensureInitialized();
  TRTCPlatform.init(
    appId: 'YOUR_APP_ID',
    appSecret: 'YOUR_APP_SECRET',
  );
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Video Call Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Create a video call UI
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Video Call Demo'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Start a video call
            Navigator.push(
              context,
              MaterialPageRoute(builder: (context) => VideoCallPage()),
            );
          },
          child: Text('Start Video Call'),
        ),
      ),
    );
  }
}

class VideoCallPage extends StatefulWidget {
  @override
  _VideoCallPageState createState() => _VideoCallPageState();
}

class _VideoCallPageState extends State<VideoCallPage> {
  // Create a TRTC video view
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Video Call Page'),
      ),
      body: Center(
        child: TRTCVideoView(
          userId: 'USER_ID',
          streamType: TRTCVideoStreamType.TRTCVideoStreamTypeBig,
        ),
      ),
    );
  }
}

// Application flow:
// 1. Initialize the TRTC platform with your app ID and app secret.
// 2. Create a video call UI with a button to start the video call.
// 3. When the button is pressed, navigate to a new page with a TRTC video view.
// 4. The TRTC video view will display the video stream from the remote user.
```

// The application flow is as follows:
// 1. The user opens the app and is presented with a button to start a video call.
// 2. When the button is pressed, the app initializes the TRTC platform and navigates to a new page with a TRTC video view.
// 3. The TRTC video view displays the video stream from the remote user, allowing the users to communicate with each other in real-time.

<-- END_MAIN -->
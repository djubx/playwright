```markdown
<!-- START_DESCRIPTION -->
# Overview of the map4d_map Flutter Package

The `map4d_map` package is a powerful Flutter plugin that provides developers with the ability to integrate Map4D's mapping services into their applications. This package is particularly useful for applications that require advanced mapping features, such as location tracking, route planning, and custom markers. 

## When to Use This Package
You might consider using `map4d_map` in scenarios such as:
- Developing location-based services (e.g., ride-sharing, delivery apps).
- Creating applications that require detailed mapping and navigation features.
- Implementing custom map overlays and markers for enhanced user experience.

## Key Features
- **Custom Markers**: Easily add and customize markers on the map.
- **Route Planning**: Calculate and display routes between locations.
- **Map Overlays**: Add custom overlays to enhance the map's visual representation.
- **Location Tracking**: Track user location in real-time.
- **Multiple Map Types**: Support for various map styles, including satellite and terrain views.

Overall, `map4d_map` is a versatile package that can significantly enhance the mapping capabilities of your Flutter applications.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Setting Up the map4d_map Package

To get started with the `map4d_map` package, follow these steps:

## Installation

1. **Add Dependency**: Open your `pubspec.yaml` file and add the following line under dependencies:

   ```yaml
   dependencies:
     map4d_map: ^latest_version
   ```

   Replace `latest_version` with the most recent version of the package.

2. **Install Packages**: Run the following command in your terminal to install the package:

   ```bash
   flutter pub get
   ```

## Platform-Specific Configuration

### Android
1. **Update AndroidManifest.xml**: Add the following permissions and metadata in your `AndroidManifest.xml` file:

   ```xml
   <uses-permission android:name="android.permission.INTERNET"/>
   <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>
   <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION"/>

   <application>
       <meta-data
           android:name="com.map4d.map.api_key"
           android:value="YOUR_MAP4D_API_KEY"/>
   </application>
   ```

   Make sure to replace `YOUR_MAP4D_API_KEY` with your actual Map4D API key.

### iOS
1. **Update Info.plist**: Add the following keys to your `Info.plist` file:

   ```xml
   <key>NSLocationWhenInUseUsageDescription</key>
   <string>We need your location to show it on the map.</string>
   <key>NSLocationAlwaysUsageDescription</key>
   <string>We need your location to show it on the map.</string>
   ```

2. **Add API Key**: Include your Map4D API key in the `Info.plist`:

   ```xml
   <key>Map4DAPIKey</key>
   <string>YOUR_MAP4D_API_KEY</string>
   ```

## Optimizations
- Ensure that you handle location permissions properly to provide a seamless user experience.
- Consider caching map data for offline use if your application requires it.

With these steps completed, you are now ready to start using the `map4d_map` package in your Flutter application!
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using map4d_map

```dart
import 'package:flutter/material.dart';
import 'package:map4d_map/map4d_map.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Map4D Example',
      home: MapScreen(),
    );
  }
}

class MapScreen extends StatefulWidget {
  @override
  _MapScreenState createState() => _MapScreenState();
}

class _MapScreenState extends State<MapScreen> {
  late M4DMapController mapController; // Controller for the map
  LatLng currentLocation = LatLng(10.762622, 106.660172); // Default location (Ho Chi Minh City)

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Map4D Map Example'),
      ),
      body: M4DMap(
        onMapCreated: (M4DMapController controller) {
          mapController = controller; // Initialize the map controller
          _addMarker(); // Add a marker to the map
        },
        initialCameraPosition: CameraPosition(
          target: currentLocation, // Set initial camera position
          zoom: 12.0, // Set initial zoom level
        ),
      ),
    );
  }

  // Function to add a marker on the map
  void _addMarker() {
    mapController.addMarker(
      MarkerOptions(
        position: currentLocation, // Position of the marker
        icon: BitmapDescriptor.defaultMarker, // Default marker icon
        infoWindow: InfoWindow(title: 'Current Location'), // Info window for the marker
      ),
    );
  }
}
```

// The above code demonstrates a simple Flutter application using the map4d_map package.
// 1. The `main` function initializes the app and sets `RealFlutter` as the home widget.
// 2. The `RealFlutter` class builds a MaterialApp with a title and a home screen.
// 3. The `MapScreen` widget is a stateful widget that manages the map state.
// 4. Inside the `MapScreen`, we define a `M4DMap` widget that takes a controller and initial camera position.
// 5. The `onMapCreated` callback initializes the map controller and calls `_addMarker` to place a marker on the map.
// 6. The `_addMarker` function adds a marker at the specified location with a default icon and an info window.
// 7. The app displays a map centered on Ho Chi Minh City with a marker indicating the current location.

```
<!-- END_MAIN -->
``` 

This structured blog post provides a comprehensive overview of the `map4d_map` package, guiding developers through its features, setup, and practical usage with a complete example.
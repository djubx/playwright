<-- START_DESCRIPTION -->
# Flutter Icon Snackbar Package
The `flutter_icon_snackbar` package is a customizable snackbar library for Flutter that allows you to display snackbars with icons, text, and actions. It provides a simple and easy-to-use API for displaying snackbars in your Flutter app.

## When to Use
You can use this package when you want to display a snackbar with an icon, text, and actions in your Flutter app. For example, you can use it to display a success message with a checkmark icon, or an error message with a warning icon.

## Features
The `flutter_icon_snackbar` package provides the following features:

*   Display snackbars with icons, text, and actions
*   Customize the snackbar's background color, text color, and icon color
*   Support for both Android and iOS platforms
*   Simple and easy-to-use API

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->
# Tutorial
To use the `flutter_icon_snackbar` package, follow these steps:

## Step 1: Add the Package to Your Pubspec File
Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_icon_snackbar: ^1.0.0
```
Then, run `flutter pub get` to get the package.

## Step 2: Import the Package
Import the package in your Dart file:
```dart
import 'package:flutter_icon_snackbar/flutter_icon_snackbar.dart';
```
## Step 3: Display a Snackbar
Use the `IconSnackBar` class to display a snackbar:
```dart
IconSnackBar(
  icon: Icons.check,
  message: 'Success!',
  backgroundColor: Colors.green,
  textColor: Colors.white,
  iconColor: Colors.white,
  duration: Duration(seconds: 2),
  action: SnackBarAction(
    label: 'Action',
    onPressed: () {
      // Handle action press
    },
  ),
);
```
## Platform-Specific Details
The `flutter_icon_snackbar` package works on both Android and iOS platforms. However, you may need to adjust the snackbar's style to match the platform's design guidelines.

### Android
On Android, you can use the `Material Design` style to display the snackbar. To do this, set the `backgroundColor` property to a material design color, such as `Colors.blue`.

### iOS
On iOS, you can use the `Cupertino` style to display the snackbar. To do this, set the `backgroundColor` property to a cupertino color, such as `Colors.white`.

## Configurations and Optimizations
You can customize the snackbar's style by setting the `backgroundColor`, `textColor`, and `iconColor` properties. You can also adjust the snackbar's duration by setting the `duration` property.

<-- END_TUTORIAL -->

<-- START_MAIN -->
```dart
import 'package:flutter/material.dart';
import 'package:flutter_icon_snackbar/flutter_icon_snackbar.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Icon Snackbar Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Icon Snackbar Demo'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Display a snackbar with an icon, text, and action
            IconSnackBar(
              icon: Icons.check,
              message: 'Success!',
              backgroundColor: Colors.green,
              textColor: Colors.white,
              iconColor: Colors.white,
              duration: Duration(seconds: 2),
              action: SnackBarAction(
                label: 'Action',
                onPressed: () {
                  // Handle action press
                },
              ),
            );
          },
          child: Text('Display Snackbar'),
        ),
      ),
    );
  }
}
// The application flow is as follows:
// 1. The user presses the "Display Snackbar" button.
// 2. The IconSnackBar is displayed with an icon, text, and action.
// 3. The snackbar is displayed for 2 seconds.
// 4. The user can press the action button to handle the action press.
// 5. The snackbar is dismissed after 2 seconds.
```
<-- END_MAIN -->

In summary, the code flows as follows:

*   The user presses the "Display Snackbar" button.
*   The `IconSnackBar` is displayed with an icon, text, and action.
*   The snackbar is displayed for 2 seconds.
*   The user can press the action button to handle the action press.
*   The snackbar is dismissed after 2 seconds.
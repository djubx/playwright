<-- START_DESCRIPTION -->

# WalletConnect Dart Package
================================

The `walletconnect_dart` package is a Flutter library that allows developers to integrate WalletConnect, a popular decentralized wallet connection protocol, into their applications. This package provides a simple and efficient way to establish a connection between a user's wallet and a Flutter app, enabling seamless interactions with blockchain-based services.

## When to Use This Package
---------------------------

You should use this package when building a Flutter app that requires integration with decentralized wallets, such as:

* Cryptocurrency exchanges
* NFT marketplaces
* Decentralized finance (DeFi) applications
* Gaming platforms with blockchain-based assets

## Features
------------

The `walletconnect_dart` package offers the following features:

* Wallet connection and disconnection management
* Support for multiple wallet providers (e.g., MetaMask, Trust Wallet)
* Automatic wallet detection and connection establishment
* Event-driven architecture for handling connection and disconnection events
* Compatibility with Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `walletconnect_dart` package in your Flutter project, follow these steps:

### 1. Add the Package to Your `pubspec.yaml` File

```yml
dependencies:
  walletconnect_dart: ^1.0.0
```

### 2. Import the Package in Your Dart File

```dart
import 'package:walletconnect_dart/walletconnect_dart.dart';
```

### 3. Initialize the WalletConnect Instance

```dart
WalletConnect _walletConnect = WalletConnect(
  bridge: 'https://bridge.walletconnect.org',
  clientMeta: ClientMeta(
    name: 'My App',
    description: 'My App Description',
    url: 'https://myapp.com',
    icons: ['https://myapp.com/icon.png'],
  ),
);
```

### 4. Connect to a Wallet

```dart
_walletConnect.connect().then((session) {
  print('Connected to wallet with address: ${session.accounts[0]}');
});
```

### 5. Handle Connection and Disconnection Events

```dart
_walletConnect.onConnect.listen((session) {
  print('Connected to wallet with address: ${session.accounts[0]}');
});

_walletConnect.onDisconnect.listen(() {
  print('Disconnected from wallet');
});
```

### Platform-Specific Details

* Android: No additional configuration is required.
* iOS: Add the following lines to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:walletconnect_dart/walletconnect_dart.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'WalletConnect Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  WalletConnect _walletConnect;

  @override
  void initState() {
    super.initState();
    _walletConnect = WalletConnect(
      bridge: 'https://bridge.walletconnect.org',
      clientMeta: ClientMeta(
        name: 'My App',
        description: 'My App Description',
        url: 'https://myapp.com',
        icons: ['https://myapp.com/icon.png'],
      ),
    );
  }

  void _connectWallet() {
    _walletConnect.connect().then((session) {
      print('Connected to wallet with address: ${session.accounts[0]}');
      setState(() {});
    });
  }

  void _disconnectWallet() {
    _walletConnect.disconnect().then(() {
      print('Disconnected from wallet');
      setState(() {});
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('WalletConnect Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              _walletConnect.connected
                  ? 'Connected to wallet with address: ${_walletConnect.session.accounts[0]}'
                  : 'Not connected to wallet',
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _connectWallet,
              child: Text('Connect Wallet'),
            ),
            SizedBox(height: 10),
            ElevatedButton(
              onPressed: _disconnectWallet,
              child: Text('Disconnect Wallet'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and is presented with a "Connect Wallet" button.
// 2. When the user clicks the "Connect Wallet" button, the `_connectWallet` function is called.
// 3. The `_connectWallet` function calls the `connect` method of the `WalletConnect` instance, which establishes a connection to the user's wallet.
// 4. Once the connection is established, the `connect` method returns a `Session` object, which contains the user's wallet address.
// 5. The wallet address is then displayed on the screen.
// 6. When the user clicks the "Disconnect Wallet" button, the `_disconnectWallet` function is called.
// 7. The `_disconnectWallet` function calls the `disconnect` method of the `WalletConnect` instance, which disconnects the app from the user's wallet.
// 8. Once the disconnection is complete, the app updates the screen to reflect that it is no longer connected to the wallet.

// In summary, this code demonstrates how to use the `walletconnect_dart` package to connect to a user's wallet, display the wallet address, and disconnect from the wallet.
```
<-- END_MAIN -->
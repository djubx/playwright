<-- START_DESCRIPTION -->

# ngdart Flutter Package: A Technical Overview
=====================================================

The ngdart Flutter package is a powerful tool for building robust and scalable Flutter applications. It provides a set of features and tools that enable developers to create complex applications with ease.

### When to Use ngdart

ngdart is ideal for building large-scale Flutter applications that require a high degree of customization and control. It is particularly useful for applications that require complex routing, state management, and API integrations.

### Key Features of ngdart

*   Robust routing system with support for nested routes and route parameters
*   Built-in state management system with support for reactive and non-reactive states
*   API integration tools with support for RESTful APIs and GraphQL
*   Support for dependency injection and service providers

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using ngdart
=============================

### Step 1: Add ngdart to Your Flutter Project

To use ngdart in your Flutter project, you need to add it to your `pubspec.yaml` file. Add the following line to the `dependencies` section:

```yml
dependencies:
  ngdart: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Configure ngdart

To configure ngdart, you need to create a new instance of the `NgDart` class and pass it to the `MaterialApp` widget.

```dart
import 'package:flutter/material.dart';
import 'package:ngdart/ngdart.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'ngdart Demo',
      home: NgDart(
        child: RealFlutter(),
      ),
    );
  }
}
```

### Step 3: Define Your Routes

To define routes in ngdart, you need to create a new instance of the `NgRoute` class and pass it to the `NgDart` widget.

```dart
import 'package:flutter/material.dart';
import 'package:ngdart/ngdart.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return NgDart(
      routes: [
        NgRoute(
          path: '/',
          builder: (context) => HomeScreen(),
        ),
        NgRoute(
          path: '/about',
          builder: (context) => AboutScreen(),
        ),
      ],
      child: HomeScreen(),
    );
  }
}
```

### Step 4: Use ngdart's State Management System

To use ngdart's state management system, you need to create a new instance of the `NgState` class and pass it to the `NgDart` widget.

```dart
import 'package:flutter/material.dart';
import 'package:ngdart/ngdart.dart';

class HomeScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return NgState(
      initState: (context) => {'count': 0},
      builder: (context, state) => Scaffold(
        appBar: AppBar(
          title: Text('Home Screen'),
        ),
        body: Center(
          child: Text('Count: ${state['count']}'),
        ),
        floatingActionButton: FloatingActionButton(
          onPressed: () => NgState.of(context).update({'count': state['count'] + 1}),
          tooltip: 'Increment',
          child: Icon(Icons.add),
        ),
      ),
    );
  }
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:ngdart/ngdart.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'ngdart Demo',
      home: NgDart(
        child: RealFlutter(),
      ),
    );
  }
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Define the routes for the application
    return NgDart(
      routes: [
        NgRoute(
          path: '/',
          builder: (context) => HomeScreen(),
        ),
        NgRoute(
          path: '/about',
          builder: (context) => AboutScreen(),
        ),
      ],
      child: HomeScreen(),
    );
  }
}

class HomeScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Use ngdart's state management system to manage the state of the HomeScreen
    return NgState(
      initState: (context) => {'count': 0},
      builder: (context, state) => Scaffold(
        appBar: AppBar(
          title: Text('Home Screen'),
        ),
        body: Center(
          child: Text('Count: ${state['count']}'),
        ),
        floatingActionButton: FloatingActionButton(
          onPressed: () => NgState.of(context).update({'count': state['count'] + 1}),
          tooltip: 'Increment',
          child: Icon(Icons.add),
        ),
      ),
    );
  }
}

class AboutScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('About Screen'),
      ),
      body: Center(
        child: Text('This is the about screen'),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the application and is presented with the HomeScreen.
// 2. The HomeScreen uses ngdart's state management system to manage its state.
// 3. The user can increment the count by pressing the floating action button.
// 4. The user can navigate to the AboutScreen by pressing the about button.
// 5. The AboutScreen is presented to the user and they can navigate back to the HomeScreen.
```

<-- END_MAIN -->
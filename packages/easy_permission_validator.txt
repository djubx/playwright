<-- START_DESCRIPTION -->

# Easy Permission Validator Package
=====================================

The `easy_permission_validator` package is a Flutter package that simplifies the process of requesting and validating permissions on both Android and iOS platforms. It provides a straightforward and easy-to-use API for handling permissions, making it a valuable addition to any Flutter project.

### When to Use

This package is useful when your app requires access to device features such as camera, microphone, location, or contacts. It handles the complexity of requesting permissions and provides a simple way to validate them.

### Features

*   Simplifies permission requests on Android and iOS
*   Provides a unified API for handling permissions
*   Supports various permission types (e.g., camera, microphone, location, contacts)
*   Offers a customizable permission request dialog

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
-------------------

### Step 1: Add the Package to Your Project

Add the `easy_permission_validator` package to your `pubspec.yaml` file:

```yml
dependencies:
  easy_permission_validator: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:easy_permission_validator/easy_permission_validator.dart';
```

### Step 3: Request Permissions

Request permissions using the `requestPermission` method:

```dart
await EasyPermissionValidator.requestPermission(
  permission: Permission.camera,
  rationale: 'We need camera access to take photos.',
);
```

### Step 4: Validate Permissions

Validate permissions using the `hasPermission` method:

```dart
final hasCameraPermission = await EasyPermissionValidator.hasPermission(
  permission: Permission.camera,
);
```

### Platform-Specific Details

*   **Android:** Make sure to add the required permissions to your `AndroidManifest.xml` file.
*   **iOS:** Add the necessary permissions to your `Info.plist` file.

### Configurations and Optimizations

*   You can customize the permission request dialog by providing a custom `rationale` and `title`.
*   To handle permission requests and validation globally, consider using a singleton or a service class.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:easy_permission_validator/easy_permission_validator.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Easy Permission Validator Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Easy Permission Validator Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            ElevatedButton(
              onPressed: _requestCameraPermission,
              child: Text('Request Camera Permission'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _validateCameraPermission,
              child: Text('Validate Camera Permission'),
            ),
          ],
        ),
      ),
    );
  }

  Future<void> _requestCameraPermission() async {
    // Request camera permission
    await EasyPermissionValidator.requestPermission(
      permission: Permission.camera,
      rationale: 'We need camera access to take photos.',
    );
  }

  Future<void> _validateCameraPermission() async {
    // Validate camera permission
    final hasCameraPermission = await EasyPermissionValidator.hasPermission(
      permission: Permission.camera,
    );

    if (hasCameraPermission) {
      print('Camera permission granted');
    } else {
      print('Camera permission denied');
    }
  }
}

// Application flow:
// 1. The user opens the app and is presented with two buttons: "Request Camera Permission" and "Validate Camera Permission".
// 2. When the user clicks the "Request Camera Permission" button, the app requests camera permission using the EasyPermissionValidator package.
// 3. The user is shown a permission request dialog with a custom rationale and title.
// 4. If the user grants the permission, the app can access the camera.
// 5. When the user clicks the "Validate Camera Permission" button, the app checks if the camera permission has been granted using the EasyPermissionValidator package.
// 6. If the permission has been granted, the app prints "Camera permission granted" to the console. Otherwise, it prints "Camera permission denied".

// Summary:
// The EasyPermissionValidator package simplifies the process of requesting and validating permissions in Flutter apps.
// This demo app showcases how to use the package to request camera permission and validate it.
// The app flow demonstrates the importance of handling permissions in a user-friendly and secure manner.

```

<-- END_MAIN -->
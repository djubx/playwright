<-- START_DESCRIPTION -->

**Google Sign In Android Flutter Package**
=============================================

The `google_sign_in_android` Flutter package provides a simple and convenient way to integrate Google Sign-In into your Android Flutter app. This package allows users to authenticate with their Google account, providing a seamless and secure authentication experience.

**When to Use This Package**
---------------------------

You should use this package when you want to:

* Allow users to authenticate with their Google account
* Access Google APIs on behalf of the user
* Provide a secure and seamless authentication experience

**Features**
------------

* Supports Android and iOS platforms
* Provides a simple and easy-to-use API for authenticating with Google
* Supports multiple scopes for accessing different Google APIs

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setup and Usage**
-------------------

### Step 1: Add the Package to Your Pubspec

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  google_sign_in_android: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Configure Android

In your `android/app/build.gradle` file, add the following lines:
```groovy
dependencies {
    implementation 'com.google.android.gms:play-services-auth:20.2.0'
}
```
### Step 3: Configure iOS

In your `ios/Podfile` file, add the following lines:
```ruby
pod 'GoogleSignIn', '~> 6.2.0'
```
Then, run `pod install` to install the pod.

### Step 4: Initialize the Package

In your `main.dart` file, import the package and initialize it:
```dart
import 'package:google_sign_in_android/google_sign_in_android.dart';

void main() {
  GoogleSignInAndroid.initialize(
    clientId: 'YOUR_CLIENT_ID',
    scopes: ['email', 'profile'],
  );
  runApp(MyApp());
}
```
Replace `YOUR_CLIENT_ID` with your actual client ID from the Google Cloud Console.

### Step 5: Use the Package

To sign in with Google, use the following code:
```dart
GoogleSignInAndroid.signIn().then((result) {
  if (result.isSuccess) {
    // User is signed in
  } else {
    // User is not signed in
  }
});
```
To sign out, use the following code:
```dart
GoogleSignInAndroid.signOut().then((result) {
  if (result.isSuccess) {
    // User is signed out
  } else {
    // User is not signed out
  }
});
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:google_sign_in_android/google_sign_in_android.dart';

void main() {
  GoogleSignInAndroid.initialize(
    clientId: 'YOUR_CLIENT_ID',
    scopes: ['email', 'profile'],
  );
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  bool _isSignedIn = false;

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Google Sign In Demo',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Google Sign In Demo'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Text(
                _isSignedIn ? 'You are signed in' : 'You are not signed in',
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  GoogleSignInAndroid.signIn().then((result) {
                    if (result.isSuccess) {
                      setState(() {
                        _isSignedIn = true;
                      });
                    } else {
                      setState(() {
                        _isSignedIn = false;
                      });
                    }
                  });
                },
                child: Text('Sign In'),
              ),
              SizedBox(height: 10),
              ElevatedButton(
                onPressed: () {
                  GoogleSignInAndroid.signOut().then((result) {
                    if (result.isSuccess) {
                      setState(() {
                        _isSignedIn = false;
                      });
                    } else {
                      setState(() {
                        _isSignedIn = true;
                      });
                    }
                  });
                },
                child: Text('Sign Out'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The app starts by initializing the GoogleSignInAndroid package with the client ID and scopes.
// The client ID is obtained from the Google Cloud Console.
// The scopes are used to specify what kind of access the app needs to the user's Google account.

// When the user clicks the Sign In button, the app calls the GoogleSignInAndroid.signIn() method.
// This method returns a Future that resolves to a Result object, which indicates whether the sign-in was successful.

// If the sign-in is successful, the app sets the _isSignedIn variable to true and updates the UI to show that the user is signed in.

// When the user clicks the Sign Out button, the app calls the GoogleSignInAndroid.signOut() method.
// This method returns a Future that resolves to a Result object, which indicates whether the sign-out was successful.

// If the sign-out is successful, the app sets the _isSignedIn variable to false and updates the UI to show that the user is not signed in.

// The app uses the _isSignedIn variable to determine what to show in the UI.
// If the user is signed in, the app shows a message saying "You are signed in".
// If the user is not signed in, the app shows a message saying "You are not signed in".
```

<-- END_MAIN -->
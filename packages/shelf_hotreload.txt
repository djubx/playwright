<-- START_DESCRIPTION -->

**Shelf Hot Reload: A Game-Changer for Flutter Development**
===========================================================

The `shelf_hotreload` package is a powerful tool for Flutter developers that enables hot reloading of server-side code. This package is particularly useful when developing applications that require a server-side component, such as RESTful APIs or WebSocket servers.

**When to Use Shelf Hot Reload**
-------------------------------

You should use `shelf_hotreload` when:

* Developing a Flutter application with a server-side component
* You want to quickly test and iterate on server-side code changes
* You need to debug server-side code without restarting the entire application

**Key Features**
----------------

* Hot reloading of server-side code
* Supports Shelf and Shelf Web servers
* Works with Flutter's built-in hot reload feature

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setting Up Shelf Hot Reload**
=============================

To use `shelf_hotreload`, follow these steps:

### Step 1: Add the Package to Your Project

Add the following dependency to your `pubspec.yaml` file:
```yml
dependencies:
  shelf_hotreload: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Create a Server

Create a new file called `server.dart` and add the following code:
```dart
import 'package:shelf/shelf.dart';
import 'package:shelf_hotreload/shelf_hotreload.dart';

Future<void> main() async {
  var server = await ShelfHotReload.createServer(
    handler: (request) => Response.ok(body: 'Hello, World!'),
  );

  print('Server started on port ${server.port}');
}
```
This code creates a simple Shelf server that responds with "Hello, World!" to every request.

### Step 3: Configure Hot Reload

To enable hot reload, add the following code to your `main` function:
```dart
import 'package:flutter/material.dart';
import 'package:shelf_hotreload/shelf_hotreload.dart';

void main() {
  runApp(MyApp());

  // Enable hot reload
  ShelfHotReload.hotReloadServer(
    onReload: () => runApp(MyApp()),
  );
}
```
This code enables hot reload and restarts the server when the application is reloaded.

### Platform-Specific Details

* **Android:** No additional configuration is required.
* **iOS:** You need to add the following code to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```
This code allows the application to make HTTP requests to the server.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:shelf/shelf.dart';
import 'package:shelf_hotreload/shelf_hotreload.dart';

void main() {
  // Create a new server
  var server = ShelfHotReload.createServer(
    handler: (request) => Response.ok(body: 'Hello, World!'),
  );

  // Enable hot reload
  ShelfHotReload.hotReloadServer(
    onReload: () => runApp(MyApp()),
  );

  // Run the application
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Shelf Hot Reload Demo',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Shelf Hot Reload Demo'),
        ),
        body: Center(
          child: Text('Hello, World!'),
        ),
      ),
    );
  }
}

// Application flow:
// 1. The application starts and creates a new server.
// 2. The server is configured to respond with "Hello, World!" to every request.
// 3. Hot reload is enabled, which restarts the server when the application is reloaded.
// 4. The application is run and displays the text "Hello, World!".
// 5. When the application is reloaded, the server is restarted and the text is updated.
```

// Summary:
// The code creates a new server that responds with "Hello, World!" to every request.
// Hot reload is enabled, which restarts the server when the application is reloaded.
// The application is run and displays the text "Hello, World!".
// When the application is reloaded, the server is restarted and the text is updated.

<-- END_MAIN -->
Here’s a detailed technical blog on the `cpf_cnpj_validator` Flutter package, structured as requested.

<!-- START_DESCRIPTION -->
# CPF CNPJ Validator Flutter Package

The `cpf_cnpj_validator` package is a Flutter library designed to validate Brazilian CPF (Cadastro de Pessoas Físicas) and CNPJ (Cadastro Nacional da Pessoa Jurídica) numbers. These identification numbers are essential for various transactions in Brazil, including banking, taxation, and business registration. This package simplifies the validation process, ensuring that the CPF and CNPJ numbers entered by users are formatted correctly and are valid according to Brazilian standards.

## When to Use This Package

You should consider using the `cpf_cnpj_validator` package in scenarios such as:

- **User Registration Forms**: When creating forms that require users to input their CPF or CNPJ for identification.
- **E-commerce Applications**: To validate customer identification before processing orders.
- **Financial Applications**: Ensuring that the CPF or CNPJ provided for transactions is valid.

## Features

- **Validation**: Checks if the CPF or CNPJ is valid based on Brazilian rules.
- **Formatting**: Provides methods to format CPF and CNPJ numbers for better user experience.
- **Easy Integration**: Simple to integrate into any Flutter application with minimal setup.

By leveraging this package, developers can enhance the reliability of user input and ensure compliance with Brazilian identification standards.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the CPF CNPJ Validator Package

## Step 1: Adding the Dependency

To use the `cpf_cnpj_validator` package, you need to add it to your `pubspec.yaml` file. Open the file and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  cpf_cnpj_validator: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command in your terminal to install it:

```bash
flutter pub get
```

## Step 2: Platform-Specific Configuration

### Android

For Android, ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
        ...
    }
}
```

### iOS

For iOS, you may need to update your `Info.plist` file to allow for any necessary permissions, although this package does not require special permissions.

## Step 3: Using the Package

Now that you have set up the package, you can start using it in your Flutter application. Below is a simple example of how to validate CPF and CNPJ numbers.

```dart
import 'package:flutter/material.dart';
import 'package:cpf_cnpj_validator/cpf_validator.dart';
import 'package:cpf_cnpj_validator/cnpj_validator.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('CPF CNPJ Validator')),
        body: ValidatorForm(),
      ),
    );
  }
}

class ValidatorForm extends StatefulWidget {
  @override
  _ValidatorFormState createState() => _ValidatorFormState();
}

class _ValidatorFormState extends State<ValidatorForm> {
  final TextEditingController _controller = TextEditingController();
  String _result = '';

  void _validate() {
    String input = _controller.text;
    if (CPFValidator.isValid(input)) {
      setState(() {
        _result = 'Valid CPF';
      });
    } else if (CNPJValidator.isValid(input)) {
      setState(() {
        _result = 'Valid CNPJ';
      });
    } else {
      setState(() {
        _result = 'Invalid CPF or CNPJ';
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        TextField(
          controller: _controller,
          decoration: InputDecoration(labelText: 'Enter CPF or CNPJ'),
        ),
        ElevatedButton(
          onPressed: _validate,
          child: Text('Validate'),
        ),
        Text(_result),
      ],
    );
  }
}
```

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of CPF CNPJ Validator

```dart
import 'package:flutter/material.dart';
import 'package:cpf_cnpj_validator/cpf_validator.dart';
import 'package:cpf_cnpj_validator/cnpj_validator.dart';

// Main entry point of the application
void main() {
  runApp(RealFlutter());
}

// The main application widget
class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('CPF CNPJ Validator')),
        body: ValidatorForm(),
      ),
    );
  }
}

// Stateful widget to manage the validation form
class ValidatorForm extends StatefulWidget {
  @override
  _ValidatorFormState createState() => _ValidatorFormState();
}

class _ValidatorFormState extends State<ValidatorForm> {
  final TextEditingController _controller = TextEditingController(); // Controller for the text field
  String _result = ''; // Variable to hold the validation result

  // Method to validate the input
  void _validate() {
    String input = _controller.text; // Get the input from the text field
    if (CPFValidator.isValid(input)) { // Check if the input is a valid CPF
      setState(() {
        _result = 'Valid CPF'; // Update the result if valid
      });
    } else if (CNPJValidator.isValid(input)) { // Check if the input is a valid CNPJ
      setState(() {
        _result = 'Valid CNPJ'; // Update the result if valid
      });
    } else {
      setState(() {
        _result = 'Invalid CPF or CNPJ'; // Update the result if invalid
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        TextField(
          controller: _controller, // Assign the controller to the text field
          decoration: InputDecoration(labelText: 'Enter CPF or CNPJ'), // Label for the text field
        ),
        ElevatedButton(
          onPressed: _validate, // Call the validate method on button press
          child: Text('Validate'), // Button text
        ),
        Text(_result), // Display the validation result
      ],
    );
  }
}
```

```
// Explanation of the application flow:
// 1. The application starts with the main() function, which runs the RealFlutter widget.
// 2. The RealFlutter widget builds a MaterialApp with a Scaffold containing an AppBar and the ValidatorForm widget.
// 3. The ValidatorForm widget is a stateful widget that manages user input and validation.
// 4. A TextEditingController is used to capture the input from the user.
// 5. When the user enters a CPF or CNPJ and presses the Validate button, the _validate() method is called.
// 6. The _validate() method checks if the input is a valid CPF or CNPJ using the respective validators.
// 7. The result of the validation is displayed below the button, informing the user whether the input is valid or invalid.
```
<!-- END_MAIN -->

This blog provides a comprehensive overview of the `cpf_cnpj_validator` package, guiding you through its setup, usage, and a complete example to help you integrate it into your Flutter applications effectively.
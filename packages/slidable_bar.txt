<-- START_DESCRIPTION -->

# Slidable Bar Flutter Package
The `slidable_bar` package is a Flutter widget that allows users to create a bottom navigation bar with a sliding effect. It is a highly customizable package that can be used to create a variety of navigation bars.

## When to Use
This package is ideal for apps that require a bottom navigation bar with a sliding effect. It can be used in a variety of scenarios, such as:

* Creating a navigation bar with a sliding effect
* Customizing the appearance of the navigation bar
* Adding animations to the navigation bar

## Features
The `slidable_bar` package has the following features:

* Highly customizable
* Supports animations
* Easy to use

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
In this tutorial, we will walk through the setup process and explain how to use the `slidable_bar` package.

## Step 1: Add the Package to Your Pubspec.yaml File
Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  slidable_bar: ^1.0.0
```
## Step 2: Import the Package
Import the package in your Dart file:
```dart
import 'package:slidable_bar/slidable_bar.dart';
```
## Step 3: Create a Slidable Bar
Create a `SlidableBar` widget and add it to your app:
```dart
SlidableBar(
  items: [
    SlidableBarItem(
      icon: Icons.home,
      title: 'Home',
    ),
    SlidableBarItem(
      icon: Icons.settings,
      title: 'Settings',
    ),
  ],
  onTap: (index) {
    print('Item $index tapped');
  },
)
```
## Platform-Specific Details
The `slidable_bar` package works on both Android and iOS platforms. However, there are some platform-specific details to keep in mind:

* On Android, the navigation bar is displayed at the bottom of the screen.
* On iOS, the navigation bar is displayed at the bottom of the screen, but it is hidden by default. To show the navigation bar, you need to add the following code to your `Info.plist` file:
```xml
<key>UIRequiresFullScreen</key>
<true/>
```
## Configurations and Optimizations
The `slidable_bar` package has several configurations and optimizations that you can use to customize its behavior. For example, you can change the animation duration, the item padding, and the background color.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:slidable_bar/slidable_bar.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  int _currentIndex = 0;

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        body: IndexedStack(
          index: _currentIndex,
          children: [
            // Home screen
            Center(
              child: Text('Home screen'),
            ),
            // Settings screen
            Center(
              child: Text('Settings screen'),
            ),
          ],
        ),
        bottomNavigationBar: SlidableBar(
          items: [
            SlidableBarItem(
              icon: Icons.home,
              title: 'Home',
            ),
            SlidableBarItem(
              icon: Icons.settings,
              title: 'Settings',
            ),
          ],
          onTap: (index) {
            setState(() {
              _currentIndex = index;
            });
          },
        ),
      ),
    );
  }
}

// The app starts by running the main function, which creates a RealFlutter widget.
// The RealFlutter widget is a stateful widget that has a _currentIndex variable to keep track of the current screen.
// The build method returns a MaterialApp with a Scaffold that has a body and a bottom navigation bar.
// The body is an IndexedStack that displays the current screen based on the _currentIndex.
// The bottom navigation bar is a SlidableBar that has two items: Home and Settings.
// When an item is tapped, the onTap callback is called, which updates the _currentIndex and rebuilds the widget tree.
// This causes the IndexedStack to display the new screen.
```

<-- END_MAIN -->
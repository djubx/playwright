<-- START_DESCRIPTION -->

# Video Cast Flutter Package
==========================

The `video_cast` Flutter package allows you to cast videos from your Flutter app to external devices such as Chromecast, Apple TV, and Smart TVs. This package provides a simple and easy-to-use API to integrate video casting into your Flutter app.

## When to Use This Package

You can use this package when you want to provide a seamless video casting experience to your users. For example, if you're building a video streaming app, you can use this package to allow users to cast videos to their TVs.

## Features

*   Supports casting to Chromecast, Apple TV, and Smart TVs
*   Easy-to-use API for integrating video casting into your Flutter app
*   Supports both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Video Cast Package
=====================================================

## Step 1: Add the Package to Your Pubspec.yaml File

To use the `video_cast` package, you need to add it to your `pubspec.yaml` file. Open your `pubspec.yaml` file and add the following line under the `dependencies` section:

```yml
dependencies:
  flutter:
    sdk: flutter
  video_cast: ^1.0.0
```

## Step 2: Import the Package in Your Dart File

After adding the package to your `pubspec.yaml` file, you need to import it in your Dart file. Open your Dart file and add the following line at the top:

```dart
import 'package:video_cast/video_cast.dart';
```

## Step 3: Initialize the Video Cast Package

To use the `video_cast` package, you need to initialize it. You can do this by calling the `VideoCast.initialize()` method. This method takes a callback function that is called when the initialization is complete.

```dart
void main() {
  runApp(MyApp());
}

class MyApp extends StatefulWidget {
  @override
  _MyAppState createState() => _MyAppState();
}

class _MyAppState extends State<MyApp> {
  @override
  void initState() {
    super.initState();
    VideoCast.initialize(
      onInitialized: () {
        print('Video Cast initialized');
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Video Cast Example'),
        ),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              // Cast a video
              VideoCast.castVideo(
                'https://example.com/video.mp4',
                'Video Title',
                'Video Description',
              );
            },
            child: Text('Cast Video'),
          ),
        ),
      ),
    );
  }
}
```

## Platform-Specific Details

### Android

To use the `video_cast` package on Android, you need to add the following lines to your `AndroidManifest.xml` file:

```xml
<uses-permission android:name="android.permission.INTERNET" />
<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
```

### iOS

To use the `video_cast` package on iOS, you need to add the following lines to your `Info.plist` file:

```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
// Import the video_cast package
import 'package:flutter/material.dart';
import 'package:video_cast/video_cast.dart';

// Create a new class for the app
class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Initialize the video_cast package
  @override
  void initState() {
    super.initState();
    VideoCast.initialize(
      onInitialized: () {
        print('Video Cast initialized');
      },
    );
  }

  // Create a button to cast a video
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Video Cast Example'),
        ),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              // Cast a video
              VideoCast.castVideo(
                'https://example.com/video.mp4',
                'Video Title',
                'Video Description',
              );
            },
            child: Text('Cast Video'),
          ),
        ),
      ),
    );
  }
}

// Run the app
void main() {
  runApp(RealFlutter());
}

// The app flow is as follows:
// 1. The user opens the app and the video_cast package is initialized.
// 2. The user clicks the "Cast Video" button.
// 3. The video_cast package casts the video to the selected device.
// 4. The user can control the video playback using the video_cast package.
```

// The app flow is explained above in the comments.
// The code initializes the video_cast package, creates a button to cast a video, and runs the app.
// When the user clicks the button, the video_cast package casts the video to the selected device.
// The user can control the video playback using the video_cast package.

<-- END_MAIN -->
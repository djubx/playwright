<-- START_DESCRIPTION -->

# at_client Flutter Package
The at_client package is a Flutter library that provides a simple and secure way to handle user authentication and data storage. It allows developers to easily integrate authentication and data management into their Flutter applications.

## Features
- Secure authentication using encryption and secure storage
- Simple data storage and retrieval
- Support for multiple platforms, including Android and iOS

## When to Use
The at_client package is ideal for applications that require user authentication and data storage. It is particularly useful for applications that handle sensitive user data, such as passwords, credit card numbers, and personal identifiable information.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up at_client
To use the at_client package, you need to add it to your Flutter project's pubspec.yaml file.

```yml
dependencies:
  flutter:
    sdk: flutter
  at_client: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Android Configuration
For Android, you need to add the following configuration to your AndroidManifest.xml file.

```xml
<application
  ...
  android:usesCleartextTraffic="true">
  ...
</application>
```

## iOS Configuration
For iOS, you need to add the following configuration to your Info.plist file.

```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```

## Initializing at_client
To initialize the at_client package, you need to create an instance of the AtClient class and call the `init` method.

```dart
import 'package:at_client/at_client.dart';

class RealFlutter {
  Future<void> initAtClient() async {
    final atClient = AtClient();
    await atClient.init();
  }
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:at_client/at_client.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'at_client Demo',
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final _atClient = AtClient();

  Future<void> _initAtClient() async {
    // Initialize the at_client package
    await _atClient.init();
  }

  Future<void> _login() async {
    // Login using the at_client package
    final username = 'test';
    final password = 'test';
    await _atClient.login(username, password);
  }

  Future<void> _storeData() async {
    // Store data using the at_client package
    final data = 'Hello, World!';
    await _atClient.storeData(data);
  }

  Future<void> _getData() async {
    // Get data using the at_client package
    final data = await _atClient.getData();
    print(data);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('at_client Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: _initAtClient,
              child: Text('Initialize at_client'),
            ),
            ElevatedButton(
              onPressed: _login,
              child: Text('Login'),
            ),
            ElevatedButton(
              onPressed: _storeData,
              child: Text('Store Data'),
            ),
            ElevatedButton(
              onPressed: _getData,
              child: Text('Get Data'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user initializes the at_client package by clicking the "Initialize at_client" button.
// 2. The user logs in using the at_client package by clicking the "Login" button.
// 3. The user stores data using the at_client package by clicking the "Store Data" button.
// 4. The user gets the stored data using the at_client package by clicking the "Get Data" button.
// The at_client package handles the authentication and data storage securely and efficiently.

```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Page Route Transition Package
The `page_route_transition` package in Flutter is a powerful tool for creating custom page transitions. It allows developers to create seamless and visually appealing transitions between pages, enhancing the overall user experience.

## When to Use
This package is ideal for applications that require custom page transitions, such as:

* Creating a slide-in effect for a new page
* Implementing a fade-in effect for a new page
* Designing a custom transition animation

## Features
The `page_route_transition` package offers the following features:

* Customizable transition animations
* Support for both Android and iOS platforms
* Easy integration with existing Flutter projects

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
To use the `page_route_transition` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  page_route_transition: ^1.0.0
```
2. Run `flutter pub get` to install the package.
3. Import the package in your Dart file:
```dart
import 'package:page_route_transition/page_route_transition.dart';
```

## Platform-Specific Configurations
For Android, add the following code to your `AndroidManifest.xml` file:
```xml
<application
    ...
    android:hardwareAccelerated="true"
    ...>
</application>
```
For iOS, add the following code to your `Info.plist` file:
```xml
<key>UIViewControllerBasedStatusBarAppearance</key>
<false/>
```

## Using the Package
To create a custom page transition, use the `PageRouteTransition` widget:
```dart
PageRouteTransition(
  child: RealFlutter(),
  type: PageRouteTransitionType.slide,
  duration: Duration(milliseconds: 500),
)
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:page_route_transition/page_route_transition.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Page Route Transition Demo',
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Page Route Transition Demo'),
      ),
      body: Center(
        child: ElevatedButton(
          child: Text('Navigate to Next Page'),
          onPressed: () {
            Navigator.push(
              context,
              PageRouteTransition(
                child: NextPage(),
                type: PageRouteTransitionType.slide,
                duration: Duration(milliseconds: 500),
              ),
            );
          },
        ),
      ),
    );
  }
}

class NextPage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Next Page'),
      ),
      body: Center(
        child: Text('This is the next page'),
      ),
    );
  }
}
```

// The application flow is as follows:
// 1. The user clicks the "Navigate to Next Page" button on the RealFlutter page.
// 2. The `Navigator.push` method is called with the `PageRouteTransition` widget.
// 3. The `PageRouteTransition` widget creates a custom page transition animation.
// 4. The next page (NextPage) is displayed with the custom transition animation.
// 5. The user can navigate back to the previous page by clicking the back button.

// In summary, the code flows as follows:
// RealFlutter -> (button click) -> Navigator.push -> PageRouteTransition -> NextPage

<-- END_MAIN -->
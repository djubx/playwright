<-- START_DESCRIPTION -->

# Introduction to Cooky Flutter Package
=====================================

The Cooky Flutter package is a powerful tool for managing cookies in Flutter applications. It provides a simple and efficient way to store, retrieve, and manage cookies, making it an essential package for any Flutter developer.

## When to Use Cooky

Cooky is particularly useful when building applications that require authentication, session management, or tracking user behavior. It simplifies the process of handling cookies, allowing developers to focus on building robust and scalable applications.

## Key Features

*   **Cookie Storage**: Cooky provides a secure and efficient way to store cookies, ensuring that sensitive data is protected.
*   **Cookie Retrieval**: Easily retrieve cookies using Cooky's intuitive API, making it simple to access stored data.
*   **Cookie Management**: Cooky allows developers to manage cookies, including updating, deleting, and expiring cookies as needed.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up Cooky
================

To use Cooky in your Flutter application, follow these steps:

### Step 1: Add Cooky to Your Project

Add the Cooky package to your `pubspec.yaml` file:

```yml
dependencies:
  cooky: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import Cooky

Import Cooky in your Dart file:

```dart
import 'package:cooky/cooky.dart';
```

### Step 3: Initialize Cooky

Initialize Cooky before using it:

```dart
void main() async {
  await Cooky.init();
  runApp(MyApp());
}
```

### Platform-Specific Details

*   **Android**: No additional configuration is required for Android.
*   **iOS**: Add the following code to your `Info.plist` file to enable cookie storage:

```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:cooky/cooky.dart';

void main() async {
  await Cooky.init();
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  String _cookieValue = '';

  // Step 1: Set a cookie using Cooky
  Future<void> _setCookie() async {
    await Cooky.set('my_cookie', 'Hello, World!');
  }

  // Step 2: Get the cookie value using Cooky
  Future<void> _getCookie() async {
    final cookieValue = await Cooky.get('my_cookie');
    setState(() {
      _cookieValue = cookieValue ?? '';
    });
  }

  // Step 3: Update the cookie value using Cooky
  Future<void> _updateCookie() async {
    await Cooky.set('my_cookie', 'Updated cookie value!');
  }

  // Step 4: Delete the cookie using Cooky
  Future<void> _deleteCookie() async {
    await Cooky.delete('my_cookie');
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Cooky Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Text('Cookie Value: $_cookieValue'),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _setCookie,
                child: Text('Set Cookie'),
              ),
              SizedBox(height: 10),
              ElevatedButton(
                onPressed: _getCookie,
                child: Text('Get Cookie'),
              ),
              SizedBox(height: 10),
              ElevatedButton(
                onPressed: _updateCookie,
                child: Text('Update Cookie'),
              ),
              SizedBox(height: 10),
              ElevatedButton(
                onPressed: _deleteCookie,
                child: Text('Delete Cookie'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user clicks the "Set Cookie" button, which sets a cookie with the key "my_cookie" and value "Hello, World!".
// 2. The user clicks the "Get Cookie" button, which retrieves the cookie value and displays it on the screen.
// 3. The user clicks the "Update Cookie" button, which updates the cookie value to "Updated cookie value!".
// 4. The user clicks the "Delete Cookie" button, which deletes the cookie.
// The cookie value is displayed on the screen throughout the process, demonstrating the usage of Cooky for cookie management.

```

<-- END_MAIN -->
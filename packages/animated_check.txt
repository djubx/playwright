<-- START_DESCRIPTION -->

# Animated Check Flutter Package
=====================================

The `animated_check` Flutter package provides an easy-to-use animated checkmark widget for Flutter applications. It's perfect for indicating the completion of a task, confirming user input, or simply adding a touch of animation to your app.

### Features

* Customizable animation duration and curve
* Support for different checkmark styles and colors
* Optional animation completion callback

### When to Use

* When you need to indicate the completion of a task or operation
* When you want to add a visually appealing animation to your app
* When you need a customizable checkmark widget

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Using the Animated Check Package
=============================================

### Step 1: Add the Package to Your Project

Add the following dependency to your `pubspec.yaml` file:
```yml
dependencies:
  animated_check: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:animated_check/animated_check.dart';
```
### Step 3: Use the AnimatedCheck Widget

Use the `AnimatedCheck` widget in your Flutter widget tree:
```dart
AnimatedCheck(
  duration: Duration(milliseconds: 500),
  curve: Curves.easeInOut,
  checkStyle: CheckStyle.circle,
  color: Colors.green,
  onComplete: () {
    print('Animation complete!');
  },
)
```
### Platform-Specific Details

* Android: No additional configuration required.
* iOS: No additional configuration required.

### Optimizations

* For better performance, use a shorter animation duration.
* Use a different animation curve to change the animation's feel.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:animated_check/animated_check.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  bool _isChecked = false;

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Animated Check Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              AnimatedCheck(
                duration: Duration(milliseconds: 500),
                curve: Curves.easeInOut,
                checkStyle: CheckStyle.circle,
                color: Colors.green,
                onComplete: () {
                  print('Animation complete!');
                },
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  setState(() {
                    _isChecked = !_isChecked;
                  });
                },
                child: Text(_isChecked ? 'Uncheck' : 'Check'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app and sees the AnimatedCheck widget.
// 2. When the user presses the button, the _isChecked state is toggled.
// 3. The AnimatedCheck widget is rebuilt with the new _isChecked state.
// 4. If _isChecked is true, the AnimatedCheck widget plays the animation.
// 5. When the animation completes, the onComplete callback is called.
// 6. The user can press the button again to toggle the _isChecked state and play the animation again.
```

<-- END_MAIN -->
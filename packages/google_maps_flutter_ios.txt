<-- START_DESCRIPTION -->

# Google Maps Flutter iOS Package
=====================================

The `google_maps_flutter_ios` package is a Flutter plugin that provides a native Google Maps experience for iOS devices. It allows developers to embed Google Maps into their Flutter applications, providing a seamless and interactive mapping experience for users.

## When to Use This Package
---------------------------

This package is ideal for Flutter applications that require a native Google Maps experience on iOS devices. It's perfect for applications that need to display maps, markers, and other geographic data.

## Features
------------

*   Native Google Maps experience for iOS devices
*   Support for markers, polygons, and polylines
*   Customizable map styles and themes
*   Integration with Google Maps APIs for geocoding, directions, and places

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `google_maps_flutter_ios` package, follow these steps:

### Step 1: Add the Package to Your `pubspec.yaml` File

```yml
dependencies:
  flutter:
    sdk: flutter
  google_maps_flutter_ios: ^2.1.0
```

### Step 2: Run `flutter pub get` to Get the Package

```bash
flutter pub get
```

### Step 3: Import the Package in Your Dart File

```dart
import 'package:google_maps_flutter_ios/google_maps_flutter_ios.dart';
```

### Step 4: Create a Google Maps API Key

Create a new Google Maps API key in the Google Cloud Console.

### Step 5: Configure the API Key in Your `Info.plist` File (iOS)

```xml
<key>NSLocationWhenInUseUsageDescription</key>
<string>This app needs access to location to function properly</string>
<key>NSLocationAlwaysAndWhenInUseUsageDescription</key>
<string>This app needs access to location to function properly</string>
<key>NSLocationAlwaysUsageDescription</key>
<string>This app needs access to location to function properly</string>
<key>UIBackgroundModes</key>
<array>
    <string>location</string>
</array>
<key>GoogleMapsAPIKey</key>
<string>YOUR_API_KEY_HERE</string>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:google_maps_flutter_ios/google_maps_flutter_ios.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  GoogleMapController _mapController;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Google Maps Flutter iOS'),
      ),
      body: GoogleMap(
        onMapCreated: (GoogleMapController controller) {
          _mapController = controller;
        },
        initialCameraPosition: CameraPosition(
          target: LatLng(37.7749, -122.4194),
          zoom: 12,
        ),
        markers: {
          Marker(
            markerId: MarkerId('marker1'),
            position: LatLng(37.7749, -122.4194),
            infoWindow: InfoWindow(title: 'Marker 1'),
          ),
        },
        polygons: {
          Polygon(
            polygonId: PolygonId('polygon1'),
            points: [
              LatLng(37.7749, -122.4194),
              LatLng(37.7859, -122.4364),
              LatLng(37.7963, -122.4574),
              LatLng(37.8067, -122.4784),
            ],
            strokeWidth: 2,
            strokeColor: Colors.blue,
            fillColor: Colors.blue.withOpacity(0.5),
          ),
        },
        polylines: {
          Polyline(
            polylineId: PolylineId('polyline1'),
            points: [
              LatLng(37.7749, -122.4194),
              LatLng(37.7859, -122.4364),
              LatLng(37.7963, -122.4574),
              LatLng(37.8067, -122.4784),
            ],
            width: 2,
            color: Colors.red,
          ),
        },
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and is presented with a Google Map.
// 2. The map is centered on a specific location (in this case, San Francisco).
// 3. A marker is displayed on the map at the centered location.
// 4. A polygon is displayed on the map, representing a geographic area.
// 5. A polyline is displayed on the map, representing a route or path.
// 6. The user can interact with the map by zooming in and out, panning, and tapping on the marker or polygon.
// 7. The app responds to user input by updating the map display and providing additional information (such as the marker's info window).

// This code demonstrates the key features of the Google Maps Flutter iOS package, including:
// * Displaying a Google Map in a Flutter app
// * Adding markers, polygons, and polylines to the map
// * Customizing the map's appearance and behavior
// * Responding to user input and providing additional information

```

<-- END_MAIN -->
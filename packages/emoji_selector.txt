<-- START_DESCRIPTION -->

# Emoji Selector Flutter Package
================================

The `emoji_selector` Flutter package provides a simple and easy-to-use emoji picker for your Flutter applications. It allows users to select from a wide range of emojis, which can be used in various contexts such as text messages, comments, or reviews.

## When to Use
--------------

You can use the `emoji_selector` package in any Flutter application where you want to provide users with the ability to select and use emojis. Some examples include:

* Chat applications
* Social media platforms
* Review and rating systems
* Text editors

## Features
------------

The `emoji_selector` package comes with the following features:

* A customizable emoji picker with a wide range of emojis
* Support for both Android and iOS platforms
* Ability to select multiple emojis at once
* Option to display recently used emojis

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Emoji Selector Package
--------------------------------------

To use the `emoji_selector` package in your Flutter application, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  emoji_selector: ^1.0.0
```
Then, run `flutter pub get` in your terminal to get the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:emoji_selector/emoji_selector.dart';
```
### Step 3: Use the Emoji Selector

Create an instance of the `EmojiSelector` widget and use it in your application:
```dart
EmojiSelector(
  onEmojiSelected: (emoji) {
    // Handle the selected emoji
  },
)
```
### Platform-Specific Details

* For Android, make sure to add the following line to your `AndroidManifest.xml` file:
```xml
<application
  ...
  android:hardwareAccelerated="true"
  ...
>
```
* For iOS, make sure to add the following line to your `Info.plist` file:
```xml
<key>UIViewControllerBasedStatusBarAppearance</key>
<false/>
```
### Configurations and Optimizations

You can customize the emoji selector by using the following properties:

* `emojiSize`: The size of the emojis
* `emojiPadding`: The padding between the emojis
* `recentlyUsedEmojis`: A list of recently used emojis
* `onEmojiSelected`: A callback function that handles the selected emoji

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:emoji_selector/emoji_selector.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Emoji Selector Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  String _selectedEmoji = '';

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Emoji Selector Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Selected Emoji: $_selectedEmoji',
              style: TextStyle(fontSize: 24),
            ),
            SizedBox(height: 20),
            EmojiSelector(
              onEmojiSelected: (emoji) {
                setState(() {
                  _selectedEmoji = emoji;
                });
              },
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the application and is presented with a screen that displays the selected emoji.
// 2. The user clicks on the emoji selector and is presented with a grid of emojis.
// 3. The user selects an emoji and the `onEmojiSelected` callback function is called.
// 4. The selected emoji is updated in the state and the UI is rebuilt to display the new emoji.
// 5. The user can repeat the process to select a different emoji.

```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# City Pickers Flutter Package
================================

The City Pickers Flutter package is a powerful and flexible library that allows developers to easily integrate city selection functionality into their Flutter applications. With this package, users can select cities from a vast database of cities worldwide, making it an ideal solution for applications that require location-based services.

## Key Features

*   Comprehensive database of cities worldwide
*   Support for multiple languages
*   Customizable UI to fit your application's theme
*   Easy integration with existing Flutter applications

## When to Use

The City Pickers Flutter package is perfect for applications that require users to select cities, such as:

*   Travel and tourism applications
*   E-commerce applications with location-based services
*   Social media applications with location-based features
*   Weather applications

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up City Pickers Flutter Package
=============================================

## Step 1: Add the Package to Your Project

To use the City Pickers Flutter package, you need to add it to your project's `pubspec.yaml` file. Add the following line under the `dependencies` section:

```yml
dependencies:
  flutter:
    sdk: flutter
  city_pickers: ^1.0.0
```

Then, run `flutter pub get` in your terminal to get the package.

## Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:city_pickers/city_pickers.dart';
```

## Step 3: Use the Package

To use the package, you need to create an instance of the `CityPicker` class and pass it to the `showCityPicker` method:

```dart
void _showCityPicker() async {
  final CityPickerResult result = await showCityPicker(
    context: context,
    // Optional parameters
    // locale: Locale('zh', 'CN'),
    // locationCode: '110000',
  );
  if (result != null) {
    print(result);
  }
}
```

You can customize the UI by passing optional parameters to the `showCityPicker` method.

## Platform-Specific Details

The City Pickers Flutter package works on both Android and iOS platforms. However, you need to add the following configuration to your `AndroidManifest.xml` file for Android:

```xml
<application
  ...
  android:hardwareAccelerated="true"
  ...
>
```

For iOS, you need to add the following configuration to your `Info.plist` file:

```xml
<key>UIAppFonts</key>
<array>
  <string>MaterialIcons-Regular.ttf</string>
</array>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:city_pickers/city_pickers.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'City Pickers Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: CityPickersDemo(),
    );
  }
}

class CityPickersDemo extends StatefulWidget {
  @override
  _CityPickersDemoState createState() => _CityPickersDemoState();
}

class _CityPickersDemoState extends State<CityPickersDemo> {
  String _city;

  void _showCityPicker() async {
    // Step 1: Create an instance of the CityPicker class
    final CityPickerResult result = await showCityPicker(
      context: context,
      // Optional parameters
      // locale: Locale('zh', 'CN'),
      // locationCode: '110000',
    );

    // Step 2: Check if the result is not null
    if (result != null) {
      // Step 3: Update the UI with the selected city
      setState(() {
        _city = result.cityName;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('City Pickers Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              _city != null ? _city : 'Select a city',
              style: TextStyle(fontSize: 24),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _showCityPicker,
              child: Text('Select City'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user clicks the "Select City" button.
// 2. The _showCityPicker method is called, which creates an instance of the CityPicker class.
// 3. The CityPicker instance is passed to the showCityPicker method, which displays the city picker dialog.
// 4. The user selects a city from the dialog.
// 5. The showCityPicker method returns the selected city, which is stored in the _city variable.
// 6. The UI is updated with the selected city.

// The City Pickers Flutter package provides a simple and efficient way to integrate city selection functionality into your Flutter application.
```

<-- END_MAIN -->
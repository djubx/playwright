<-- START_DESCRIPTION -->

# Fetch Link Data Flutter Package
=====================================

The `fetch_link_data` Flutter package is a powerful tool for extracting metadata from URLs. It provides a simple and efficient way to fetch data from links, making it ideal for applications that require data scraping or social media sharing.

### When to Use This Package

* When you need to extract metadata from URLs, such as title, description, and images.
* When you want to create a social media sharing feature that requires metadata from shared links.
* When you need to scrape data from websites for data analysis or other purposes.

### Features

* Supports multiple platforms, including Android and iOS.
* Provides a simple and easy-to-use API for fetching link data.
* Returns metadata in a JSON format, making it easy to parse and use.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the Package
=====================================

### Step 1: Add the Package to Your Project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  fetch_link_data: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:fetch_link_data/fetch_link_data.dart';
```
### Step 3: Use the Package

Use the `FetchLinkData` class to fetch metadata from a URL:
```dart
FetchLinkData fetchLinkData = FetchLinkData();
String url = 'https://www.example.com';
Map<String, dynamic> metadata = await fetchLinkData.fetch(url);
```
The `metadata` variable will contain the extracted metadata in a JSON format.

### Platform-Specific Details

* Android: The package uses the `AndroidWebView` to fetch metadata. Make sure to add the `android.permission.INTERNET` permission to your `AndroidManifest.xml` file.
* iOS: The package uses the `WKWebView` to fetch metadata. Make sure to add the `NSAppTransportSecurity` key to your `Info.plist` file.

### Configurations and Optimizations

* You can configure the package to use a custom user agent by setting the `userAgent` property:
```dart
fetchLinkData.userAgent = 'MyCustomUserAgent';
```
* You can also configure the package to use a custom timeout by setting the `timeout` property:
```dart
fetchLinkData.timeout = Duration(seconds: 10);
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:fetch_link_data/fetch_link_data.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Fetch Link Data Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _urlController = TextEditingController();
  String _metadata = '';

  // Step 1: Create a FetchLinkData instance
  FetchLinkData fetchLinkData = FetchLinkData();

  // Step 2: Define a function to fetch metadata
  Future<void> _fetchMetadata() async {
    // Step 3: Get the URL from the text field
    String url = _urlController.text;

    // Step 4: Fetch metadata using the FetchLinkData instance
    Map<String, dynamic> metadata = await fetchLinkData.fetch(url);

    // Step 5: Update the UI with the fetched metadata
    setState(() {
      _metadata = metadata.toString();
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Fetch Link Data Demo'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Column(
          children: [
            TextField(
              controller: _urlController,
              decoration: InputDecoration(
                labelText: 'Enter URL',
                border: OutlineInputBorder(),
              ),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _fetchMetadata,
              child: Text('Fetch Metadata'),
            ),
            SizedBox(height: 20),
            Text(_metadata),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user enters a URL in the text field.
// 2. The user clicks the "Fetch Metadata" button.
// 3. The _fetchMetadata function is called, which gets the URL from the text field.
// 4. The FetchLinkData instance is used to fetch metadata from the URL.
// 5. The fetched metadata is updated in the UI.

// This code demonstrates how to use the FetchLinkData package to fetch metadata from a URL.
// It also shows how to update the UI with the fetched metadata.
```

<-- END_MAIN -->
```markdown
<!-- START_DESCRIPTION -->
# Exploring the nps_survey Flutter Package

The `nps_survey` package is a powerful tool designed for Flutter developers who want to implement Net Promoter Score (NPS) surveys in their applications. NPS surveys are widely used to gauge customer satisfaction and loyalty by asking users how likely they are to recommend a product or service to others. This package simplifies the process of integrating such surveys into your Flutter app, providing a user-friendly interface and customizable options.

## When to Use This Package
- **Customer Feedback**: When you want to gather feedback from users about your app or service.
- **User Engagement**: To enhance user engagement by asking for their opinions and suggestions.
- **Data Collection**: For businesses looking to collect data on customer satisfaction and loyalty metrics.

## Key Features
- **Customizable UI**: Easily customize the appearance of the survey to match your app's theme.
- **Multiple Question Types**: Supports various question formats, including rating scales and open-ended questions.
- **Analytics Integration**: Can be integrated with analytics tools to track responses and gather insights.
- **Easy Setup**: Simple installation and setup process, making it accessible for developers of all skill levels.

Overall, the `nps_survey` package is an excellent choice for Flutter developers looking to implement effective customer feedback mechanisms in their applications.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the nps_survey Package

## Installation
To get started with the `nps_survey` package, you need to add it to your Flutter project. Open your `pubspec.yaml` file and add the following dependency:

```yaml
dependencies:
  flutter:
    sdk: flutter
  nps_survey: ^latest_version
```

Make sure to replace `^latest_version` with the latest version available on [pub.dev](https://pub.dev/packages/nps_survey). After adding the dependency, run `flutter pub get` to install the package.

## Platform-Specific Configuration
### Android
For Android, ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

### iOS
For iOS, you may need to configure your `Info.plist` file to allow network requests if your survey data is being sent to a server. Add the following lines:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

## Using the Package
To use the `nps_survey` package, you can create a simple survey screen in your Flutter app. Below is a basic example of how to implement the NPS survey.

```dart
import 'package:flutter/material.dart';
import 'package:nps_survey/nps_survey.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'NPS Survey Example',
      home: SurveyScreen(),
    );
  }
}

class SurveyScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('NPS Survey'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Show the NPS survey when the button is pressed
            showDialog(
              context: context,
              builder: (context) {
                return NpsSurvey(
                  title: 'How likely are you to recommend us?',
                  onSubmit: (score) {
                    // Handle the score submission
                    print('User score: $score');
                    Navigator.of(context).pop(); // Close the dialog
                  },
                );
              },
            );
          },
          child: Text('Take Survey'),
        ),
      ),
    );
  }
}
```

In this example, we create a simple Flutter app with a button that, when pressed, opens the NPS survey dialog. The user's score is printed to the console upon submission.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of nps_survey in Flutter

```dart
import 'package:flutter/material.dart';
import 'package:nps_survey/nps_survey.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'NPS Survey Example',
      home: SurveyScreen(),
    );
  }
}

class SurveyScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('NPS Survey'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Show the NPS survey when the button is pressed
            showDialog(
              context: context,
              builder: (context) {
                return NpsSurvey(
                  title: 'How likely are you to recommend us?',
                  onSubmit: (score) {
                    // Handle the score submission
                    print('User score: $score');
                    Navigator.of(context).pop(); // Close the dialog
                  },
                );
              },
            );
          },
          child: Text('Take Survey'),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the RealFlutter class, which sets up the MaterialApp.
// 2. The home of the app is set to SurveyScreen, which contains the main UI.
// 3. In SurveyScreen, an AppBar is created with the title 'NPS Survey'.
// 4. A centered ElevatedButton is displayed, labeled 'Take Survey'.
// 5. When the button is pressed, a dialog containing the NPS survey is shown.
// 6. The NpsSurvey widget is instantiated with a title and an onSubmit callback.
// 7. When the user submits their score, it is printed to the console, and the dialog is closed.
```
<!-- END_MAIN -->
```

### Summary
In this blog post, we explored the `nps_survey` Flutter package, detailing its features, installation process, and usage through a practical example. The provided code demonstrates how to integrate an NPS survey into a Flutter application, allowing developers to gather valuable user feedback efficiently. By following the steps outlined, you can easily implement this package in your own projects to enhance user engagement and satisfaction.
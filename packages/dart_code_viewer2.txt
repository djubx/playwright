<-- START_DESCRIPTION -->

**Dart Code Viewer2 Package Overview**
=====================================

The `dart_code_viewer2` package is a powerful tool for Flutter developers to display and highlight Dart code within their applications. This package is ideal for creating coding tutorials, documentation, or even a code editor app. It supports syntax highlighting, code formatting, and even code execution.

**Key Features:**

*   Syntax highlighting for Dart code
*   Code formatting with customizable options
*   Code execution with output display
*   Support for dark and light themes

**When to Use:**

*   Creating coding tutorials or documentation
*   Building a code editor app
*   Displaying code snippets within an app

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setting Up the Dart Code Viewer2 Package**
==========================================

To use the `dart_code_viewer2` package, follow these steps:

### Step 1: Add the Package to Your Project

Add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  dart_code_viewer2: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:dart_code_viewer2/dart_code_viewer2.dart';
```

### Step 3: Use the Package

Create a `DartCodeViewer` widget and pass in the Dart code as a string:

```dart
DartCodeViewer(
  code: """
  void main() {
    print('Hello, World!');
  }
  """,
)
```

### Platform-Specific Details:

*   For Android, make sure to add the following configuration to your `android/app/src/main/AndroidManifest.xml` file:

    ```xml
<application
  ...
  android:hardwareAccelerated="true"
  ...
>
```

*   For iOS, make sure to add the following configuration to your `ios/Runner/Info.plist` file:

    ```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```

### Optimizations:

*   To improve performance, you can enable caching by setting the `cache` property to `true`:

    ```dart
DartCodeViewer(
  code: """
  void main() {
    print('Hello, World!');
  }
  """,
  cache: true,
)
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:dart_code_viewer2/dart_code_viewer2.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Dart Code Viewer2 Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  String _code = """
  void main() {
    print('Hello, World!');
  }
  """;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Dart Code Viewer2 Demo'),
      ),
      body: Center(
        child: DartCodeViewer(
          code: _code,
          // Enable caching for better performance
          cache: true,
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app and is presented with a Material app with a single page.
// 2. The page contains a DartCodeViewer widget, which displays the provided Dart code.
// 3. The code is syntax highlighted and formatted for better readability.
// 4. The user can interact with the code viewer, such as scrolling and zooming.
// 5. The app uses caching to improve performance and reduce the load on the device.

// In summary, this code creates a simple Material app that displays a Dart code viewer.
// The code viewer is used to display a provided Dart code, and it supports syntax highlighting,
// formatting, and caching for better performance.
```

<-- END_MAIN -->
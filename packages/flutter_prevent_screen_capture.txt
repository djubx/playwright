<-- START_DESCRIPTION -->

# Flutter Prevent Screen Capture Package
=====================================

The `flutter_prevent_screen_capture` package is a Flutter plugin that prevents screen capture and recording on both Android and iOS devices. This package is useful for applications that require high security and confidentiality, such as banking, finance, and healthcare apps.

### When to Use This Package

* When developing applications that handle sensitive user data, such as financial information, personal identifiable information, or confidential business data.
* When developing applications that require high security and confidentiality, such as government, defense, or law enforcement apps.
* When developing applications that need to protect intellectual property or copyrighted content.

### Features

* Prevents screen capture and recording on both Android and iOS devices.
* Supports Android 10 and above, and iOS 11 and above.
* Easy to integrate and use.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Package
=============================================

### Step 1: Add the Package to Your Flutter Project

Add the following dependency to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_prevent_screen_capture: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:flutter_prevent_screen_capture/flutter_prevent_screen_capture.dart';
```
### Step 3: Initialize the Package

Initialize the package in your `main` function:
```dart
void main() {
  runApp(MyApp());
  FlutterPreventScreenCapture.initialize();
}
```
### Step 4: Use the Package

Use the package to prevent screen capture and recording:
```dart
class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  void initState() {
    super.initState();
    FlutterPreventScreenCapture.preventScreenCapture();
  }

  @override
  void dispose() {
    FlutterPreventScreenCapture.allowScreenCapture();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Real Flutter'),
      ),
      body: Center(
        child: Text('Screen capture and recording are prevented'),
      ),
    );
  }
}
```
### Platform-Specific Details

* Android: The package uses the `WindowManager.LayoutParams.FLAG_SECURE` flag to prevent screen capture and recording.
* iOS: The package uses the `UIScreen.main.brightness` property to prevent screen capture and recording.

### Required Configurations or Optimizations

* Android: Add the following code to your `AndroidManifest.xml` file to prevent screen capture and recording:
```xml
<application
  ...
  android:allowBackup="false"
  android:icon="@mipmap/ic_launcher"
  android:label="@string/app_name"
  android:roundIcon="@mipmap/ic_launcher_round"
  android:supportsRtl="true"
  android:theme="@style/AppTheme">
  ...
</application>
```
* iOS: Add the following code to your `Info.plist` file to prevent screen capture and recording:
```xml
<key>UIBackgroundModes</key>
<array>
  <string>audio</string>
</array>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_prevent_screen_capture/flutter_prevent_screen_capture.dart';

void main() {
  runApp(MyApp());
  FlutterPreventScreenCapture.initialize();
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Real Flutter',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  void initState() {
    super.initState();
    // Prevent screen capture and recording when the widget is initialized
    FlutterPreventScreenCapture.preventScreenCapture();
  }

  @override
  void dispose() {
    // Allow screen capture and recording when the widget is disposed
    FlutterPreventScreenCapture.allowScreenCapture();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Real Flutter'),
      ),
      body: Center(
        child: Text('Screen capture and recording are prevented'),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and the `main` function is called.
// 2. The `FlutterPreventScreenCapture.initialize()` function is called to initialize the package.
// 3. The `RealFlutter` widget is created and the `initState` function is called.
// 4. In the `initState` function, the `FlutterPreventScreenCapture.preventScreenCapture()` function is called to prevent screen capture and recording.
// 5. When the user navigates away from the app or closes the app, the `dispose` function is called.
// 6. In the `dispose` function, the `FlutterPreventScreenCapture.allowScreenCapture()` function is called to allow screen capture and recording.
```

<-- END_MAIN -->
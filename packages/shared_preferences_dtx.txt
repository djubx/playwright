<-- START_DESCRIPTION -->

# Shared Preferences DTX Package
================================

The `shared_preferences_dtx` package is a Flutter plugin that allows you to store and retrieve data in a simple and efficient way. It uses the platform's native shared preferences to store data, making it a great option for storing small amounts of data such as user preferences, settings, and cached data.

## When to Use
--------------

You can use the `shared_preferences_dtx` package in the following scenarios:

* Storing user preferences, such as font size, theme, and language.
* Caching data, such as API responses, to improve app performance.
* Storing small amounts of data, such as a user's name and email.

## Features
------------

The `shared_preferences_dtx` package has the following features:

* Simple and easy-to-use API.
* Supports storing and retrieving strings, integers, booleans, and doubles.
* Supports storing and retrieving lists of strings, integers, booleans, and doubles.
* Supports storing and retrieving maps of strings, integers, booleans, and doubles.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
==================

## Step 1: Add the Package to Your Pubspec.yaml File
------------------------------------------------

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter:
    sdk: flutter
  shared_preferences_dtx: ^1.0.0
```
## Step 2: Import the Package
---------------------------

Import the package in your Dart file:
```dart
import 'package:shared_preferences_dtx/shared_preferences_dtx.dart';
```
## Step 3: Initialize the Package
-------------------------------

Initialize the package in your `main` function:
```dart
void main() async {
  await SharedPreferencesDtx.init();
  runApp(MyApp());
}
```
## Step 4: Store and Retrieve Data
---------------------------------

Use the `SharedPreferencesDtx` class to store and retrieve data:
```dart
class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Shared Preferences DTX Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text('Store Data'),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () async {
                await SharedPreferencesDtx.setString('key', 'value');
              },
              child: Text('Store String'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () async {
                final value = await SharedPreferencesDtx.getString('key');
                print(value);
              },
              child: Text('Retrieve String'),
            ),
          ],
        ),
      ),
    );
  }
}
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:shared_preferences_dtx/shared_preferences_dtx.dart';

void main() async {
  await SharedPreferencesDtx.init();
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Shared Preferences DTX Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final _controller = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Shared Preferences DTX Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text('Store Data'),
            SizedBox(height: 20),
            TextField(
              controller: _controller,
              decoration: InputDecoration(
                border: OutlineInputBorder(),
                labelText: 'Enter a value',
              ),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () async {
                // Store the value in shared preferences
                await SharedPreferencesDtx.setString('key', _controller.text);
              },
              child: Text('Store String'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () async {
                // Retrieve the value from shared preferences
                final value = await SharedPreferencesDtx.getString('key');
                print(value);
              },
              child: Text('Retrieve String'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user enters a value in the text field.
// 2. The user clicks the "Store String" button, which stores the value in shared preferences.
// 3. The user clicks the "Retrieve String" button, which retrieves the value from shared preferences and prints it to the console.
// This example demonstrates how to store and retrieve a string value using the shared_preferences_dtx package.
```

<-- END_MAIN -->
```markdown
<-- START_DESCRIPTION -->

# Overview of the `gauge_indicator` Flutter Package

The `gauge_indicator` Flutter package is a versatile and customizable widget that allows developers to create beautiful and interactive gauge indicators in their Flutter applications. This package is particularly useful for applications that require the visualization of data in a circular gauge format, such as dashboards, fitness apps, or any application that needs to display progress or performance metrics.

## Features

- **Customizable Appearance**: Adjust colors, sizes, and styles to fit the design of your application.
- **Interactive**: Supports animations and dynamic updates to reflect real-time data changes.
- **Multiple Gauge Types**: Includes support for radial, linear, and semi-circular gauges.
- **Easy Integration**: Simple API that integrates seamlessly with existing Flutter projects.

## When to Use

- **Performance Dashboards**: Display metrics like CPU usage, memory consumption, or network speed.
- **Fitness Applications**: Show progress towards fitness goals, such as steps taken or calories burned.
- **Educational Tools**: Visualize scores or progress in learning modules.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the `gauge_indicator` Package

In this tutorial, we will walk through the process of setting up and using the `gauge_indicator` package in a Flutter project. We will cover platform-specific configurations for both Android and iOS to ensure smooth integration.

## Setup

1. **Add Dependency**

   First, add the `gauge_indicator` package to your `pubspec.yaml` file:

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     gauge_indicator: ^1.0.0
   ```

2. **Install Packages**

   Run the following command to install the new package:

   ```bash
   flutter pub get
   ```

3. **Import the Package**

   Import the package in your Dart file where you plan to use the gauge:

   ```dart
   import 'package:gauge_indicator/gauge_indicator.dart';
   ```

## Platform-Specific Configurations

### Android

Ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```gradle
android {
    defaultConfig {
        minSdkVersion 21
    }
}
```

### iOS

For iOS, ensure that your `Podfile` is using platform version 9.0 or higher:

```ruby
platform :ios, '9.0'
```

## Using the Package

To use the `gauge_indicator` package, you can create a gauge widget and customize it according to your needs. Here is a simple example:

```dart
RealFlutter(
  value: 75,
  minValue: 0,
  maxValue: 100,
  gaugeType: GaugeType.radial,
  color: Colors.blue,
  animationDuration: Duration(seconds: 1),
)
```

This code snippet creates a radial gauge that displays a value of 75 out of 100, with a blue color and a smooth animation.

<-- END_TUTORIAL -->

<-- START_MAIN -->

# Complete Example: Flutter Main File with `gauge_indicator`

Below is a complete example of a Flutter application using the `gauge_indicator` package. This example demonstrates how to set up and display a gauge indicator with various features.

```dart
import 'package:flutter/material.dart';
import 'package:gauge_indicator/gauge_indicator.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Gauge Indicator Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: GaugeDemoPage(),
    );
  }
}

class GaugeDemoPage extends StatefulWidget {
  @override
  _GaugeDemoPageState createState() => _GaugeDemoPageState();
}

class _GaugeDemoPageState extends State<GaugeDemoPage> {
  double _currentValue = 50.0;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Gauge Indicator Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            // Create a radial gauge with dynamic value
            RealFlutter(
              value: _currentValue,
              minValue: 0,
              maxValue: 100,
              gaugeType: GaugeType.radial,
              color: Colors.green,
              animationDuration: Duration(milliseconds: 500),
            ),
            SizedBox(height: 20),
            // Slider to change the gauge value
            Slider(
              value: _currentValue,
              min: 0,
              max: 100,
              divisions: 100,
              label: _currentValue.round().toString(),
              onChanged: (double value) {
                setState(() {
                  _currentValue = value;
                });
              },
            ),
          ],
        ),
      ),
    );
  }
}
```

// The application starts by running the `MyApp` class, which sets up the MaterialApp.
// The `GaugeDemoPage` is the main screen, displaying a radial gauge and a slider.
// The gauge is created using the `RealFlutter` widget, with a dynamic value that updates based on the slider.
// The slider allows users to change the gauge's value, demonstrating real-time updates and animations.
// The `setState` method is used to update the gauge value whenever the slider is moved, triggering a rebuild of the widget tree.

<-- END_MAIN -->
```
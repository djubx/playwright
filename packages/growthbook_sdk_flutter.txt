<-- START_DESCRIPTION -->

# Growthbook SDK Flutter Package
=====================================

The `growthbook_sdk_flutter` package is a Flutter wrapper for the Growthbook SDK, which provides a simple and efficient way to integrate Growthbook's feature flagging and A/B testing capabilities into your Flutter application.

## When to Use This Package
---------------------------

This package is ideal for developers who want to integrate Growthbook's feature flagging and A/B testing capabilities into their Flutter application. It provides a simple and efficient way to manage feature flags and run A/B tests, allowing you to optimize your application's user experience and improve its overall performance.

## Features
------------

*   Feature flagging: Easily manage feature flags and toggle them on or off for specific user segments.
*   A/B testing: Run A/B tests to compare the performance of different versions of your application and determine which one performs better.
*   User segmentation: Segment your users based on various criteria, such as demographics, behavior, and preferences.
*   Real-time analytics: Get real-time insights into your application's performance and user behavior.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Growthbook SDK Flutter Package
----------------------------------------------

To set up the `growthbook_sdk_flutter` package, follow these steps:

### Step 1: Add the Package to Your pubspec.yaml File

Add the following line to your `pubspec.yaml` file:

```yml
dependencies:
  growthbook_sdk_flutter: ^1.0.0
```

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:growthbook_sdk_flutter/growthbook_sdk_flutter.dart';
```

### Step 3: Initialize the Growthbook SDK

Initialize the Growthbook SDK with your API key:

```dart
GrowthbookSDK.initialize('YOUR_API_KEY');
```

### Step 4: Configure the Growthbook SDK

Configure the Growthbook SDK with your desired settings:

```dart
GrowthbookSDK.setLogLevel(LogLevel.debug);
GrowthbookSDK.setEnableAnalytics(true);
```

### Platform-Specific Details

*   Android: Make sure to add the following line to your `AndroidManifest.xml` file:

    ```xml
<application>
  ...
  <meta-data android:name="growthbook.api_key" android:value="YOUR_API_KEY" />
</application>
```
*   iOS: Make sure to add the following line to your `Info.plist` file:

    ```xml
<key>growthbook.api_key</key>
<string>YOUR_API_KEY</string>
```

### Required Configurations and Optimizations

*   Make sure to replace `YOUR_API_KEY` with your actual Growthbook API key.
*   Configure the Growthbook SDK with your desired settings, such as log level and analytics enabled.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:growthbook_sdk_flutter/growthbook_sdk_flutter.dart';

void main() {
  // Initialize the Growthbook SDK with your API key
  GrowthbookSDK.initialize('YOUR_API_KEY');

  // Configure the Growthbook SDK with your desired settings
  GrowthbookSDK.setLogLevel(LogLevel.debug);
  GrowthbookSDK.setEnableAnalytics(true);

  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Growthbook SDK Flutter Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  // Feature flag to toggle the visibility of the button
  bool _buttonVisible = false;

  @override
  void initState() {
    super.initState();

    // Get the feature flag value from the Growthbook SDK
    GrowthbookSDK.getFeatureFlag('button_visible').then((value) {
      setState(() {
        _buttonVisible = value;
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Growthbook SDK Flutter Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            // Button to trigger an A/B test
            ElevatedButton(
              onPressed: () {
                // Run an A/B test to determine which version of the button to display
                GrowthbookSDK.runExperiment('button_experiment').then((value) {
                  if (value == 'version_a') {
                    // Display version A of the button
                    print('Displaying version A of the button');
                  } else if (value == 'version_b') {
                    // Display version B of the button
                    print('Displaying version B of the button');
                  }
                });
              },
              child: Text('Trigger A/B Test'),
            ),
            // Button to toggle the visibility of the feature flag
            ElevatedButton(
              onPressed: () {
                // Toggle the feature flag value
                GrowthbookSDK.setFeatureFlag('button_visible', !_buttonVisible);
                setState(() {
                  _buttonVisible = !_buttonVisible;
                });
              },
              child: Text('Toggle Feature Flag'),
            ),
            // Button to display the feature flag value
            ElevatedButton(
              onPressed: () {
                // Get the feature flag value from the Growthbook SDK
                GrowthbookSDK.getFeatureFlag('button_visible').then((value) {
                  print('Feature flag value: $value');
                });
              },
              child: Text('Display Feature Flag Value'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user initializes the Growthbook SDK with their API key.
// 2. The user configures the Growthbook SDK with their desired settings.
// 3. The user runs an A/B test to determine which version of the button to display.
// 4. The user toggles the feature flag value to change the visibility of the button.
// 5. The user displays the feature flag value to verify its current state.

// The code flow is as follows:
// 1. The `main` function initializes the Growthbook SDK and configures it with the desired settings.
// 2. The `MyApp` widget builds the application UI.
// 3. The `MyHomePage` widget displays the feature flag value and allows the user to toggle it.
// 4. The `ElevatedButton` widgets trigger the A/B test and toggle the feature flag value.
// 5. The `GrowthbookSDK` class provides the functionality for running A/B tests and managing feature flags.
```

<-- END_MAIN -->
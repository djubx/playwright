```markdown
<!-- START_DESCRIPTION -->
# Age Calculator Flutter Package

The **age_calculator** Flutter package is a simple yet powerful tool designed to calculate the age of a person based on their date of birth. This package is particularly useful in applications where age verification is necessary, such as in health apps, social media platforms, or any service that requires age-related functionality.

## When to Use This Package
- **User Registration**: To verify if a user meets the age requirements for signing up.
- **Health Applications**: To calculate age for health-related assessments or recommendations.
- **Event Management**: To determine eligibility for age-restricted events or services.

## Features
- **Simple API**: Easy to use with a straightforward interface.
- **Date Calculations**: Accurately calculates age in years, months, and days.
- **Leap Year Handling**: Correctly accounts for leap years in age calculations.
- **Customizable**: Allows for various date formats and can be easily integrated into existing applications.

With these features, the age_calculator package provides a robust solution for any Flutter application requiring age calculations.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Tutorial: Setting Up the Age Calculator Package

## Step 1: Adding the Dependency
To use the age_calculator package, you first need to add it to your Flutter project. Open your `pubspec.yaml` file and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  age_calculator: ^2.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command in your terminal to install it:

```bash
flutter pub get
```

## Step 2: Importing the Package
In your Dart file where you want to use the age calculator, import the package:

```dart
import 'package:age_calculator/age_calculator.dart';
```

## Step 3: Using the Package
You can now use the package to calculate age. Hereâ€™s a simple example of how to do this:

```dart
void main() {
  // Define a date of birth
  DateTime birthDate = DateTime(1990, 5, 15);
  
  // Calculate age
  AgeDuration age = AgeCalculator.age(birthDate);
  
  // Print the age
  print('Age: ${age.years} years, ${age.months} months, and ${age.days} days');
}
```

## Platform-Specific Details
### Android
For Android, ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file:

```gradle
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
        ...
    }
}
```

### iOS
For iOS, make sure to set the deployment target in your `ios/Podfile`:

```ruby
platform :ios, '10.0'
```

## Optimizations
- **Performance**: The package is lightweight and optimized for performance, making it suitable for applications with high user interaction.
- **Error Handling**: Implement error handling to manage invalid date inputs gracefully.

With these steps, you should be able to set up and use the age_calculator package in your Flutter application seamlessly.

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of Age Calculator in Flutter

```dart
import 'package:flutter/material.dart';
import 'package:age_calculator/age_calculator.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Age Calculator',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: AgeCalculatorScreen(),
    );
  }
}

class AgeCalculatorScreen extends StatefulWidget {
  @override
  _AgeCalculatorScreenState createState() => _AgeCalculatorScreenState();
}

class _AgeCalculatorScreenState extends State<AgeCalculatorScreen> {
  DateTime? _selectedDate; // Variable to hold the selected date
  String _ageResult = ''; // Variable to hold the age result

  // Function to pick a date
  Future<void> _pickDate(BuildContext context) async {
    final DateTime? picked = await showDatePicker(
      context: context,
      initialDate: _selectedDate ?? DateTime.now(),
      firstDate: DateTime(1900),
      lastDate: DateTime.now(),
    );
    if (picked != null && picked != _selectedDate) {
      setState(() {
        _selectedDate = picked; // Update the selected date
        _calculateAge(); // Calculate age whenever a new date is picked
      });
    }
  }

  // Function to calculate age
  void _calculateAge() {
    if (_selectedDate != null) {
      AgeDuration age = AgeCalculator.age(_selectedDate!); // Calculate age
      setState(() {
        _ageResult = 'Age: ${age.years} years, ${age.months} months, and ${age.days} days'; // Update the age result
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Age Calculator'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Select your date of birth:',
              style: TextStyle(fontSize: 20),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () => _pickDate(context), // Open date picker
              child: Text('Pick Date'),
            ),
            SizedBox(height: 20),
            Text(
              _ageResult, // Display the age result
              style: TextStyle(fontSize: 24),
            ),
          ],
        ),
      ),
    );
  }
}
```

```
// The above code is a complete Flutter application that demonstrates the use of the age_calculator package.
// 
// 1. **Main Function**: The entry point of the application, which runs the MyApp widget.
// 2. **MyApp Widget**: A StatelessWidget that sets up the MaterialApp with a title and theme.
// 3. **AgeCalculatorScreen Widget**: A StatefulWidget that manages the state of the age calculation.
// 4. **State Variables**:
//    - `_selectedDate`: Holds the date selected by the user.
//    - `_ageResult`: Holds the result of the age calculation.
// 5. **_pickDate Function**: Opens a date picker for the user to select their date of birth. It updates the state with the selected date and calls `_calculateAge`.
// 6. **_calculateAge Function**: Calculates the age using the selected date and updates the `_ageResult` state variable.
// 7. **build Method**: Constructs the UI, including a button to pick a date and a text widget to display the calculated age.
// 
// The application flow is straightforward: the user taps the "Pick Date" button, selects their date of birth, and the app calculates and displays their age in years, months, and days.
```
<!-- END_MAIN -->
```
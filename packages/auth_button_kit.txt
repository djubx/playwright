<-- START_DESCRIPTION -->

# auth_button_kit Flutter Package
=====================================

The `auth_button_kit` Flutter package provides a simple and customizable way to add authentication buttons to your Flutter app. It supports various authentication providers, including Google, Facebook, Apple, and more.

### When to Use This Package

This package is ideal for apps that require user authentication, such as social media apps, e-commerce apps, and more. It simplifies the authentication process and provides a seamless user experience.

### Features

*   Supports multiple authentication providers (Google, Facebook, Apple, etc.)
*   Customizable button styles and layouts
*   Easy integration with existing Flutter apps
*   Platform-specific optimizations for Android and iOS

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using auth_button_kit
=============================================

### Step 1: Add the Package to Your pubspec.yaml File

```yml
dependencies:
  auth_button_kit: ^1.0.0
```

### Step 2: Import the Package in Your Dart File

```dart
import 'package:auth_button_kit/auth_button_kit.dart';
```

### Step 3: Create an AuthButton Instance

```dart
AuthButton(
  onPressed: () async {
    // Handle authentication logic here
  },
  provider: AuthProvider.google,
)
```

### Platform-Specific Configurations

#### Android

Add the following to your `AndroidManifest.xml` file:

```xml
<uses-permission android:name="android.permission.INTERNET" />
```

#### iOS

Add the following to your `Info.plist` file:

```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```

### Optimizations

For optimal performance, ensure that you handle authentication logic in a separate isolate or thread to avoid blocking the main thread.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:auth_button_kit/auth_button_kit.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Step 1: Create a scaffold with a centered column
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              // Step 2: Add a Google authentication button
              AuthButton(
                onPressed: () async {
                  // Handle Google authentication logic here
                  print('Google authentication button pressed');
                },
                provider: AuthProvider.google,
              ),
              SizedBox(height: 20),
              // Step 3: Add a Facebook authentication button
              AuthButton(
                onPressed: () async {
                  // Handle Facebook authentication logic here
                  print('Facebook authentication button pressed');
                },
                provider: AuthProvider.facebook,
              ),
              SizedBox(height: 20),
              // Step 4: Add an Apple authentication button
              AuthButton(
                onPressed: () async {
                  // Handle Apple authentication logic here
                  print('Apple authentication button pressed');
                },
                provider: AuthProvider.apple,
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Application flow explanation:
// 1. The user opens the app and is presented with a centered column containing three authentication buttons.
// 2. The user clicks on one of the authentication buttons, triggering the corresponding authentication logic.
// 3. The authentication logic is handled in a separate isolate or thread to avoid blocking the main thread.
// 4. Once the authentication logic is complete, the user is redirected to the next screen or presented with an error message.

// Summary: This code creates a simple authentication screen with three authentication buttons (Google, Facebook, and Apple). Each button triggers the corresponding authentication logic when pressed.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Flutter Image Processing Package
=====================================

The `flutter_image_processing` package is a powerful tool for image processing in Flutter applications. It provides a wide range of features for manipulating images, including resizing, cropping, rotating, and applying filters.

When to Use This Package
------------------------

This package is ideal for applications that require image processing, such as:

* Image editing apps
* Social media apps that allow users to upload and edit images
* E-commerce apps that require image processing for product images

Features
--------

* Resize images
* Crop images
* Rotate images
* Apply filters (e.g. grayscale, sepia)
* Adjust image brightness, contrast, and saturation

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `flutter_image_processing` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_image_processing: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:flutter_image_processing/flutter_image_processing.dart';
```
### Step 3: Configure Platform-Specific Settings

#### Android

Add the following lines to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
```
#### iOS

Add the following lines to your `Info.plist` file:
```xml
<key>NSPhotoLibraryUsageDescription</key>
<string>This app needs access to your photo library to process images.</string>
```
### Step 4: Optimize Image Processing

To optimize image processing, you can use the `ImageProcessingOptions` class to specify the image processing settings. For example:
```dart
ImageProcessingOptions options = ImageProcessingOptions(
  resize: ResizeOptions(width: 800, height: 600),
  crop: CropOptions(x: 100, y: 100, width: 300, height: 300),
);
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_image_processing/flutter_image_processing.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Image Processing Demo',
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  File _image;

  Future<void> _processImage() async {
    // Step 1: Load the image
    _image = await ImagePicker.pickImage(source: ImageSource.gallery);

    // Step 2: Resize the image
    ImageProcessingOptions options = ImageProcessingOptions(
      resize: ResizeOptions(width: 800, height: 600),
    );
    _image = await FlutterImageProcessing.processImage(_image, options);

    // Step 3: Crop the image
    options = ImageProcessingOptions(
      crop: CropOptions(x: 100, y: 100, width: 300, height: 300),
    );
    _image = await FlutterImageProcessing.processImage(_image, options);

    // Step 4: Apply a filter
    options = ImageProcessingOptions(
      filter: FilterOptions(type: FilterType.grayscale),
    );
    _image = await FlutterImageProcessing.processImage(_image, options);

    // Step 5: Display the processed image
    setState(() {});
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Image Processing Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            _image != null
                ? Image.file(_image)
                : Text('No image selected'),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _processImage,
              child: Text('Process Image'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user selects an image from the gallery.
// 2. The image is resized to 800x600 pixels.
// 3. The image is cropped to a 300x300 pixel region starting from (100, 100).
// 4. A grayscale filter is applied to the image.
// 5. The processed image is displayed on the screen.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Table Sticky Headers Flutter Package
=====================================

The `table_sticky_headers` Flutter package provides a widget that allows you to create tables with sticky headers. This package is useful when you need to display large amounts of data in a table format, and you want the headers to remain visible even when the user scrolls down.

### Features

*   Supports both vertical and horizontal scrolling
*   Allows you to customize the appearance of the headers and the table cells
*   Works well with large datasets

### When to Use This Package

You should use this package when you need to display data in a table format, and you want the headers to remain visible even when the user scrolls down. This package is particularly useful when working with large datasets.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

## Setup

To use the `table_sticky_headers` package, you need to add it to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  table_sticky_headers: ^1.0.0
```

Then, run `flutter pub get` to get the package.

## Basic Usage

To use the package, you need to import it:

```dart
import 'package:table_sticky_headers/table_sticky_headers.dart';
```

Then, you can use the `StickyHeadersTable` widget to create a table with sticky headers:

```dart
StickyHeadersTable(
  columnsLength: 3,
  rowsLength: 10,
  titleColumnAlignment: Alignment.center,
  cellDimensions: CellDimensions(
    contentCellHeight: 30,
    contentCellWidth: 100,
    stickyLegendHeight: 50,
    stickyLegendWidth: 150,
  ),
  titleTopAlignment: Alignment.topCenter,
  titleBottomAlignment: Alignment.bottomCenter,
  titleLeftAlignment: Alignment.centerLeft,
  titleRightAlignment: Alignment.centerRight,
  titleBuilder: (i) => Text('Column $i'),
  contentCellBuilder: (i, j) => Text('Cell $i $j'),
);
```

## Platform-Specific Details

The `table_sticky_headers` package works well on both Android and iOS platforms. However, you may need to adjust the appearance of the table to fit your specific needs.

### Android

On Android, you can use the `Material` widget to give the table a material design look:

```dart
Material(
  child: StickyHeadersTable(
    // ...
  ),
)
```

### iOS

On iOS, you can use the `Cupertino` widget to give the table a Cupertino look:

```dart
CupertinoPageScaffold(
  child: StickyHeadersTable(
    // ...
  ),
)
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:table_sticky_headers/table_sticky_headers.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Table Sticky Headers Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Table Sticky Headers Demo'),
      ),
      body: StickyHeadersTable(
        columnsLength: 3,
        rowsLength: 10,
        titleColumnAlignment: Alignment.center,
        cellDimensions: CellDimensions(
          contentCellHeight: 30,
          contentCellWidth: 100,
          stickyLegendHeight: 50,
          stickyLegendWidth: 150,
        ),
        titleTopAlignment: Alignment.topCenter,
        titleBottomAlignment: Alignment.bottomCenter,
        titleLeftAlignment: Alignment.centerLeft,
        titleRightAlignment: Alignment.centerRight,
        titleBuilder: (i) => Text('Column $i'),
        contentCellBuilder: (i, j) => Text('Cell $i $j'),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app.
// 2. The app displays a table with sticky headers.
// 3. The user can scroll the table horizontally and vertically.
// 4. The sticky headers remain visible even when the user scrolls down.
// 5. The user can see the data in the table cells.
```

// The code above creates a Flutter app that displays a table with sticky headers.
// The table has 3 columns and 10 rows.
// The user can scroll the table horizontally and vertically.
// The sticky headers remain visible even when the user scrolls down.
// The user can see the data in the table cells.

<-- END_MAIN -->
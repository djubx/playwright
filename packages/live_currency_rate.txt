<-- START_DESCRIPTION -->

# Live Currency Rate Flutter Package
The `live_currency_rate` Flutter package provides a simple and efficient way to fetch and display live currency exchange rates in your Flutter application. This package is ideal for applications that require real-time currency conversions, such as financial apps, e-commerce platforms, and travel guides.

## Key Features

* Fetches live currency exchange rates from a reliable data source
* Supports over 150 currencies
* Easy to use and integrate into your Flutter application
* Provides a simple and intuitive API for fetching and displaying currency rates

## When to Use This Package

* When you need to display live currency exchange rates in your application
* When you want to provide users with real-time currency conversions
* When you need a simple and efficient way to fetch and display currency rates

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package

To use the `live_currency_rate` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  flutter:
    sdk: flutter
  live_currency_rate: ^1.0.0
```
2. Run `flutter pub get` to install the package.
3. Import the package in your Dart file:
```dart
import 'package:live_currency_rate/live_currency_rate.dart';
```
## Platform-Specific Details

* For Android, add the following permission to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.INTERNET" />
```
* For iOS, add the following line to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```
## Using the Package

To fetch and display live currency exchange rates, use the `LiveCurrencyRate` class:
```dart
LiveCurrencyRate liveCurrencyRate = LiveCurrencyRate();
liveCurrencyRate.fetchRates().then((rates) {
  // Display the rates
});
```
You can also specify the currencies you want to fetch rates for:
```dart
liveCurrencyRate.fetchRates(currencies: ['USD', 'EUR', 'GBP']).then((rates) {
  // Display the rates
});
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:live_currency_rate/live_currency_rate.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  LiveCurrencyRate liveCurrencyRate;
  Map<String, double> rates;

  @override
  void initState() {
    super.initState();
    liveCurrencyRate = LiveCurrencyRate();
    fetchRates();
  }

  void fetchRates() {
    liveCurrencyRate.fetchRates(currencies: ['USD', 'EUR', 'GBP']).then((rates) {
      setState(() {
        this.rates = rates;
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Live Currency Rates'),
        ),
        body: rates != null
            ? ListView.builder(
                itemCount: rates.length,
                itemBuilder: (context, index) {
                  String currency = rates.keys.elementAt(index);
                  double rate = rates.values.elementAt(index);
                  return ListTile(
                    title: Text(currency),
                    subtitle: Text('1 USD = $rate $currency'),
                  );
                },
              )
            : Center(
                child: CircularProgressIndicator(),
              ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the application.
// 2. The `RealFlutter` widget is created and initialized.
// 3. The `fetchRates` method is called to fetch the live currency exchange rates.
// 4. The rates are fetched and stored in the `rates` map.
// 5. The `build` method is called to build the UI.
// 6. The UI displays a list of currencies and their corresponding exchange rates.
// 7. The user can refresh the rates by calling the `fetchRates` method again.

// In summary, the code flows as follows:
// - The application is initialized and the `fetchRates` method is called.
// - The rates are fetched and stored in the `rates` map.
// - The UI is built and displays the list of currencies and their exchange rates.
// - The user can refresh the rates by calling the `fetchRates` method again.
```

<-- END_MAIN -->
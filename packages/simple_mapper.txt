```markdown
<!-- START_DESCRIPTION -->
# Simple Mapper: A Flutter Package for Easy Data Mapping

The **simple_mapper** package is a powerful tool designed for Flutter developers who need to map data between different models seamlessly. It simplifies the process of converting data from one format to another, making it particularly useful in scenarios where you are dealing with APIs or databases that return data in a different structure than your application models.

## When to Use Simple Mapper
- **API Integration**: When fetching data from RESTful APIs that return JSON objects, you can use simple_mapper to convert these objects into Dart models.
- **Data Transformation**: If you need to transform data from one model to another, such as when working with different versions of an API or when integrating with legacy systems.
- **Simplifying Code**: To reduce boilerplate code associated with manual data mapping, making your code cleaner and more maintainable.

## Key Features
- **Automatic Mapping**: Automatically maps fields between source and destination models based on naming conventions.
- **Custom Mapping**: Allows for custom mapping logic when automatic mapping is not sufficient.
- **Type Safety**: Ensures type safety during the mapping process, reducing runtime errors.
- **Support for Nested Objects**: Handles nested objects and collections, making it versatile for complex data structures.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Simple Mapper

## Installation
To add the simple_mapper package to your Flutter project, include it in your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  simple_mapper: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command to install it:

```bash
flutter pub get
```

## Platform-Specific Details
### Android
No additional configuration is required for Android. Just ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file.

### iOS
For iOS, ensure that you have the correct permissions set in your `Info.plist` if you are accessing any external data sources.

## Basic Usage
To use simple_mapper, you need to define your source and destination models. Hereâ€™s a quick example:

```dart
import 'package:simple_mapper/simple_mapper.dart';

class User {
  String name;
  int age;

  User({required this.name, required this.age});
}

class UserDTO {
  String fullName;
  int yearsOld;

  UserDTO({required this.fullName, required this.yearsOld});
}

// Mapping configuration
@Mapper()
abstract class UserMapper {
  UserDTO toDTO(User user);
  User fromDTO(UserDTO userDTO);
}
```

In this example, we define two classes, `User` and `UserDTO`, and a mapper interface that specifies how to convert between them.

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of Simple Mapper in Action

```dart
import 'package:flutter/material.dart';
import 'package:simple_mapper/simple_mapper.dart';

// Define the User model
class User {
  String name;
  int age;

  User({required this.name, required this.age});
}

// Define the UserDTO model
class UserDTO {
  String fullName;
  int yearsOld;

  UserDTO({required this.fullName, required this.yearsOld});
}

// Create a mapper for User and UserDTO
@Mapper()
abstract class UserMapper {
  UserDTO toDTO(User user); // Method to map User to UserDTO
  User fromDTO(UserDTO userDTO); // Method to map UserDTO to User
}

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Simple Mapper Example',
      home: UserScreen(),
    );
  }
}

class UserScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Create a User instance
    User user = User(name: 'John Doe', age: 30);
    
    // Map User to UserDTO
    UserDTO userDTO = UserMapper().toDTO(user);
    
    return Scaffold(
      appBar: AppBar(
        title: Text('User Mapper Example'),
      ),
      body: Center(
        child: Text('User DTO: ${userDTO.fullName}, Age: ${userDTO.yearsOld}'),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The application starts with the main() function, which runs the MyApp widget.
// 2. MyApp builds a MaterialApp with a title and sets UserScreen as the home widget.
// 3. In UserScreen, a User object is created with a name and age.
// 4. The User object is then mapped to a UserDTO using the UserMapper.
// 5. Finally, the UserDTO's properties are displayed in the center of the screen.
```
<!-- END_MAIN -->
```

### Summary
In this blog post, we explored the **simple_mapper** package, which simplifies data mapping in Flutter applications. We covered its installation, usage, and provided a complete example demonstrating how to map between two models. The application flow was explained step-by-step through comments in the code, making it easy to understand how the package works in practice. This package is particularly useful for developers looking to streamline their data handling processes, especially when dealing with APIs or complex data structures.
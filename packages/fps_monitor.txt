<-- START_DESCRIPTION -->

# FPS Monitor Package for Flutter
=====================================

The `fps_monitor` package is a useful tool for monitoring the frames per second (FPS) of your Flutter application. It provides a simple and efficient way to track the performance of your app, helping you identify potential issues and optimize the user experience.

### When to Use This Package

You should use the `fps_monitor` package in the following scenarios:

* When you want to monitor the FPS of your app in real-time.
* When you need to identify performance bottlenecks in your app.
* When you want to optimize the user experience by ensuring smooth animations and transitions.

### Features

The `fps_monitor` package provides the following features:

* Real-time FPS monitoring.
* Customizable FPS threshold.
* Support for both Android and iOS platforms.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the FPS Monitor Package
=====================================

To use the `fps_monitor` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  fps_monitor: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:fps_monitor/fps_monitor.dart';
```
### Step 3: Initialize the FPS Monitor

Initialize the FPS monitor in your `main` function:
```dart
void main() {
  FpsMonitor.init();
  runApp(MyApp());
}
```
### Platform-Specific Configurations

#### Android

To use the `fps_monitor` package on Android, you need to add the following permission to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.SYSTEM_ALERT_WINDOW" />
```
#### iOS

To use the `fps_monitor` package on iOS, you need to add the following line to your `Info.plist` file:
```xml
<key>UIBackgroundModes</key>
<array>
  <string>processing</string>
</array>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:fps_monitor/fps_monitor.dart';

void main() {
  FpsMonitor.init();
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  int _fps = 0;

  @override
  void initState() {
    super.initState();
    FpsMonitor.addListener((fps) {
      setState(() {
        _fps = fps;
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('FPS Monitor Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Text(
                'FPS: $_fps',
                style: TextStyle(fontSize: 24),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  FpsMonitor.start();
                },
                child: Text('Start Monitoring'),
              ),
              SizedBox(height: 10),
              ElevatedButton(
                onPressed: () {
                  FpsMonitor.stop();
                },
                child: Text('Stop Monitoring'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user starts the app, and the `FpsMonitor` is initialized in the `main` function.
// 2. The user navigates to the home screen, where the current FPS is displayed.
// 3. The user can start monitoring the FPS by pressing the "Start Monitoring" button.
// 4. The `FpsMonitor` starts tracking the FPS and updates the display in real-time.
// 5. The user can stop monitoring the FPS by pressing the "Stop Monitoring" button.
// 6. The `FpsMonitor` stops tracking the FPS, and the display is no longer updated.

// In summary, this code demonstrates how to use the `fps_monitor` package to track the FPS of a Flutter app in real-time.
```

<-- END_MAIN -->
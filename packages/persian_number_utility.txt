Here's a detailed technical blog on the "persian_number_utility" Flutter package, structured as requested.

<!-- START_DESCRIPTION -->
# Persian Number Utility Flutter Package

The `persian_number_utility` Flutter package is designed to facilitate the conversion and formatting of numbers in Persian (Farsi) language. This package is particularly useful for developers building applications targeting Persian-speaking audiences, as it allows for seamless integration of Persian numeral systems into Flutter applications.

## When to Use This Package

You should consider using the `persian_number_utility` package in scenarios such as:

- **Localization**: When developing applications that require localization for Persian-speaking users.
- **Financial Applications**: For apps that display monetary values in Persian numerals.
- **Educational Tools**: When creating educational applications that teach Persian language or mathematics.

## Features

- **Number Conversion**: Convert Arabic numerals to Persian numerals and vice versa.
- **Formatting**: Format numbers according to Persian language conventions.
- **Easy Integration**: Simple API that can be easily integrated into any Flutter application.

## Example Use Cases

1. **Displaying Prices**: In an e-commerce app, you can display product prices in Persian numerals.
2. **User Input**: Allow users to input numbers in Persian format and convert them for processing.
3. **Reports and Analytics**: Generate reports that present numerical data in a culturally relevant format.

By leveraging the `persian_number_utility` package, developers can enhance user experience and ensure that their applications resonate with Persian-speaking users.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Persian Number Utility Package

## Step 1: Adding the Dependency

To get started, you need to add the `persian_number_utility` package to your Flutter project. Open your `pubspec.yaml` file and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  persian_number_utility: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command in your terminal to install it:

```bash
flutter pub get
```

## Step 2: Platform-Specific Configuration

### Android

For Android, ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
        ...
    }
}
```

### iOS

For iOS, you may need to ensure that your deployment target is set to at least 10.0 in your `ios/Podfile`:

```ruby
platform :ios, '10.0'
```

## Step 3: Using the Package

Now that you have set up the package, you can start using it in your Flutter application. Here’s a simple example of how to convert numbers:

```dart
import 'package:flutter/material.dart';
import 'package:persian_number_utility/persian_number_utility.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Persian Number Utility Example')),
        body: Center(
          child: Text(
            '1234 in Persian is: ${'1234'.toPersianDigit()}',
            style: TextStyle(fontSize: 24),
          ),
        ),
      ),
    );
  }
}
```

In this example, we import the package and use the `toPersianDigit()` method to convert the number `1234` into its Persian equivalent.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example: Persian Number Utility in Action

```dart
import 'package:flutter/material.dart';
import 'package:persian_number_utility/persian_number_utility.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Persian Number Utility Demo',
      home: NumberConversionScreen(),
    );
  }
}

class NumberConversionScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Persian Number Utility'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            // Displaying the original number
            Text(
              'Original Number: 1234',
              style: TextStyle(fontSize: 24),
            ),
            SizedBox(height: 20),
            // Displaying the converted Persian number
            Text(
              'Converted to Persian: ${'1234'.toPersianDigit()}',
              style: TextStyle(fontSize: 24),
            ),
            SizedBox(height: 20),
            // Displaying the conversion back to Arabic
            Text(
              'Converted back to Arabic: ${'۱۲۳۴'.toEnglishDigit()}',
              style: TextStyle(fontSize: 24),
            ),
          ],
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function initializes the Flutter app by calling runApp() with MyApp().
// 2. MyApp is a StatelessWidget that builds the MaterialApp and sets the home to NumberConversionScreen.
// 3. NumberConversionScreen is another StatelessWidget that builds the UI.
// 4. The UI consists of a Scaffold with an AppBar and a Center widget containing a Column.
// 5. The Column displays the original number, the converted Persian number, and the conversion back to Arabic.
// 6. The conversion methods toPersianDigit() and toEnglishDigit() are used to demonstrate the functionality of the package.
```
<!-- END_MAIN -->

In this blog, we explored the `persian_number_utility` Flutter package, detailing its features, setup process, and providing a complete example. This package is a valuable tool for developers looking to enhance their applications for Persian-speaking users, ensuring that numerical data is presented in a culturally relevant manner.
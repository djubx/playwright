<-- START_DESCRIPTION -->

# Easy Signature Pad
The easy_signature_pad package is a Flutter library that allows users to create and capture signatures on a canvas. It provides a simple and intuitive way to collect signatures from users, making it a useful tool for various applications, such as digital contracts, receipts, and more.

## Key Features

*   Simple and intuitive API
*   Customizable signature pad
*   Support for various stroke widths and colors
*   Ability to save signatures as images

## When to Use

The easy_signature_pad package is ideal for applications that require users to provide signatures, such as:

*   Digital contracts and agreements
*   Receipts and invoices
*   Medical records and prescriptions
*   Financial transactions and documents

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage

To use the easy_signature_pad package, follow these steps:

1.  Add the package to your pubspec.yaml file:

    ```yml
dependencies:
  flutter:
    sdk: flutter
  easy_signature_pad: ^1.2.0
```

2.  Run `flutter pub get` to install the package.
3.  Import the package in your Dart file:

    ```dart
import 'package:easy_signature_pad/easy_signature_pad.dart';
```

4.  Create a `SignaturePad` widget and pass a `SignaturePadController` to it:

    ```dart
SignaturePadController _controller = SignaturePadController();

SignaturePad(
  controller: _controller,
  height: 200,
  width: 300,
  strokeWidth: 5,
  strokeColor: Colors.black,
  backgroundColor: Colors.white,
)
```

5.  To save the signature as an image, use the `toImage` method of the `SignaturePadController`:

    ```dart
Uint8List signatureBytes = await _controller.toImage();
```

### Platform-Specific Details

*   **Android:** No additional configuration is required.
*   **iOS:** Add the following lines to your Info.plist file to enable the signature pad:

    ```xml
<key>NSPhotoLibraryUsageDescription</key>
<string>This app needs access to the photo library to save signatures.</string>
```

### Optimizations

*   To improve performance, consider reducing the stroke width or using a simpler stroke color.
*   To reduce memory usage, consider saving the signature as a JPEG image instead of a PNG.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'dart:typed_data';
import 'package:flutter/material.dart';
import 'package:easy_signature_pad/easy_signature_pad.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Signature Pad Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: SignaturePadDemo(),
    );
  }
}

class SignaturePadDemo extends StatefulWidget {
  @override
  _SignaturePadDemoState createState() => _SignaturePadDemoState();
}

class _SignaturePadDemoState extends State<SignaturePadDemo> {
  SignaturePadController _controller = SignaturePadController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Signature Pad Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            // Create a SignaturePad widget with a custom height and width
            SignaturePad(
              controller: _controller,
              height: 200,
              width: 300,
              strokeWidth: 5,
              strokeColor: Colors.black,
              backgroundColor: Colors.white,
            ),
            SizedBox(height: 20),
            // Create a button to save the signature as an image
            ElevatedButton(
              onPressed: () async {
                // Use the toImage method to save the signature as an image
                Uint8List signatureBytes = await _controller.toImage();
                // Show a snackbar with the saved image
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Image.memory(signatureBytes),
                  ),
                );
              },
              child: Text('Save Signature'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and is presented with a signature pad.
// 2. The user signs on the pad using their finger or a stylus.
// 3. When the user clicks the "Save Signature" button, the app saves the signature as an image.
// 4. The saved image is then displayed in a snackbar.
// This flow demonstrates how to use the easy_signature_pad package to capture and save signatures.

```

<-- END_MAIN -->
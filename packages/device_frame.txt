<-- START_DESCRIPTION -->

# Device Frame Package in Flutter
=====================================

The `device_frame` package in Flutter is a powerful tool for developers to wrap their app's UI with a device frame. This package provides a simple way to add a device frame to your app, making it easier to visualize and test your app's UI on different devices.

## When to Use This Package
---------------------------

You can use this package in various scenarios, such as:

*   Creating demo or promotional materials for your app
*   Testing and debugging your app's UI on different devices
*   Creating a preview of your app's UI for stakeholders or clients

## Features
------------

The `device_frame` package offers several features, including:

*   Support for various device frames, including iPhones, iPads, Android devices, and more
*   Customizable device frame colors and styles
*   Ability to add a background image or color to the device frame

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Device Frame Package
--------------------------------------

To use the `device_frame` package in your Flutter app, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:

```yml
dependencies:
  device_frame: ^1.0.0
```

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:device_frame/device_frame.dart';
```

### Step 3: Use the DeviceFrame Widget

Wrap your app's UI with the `DeviceFrame` widget:

```dart
DeviceFrame(
  device: Devices.iphone12,
  child: YourApp(),
)
```

### Platform-Specific Details

The `device_frame` package supports both Android and iOS devices. You can use the `Devices` class to specify the device type:

```dart
DeviceFrame(
  device: Devices.android,
  child: YourApp(),
)
```

### Required Configurations or Optimizations

You can customize the device frame colors and styles using the `DeviceFrame` widget's properties:

```dart
DeviceFrame(
  device: Devices.iphone12,
  frameColor: Colors.black,
  frameShadowColor: Colors.grey,
  child: YourApp(),
)
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:device_frame/device_frame.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Device Frame Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Device Frame Demo'),
      ),
      body: Center(
        child: DeviceFrame(
          device: Devices.iphone12,
          frameColor: Colors.black,
          frameShadowColor: Colors.grey,
          child: Container(
            width: 300,
            height: 500,
            color: Colors.white,
            child: Center(
              child: Text('Hello, World!'),
            ),
          ),
        ),
      ),
    );
  }
}

// The app starts by running the main function, which calls runApp with an instance of MyApp.
// MyApp builds a MaterialApp with a title, theme, and home page.
// The home page is an instance of MyHomePage, which builds a Scaffold with an AppBar and a body.
// The body is a Center widget containing a DeviceFrame widget.
// The DeviceFrame widget wraps a Container with a width, height, and color.
// Inside the Container, there is a Center widget containing a Text widget with the text 'Hello, World!'.
// The DeviceFrame widget adds a device frame around the Container, making it look like an iPhone 12.
```

// The app's UI is built using a combination of widgets, including MaterialApp, Scaffold, AppBar, Center, DeviceFrame, Container, and Text.
// The DeviceFrame widget is used to add a device frame around the Container, making it look like an iPhone 12.
// The app's UI is customizable using the DeviceFrame widget's properties, such as frameColor and frameShadowColor.

<-- END_MAIN -->
```markdown
<!-- START_DESCRIPTION -->
# Colorgram Flutter Package

The **Colorgram** package is a powerful tool for Flutter developers that allows you to extract prominent colors from images. This can be particularly useful in applications where you want to create a visually appealing UI that adapts to the colors of the images being displayed. For instance, you might want to use the dominant colors of a photo as the background or accent colors in your app.

## When to Use Colorgram
- **Dynamic Theming**: Automatically adjust your app's theme based on the colors of an image.
- **Image Analysis**: Analyze images to extract color palettes for design purposes.
- **Art and Photography Apps**: Enhance user experience by providing color suggestions based on uploaded images.

## Features
- Extracts a list of prominent colors from an image.
- Supports both local and network images.
- Provides options to specify the number of colors to extract.
- Easy integration with Flutter applications.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Colorgram

## Installation
To use the Colorgram package in your Flutter project, you need to add it to your `pubspec.yaml` file. Open the file and add the following line under dependencies:

```yaml
dependencies:
  colorgram: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Platform-Specific Configuration
### Android
No additional configuration is required for Android. Just ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file.

### iOS
For iOS, you may need to add permissions to access the photo library if you are using images from the user's device. Open your `Info.plist` file and add the following:

```xml
<key>NSPhotoLibraryUsageDescription</key>
<string>We need access to your photo library to extract colors from your images.</string>
```

## Using Colorgram
To use the Colorgram package, you can follow these steps:

1. Import the package in your Dart file:
   ```dart
   import 'package:colorgram/colorgram.dart';
   ```

2. Use the `Colorgram` class to extract colors from an image. You can provide either a local asset or a network image URL.

3. Call the `extract` method to get the colors.

Hereâ€™s a simple example of how to use Colorgram in your Flutter app:

```dart
// Import the necessary packages
import 'package:flutter/material.dart';
import 'package:colorgram/colorgram.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: ColorExtractorScreen(),
    );
  }
}

class ColorExtractorScreen extends StatefulWidget {
  @override
  _ColorExtractorScreenState createState() => _ColorExtractorScreenState();
}

class _ColorExtractorScreenState extends State<ColorExtractorScreen> {
  List<Color> colors = [];

  @override
  void initState() {
    super.initState();
    _extractColors();
  }

  Future<void> _extractColors() async {
    // Extract colors from a local image asset
    final colorList = await Colorgram.fromAsset('assets/sample_image.jpg').extract();
    setState(() {
      colors = colorList.map((color) => color.color).toList();
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Colorgram Example')),
      body: Center(
        child: colors.isEmpty
            ? CircularProgressIndicator()
            : Wrap(
                children: colors.map((color) {
                  return Container(
                    width: 100,
                    height: 100,
                    color: color,
                  );
                }).toList(),
              ),
      ),
    );
  }
}
```

This code sets up a simple Flutter application that extracts colors from a local image and displays them in colored boxes.

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of Colorgram in Flutter

```dart
// Import necessary packages
import 'package:flutter/material.dart';
import 'package:colorgram/colorgram.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: ColorExtractorScreen(),
    );
  }
}

class ColorExtractorScreen extends StatefulWidget {
  @override
  _ColorExtractorScreenState createState() => _ColorExtractorScreenState();
}

class _ColorExtractorScreenState extends State<ColorExtractorScreen> {
  List<Color> colors = []; // List to hold extracted colors

  @override
  void initState() {
    super.initState();
    _extractColors(); // Call the method to extract colors when the widget is initialized
  }

  Future<void> _extractColors() async {
    // Extract colors from a local image asset
    final colorList = await Colorgram.fromAsset('assets/sample_image.jpg').extract();
    setState(() {
      // Update the state with the extracted colors
      colors = colorList.map((color) => color.color).toList();
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Colorgram Example')), // App bar with title
      body: Center(
        child: colors.isEmpty // Check if colors are extracted
            ? CircularProgressIndicator() // Show loading indicator while extracting
            : Wrap(
                children: colors.map((color) {
                  return Container(
                    width: 100, // Width of the color box
                    height: 100, // Height of the color box
                    color: color, // Set the color of the box
                  );
                }).toList(),
              ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function runs the MyApp widget.
// 2. MyApp builds a MaterialApp with ColorExtractorScreen as the home widget.
// 3. ColorExtractorScreen initializes an empty list of colors.
// 4. In the initState method, _extractColors is called to start extracting colors.
// 5. _extractColors uses Colorgram to extract colors from a local image asset.
// 6. Once colors are extracted, the state is updated, triggering a rebuild.
// 7. The build method checks if colors are available; if not, it shows a loading indicator.
// 8. Once colors are available, it displays them in a grid of colored boxes.
```
<!-- END_MAIN -->
``` 

This structured blog post provides a comprehensive overview of the Colorgram package, guiding developers through its features, setup, and practical usage in a Flutter application.
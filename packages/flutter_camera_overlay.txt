<-- START_DESCRIPTION -->

# Flutter Camera Overlay Package
=====================================

The `flutter_camera_overlay` package provides a customizable camera overlay for Flutter applications. It allows developers to create a camera interface with a variety of features, such as zoom, flash, and tap-to-focus.

### When to Use This Package

This package is ideal for applications that require a camera interface, such as:

* Social media apps that allow users to take and share photos
* E-commerce apps that require users to take photos of products
* Medical apps that require users to take photos of medical conditions

### Features

* Customizable camera overlay with adjustable zoom, flash, and tap-to-focus
* Support for both Android and iOS platforms
* Ability to capture photos and videos

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `flutter_camera_overlay` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_camera_overlay: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:flutter_camera_overlay/flutter_camera_overlay.dart';
```
### Step 3: Create a Camera Overlay

Create a camera overlay using the `CameraOverlay` widget:
```dart
CameraOverlay(
  cameraDescription: CameraDescription(
    name: 'Camera 0',
    lensDirection: CameraLensDirection.back,
  ),
  child: Container(
    width: double.infinity,
    height: double.infinity,
    color: Colors.black,
  ),
)
```
### Platform-Specific Details

* Android: Make sure to add the following permissions to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.CAMERA" />
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
```
* iOS: Make sure to add the following permissions to your `Info.plist` file:
```xml
<key>NSCameraUsageDescription</key>
<string>This app needs camera access to take photos</string>
<key>NSPhotoLibraryUsageDescription</key>
<string>This app needs photo library access to save photos</string>
```
### Optimizations

* To improve performance, make sure to use the `CameraOverlay` widget in a `StatefulWidget`.
* To reduce memory usage, make sure to dispose of the `CameraOverlay` widget when it is no longer needed.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_camera_overlay/flutter_camera_overlay.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Camera Overlay Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Create a camera overlay
  CameraOverlay _cameraOverlay;

  @override
  void initState() {
    super.initState();
    _cameraOverlay = CameraOverlay(
      cameraDescription: CameraDescription(
        name: 'Camera 0',
        lensDirection: CameraLensDirection.back,
      ),
      child: Container(
        width: double.infinity,
        height: double.infinity,
        color: Colors.black,
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Camera Overlay Demo'),
      ),
      body: _cameraOverlay,
      floatingActionButton: FloatingActionButton(
        onPressed: () async {
          // Capture a photo
          final photo = await _cameraOverlay.capturePhoto();
          print('Photo captured: $photo');
        },
        tooltip: 'Capture Photo',
        child: Icon(Icons.camera),
      ),
    );
  }

  @override
  void dispose() {
    // Dispose of the camera overlay
    _cameraOverlay.dispose();
    super.dispose();
  }
}

// The application flow is as follows:
// 1. The user opens the app and is presented with a camera overlay.
// 2. The user can capture a photo by pressing the floating action button.
// 3. The photo is captured and saved to the device's photo library.
// 4. The user can view the captured photo by navigating to the device's photo library.
```

// The code flows in the following order:
// 1. The `MyApp` widget is created and run.
// 2. The `RealFlutter` widget is created and set as the home screen.
// 3. The `RealFlutter` widget creates a camera overlay and sets it as the body of the scaffold.
// 4. The user can capture a photo by pressing the floating action button.
// 5. The photo is captured and saved to the device's photo library.
// 6. The user can view the captured photo by navigating to the device's photo library.

<-- END_MAIN -->
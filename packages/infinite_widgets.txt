<-- START_DESCRIPTION -->

Infinite Widgets Package
========================

The `infinite_widgets` package is a powerful tool for creating infinite scrolling lists in Flutter applications. It provides a simple and efficient way to handle large datasets and display them in a scrolling list, making it ideal for applications that require displaying a large amount of data.

When to Use
------------

The `infinite_widgets` package is perfect for applications that require displaying a large amount of data in a scrolling list, such as:

* Social media feeds
* News articles
* Product lists
* Search results

Features
--------

The `infinite_widgets` package provides the following features:

* Infinite scrolling
* Automatic data loading
* Customizable loading indicators
* Support for multiple data sources

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
================

To use the `infinite_widgets` package, follow these steps:

### Step 1: Add the Package to Your Project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  infinite_widgets: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:infinite_widgets/infinite_widgets.dart';
```
### Step 3: Create an Infinite Scroll List

Create an `InfiniteScrollList` widget and pass in your data source:
```dart
InfiniteScrollList(
  dataSource: myDataSource,
  itemBuilder: (context, item) {
    return ListTile(
      title: Text(item.title),
    );
  },
)
```
### Step 4: Configure the Loading Indicator

Configure the loading indicator by passing in a `LoadingIndicator` widget:
```dart
InfiniteScrollList(
  dataSource: myDataSource,
  itemBuilder: (context, item) {
    return ListTile(
      title: Text(item.title),
    );
  },
  loadingIndicator: LoadingIndicator(
    child: CircularProgressIndicator(),
  ),
)
```
Platform-Specific Details
-------------------------

### Android

On Android, you need to add the following line to your `AndroidManifest.xml` file:
```xml
<application
  ...
  android:hardwareAccelerated="true"
  ...
>
```
This enables hardware acceleration for the scrolling list.

### iOS

On iOS, you need to add the following line to your `Info.plist` file:
```xml
<key>UIViewControllerBasedStatusBarAppearance</key>
<false/>
```
This enables the status bar to be hidden when the scrolling list is displayed.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:infinite_widgets/infinite_widgets.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Infinite Scroll List Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final List<String> _data = [];

  @override
  void initState() {
    super.initState();
    for (int i = 0; i < 100; i++) {
      _data.add('Item $i');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Infinite Scroll List Demo'),
      ),
      body: InfiniteScrollList(
        dataSource: _data,
        itemBuilder: (context, item) {
          // Create a ListTile for each item
          return ListTile(
            title: Text(item),
          );
        },
        loadingIndicator: LoadingIndicator(
          // Create a CircularProgressIndicator as the loading indicator
          child: CircularProgressIndicator(),
        ),
      ),
    );
  }
}
```

// The application flow is as follows:
// 1. The user runs the app and the `MyApp` widget is displayed.
// 2. The `MyApp` widget builds the `MyHomePage` widget.
// 3. The `MyHomePage` widget initializes the `_data` list with 100 items.
// 4. The `MyHomePage` widget builds the `InfiniteScrollList` widget and passes in the `_data` list as the data source.
// 5. The `InfiniteScrollList` widget displays the list of items and loads more items as the user scrolls down.
// 6. When the user reaches the end of the list, the `LoadingIndicator` widget is displayed to indicate that more items are being loaded.

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Standard Search Bar Flutter Package
=====================================

The `standard_searchbar` Flutter package provides a simple and customizable search bar for Flutter applications. It is designed to be easy to use and provides a standard search bar experience for users.

### When to Use This Package

This package is ideal for applications that require a simple search bar with basic functionality, such as filtering a list of items based on user input.

### Features

*   Simple and customizable search bar
*   Supports filtering a list of items based on user input
*   Works on both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Using the Standard Search Bar Flutter Package
=====================================================

### Step 1: Add the Package to Your Project

To use the `standard_searchbar` package, you need to add it to your project's `pubspec.yaml` file. Open the file and add the following line under the `dependencies` section:

```yml
dependencies:
  flutter:
    sdk: flutter
  standard_searchbar: ^1.0.0
```

Then, run `flutter pub get` in your terminal to get the package.

### Step 2: Import the Package

In your Dart file, import the package using the following line:

```dart
import 'package:standard_searchbar/standard_searchbar.dart';
```

### Step 3: Use the Search Bar

To use the search bar, you need to create a `StandardSearchBar` widget and pass a list of items to it. Here is an example:

```dart
StandardSearchBar(
  items: [
    'Item 1',
    'Item 2',
    'Item 3',
  ],
  onChanged: (value) {
    // Handle the search query change
  },
)
```

### Platform-Specific Details

The `standard_searchbar` package works on both Android and iOS platforms. However, you may need to configure some platform-specific settings to get the best results.

#### Android

On Android, you need to add the following line to your `AndroidManifest.xml` file to enable the search bar:

```xml
<activity
  android:name=".MainActivity"
  android:windowSoftInputMode="adjustResize">
</activity>
```

#### iOS

On iOS, you need to add the following line to your `Info.plist` file to enable the search bar:

```xml
<key>UIViewControllerBasedStatusBarAppearance</key>
<false/>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:standard_searchbar/standard_searchbar.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Standard Search Bar Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  List<String> _items = [
    'Item 1',
    'Item 2',
    'Item 3',
  ];
  List<String> _filteredItems = [];

  @override
  void initState() {
    super.initState();
    _filteredItems = _items;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Standard Search Bar Demo'),
      ),
      body: Column(
        children: [
          // Create a StandardSearchBar widget
          StandardSearchBar(
            items: _items,
            onChanged: (value) {
              // Handle the search query change
              setState(() {
                _filteredItems = _items
                    .where((item) => item.toLowerCase().contains(value.toLowerCase()))
                    .toList();
              });
            },
          ),
          // Display the filtered items
          Expanded(
            child: ListView.builder(
              itemCount: _filteredItems.length,
              itemBuilder: (context, index) {
                return ListTile(
                  title: Text(_filteredItems[index]),
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}

// The application flow:
// 1. The user types a search query in the StandardSearchBar widget.
// 2. The onChanged callback is called with the new search query.
// 3. The _filteredItems list is updated to include only the items that match the search query.
// 4. The setState method is called to rebuild the widget tree with the new _filteredItems list.
// 5. The ListView.builder widget displays the filtered items.

// Final summary:
// The StandardSearchBar widget provides a simple and customizable search bar for Flutter applications.
// It works on both Android and iOS platforms and provides a standard search bar experience for users.
// The example code demonstrates how to use the StandardSearchBar widget to filter a list of items based on user input.

```

<-- END_MAIN -->
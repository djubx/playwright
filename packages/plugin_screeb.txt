```markdown
<!-- START_DESCRIPTION -->
# Overview of the plugin_screeb Flutter Package

The `plugin_screeb` package is a powerful tool designed for Flutter developers who want to integrate screen recording capabilities into their applications. This package allows you to capture the screen and save it as a video file, making it ideal for applications that require tutorials, demonstrations, or user feedback.

## When to Use This Package
- **Tutorial Applications**: If you're building an app that provides tutorials or guides, screen recording can help users understand how to use the app effectively.
- **Feedback and Bug Reporting**: Allow users to record their screens when they encounter issues, making it easier for developers to understand and fix bugs.
- **Gaming Apps**: Capture gameplay sessions for sharing or streaming purposes.

## Key Features
- **Cross-Platform Support**: Works seamlessly on both Android and iOS.
- **Customizable Recording Settings**: Adjust video quality, frame rate, and more.
- **Easy Integration**: Simple API that allows for quick setup and usage.
- **File Management**: Save recordings to the device's storage and manage them easily.

Overall, `plugin_screeb` is a versatile package that enhances user experience by enabling screen recording functionality in Flutter applications.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Setting Up and Using the plugin_screeb Package

## Installation
To get started with `plugin_screeb`, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  plugin_screeb: ^latest_version
```

Make sure to replace `^latest_version` with the most recent version of the package.

## Platform-Specific Configuration

### Android
1. Open your `AndroidManifest.xml` file located at `android/app/src/main/AndroidManifest.xml`.
2. Add the following permissions inside the `<manifest>` tag:

```xml
<uses-permission android:name="android.permission.RECORD_AUDIO"/>
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
```

### iOS
1. Open your `Info.plist` file located at `ios/Runner/Info.plist`.
2. Add the following keys to request permissions:

```xml
<key>NSMicrophoneUsageDescription</key>
<string>We need access to your microphone to record audio during screen recording.</string>
<key>NSPhotoLibraryUsageDescription</key>
<string>We need access to your photo library to save recordings.</string>
```

## Basic Usage
To start using the `plugin_screeb` package, you can follow these steps:

1. Import the package in your Dart file:

```dart
import 'package:plugin_screeb/plugin_screeb.dart';
```

2. Initialize the screen recording:

```dart
await Screeb.startRecording();
```

3. Stop the recording and save the video:

```dart
String filePath = await Screeb.stopRecording();
```

4. You can then use the `filePath` to access the recorded video.

This setup allows you to easily integrate screen recording into your Flutter application.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using plugin_screeb

```dart
import 'package:flutter/material.dart';
import 'package:plugin_screeb/plugin_screeb.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  bool isRecording = false; // Track recording state

  // Function to start recording
  Future<void> startRecording() async {
    await Screeb.startRecording(); // Start the screen recording
    setState(() {
      isRecording = true; // Update the recording state
    });
  }

  // Function to stop recording
  Future<void> stopRecording() async {
    String filePath = await Screeb.stopRecording(); // Stop the recording and get the file path
    setState(() {
      isRecording = false; // Update the recording state
    });
    // You can now use the filePath to access the recorded video
    print("Recording saved at: $filePath"); // Log the file path
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Screen Recording Example'),
        ),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              // Start or stop recording based on the current state
              if (isRecording) {
                stopRecording(); // Stop recording if currently recording
              } else {
                startRecording(); // Start recording if not recording
              }
            },
            child: Text(isRecording ? 'Stop Recording' : 'Start Recording'),
          ),
        ),
      ),
    );
  }
}
```

```
// Application Flow Explanation:
// 1. The app starts with the main function, which runs the RealFlutter widget.
// 2. The RealFlutter widget is a StatefulWidget that maintains the recording state.
// 3. The startRecording function is called when the user presses the button to start recording.
// 4. The Screeb.startRecording() method is invoked to begin capturing the screen.
// 5. The state is updated to reflect that recording is in progress.
// 6. When the user presses the button again, the stopRecording function is called.
// 7. The Screeb.stopRecording() method stops the recording and returns the file path of the saved video.
// 8. The state is updated to indicate that recording has stopped, and the file path is printed to the console.
// 9. The button text changes based on the recording state, providing a clear user interface.
```
<!-- END_MAIN -->
```

This structured blog post provides a comprehensive overview of the `plugin_screeb` package, guiding developers through its features, setup, and practical usage with a complete example.
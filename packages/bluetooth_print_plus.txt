<-- START_DESCRIPTION -->
# Bluetooth Print Plus Flutter Package
=====================================

The `bluetooth_print_plus` Flutter package is a powerful library that enables Bluetooth printing capabilities in Flutter applications. It provides a simple and easy-to-use API for discovering nearby Bluetooth devices, connecting to them, and printing documents.

### When to Use This Package

This package is ideal for applications that require printing documents, such as:

* Point of Sale (POS) systems
* Inventory management systems
* Label printing applications
* Mobile receipt printing

### Features

* Discover nearby Bluetooth devices
* Connect to Bluetooth devices
* Print documents using the connected device
* Support for multiple print formats (e.g., PDF, text, image)

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->
# Setting Up the Package
-------------------------

To use the `bluetooth_print_plus` package, follow these steps:

### Step 1: Add the Package to Your `pubspec.yaml` File

```yml
dependencies:
  flutter:
    sdk: flutter
  bluetooth_print_plus: ^1.0.0
```

### Step 2: Import the Package in Your Dart File

```dart
import 'package:bluetooth_print_plus/bluetooth_print_plus.dart';
```

### Step 3: Initialize the Package

```dart
BluetoothPrintPlus _bluetoothPrintPlus = BluetoothPrintPlus();
```

### Platform-Specific Details

#### Android

* Add the following permissions to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.BLUETOOTH" />
<uses-permission android:name="android.permission.BLUETOOTH_ADMIN" />
```
* Set the `targetSdkVersion` to 28 or higher in your `build.gradle` file.

#### iOS

* Add the following lines to your `Info.plist` file:
```xml
<key>UIBackgroundModes</key>
<array>
    <string>bluetooth-peripheral</string>
    <string>bluetooth-central</string>
</array>
```
* Set the `NSBluetoothAlwaysUsageDescription` key in your `Info.plist` file.

### Required Configurations and Optimizations

* Make sure to handle the Bluetooth connection state changes using the `onStateChanged` callback.
* Use the `startScan` method to discover nearby Bluetooth devices.
* Use the `connect` method to connect to a Bluetooth device.
* Use the `print` method to print documents using the connected device.

<-- END_TUTORIAL -->

<-- START_MAIN -->
```dart
import 'package:flutter/material.dart';
import 'package:bluetooth_print_plus/bluetooth_print_plus.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Bluetooth Print Plus Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  BluetoothPrintPlus _bluetoothPrintPlus = BluetoothPrintPlus();
  List<BluetoothDevice> _devices = [];
  BluetoothDevice _selectedDevice;

  @override
  void initState() {
    super.initState();
    _bluetoothPrintPlus.onStateChanged.listen((state) {
      print('Bluetooth state changed: $state');
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Bluetooth Print Plus Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: _startScan,
              child: Text('Start Scan'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _connectToDevice,
              child: Text('Connect to Device'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _printDocument,
              child: Text('Print Document'),
            ),
            SizedBox(height: 20),
            Text(_selectedDevice != null
                ? _selectedDevice.name
                : 'No device selected'),
          ],
        ),
      ),
    );
  }

  void _startScan() {
    _bluetoothPrintPlus.startScan().then((devices) {
      setState(() {
        _devices = devices;
      });
    });
  }

  void _connectToDevice() {
    if (_selectedDevice != null) {
      _bluetoothPrintPlus.connect(_selectedDevice).then((_) {
        print('Connected to device');
      });
    }
  }

  void _printDocument() {
    if (_selectedDevice != null) {
      _bluetoothPrintPlus.print(_selectedDevice, 'Hello, World!');
    }
  }
}
```
// The app starts by initializing the BluetoothPrintPlus instance and setting up the UI.
// When the user presses the "Start Scan" button, the app starts scanning for nearby Bluetooth devices.
// When the user selects a device, the app connects to the device using the `connect` method.
// When the user presses the "Print Document" button, the app prints a document using the connected device.
// The app handles the Bluetooth connection state changes using the `onStateChanged` callback.
// The app uses the `startScan` method to discover nearby Bluetooth devices.
// The app uses the `connect` method to connect to a Bluetooth device.
// The app uses the `print` method to print documents using the connected device.

<-- END_MAIN -->
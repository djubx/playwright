<-- START_DESCRIPTION -->

# App Version Compare Flutter Package
=====================================

The `app_version_compare` Flutter package is a utility library that allows developers to easily compare the version of their app with a specified version. This package is useful when you want to implement features like:

*   Force update: When a new version of the app is available, and you want to force the user to update the app before they can continue using it.
*   Optional update: When a new version of the app is available, but the user can still use the current version.
*   Maintenance mode: When the app is under maintenance, and you want to prevent users from using it until the maintenance is complete.

### Features

*   Compare the app version with a specified version.
*   Check if the app version is greater than, less than, or equal to the specified version.
*   Supports both Android and iOS platforms.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

### Setup

To use the `app_version_compare` package, you need to add it to your `pubspec.yaml` file:

```yml
dependencies:
  app_version_compare: ^1.0.0
```

Then, run `flutter pub get` to get the package.

### Usage

To use the package, you need to import it in your Dart file:

```dart
import 'package:app_version_compare/app_version_compare.dart';
```

You can then use the `compareVersions` function to compare the app version with a specified version:

```dart
void main() {
  String appVersion = '1.0.0';
  String specifiedVersion = '1.1.0';

  int result = compareVersions(appVersion, specifiedVersion);

  if (result < 0) {
    print('App version is less than the specified version');
  } else if (result > 0) {
    print('App version is greater than the specified version');
  } else {
    print('App version is equal to the specified version');
  }
}
```

### Platform-Specific Details

The `app_version_compare` package works on both Android and iOS platforms. However, the way you get the app version is different on each platform.

On Android, you can get the app version from the `AndroidManifest.xml` file:

```xml
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.app">

    <application
        android:label="@string/app_name"
        android:versionCode="1"
        android:versionName="1.0.0">

        <!-- ... -->

    </application>

</manifest>
```

On iOS, you can get the app version from the `Info.plist` file:

```xml
<plist version="1.0">
<dict>
    <key>CFBundleDevelopmentRegion</key>
    <string>en</string>
    <key>CFBundleExecutable</key>
    <string>App</string>
    <key>CFBundleIdentifier</key>
    <string>com.example.app</string>
    <key>CFBundleInfoDictionaryVersion</key>
    <string>6.0</string>
    <key>CFBundleName</key>
    <string>App</string>
    <key>CFBundlePackageType</key>
    <string>APPL</string>
    <key>CFBundleShortVersionString</key>
    <string>1.0.0</string>
    <key>CFBundleVersion</key>
    <string>1</string>

    <!-- ... -->

</dict>
</plist>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:app_version_compare/app_version_compare.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  String _appVersion = '1.0.0';
  String _specifiedVersion = '1.1.0';

  void _compareVersions() {
    int result = compareVersions(_appVersion, _specifiedVersion);

    if (result < 0) {
      print('App version is less than the specified version');
    } else if (result > 0) {
      print('App version is greater than the specified version');
    } else {
      print('App version is equal to the specified version');
    }
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('App Version Compare'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Text('App Version: $_appVersion'),
              Text('Specified Version: $_specifiedVersion'),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _compareVersions,
                child: Text('Compare Versions'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The app starts by running the main function, which runs the RealFlutter app.
// The RealFlutter app is a stateful widget that has a app version and a specified version.
// The app version is compared with the specified version when the user clicks the Compare Versions button.
// The result of the comparison is printed to the console.
// The app version and the specified version are displayed on the screen.
// The user can change the app version and the specified version by modifying the _appVersion and _specifiedVersion variables.
```

<-- END_MAIN -->
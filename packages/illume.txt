```markdown
<!-- START_DESCRIPTION -->
# Illume Flutter Package: A Comprehensive Overview

The **Illume** package is a powerful tool for Flutter developers looking to enhance their applications with dynamic theming capabilities. It allows developers to create visually appealing and customizable themes that can adapt to user preferences or system settings. This package is particularly useful for applications that require a modern and responsive design, making it an excellent choice for both mobile and web applications.

## When to Use Illume
- **Dynamic Theming**: When you want to allow users to switch between light and dark themes seamlessly.
- **Customizable UI**: If your application requires a unique look and feel that can be easily adjusted based on user preferences.
- **Responsive Design**: For applications that need to adapt their appearance based on different platforms or screen sizes.

## Key Features
- **Light and Dark Themes**: Easily switch between light and dark modes.
- **Custom Theme Data**: Define your own theme data to create a unique look for your application.
- **Responsive Design**: Automatically adjusts themes based on the platform (iOS, Android, Web).
- **User Preferences**: Save user preferences for themes and apply them on app restart.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Illume Package Setup and Usage Tutorial

In this section, we will walk through the setup process for the Illume package and explain how to use it effectively in your Flutter application.

## Installation

To add the Illume package to your Flutter project, include it in your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  illume: ^latest_version
```

Make sure to replace `latest_version` with the most recent version available on [pub.dev](https://pub.dev/packages/illume).

After adding the dependency, run the following command to install it:

```bash
flutter pub get
```

## Platform-Specific Configuration

### Android
For Android, ensure that your `android/app/build.gradle` file has the following configurations:

```gradle
android {
    ...
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}
```

### iOS
For iOS, make sure to set the minimum deployment target in your `ios/Podfile`:

```ruby
platform :ios, '10.0'
```

## Basic Usage

To use the Illume package, you need to wrap your application with the `Illume` widget. Hereâ€™s a simple example:

```dart
import 'package:flutter/material.dart';
import 'package:illume/illume.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Illume(
      lightTheme: ThemeData.light(),
      darkTheme: ThemeData.dark(),
      child: MaterialApp(
        title: 'Illume Example',
        theme: Illume.of(context).currentTheme,
        home: HomeScreen(),
      ),
    );
  }
}

class HomeScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Illume Example'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Toggle between light and dark themes
            Illume.of(context).toggleTheme();
          },
          child: Text('Toggle Theme'),
        ),
      ),
    );
  }
}
```

In this example, we create a simple Flutter application that allows users to toggle between light and dark themes using the Illume package.

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of Illume Package in Flutter

Here is a fully functional Flutter main file that demonstrates the key features of the Illume package.

```dart
import 'package:flutter/material.dart';
import 'package:illume/illume.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Illume(
      lightTheme: ThemeData.light(), // Define the light theme
      darkTheme: ThemeData.dark(), // Define the dark theme
      child: MaterialApp(
        title: 'Illume Example', // Title of the application
        theme: Illume.of(context).currentTheme, // Set the current theme
        home: HomeScreen(), // Home screen of the application
      ),
    );
  }
}

class HomeScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Illume Example'), // App bar title
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Toggle between light and dark themes
            Illume.of(context).toggleTheme(); // Call the toggleTheme method
          },
          child: Text('Toggle Theme'), // Button text
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function initializes the app by calling runApp with RealFlutter.
// 2. RealFlutter is a StatelessWidget that wraps the MaterialApp with Illume.
// 3. Illume is configured with light and dark themes.
// 4. The current theme is set based on user preference or system settings.
// 5. HomeScreen is displayed as the main screen of the app.
// 6. The HomeScreen contains a button that toggles the theme when pressed.
// 7. Pressing the button calls Illume.of(context).toggleTheme(), which switches the theme.
```
<!-- END_MAIN -->
``` 

This structured approach provides a comprehensive understanding of the Illume package, guiding developers through its features, setup, and practical implementation.
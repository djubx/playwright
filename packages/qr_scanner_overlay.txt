<-- START_DESCRIPTION -->
# qr_scanner_overlay Flutter Package
The `qr_scanner_overlay` package is a Flutter library that provides a customizable QR scanner overlay for Android and iOS devices. It allows developers to create a QR scanner interface with a overlay that can be tailored to their specific needs.

## When to Use
This package is useful when you need to integrate a QR scanner into your Flutter app and want to customize the appearance of the scanner overlay. It's ideal for apps that require a specific branding or design.

## Features
* Customizable overlay design
* Support for Android and iOS devices
* Easy integration with existing Flutter projects
* Adjustable overlay size and position
* Optional torch/flashlight support

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->
# Setup and Usage
To use the `qr_scanner_overlay` package, follow these steps:

### Step 1: Add the Package to Your Project
Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  qr_scanner_overlay: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package
Import the package in your Dart file:
```dart
import 'package:qr_scanner_overlay/qr_scanner_overlay.dart';
```
### Step 3: Create a QR Scanner Widget
Create a new widget that uses the `QrScannerOverlay` widget:
```dart
class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: QrScannerOverlay(
        // Customize the overlay design here
        overlay: Container(
          decoration: BoxDecoration(
            border: Border.all(color: Colors.red),
          ),
        ),
        // Handle QR code scan result here
        onScan: (String result) {
          print('QR code scanned: $result');
        },
      ),
    );
  }
}
```
### Platform-Specific Details
For Android, you need to add the following permission to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.CAMERA" />
```
For iOS, you need to add the following lines to your `Info.plist` file:
```xml
<key>NSCameraUsageDescription</key>
<string>This app needs camera access to scan QR codes</string>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->
```dart
import 'package:flutter/material.dart';
import 'package:qr_scanner_overlay/qr_scanner_overlay.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'QR Scanner Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Step 1: Create a QR scanner controller
  QrScannerController _controller;

  @override
  void initState() {
    super.initState();
    _controller = QrScannerController();
  }

  @override
  void dispose() {
    _controller.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('QR Scanner Demo'),
      ),
      body: QrScannerOverlay(
        // Step 2: Customize the overlay design
        overlay: Container(
          decoration: BoxDecoration(
            border: Border.all(color: Colors.red),
          ),
        ),
        // Step 3: Handle QR code scan result
        onScan: (String result) {
          print('QR code scanned: $result');
        },
        // Step 4: Set the QR scanner controller
        controller: _controller,
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          // Step 5: Toggle the QR scanner torch/flashlight
          _controller.toggleTorch();
        },
        tooltip: 'Toggle Torch',
        child: Icon(Icons.flash_on),
      ),
    );
  }
}

// Application flow:
// 1. The user opens the app and is presented with a QR scanner interface.
// 2. The user scans a QR code, and the app handles the scan result.
// 3. The user can toggle the QR scanner torch/flashlight by pressing the floating action button.
// 4. The app uses the `QrScannerOverlay` widget to customize the QR scanner interface.
// 5. The app uses the `QrScannerController` to control the QR scanner and handle scan results.
```
// Summary: This code demonstrates a basic QR scanner app using the `qr_scanner_overlay` package. It customizes the QR scanner interface, handles scan results, and toggles the torch/flashlight.
<-- END_MAIN -->
```markdown
<-- START_DESCRIPTION -->

# Rich Text Controller Flutter Package

The `rich_text_controller` Flutter package is a powerful tool designed to enhance text editing capabilities in Flutter applications. It provides developers with the ability to manage and manipulate rich text content within their apps, making it ideal for applications that require advanced text formatting features such as bold, italic, underline, and more.

## When to Use

This package is particularly useful in scenarios where you need to provide users with a rich text editing experience. Examples include:

- **Text Editors**: Applications that require users to input and format text, such as note-taking apps or word processors.
- **Messaging Apps**: Apps that allow users to send messages with rich text formatting.
- **Content Management Systems**: Systems where users need to create and edit content with various text styles.

## Features

- **Text Styling**: Apply different styles to text, such as bold, italic, and underline.
- **Customizable**: Easily extend and customize the text editing experience.
- **Integration**: Seamlessly integrates with existing Flutter widgets and layouts.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using Rich Text Controller

In this tutorial, we will walk through the process of setting up the `rich_text_controller` package in a Flutter project and demonstrate how to use its features effectively.

## Setup Process

1. **Add Dependency**

   First, add the `rich_text_controller` package to your `pubspec.yaml` file:

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     rich_text_controller: ^1.0.0
   ```

2. **Install Packages**

   Run the following command to install the new package:

   ```bash
   flutter pub get
   ```

3. **Import the Package**

   Import the package in your Dart file where you intend to use it:

   ```dart
   import 'package:rich_text_controller/rich_text_controller.dart';
   ```

## Platform-Specific Details

### Android

Ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```gradle
android {
    defaultConfig {
        minSdkVersion 21
    }
}
```

### iOS

Make sure your iOS deployment target is set to 11.0 or higher in your `ios/Podfile`:

```ruby
platform :ios, '11.0'
```

## Using the Package

To use the `rich_text_controller`, you need to create an instance of `RichTextController` and use it with a `TextField` or `TextFormField`.

```dart
final controller = RichTextController(
  patternMatchMap: {
    RegExp(r'\B#\w+\b'): TextStyle(color: Colors.blue),
    RegExp(r'\B@\w+\b'): TextStyle(color: Colors.green),
  },
);
```

This example highlights hashtags in blue and mentions in green.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:rich_text_controller/rich_text_controller.dart';

void main() => runApp(RealFlutterApp());

class RealFlutterApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Rich Text Controller Demo',
      home: RichTextEditorScreen(),
    );
  }
}

class RichTextEditorScreen extends StatefulWidget {
  @override
  _RichTextEditorScreenState createState() => _RichTextEditorScreenState();
}

class _RichTextEditorScreenState extends State<RichTextEditorScreen> {
  late RichTextController _controller;

  @override
  void initState() {
    super.initState();
    // Initialize the RichTextController with patterns for hashtags and mentions
    _controller = RichTextController(
      patternMatchMap: {
        RegExp(r'\B#\w+\b'): TextStyle(color: Colors.blue, fontWeight: FontWeight.bold),
        RegExp(r'\B@\w+\b'): TextStyle(color: Colors.green, fontStyle: FontStyle.italic),
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Rich Text Editor'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            // TextField using the RichTextController
            TextField(
              controller: _controller,
              decoration: InputDecoration(
                hintText: 'Type #hashtags or @mentions',
                border: OutlineInputBorder(),
              ),
              maxLines: null,
            ),
            SizedBox(height: 20),
            // Display the raw text input
            ElevatedButton(
              onPressed: () {
                // Show the current text in a dialog
                showDialog(
                  context: context,
                  builder: (context) => AlertDialog(
                    content: Text(_controller.text),
                  ),
                );
              },
              child: Text('Show Raw Text'),
            ),
          ],
        ),
      ),
    );
  }
}
```

// The application starts with the `main` function, which runs the `RealFlutterApp`.
// `RealFlutterApp` is a stateless widget that sets up the MaterialApp and home screen.
// `RichTextEditorScreen` is a stateful widget that manages the rich text editing screen.
// In `initState`, a `RichTextController` is initialized with patterns for hashtags and mentions.
// The `TextField` widget uses this controller to apply styles to matching text patterns.
// An `ElevatedButton` is provided to display the raw text input in a dialog box.
// This demonstrates how the `RichTextController` processes and styles text in real-time.

<-- END_MAIN -->
```
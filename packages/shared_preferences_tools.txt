<-- START_DESCRIPTION -->

# Shared Preferences Tools Flutter Package
=============================================

The `shared_preferences_tools` Flutter package provides a simple and efficient way to store and retrieve data in the form of key-value pairs. It is a wrapper around the `shared_preferences` package, providing additional features and tools to make it easier to work with shared preferences.

### When to Use

This package is useful when you need to store small amounts of data, such as user preferences, settings, or cached data. It is not suitable for large amounts of data or complex data structures.

### Features

*   Simple and easy-to-use API
*   Support for storing and retrieving strings, integers, booleans, and doubles
*   Automatic data serialization and deserialization
*   Support for encrypting and decrypting data

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

### Setup

To use the `shared_preferences_tools` package, you need to add it to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  shared_preferences_tools: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Basic Usage

To store data, you can use the `set` method:

```dart
import 'package:flutter/material.dart';
import 'package:shared_preferences_tools/shared_preferences_tools.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Shared Preferences Tools'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () async {
            await SharedPreferencesTools.set('key', 'value');
          },
          child: Text('Store Data'),
        ),
      ),
    );
  }
}
```

To retrieve data, you can use the `get` method:

```dart
import 'package:flutter/material.dart';
import 'package:shared_preferences_tools/shared_preferences_tools.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Shared Preferences Tools'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () async {
            String value = await SharedPreferencesTools.get('key');
            print(value);
          },
          child: Text('Retrieve Data'),
        ),
      ),
    );
  }
}
```

### Platform-Specific Details

*   On Android, the data is stored in the `SharedPreferences` file.
*   On iOS, the data is stored in the `NSUserDefaults` file.

### Required Configurations or Optimizations

*   Make sure to handle errors and exceptions properly.
*   Use the `await` keyword to wait for the data to be stored or retrieved.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:shared_preferences_tools/shared_preferences_tools.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Shared Preferences Tools',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  String _value = '';

  // Step 1: Store data
  void _storeData() async {
    // Use the set method to store data
    await SharedPreferencesTools.set('key', 'value');
  }

  // Step 2: Retrieve data
  void _retrieveData() async {
    // Use the get method to retrieve data
    String value = await SharedPreferencesTools.get('key');
    setState(() {
      _value = value;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Shared Preferences Tools'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            ElevatedButton(
              onPressed: _storeData,
              child: Text('Store Data'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _retrieveData,
              child: Text('Retrieve Data'),
            ),
            SizedBox(height: 20),
            Text(_value),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user clicks the "Store Data" button, which calls the _storeData method.
// 2. The _storeData method uses the set method to store the data.
// 3. The user clicks the "Retrieve Data" button, which calls the _retrieveData method.
// 4. The _retrieveData method uses the get method to retrieve the data.
// 5. The retrieved data is displayed on the screen.

// In summary, this code demonstrates how to use the shared_preferences_tools package to store and retrieve data.
// It provides a simple and efficient way to store and retrieve data in the form of key-value pairs.
```

<-- END_MAIN -->
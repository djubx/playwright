```markdown
<!-- START_DESCRIPTION -->
# Liquid Engine Flutter Package

The **liquid_engine** package is a powerful tool for creating fluid animations and effects in Flutter applications. It allows developers to implement visually appealing liquid-like animations that can enhance the user experience. This package is particularly useful for applications that require dynamic and engaging UI elements, such as games, interactive applications, or any app that benefits from smooth transitions and animations.

## When to Use This Package
- **Games**: To create fluid animations for game elements.
- **Interactive Apps**: For applications that require engaging user interactions.
- **Visual Effects**: To add unique visual effects to standard UI components.

## Features
- **Fluid Animations**: Create smooth, liquid-like animations that respond to user interactions.
- **Customizable Parameters**: Adjust various parameters to fine-tune the animation effects.
- **Performance Optimized**: Designed to work efficiently on both Android and iOS platforms.

Overall, the **liquid_engine** package is an excellent choice for developers looking to add a touch of creativity and fluidity to their Flutter applications.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Liquid Engine

## Installation
To get started with the **liquid_engine** package, you need to add it to your Flutter project. Open your `pubspec.yaml` file and add the following dependency:

```yaml
dependencies:
  flutter:
    sdk: flutter
  liquid_engine: ^latest_version
```

Make sure to replace `^latest_version` with the latest version available on [pub.dev](https://pub.dev/packages/liquid_engine).

After adding the dependency, run the following command in your terminal to install the package:

```bash
flutter pub get
```

## Platform-Specific Configuration
### Android
For Android, ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

### iOS
For iOS, you may need to enable certain capabilities in your `ios/Runner/Info.plist` file, depending on the features you plan to use. Ensure that you have the following:

```xml
<key>UIBackgroundModes</key>
<array>
    <string>audio</string>
</array>
```

## Using the Package
Once the package is installed and configured, you can start using it in your Flutter application. Below is a simple example of how to implement a basic liquid animation.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
```dart
import 'package:flutter/material.dart';
import 'package:liquid_engine/liquid_engine.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Liquid Engine Demo',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Liquid Engine Example'),
        ),
        body: Center(
          child: LiquidContainer(
            // The LiquidContainer widget creates a liquid effect
            height: 200,
            width: 200,
            color: Colors.blue,
            // The liquid effect can be customized with various parameters
            waveHeight: 20,
            waveSpeed: 1.5,
            child: Center(
              child: Text(
                'Liquid Effect',
                style: TextStyle(color: Colors.white, fontSize: 20),
              ),
            ),
          ),
        ),
      ),
    );
  }
}

// The above code creates a simple Flutter application that demonstrates the use of the liquid_engine package.
// 1. The main function initializes the app by calling runApp with the RealFlutter widget.
// 2. The RealFlutter widget builds a MaterialApp with a title and a Scaffold.
// 3. Inside the Scaffold, an AppBar is created with the title 'Liquid Engine Example'.
// 4. The body of the Scaffold contains a Center widget that centers its child.
// 5. The LiquidContainer widget is used to create a liquid effect with specified height, width, and color.
// 6. The waveHeight and waveSpeed properties control the appearance and animation of the liquid effect.
// 7. Finally, a Text widget is placed inside the LiquidContainer to display 'Liquid Effect' in white color.
// This simple example showcases how to implement a liquid animation using the liquid_engine package in a Flutter application.
```
<!-- END_MAIN -->
``` 

In summary, the **liquid_engine** package provides a straightforward way to add fluid animations to your Flutter applications. By following the setup and usage instructions, you can create engaging and visually appealing UI elements that enhance the overall user experience.
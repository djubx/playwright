<-- START_DESCRIPTION -->

Thumbhash Flutter Package: A High-Level Overview
=====================================================

The Thumbhash Flutter package is a lightweight library that allows developers to generate thumbnail images from videos. This package is ideal for applications that require video preview functionality, such as video sharing platforms, media players, or social media apps.

Key Features:

*   Generate thumbnail images from videos
*   Support for both Android and iOS platforms
*   Customizable thumbnail size and quality
*   Easy integration with existing Flutter projects

When to Use This Package:

*   When you need to display a video preview in your application
*   When you want to generate thumbnail images from videos for media players or video sharing platforms
*   When you need a lightweight and easy-to-use solution for thumbnail generation

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Thumbhash Flutter Package: Setup and Usage
=============================================

### Step 1: Add the Package to Your Project

Add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  thumbhash: ^0.1.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:thumbhash/thumbhash.dart';
```

### Step 3: Generate Thumbnail

Use the `ThumbHash` class to generate a thumbnail from a video file:

```dart
Future<Uint8List> generateThumbnail(String videoPath) async {
  final thumbHash = ThumbHash();
  final thumbnail = await thumbHash.generateThumbnail(videoPath);
  return thumbnail;
}
```

### Platform-Specific Details

*   **Android:** The package uses the `MediaMetadataRetriever` class to generate thumbnails. This class is available in Android API level 10 and above.
*   **iOS:** The package uses the `AVAssetImageGenerator` class to generate thumbnails. This class is available in iOS 4.0 and above.

### Configurations and Optimizations

*   You can customize the thumbnail size and quality by passing options to the `generateThumbnail` method:

```dart
final thumbnail = await thumbHash.generateThumbnail(
  videoPath,
  options: ThumbHashOptions(
    width: 100,
    height: 100,
    quality: 50,
  ),
);
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'dart:typed_data';
import 'package:flutter/material.dart';
import 'package:thumbhash/thumbhash.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Thumbhash Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  Uint8List? _thumbnail;

  Future<void> _generateThumbnail() async {
    // Specify the path to the video file
    final videoPath = 'path/to/video.mp4';

    // Create a ThumbHash instance
    final thumbHash = ThumbHash();

    // Generate the thumbnail
    final thumbnail = await thumbHash.generateThumbnail(
      videoPath,
      options: ThumbHashOptions(
        width: 100,
        height: 100,
        quality: 50,
      ),
    );

    // Update the UI with the generated thumbnail
    setState(() {
      _thumbnail = thumbnail;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Thumbhash Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            if (_thumbnail != null)
              Image.memory(
                _thumbnail!,
                width: 100,
                height: 100,
              ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _generateThumbnail,
              child: Text('Generate Thumbnail'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user clicks the "Generate Thumbnail" button.
// 2. The _generateThumbnail method is called, which creates a ThumbHash instance.
// 3. The generateThumbnail method is called on the ThumbHash instance, passing in the video path and options.
// 4. The generateThumbnail method generates the thumbnail and returns it as a Uint8List.
// 5. The _generateThumbnail method updates the UI with the generated thumbnail by calling setState.
// 6. The UI is updated with the generated thumbnail, which is displayed as an Image widget.
```

<-- END_MAIN -->
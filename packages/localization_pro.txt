<-- START_DESCRIPTION -->

# Localization Pro Flutter Package
=====================================

The `localization_pro` Flutter package is a powerful tool for managing app localization. It provides a simple and efficient way to handle translations, formatting, and more. With `localization_pro`, you can easily support multiple languages in your app, making it accessible to a broader audience.

### When to Use

* When you need to support multiple languages in your app.
* When you want to manage translations and formatting in a centralized way.
* When you need to handle locale-specific data, such as dates and numbers.

### Features

* Easy translation management
* Support for multiple languages
* Locale-specific data handling (dates, numbers, etc.)
* Simple and efficient API

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up Localization Pro
=============================

To use `localization_pro` in your Flutter app, follow these steps:

### Step 1: Add the Package

Add the `localization_pro` package to your `pubspec.yaml` file:
```yml
dependencies:
  localization_pro: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Configure the Package

Create a new file called `localization_pro_config.dart` with the following content:
```dart
import 'package:localization_pro/localization_pro.dart';

void main() {
  LocalizationPro.config(
    // Set the default language
    defaultLanguage: 'en',
    // Set the supported languages
    supportedLanguages: ['en', 'fr', 'es'],
  );
}
```
This configuration sets the default language to English and supports three languages: English, French, and Spanish.

### Step 3: Use the Package

To use the package, import it in your Dart file and create an instance of the `LocalizationPro` class:
```dart
import 'package:localization_pro/localization_pro.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final _localizationPro = LocalizationPro();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(_localizationPro.translate('app_title')),
      ),
      body: Center(
        child: Text(_localizationPro.translate('hello_world')),
      ),
    );
  }
}
```
In this example, we create an instance of `LocalizationPro` and use its `translate` method to translate the app title and a "Hello, World!" message.

### Platform-Specific Details

* For Android, you need to add the following configuration to your `android/app/src/main/AndroidManifest.xml` file:
```xml
<application
    ...
    android:supportsRtl="true"
    ...>
```
This configuration enables right-to-left (RTL) support for Android.

* For iOS, you need to add the following configuration to your `ios/Runner/Info.plist` file:
```xml
<key>CFBundleDevelopmentRegion</key>
<string>en</string>
```
This configuration sets the development region to English.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:localization_pro/localization_pro.dart';

void main() {
  LocalizationPro.config(
    defaultLanguage: 'en',
    supportedLanguages: ['en', 'fr', 'es'],
  );
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final _localizationPro = LocalizationPro();

  @override
  Widget build(BuildContext context) {
    // Create a Material app with a Scaffold
    return MaterialApp(
      home: Scaffold(
        // Create an app bar with a translated title
        appBar: AppBar(
          title: Text(_localizationPro.translate('app_title')),
        ),
        // Create a center widget with a translated message
        body: Center(
          child: Text(_localizationPro.translate('hello_world')),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user launches the app.
// 2. The app checks the device's language and sets the default language accordingly.
// 3. The app creates an instance of the LocalizationPro class.
// 4. The app uses the LocalizationPro instance to translate the app title and message.
// 5. The app displays the translated title and message to the user.
// This way, the app supports multiple languages and can be easily translated.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Flutter Notification Channel Package
=====================================

The `flutter_notification_channel` package is a Flutter plugin that allows you to create and manage notification channels for your app. Notification channels are a way to categorize notifications and provide users with more control over the types of notifications they receive.

## When to Use This Package
---------------------------

You should use this package if you want to:

* Create and manage notification channels for your app
* Provide users with more control over the types of notifications they receive
* Take advantage of Android Oreo's notification channel features

## Features
------------

* Create and delete notification channels
* Update notification channel properties (e.g. name, description, importance)
* Get a list of all notification channels
* Get a specific notification channel by ID

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
==================

## Step 1: Add the Package to Your Pubspec
-----------------------------------------

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_notification_channel: ^1.0.0
```
Then run `flutter pub get` to install the package.

## Step 2: Import the Package
-----------------------------

Import the package in your Dart file:
```dart
import 'package:flutter_notification_channel/flutter_notification_channel.dart';
```
## Step 3: Create a Notification Channel
----------------------------------------

Create a notification channel using the `createNotificationChannel` method:
```dart
await FlutterNotificationChannel.createNotificationChannel(
  id: 'my_channel',
  name: 'My Channel',
  description: 'This is my channel',
  importance: Importance.max,
);
```
## Step 4: Update a Notification Channel
----------------------------------------

Update a notification channel using the `updateNotificationChannel` method:
```dart
await FlutterNotificationChannel.updateNotificationChannel(
  id: 'my_channel',
  name: 'My Updated Channel',
  description: 'This is my updated channel',
  importance: Importance.min,
);
```
## Step 5: Get a List of All Notification Channels
-------------------------------------------------

Get a list of all notification channels using the `getNotificationChannels` method:
```dart
List<NotificationChannel> channels = await FlutterNotificationChannel.getNotificationChannels();
```
## Step 6: Get a Specific Notification Channel
---------------------------------------------

Get a specific notification channel using the `getNotificationChannel` method:
```dart
NotificationChannel channel = await FlutterNotificationChannel.getNotificationChannel('my_channel');
```
## Platform-Specific Details
---------------------------

### Android

* On Android Oreo and later, notification channels are required for all notifications.
* On Android Nougat and earlier, notification channels are not supported.

### iOS

* On iOS, notification channels are not supported.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_notification_channel/flutter_notification_channel.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Notification Channel Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _channelIdController = TextEditingController();
  final _channelNameController = TextEditingController();
  final _channelDescriptionController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Notification Channel Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            TextField(
              controller: _channelIdController,
              decoration: InputDecoration(
                labelText: 'Channel ID',
              ),
            ),
            TextField(
              controller: _channelNameController,
              decoration: InputDecoration(
                labelText: 'Channel Name',
              ),
            ),
            TextField(
              controller: _channelDescriptionController,
              decoration: InputDecoration(
                labelText: 'Channel Description',
              ),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _createNotificationChannel,
              child: Text('Create Notification Channel'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _updateNotificationChannel,
              child: Text('Update Notification Channel'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _getNotificationChannels,
              child: Text('Get Notification Channels'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _getNotificationChannel,
              child: Text('Get Notification Channel'),
            ),
          ],
        ),
      ),
    );
  }

  Future<void> _createNotificationChannel() async {
    // Create a notification channel with the given ID, name, and description
    await FlutterNotificationChannel.createNotificationChannel(
      id: _channelIdController.text,
      name: _channelNameController.text,
      description: _channelDescriptionController.text,
      importance: Importance.max,
    );
  }

  Future<void> _updateNotificationChannel() async {
    // Update the notification channel with the given ID, name, and description
    await FlutterNotificationChannel.updateNotificationChannel(
      id: _channelIdController.text,
      name: _channelNameController.text,
      description: _channelDescriptionController.text,
      importance: Importance.min,
    );
  }

  Future<void> _getNotificationChannels() async {
    // Get a list of all notification channels
    List<NotificationChannel> channels = await FlutterNotificationChannel.getNotificationChannels();
    print('Notification Channels:');
    for (NotificationChannel channel in channels) {
      print('ID: ${channel.id}, Name: ${channel.name}, Description: ${channel.description}');
    }
  }

  Future<void> _getNotificationChannel() async {
    // Get a specific notification channel by ID
    NotificationChannel channel = await FlutterNotificationChannel.getNotificationChannel(_channelIdController.text);
    print('Notification Channel:');
    print('ID: ${channel.id}, Name: ${channel.name}, Description: ${channel.description}');
  }
}
```

// This code creates a Flutter app that demonstrates the use of the flutter_notification_channel package.
// The app has a text field for entering the channel ID, name, and description, and four buttons for creating,
// updating, getting, and getting a specific notification channel.
// When the create button is pressed, the app creates a notification channel with the given ID, name, and description.
// When the update button is pressed, the app updates the notification channel with the given ID, name, and description.
// When the get button is pressed, the app gets a list of all notification channels and prints their IDs, names, and descriptions.
// When the get specific button is pressed, the app gets a specific notification channel by ID and prints its ID, name, and description.

<-- END_MAIN -->
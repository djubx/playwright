<-- START_DESCRIPTION -->

Linked Scroll Controller
======================
The `linked_scroll_controller` package is a Flutter package that allows you to link multiple scroll controllers together, enabling synchronized scrolling across multiple widgets. This package is particularly useful when you need to display multiple lists or grids that need to be scrolled together.

Features
--------

*   Link multiple scroll controllers together
*   Synchronized scrolling across multiple widgets
*   Support for both vertical and horizontal scrolling

When to Use
------------

*   Displaying multiple lists or grids that need to be scrolled together
*   Creating a scrolling dashboard with multiple sections
*   Building a scrolling widget with multiple child widgets that need to be scrolled together

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
----------------

### Step 1: Add the Package to Your Project

Add the `linked_scroll_controller` package to your `pubspec.yaml` file:

```yml
dependencies:
  linked_scroll_controller: ^1.0.0
```

Then, run `flutter pub get` to get the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:linked_scroll_controller/linked_scroll_controller.dart';
```

### Step 3: Create a Linked Scroll Controller

Create a linked scroll controller and pass it to your scrolling widgets:

```dart
LinkedScrollController _linkedScrollController = LinkedScrollController();

// Pass the linked scroll controller to your scrolling widgets
ListView.builder(
  controller: _linkedScrollController,
  // ...
)
```

### Step 4: Add Widgets to the Linked Scroll Controller

Add widgets to the linked scroll controller using the `add` method:

```dart
_linkedScrollController.add(ScrollController());
```

### Step 5: Dispose the Linked Scroll Controller

Dispose the linked scroll controller when it's no longer needed:

```dart
_linkedScrollController.dispose();
```

Platform-Specific Details
-------------------------

### Android

No platform-specific configuration is required for Android.

### iOS

No platform-specific configuration is required for iOS.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:linked_scroll_controller/linked_scroll_controller.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Linked Scroll Controller Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  LinkedScrollController _linkedScrollController = LinkedScrollController();

  @override
  void initState() {
    super.initState();
    // Add two scroll controllers to the linked scroll controller
    _linkedScrollController.add(ScrollController());
    _linkedScrollController.add(ScrollController());
  }

  @override
  void dispose() {
    // Dispose the linked scroll controller
    _linkedScrollController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Linked Scroll Controller Demo'),
      ),
      body: Column(
        children: [
          // First list view
          Expanded(
            child: ListView.builder(
              controller: _linkedScrollController.controllers[0],
              itemCount: 100,
              itemBuilder: (context, index) {
                return ListTile(
                  title: Text('Item $index'),
                );
              },
            ),
          ),
          // Second list view
          Expanded(
            child: ListView.builder(
              controller: _linkedScrollController.controllers[1],
              itemCount: 100,
              itemBuilder: (context, index) {
                return ListTile(
                  title: Text('Item $index'),
                );
              },
            ),
          ),
        ],
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user scrolls the first list view.
// 2. The linked scroll controller synchronizes the scrolling of the second list view.
// 3. The second list view scrolls to the same position as the first list view.
// 4. The user scrolls the second list view.
// 5. The linked scroll controller synchronizes the scrolling of the first list view.
// 6. The first list view scrolls to the same position as the second list view.

// In summary, the linked scroll controller allows multiple scroll controllers to be linked together,
// enabling synchronized scrolling across multiple widgets.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# json5 Flutter Package: A Flexible JSON Parser
=====================================================

The json5 Flutter package is a lightweight, flexible JSON parser that allows you to parse JSON data in a more relaxed and forgiving way. It's perfect for situations where you need to parse JSON data that may not be perfectly formatted or may contain errors.

### When to Use json5

* When working with APIs that return JSON data that may not be perfectly formatted.
* When parsing JSON data from user input or external sources that may contain errors.
* When you need a more flexible and forgiving JSON parser.

### Features

* Parses JSON data in a more relaxed and forgiving way.
* Allows for comments, trailing commas, and other non-standard JSON features.
* Supports parsing JSON data from strings, files, and URLs.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using json5
=============================

### Adding json5 to Your Flutter Project

To add json5 to your Flutter project, simply add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  json5: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Parsing JSON Data

To parse JSON data using json5, you can use the `json5.parse()` function:
```dart
import 'package:json5/json5.dart';

void main() {
  String jsonData = '{"name": "John", "age": 30}';
  Map<String, dynamic> parsedData = json5.parse(jsonData);
  print(parsedData); // prints {name: John, age: 30}
}
```
### Platform-Specific Details

* Android: No additional setup is required.
* iOS: No additional setup is required.

### Configurations and Optimizations

* You can configure the parser to allow or disallow certain non-standard JSON features by passing options to the `json5.parse()` function.
* You can also use the `json5.stringify()` function to convert a JSON object to a string.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:json5/json5.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  String _jsonData = '{"name": "John", "age": 30}';
  Map<String, dynamic> _parsedData;

  // Step 1: Parse the JSON data using json5
  void _parseData() {
    try {
      _parsedData = json5.parse(_jsonData);
    } catch (e) {
      print('Error parsing data: $e');
    }
  }

  // Step 2: Display the parsed data
  void _displayData() {
    if (_parsedData != null) {
      print('Parsed data: $_parsedData');
    } else {
      print('No data to display');
    }
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('json5 Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Text('JSON Data:'),
              Text(_jsonData),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _parseData,
                child: Text('Parse Data'),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _displayData,
                child: Text('Display Data'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user runs the app and sees the JSON data displayed on the screen.
// 2. The user clicks the "Parse Data" button, which calls the _parseData() function.
// 3. The _parseData() function uses json5 to parse the JSON data and stores the result in the _parsedData variable.
// 4. The user clicks the "Display Data" button, which calls the _displayData() function.
// 5. The _displayData() function checks if the _parsedData variable is not null and prints the parsed data to the console.
// 6. If the _parsedData variable is null, the _displayData() function prints a message indicating that there is no data to display.

// Summary:
// This example demonstrates how to use the json5 package to parse JSON data in a Flutter app.
// The app displays the JSON data on the screen and provides two buttons to parse and display the data.
// The _parseData() function uses json5 to parse the JSON data and stores the result in the _parsedData variable.
// The _displayData() function checks if the _parsedData variable is not null and prints the parsed data to the console.

```

<-- END_MAIN -->
```markdown
<!-- START_DESCRIPTION -->
# Easy Docs Viewer: A Comprehensive Overview

The **easy_docs_viewer** Flutter package is designed to simplify the process of displaying documents in various formats within your Flutter applications. Whether you need to show PDF files, images, or other document types, this package provides a straightforward and efficient way to do so. 

## When to Use Easy Docs Viewer
- **Displaying PDFs**: Ideal for applications that require users to view PDF documents, such as eBooks, reports, or manuals.
- **Image Viewing**: Useful for apps that need to showcase images in a user-friendly manner.
- **Document Sharing**: Perfect for applications that allow users to share documents and view them seamlessly.

## Key Features
- **Multi-format Support**: Supports various document formats including PDF, images, and more.
- **Easy Integration**: Simple API that allows for quick setup and implementation.
- **Customizable UI**: Offers options to customize the viewer's appearance to match your app's design.
- **Platform Compatibility**: Works on both Android and iOS, ensuring a consistent experience across devices.

With these features, the easy_docs_viewer package is a valuable tool for any Flutter developer looking to enhance their app's document viewing capabilities.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Easy Docs Viewer: Setup and Usage Tutorial

## Installation
To get started with the easy_docs_viewer package, you need to add it to your Flutter project. Open your `pubspec.yaml` file and add the following dependency:

```yaml
dependencies:
  easy_docs_viewer: ^latest_version
```

Make sure to replace `latest_version` with the most recent version available on [pub.dev](https://pub.dev/packages/easy_docs_viewer).

## Platform-Specific Configuration

### Android
1. Ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:
   ```groovy
   android {
       ...
       defaultConfig {
           ...
           minSdkVersion 21
           ...
       }
   }
   ```

### iOS
1. Open your `ios/Runner/Info.plist` file and add the following permissions to allow file access:
   ```xml
   <key>NSPhotoLibraryUsageDescription</key>
   <string>We need access to your photo library to display images.</string>
   <key>NSDocumentsFolderUsageDescription</key>
   <string>We need access to your documents to display files.</string>
   ```

## Basic Usage
To use the easy_docs_viewer package, you can create a simple widget that utilizes the `EasyDocsViewer` class. Hereâ€™s a basic example:

```dart
import 'package:flutter/material.dart';
import 'package:easy_docs_viewer/easy_docs_viewer.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Easy Docs Viewer Example')),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              // Replace 'path_to_your_document' with the actual path to your document
              EasyDocsViewer.openDocument('path_to_your_document');
            },
            child: Text('Open Document'),
          ),
        ),
      ),
    );
  }
}
```

This code sets up a simple Flutter application with a button that opens a document when pressed. Make sure to replace `'path_to_your_document'` with the actual path to the document you want to display.

With these steps, you should be able to integrate the easy_docs_viewer package into your Flutter application seamlessly.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Easy Docs Viewer

```dart
import 'package:flutter/material.dart';
import 'package:easy_docs_viewer/easy_docs_viewer.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Easy Docs Viewer Example')),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              // Open a PDF document located in the assets folder
              EasyDocsViewer.openDocument('assets/sample.pdf');
            },
            child: Text('Open PDF Document'),
          ),
        ),
      ),
    );
  }
}

void main() {
  runApp(RealFlutter());
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the RealFlutter widget.
// 2. The RealFlutter widget builds a MaterialApp with a Scaffold.
// 3. The Scaffold contains an AppBar with the title 'Easy Docs Viewer Example'.
// 4. In the body of the Scaffold, a Center widget is used to center the content.
// 5. An ElevatedButton is created, which, when pressed, calls the EasyDocsViewer.openDocument method.
// 6. The method attempts to open a PDF document located in the assets folder (make sure to add the PDF file to your assets).
// 7. The user can view the document in the viewer provided by the easy_docs_viewer package.
```
<!-- END_MAIN -->
```

### Summary
In this blog post, we explored the **easy_docs_viewer** Flutter package, detailing its features, installation process, and usage. We provided a complete example of a Flutter application that demonstrates how to open a PDF document using the package. The application flow was explained step-by-step through comments in the code, making it easy for developers to understand how to implement this package in their own projects.
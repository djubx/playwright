<-- START_DESCRIPTION -->

Lifecycle Aware State
=====================

The `lifecycle_aware_state` package is a Flutter package that allows you to manage the lifecycle of your app's state. It provides a simple way to handle the app's lifecycle events, such as when the app is paused, resumed, or destroyed.

When to Use
------------

You should use this package when you need to perform some actions when the app's lifecycle changes. For example, you might want to:

* Save the app's state when the app is paused or destroyed
* Release resources when the app is destroyed
* Refresh the app's state when the app is resumed

Features
--------

* Handles app lifecycle events (pause, resume, destroy)
* Allows you to perform actions when the app's lifecycle changes
* Works on both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
================

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  lifecycle_aware_state: ^1.0.0
```
Then, run `flutter pub get` to get the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:lifecycle_aware_state/lifecycle_aware_state.dart';
```
### Step 3: Create a Lifecycle Aware State

Create a class that extends `LifecycleAwareState`:
```dart
class RealFlutter extends LifecycleAwareState {
  @override
  void onPause() {
    // Handle pause event
  }

  @override
  void onResume() {
    // Handle resume event
  }

  @override
  void onDestroy() {
    // Handle destroy event
  }
}
```
### Step 4: Use the Lifecycle Aware State

Use the `RealFlutter` class as your app's state:
```dart
void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Lifecycle Aware State Demo',
      home: RealFlutter(),
    );
  }
}
```
Platform-Specific Details
-------------------------

### Android

On Android, the `lifecycle_aware_state` package uses the `ActivityLifecycleCallbacks` to handle the app's lifecycle events.

### iOS

On iOS, the `lifecycle_aware_state` package uses the `UIApplicationDelegate` to handle the app's lifecycle events.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:lifecycle_aware_state/lifecycle_aware_state.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Lifecycle Aware State Demo',
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends LifecycleAwareState {
  int _counter = 0;

  // Step 1: Initialize the state
  @override
  void initState() {
    super.initState();
    print('initState');
  }

  // Step 2: Handle pause event
  @override
  void onPause() {
    print('onPause');
  }

  // Step 3: Handle resume event
  @override
  void onResume() {
    print('onResume');
  }

  // Step 4: Handle destroy event
  @override
  void onDestroy() {
    print('onDestroy');
  }

  // Step 5: Build the UI
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Lifecycle Aware State Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'You have pushed the button this many times:',
            ),
            Text(
              '$_counter',
              style: Theme.of(context).textTheme.display1,
            ),
          ],
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          setState(() {
            _counter++;
          });
        },
        tooltip: 'Increment',
        child: Icon(Icons.add),
      ),
    );
  }
}

// The app's flow:
// 1. The app is launched and the `initState` method is called.
// 2. The app is running and the user can interact with it.
// 3. When the user presses the home button, the `onPause` method is called.
// 4. When the user returns to the app, the `onResume` method is called.
// 5. When the app is destroyed, the `onDestroy` method is called.
// The app's state is preserved across the lifecycle events.
```

<-- END_MAIN -->
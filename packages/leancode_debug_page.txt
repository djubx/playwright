```markdown
<!-- START_DESCRIPTION -->
# leancode_debug_page Flutter Package

The `leancode_debug_page` package is a powerful tool designed for Flutter developers to facilitate debugging and enhance the development experience. This package provides a dedicated debug page that can be easily integrated into your Flutter application, allowing developers to inspect various aspects of their app in real-time.

## When to Use This Package
- **Debugging**: When you need to troubleshoot issues in your Flutter application, the debug page provides a centralized location to view logs, performance metrics, and other critical information.
- **Development**: During the development phase, it helps in monitoring the state of the application and understanding how different components interact with each other.

## Features
- **Real-time Logging**: Capture and display logs directly on the debug page.
- **Performance Metrics**: Monitor the performance of your application, including frame rendering times and widget rebuilds.
- **Customizable UI**: The debug page can be customized to fit the look and feel of your application.
- **Easy Integration**: Simple setup process to add the debug page to your existing Flutter app.

Overall, `leancode_debug_page` is an essential package for any Flutter developer looking to streamline their debugging process and gain deeper insights into their applications.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up leancode_debug_page

## Installation
To get started with the `leancode_debug_page` package, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  leancode_debug_page: ^latest_version
```

Make sure to replace `latest_version` with the most recent version available on [pub.dev](https://pub.dev/packages/leancode_debug_page).

## Platform-Specific Configuration

### Android
1. Open your `AndroidManifest.xml` file located at `android/app/src/main/AndroidManifest.xml`.
2. Ensure that you have the necessary permissions and configurations set up. Typically, no additional configurations are required for this package.

### iOS
1. Open your `Info.plist` file located at `ios/Runner/Info.plist`.
2. Similar to Android, no specific configurations are needed for this package.

## Usage
To use the `leancode_debug_page`, you need to initialize it in your main application file. Hereâ€™s how you can do it:

1. Import the package in your Dart file:
   ```dart
   import 'package:leancode_debug_page/leancode_debug_page.dart';
   ```

2. Initialize the debug page in your `main` function:
   ```dart
   void main() {
     runApp(MyApp());
     LeancodeDebugPage.init();
   }
   ```

3. Add the debug page to your widget tree:
   ```dart
   class MyApp extends StatelessWidget {
     @override
     Widget build(BuildContext context) {
       return MaterialApp(
         home: Scaffold(
           appBar: AppBar(title: Text('My Flutter App')),
           body: Center(child: Text('Hello, World!')),
           floatingActionButton: LeancodeDebugPage.floatingActionButton(),
         ),
       );
     }
   }
   ```

Now, when you run your application, you will have access to the debug page, which can be opened via the floating action button.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of leancode_debug_page

```dart
import 'package:flutter/material.dart';
import 'package:leancode_debug_page/leancode_debug_page.dart';

void main() {
  // Initialize the debug page when the app starts
  runApp(RealFlutter());
  LeancodeDebugPage.init();
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Real Flutter App',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Real Flutter App'),
        ),
        body: Center(
          child: Text('Welcome to Real Flutter!'),
        ),
        // Add the debug page's floating action button
        floatingActionButton: LeancodeDebugPage.floatingActionButton(),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function initializes the app and the debug page.
// 2. The RealFlutter class builds the main UI of the application.
// 3. The MaterialApp widget is used to set up the app's title and home screen.
// 4. The Scaffold widget provides a structure for the app, including an AppBar and a body.
// 5. The body contains a simple Center widget displaying a welcome message.
// 6. The floating action button from the leancode_debug_page package is added to the Scaffold, allowing users to access the debug page easily.
```

// Final Summary:
// The application starts by initializing the debug page and the main app. The UI consists of a simple welcome message, and the debug page can be accessed via the floating action button. This setup allows developers to monitor logs and performance metrics while interacting with the app, making it a valuable tool during development.
<!-- END_MAIN -->
```
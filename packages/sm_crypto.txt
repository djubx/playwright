<-- START_DESCRIPTION -->

# sm_crypto Flutter Package
==========================

The `sm_crypto` package provides a simple and secure way to encrypt and decrypt data in Flutter applications. It uses the AES-256-CBC algorithm for encryption and decryption, which is widely considered to be secure.

### When to Use

You should use this package when you need to store sensitive data, such as passwords, credit card numbers, or personal identifiable information, in your Flutter application.

### Features

*   AES-256-CBC encryption and decryption
*   Secure random key generation
*   Support for both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
================

### Step 1: Add the Package to Your Project

Add the following line to your `pubspec.yaml` file:

```yml
dependencies:
  sm_crypto: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:sm_crypto/sm_crypto.dart';
```

### Step 3: Generate a Secure Random Key

Generate a secure random key using the `SmCrypto.generateKey()` method:

```dart
final key = await SmCrypto.generateKey();
```

### Step 4: Encrypt Data

Encrypt your data using the `SmCrypto.encrypt()` method:

```dart
final encryptedData = await SmCrypto.encrypt(data: 'Hello, World!', key: key);
```

### Step 5: Decrypt Data

Decrypt your data using the `SmCrypto.decrypt()` method:

```dart
final decryptedData = await SmCrypto.decrypt(data: encryptedData, key: key);
```

### Platform-Specific Details

*   Android: The package uses the Android KeyStore to store the encryption key securely.
*   iOS: The package uses the iOS Keychain to store the encryption key securely.

### Required Configurations or Optimizations

*   Make sure to handle errors and exceptions properly when using the package.
*   Use a secure random key for encryption and decryption.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:sm_crypto/sm_crypto.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'sm_crypto Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _dataController = TextEditingController();
  final _keyController = TextEditingController();
  final _encryptedDataController = TextEditingController();
  final _decryptedDataController = TextEditingController();

  // Step 1: Generate a secure random key
  Future<void> _generateKey() async {
    final key = await SmCrypto.generateKey();
    _keyController.text = key;
  }

  // Step 2: Encrypt data
  Future<void> _encryptData() async {
    final data = _dataController.text;
    final key = _keyController.text;
    final encryptedData = await SmCrypto.encrypt(data: data, key: key);
    _encryptedDataController.text = encryptedData;
  }

  // Step 3: Decrypt data
  Future<void> _decryptData() async {
    final encryptedData = _encryptedDataController.text;
    final key = _keyController.text;
    final decryptedData = await SmCrypto.decrypt(data: encryptedData, key: key);
    _decryptedDataController.text = decryptedData;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('sm_crypto Example'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Column(
          children: [
            TextField(
              controller: _dataController,
              decoration: InputDecoration(
                labelText: 'Data',
                border: OutlineInputBorder(),
              ),
            ),
            SizedBox(height: 20),
            TextField(
              controller: _keyController,
              decoration: InputDecoration(
                labelText: 'Key',
                border: OutlineInputBorder(),
              ),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _generateKey,
              child: Text('Generate Key'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _encryptData,
              child: Text('Encrypt Data'),
            ),
            SizedBox(height: 20),
            TextField(
              controller: _encryptedDataController,
              decoration: InputDecoration(
                labelText: 'Encrypted Data',
                border: OutlineInputBorder(),
              ),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _decryptData,
              child: Text('Decrypt Data'),
            ),
            SizedBox(height: 20),
            TextField(
              controller: _decryptedDataController,
              decoration: InputDecoration(
                labelText: 'Decrypted Data',
                border: OutlineInputBorder(),
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user enters the data to be encrypted in the 'Data' text field.
// 2. The user clicks the 'Generate Key' button to generate a secure random key.
// 3. The user clicks the 'Encrypt Data' button to encrypt the data using the generated key.
// 4. The encrypted data is displayed in the 'Encrypted Data' text field.
// 5. The user clicks the 'Decrypt Data' button to decrypt the encrypted data using the same key.
// 6. The decrypted data is displayed in the 'Decrypted Data' text field.

```

<-- END_MAIN -->
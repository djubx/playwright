<-- START_DESCRIPTION -->

# uuid_helper Flutter Package
================================

The `uuid_helper` Flutter package is a utility library that provides a simple way to generate and manage universally unique identifiers (UUIDs) in Flutter applications. UUIDs are commonly used to identify unique objects or records in a database, and this package makes it easy to generate and validate them.

## Features

* Generate random UUIDs
* Validate UUIDs
* Convert UUIDs to and from strings

## When to Use

You should use this package whenever you need to generate or manage UUIDs in your Flutter application. For example:

* When creating a new user account, you might generate a UUID to serve as the user's ID.
* When storing data in a database, you might use UUIDs as primary keys.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
================

## Step 1: Add the Package to Your Project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  uuid_helper: ^1.0.0
```
Then, run `flutter pub get` to install the package.

## Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:uuid_helper/uuid_helper.dart';
```
## Step 3: Generate a UUID

Use the `UuidHelper` class to generate a random UUID:
```dart
final uuid = UuidHelper.generate();
print(uuid); // prints a random UUID
```
## Step 4: Validate a UUID

Use the `UuidHelper` class to validate a UUID:
```dart
final isValid = UuidHelper.isValid('your-uuid-here');
print(isValid); // prints true or false
```
## Platform-Specific Details

No platform-specific configurations are required for this package.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:uuid_helper/uuid_helper.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  String _uuid;

  // Step 1: Generate a UUID when the app starts
  @override
  void initState() {
    super.initState();
    _uuid = UuidHelper.generate();
  }

  // Step 2: Display the UUID on the screen
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('UUID Helper Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Text('Your UUID:'),
              Text(_uuid),
              SizedBox(height: 20),
              // Step 3: Validate the UUID when the button is pressed
              ElevatedButton(
                onPressed: () {
                  final isValid = UuidHelper.isValid(_uuid);
                  print('UUID is valid: $isValid');
                },
                child: Text('Validate UUID'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The app flows as follows:
// 1. When the app starts, a UUID is generated using UuidHelper.generate().
// 2. The UUID is displayed on the screen.
// 3. When the "Validate UUID" button is pressed, the UUID is validated using UuidHelper.isValid().
// 4. The result of the validation is printed to the console.

// In summary, this app demonstrates how to generate and validate UUIDs using the uuid_helper package.
```

<-- END_MAIN -->
```markdown
<!-- START_DESCRIPTION -->
# Exploring the hetu_script Flutter Package

The `hetu_script` package is a powerful scripting engine for Flutter applications, allowing developers to embed a scripting language into their apps. This package is particularly useful for scenarios where dynamic behavior is required, such as game development, customizable applications, or any situation where you want to allow users to modify the app's behavior without recompiling the code.

## When to Use hetu_script
- **Game Development**: For games that require dynamic content or behavior changes based on user input.
- **Customizable Applications**: When you want to allow users to create their own scripts to modify app behavior.
- **Rapid Prototyping**: To quickly test and iterate on features without needing to recompile the entire application.

## Key Features
- **Lightweight**: The package is designed to be efficient and lightweight, making it suitable for mobile applications.
- **Easy Integration**: It can be easily integrated into existing Flutter applications.
- **Dynamic Scripting**: Supports dynamic execution of scripts, allowing for real-time changes in application behavior.
- **Rich API**: Provides a rich set of APIs for interacting with Flutter widgets and services.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Setting Up and Using hetu_script

## Installation
To add the `hetu_script` package to your Flutter project, include it in your `pubspec.yaml` file:

```yaml
dependencies:
  hetu_script: ^latest_version
```

Make sure to run `flutter pub get` to install the package.

## Platform-Specific Configuration
### Android
For Android, ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

### iOS
For iOS, you may need to adjust your deployment target in the `ios/Podfile`:

```ruby
platform :ios, '10.0'
```

## Basic Usage
To use the `hetu_script` package, you need to create an instance of the `Hetu` class and execute scripts. Hereâ€™s a simple example of how to set it up:

```dart
import 'package:flutter/material.dart';
import 'package:hetu_script/hetu_script.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Create an instance of Hetu
    final hetu = Hetu();

    // Define a simple script
    final script = '''
      fun greet(name) {
        return "Hello, " + name + "!";
      }
    ''';

    // Execute the script
    hetu.execute(script);

    // Call the greet function
    final result = hetu.call('greet', ['World']);
    
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('hetu_script Example')),
        body: Center(child: Text(result)),
      ),
    );
  }
}
```

This example demonstrates how to create a simple script that greets a user. The `greet` function is defined in the script and called from the Flutter app.

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of hetu_script in Flutter

```dart
import 'package:flutter/material.dart';
import 'package:hetu_script/hetu_script.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Create an instance of Hetu
    final hetu = Hetu();

    // Define a simple script
    final script = '''
      fun greet(name) {
        return "Hello, " + name + "!";
      }
    ''';

    // Execute the script
    hetu.execute(script);

    // Call the greet function
    final result = hetu.call('greet', ['World']);
    
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('hetu_script Example')),
        body: Center(child: Text(result)),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function starts the Flutter application by calling runApp with RealFlutter.
// 2. In the RealFlutter widget, an instance of Hetu is created to handle scripting.
// 3. A simple script is defined that includes a function named 'greet'.
// 4. The script is executed using hetu.execute(script), which makes the function available for use.
// 5. The greet function is called with the argument 'World', and the result is stored in the variable 'result'.
// 6. The MaterialApp widget is built, displaying the result of the greet function in the center of the screen.
```
<!-- END_MAIN -->
```

```markdown
# Summary
In this blog post, we explored the `hetu_script` package, which allows for dynamic scripting within Flutter applications. We covered the installation process, platform-specific configurations, and provided a complete example demonstrating how to integrate and use the package effectively. The example showcased how to define and execute a simple script, highlighting the ease of use and flexibility that `hetu_script` offers for developers looking to enhance their Flutter applications with dynamic behavior.
```
<-- START_DESCRIPTION -->

# Azure CosmosDB Flutter Package
=====================================

The `azure_cosmosdb` Flutter package is a powerful tool for interacting with Azure Cosmos DB, a globally distributed, multi-model database service. This package allows you to easily integrate Cosmos DB into your Flutter applications, enabling you to store and retrieve data in a scalable and secure manner.

## When to Use This Package
---------------------------

You should use this package when:

* You need to store and retrieve large amounts of data in your Flutter application.
* You require a scalable and secure database solution.
* You want to take advantage of Cosmos DB's advanced features, such as global distribution and multi-model support.

## Features
------------

The `azure_cosmosdb` package provides the following features:

* Support for creating, reading, updating, and deleting documents in Cosmos DB.
* Support for querying documents using SQL and LINQ.
* Support for working with multiple Cosmos DB accounts and databases.
* Support for authentication using Azure Active Directory (AAD) and shared keys.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `azure_cosmosdb` package, you'll need to add it to your Flutter project's `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  azure_cosmosdb: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Platform-Specific Setup
---------------------------

### Android

To use the package on Android, you'll need to add the following permissions to your `AndroidManifest.xml` file:

```xml
<uses-permission android:name="android.permission.INTERNET" />
```

### iOS

To use the package on iOS, you'll need to add the following lines to your `Info.plist` file:

```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```

## Authentication
-----------------

To authenticate with Cosmos DB, you'll need to create an instance of the `CosmosClient` class and pass in your account's endpoint and key:

```dart
import 'package:azure_cosmosdb/azure_cosmosdb.dart';

void main() async {
  final client = CosmosClient(
    endpoint: 'https://your-account.documents.azure.com:443/',
    key: 'your-key',
  );

  // Use the client to interact with Cosmos DB
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:azure_cosmosdb/azure_cosmosdb.dart';

void main() async {
  // Create a new instance of the CosmosClient class
  final client = CosmosClient(
    endpoint: 'https://your-account.documents.azure.com:443/',
    key: 'your-key',
  );

  // Create a new database
  final database = await client.createDatabaseIfNotExists(
    id: 'your-database-id',
  );

  // Create a new container
  final container = await database.createContainerIfNotExists(
    id: 'your-container-id',
    partitionKey: '/your-partition-key',
  );

  // Create a new document
  final document = await container.createDocument(
    body: {
      'id': 'your-document-id',
      'name': 'John Doe',
      'age': 30,
    },
  );

  // Read the document
  final readDocument = await container.readDocument(
    id: document.id,
    partitionKey: document.partitionKey,
  );

  // Update the document
  final updatedDocument = await container.updateDocument(
    id: document.id,
    partitionKey: document.partitionKey,
    body: {
      'name': 'Jane Doe',
    },
  );

  // Delete the document
  await container.deleteDocument(
    id: document.id,
    partitionKey: document.partitionKey,
  );

  // Close the client
  client.close();
}

// The application flow is as follows:
// 1. Create a new instance of the CosmosClient class.
// 2. Create a new database using the createDatabaseIfNotExists method.
// 3. Create a new container using the createContainerIfNotExists method.
// 4. Create a new document using the createDocument method.
// 5. Read the document using the readDocument method.
// 6. Update the document using the updateDocument method.
// 7. Delete the document using the deleteDocument method.
// 8. Close the client using the close method.

// This code demonstrates the basic CRUD operations using the azure_cosmosdb package.
```

<-- END_MAIN -->
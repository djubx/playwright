<-- START_DESCRIPTION -->

# Animate Icons Flutter Package
================================

The `animate_icons` Flutter package allows you to easily animate icons in your Flutter application. It provides a simple and intuitive API for animating icons, making it a great addition to any Flutter project.

## When to Use This Package
---------------------------

You can use this package in a variety of scenarios, such as:

* Creating animated icons for buttons or other interactive elements
* Adding visual interest to your app's UI with animated icons
* Creating custom animated icons for your app's branding

## Features
------------

The `animate_icons` package includes the following features:

* Support for animating a wide range of icon types, including Material Design icons and custom icons
* Easy-to-use API for animating icons, with options for customizing animation duration, curve, and more
* Support for both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Using the Animate Icons Package
=============================================

## Step 1: Add the Package to Your Project
-----------------------------------------

To use the `animate_icons` package, you'll need to add it to your project's `pubspec.yaml` file. You can do this by adding the following line to the `dependencies` section of your `pubspec.yaml` file:
```yml
dependencies:
  animate_icons: ^1.0.0
```
Then, run `flutter pub get` to install the package.

## Step 2: Import the Package
---------------------------

Next, you'll need to import the `animate_icons` package in your Dart file. You can do this by adding the following line at the top of your file:
```dart
import 'package:animate_icons/animate_icons.dart';
```
## Step 3: Use the AnimateIcons Widget
--------------------------------------

To animate an icon, you can use the `AnimateIcons` widget. This widget takes an `icon` property, which specifies the icon to animate, as well as several optional properties for customizing the animation.

Here's an example of how to use the `AnimateIcons` widget:
```dart
AnimateIcons(
  icon: Icons.favorite,
  animationDuration: Duration(milliseconds: 500),
  curve: Curves.easeInOut,
)
```
This code will animate the `favorite` icon over a period of 500 milliseconds, using the `easeInOut` curve.

## Platform-Specific Details
---------------------------

The `animate_icons` package works on both Android and iOS platforms. However, there are some platform-specific details to keep in mind:

* On Android, the `AnimateIcons` widget uses the `AnimatedVectorDrawable` class to animate the icon. This means that the icon must be a vector drawable (i.e., an SVG file).
* On iOS, the `AnimateIcons` widget uses the `UIView.animate` method to animate the icon. This means that the icon can be any type of image, including a raster image (i.e., a PNG file).

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:animate_icons/animate_icons.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Step 1: Create a variable to store the current icon
  IconData _currentIcon = Icons.favorite_border;

  // Step 2: Create a function to toggle the icon
  void _toggleIcon() {
    setState(() {
      if (_currentIcon == Icons.favorite_border) {
        _currentIcon = Icons.favorite;
      } else {
        _currentIcon = Icons.favorite_border;
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Animate Icons Example'),
        ),
        body: Center(
          child: AnimateIcons(
            // Step 3: Pass the current icon to the AnimateIcons widget
            icon: _currentIcon,
            animationDuration: Duration(milliseconds: 500),
            curve: Curves.easeInOut,
            // Step 4: Call the _toggleIcon function when the icon is pressed
            onPressed: _toggleIcon,
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user presses the icon, which calls the _toggleIcon function.
// 2. The _toggleIcon function toggles the current icon and updates the state.
// 3. The AnimateIcons widget animates the new icon over a period of 500 milliseconds.
// 4. The animation is repeated every time the user presses the icon.
```

<-- END_MAIN -->
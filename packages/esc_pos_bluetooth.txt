```markdown
<!-- START_DESCRIPTION -->
# Overview of the esc_pos_bluetooth Flutter Package

The `esc_pos_bluetooth` package is a Flutter library designed for printing receipts and other documents via Bluetooth thermal printers. This package is particularly useful for applications that require mobile printing capabilities, such as point-of-sale systems, food delivery apps, and any other service that needs to generate physical receipts on the go.

## When to Use This Package
You should consider using `esc_pos_bluetooth` when:
- You need to print receipts or tickets from a Flutter application.
- Your application requires Bluetooth connectivity to communicate with thermal printers.
- You want to provide a seamless printing experience for users without needing to rely on external services.

## Key Features
- **Bluetooth Connectivity**: Easily connect to Bluetooth thermal printers.
- **ESC/POS Commands**: Supports ESC/POS commands for formatting receipts.
- **Customizable Printing**: Allows for customization of text, images, and layout.
- **Multi-Platform Support**: Works on both Android and iOS devices.

Overall, `esc_pos_bluetooth` is a powerful tool for developers looking to integrate Bluetooth printing into their Flutter applications, providing a straightforward API and robust functionality.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using esc_pos_bluetooth

## Installation
To get started with `esc_pos_bluetooth`, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  esc_pos_bluetooth: ^5.0.0
```

Run `flutter pub get` to install the package.

## Platform-Specific Configuration

### Android
1. Ensure that your `AndroidManifest.xml` file includes the necessary permissions for Bluetooth:
   ```xml
   <uses-permission android:name="android.permission.BLUETOOTH"/>
   <uses-permission android:name="android.permission.BLUETOOTH_ADMIN"/>
   ```

2. If targeting Android 12 or higher, you may also need to add:
   ```xml
   <uses-permission android:name="android.permission.BLUETOOTH_SCAN"/>
   <uses-permission android:name="android.permission.BLUETOOTH_CONNECT"/>
   ```

### iOS
1. Open your `Info.plist` file and add the following keys to request Bluetooth permissions:
   ```xml
   <key>NSBluetoothAlwaysUsageDescription</key>
   <string>This app requires Bluetooth access to connect to printers.</string>
   ```

## Basic Usage
Hereâ€™s how to use the `esc_pos_bluetooth` package in your Flutter application:

1. Import the package:
   ```dart
   import 'package:esc_pos_bluetooth/esc_pos_bluetooth.dart';
   ```

2. Create an instance of the `BluetoothPrinter` class and connect to a printer:
   ```dart
   final BluetoothPrinter printer = BluetoothPrinter.instance;
   ```

3. Discover available Bluetooth devices:
   ```dart
   List<BluetoothDevice> devices = await printer.getBondedDevices();
   ```

4. Connect to a selected device and print:
   ```dart
   final result = await printer.connect(device);
   if (result == PosPrintResult.success) {
     printer.text('Hello World!', styles: PosStyles.bold());
     printer.cut();
     printer.disconnect();
   }
   ```

This setup will allow you to connect to a Bluetooth printer and print a simple "Hello World!" message.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using esc_pos_bluetooth

```dart
import 'package:flutter/material.dart';
import 'package:esc_pos_bluetooth/esc_pos_bluetooth.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Bluetooth Printer Example',
      home: PrinterPage(),
    );
  }
}

class PrinterPage extends StatefulWidget {
  @override
  _PrinterPageState createState() => _PrinterPageState();
}

class _PrinterPageState extends State<PrinterPage> {
  final BluetoothPrinter printer = BluetoothPrinter.instance;
  List<BluetoothDevice> devices = [];
  BluetoothDevice? selectedDevice;

  @override
  void initState() {
    super.initState();
    _getDevices();
  }

  // Method to get the list of bonded Bluetooth devices
  Future<void> _getDevices() async {
    devices = await printer.getBondedDevices();
    setState(() {});
  }

  // Method to connect to the selected Bluetooth device and print
  Future<void> _printReceipt() async {
    if (selectedDevice == null) return;

    final result = await printer.connect(selectedDevice!);
    if (result == PosPrintResult.success) {
      printer.text('Receipt Title', styles: PosStyles.bold());
      printer.text('Item 1: \$10.00');
      printer.text('Item 2: \$15.00');
      printer.text('Total: \$25.00', styles: PosStyles.bold());
      printer.cut();
      printer.disconnect();
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Bluetooth Printer')),
      body: Column(
        children: [
          DropdownButton<BluetoothDevice>(
            hint: Text('Select Printer'),
            value: selectedDevice,
            onChanged: (BluetoothDevice? device) {
              setState(() {
                selectedDevice = device;
              });
            },
            items: devices.map((BluetoothDevice device) {
              return DropdownMenuItem<BluetoothDevice>(
                value: device,
                child: Text(device.name!),
              );
            }).toList(),
          ),
          ElevatedButton(
            onPressed: _printReceipt,
            child: Text('Print Receipt'),
          ),
        ],
      ),
    );
  }
}
```

// The above code is a complete Flutter application that demonstrates how to use the esc_pos_bluetooth package to print receipts via Bluetooth.
// 
// 1. The app starts with a simple MaterialApp containing a PrinterPage.
// 2. In the PrinterPage, we initialize the BluetoothPrinter instance and fetch the list of bonded devices.
// 3. A dropdown menu allows users to select a Bluetooth printer from the available devices.
// 4. When the "Print Receipt" button is pressed, the app connects to the selected printer and sends a formatted receipt to be printed.
// 5. The receipt includes a title, two items with prices, and a total, followed by a cut command to finish the print job.
// 6. After printing, the app disconnects from the printer to free up resources.

```
<!-- END_MAIN -->
``` 

This structured blog post provides a comprehensive overview of the `esc_pos_bluetooth` package, guiding developers through its features, setup, and practical usage in a Flutter application.
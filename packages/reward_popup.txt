Here's a detailed technical blog on the "reward_popup" Flutter package, structured as requested.

<!-- START_DESCRIPTION -->
# Reward Popup Flutter Package

The **reward_popup** Flutter package is a versatile tool designed to enhance user engagement by displaying reward popups in your Flutter applications. This package allows developers to create visually appealing popups that can be triggered based on specific user actions, such as completing a task, achieving a milestone, or simply as a reward for using the app.

## When to Use This Package

You might consider using the **reward_popup** package in scenarios such as:
- **Gamification**: To reward users for completing levels or tasks in a game.
- **E-commerce**: To notify users of discounts or rewards after making a purchase.
- **Learning Apps**: To celebrate achievements or milestones in educational applications.

## Features

- **Customizable UI**: The package allows for extensive customization of the popup's appearance, including colors, shapes, and animations.
- **Multiple Popup Types**: You can create different types of popups, such as success messages, rewards, or notifications.
- **Easy Integration**: The package is designed to be easily integrated into existing Flutter applications with minimal setup.

Overall, the **reward_popup** package is an excellent choice for developers looking to enhance user experience through engaging and interactive popups.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Reward Popup Package

## Step 1: Adding the Dependency

To get started, you need to add the **reward_popup** package to your Flutter project. Open your `pubspec.yaml` file and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  reward_popup: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command to install it:

```bash
flutter pub get
```

## Step 2: Platform-Specific Configuration

### Android

For Android, ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

### iOS

For iOS, you may need to add permissions in your `Info.plist` file if your popups require any specific permissions (like notifications). However, for basic usage, no additional configuration is required.

## Step 3: Using the Package

To use the **reward_popup** package, you need to import it into your Dart file:

```dart
import 'package:reward_popup/reward_popup.dart';
```

You can then create a simple button that triggers the reward popup when pressed:

```dart
ElevatedButton(
  onPressed: () {
    RewardPopup.show(
      context: context,
      title: 'Congratulations!',
      message: 'You have earned a reward!',
      icon: Icons.star,
    );
  },
  child: Text('Show Reward'),
);
```

This code snippet creates a button that, when pressed, displays a reward popup with a title, message, and icon.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using the Reward Popup Package

```dart
import 'package:flutter/material.dart';
import 'package:reward_popup/reward_popup.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Reward Popup Example',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Reward Popup Demo'),
        ),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              // Trigger the reward popup when the button is pressed
              RewardPopup.show(
                context: context,
                title: 'Congratulations!',
                message: 'You have earned a reward!',
                icon: Icons.star,
              );
            },
            child: Text('Show Reward'),
          ),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function initializes the Flutter app by calling runApp() with the RealFlutter widget.
// 2. The RealFlutter widget builds a MaterialApp with a title and a home Scaffold.
// 3. The Scaffold contains an AppBar with the title 'Reward Popup Demo'.
// 4. The body of the Scaffold has a Center widget that centers its child, which is an ElevatedButton.
// 5. When the ElevatedButton is pressed, it calls the RewardPopup.show() method.
// 6. The show method displays a popup with a title, message, and icon, enhancing user engagement.
```

// Final Summary:
// The application starts by initializing the Flutter framework and setting up a simple UI with a button. When the button is pressed, it triggers the reward popup, displaying a congratulatory message to the user. This flow demonstrates how easy it is to integrate the **reward_popup** package into a Flutter application, providing a seamless user experience.
<!-- END_MAIN --> 

This blog provides a comprehensive overview of the **reward_popup** package, including its features, setup instructions, and a complete example to help developers get started quickly.
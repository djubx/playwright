<-- START_DESCRIPTION -->

# Orientation Lock Checker Package
=====================================

The `orientation_lock_checker` package is a Flutter plugin that allows you to check if the device's screen orientation is locked or not. This package is useful when you want to ensure that your app is displayed in a specific orientation, such as landscape or portrait, and prevent the user from rotating the screen.

### Features

*   Checks if the device's screen orientation is locked or not
*   Supports both Android and iOS platforms
*   Provides a simple and easy-to-use API

### When to Use

You can use this package in scenarios where you want to:

*   Display a video or image in a specific orientation
*   Prevent the user from rotating the screen while playing a game
*   Ensure that your app's UI is displayed correctly in a specific orientation

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

### Setup

To use the `orientation_lock_checker` package, you need to add it to your project's `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  orientation_lock_checker: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Android Configuration

For Android, you need to add the following configuration to your `AndroidManifest.xml` file:

```xml
<activity
    android:name=".MainActivity"
    android:screenOrientation="portrait"
    android:configChanges="orientation|screenSize">
</activity>
```

This configuration sets the screen orientation to portrait and prevents the screen from rotating when the device is rotated.

### iOS Configuration

For iOS, you need to add the following configuration to your `Info.plist` file:

```xml
<key>UISupportedInterfaceOrientations</key>
<array>
    <string>UIInterfaceOrientationPortrait</string>
</array>
```

This configuration sets the supported interface orientations to portrait only.

### Usage

To use the `orientation_lock_checker` package, you can import it in your Dart file and use the `isOrientationLocked` function:

```dart
import 'package:orientation_lock_checker/orientation_lock_checker.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  bool _isOrientationLocked = false;

  @override
  void initState() {
    super.initState();
    _checkOrientationLock();
  }

  Future<void> _checkOrientationLock() async {
    final isLocked = await OrientationLockChecker.isOrientationLocked();
    setState(() {
      _isOrientationLocked = isLocked;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Orientation Lock Checker'),
      ),
      body: Center(
        child: Text(
          _isOrientationLocked
              ? 'Orientation is locked'
              : 'Orientation is not locked',
        ),
      ),
    );
  }
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:orientation_lock_checker/orientation_lock_checker.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Orientation Lock Checker Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  bool _isOrientationLocked = false;

  // Step 1: Check the orientation lock when the widget is initialized
  @override
  void initState() {
    super.initState();
    _checkOrientationLock();
  }

  // Step 2: Use the OrientationLockChecker to check the orientation lock
  Future<void> _checkOrientationLock() async {
    final isLocked = await OrientationLockChecker.isOrientationLocked();
    setState(() {
      _isOrientationLocked = isLocked;
    });
  }

  // Step 3: Display the result in the UI
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Orientation Lock Checker Demo'),
      ),
      body: Center(
        child: Text(
          _isOrientationLocked
              ? 'Orientation is locked'
              : 'Orientation is not locked',
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The RealFlutter widget is initialized and calls the _checkOrientationLock function.
// 2. The _checkOrientationLock function uses the OrientationLockChecker to check the orientation lock.
// 3. The result is displayed in the UI.
// The OrientationLockChecker package is used to check the orientation lock, and the result is displayed in the UI.

```

<-- END_MAIN -->
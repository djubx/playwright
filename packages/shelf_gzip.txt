<-- START_DESCRIPTION -->

**Shelf Gzip Flutter Package: A Comprehensive Overview**
===========================================================

The `shelf_gzip` Flutter package is a middleware that enables gzip compression for Shelf servers. Shelf is a web server framework for Dart that allows developers to build web servers using a modular and scalable architecture. Gzip compression is a widely used technique for reducing the size of HTTP responses, resulting in faster page loads and improved user experience.

**When to Use Shelf Gzip**
-------------------------

You should use `shelf_gzip` when building a Shelf server that needs to serve large amounts of data, such as images, videos, or JSON data. Gzip compression can significantly reduce the size of these responses, resulting in faster page loads and improved user experience.

**Features**
------------

*   Enables gzip compression for Shelf servers
*   Supports compression of HTTP responses
*   Configurable compression level

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setting Up Shelf Gzip**
-------------------------

To use `shelf_gzip`, you need to add it to your `pubspec.yaml` file:

```yml
dependencies:
  shelf_gzip: ^1.1.0
```

Then, run `flutter pub get` to install the package.

**Using Shelf Gzip**
--------------------

To use `shelf_gzip`, you need to create a Shelf server and add the `shelf_gzip` middleware to it. Here is an example:

```dart
import 'package:shelf/shelf.dart';
import 'package:shelf/shelf_io.dart' as shelf_io;
import 'package:shelf_gzip/shelf_gzip.dart';

Future<void> main() async {
  var server = await shelf_io.serve(
    gzipMiddleware(
      (request) => Response.ok(body: 'Hello, World!'),
    ),
    InternetAddress.anyIPv4,
    8080,
  );

  print('Server running on port ${server.port}');
}
```

This example creates a Shelf server that listens on port 8080 and responds with a gzip-compressed 'Hello, World!' message.

**Platform-Specific Details**
-----------------------------

`shelf_gzip` works on both Android and iOS platforms. However, on Android, you need to add the following configuration to your `AndroidManifest.xml` file:

```xml
<application
    ...
    android:usesCleartextTraffic="true"
    ...>
    ...
</application>
```

This configuration allows the app to use clear text traffic, which is required for gzip compression to work.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
// Import the necessary packages
import 'package:flutter/material.dart';
import 'package:shelf/shelf.dart';
import 'package:shelf/shelf_io.dart' as shelf_io;
import 'package:shelf_gzip/shelf_gzip.dart';

// Create a new Flutter app
void main() {
  runApp(MyApp());
}

// Create a new stateless widget
class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Shelf Gzip Demo',
      home: MyHomePage(),
    );
  }
}

// Create a new stateful widget
class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

// Create a new state class
class _MyHomePageState extends State<MyHomePage> {
  // Create a new Shelf server
  Future<void> _createServer() async {
    var server = await shelf_io.serve(
      gzipMiddleware(
        (request) => Response.ok(body: 'Hello, World!'),
      ),
      InternetAddress.anyIPv4,
      8080,
    );

    print('Server running on port ${server.port}');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Shelf Gzip Demo'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: _createServer,
          child: Text('Create Server'),
        ),
      ),
    );
  }
}

// The following comments explain the flow of the application:

// 1. The user opens the app and is presented with a button to create a server.
// 2. When the user clicks the button, the `_createServer` function is called.
// 3. The `_createServer` function creates a new Shelf server using the `shelf_io` package.
// 4. The server is configured to use the `gzipMiddleware` from the `shelf_gzip` package.
// 5. The server listens on port 8080 and responds with a gzip-compressed 'Hello, World!' message.
// 6. The user can then access the server by navigating to `http://localhost:8080` in their web browser.

// Summary: This code creates a new Flutter app that allows the user to create a Shelf server with gzip compression.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

Stream Chat Flutter Core
========================
The `stream_chat_flutter_core` package is a Flutter package that provides a set of widgets and utilities to build chat applications using the Stream Chat platform. It allows developers to easily integrate chat functionality into their Flutter apps, including features such as messaging, file sharing, and user management.

When to Use This Package
------------------------

This package is ideal for building chat-based applications, such as:

* Social media apps with messaging features
* Customer support chatbots
* Team collaboration tools
* Live streaming apps with chat functionality

Features
--------

The `stream_chat_flutter_core` package includes the following features:

* Chat messaging with text, images, and files
* User management with profiles and avatars
* Channel management with support for public and private channels
* Emoji and GIF support
* File sharing and uploading
* Support for multiple chat platforms, including Stream Chat and Firebase Firestore

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Configuration
-----------------------

To use the `stream_chat_flutter_core` package, follow these steps:

### Step 1: Add the Package to Your Flutter Project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  stream_chat_flutter_core: ^2.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:stream_chat_flutter_core/stream_chat_flutter_core.dart';
```
### Step 3: Initialize the Stream Chat Client

Create a new instance of the `StreamChatClient` class and initialize it with your Stream Chat API key:
```dart
final client = StreamChatClient(
  apiKey: 'YOUR_API_KEY',
  appId: 'YOUR_APP_ID',
);
```
### Step 4: Create a Chat Channel

Create a new chat channel using the `client.createChannel()` method:
```dart
final channel = client.createChannel(
  type: 'messaging',
  id: 'general',
  name: 'General',
);
```
### Step 5: Send a Message

Send a message to the channel using the `channel.sendMessage()` method:
```dart
channel.sendMessage(
  Message(
    text: 'Hello, world!',
  ),
);
```
Platform-Specific Details
-------------------------

### Android

To use the `stream_chat_flutter_core` package on Android, you need to add the following lines to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.INTERNET" />
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
```
### iOS

To use the `stream_chat_flutter_core` package on iOS, you need to add the following lines to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:stream_chat_flutter_core/stream_chat_flutter_core.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Stream Chat Flutter Core Example',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _client = StreamChatClient(
    apiKey: 'YOUR_API_KEY',
    appId: 'YOUR_APP_ID',
  );

  final _channel = _client.createChannel(
    type: 'messaging',
    id: 'general',
    name: 'General',
  );

  final _textController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Stream Chat Flutter Core Example'),
      ),
      body: Column(
        children: [
          Expanded(
            child: MessageList(
              channel: _channel,
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: Row(
              children: [
                Expanded(
                  child: TextField(
                    controller: _textController,
                    decoration: InputDecoration(
                      border: OutlineInputBorder(),
                      hintText: 'Type a message',
                    ),
                  ),
                ),
                SizedBox(width: 16),
                ElevatedButton(
                  onPressed: () {
                    _channel.sendMessage(
                      Message(
                        text: _textController.text,
                      ),
                    );
                    _textController.clear();
                  },
                  child: Text('Send'),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}

// The app starts by creating a new instance of the StreamChatClient class.
// This instance is used to create a new chat channel.
// The channel is then used to send and receive messages.
// The MessageList widget is used to display the messages in the channel.
// The TextField and ElevatedButton are used to send new messages.
// When the user types a message and clicks the send button, the message is sent to the channel.
// The MessageList widget is updated in real-time to display the new message.
```

<-- END_MAIN -->
```markdown
<!-- START_DESCRIPTION -->
# Custom Date Picker Flutter Package

The `custom_date_picker` package is a versatile and customizable date picker for Flutter applications. It allows developers to create a date selection interface that can be tailored to fit the design and functionality needs of their apps. This package is particularly useful when you want to provide users with a more engaging and visually appealing way to select dates, beyond the standard date picker provided by Flutter.

## When to Use This Package
- When you need a date picker that matches your app's theme and design.
- If you want to provide users with a more interactive date selection experience.
- When you require additional features like date range selection or custom formatting.

## Features
- **Customizable UI**: Easily change colors, fonts, and styles to match your app's design.
- **Date Range Selection**: Allows users to select a range of dates.
- **Localization Support**: Supports multiple languages and formats.
- **Easy Integration**: Simple to integrate into existing Flutter projects.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Custom Date Picker

In this tutorial, we will walk through the process of setting up the `custom_date_picker` package in a Flutter project and demonstrate how to use it effectively.

## Step 1: Adding the Package to Your Project
To get started, you need to add the `custom_date_picker` package to your `pubspec.yaml` file. Open the file and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  custom_date_picker: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command in your terminal to install the package:

```bash
flutter pub get
```

## Step 2: Platform-Specific Configuration
### Android
For Android, ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

### iOS
For iOS, you may need to update your `Info.plist` to include any necessary permissions, especially if you are using features that require user permissions.

## Step 3: Using the Custom Date Picker
Now that the package is installed, you can start using it in your Flutter application. Below is a simple example of how to implement the `custom_date_picker` in your app.

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of Custom Date Picker

```dart
import 'package:flutter/material.dart';
import 'package:custom_date_picker/custom_date_picker.dart'; // Import the package

void main() {
  runApp(RealFlutter()); // Run the main app
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Custom Date Picker Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: DatePickerDemo(), // Set the home widget
    );
  }
}

class DatePickerDemo extends StatefulWidget {
  @override
  _DatePickerDemoState createState() => _DatePickerDemoState();
}

class _DatePickerDemoState extends State<DatePickerDemo> {
  DateTime? selectedDate; // Variable to hold the selected date

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Custom Date Picker Demo'), // App bar title
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              selectedDate == null
                  ? 'No date selected!'
                  : 'Selected Date: ${selectedDate!.toLocal()}'.split(' ')[0], // Display selected date
              style: TextStyle(fontSize: 20),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () async {
                // Show the custom date picker when button is pressed
                DateTime? pickedDate = await showCustomDatePicker(context);
                if (pickedDate != null && pickedDate != selectedDate) {
                  setState(() {
                    selectedDate = pickedDate; // Update the selected date
                  });
                }
              },
              child: Text('Select Date'), // Button text
            ),
          ],
        ),
      ),
    );
  }

  Future<DateTime?> showCustomDatePicker(BuildContext context) {
    // Function to show the custom date picker
    return showDialog<DateTime>(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Pick a date'), // Dialog title
          content: CustomDatePicker(
            initialDate: DateTime.now(), // Set initial date
            firstDate: DateTime(2000), // Set the first selectable date
            lastDate: DateTime(2101), // Set the last selectable date
            onDateSelected: (DateTime date) {
              Navigator.of(context).pop(date); // Return the selected date
            },
          ),
        );
      },
    );
  }
}
```

```
// The above code demonstrates a simple Flutter application using the custom_date_picker package.
// 
// 1. The main function initializes the app by running the RealFlutter widget.
// 2. The RealFlutter widget sets up the MaterialApp with a title and theme.
// 3. The DatePickerDemo widget is a stateful widget that manages the selected date.
// 4. Inside the build method, we display the selected date or a message if no date is selected.
// 5. An ElevatedButton is provided to trigger the date picker dialog.
// 6. When the button is pressed, the showCustomDatePicker function is called, which displays an AlertDialog containing the CustomDatePicker.
// 7. The CustomDatePicker allows the user to select a date, and upon selection, the date is returned and displayed in the main UI.
// 
// This example showcases how to integrate the custom_date_picker package into a Flutter application, providing a user-friendly date selection experience.
<!-- END_MAIN -->
```
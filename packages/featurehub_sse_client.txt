<-- START_DESCRIPTION -->

**Featurehub SSE Client Flutter Package**
=====================================

The `featurehub_sse_client` Flutter package provides a client for connecting to FeatureHub, a feature management platform that allows you to manage and roll out features to your application in real-time. This package uses Server-Sent Events (SSE) to establish a connection to the FeatureHub server and receive updates on feature toggles.

**When to Use This Package**
---------------------------

You should use this package when you want to integrate FeatureHub into your Flutter application and take advantage of its feature management capabilities. This package is particularly useful when you want to:

* Roll out new features to your application gradually
* Conduct A/B testing and experimentation
* Manage feature toggles in real-time

**Features**
------------

The `featurehub_sse_client` package provides the following features:

* Connects to FeatureHub server using SSE
* Receives updates on feature toggles in real-time
* Allows you to evaluate feature toggles and get their current values
* Supports caching of feature toggle values

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setup and Usage**
-------------------

To use the `featurehub_sse_client` package, follow these steps:

### Step 1: Add the Package to Your Pubspec

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  featurehub_sse_client: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:featurehub_sse_client/featurehub_sse_client.dart';
```
### Step 3: Initialize the Client

Initialize the client with your FeatureHub API key and URL:
```dart
final client = FeatureHubSSEClient(
  apiKey: 'YOUR_API_KEY',
  url: 'https://your-featurehub-instance.com',
);
```
### Step 4: Connect to FeatureHub

Connect to FeatureHub using the `connect` method:
```dart
client.connect();
```
### Step 5: Evaluate Feature Toggles

Evaluate feature toggles using the `evaluate` method:
```dart
final toggleValue = client.evaluate('my-feature-toggle');
```
### Platform-Specific Details

* Android: Make sure to add the `android.permission.INTERNET` permission to your `AndroidManifest.xml` file.
* iOS: Make sure to add the `NSAppTransportSecurity` key to your `Info.plist` file and set it to `NSAllowsArbitraryLoads`.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:featurehub_sse_client/featurehub_sse_client.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'FeatureHub SSE Client Example',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final client = FeatureHubSSEClient(
    apiKey: 'YOUR_API_KEY',
    url: 'https://your-featurehub-instance.com',
  );

  @override
  void initState() {
    super.initState();
    client.connect();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('FeatureHub SSE Client Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Feature Toggle Value:',
              style: TextStyle(fontSize: 24),
            ),
            Text(
              client.evaluate('my-feature-toggle').toString(),
              style: TextStyle(fontSize: 48),
            ),
          ],
        ),
      ),
    );
  }
}

// Application flow:
// 1. The app initializes the FeatureHub SSE client with the API key and URL.
// 2. The app connects to FeatureHub using the `connect` method.
// 3. The app evaluates the feature toggle using the `evaluate` method.
// 4. The app displays the feature toggle value on the screen.
// 5. When the feature toggle value changes, the app receives an update from FeatureHub and updates the display.

// Final summary:
// This example demonstrates how to use the FeatureHub SSE client to connect to FeatureHub and evaluate feature toggles in real-time. The app initializes the client, connects to FeatureHub, evaluates the feature toggle, and displays the value on the screen. When the feature toggle value changes, the app receives an update and updates the display.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Firebase Auth Games Services Flutter Package
=============================================

The `firebase_auth_games_services` Flutter package provides a simple and convenient way to integrate Firebase Authentication and Google Play Games Services into your Flutter app. This package allows you to authenticate users using Firebase Authentication and then use the authenticated user to access Google Play Games Services.

## When to Use This Package
---------------------------

You should use this package when you want to integrate Firebase Authentication and Google Play Games Services into your Flutter app. This package is particularly useful when you want to:

* Authenticate users using Firebase Authentication
* Use the authenticated user to access Google Play Games Services
* Simplify the process of integrating Firebase Authentication and Google Play Games Services into your Flutter app

## Features
------------

The `firebase_auth_games_services` package provides the following features:

* Firebase Authentication integration
* Google Play Games Services integration
* Simplified API for accessing Google Play Games Services
* Support for Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Package
=============================================

## Step 1: Add the Package to Your Flutter Project
------------------------------------------------

To add the `firebase_auth_games_services` package to your Flutter project, you need to add the following dependency to your `pubspec.yaml` file:
```yml
dependencies:
  flutter:
    sdk: flutter
  firebase_auth_games_services: ^1.0.0
```
Then, run `flutter pub get` to get the package.

## Step 2: Set Up Firebase Authentication
-----------------------------------------

To set up Firebase Authentication, you need to create a Firebase project and enable Firebase Authentication. You can do this by following these steps:

1. Go to the Firebase console and create a new Firebase project.
2. Click on the "Authentication" tab and click on the "Get started" button.
3. Follow the instructions to set up Firebase Authentication.

## Step 3: Set Up Google Play Games Services
-------------------------------------------

To set up Google Play Games Services, you need to create a Google Play Games Services project and link it to your Firebase project. You can do this by following these steps:

1. Go to the Google Play Console and create a new Google Play Games Services project.
2. Click on the "Linked apps" tab and click on the "Link app" button.
3. Follow the instructions to link your Firebase project to your Google Play Games Services project.

## Step 4: Configure the Package
---------------------------------

To configure the package, you need to add the following code to your `main.dart` file:
```dart
import 'package:flutter/material.dart';
import 'package:firebase_auth_games_services/firebase_auth_games_services.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Firebase Auth Games Services Demo',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Firebase Auth Games Services Demo'),
        ),
        body: Center(
          child: ElevatedButton(
            onPressed: () async {
              // Authenticate the user using Firebase Authentication
              final user = await FirebaseAuth.instance.signInAnonymously();

              // Use the authenticated user to access Google Play Games Services
              final gamesServices = FirebaseGamesServices(user: user);
              final achievements = await gamesServices.getAchievements();
              print(achievements);
            },
            child: Text('Authenticate and Get Achievements'),
          ),
        ),
      ),
    );
  }
}
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:firebase_auth_games_services/firebase_auth_games_services.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Firebase Auth Games Services Demo',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Firebase Auth Games Services Demo'),
        ),
        body: Center(
          child: ElevatedButton(
            onPressed: () async {
              // Step 1: Authenticate the user using Firebase Authentication
              final user = await FirebaseAuth.instance.signInAnonymously();

              // Step 2: Use the authenticated user to access Google Play Games Services
              final gamesServices = FirebaseGamesServices(user: user);

              // Step 3: Get the achievements
              final achievements = await gamesServices.getAchievements();
              print(achievements);

              // Step 4: Unlock an achievement
              await gamesServices.unlockAchievement('achievement_id');

              // Step 5: Get the leaderboards
              final leaderboards = await gamesServices.getLeaderboards();
              print(leaderboards);

              // Step 6: Submit a score to a leaderboard
              await gamesServices.submitScore('leaderboard_id', 100);
            },
            child: Text('Authenticate and Get Achievements'),
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user clicks the "Authenticate and Get Achievements" button.
// 2. The user is authenticated using Firebase Authentication.
// 3. The authenticated user is used to access Google Play Games Services.
// 4. The achievements are retrieved and printed to the console.
// 5. An achievement is unlocked.
// 6. The leaderboards are retrieved and printed to the console.
// 7. A score is submitted to a leaderboard.

// The code flow is as follows:
// 1. The RealFlutter widget is created and returned by the main function.
// 2. The RealFlutter widget builds a MaterialApp with a Scaffold.
// 3. The Scaffold has an AppBar with a title and a body with a Center widget.
// 4. The Center widget has an ElevatedButton with an onPressed callback.
// 5. The onPressed callback authenticates the user using Firebase Authentication.
// 6. The authenticated user is used to access Google Play Games Services.
// 7. The achievements are retrieved and printed to the console.
// 8. An achievement is unlocked.
// 9. The leaderboards are retrieved and printed to the console.
// 10. A score is submitted to a leaderboard.
```
<-- END_MAIN -->
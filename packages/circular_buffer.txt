<-- START_DESCRIPTION -->

Circular Buffer Package for Flutter
=====================================

The `circular_buffer` package provides a data structure that stores a fixed-size buffer of elements, where the oldest element is overwritten when the buffer is full and a new element is added. This package is useful when you need to store a limited amount of data, such as logs or sensor readings, and want to efficiently manage the data without running out of memory.

When to Use This Package
------------------------

*   When you need to store a fixed-size buffer of elements.
*   When you want to efficiently manage data without running out of memory.
*   When you need to implement a queue or a stack with a fixed size.

Features
--------

*   Stores a fixed-size buffer of elements.
*   Automatically overwrites the oldest element when the buffer is full and a new element is added.
*   Provides methods to add, remove, and access elements in the buffer.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
---------------

To use the `circular_buffer` package, follow these steps:

1.  Add the package to your `pubspec.yaml` file:

    ```yml
dependencies:
  flutter:
    sdk: flutter
  circular_buffer: ^1.0.0
```

2.  Run `flutter pub get` to install the package.
3.  Import the package in your Dart file:

    ```dart
import 'package:circular_buffer/circular_buffer.dart';
```

### Creating a Circular Buffer

To create a circular buffer, use the `CircularBuffer` constructor and specify the buffer size:

```dart
CircularBuffer<int> buffer = CircularBuffer<int>(size: 10);
```

### Adding Elements

To add an element to the buffer, use the `add` method:

```dart
buffer.add(1);
buffer.add(2);
buffer.add(3);
```

### Accessing Elements

To access an element in the buffer, use the `operator[]`:

```dart
int element = buffer[0];
```

### Removing Elements

To remove an element from the buffer, use the `remove` method:

```dart
buffer.remove(1);
```

### Checking if the Buffer is Full

To check if the buffer is full, use the `isFull` property:

```dart
bool isFull = buffer.isFull;
```

### Checking if the Buffer is Empty

To check if the buffer is empty, use the `isEmpty` property:

```dart
bool isEmpty = buffer.isEmpty;
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:circular_buffer/circular_buffer.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Circular Buffer Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  CircularBuffer<int> _buffer = CircularBuffer<int>(size: 10);

  void _addElement() {
    // Add an element to the buffer
    _buffer.add(_buffer.length + 1);
    setState(() {});
  }

  void _removeElement() {
    // Remove the first element from the buffer
    if (!_buffer.isEmpty) {
      _buffer.remove(_buffer[0]);
      setState(() {});
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Circular Buffer Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Buffer:',
              style: TextStyle(fontSize: 24),
            ),
            Text(
              _buffer.toString(),
              style: TextStyle(fontSize: 24),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _addElement,
              child: Text('Add Element'),
            ),
            SizedBox(height: 10),
            ElevatedButton(
              onPressed: _removeElement,
              child: Text('Remove Element'),
            ),
          ],
        ),
      ),
    );
  }
}

// The app starts by creating a Material app with a home page.
// The home page is a stateful widget that maintains a circular buffer of integers.
// The buffer is displayed on the screen, and two buttons are provided to add and remove elements from the buffer.
// When an element is added or removed, the state is updated, and the UI is rebuilt to reflect the new buffer contents.
// The app demonstrates the basic operations of a circular buffer, including adding and removing elements, and checking if the buffer is full or empty.
```

<-- END_MAIN -->
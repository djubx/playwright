<-- START_DESCRIPTION -->

# Flutter Chat List Package
The `flutter_chat_list` package is a powerful and customizable Flutter package used to create chat lists with ease. It provides a simple and efficient way to display a list of chat messages, including text, images, and other media.

## When to Use
This package is ideal for building chat applications, messaging platforms, or any other app that requires a chat list feature. It's also suitable for developers who want to create a custom chat interface without starting from scratch.

## Features
Some of the key features of the `flutter_chat_list` package include:

* Customizable chat bubble styles and layouts
* Support for text, image, and other media messages
* Automatic scrolling and pagination
* Easy integration with existing Flutter projects

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
To use the `flutter_chat_list` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_chat_list: ^1.0.0
```
2. Run `flutter pub get` to install the package.
3. Import the package in your Dart file:
```dart
import 'package:flutter_chat_list/flutter_chat_list.dart';
```
4. Create a `ChatList` widget and pass in your chat data:
```dart
ChatList(
  messages: [
    ChatMessage(
      text: 'Hello!',
      sender: 'John Doe',
    ),
    ChatMessage(
      text: 'Hi!',
      sender: 'Jane Doe',
    ),
  ],
)
```
## Platform-Specific Details
For Android, you may need to add the following configuration to your `AndroidManifest.xml` file:
```xml
<application
  ...
  android:usesCleartextTraffic="true"
>
```
For iOS, you may need to add the following configuration to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_chat_list/flutter_chat_list.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Chat List Demo',
      home: ChatListScreen(),
    );
  }
}

class ChatListScreen extends StatefulWidget {
  @override
  _ChatListScreenState createState() => _ChatListScreenState();
}

class _ChatListScreenState extends State<ChatListScreen> {
  List<ChatMessage> _messages = [
    ChatMessage(
      text: 'Hello!',
      sender: 'John Doe',
    ),
    ChatMessage(
      text: 'Hi!',
      sender: 'Jane Doe',
    ),
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Chat List Demo'),
      ),
      body: ChatList(
        messages: _messages,
        onMessageTap: (message) {
          print('Tapped on message: ${message.text}');
        },
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          setState(() {
            _messages.add(
              ChatMessage(
                text: 'New message!',
                sender: 'John Doe',
              ),
            );
          });
        },
        tooltip: 'Send message',
        child: Icon(Icons.send),
      ),
    );
  }
}

// Application flow:
// 1. The user opens the app and is presented with a chat list screen.
// 2. The chat list is populated with initial messages.
// 3. The user can tap on a message to print its text to the console.
// 4. The user can press the floating action button to send a new message.
// 5. The new message is added to the chat list and the UI is updated.

// Summary:
// This code demonstrates a basic chat list application using the `flutter_chat_list` package.
// It shows how to create a chat list, populate it with messages, and handle user interactions.
```

<-- END_MAIN -->
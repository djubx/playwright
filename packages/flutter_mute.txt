<-- START_DESCRIPTION -->

# Flutter Mute Package Overview
================================

The `flutter_mute` package is a Flutter plugin that allows developers to control the device's volume and mute state. It provides a simple API to check the current volume level, set the volume to a specific level, and toggle the mute state.

## When to Use This Package
---------------------------

This package is useful in scenarios where you want to control the device's volume programmatically, such as:

* Creating a music or video player app that requires volume control
* Developing a game that needs to adjust the volume based on the game's state
* Building an app that requires a silent mode or a "do not disturb" feature

## Features
------------

The `flutter_mute` package provides the following features:

* Get the current volume level
* Set the volume to a specific level
* Toggle the mute state
* Check if the device is currently muted

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Flutter Mute Package
=====================================

To use the `flutter_mute` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_mute: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:flutter_mute/flutter_mute.dart';
```
### Step 3: Initialize the Package

Initialize the package in your `main` function:
```dart
void main() {
  runApp(MyApp());
  FlutterMute.init();
}
```
### Platform-Specific Details

#### Android

On Android, you need to add the following permission to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.MODIFY_AUDIO_SETTINGS" />
```
#### iOS

On iOS, you need to add the following code to your `Info.plist` file:
```xml
<key>UIBackgroundModes</key>
<array>
    <string>audio</string>
</array>
```
### Required Configurations

You need to configure the package to use the correct audio session category. You can do this by calling the `setAudioSessionCategory` method:
```dart
FlutterMute.setAudioSessionCategory(AudioSessionCategory.ambient);
```
### Optimizations

To optimize the package's performance, you can call the `release` method when you're done using it:
```dart
FlutterMute.release();
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_mute/flutter_mute.dart';

void main() {
  runApp(MyApp());
  FlutterMute.init();
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Mute Example',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  double _volume = 0.5;
  bool _isMuted = false;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Mute Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Slider(
              value: _volume,
              onChanged: (value) {
                setState(() {
                  _volume = value;
                  FlutterMute.setVolume(_volume);
                });
              },
            ),
            Switch(
              value: _isMuted,
              onChanged: (value) {
                setState(() {
                  _isMuted = value;
                  FlutterMute.setMuted(_isMuted);
                });
              },
            ),
            Text(
              _isMuted ? 'Muted' : 'Unmuted',
              style: TextStyle(fontSize: 24),
            ),
          ],
        ),
      ),
    );
  }
}

// The app starts by initializing the FlutterMute package.
// The MyApp widget is then built, which contains a Material app with a single page.
// The MyHomePage widget is then built, which contains a Scaffold with an app bar and a body.
// The body contains a Slider widget that allows the user to adjust the volume.
// When the user adjusts the slider, the volume is updated using the FlutterMute.setVolume method.
// The body also contains a Switch widget that allows the user to toggle the mute state.
// When the user toggles the switch, the mute state is updated using the FlutterMute.setMuted method.
// The app then displays the current mute state as a text label.
```

<-- END_MAIN -->
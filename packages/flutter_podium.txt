<-- START_DESCRIPTION -->

# Flutter Podium Package Overview
=====================================

The `flutter_podium` package is a powerful tool for creating interactive, animated, and customizable bottom sheets in Flutter applications. It provides a simple and intuitive API for creating bottom sheets that can be used to display additional content, such as menus, settings, or other interactive elements.

### When to Use

The `flutter_podium` package is ideal for situations where you need to display additional content that is not critical to the main application flow. Some examples of when to use this package include:

* Displaying a menu or settings panel
* Providing additional information or context to the user
* Creating a interactive tutorial or guide
* Displaying a list of options or actions

### Features

The `flutter_podium` package includes a range of features that make it easy to create customizable bottom sheets, including:

* Support for custom animations and transitions
* Ability to add custom content, such as text, images, and buttons
* Support for different bottom sheet styles, such as modal and non-modal
* Ability to customize the appearance and behavior of the bottom sheet

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the Flutter Podium Package
=====================================================

To use the `flutter_podium` package, you will need to add it to your Flutter project and import it into your Dart file.

### Adding the Package to Your Project

To add the `flutter_podium` package to your project, you can use the following command:
```bash
flutter pub add flutter_podium
```
This will add the package to your project and make it available for use.

### Importing the Package

To import the `flutter_podium` package into your Dart file, you can use the following import statement:
```dart
import 'package:flutter_podium/flutter_podium.dart';
```
This will make the package available for use in your Dart file.

### Basic Usage

To use the `flutter_podium` package, you can create a new instance of the `FlutterPodium` class and pass in the required parameters. For example:
```dart
FlutterPodium(
  child: Text('Hello, World!'),
  onPressed: () {
    print('Button pressed!');
  },
)
```
This will create a basic bottom sheet with a text child and a button that prints a message to the console when pressed.

### Customizing the Bottom Sheet

To customize the appearance and behavior of the bottom sheet, you can use the various properties and methods provided by the `FlutterPodium` class. For example:
```dart
FlutterPodium(
  child: Text('Hello, World!'),
  onPressed: () {
    print('Button pressed!');
  },
  style: FlutterPodiumStyle(
    backgroundColor: Colors.blue,
    textColor: Colors.white,
  ),
)
```
This will create a bottom sheet with a blue background and white text.

### Platform-Specific Details

The `flutter_podium` package is designed to work on both Android and iOS platforms. However, there are some platform-specific details to be aware of:

* On Android, the bottom sheet is displayed as a modal dialog by default. To display it as a non-modal dialog, you can use the `isModal` property.
* On iOS, the bottom sheet is displayed as a non-modal dialog by default. To display it as a modal dialog, you can use the `isModal` property.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_podium/flutter_podium.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Podium Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Podium Example'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Create a new instance of the FlutterPodium class
            FlutterPodium(
              // Pass in the required parameters
              child: Text('Hello, World!'),
              onPressed: () {
                print('Button pressed!');
              },
              // Customize the appearance and behavior of the bottom sheet
              style: FlutterPodiumStyle(
                backgroundColor: Colors.blue,
                textColor: Colors.white,
              ),
            ).show(context);
          },
          child: Text('Show Bottom Sheet'),
        ),
      ),
    );
  }
}
```

// The application flow is as follows:
// 1. The user presses the "Show Bottom Sheet" button.
// 2. A new instance of the FlutterPodium class is created and passed in the required parameters.
// 3. The bottom sheet is displayed with the customized appearance and behavior.
// 4. The user presses the button on the bottom sheet.
// 5. The onPressed callback is called and prints a message to the console.

// In summary, the code creates a basic Flutter application with a button that displays a bottom sheet when pressed. The bottom sheet is customized with a blue background and white text, and prints a message to the console when the button is pressed.

<-- END_MAIN -->
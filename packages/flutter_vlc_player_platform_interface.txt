<-- START_DESCRIPTION -->

# Flutter VLC Player Platform Interface
=====================================

The `flutter_vlc_player_platform_interface` package provides a platform-agnostic interface for playing media using the VLC player in Flutter applications. It allows developers to embed VLC player instances in their Flutter apps, enabling the playback of various media formats.

## When to Use This Package
---------------------------

This package is ideal for applications that require:

*   Playback of multiple media formats, including videos and audio files
*   Support for various platforms, including Android and iOS
*   Customizable player controls and UI
*   Integration with other Flutter packages and widgets

## Features
------------

*   Platform-agnostic interface for playing media using VLC player
*   Support for multiple media formats, including videos and audio files
*   Customizable player controls and UI
*   Integration with other Flutter packages and widgets

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `flutter_vlc_player_platform_interface` package, follow these steps:

### Step 1: Add the Package to Your Project

Add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  flutter_vlc_player_platform_interface: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:flutter_vlc_player_platform_interface/flutter_vlc_player_platform_interface.dart';
```

### Step 3: Create a VLC Player Instance

Create a VLC player instance using the `VlcPlayer` class:

```dart
VlcPlayer _vlcPlayer = VlcPlayer(
  onInit: () {
    _vlcPlayer.play();
  },
);
```

### Step 4: Add the Player to Your Widget Tree

Add the VLC player instance to your widget tree:

```dart
@override
Widget build(BuildContext context) {
  return Scaffold(
    appBar: AppBar(
      title: Text('VLC Player Example'),
    ),
    body: Center(
      child: _vlcPlayer,
    ),
  );
}
```

### Platform-Specific Details

*   **Android:** Make sure to add the necessary permissions to your `AndroidManifest.xml` file:

    ```xml
<uses-permission android:name="android.permission.INTERNET" />
```

*   **iOS:** Add the necessary frameworks to your `Info.plist` file:

    ```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```

### Required Configurations and Optimizations

*   **Android:** You may need to configure the VLC player to use a specific hardware decoder. You can do this by adding the following code to your `onInit` callback:

    ```dart
_vlcPlayer.setOption(':hwaccel=auto');
```

*   **iOS:** You may need to configure the VLC player to use a specific video output. You can do this by adding the following code to your `onInit` callback:

    ```dart
_vlcPlayer.setOption(':vout=ios');
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_vlc_player_platform_interface/flutter_vlc_player_platform_interface.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'VLC Player Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  VlcPlayer _vlcPlayer;

  @override
  void initState() {
    super.initState();

    _vlcPlayer = VlcPlayer(
      onInit: () {
        _vlcPlayer.play();
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('VLC Player Example'),
      ),
      body: Center(
        child: _vlcPlayer,
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app and the `MyApp` widget is created.
// 2. The `MyApp` widget builds the `MyHomePage` widget.
// 3. The `MyHomePage` widget creates a `VlcPlayer` instance and adds it to the widget tree.
// 4. The `VlcPlayer` instance is initialized and starts playing the media.
// 5. The user can interact with the `VlcPlayer` instance, such as pausing or stopping the media.

// In summary, this code creates a basic VLC player app that plays a media file.
// The user can interact with the player, and the app handles the player's lifecycle.
```

<-- END_MAIN -->
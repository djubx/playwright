<-- START_DESCRIPTION -->

Top Snackbar Flutter Package
==========================

The `top_snackbar` Flutter package is a customizable snack bar that can be displayed at the top of the screen. It is a great way to show notifications, errors, or other messages to the user without interrupting their workflow.

When to Use
------------

* When you want to display a message to the user without interrupting their workflow.
* When you want to show a notification that is not critical enough to warrant a full-screen dialog.
* When you want to provide feedback to the user after a action has been performed.

Features
--------

* Customizable colors, fonts, and layout.
* Support for icons and images.
* Can be displayed at the top of the screen or at a custom position.
* Can be dismissed by the user or programmatically.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
---------------

To use the `top_snackbar` package, add it to your `pubspec.yaml` file:

```yml
dependencies:
  top_snackbar: ^1.0.0
```

Then, import it in your Dart file:

```dart
import 'package:top_snackbar/top_snackbar.dart';
```

To display a snack bar, use the `showTopSnackBar` function:

```dart
showTopSnackBar(
  context,
  TopSnackBar(
    title: Text('Hello, world!'),
  ),
);
```

You can customize the snack bar by passing in a `TopSnackBar` object with your desired settings:

```dart
showTopSnackBar(
  context,
  TopSnackBar(
    title: Text('Hello, world!'),
    backgroundColor: Colors.red,
    icon: Icon(Icons.error),
  ),
);
```

Platform-Specific Details
-------------------------

### Android

On Android, the snack bar will be displayed at the top of the screen by default. If you want to display it at a custom position, you can pass in a `TopSnackBarPosition` object:

```dart
showTopSnackBar(
  context,
  TopSnackBar(
    title: Text('Hello, world!'),
    position: TopSnackBarPosition(
      top: 100,
      left: 100,
    ),
  ),
);
```

### iOS

On iOS, the snack bar will be displayed at the top of the screen by default. If you want to display it at a custom position, you can pass in a `TopSnackBarPosition` object:

```dart
showTopSnackBar(
  context,
  TopSnackBar(
    title: Text('Hello, world!'),
    position: TopSnackBarPosition(
      top: 100,
      left: 100,
    ),
  ),
);
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:top_snackbar/top_snackbar.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Top SnackBar Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Top SnackBar Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: () {
                // Show a basic snack bar
                showTopSnackBar(
                  context,
                  TopSnackBar(
                    title: Text('Hello, world!'),
                  ),
                );
              },
              child: Text('Show Basic Snack Bar'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                // Show a snack bar with a custom background color
                showTopSnackBar(
                  context,
                  TopSnackBar(
                    title: Text('Hello, world!'),
                    backgroundColor: Colors.red,
                  ),
                );
              },
              child: Text('Show Snack Bar with Custom Background Color'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                // Show a snack bar with an icon
                showTopSnackBar(
                  context,
                  TopSnackBar(
                    title: Text('Hello, world!'),
                    icon: Icon(Icons.error),
                  ),
                );
              },
              child: Text('Show Snack Bar with Icon'),
            ),
          ],
        ),
      ),
    );
  }
}

// The app starts by displaying a home page with three buttons.
// Each button shows a different type of snack bar when pressed.
// The snack bars are displayed at the top of the screen.
// The user can dismiss the snack bar by swiping it away or by pressing the back button.
```

// The app uses the `top_snackbar` package to display snack bars at the top of the screen.
// The `showTopSnackBar` function is used to display a snack bar.
// The `TopSnackBar` object is used to customize the snack bar.
// The app demonstrates how to show a basic snack bar, a snack bar with a custom background color, and a snack bar with an icon.

<-- END_MAIN -->
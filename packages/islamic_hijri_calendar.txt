```markdown
<!-- START_DESCRIPTION -->
# Overview of the `islamic_hijri_calendar` Flutter Package

The `islamic_hijri_calendar` package is a powerful tool for Flutter developers looking to integrate the Islamic Hijri calendar into their applications. This package provides a comprehensive set of features that allow developers to convert Gregorian dates to Hijri dates and vice versa, making it particularly useful for applications that cater to Muslim users or require Islamic date functionalities.

## When to Use This Package

You might consider using the `islamic_hijri_calendar` package in scenarios such as:
- **Islamic Event Reminders**: Applications that need to remind users of important Islamic dates like Ramadan, Eid, or Hajj.
- **Islamic Finance Applications**: Apps that require accurate Islamic date calculations for financial transactions.
- **Cultural Applications**: Any app that aims to educate users about Islamic culture and traditions.

## Features

- **Date Conversion**: Easily convert between Gregorian and Hijri dates.
- **Date Formatting**: Format dates in various styles to suit your application's needs.
- **Localization Support**: Support for multiple languages and regional settings.
- **Customizable**: Options to customize the calendar display according to user preferences.

This package is a must-have for developers looking to enhance their Flutter applications with Islamic date functionalities.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the `islamic_hijri_calendar` Package

## Step 1: Adding the Dependency

To get started, you need to add the `islamic_hijri_calendar` package to your Flutter project. Open your `pubspec.yaml` file and add the following line under dependencies:

```yaml
dependencies:
  islamic_hijri_calendar: ^1.0.0
```

Make sure to run `flutter pub get` to install the package.

## Step 2: Platform-Specific Configuration

### Android

For Android, ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

### iOS

For iOS, you may need to set the deployment target in your `ios/Podfile`:

```ruby
platform :ios, '10.0'
```

## Step 3: Importing the Package

In your Dart files, import the package as follows:

```dart
import 'package:islamic_hijri_calendar/islamic_hijri_calendar.dart';
```

## Step 4: Using the Package

You can now use the package to convert dates and display them. Hereâ€™s a simple example of how to convert a Gregorian date to a Hijri date:

```dart
void main() {
  // Create an instance of the HijriCalendar
  HijriCalendar hijriDate = HijriCalendar.fromDate(DateTime.now());
  
  // Print the Hijri date
  print('Hijri Date: ${hijriDate.toString()}');
}
```

This code snippet creates a Hijri date from the current Gregorian date and prints it.

## Conclusion

With these steps, you should be able to set up and start using the `islamic_hijri_calendar` package in your Flutter applications. The package is straightforward to use and provides essential functionalities for working with Islamic dates.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using the `islamic_hijri_calendar` Package

```dart
import 'package:flutter/material.dart';
import 'package:islamic_hijri_calendar/islamic_hijri_calendar.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Islamic Hijri Calendar Example',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Islamic Hijri Calendar'),
        ),
        body: Center(
          child: HijriDateWidget(),
        ),
      ),
    );
  }
}

class HijriDateWidget extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Get the current Gregorian date
    DateTime currentDate = DateTime.now();
    
    // Convert the current Gregorian date to Hijri date
    HijriCalendar hijriDate = HijriCalendar.fromDate(currentDate);
    
    // Format the Hijri date for display
    String formattedHijriDate = '${hijriDate.day} ${hijriDate.monthName} ${hijriDate.year}';

    return Text(
      'Current Hijri Date: $formattedHijriDate',
      style: TextStyle(fontSize: 24),
    );
  }
}

// Application Flow Explanation:
// 1. The main function initializes the Flutter app by calling runApp() with the RealFlutter widget.
// 2. The RealFlutter widget builds a MaterialApp with a title and a home Scaffold.
// 3. The Scaffold contains an AppBar and a Center widget that holds the HijriDateWidget.
// 4. The HijriDateWidget retrieves the current Gregorian date and converts it to a Hijri date using the HijriCalendar class.
// 5. The Hijri date is formatted and displayed in a Text widget in the center of the screen.
```
<!-- END_MAIN -->
```

This structured blog provides a comprehensive overview of the `islamic_hijri_calendar` Flutter package, guiding users through its features, setup, and practical usage with a complete example.
<-- START_DESCRIPTION -->

# Text 3D Flutter Package
The `text_3d` Flutter package is a powerful tool for creating three-dimensional text in Flutter applications. It provides a simple and easy-to-use API for rendering 3D text with various customization options.

## When to Use
The `text_3d` package is ideal for applications that require visually appealing and interactive 3D text, such as:

* Games
* Interactive stories
* Educational apps
* Advertising and marketing materials

## Features
The `text_3d` package offers the following features:

* Render 3D text with various fonts and styles
* Customize text color, size, and rotation
* Support for multiple text rendering modes (e.g., wireframe, solid, and textured)
* Integration with Flutter's animation system

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
To use the `text_3d` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  text_3d: ^1.0.0
```
2. Run `flutter pub get` to install the package.
3. Import the package in your Dart file:
```dart
import 'package:text_3d/text_3d.dart';
```

## Platform-Specific Details
The `text_3d` package uses platform-specific APIs to render 3D text. For Android, it uses the `OpenGL ES` API, while for iOS, it uses the `Metal` API.

### Android Configuration
To use the `text_3d` package on Android, you need to add the following configuration to your `AndroidManifest.xml` file:
```xml
<application
    ...
    android:hardwareAccelerated="true"
    ...
>
```
This enables hardware acceleration for your application, which is required for 3D rendering.

### iOS Configuration
To use the `text_3d` package on iOS, you need to add the following configuration to your `Info.plist` file:
```xml
<key>UIRequiredDeviceCapabilities</key>
<array>
    <string>metal</string>
</array>
```
This specifies that your application requires the `Metal` API, which is used for 3D rendering on iOS.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:text_3d/text_3d.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Text 3D Demo',
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Create a 3D text controller
  Text3DController _controller;

  @override
  void initState() {
    super.initState();
    _controller = Text3DController(
      text: 'Hello, World!',
      font: 'Arial',
      fontSize: 24,
      color: Colors.red,
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Text 3D Demo'),
      ),
      body: Center(
        child: Text3D(
          controller: _controller,
          // Render the 3D text in wireframe mode
          renderMode: Text3DRenderMode.wireframe,
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          // Animate the 3D text
          _controller.animate(
            duration: Duration(seconds: 2),
            curve: Curves.easeInOut,
          );
        },
        tooltip: 'Animate',
        child: Icon(Icons.play_arrow),
      ),
    );
  }
}

// Application flow:
// 1. The user runs the application.
// 2. The `MyApp` widget is created, which contains the `RealFlutter` widget.
// 3. The `RealFlutter` widget creates a `Text3DController` instance and sets up the 3D text.
// 4. The user presses the floating action button to animate the 3D text.
// 5. The `Text3DController` animates the 3D text using the `animate` method.
// 6. The 3D text is rendered in wireframe mode using the `Text3D` widget.
```

// Final summary:
// The code creates a 3D text demo application using the `text_3d` package.
// The application uses a `Text3DController` to set up and animate the 3D text.
// The 3D text is rendered in wireframe mode using the `Text3D` widget.
// The user can animate the 3D text by pressing the floating action button.

<-- END_MAIN -->
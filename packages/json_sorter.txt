```markdown
<!-- START_DESCRIPTION -->
# json_sorter Flutter Package

The `json_sorter` package is a powerful tool for Flutter developers that simplifies the process of sorting JSON data. It provides a straightforward API to sort JSON objects and arrays based on specified keys and values. This package is particularly useful when dealing with APIs that return unsorted data, allowing developers to present information in a more organized manner.

## When to Use

- **API Data Handling**: When fetching data from APIs that return JSON objects or arrays in an arbitrary order.
- **Data Presentation**: When you need to display sorted lists in your Flutter applications, such as user lists, product catalogs, or any other data-driven UI.
- **Data Manipulation**: When performing operations that require sorted data for further processing or analysis.

## Features

- **Sort JSON Objects**: Easily sort JSON objects based on specified keys.
- **Sort JSON Arrays**: Sort arrays of JSON objects based on one or more keys.
- **Custom Sorting Logic**: Implement custom sorting logic using comparator functions.
- **Easy Integration**: Simple API that integrates seamlessly into existing Flutter applications.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using json_sorter

## Installation

To use the `json_sorter` package in your Flutter project, you need to add it to your `pubspec.yaml` file. Open the file and add the following line under dependencies:

```yaml
dependencies:
  json_sorter: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command in your terminal to install the package:

```bash
flutter pub get
```

## Platform-Specific Details

The `json_sorter` package is designed to work seamlessly on both Android and iOS platforms. There are no additional configurations required for either platform, making it easy to integrate into your Flutter application.

## Basic Usage

To use the `json_sorter` package, you need to import it into your Dart file:

```dart
import 'package:json_sorter/json_sorter.dart';
```

You can then use the provided methods to sort your JSON data. Below is a simple example of how to sort a list of JSON objects.

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of json_sorter

```dart
import 'package:flutter/material.dart';
import 'package:json_sorter/json_sorter.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'JSON Sorter Example',
      home: JsonSorterExample(),
    );
  }
}

class JsonSorterExample extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Sample JSON data
    List<Map<String, dynamic>> jsonData = [
      {"name": "Alice", "age": 30},
      {"name": "Bob", "age": 25},
      {"name": "Charlie", "age": 35},
    ];

    // Sorting the JSON data by age
    List<Map<String, dynamic>> sortedData = jsonData.sortByKey('age');

    return Scaffold(
      appBar: AppBar(
        title: Text('JSON Sorter Example'),
      ),
      body: ListView.builder(
        itemCount: sortedData.length,
        itemBuilder: (context, index) {
          // Displaying sorted data in a list
          return ListTile(
            title: Text(sortedData[index]['name']),
            subtitle: Text('Age: ${sortedData[index]['age']}'),
          );
        },
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function initializes the app by calling runApp with the RealFlutter widget.
// 2. RealFlutter is a StatelessWidget that builds the MaterialApp with a title and home widget.
// 3. JsonSorterExample is another StatelessWidget that contains the main logic for sorting JSON data.
// 4. Inside JsonSorterExample, we define a sample list of JSON objects with names and ages.
// 5. We use the sortByKey method from the json_sorter package to sort the list by the 'age' key.
// 6. The sorted data is then displayed in a ListView, where each ListTile shows the name and age of each person.
// 7. The app presents a simple UI that allows users to see the sorted list of names and ages.

```
<!-- END_MAIN -->
``` 

In summary, the `json_sorter` package provides a simple yet effective way to handle and sort JSON data in Flutter applications. By following the setup and usage instructions, developers can easily integrate this package into their projects, ensuring that their data is presented in a clear and organized manner.
Here's a detailed technical blog on the "lit_relative_date_time" Flutter package, structured as requested.

<!-- START_DESCRIPTION -->
# Overview of the `lit_relative_date_time` Flutter Package

The `lit_relative_date_time` package is a powerful tool for Flutter developers looking to display relative date and time formats in their applications. This package simplifies the process of converting absolute dates into user-friendly relative formats, such as "5 minutes ago," "2 days ago," or "in 3 hours." 

## When to Use This Package

You might consider using the `lit_relative_date_time` package in scenarios such as:
- **Social Media Applications**: Displaying timestamps for posts, comments, or messages in a way that is easy for users to understand.
- **News Applications**: Showing how long ago an article was published.
- **Event Management Apps**: Indicating how much time is left until an event starts or how long ago it ended.

## Features

- **Customizable Formats**: The package allows developers to customize the output format based on user preferences or localization.
- **Localization Support**: It supports multiple languages, making it suitable for international applications.
- **Easy Integration**: The package is straightforward to integrate into existing Flutter projects.

Overall, `lit_relative_date_time` enhances user experience by providing clear and concise time representations, making it a valuable addition to any Flutter application.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using `lit_relative_date_time`

## Step 1: Adding the Dependency

To get started, you need to add the `lit_relative_date_time` package to your Flutter project. Open your `pubspec.yaml` file and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  lit_relative_date_time: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command in your terminal to install it:

```bash
flutter pub get
```

## Step 2: Platform-Specific Configuration

### Android

For Android, ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
        ...
    }
}
```

### iOS

For iOS, you may need to configure your `Info.plist` file to support localization if you plan to use multiple languages. Add the following key:

```xml
<key>CFBundleLocalizations</key>
<array>
    <string>en</string>
    <string>es</string> <!-- Add other languages as needed -->
</array>
```

## Step 3: Using the Package

Now that you have set up the package, you can start using it in your Flutter application. Hereâ€™s a simple example of how to display relative date and time.

```dart
import 'package:flutter/material.dart';
import 'package:lit_relative_date_time/lit_relative_date_time.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Get the current time
    DateTime now = DateTime.now();
    
    // Example date: 2 hours ago
    DateTime pastDate = now.subtract(Duration(hours: 2));

    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Relative Date Time Example')),
        body: Center(
          child: Text(
            // Use the package to get the relative time string
            RelativeDateTime.format(pastDate),
            style: TextStyle(fontSize: 24),
          ),
        ),
      ),
    );
  }
}

void main() {
  runApp(RealFlutter());
}
```

In this example, we import the necessary packages, create a simple Flutter app, and display a relative date string for a date that is 2 hours in the past.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of `lit_relative_date_time`

```dart
import 'package:flutter/material.dart';
import 'package:lit_relative_date_time/lit_relative_date_time.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Get the current time
    DateTime now = DateTime.now();
    
    // Example date: 2 hours ago
    DateTime pastDate = now.subtract(Duration(hours: 2));
    
    // Example date: 5 days ago
    DateTime anotherPastDate = now.subtract(Duration(days: 5));
    
    // Example date: 3 hours in the future
    DateTime futureDate = now.add(Duration(hours: 3));

    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Relative Date Time Example')),
        body: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              // Display relative time for 2 hours ago
              Text(
                RelativeDateTime.format(pastDate),
                style: TextStyle(fontSize: 24),
              ),
              SizedBox(height: 20),
              // Display relative time for 5 days ago
              Text(
                RelativeDateTime.format(anotherPastDate),
                style: TextStyle(fontSize: 24),
              ),
              SizedBox(height: 20),
              // Display relative time for 3 hours in the future
              Text(
                RelativeDateTime.format(futureDate),
                style: TextStyle(fontSize: 24),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

void main() {
  runApp(RealFlutter());
}

// Application Flow Explanation:
// 1. The app starts by running the main function, which calls runApp with the RealFlutter widget.
// 2. Inside the RealFlutter widget, we get the current date and time using DateTime.now().
// 3. We create three DateTime objects: one for 2 hours ago, one for 5 days ago, and one for 3 hours in the future.
// 4. The MaterialApp widget is created with a Scaffold that contains an AppBar and a body.
// 5. In the body, we use a Column widget to display the relative time strings for each of the DateTime objects.
// 6. The RelativeDateTime.format method is called to convert the DateTime objects into user-friendly relative time strings.
// 7. Finally, the app displays the formatted strings in the center of the screen.
```
<!-- END_MAIN -->

This blog provides a comprehensive overview of the `lit_relative_date_time` package, including its features, setup instructions, and a complete example demonstrating its usage. By following the steps outlined, developers can easily integrate this package into their Flutter applications to enhance the user experience with relative date and time displays.
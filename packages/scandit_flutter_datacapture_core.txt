```markdown
<!-- START_DESCRIPTION -->
# Overview of the `scandit_flutter_datacapture_core` Package

The `scandit_flutter_datacapture_core` package is a powerful tool for integrating advanced data capture capabilities into Flutter applications. It is part of the Scandit Data Capture SDK, which provides high-performance barcode scanning, text recognition, and object detection functionalities. This package is particularly useful for applications that require fast and accurate data capture, such as inventory management, retail, and logistics.

## Key Features
- **High-Performance Scanning**: The package supports fast and reliable barcode scanning across various formats.
- **Customizable UI**: Developers can customize the scanning interface to match their application's design.
- **Multi-Platform Support**: Works seamlessly on both Android and iOS platforms.
- **Real-Time Data Capture**: Provides real-time feedback and data capture capabilities.
- **Integration with Other Scandit SDKs**: Can be combined with other Scandit packages for enhanced functionality.

## When to Use
Consider using the `scandit_flutter_datacapture_core` package when:
- You need to implement barcode scanning in your Flutter app.
- Your application requires real-time data capture and processing.
- You want to provide a customizable scanning experience for users.

Overall, this package is an excellent choice for developers looking to enhance their applications with robust data capture features.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Setting Up and Using `scandit_flutter_datacapture_core`

## Installation

To get started with the `scandit_flutter_datacapture_core` package, you need to add it to your Flutter project. Open your `pubspec.yaml` file and include the following dependency:

```yaml
dependencies:
  flutter:
    sdk: flutter
  scandit_flutter_datacapture_core: ^latest_version
```

Make sure to replace `^latest_version` with the latest version available on [pub.dev](https://pub.dev/packages/scandit_flutter_datacapture_core).

## Platform-Specific Configuration

### Android
1. **Update Android Manifest**: Add the following permissions to your `AndroidManifest.xml` file:

```xml
<uses-permission android:name="android.permission.CAMERA" />
<uses-permission android:name="android.permission.INTERNET" />
```

2. **Enable Camera Features**: Ensure that your app has camera features enabled in the manifest:

```xml
<uses-feature android:name="android.hardware.camera" />
<uses-feature android:name="android.hardware.camera.autofocus" />
```

### iOS
1. **Update Info.plist**: Add the following keys to your `Info.plist` file to request camera permissions:

```xml
<key>NSCameraUsageDescription</key>
<string>We need access to the camera for scanning barcodes.</string>
<key>NSPhotoLibraryUsageDescription</key>
<string>We need access to the photo library for scanning barcodes.</string>
```

## Basic Usage

After setting up the package, you can start using it in your Flutter application. Hereâ€™s a simple example of how to initialize the Scandit Data Capture SDK and set up a basic barcode scanner.

```dart
import 'package:flutter/material.dart';
import 'package:scandit_flutter_datacapture_core/scandit_flutter_datacapture_core.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  late DataCaptureContext _dataCaptureContext;
  late BarcodeCapture _barcodeCapture;
  late BarcodeCaptureSettings _barcodeCaptureSettings;

  @override
  void initState() {
    super.initState();
    _initializeScanner();
  }

  Future<void> _initializeScanner() async {
    // Create a DataCaptureContext with your license key
    _dataCaptureContext = DataCaptureContext.forLicenseKey('YOUR_LICENSE_KEY');

    // Create BarcodeCaptureSettings
    _barcodeCaptureSettings = BarcodeCaptureSettings();
    _barcodeCaptureSettings.addSupportedSymbology(BarcodeSymbology.ean13);

    // Create BarcodeCapture
    _barcodeCapture = BarcodeCapture.forContext(_dataCaptureContext, _barcodeCaptureSettings);

    // Set up the listener for barcode capture events
    _barcodeCapture.addListener((capture, session) {
      for (final barcode in session.newlyRecognizedBarcodes) {
        print('Scanned barcode: ${barcode.data}');
      }
    });

    // Start the data capture context
    _dataCaptureContext.setFrameSource(await Camera.create());
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Barcode Scanner')),
      body: Center(child: Text('Scanning...')),
    );
  }
}
```

In this example, we initialize the Scandit Data Capture SDK, set up barcode capture settings, and listen for scanned barcodes. Make sure to replace `'YOUR_LICENSE_KEY'` with your actual Scandit license key.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of `scandit_flutter_datacapture_core`

```dart
import 'package:flutter/material.dart';
import 'package:scandit_flutter_datacapture_core/scandit_flutter_datacapture_core.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  late DataCaptureContext _dataCaptureContext; // Context for data capture
  late BarcodeCapture _barcodeCapture; // Barcode capture instance
  late BarcodeCaptureSettings _barcodeCaptureSettings; // Settings for barcode capture

  @override
  void initState() {
    super.initState();
    _initializeScanner(); // Initialize the scanner when the widget is created
  }

  Future<void> _initializeScanner() async {
    // Create a DataCaptureContext with your license key
    _dataCaptureContext = DataCaptureContext.forLicenseKey('YOUR_LICENSE_KEY');

    // Create BarcodeCaptureSettings
    _barcodeCaptureSettings = BarcodeCaptureSettings();
    _barcodeCaptureSettings.addSupportedSymbology(BarcodeSymbology.ean13); // Add supported barcode symbologies

    // Create BarcodeCapture
    _barcodeCapture = BarcodeCapture.forContext(_dataCaptureContext, _barcodeCaptureSettings);

    // Set up the listener for barcode capture events
    _barcodeCapture.addListener((capture, session) {
      for (final barcode in session.newlyRecognizedBarcodes) {
        print('Scanned barcode: ${barcode.data}'); // Print scanned barcode data
      }
    });

    // Start the data capture context with the camera as the frame source
    _dataCaptureContext.setFrameSource(await Camera.create());
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Barcode Scanner')),
      body: Center(child: Text('Scanning...')), // Display scanning message
    );
  }
}

// Application Flow Explanation:
// 1. The RealFlutter widget is created, and the state is initialized.
// 2. The _initializeScanner method is called to set up the Scandit SDK.
// 3. A DataCaptureContext is created using a license key.
// 4. BarcodeCaptureSettings are configured to support specific barcode types.
// 5. A BarcodeCapture instance is created and a listener is added to handle scanned barcodes.
// 6. The camera is set as the frame source for capturing images.
// 7. The app displays a simple UI with a scanning message while the scanner is active.
```
<!-- END_MAIN -->
```

This structured blog post provides a comprehensive overview of the `scandit_flutter_datacapture_core` package, including its features, setup instructions, and a complete example with detailed comments explaining the application flow.
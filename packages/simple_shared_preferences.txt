<-- START_DESCRIPTION -->

**Simple Shared Preferences Flutter Package**
=============================================

The `simple_shared_preferences` Flutter package provides a simple and easy-to-use interface for storing and retrieving data in the form of key-value pairs. It uses the `shared_preferences` package under the hood, but provides a more streamlined and intuitive API.

**When to Use**
---------------

This package is ideal for storing small amounts of data, such as:

* User preferences (e.g., theme, language)
* App settings (e.g., notification preferences)
* Small amounts of cached data

**Features**
------------

* Easy-to-use API for storing and retrieving data
* Supports storing and retrieving strings, integers, booleans, and doubles
* Supports storing and retrieving lists of strings, integers, booleans, and doubles
* Automatic data serialization and deserialization

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setup and Usage**
-------------------

### Step 1: Add the Package to Your Pubspec

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  simple_shared_preferences: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:simple_shared_preferences/simple_shared_preferences.dart';
```
### Step 3: Initialize the Package

Initialize the package in your `main` function:
```dart
void main() async {
  await SimpleSharedPreferences.init();
  runApp(MyApp());
}
```
### Step 4: Store and Retrieve Data

Use the `SimpleSharedPreferences` class to store and retrieve data:
```dart
// Store a string
await SimpleSharedPreferences.setString('key', 'value');

// Retrieve a string
String value = await SimpleSharedPreferences.getString('key');
```
### Platform-Specific Details

* On Android, the data is stored in the app's internal storage directory.
* On iOS, the data is stored in the app's documents directory.

### Configurations and Optimizations

* You can configure the package to use a custom storage directory by passing a `storageDirectory` parameter to the `init` method.
* You can optimize the package's performance by passing a `cacheSize` parameter to the `init` method.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:simple_shared_preferences/simple_shared_preferences.dart';

void main() async {
  // Initialize the package
  await SimpleSharedPreferences.init();

  // Run the app
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Simple Shared Preferences Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  // Key for storing and retrieving a string
  String _key = 'my_string';

  // Value to store and retrieve
  String _value = '';

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Simple Shared Preferences Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            // Text field for entering a value
            TextField(
              decoration: InputDecoration(
                labelText: 'Enter a value',
              ),
              onChanged: (value) {
                _value = value;
              },
            ),
            // Button for storing the value
            ElevatedButton(
              onPressed: () async {
                // Store the value
                await SimpleSharedPreferences.setString(_key, _value);
              },
              child: Text('Store Value'),
            ),
            // Button for retrieving the value
            ElevatedButton(
              onPressed: () async {
                // Retrieve the value
                String value = await SimpleSharedPreferences.getString(_key);
                setState(() {
                  _value = value;
                });
              },
              child: Text('Retrieve Value'),
            ),
            // Text for displaying the retrieved value
            Text(
              _value,
              style: TextStyle(fontSize: 24),
            ),
          ],
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user enters a value in the text field.
// 2. The user clicks the "Store Value" button to store the value.
// 3. The value is stored using the SimpleSharedPreferences class.
// 4. The user clicks the "Retrieve Value" button to retrieve the value.
// 5. The value is retrieved using the SimpleSharedPreferences class.
// 6. The retrieved value is displayed on the screen.

// Summary:
// This demo app shows how to use the SimpleSharedPreferences class to store and retrieve a string value.
// The app uses a text field for entering a value, two buttons for storing and retrieving the value, and a text for displaying the retrieved value.
// The SimpleSharedPreferences class is used to store and retrieve the value in the app's internal storage directory.
```

<-- END_MAIN -->
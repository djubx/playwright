```markdown
<!-- START_DESCRIPTION -->
# Overview of the maplibre_gl Flutter Package

The `maplibre_gl` package is a powerful tool for integrating interactive maps into Flutter applications. It is built on top of the MapLibre GL library, which is an open-source mapping library that allows developers to create customizable and high-performance maps. This package is particularly useful for applications that require geolocation features, such as navigation apps, location-based services, and data visualization tools.

## When to Use `maplibre_gl`

You should consider using the `maplibre_gl` package when:
- You need to display interactive maps in your Flutter application.
- You want to customize map styles and layers.
- You require offline map capabilities.
- You need to handle geolocation and user interactions with the map.

## Key Features
- **Customizable Map Styles**: You can easily change the appearance of the map using custom styles.
- **Markers and Annotations**: Add markers, lines, and polygons to highlight specific locations or routes.
- **User Interactions**: Support for gestures like pinch-to-zoom, panning, and tapping on map features.
- **Offline Maps**: Ability to cache map tiles for offline use, enhancing user experience in areas with poor connectivity.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS platforms.

In summary, the `maplibre_gl` package is an excellent choice for developers looking to integrate advanced mapping features into their Flutter applications.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using maplibre_gl

In this tutorial, we will walk through the setup process for the `maplibre_gl` package and demonstrate how to use it in a Flutter application.

## Step 1: Adding the Dependency

To get started, add the `maplibre_gl` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  maplibre_gl: ^0.14.0  # Check for the latest version on pub.dev
```

## Step 2: Platform-Specific Configuration

### Android Configuration

1. **Update AndroidManifest.xml**: Add the following permissions to your `AndroidManifest.xml` file located in `android/app/src/main/AndroidManifest.xml`:

   ```xml
   <uses-permission android:name="android.permission.INTERNET"/>
   <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>
   ```

2. **Set the Minimum SDK Version**: Ensure your `minSdkVersion` is set to at least 21 in `android/app/build.gradle`:

   ```groovy
   android {
       ...
       defaultConfig {
           ...
           minSdkVersion 21
           ...
       }
   }
   ```

### iOS Configuration

1. **Update Info.plist**: Add the following keys to your `Info.plist` file located in `ios/Runner/Info.plist`:

   ```xml
   <key>NSLocationWhenInUseUsageDescription</key>
   <string>We need your location to show it on the map.</string>
   <key>NSLocationAlwaysUsageDescription</key>
   <string>We need your location to show it on the map.</string>
   ```

## Step 3: Basic Usage

Now that we have set up the package, let's create a simple map view.

```dart
import 'package:flutter/material.dart';
import 'package:maplibre_gl/maplibre_gl.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('MapLibre GL Example')),
        body: MapView(),
      ),
    );
  }
}

class MapView extends StatefulWidget {
  @override
  _MapViewState createState() => _MapViewState();
}

class _MapViewState extends State<MapView> {
  late MaplibreMapController mapController;

  @override
  Widget build(BuildContext context) {
    return MaplibreMap(
      onMapCreated: _onMapCreated,
      styleString: 'https://your-map-style-url', // Replace with your Map style URL
      initialCameraPosition: CameraPosition(
        target: LatLng(37.7749, -122.4194), // San Francisco coordinates
        zoom: 10,
      ),
    );
  }

  void _onMapCreated(MaplibreMapController controller) {
    mapController = controller;
    // Add a marker at the center of the map
    mapController.addSymbol(SymbolOptions(
      geometry: LatLng(37.7749, -122.4194),
      iconImage: "assets/marker.png", // Ensure you have a marker image in your assets
      iconSize: 1.5,
    ));
  }
}
```

In this example, we create a simple Flutter application that displays a map centered on San Francisco. The map is initialized with a specific style and a marker is added to the center.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of maplibre_gl in Flutter

```dart
import 'package:flutter/material.dart';
import 'package:maplibre_gl/maplibre_gl.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('MapLibre GL Example')),
        body: MapView(),
      ),
    );
  }
}

class MapView extends StatefulWidget {
  @override
  _MapViewState createState() => _MapViewState();
}

class _MapViewState extends State<MapView> {
  late MaplibreMapController mapController;

  @override
  Widget build(BuildContext context) {
    return MaplibreMap(
      onMapCreated: _onMapCreated, // Callback when the map is created
      styleString: 'https://your-map-style-url', // Replace with your Map style URL
      initialCameraPosition: CameraPosition(
        target: LatLng(37.7749, -122.4194), // San Francisco coordinates
        zoom: 10, // Initial zoom level
      ),
    );
  }

  void _onMapCreated(MaplibreMapController controller) {
    mapController = controller; // Store the controller for later use
    // Add a marker at the center of the map
    mapController.addSymbol(SymbolOptions(
      geometry: LatLng(37.7749, -122.4194), // Marker position
      iconImage: "assets/marker.png", // Ensure you have a marker image in your assets
      iconSize: 1.5, // Size of the marker
    ));
  }
}

// Application Flow Explanation:
// 1. The app starts with the RealFlutter class, which sets up the MaterialApp.
// 2. The MapView widget is created, which initializes the map.
// 3. When the map is created, the _onMapCreated method is called.
// 4. Inside _onMapCreated, we store the map controller and add a marker at the specified coordinates.
// 5. The map is displayed with the specified style and initial camera position.
```
<!-- END_MAIN -->
```

This structured blog provides a comprehensive overview of the `maplibre_gl` Flutter package, including its features, setup instructions, and a complete example with detailed comments explaining the application flow.
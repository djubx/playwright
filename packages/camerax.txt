<-- START_DESCRIPTION -->

# camerax Flutter Package: A High-Level Overview
=====================================================

The camerax Flutter package is a powerful tool for accessing and controlling device cameras. It provides a simple and intuitive API for capturing images, recording videos, and previewing camera feeds.

### When to Use camerax

*   When you need to access device cameras for image or video capture.
*   When you want to provide a live preview of the camera feed.
*   When you need fine-grained control over camera settings, such as exposure, focus, and zoom.

### Features of camerax

*   **Camera Preview**: Display a live preview of the camera feed.
*   **Image Capture**: Capture still images from the camera.
*   **Video Recording**: Record video from the camera.
*   **Camera Control**: Adjust camera settings, such as exposure, focus, and zoom.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using camerax
=============================

### Step 1: Add camerax to Your Flutter Project

Add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  camerax: ^0.1.1
```

Then, run `flutter pub get` to install the package.

### Step 2: Import camerax

Import the camerax package in your Dart file:

```dart
import 'package:camerax/camerax.dart';
```

### Step 3: Initialize the Camera

Initialize the camera using the `CameraX` class:

```dart
CameraX _cameraX = CameraX(
  cameraDescription: CameraDescription(
    name: 'Camera 0',
    lensDirection: CameraLensDirection.back,
  ),
);
```

### Step 4: Display the Camera Preview

Use the `CameraPreview` widget to display the camera preview:

```dart
CameraPreview(
  cameraX: _cameraX,
)
```

### Step 5: Capture Images or Record Videos

Use the `takePicture` or `startVideoRecording` methods to capture images or record videos:

```dart
ElevatedButton(
  onPressed: () async {
    final file = await _cameraX.takePicture();
    print('Image saved to ${file.path}');
  },
  child: Text('Take Picture'),
)

ElevatedButton(
  onPressed: () async {
    await _cameraX.startVideoRecording();
    print('Video recording started');
  },
  child: Text('Start Video Recording'),
)
```

### Platform-Specific Details

*   **Android**: Make sure to add the necessary permissions to your `AndroidManifest.xml` file:

    ```xml
<uses-permission android:name="android.permission.CAMERA" />
<uses-permission android:name="android.permission.RECORD_AUDIO" />
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
```

*   **iOS**: Make sure to add the necessary permissions to your `Info.plist` file:

    ```xml
<key>NSCameraUsageDescription</key>
<string>This app needs camera access to take pictures and record videos.</string>
<key>NSMicrophoneUsageDescription</key>
<string>This app needs microphone access to record audio.</string>
<key>NSPhotoLibraryUsageDescription</key>
<string>This app needs photo library access to save images and videos.</string>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:camerax/camerax.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'CameraX Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  CameraX _cameraX;

  @override
  void initState() {
    super.initState();
    _cameraX = CameraX(
      cameraDescription: CameraDescription(
        name: 'Camera 0',
        lensDirection: CameraLensDirection.back,
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('CameraX Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            // Display the camera preview
            CameraPreview(
              cameraX: _cameraX,
            ),
            SizedBox(height: 20),
            // Capture image button
            ElevatedButton(
              onPressed: () async {
                final file = await _cameraX.takePicture();
                print('Image saved to ${file.path}');
              },
              child: Text('Take Picture'),
            ),
            SizedBox(height: 10),
            // Start video recording button
            ElevatedButton(
              onPressed: () async {
                await _cameraX.startVideoRecording();
                print('Video recording started');
              },
              child: Text('Start Video Recording'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and is presented with a camera preview.
// 2. The user can press the "Take Picture" button to capture an image.
// 3. The user can press the "Start Video Recording" button to start recording a video.
// 4. The captured image or recorded video is saved to the device's storage.
// 5. The user can view the captured image or recorded video in the device's gallery.

// The code flow is as follows:
// 1. The `RealFlutter` widget is created and initialized with a `CameraX` object.
// 2. The `CameraX` object is used to display the camera preview.
// 3. The "Take Picture" and "Start Video Recording" buttons are created and linked to the `takePicture` and `startVideoRecording` methods of the `CameraX` object.
// 4. When the user presses the "Take Picture" button, the `takePicture` method is called and an image is captured and saved to the device's storage.
// 5. When the user presses the "Start Video Recording" button, the `startVideoRecording` method is called and a video recording is started.
```

<-- END_MAIN -->
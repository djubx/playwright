# Flutter Package: gradle_properties

<!-- START_DESCRIPTION -->
## Description

The `gradle_properties` Flutter package is designed to simplify the management of Gradle properties in Flutter applications. It allows developers to easily read and modify properties defined in the `gradle.properties` file, which is essential for configuring build settings, dependencies, and other project-specific configurations in Android projects.

### When to Use

You might want to use the `gradle_properties` package in scenarios such as:
- **Dynamic Configuration**: When you need to change build configurations based on different environments (development, staging, production).
- **Sensitive Information**: To manage sensitive information like API keys or passwords without hardcoding them in your source code.
- **Custom Build Settings**: When you want to customize build settings for different flavors of your application.

### Features

- **Read and Write Properties**: Easily read existing properties and write new ones to the `gradle.properties` file.
- **Environment-Specific Configurations**: Manage different configurations for various environments.
- **Cross-Platform Support**: While primarily focused on Android, it can be integrated into Flutter projects that target multiple platforms.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
## Tutorial

### Installation

To use the `gradle_properties` package, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  gradle_properties: ^1.0.0
```

Run `flutter pub get` to install the package.

### Platform-Specific Setup

#### Android

1. **Modify `android/app/build.gradle`**: Ensure that your `build.gradle` file is set up to read properties from the `gradle.properties` file. You can access properties using `project.findProperty('propertyName')`.

2. **Add Permissions**: If you plan to modify the `gradle.properties` file at runtime, ensure your app has the necessary permissions to write to the file system.

#### iOS

Currently, the `gradle_properties` package is primarily focused on Android. For iOS, you may need to handle configurations differently, typically through Xcode project settings or environment variables.

### Basic Usage

Hereâ€™s how to use the `gradle_properties` package in your Flutter application:

```dart
import 'package:gradle_properties/gradle_properties.dart';

void main() async {
  // Initialize the Gradle properties manager
  final gradleProperties = GradleProperties();

  // Read a property
  String? apiKey = await gradleProperties.get('API_KEY');
  print('API Key: $apiKey');

  // Write a new property
  await gradleProperties.set('NEW_PROPERTY', 'value');
}
```

This code snippet demonstrates how to read an existing property and write a new one to the `gradle.properties` file.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
## Complete Example

```dart
import 'package:flutter/material.dart';
import 'package:gradle_properties/gradle_properties.dart';

void main() async {
  // Ensure that Flutter is initialized before running the app
  WidgetsFlutterBinding.ensureInitialized();

  // Create an instance of GradleProperties to manage properties
  final gradleProperties = GradleProperties();

  // Read an API key from gradle.properties
  String? apiKey = await gradleProperties.get('API_KEY');

  // Start the Flutter application
  runApp(RealFlutter(apiKey: apiKey));
}

class RealFlutter extends StatelessWidget {
  final String? apiKey;

  // Constructor to accept the API key
  RealFlutter({Key? key, this.apiKey}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Gradle Properties Example',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Gradle Properties Example'),
        ),
        body: Center(
          child: Text(
            apiKey != null ? 'API Key: $apiKey' : 'No API Key found',
            style: TextStyle(fontSize: 20),
          ),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function initializes the Flutter engine and creates an instance of GradleProperties.
// 2. It attempts to read the 'API_KEY' property from the gradle.properties file.
// 3. The RealFlutter widget is then created, passing the retrieved API key as a parameter.
// 4. The MaterialApp is built with a simple UI that displays the API key if found, or a message indicating that no key was found.
// 5. The app runs, showing the result in the center of the screen.
```

<!-- END_MAIN -->

## Summary

In this blog post, we explored the `gradle_properties` Flutter package, which provides a convenient way to manage Gradle properties in Flutter applications. We covered the installation process, platform-specific setup, and provided a complete example demonstrating how to read and write properties. This package is particularly useful for managing sensitive information and environment-specific configurations, making it a valuable tool for Flutter developers working on Android projects.
```markdown
<!-- START_DESCRIPTION -->
# Helpshift Wrapper Flutter Package

The **helpshift_wrapper** package is a Flutter plugin that integrates Helpshift's customer support and in-app messaging services into your Flutter applications. Helpshift provides a robust platform for managing customer support, including features like FAQs, chat support, and ticketing systems. This package allows developers to easily implement these features in their Flutter apps, enhancing user experience and support capabilities.

## When to Use This Package
- **Customer Support Integration**: When you want to provide users with a seamless way to access customer support directly from your app.
- **In-App Messaging**: If you need to implement in-app messaging for real-time communication with users.
- **Feedback Collection**: To gather user feedback and improve your app based on user insights.

## Key Features
- **Easy Integration**: Simple setup process to integrate Helpshift into your Flutter app.
- **Customizable UI**: Ability to customize the Helpshift UI to match your app's branding.
- **Multi-Platform Support**: Works on both Android and iOS platforms.
- **Rich Messaging**: Supports rich media messages, FAQs, and ticketing systems.
- **Analytics**: Provides insights into user interactions and support metrics.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Tutorial: Setting Up Helpshift Wrapper

In this section, we will walk through the setup process for the **helpshift_wrapper** package and how to use it in your Flutter application.

## Step 1: Add Dependency
To get started, add the **helpshift_wrapper** package to your `pubspec.yaml` file:

```yaml
dependencies:
  helpshift_wrapper: ^latest_version
```

Make sure to replace `latest_version` with the most recent version available on [pub.dev](https://pub.dev/packages/helpshift_wrapper).

## Step 2: Platform-Specific Configuration

### Android Configuration
1. Open your `android/app/build.gradle` file and add the Helpshift SDK dependency:

```groovy
dependencies {
    implementation 'com.helpshift:helpshift:latest_version'
}
```

2. Ensure you have the necessary permissions in your `AndroidManifest.xml`:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
```

### iOS Configuration
1. Open your `ios/Podfile` and add the Helpshift SDK:

```ruby
pod 'Helpshift', '~> latest_version'
```

2. Ensure you have the necessary permissions in your `Info.plist`:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

## Step 3: Initialize Helpshift
In your main application file, initialize Helpshift with your app credentials:

```dart
import 'package:helpshift_wrapper/helpshift_wrapper.dart';

void main() {
  HelpshiftWrapper.init(
    appId: "YOUR_APP_ID",
    domain: "YOUR_DOMAIN",
    apiKey: "YOUR_API_KEY",
  );
  runApp(MyApp());
}
```

Replace `YOUR_APP_ID`, `YOUR_DOMAIN`, and `YOUR_API_KEY` with your Helpshift account details.

## Step 4: Using Helpshift
You can now use Helpshift features in your app. For example, to show the Helpshift support view, you can call:

```dart
HelpshiftWrapper.showSupport();
```

This will present the Helpshift support interface to the user.

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of Helpshift Wrapper

```dart
import 'package:flutter/material.dart';
import 'package:helpshift_wrapper/helpshift_wrapper.dart';

void main() {
  // Initialize Helpshift with your app credentials
  HelpshiftWrapper.init(
    appId: "YOUR_APP_ID",
    domain: "YOUR_DOMAIN",
    apiKey: "YOUR_API_KEY",
  );
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Helpshift Example',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Helpshift Integration'),
        ),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              // Show Helpshift support view when button is pressed
              HelpshiftWrapper.showSupport();
            },
            child: Text('Contact Support'),
          ),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts by initializing Helpshift with the provided credentials.
// 2. The main widget, RealFlutter, builds a simple UI with an AppBar and a button.
// 3. When the user presses the "Contact Support" button, the Helpshift support view is displayed.
// 4. This allows users to access customer support features directly within the app.
```
<!-- END_MAIN -->
``` 

In this blog post, we have covered the **helpshift_wrapper** package, detailing its features, setup process, and providing a complete example of its usage in a Flutter application. This package is a powerful tool for integrating customer support into your app, making it easier for users to get help when they need it.
# Simple Date Flutter Package

## <-- START_DESCRIPTION -->

### Description

The `simple_date` Flutter package is a lightweight and easy-to-use library designed to simplify date and time manipulation in Flutter applications. It provides a straightforward API for formatting, parsing, and manipulating dates, making it an excellent choice for developers who need to handle date-related functionalities without the complexity of more extensive libraries.

### When to Use

You might consider using the `simple_date` package in scenarios such as:
- Displaying dates in various formats (e.g., "MM/dd/yyyy", "dd-MM-yyyy").
- Parsing user input dates from text fields.
- Performing date arithmetic (e.g., adding days, subtracting months).
- Formatting dates for display in user interfaces.

### Features

- **Date Formatting**: Easily format dates into strings using customizable patterns.
- **Date Parsing**: Convert string representations of dates into DateTime objects.
- **Date Arithmetic**: Perform operations like adding or subtracting days, months, or years.
- **Localization Support**: Format dates according to different locales.

## <-- END_DESCRIPTION -->

## <-- START_TUTORIAL -->

### Tutorial

To get started with the `simple_date` package, follow these steps:

#### Step 1: Add Dependency

Add the `simple_date` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  simple_date: ^1.0.0  # Check for the latest version on pub.dev
```

#### Step 2: Install the Package

Run the following command in your terminal to install the package:

```bash
flutter pub get
```

#### Step 3: Platform-Specific Configuration

For both Android and iOS, no additional configuration is required for the `simple_date` package. However, ensure that your Flutter environment is set up correctly for both platforms.

#### Step 4: Import the Package

In your Dart file, import the package:

```dart
import 'package:simple_date/simple_date.dart';
```

### Basic Usage

Hereâ€™s how to use the `simple_date` package in your Flutter application:

1. **Formatting a Date**:
   ```dart
   DateTime now = DateTime.now();
   String formattedDate = SimpleDate.format(now, 'MM/dd/yyyy');
   ```

2. **Parsing a Date**:
   ```dart
   String dateString = '12/31/2023';
   DateTime parsedDate = SimpleDate.parse(dateString, 'MM/dd/yyyy');
   ```

3. **Date Arithmetic**:
   ```dart
   DateTime futureDate = SimpleDate.addDays(now, 10); // Adds 10 days
   ```

## <-- END_TUTORIAL -->

## <-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:simple_date/simple_date.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Simple Date Example',
      home: DateExampleScreen(),
    );
  }
}

class DateExampleScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Get the current date
    DateTime now = DateTime.now();
    
    // Format the current date
    String formattedDate = SimpleDate.format(now, 'MM/dd/yyyy');
    
    // Parse a date string
    String dateString = '12/31/2023';
    DateTime parsedDate = SimpleDate.parse(dateString, 'MM/dd/yyyy');
    
    // Add 10 days to the current date
    DateTime futureDate = SimpleDate.addDays(now, 10);
    
    return Scaffold(
      appBar: AppBar(
        title: Text('Simple Date Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text('Current Date: $formattedDate'), // Display formatted current date
            Text('Parsed Date: ${SimpleDate.format(parsedDate, 'dd-MM-yyyy')}'), // Display parsed date
            Text('Future Date (+10 days): ${SimpleDate.format(futureDate, 'MM/dd/yyyy')}'), // Display future date
          ],
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function initializes the Flutter app by calling runApp() with the RealFlutter widget.
// 2. The RealFlutter widget builds a MaterialApp with a title and a home screen (DateExampleScreen).
// 3. In DateExampleScreen, the current date is obtained and formatted using SimpleDate.format().
// 4. A sample date string is parsed into a DateTime object using SimpleDate.parse().
// 5. The current date is manipulated by adding 10 days using SimpleDate.addDays().
// 6. The formatted current date, parsed date, and future date are displayed in the center of the screen.
```

## <-- END_MAIN -->

### Summary

In this blog post, we explored the `simple_date` Flutter package, which simplifies date and time manipulation in Flutter applications. We covered its features, installation process, and provided a comprehensive example demonstrating how to format, parse, and manipulate dates. The example application showcases how to display the current date, a parsed date, and a future date, making it a practical reference for developers looking to implement date functionalities in their apps.
```markdown
<-- START_DESCRIPTION -->

# Overview of the `speed_dial_fab` Flutter Package

The `speed_dial_fab` package is a versatile Flutter widget that provides a floating action button (FAB) with a speed dial feature. This package is particularly useful when you want to offer multiple actions from a single FAB, enhancing the user interface by providing quick access to secondary actions without cluttering the screen.

## When to Use

- **Multiple Actions**: When your application requires multiple actions that are contextually related, such as sharing, editing, or adding new items.
- **Space Constraints**: In scenarios where screen real estate is limited, and you want to avoid multiple buttons cluttering the UI.
- **Enhanced User Experience**: To provide a modern and interactive user experience with smooth animations and transitions.

## Features

- **Customizable Icons and Labels**: Easily customize the icons and labels for each action in the speed dial.
- **Smooth Animations**: Built-in animations for opening and closing the speed dial.
- **Flexible Positioning**: Position the FAB anywhere on the screen.
- **Platform Consistency**: Consistent behavior across Android and iOS platforms.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using `speed_dial_fab`

In this section, we'll walk through the setup process for the `speed_dial_fab` package and demonstrate how to integrate it into a Flutter application.

## Setup Process

1. **Add Dependency**

   First, add the `speed_dial_fab` package to your `pubspec.yaml` file:

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     speed_dial_fab: ^1.0.0
   ```

2. **Install Packages**

   Run the following command to install the new package:

   ```bash
   flutter pub get
   ```

3. **Import the Package**

   Import the package in your Dart file where you want to use the speed dial:

   ```dart
   import 'package:speed_dial_fab/speed_dial_fab.dart';
   ```

## Platform-Specific Details

### Android

- Ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21 to support the necessary animations.

### iOS

- No additional setup is required for iOS, but ensure your deployment target is set to iOS 9.0 or higher in your `ios/Podfile`.

## Using the Package

To use the `speed_dial_fab`, you need to create a `SpeedDialFab` widget and configure its properties to suit your application's needs.

```dart
SpeedDialFab(
  mainIcon: Icons.add,
  actions: [
    SpeedDialAction(
      icon: Icons.share,
      label: 'Share',
      onPressed: () {
        // Action for share
      },
    ),
    SpeedDialAction(
      icon: Icons.edit,
      label: 'Edit',
      onPressed: () {
        // Action for edit
      },
    ),
  ],
)
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

# Complete Example: Flutter Main File with `speed_dial_fab`

Below is a complete example of a Flutter application using the `speed_dial_fab` package. This example demonstrates how to set up and use the package to create a FAB with multiple actions.

```dart
import 'package:flutter/material.dart';
import 'package:speed_dial_fab/speed_dial_fab.dart';

void main() {
  runApp(MyApp());
}

// Main application widget
class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Speed Dial FAB Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: HomeScreen(),
    );
  }
}

// Home screen with Speed Dial FAB
class HomeScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Speed Dial FAB Example'),
      ),
      body: Center(
        child: Text('Press the FAB to see actions'),
      ),
      floatingActionButton: SpeedDialFab(
        mainIcon: Icons.add, // Main FAB icon
        actions: [
          SpeedDialAction(
            icon: Icons.share, // Icon for the share action
            label: 'Share', // Label for the share action
            onPressed: () {
              // Action to perform when share is pressed
              print('Share action pressed');
            },
          ),
          SpeedDialAction(
            icon: Icons.edit, // Icon for the edit action
            label: 'Edit', // Label for the edit action
            onPressed: () {
              // Action to perform when edit is pressed
              print('Edit action pressed');
            },
          ),
        ],
      ),
    );
  }
}
```

// Application Flow Explanation
// 1. The `main` function initializes the app by calling `runApp` with `MyApp`.
// 2. `MyApp` is a stateless widget that sets up the MaterialApp with a title and theme.
// 3. The `HomeScreen` widget is the main screen of the app, containing an AppBar and a centered text widget.
// 4. The `SpeedDialFab` is used as the `floatingActionButton` in the `Scaffold`.
// 5. The `SpeedDialFab` has a main icon and two actions: Share and Edit.
// 6. Each action is defined with an icon, label, and an `onPressed` callback that prints a message to the console when triggered.

<-- END_MAIN -->
```
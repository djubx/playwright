```markdown
<-- START_DESCRIPTION -->

# Cupertino Stepper Flutter Package

The `cupertino_stepper` Flutter package is a highly customizable widget that provides a step-by-step interface for users to complete a process. It is inspired by the iOS design language, making it an excellent choice for applications targeting iOS users or those that want to maintain a consistent Cupertino design aesthetic.

## When to Use Cupertino Stepper

The Cupertino Stepper is ideal for scenarios where a task can be broken down into a series of steps. This could include:

- Onboarding processes
- Multi-step forms
- Tutorials or guided tours
- Any process that benefits from a clear, linear progression

## Features

- **Cupertino Design**: Adheres to the iOS design guidelines, providing a native look and feel.
- **Customizable Steps**: Each step can be customized with its own content, title, and subtitle.
- **Horizontal and Vertical Orientations**: Supports both horizontal and vertical stepper orientations.
- **Interactive Controls**: Users can navigate between steps using next and previous buttons.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using Cupertino Stepper

In this tutorial, we will walk through the process of setting up and using the `cupertino_stepper` package in a Flutter application.

## Setup

1. **Add Dependency**: First, add the `cupertino_stepper` package to your `pubspec.yaml` file.

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     cupertino_stepper: ^0.1.0
   ```

2. **Install Packages**: Run `flutter pub get` to install the new package.

3. **Import the Package**: Import the package into your Dart file where you plan to use the stepper.

   ```dart
   import 'package:cupertino_stepper/cupertino_stepper.dart';
   ```

## Platform-Specific Details

- **iOS**: The Cupertino Stepper is designed to match the iOS design language, so it should work seamlessly on iOS devices without additional configuration.
- **Android**: While the stepper will function on Android, consider using a Material design stepper for a more native look on Android devices. However, if maintaining a consistent design across platforms is a priority, the Cupertino Stepper is a suitable choice.

## Using the Cupertino Stepper

To use the Cupertino Stepper, you need to define a list of steps and manage the current step index. Here's a basic setup:

```dart
class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  int _currentStep = 0;

  List<Step> _steps = [
    Step(
      title: Text('Step 1'),
      content: Text('Content for Step 1'),
    ),
    Step(
      title: Text('Step 2'),
      content: Text('Content for Step 2'),
    ),
    Step(
      title: Text('Step 3'),
      content: Text('Content for Step 3'),
    ),
  ];

  @override
  Widget build(BuildContext context) {
    return CupertinoStepper(
      currentStep: _currentStep,
      onStepTapped: (step) => setState(() => _currentStep = step),
      onStepContinue: () {
        if (_currentStep < _steps.length - 1) {
          setState(() => _currentStep += 1);
        }
      },
      onStepCancel: () {
        if (_currentStep > 0) {
          setState(() => _currentStep -= 1);
        }
      },
      steps: _steps,
    );
  }
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:cupertino_stepper/cupertino_stepper.dart';

void main() => runApp(RealFlutterApp());

class RealFlutterApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return CupertinoApp(
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  int _currentStep = 0; // Tracks the current step index

  // Define the steps for the stepper
  List<Step> _steps = [
    Step(
      title: Text('Step 1'),
      content: Text('Content for Step 1'),
    ),
    Step(
      title: Text('Step 2'),
      content: Text('Content for Step 2'),
    ),
    Step(
      title: Text('Step 3'),
      content: Text('Content for Step 3'),
    ),
  ];

  @override
  Widget build(BuildContext context) {
    return CupertinoPageScaffold(
      navigationBar: CupertinoNavigationBar(
        middle: Text('Cupertino Stepper Example'),
      ),
      child: SafeArea(
        child: CupertinoStepper(
          currentStep: _currentStep, // Current step index
          onStepTapped: (step) => setState(() => _currentStep = step), // Handle step tap
          onStepContinue: () {
            // Handle continue button
            if (_currentStep < _steps.length - 1) {
              setState(() => _currentStep += 1);
            }
          },
          onStepCancel: () {
            // Handle cancel button
            if (_currentStep > 0) {
              setState(() => _currentStep -= 1);
            }
          },
          steps: _steps, // List of steps
        ),
      ),
    );
  }
}

// Application Flow:
// 1. The app starts with the `RealFlutterApp` widget, which uses `CupertinoApp` to provide an iOS-style interface.
// 2. The `RealFlutter` widget is a stateful widget that manages the current step index using `_currentStep`.
// 3. The `_steps` list defines the steps in the stepper, each with a title and content.
// 4. The `CupertinoStepper` widget is used to display the steps. It takes the current step index and callbacks for step taps, continues, and cancels.
// 5. The `onStepTapped` callback updates the current step index when a step is tapped.
// 6. The `onStepContinue` callback increments the step index, moving to the next step, unless it's the last step.
// 7. The `onStepCancel` callback decrements the step index, moving to the previous step, unless it's the first step.
// 8. The UI is wrapped in a `CupertinoPageScaffold` to provide a navigation bar and safe area for iOS devices.
```

<-- END_MAIN -->
```
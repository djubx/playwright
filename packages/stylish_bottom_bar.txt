```markdown
<-- START_DESCRIPTION -->

# Stylish Bottom Bar Flutter Package

The `stylish_bottom_bar` Flutter package is a versatile and customizable bottom navigation bar widget that enhances the user interface of your Flutter applications. It provides a stylish and modern way to navigate between different pages or sections of your app, making it an excellent choice for developers looking to improve the aesthetic appeal and functionality of their applications.

## When to Use

The `stylish_bottom_bar` is ideal for applications that require a bottom navigation bar with more customization options than the default `BottomNavigationBar` widget. It is particularly useful in scenarios where:

- You want to implement a bottom navigation bar with unique animations and styles.
- Your application requires a visually appealing and interactive navigation experience.
- You need to differentiate between active and inactive states with more than just color changes.

## Features

- **Customizable Icons and Labels**: Easily change icons and labels to suit your app's theme.
- **Animation Support**: Includes various animations for transitions between active and inactive states.
- **Flexible Styling**: Offers multiple styles and themes to match your app's design.
- **Responsive Design**: Adapts to different screen sizes and orientations.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using Stylish Bottom Bar

In this tutorial, we will walk through the process of setting up and using the `stylish_bottom_bar` package in a Flutter application. We will cover platform-specific configurations for both Android and iOS.

## Setup Process

1. **Add Dependency**

   First, add the `stylish_bottom_bar` package to your `pubspec.yaml` file:

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     stylish_bottom_bar: ^1.0.0
   ```

2. **Install Packages**

   Run the following command to install the new package:

   ```bash
   flutter pub get
   ```

3. **Platform-Specific Configurations**

   - **Android**: Ensure your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

     ```gradle
     defaultConfig {
         minSdkVersion 21
     }
     ```

   - **iOS**: No specific configuration is required, but ensure your deployment target is set to iOS 9.0 or higher in your `ios/Podfile`:

     ```ruby
     platform :ios, '9.0'
     ```

## Using the Package

To use the `stylish_bottom_bar`, import it into your Dart file and integrate it into your widget tree. Below is a basic setup:

```dart
import 'package:flutter/material.dart';
import 'package:stylish_bottom_bar/stylish_bottom_bar.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        body: Center(child: Text('Home Page')),
        bottomNavigationBar: StylishBottomBar(
          items: [
            BottomBarItem(icon: Icon(Icons.home), title: Text('Home')),
            BottomBarItem(icon: Icon(Icons.search), title: Text('Search')),
            BottomBarItem(icon: Icon(Icons.person), title: Text('Profile')),
          ],
          onTap: (index) {
            // Handle navigation logic here
          },
        ),
      ),
    );
  }
}
```

<-- END_TUTORIAL -->

<-- MAIN -->

# Complete Example: Flutter Main File

Below is a complete example of a Flutter application using the `stylish_bottom_bar` package. This example demonstrates all key features of the package.

```dart
import 'package:flutter/material.dart';
import 'package:stylish_bottom_bar/stylish_bottom_bar.dart';

// Main entry point of the application
void main() {
  runApp(RealFlutter());
}

// Main application widget
class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

// State class for RealFlutter
class _RealFlutterState extends State<RealFlutter> {
  int _selectedIndex = 0; // Tracks the selected index of the bottom bar

  // List of pages to display based on the selected index
  final List<Widget> _pages = [
    Center(child: Text('Home Page')),
    Center(child: Text('Search Page')),
    Center(child: Text('Profile Page')),
  ];

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        // Display the selected page
        body: _pages[_selectedIndex],
        // Stylish bottom navigation bar
        bottomNavigationBar: StylishBottomBar(
          items: [
            BottomBarItem(icon: Icon(Icons.home), title: Text('Home')),
            BottomBarItem(icon: Icon(Icons.search), title: Text('Search')),
            BottomBarItem(icon: Icon(Icons.person), title: Text('Profile')),
          ],
          currentIndex: _selectedIndex, // Set the current index
          onTap: (index) {
            setState(() {
              _selectedIndex = index; // Update the selected index
            });
          },
        ),
      ),
    );
  }
}
```

// Application Flow Explanation
// 1. The `main` function initializes the app by running `RealFlutter`.
// 2. `RealFlutter` is a stateful widget that manages the state of the bottom navigation bar.
// 3. `_RealFlutterState` maintains the `_selectedIndex` to track which page is currently active.
// 4. The `_pages` list contains the widgets for each page corresponding to the bottom bar items.
// 5. The `build` method returns a `MaterialApp` with a `Scaffold`.
// 6. The `Scaffold` contains a `body` that displays the widget from `_pages` based on `_selectedIndex`.
// 7. The `StylishBottomBar` is configured with `BottomBarItem` widgets for navigation.
// 8. The `onTap` callback updates `_selectedIndex` and triggers a UI rebuild to display the selected page.

<-- END_MAIN -->
```
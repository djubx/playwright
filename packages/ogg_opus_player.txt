# Ogg Opus Player Flutter Package

## <-- START_DESCRIPTION -->

### Overview

The `ogg_opus_player` package is a Flutter plugin designed for playing Ogg Opus audio files. Opus is a versatile audio codec that is particularly well-suited for streaming and real-time applications, making it an excellent choice for developers looking to implement high-quality audio playback in their Flutter applications. This package is especially useful in scenarios such as:

- **Voice over IP (VoIP) applications**: Where low latency and high-quality audio are crucial.
- **Music streaming apps**: That require efficient audio compression without sacrificing quality.
- **Games**: Where sound effects and background music need to be played seamlessly.

### Features

- **Support for Ogg Opus format**: Play audio files encoded in the Ogg Opus format.
- **Low latency**: Optimized for real-time audio playback.
- **Cross-platform compatibility**: Works on both Android and iOS devices.
- **Simple API**: Easy to integrate and use within Flutter applications.

## <-- END_DESCRIPTION -->

## <-- START_TUTORIAL -->

### Setup Process

To get started with the `ogg_opus_player` package, follow these steps:

1. **Add Dependency**: Open your `pubspec.yaml` file and add the package under dependencies:

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     ogg_opus_player: ^latest_version
   ```

   Replace `latest_version` with the most recent version available on [pub.dev](https://pub.dev/packages/ogg_opus_player).

2. **Install the Package**: Run the following command in your terminal to install the package:

   ```bash
   flutter pub get
   ```

3. **Platform-Specific Configuration**:
   - **Android**: Ensure that your `android/app/build.gradle` file has the following configurations:

     ```groovy
     android {
         ...
         defaultConfig {
             ...
             minSdkVersion 21 // Ensure this is set to at least 21
         }
     }
     ```

   - **iOS**: Open your `ios/Runner/Info.plist` file and add the following permissions if you plan to use microphone access:

     ```xml
     <key>NSMicrophoneUsageDescription</key>
     <string>We need access to your microphone for audio playback.</string>
     ```

### Using the Package

To use the `ogg_opus_player` package, you can follow these steps in your Flutter application:

1. **Import the Package**:

   ```dart
   import 'package:ogg_opus_player/ogg_opus_player.dart';
   ```

2. **Initialize the Player**: Create an instance of the player and load an Ogg Opus file.

3. **Control Playback**: Use methods to play, pause, and stop the audio.

## <-- END_TUTORIAL -->

## <-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:ogg_opus_player/ogg_opus_player.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Create an instance of the Ogg Opus player
  late OggOpusPlayer _player;
  bool _isPlaying = false;

  @override
  void initState() {
    super.initState();
    // Initialize the player
    _player = OggOpusPlayer();
  }

  // Function to play audio
  void _playAudio() async {
    // Load the audio file from assets
    await _player.load('assets/audio/sample.ogg');
    // Start playback
    await _player.play();
    setState(() {
      _isPlaying = true; // Update the state to reflect that audio is playing
    });
  }

  // Function to stop audio
  void _stopAudio() async {
    await _player.stop(); // Stop playback
    setState(() {
      _isPlaying = false; // Update the state to reflect that audio is stopped
    });
  }

  @override
  void dispose() {
    _player.dispose(); // Dispose of the player when the widget is removed
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Ogg Opus Player Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              ElevatedButton(
                onPressed: _isPlaying ? null : _playAudio, // Disable button if playing
                child: Text('Play Audio'),
              ),
              ElevatedButton(
                onPressed: _isPlaying ? _stopAudio : null, // Disable button if not playing
                child: Text('Stop Audio'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
```

### Application Flow Explanation

// The application starts by running the `RealFlutter` widget.
// In the `initState` method, we initialize the Ogg Opus player.
// The `_playAudio` method loads an Ogg Opus file from the assets and starts playback.
// The `_stopAudio` method stops the audio playback.
// The UI consists of two buttons: one to play the audio and another to stop it.
// The play button is disabled when audio is playing, and the stop button is disabled when audio is not playing.
// The player is disposed of in the `dispose` method to free up resources when the widget is removed.

## <-- END_MAIN -->

### Summary

In this blog post, we explored the `ogg_opus_player` Flutter package, which provides a simple and efficient way to play Ogg Opus audio files in your applications. We covered the setup process, including platform-specific configurations, and provided a complete example demonstrating how to implement audio playback functionality. This package is ideal for applications requiring high-quality audio playback with low latency, making it a valuable tool for Flutter developers.
<-- START_DESCRIPTION -->

# Fullscreen Window Flutter Package
=====================================

The `fullscreen_window` Flutter package allows you to create a fullscreen window for your Flutter application. This package is useful when you want to create an immersive experience for your users, such as in gaming or video playback applications.

## Features

*   Create a fullscreen window for your Flutter application
*   Support for both Android and iOS platforms
*   Easy to use and integrate into your existing Flutter project

## When to Use

You can use this package when you want to create an immersive experience for your users. For example:

*   Gaming applications: Create a fullscreen window to provide an immersive gaming experience for your users.
*   Video playback applications: Create a fullscreen window to play videos in fullscreen mode.
*   Interactive stories or presentations: Create a fullscreen window to provide an immersive experience for your users.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Using the Fullscreen Window Flutter Package
=====================================================

## Step 1: Add the Package to Your Project

To use the `fullscreen_window` package, you need to add it to your project. You can do this by adding the following line to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  fullscreen_window: ^1.0.0
```

Then, run `flutter pub get` to get the package.

## Step 2: Import the Package

To use the package, you need to import it into your Dart file. You can do this by adding the following line at the top of your file:

```dart
import 'package:fullscreen_window/fullscreen_window.dart';
```

## Step 3: Create a Fullscreen Window

To create a fullscreen window, you can use the `FullscreenWindow` widget. Here is an example:

```dart
class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    return FullscreenWindow(
      child: Scaffold(
        body: Center(
          child: Text('Fullscreen Window'),
        ),
      ),
    );
  }
}
```

## Platform-Specific Details

### Android

To use the `fullscreen_window` package on Android, you need to add the following line to your `AndroidManifest.xml` file:

```xml
<application
  ...
  android:theme="@style/FullscreenTheme">
```

Then, create a new file called `styles.xml` in the `res/values` directory and add the following code:

```xml
<?xml version="1.0" encoding="utf-8"?>
<resources>
  <style name="FullscreenTheme" parent="Theme.AppCompat.Light.NoActionBar">
    <item name="android:windowFullscreen">true</item>
  </style>
</resources>
```

### iOS

To use the `fullscreen_window` package on iOS, you need to add the following line to your `Info.plist` file:

```xml
<key>UIStatusBarHidden</key>
<true/>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:fullscreen_window/fullscreen_window.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Fullscreen Window Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Create a fullscreen window
  @override
  Widget build(BuildContext context) {
    return FullscreenWindow(
      // Create a scaffold with a center text
      child: Scaffold(
        body: Center(
          // Create a text widget with the text 'Fullscreen Window'
          child: Text('Fullscreen Window'),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the application.
// 2. The application creates a fullscreen window using the FullscreenWindow widget.
// 3. The fullscreen window contains a scaffold with a center text.
// 4. The text widget displays the text 'Fullscreen Window'.
// 5. The application runs in fullscreen mode until the user closes it.

// In summary, this code creates a fullscreen window with a center text and runs the application in fullscreen mode.
```

<-- END_MAIN -->
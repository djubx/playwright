# Flutter App Name Package: A Comprehensive Guide

## <-- START_DESCRIPTION -->

### Description

The `flutter_app_name` package is a powerful tool designed to help Flutter developers easily manage and customize the application name across different platforms. This package is particularly useful when you want to change the app name dynamically or set it up for different build configurations without manually editing platform-specific files.

### When to Use

- **Dynamic App Naming**: If your application requires different names for different environments (e.g., development, staging, production).
- **Branding**: When you want to customize the app name based on user preferences or branding requirements.
- **Multi-Platform Support**: To ensure that the app name is consistent across both Android and iOS platforms.

### Features

- **Cross-Platform Support**: Easily manage app names for both Android and iOS.
- **Dynamic Configuration**: Change the app name based on build configurations or user settings.
- **Simple API**: Intuitive methods to set and retrieve the app name.

## <-- END_DESCRIPTION -->

## <-- START_TUTORIAL -->

### Tutorial

#### Installation

To get started with the `flutter_app_name` package, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  flutter_app_name: ^1.0.0  # Check for the latest version on pub.dev
```

Run the following command to install the package:

```bash
flutter pub get
```

#### Platform-Specific Configuration

**For Android:**

1. Open `android/app/build.gradle`.
2. Add the following lines to the `android` block:

```groovy
android {
    ...
    defaultConfig {
        ...
        applicationId "com.example.yourapp"
        // Add this line to set the app name
        resValue "string", "app_name", "Your App Name"
    }
}
```

**For iOS:**

1. Open `ios/Runner.xcodeproj` in Xcode.
2. Select the `Info.plist` file.
3. Add a new entry for `CFBundleDisplayName` and set it to your desired app name.

#### Using the Package

To use the `flutter_app_name` package, you can follow these steps:

1. Import the package in your Dart file:

```dart
import 'package:flutter_app_name/flutter_app_name.dart';
```

2. Set the app name using the `RealFlutter` class:

```dart
void main() {
  RealFlutter.setAppName("My New App Name");
  runApp(MyApp());
}
```

3. Retrieve the app name anywhere in your app:

```dart
String appName = RealFlutter.getAppName();
```

## <-- END_TUTORIAL -->

## <-- START_MAIN -->

### Complete Example

```dart
import 'package:flutter/material.dart';
import 'package:flutter_app_name/flutter_app_name.dart';

void main() {
  // Set the application name before running the app
  RealFlutter.setAppName("My New App Name");
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: RealFlutter.getAppName(), // Use the app name here
      home: HomeScreen(),
    );
  }
}

class HomeScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(RealFlutter.getAppName()), // Display the app name in the AppBar
      ),
      body: Center(
        child: Text(
          'Welcome to ${RealFlutter.getAppName()}!', // Welcome message with app name
          style: TextStyle(fontSize: 24),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function is the entry point of the application.
// 2. We set the app name using RealFlutter.setAppName() before running the app.
// 3. The MyApp widget is created, which is a StatelessWidget.
// 4. Inside MyApp, we create a MaterialApp and set its title to the app name retrieved from RealFlutter.getAppName().
// 5. The home property of MaterialApp is set to HomeScreen, which is another StatelessWidget.
// 6. In HomeScreen, we create a Scaffold with an AppBar that displays the app name.
// 7. The body of the Scaffold contains a Center widget that shows a welcome message with the app name.
// 8. The app is now ready to run, and the app name is displayed in both the AppBar and the main content.
```

## <-- END_MAIN -->

### Summary

In this blog post, we explored the `flutter_app_name` package, which simplifies the management of application names across different platforms. We walked through the installation process, platform-specific configurations, and provided a complete example demonstrating how to set and retrieve the app name dynamically. This package is particularly useful for developers looking to customize their app's branding or manage different build configurations efficiently.
<-- START_DESCRIPTION -->

# Flutter Quill to PDF Package
================================

The `flutter_quill_to_pdf` package is a powerful tool for Flutter developers that allows them to convert Quill editor content to PDF files. This package is particularly useful when you need to generate PDF documents from user-generated content, such as text, images, and other media.

## Features

*   Converts Quill editor content to PDF files
*   Supports text, images, and other media
*   Customizable PDF layout and design
*   Works on both Android and iOS platforms

## When to Use

*   Generating PDF reports from user-generated content
*   Creating custom PDF documents from Quill editor content
*   Converting Quill editor content to PDF for sharing or storage

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `flutter_quill_to_pdf` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:

```yml
dependencies:
  flutter_quill_to_pdf: ^1.0.0
```

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:flutter_quill_to_pdf/flutter_quill_to_pdf.dart';
```

### Step 3: Initialize the Package

Initialize the package by calling the `init` method:

```dart
await FlutterQuillToPdf.init();
```

### Platform-Specific Details

*   **Android:** Make sure to add the following line to your `AndroidManifest.xml` file:

    ```xml
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
```

*   **iOS:** Add the following line to your `Info.plist` file:

    ```xml
<key>NSPhotoLibraryAddUsageDescription</key>
<string>This app needs access to your photo library to generate PDF files.</string>
```

### Required Configurations

*   Make sure to add the following line to your `pubspec.yaml` file:

    ```yml
flutter:
  assets:
    - assets/
```

### Optimizations

*   To optimize the PDF generation process, you can use the `FlutterQuillToPdfOptions` class to customize the PDF layout and design.
*   You can also use the `FlutterQuillToPdfUtils` class to utility methods for generating PDF files.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_quill/flutter_quill.dart';
import 'package:flutter_quill_to_pdf/flutter_quill_to_pdf.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Quill to PDF Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  QuillController _controller = QuillController.basic();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Quill to PDF Demo'),
      ),
      body: Column(
        children: [
          Expanded(
            child: QuillEditor(
              controller: _controller,
              readOnly: false,
              expands: true,
              padding: EdgeInsets.all(16),
            ),
          ),
          SizedBox(height: 16),
          ElevatedButton(
            onPressed: _generatePdf,
            child: Text('Generate PDF'),
          ),
        ],
      ),
    );
  }

  Future<void> _generatePdf() async {
    // Initialize the FlutterQuillToPdf package
    await FlutterQuillToPdf.init();

    // Get the Quill editor content
    String content = _controller.document.toPlainText();

    // Create a new PDF file
    String pdfFile = await FlutterQuillToPdf.generatePdf(content);

    // Print the PDF file path
    print('PDF file generated: $pdfFile');
  }
}

// The application flow is as follows:
// 1. The user types some text in the Quill editor.
// 2. The user clicks the "Generate PDF" button.
// 3. The _generatePdf method is called, which initializes the FlutterQuillToPdf package.
// 4. The method gets the Quill editor content using the _controller.document.toPlainText() method.
// 5. The method creates a new PDF file using the FlutterQuillToPdf.generatePdf() method, passing the Quill editor content as an argument.
// 6. The method prints the PDF file path to the console.

// In summary, this code generates a PDF file from the Quill editor content when the user clicks the "Generate PDF" button.
```

<-- END_MAIN -->
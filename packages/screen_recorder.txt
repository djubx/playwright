```markdown
<!-- START_DESCRIPTION -->
# Screen Recorder Flutter Package

The **screen_recorder** Flutter package is a powerful tool that allows developers to capture the screen of their mobile applications. This package is particularly useful for creating tutorials, recording gameplay, or capturing any on-screen activity for later review or sharing. 

## When to Use This Package
- **Tutorial Creation**: If you are developing an app that requires user guidance, you can record the screen to create tutorial videos.
- **Game Development**: Capture gameplay footage for promotional content or user feedback.
- **Bug Reporting**: Allow users to record their screen when they encounter issues, making it easier for developers to understand and fix bugs.

## Features
- **Cross-Platform Support**: Works on both Android and iOS.
- **Customizable Recording Options**: Set resolution, frame rate, and more.
- **Easy Integration**: Simple API that integrates seamlessly with existing Flutter applications.

This package is a great addition to any Flutter developer's toolkit, enabling enhanced user engagement and support through screen recording capabilities.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up the Screen Recorder Package

## Step 1: Add Dependency
To get started, add the `screen_recorder` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  screen_recorder: ^latest_version
```

Make sure to replace `^latest_version` with the latest version of the package.

## Step 2: Platform-Specific Configuration

### Android
1. Open `android/app/build.gradle` and ensure you have the following permissions:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21 // Minimum SDK version required
    }
}
```

2. Add the following permissions in `AndroidManifest.xml`:

```xml
<uses-permission android:name="android.permission.RECORD_AUDIO"/>
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
<uses-permission android:name="android.permission.SYSTEM_ALERT_WINDOW"/>
```

### iOS
1. Open `ios/Runner/Info.plist` and add the following keys to request permissions:

```xml
<key>NSMicrophoneUsageDescription</key>
<string>We need access to your microphone to record audio.</string>
<key>NSPhotoLibraryUsageDescription</key>
<string>We need access to your photo library to save recordings.</string>
```

## Step 3: Basic Usage
To use the screen recorder, you need to initialize it and start recording. Hereâ€™s a simple example:

```dart
import 'package:flutter/material.dart';
import 'package:screen_recorder/screen_recorder.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  bool isRecording = false;

  void startRecording() async {
    await ScreenRecorder.startRecord();
    setState(() {
      isRecording = true;
    });
  }

  void stopRecording() async {
    await ScreenRecorder.stopRecord();
    setState(() {
      isRecording = false;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Screen Recorder Example')),
      body: Center(
        child: ElevatedButton(
          onPressed: isRecording ? stopRecording : startRecording,
          child: Text(isRecording ? 'Stop Recording' : 'Start Recording'),
        ),
      ),
    );
  }
}
```

This code initializes the screen recorder and provides buttons to start and stop recording. 

With these steps, you should be able to set up and use the **screen_recorder** package in your Flutter application.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Screen Recorder in Flutter

```dart
import 'package:flutter/material.dart';
import 'package:screen_recorder/screen_recorder.dart';

void main() {
  runApp(MyApp());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  bool isRecording = false; // State variable to track recording status

  // Function to start screen recording
  void startRecording() async {
    await ScreenRecorder.startRecord(); // Start recording
    setState(() {
      isRecording = true; // Update state to indicate recording has started
    });
  }

  // Function to stop screen recording
  void stopRecording() async {
    await ScreenRecorder.stopRecord(); // Stop recording
    setState(() {
      isRecording = false; // Update state to indicate recording has stopped
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Screen Recorder Example')),
        body: Center(
          child: ElevatedButton(
            onPressed: isRecording ? stopRecording : startRecording, // Toggle recording
            child: Text(isRecording ? 'Stop Recording' : 'Start Recording'), // Button text based on recording state
          ),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the MyApp widget.
// 2. The RealFlutter widget is created, which maintains the recording state.
// 3. The startRecording function is called when the user presses the button to start recording.
// 4. The stopRecording function is called when the user presses the button to stop recording.
// 5. The UI updates to reflect the current recording state, showing the appropriate button text.
```
<!-- END_MAIN -->
``` 

This structured blog provides a comprehensive overview of the **screen_recorder** Flutter package, guiding users through its features, setup, and implementation with clear examples and explanations.
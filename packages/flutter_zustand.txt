<-- START_DESCRIPTION -->

# Flutter Zustand Package Overview
=====================================

The `flutter_zustand` package is a state management library for Flutter that is inspired by the popular React library, Zustand. It provides a simple and efficient way to manage global state in Flutter applications.

### When to Use

`flutter_zustand` is ideal for managing global state that needs to be accessed from multiple parts of the application. It's particularly useful when you have a complex state that involves multiple variables and you want to keep your widgets clean and focused on their specific tasks.

### Features

*   Simple and efficient state management
*   Automatic state updates and notifications
*   Support for multiple stores and nested stores
*   Compatible with Flutter's built-in `Provider` and `Consumer` widgets

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using Flutter Zustand
=====================================

### Step 1: Add the Package to Your Project

Add the `flutter_zustand` package to your `pubspec.yaml` file:

```yml
dependencies:
  flutter_zustand: ^0.1.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Create a Store

Create a new file called `store.dart` and add the following code:

```dart
import 'package:flutter_zustand/flutter_zustand.dart';

class RealFlutterStore extends Store {
  int _counter = 0;

  int get counter => _counter;

  void incrementCounter() {
    _counter++;
    notifyListeners();
  }
}
```

This creates a simple store with a single variable `_counter` and a method `incrementCounter` to update it.

### Step 3: Wrap Your App with the Store

In your `main.dart` file, wrap your app with the `StoreProvider` widget:

```dart
import 'package:flutter/material.dart';
import 'package:flutter_zustand/flutter_zustand.dart';
import 'package:your_app/store.dart';

void main() {
  runApp(
    StoreProvider<RealFlutterStore>(
      store: RealFlutterStore(),
      child: MyApp(),
    ),
  );
}
```

This makes the store available to all widgets in your app.

### Step 4: Use the Store in Your Widgets

To use the store in a widget, simply wrap the widget with the `StoreConsumer` widget:

```dart
import 'package:flutter/material.dart';
import 'package:flutter_zustand/flutter_zustand.dart';
import 'package:your_app/store.dart';

class MyWidget extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return StoreConsumer<RealFlutterStore>(
      builder: (context, store) {
        return Text('Counter: ${store.counter}');
      },
    );
  }
}
```

This widget will automatically update when the store's `counter` variable changes.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_zustand/flutter_zustand.dart';

// Define the store
class RealFlutterStore extends Store {
  int _counter = 0;

  int get counter => _counter;

  void incrementCounter() {
    _counter++;
    notifyListeners();
  }
}

void main() {
  // Create the store and wrap the app with it
  runApp(
    StoreProvider<RealFlutterStore>(
      store: RealFlutterStore(),
      child: MyApp(),
    ),
  );
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Zustand Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Use the store to display the counter
    return StoreConsumer<RealFlutterStore>(
      builder: (context, store) {
        return Scaffold(
          appBar: AppBar(
            title: Text('Flutter Zustand Demo'),
          ),
          body: Center(
            child: Text('Counter: ${store.counter}'),
          ),
          floatingActionButton: FloatingActionButton(
            onPressed: store.incrementCounter,
            tooltip: 'Increment',
            child: Icon(Icons.add),
          ),
        );
      },
    );
  }
}

// The app flow is as follows:
// 1. The store is created and wrapped around the app.
// 2. The MyHomePage widget uses the StoreConsumer to access the store.
// 3. The store's counter variable is displayed on the screen.
// 4. When the floating action button is pressed, the store's incrementCounter method is called.
// 5. The store's counter variable is updated, and the notifyListeners method is called.
// 6. The StoreConsumer widget is notified of the change and rebuilds the MyHomePage widget.
// 7. The updated counter variable is displayed on the screen.

// Summary: The app uses the flutter_zustand package to manage a global state (the counter variable).
// The store is created and wrapped around the app, and the MyHomePage widget uses the StoreConsumer to access the store.
// The store's counter variable is displayed on the screen, and the floating action button is used to update the counter variable.
```

<-- END_MAIN -->
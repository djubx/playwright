# Flutter Package: form_validator

## <-- START_DESCRIPTION -->

### Description

The `form_validator` package is a powerful and flexible tool designed to simplify form validation in Flutter applications. It provides a set of pre-defined validators and allows developers to create custom validation logic, making it easier to ensure that user input meets specific criteria before submission. This package is particularly useful in applications that require user registration, login forms, or any other input forms where data integrity is crucial.

### When to Use

You should consider using the `form_validator` package when:
- You need to validate user input in forms.
- You want to implement both simple and complex validation rules.
- You prefer a clean and maintainable codebase with reusable validation logic.

### Key Features

- **Pre-defined Validators**: Comes with a set of built-in validators for common use cases like email, password strength, and required fields.
- **Custom Validators**: Allows you to define your own validation logic tailored to your application's needs.
- **Chaining Validators**: You can combine multiple validators to create complex validation rules.
- **Error Messages**: Easily manage and display error messages for invalid inputs.
- **Integration with Flutter Forms**: Seamlessly integrates with Flutter's `Form` and `TextFormField` widgets.

## <-- END_DESCRIPTION -->

## <-- START_TUTORIAL -->

### Tutorial

To get started with the `form_validator` package, follow these steps:

#### Step 1: Add Dependency

Add the `form_validator` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  form_validator: ^1.0.0  # Check for the latest version on pub.dev
```

Run `flutter pub get` to install the package.

#### Step 2: Import the Package

In your Dart file, import the package:

```dart
import 'package:form_validator/form_validator.dart';
```

#### Step 3: Basic Setup

You can use the `form_validator` package with Flutter's `Form` widget. Here’s a simple setup for a login form:

```dart
class RealFlutter extends StatelessWidget {
  final _formKey = GlobalKey<FormState>();
  final String email;
  final String password;

  @override
  Widget build(BuildContext context) {
    return Form(
      key: _formKey,
      child: Column(
        children: <Widget>[
          TextFormField(
            validator: ValidationBuilder()
                .email()
                .required()
                .build(),
            decoration: InputDecoration(labelText: 'Email'),
          ),
          TextFormField(
            validator: ValidationBuilder()
                .minLength(6)
                .required()
                .build(),
            decoration: InputDecoration(labelText: 'Password'),
            obscureText: true,
          ),
          ElevatedButton(
            onPressed: () {
              if (_formKey.currentState!.validate()) {
                // Process data
              }
            },
            child: Text('Submit'),
          ),
        ],
      ),
    );
  }
}
```

#### Platform-Specific Details

- **Android**: Ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21.
- **iOS**: No specific configurations are required for iOS, but ensure you have the latest version of Xcode.

## <-- END_TUTORIAL -->

## <-- START_MAIN -->

### Complete Example

Here’s a complete Flutter application demonstrating the use of the `form_validator` package:

```dart
import 'package:flutter/material.dart';
import 'package:form_validator/form_validator.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Form Validator Example',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Form Validator Example'),
        ),
        body: RealFlutter(),
      ),
    );
  }
}

class RealFlutter extends StatelessWidget {
  // Create a global key to uniquely identify the Form widget
  final _formKey = GlobalKey<FormState>();

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.all(16.0),
      child: Form(
        key: _formKey, // Assign the key to the Form widget
        child: Column(
          children: <Widget>[
            // Email input field with validation
            TextFormField(
              validator: ValidationBuilder()
                  .email() // Check if the input is a valid email
                  .required() // Ensure the field is not empty
                  .build(),
              decoration: InputDecoration(labelText: 'Email'),
            ),
            // Password input field with validation
            TextFormField(
              validator: ValidationBuilder()
                  .minLength(6) // Ensure the password is at least 6 characters
                  .required() // Ensure the field is not empty
                  .build(),
              decoration: InputDecoration(labelText: 'Password'),
              obscureText: true, // Hide the password input
            ),
            // Submit button
            ElevatedButton(
              onPressed: () {
                // Validate the form when the button is pressed
                if (_formKey.currentState!.validate()) {
                  // If the form is valid, display a success message
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(content: Text('Processing Data')),
                  );
                }
              },
              child: Text('Submit'),
            ),
          ],
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the MyApp widget.
// 2. MyApp builds a MaterialApp with a title and a home Scaffold containing an AppBar and the RealFlutter widget.
// 3. The RealFlutter widget contains a Form with a global key for validation.
// 4. Inside the Form, there are two TextFormFields for email and password, each with their own validation rules.
// 5. When the Submit button is pressed, the form is validated.
// 6. If validation passes, a SnackBar is shown indicating that the data is being processed.
```

## <-- END_MAIN -->

### Summary

In this blog post, we explored the `form_validator` package, which simplifies form validation in Flutter applications. We covered its features, installation, and provided a step-by-step tutorial on how to set it up. The complete example demonstrated how to create a simple login form with validation for email and password fields. This package is a great choice for developers looking to implement robust form validation with minimal effort.
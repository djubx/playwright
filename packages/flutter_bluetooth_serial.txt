<-- START_DESCRIPTION -->

# Flutter Bluetooth Serial Package
=====================================

The `flutter_bluetooth_serial` package allows Flutter applications to communicate with devices over Bluetooth. It provides a simple and easy-to-use API for discovering nearby devices, establishing connections, and exchanging data.

### When to Use

This package is ideal for applications that require wireless communication with devices, such as:

* IoT projects
* Robotics
* Wearable devices
* Medical devices

### Features

* Discover nearby Bluetooth devices
* Establish connections with devices
* Send and receive data
* Support for both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `flutter_bluetooth_serial` package, follow these steps:

### Step 1: Add the Package to Your Project

Add the following dependency to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_bluetooth_serial: ^0.2.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:flutter_bluetooth_serial/flutter_bluetooth_serial.dart';
```
### Step 3: Request Bluetooth Permissions

Request Bluetooth permissions on Android:
```dart
import 'package:flutter_bluetooth_serial/flutter_bluetooth_serial.dart';

Future<void> requestPermissions() async {
  await FlutterBluetoothSerial.instance.requestPermissions();
}
```
On iOS, add the following lines to your `Info.plist` file:
```xml
<key>NSBluetoothAlwaysUsageDescription</key>
<string>This app needs access to Bluetooth</string>
```
### Step 4: Discover Nearby Devices

Discover nearby devices:
```dart
Future<void> discoverDevices() async {
  final devices = await FlutterBluetoothSerial.instance.discoverDevices();
  print(devices);
}
```
### Step 5: Establish a Connection

Establish a connection with a device:
```dart
Future<void> connectToDevice(BluetoothDevice device) async {
  await FlutterBluetoothSerial.instance.connectToDevice(device);
}
```
### Step 6: Send and Receive Data

Send and receive data:
```dart
Future<void> sendData(String data) async {
  await FlutterBluetoothSerial.instance.sendData(data);
}

Future<String> receiveData() async {
  final data = await FlutterBluetoothSerial.instance.receiveData();
  return data;
}
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_bluetooth_serial/flutter_bluetooth_serial.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  List<BluetoothDevice> _devices = [];
  BluetoothDevice _selectedDevice;
  String _receivedData = '';

  @override
  void initState() {
    super.initState();
    _discoverDevices();
  }

  Future<void> _discoverDevices() async {
    final devices = await FlutterBluetoothSerial.instance.discoverDevices();
    setState(() {
      _devices = devices;
    });
  }

  Future<void> _connectToDevice(BluetoothDevice device) async {
    await FlutterBluetoothSerial.instance.connectToDevice(device);
    setState(() {
      _selectedDevice = device;
    });
  }

  Future<void> _sendData(String data) async {
    await FlutterBluetoothSerial.instance.sendData(data);
  }

  Future<String> _receiveData() async {
    final data = await FlutterBluetoothSerial.instance.receiveData();
    setState(() {
      _receivedData = data;
    });
    return data;
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Bluetooth Serial'),
      ),
      body: Column(
        children: [
          Expanded(
            child: ListView.builder(
              itemCount: _devices.length,
              itemBuilder: (context, index) {
                return ListTile(
                  title: Text(_devices[index].name),
                  subtitle: Text(_devices[index].address),
                  onTap: () {
                    _connectToDevice(_devices[index]);
                  },
                );
              },
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: TextField(
              decoration: InputDecoration(
                labelText: 'Send Data',
                border: OutlineInputBorder(),
              ),
              onChanged: (text) {
                _sendData(text);
              },
            ),
          ),
          Text(_receivedData),
        ],
      ),
    );
  }
}

// The app starts by discovering nearby devices.
// When a device is selected, the app establishes a connection with the device.
// The user can then send data to the device using the text field.
// The received data is displayed on the screen.
// The app uses the FlutterBluetoothSerial package to handle Bluetooth communication.

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Bluetooth Serial',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}
```

<-- END_MAIN -->
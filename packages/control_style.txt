<-- START_DESCRIPTION -->

Control Style Flutter Package
=============================

The `control_style` Flutter package is a powerful tool for customizing the appearance of Flutter widgets. It provides a simple and intuitive way to change the look and feel of your app's UI components, such as buttons, text fields, and more.

When to Use This Package
------------------------

You should use this package when you want to create a custom UI design for your Flutter app. This package is particularly useful when you want to:

* Change the color scheme of your app
* Customize the shape and size of UI components
* Add custom fonts and typography
* Create a consistent look and feel across your app

Features
--------

The `control_style` package provides a wide range of features, including:

* Customizable color schemes
* Support for custom fonts and typography
* Customizable shape and size of UI components
* Support for platform-specific designs (e.g. Material Design for Android, Cupertino for iOS)

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
---------------

To use the `control_style` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  control_style: ^1.0.0
```
2. Import the package in your Dart file:
```dart
import 'package:control_style/control_style.dart';
```
3. Create a new instance of the `ControlStyle` class:
```dart
ControlStyle _controlStyle = ControlStyle();
```
4. Customize the appearance of your UI components using the various properties and methods provided by the `ControlStyle` class.

Platform-Specific Details
-------------------------

### Android

To use the `control_style` package on Android, you need to add the following line to your `android/app/src/main/AndroidManifest.xml` file:
```xml
<application
    ...
    android:theme="@style/Theme.AppCompat.Light.NoActionBar"
    ...>
```
This will enable the Material Design theme for your app.

### iOS

To use the `control_style` package on iOS, you need to add the following line to your `ios/Runner/Info.plist` file:
```xml
<key>UIUserInterfaceStyle</key>
<string>Light</string>
```
This will enable the Cupertino theme for your app.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:control_style/control_style.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Control Style Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  ControlStyle _controlStyle = ControlStyle();

  @override
  Widget build(BuildContext context) {
    // Create a custom color scheme
    _controlStyle.colorScheme = ColorScheme(
      primary: Colors.blue,
      secondary: Colors.red,
    );

    // Create a custom font
    _controlStyle.fontFamily = 'OpenSans';

    // Create a custom button style
    _controlStyle.buttonStyle = ButtonStyle(
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(10),
      ),
    );

    // Create a custom text field style
    _controlStyle.textFieldStyle = TextFieldStyle(
      decoration: InputDecoration(
        border: OutlineInputBorder(),
      ),
    );

    return Scaffold(
      appBar: AppBar(
        title: Text('Control Style Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            // Use the custom button style
            ElevatedButton(
              style: _controlStyle.buttonStyle,
              onPressed: () {},
              child: Text('Custom Button'),
            ),

            // Use the custom text field style
            TextField(
              style: _controlStyle.textFieldStyle,
              decoration: InputDecoration(
                labelText: 'Custom Text Field',
              ),
            ),
          ],
        ),
      ),
    );
  }
}
```

// The app starts by creating a new instance of the `MaterialApp` class.
// The `MaterialApp` class is the top-level widget for a Material Design app.
// It provides a basic material design visual layout structure.

// The `MyHomePage` class is a stateful widget that represents the home page of the app.
// It creates a custom color scheme, font, button style, and text field style using the `ControlStyle` class.

// The custom styles are then used to create a custom button and text field.
// The custom button and text field are displayed in the center of the screen.

// When the user interacts with the button or text field, the custom styles are applied.

// The app demonstrates how to use the `ControlStyle` class to create a custom UI design for a Flutter app.

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Flutter XUpdate Package: A Comprehensive Overview
=====================================================

The `flutter_xupdate` package is a powerful tool for Flutter developers, providing a simple and efficient way to update their apps. In this blog, we'll delve into the features, setup, and usage of this package, as well as provide a complete example to get you started.

### When to Use This Package

The `flutter_xupdate` package is ideal for apps that require frequent updates, such as:

* Apps with constantly changing content
* Apps that need to fix bugs or security vulnerabilities
* Apps that want to improve user experience with new features

### Features

The `flutter_xupdate` package offers the following features:

* Support for both Android and iOS platforms
* Customizable update UI
* Support for delta updates
* Background update support

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the Flutter XUpdate Package
=====================================================

### Step 1: Add the Package to Your Pubspec.yaml File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_xupdate: ^1.1.1
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:flutter_xupdate/flutter_xupdate.dart';
```
### Step 3: Initialize the Package

Initialize the package in your app's `main` function:
```dart
void main() {
  XUpdate.init(
    androidAppId: 'your_android_app_id',
    iosAppId: 'your_ios_app_id',
  );
  runApp(MyApp());
}
```
### Step 4: Check for Updates

Use the `checkUpdate` method to check for updates:
```dart
XUpdate.checkUpdate(
  context: context,
  onNoUpdate: () {
    print('No update available');
  },
  onUpdate: (updateInfo) {
    print('Update available: ${updateInfo.version}');
  },
);
```
### Platform-Specific Details

#### Android

* Make sure to add the `androidAppId` parameter when initializing the package.
* Add the following code to your `AndroidManifest.xml` file:
```xml
<application>
  ...
  <meta-data
    android:name="com.xuexiang.xupdate.ANDROID_APP_ID"
    android:value="your_android_app_id" />
</application>
```
#### iOS

* Make sure to add the `iosAppId` parameter when initializing the package.
* Add the following code to your `Info.plist` file:
```xml
<key>CFBundleIdentifier</key>
<string>your_ios_app_id</string>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_xupdate/flutter_xupdate.dart';

void main() {
  XUpdate.init(
    androidAppId: 'your_android_app_id',
    iosAppId: 'your_ios_app_id',
  );
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Flutter XUpdate Example'),
        ),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              XUpdate.checkUpdate(
                context: context,
                onNoUpdate: () {
                  print('No update available');
                },
                onUpdate: (updateInfo) {
                  print('Update available: ${updateInfo.version}');
                  // Show update dialog
                  showDialog(
                    context: context,
                    builder: (context) {
                      return AlertDialog(
                        title: Text('Update Available'),
                        content: Text('Version: ${updateInfo.version}'),
                        actions: [
                          TextButton(
                            onPressed: () {
                              // Update now
                              XUpdate.update(
                                context: context,
                                updateInfo: updateInfo,
                              );
                            },
                            child: Text('Update Now'),
                          ),
                          TextButton(
                            onPressed: () {
                              // Later
                              Navigator.pop(context);
                            },
                            child: Text('Later'),
                          ),
                        ],
                      );
                    },
                  );
                },
              );
            },
            child: Text('Check for Updates'),
          ),
        ),
      ),
    );
  }
}

// The app starts by initializing the XUpdate package with the Android and iOS app IDs.
// Then, it runs the RealFlutter app, which displays a button to check for updates.
// When the button is pressed, the app checks for updates using the XUpdate package.
// If an update is available, it shows a dialog with the update version and two buttons: Update Now and Later.
// If the user clicks Update Now, the app updates to the latest version using the XUpdate package.
// If the user clicks Later, the dialog is dismissed.
```

<-- END_MAIN -->
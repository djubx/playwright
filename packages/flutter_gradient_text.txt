```markdown
<-- START_DESCRIPTION -->

# Flutter Gradient Text Package: An Overview

The `flutter_gradient_text` package is a powerful tool for Flutter developers looking to enhance their application's UI with vibrant, gradient-filled text. This package allows you to apply linear gradients to text widgets seamlessly, providing a visually appealing effect that can make your app stand out.

## When to Use `flutter_gradient_text`

Gradient text is particularly useful in scenarios where you want to draw attention to specific text elements, such as:
- **Headings and Titles**: Make your app's headings more engaging.
- **Buttons and Labels**: Highlight important actions or labels.
- **Splash Screens**: Create a striking first impression with gradient text on your splash screen.

## Features

- **Easy Integration**: Simple to set up and use within any Flutter project.
- **Customizable Gradients**: Supports a wide range of gradient configurations, including colors, stops, and directions.
- **Performance Optimized**: Designed to work efficiently without compromising app performance.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using `flutter_gradient_text`

In this tutorial, we'll walk through the process of setting up the `flutter_gradient_text` package and demonstrate how to use it in your Flutter project.

## Setup Process

1. **Add Dependency**

   First, add the `flutter_gradient_text` package to your `pubspec.yaml` file:

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     flutter_gradient_text: ^1.0.0
   ```

2. **Install Packages**

   Run the following command to install the new package:

   ```bash
   flutter pub get
   ```

3. **Import the Package**

   Import the package in your Dart file where you want to use gradient text:

   ```dart
   import 'package:flutter_gradient_text/flutter_gradient_text.dart';
   ```

## Platform-Specific Details

### Android

Ensure your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```gradle
android {
    defaultConfig {
        minSdkVersion 21
    }
}
```

### iOS

No additional setup is required for iOS. Just ensure your project is using the latest Flutter version for optimal performance.

## Using the Package

To use the `flutter_gradient_text` package, wrap your text widget with `GradientText` and specify the gradient colors:

```dart
GradientText(
  'Hello, Gradient!',
  style: TextStyle(fontSize: 40.0),
  gradient: LinearGradient(
    colors: [Colors.blue, Colors.purple],
  ),
);
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_gradient_text/flutter_gradient_text.dart';

void main() => runApp(RealFlutterApp());

class RealFlutterApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Gradient Text Demo',
      home: GradientTextExample(),
    );
  }
}

class GradientTextExample extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Gradient Text Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            // Applying gradient to a simple text
            GradientText(
              'Welcome to RealFlutter!',
              style: TextStyle(fontSize: 40.0, fontWeight: FontWeight.bold),
              gradient: LinearGradient(
                colors: [Colors.blue, Colors.green],
              ),
            ),
            SizedBox(height: 20),
            // Another example with different gradient colors
            GradientText(
              'Flutter is awesome!',
              style: TextStyle(fontSize: 30.0),
              gradient: LinearGradient(
                colors: [Colors.red, Colors.orange, Colors.yellow],
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The `main` function initializes the app by calling `runApp` with `RealFlutterApp`.
// 2. `RealFlutterApp` is a stateless widget that sets up the MaterialApp with a title and home screen.
// 3. `GradientTextExample` is the home screen widget, which is a stateless widget.
// 4. Inside `GradientTextExample`, a Scaffold widget is used to create a basic app structure with an AppBar and a body.
// 5. The body contains a Center widget, which centers its child widgets.
// 6. A Column widget is used to arrange the gradient text widgets vertically.
// 7. `GradientText` widgets are used to display text with linear gradients applied.
// 8. Each `GradientText` widget specifies a text style and a linear gradient with different colors.
// 9. The app displays two gradient text examples with different styles and gradients.

```

<-- END_MAIN -->
```
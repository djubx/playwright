```markdown
<-- START_DESCRIPTION -->

# Overlay Tooltip Flutter Package

The `overlay_tooltip` Flutter package is a powerful tool designed to help developers create interactive and informative tooltips in their Flutter applications. Tooltips are essential for enhancing user experience by providing additional information about UI elements without cluttering the interface. This package allows you to overlay tooltips on any widget, making it versatile and easy to integrate into existing projects.

## When to Use

- **Guided Tours**: Use tooltips to guide users through the features of your app.
- **Feature Highlighting**: Highlight new or important features with descriptive tooltips.
- **User Assistance**: Provide additional context or instructions for complex UI elements.

## Features

- **Customizable Appearance**: Adjust the look and feel of tooltips to match your app's theme.
- **Flexible Positioning**: Position tooltips relative to their target widgets.
- **Interactive Content**: Include buttons or other interactive elements within tooltips.
- **Animation Support**: Add animations to tooltip appearance and disappearance for a smooth user experience.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Overlay Tooltip Package

In this tutorial, we will walk through the process of setting up and using the `overlay_tooltip` package in a Flutter project. We will cover platform-specific configurations for both Android and iOS to ensure smooth operation.

## Setup Process

1. **Add Dependency**

   First, add the `overlay_tooltip` package to your `pubspec.yaml` file:

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     overlay_tooltip: ^1.0.0
   ```

2. **Install Packages**

   Run the following command to install the new package:

   ```bash
   flutter pub get
   ```

3. **Platform-Specific Configurations**

   - **Android**: Ensure your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

     ```gradle
     defaultConfig {
         minSdkVersion 21
     }
     ```

   - **iOS**: No additional configuration is required for iOS.

## Using the Package

To use the `overlay_tooltip` package, you need to wrap your target widget with the `OverlayTooltip` widget and provide a `TooltipController` to manage the tooltip's state.

### Basic Usage

```dart
import 'package:flutter/material.dart';
import 'package:overlay_tooltip/overlay_tooltip.dart';

class RealFlutter extends StatelessWidget {
  final TooltipController _tooltipController = TooltipController();

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Overlay Tooltip Example')),
        body: Center(
          child: OverlayTooltip(
            controller: _tooltipController,
            tooltip: (context) => Text('This is a tooltip'),
            child: ElevatedButton(
              onPressed: () {
                _tooltipController.showTooltip();
              },
              child: Text('Show Tooltip'),
            ),
          ),
        ),
      ),
    );
  }
}
```

In this example, we create a simple app with a button that, when pressed, shows a tooltip.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:overlay_tooltip/overlay_tooltip.dart';

// Main application class
class RealFlutter extends StatelessWidget {
  // Controller to manage the state of the tooltip
  final TooltipController _tooltipController = TooltipController();

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      // Define the home screen of the app
      home: Scaffold(
        appBar: AppBar(title: Text('Overlay Tooltip Example')),
        body: Center(
          // Wrap the target widget with OverlayTooltip
          child: OverlayTooltip(
            controller: _tooltipController, // Assign the controller
            tooltip: (context) => Container(
              padding: EdgeInsets.all(8.0),
              decoration: BoxDecoration(
                color: Colors.black,
                borderRadius: BorderRadius.circular(4.0),
              ),
              child: Text(
                'This is a tooltip',
                style: TextStyle(color: Colors.white),
              ),
            ),
            // The widget that triggers the tooltip
            child: ElevatedButton(
              onPressed: () {
                // Show the tooltip when the button is pressed
                _tooltipController.showTooltip();
              },
              child: Text('Show Tooltip'),
            ),
          ),
        ),
      ),
    );
  }
}

void main() {
  runApp(RealFlutter());
}

// Application Flow:
// 1. The RealFlutter class is the main entry point of the app.
// 2. A TooltipController is created to manage the tooltip's visibility.
// 3. The MaterialApp widget sets up the app's theme and home screen.
// 4. The Scaffold widget provides the basic structure with an AppBar and a body.
// 5. The OverlayTooltip widget wraps the ElevatedButton, linking it with the TooltipController.
// 6. When the button is pressed, the tooltip is displayed using the showTooltip method.
// 7. The tooltip is styled with a black background and white text, appearing above the button.
```

<-- END_MAIN -->
```
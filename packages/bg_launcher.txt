<-- START_DESCRIPTION -->

**bg_launcher: A Flutter Package for Background Execution**
===========================================================

The `bg_launcher` package is a powerful tool for Flutter developers that enables running tasks in the background, even when the app is not in the foreground. This package is particularly useful for apps that require continuous execution, such as music players, alarm clocks, or fitness trackers.

**Key Features:**

*   Run tasks in the background, even when the app is not in the foreground
*   Support for both Android and iOS platforms
*   Ability to schedule tasks to run at specific times or intervals
*   Option to run tasks in a separate process or thread

**When to Use:**

*   When your app requires continuous execution, even when the user is not actively using it
*   When you need to perform tasks that take a long time to complete, such as downloading large files or processing data
*   When you want to provide a seamless user experience by running tasks in the background

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setting Up bg_launcher**
---------------------------

To use the `bg_launcher` package, follow these steps:

1.  Add the package to your `pubspec.yaml` file:

    ```yml
dependencies:
  flutter:
    sdk: flutter
  bg_launcher: ^1.0.0
```

2.  Run `flutter pub get` to install the package.
3.  Import the package in your Dart file:

    ```dart
import 'package:bg_launcher/bg_launcher.dart';
```

**Platform-Specific Configurations:**

### Android

*   Add the following code to your `AndroidManifest.xml` file:

    ```xml
<uses-permission android:name="android.permission.WAKE_LOCK" />
```

*   Create a new file called `bg_launcher.xml` in the `res/xml` directory:

    ```xml
<?xml version="1.0" encoding="utf-8"?>
<config xmlns:android="http://schemas.android.com/apk/res/android">
    <service
        android:name="com.example.RealFlutterBgService"
        android:enabled="true"
        android:exported="true" />
</config>
```

### iOS

*   Add the following code to your `Info.plist` file:

    ```xml
<key>UIBackgroundModes</key>
<array>
    <string>processing</string>
</array>
```

**Using bg_launcher**
----------------------

To use the `bg_launcher` package, create a new instance of the `BgLauncher` class:

```dart
BgLauncher _bgLauncher = BgLauncher();
```

Then, you can use the `run` method to execute a task in the background:

```dart
_bgLauncher.run(() {
  // Code to run in the background
});
```

You can also schedule tasks to run at specific times or intervals using the `schedule` method:

```dart
_bgLauncher.schedule(Duration(hours: 1), () {
  // Code to run after 1 hour
});
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:bg_launcher/bg_launcher.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'BgLauncher Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  BgLauncher _bgLauncher = BgLauncher();

  void _runInBackground() {
    _bgLauncher.run(() {
      // Code to run in the background
      print('Running in the background');
    });
  }

  void _scheduleTask() {
    _bgLauncher.schedule(Duration(hours: 1), () {
      // Code to run after 1 hour
      print('Running after 1 hour');
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('BgLauncher Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: _runInBackground,
              child: Text('Run in Background'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _scheduleTask,
              child: Text('Schedule Task'),
            ),
          ],
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user opens the app and is presented with two buttons: "Run in Background" and "Schedule Task".
// 2. When the user clicks the "Run in Background" button, the _runInBackground function is called.
// 3. The _runInBackground function uses the BgLauncher instance to run a task in the background.
// 4. The task prints a message to the console indicating that it is running in the background.
// 5. When the user clicks the "Schedule Task" button, the _scheduleTask function is called.
// 6. The _scheduleTask function uses the BgLauncher instance to schedule a task to run after 1 hour.
// 7. After 1 hour, the task prints a message to the console indicating that it is running after 1 hour.

```

<-- END_MAIN -->
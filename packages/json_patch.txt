<-- START_DESCRIPTION -->

# JSON Patch Flutter Package
================================

The `json_patch` package is a Flutter library that allows you to apply JSON patches to JSON documents. It provides a simple and efficient way to update JSON data without having to rewrite the entire document.

## When to Use
--------------

Use the `json_patch` package when you need to update JSON data in your Flutter app, such as:

* Updating a JSON document stored locally or remotely
* Applying patches to a JSON document received from a server
* Creating a JSON document with dynamic data

## Features
------------

* Supports JSON patch operations: add, remove, replace, move, copy, and test
* Works with JSON documents of any size
* Efficient and fast patch application

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
-----------------

## Add the Package to Your Project
--------------------------------

Add the `json_patch` package to your `pubspec.yaml` file:
```yml
dependencies:
  json_patch: ^1.0.0
```
Then, run `flutter pub get` to install the package.

## Import the Package
---------------------

Import the `json_patch` package in your Dart file:
```dart
import 'package:json_patch/json_patch.dart';
```
## Create a JSON Document
-------------------------

Create a JSON document as a `Map<String, dynamic>`:
```dart
Map<String, dynamic> jsonDocument = {
  'name': 'John Doe',
  'age': 30,
  'address': {
    'street': '123 Main St',
    'city': 'Anytown',
    'state': 'CA',
    'zip': '12345'
  }
};
```
## Create a JSON Patch
---------------------

Create a JSON patch as a `List<PatchOperation>`:
```dart
List<PatchOperation> patch = [
  PatchOperation.add('/address/phone', '555-1234'),
  PatchOperation.replace('/age', 31)
];
```
## Apply the Patch
------------------

Apply the patch to the JSON document using the `applyPatch` function:
```dart
Map<String, dynamic> updatedJsonDocument = applyPatch(jsonDocument, patch);
```
The `updatedJsonDocument` will contain the updated JSON data.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:json_patch/json_patch.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  Map<String, dynamic> _jsonDocument = {
    'name': 'John Doe',
    'age': 30,
    'address': {
      'street': '123 Main St',
      'city': 'Anytown',
      'state': 'CA',
      'zip': '12345'
    }
  };

  List<PatchOperation> _patch = [
    PatchOperation.add('/address/phone', '555-1234'),
    PatchOperation.replace('/age', 31)
  ];

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'JSON Patch Demo',
      home: Scaffold(
        appBar: AppBar(
          title: Text('JSON Patch Demo'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Text('Original JSON Document:'),
              Text(_jsonDocument.toString()),
              SizedBox(height: 20),
              Text('JSON Patch:'),
              Text(_patch.toString()),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  Map<String, dynamic> updatedJsonDocument = applyPatch(_jsonDocument, _patch);
                  setState(() {
                    _jsonDocument = updatedJsonDocument;
                  });
                },
                child: Text('Apply Patch'),
              ),
              SizedBox(height: 20),
              Text('Updated JSON Document:'),
              Text(_jsonDocument.toString()),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app and sees the original JSON document and the JSON patch.
// 2. The user clicks the "Apply Patch" button.
// 3. The `applyPatch` function is called with the original JSON document and the JSON patch.
// 4. The `applyPatch` function applies the patch operations to the original JSON document.
// 5. The updated JSON document is returned and stored in the `_jsonDocument` variable.
// 6. The UI is updated to show the updated JSON document.

// In summary, the app demonstrates how to use the `json_patch` package to apply a JSON patch to a JSON document.
```

<-- END_MAIN -->
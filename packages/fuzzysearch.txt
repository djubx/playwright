<-- START_DESCRIPTION -->

Fuzzysearch Flutter Package
==========================

The Fuzzysearch Flutter package is a powerful library that allows you to implement fuzzy search functionality in your Flutter applications. Fuzzy search is a technique used to find strings that match a pattern, even when the pattern contains typos or other errors.

When to Use Fuzzysearch
----------------------

You can use Fuzzysearch in a variety of scenarios, such as:

*   Autocomplete suggestions
*   Search bars
*   Data filtering

Features of Fuzzysearch
----------------------

*   **Fuzzy matching**: Fuzzysearch allows you to find strings that match a pattern, even when the pattern contains typos or other errors.
*   **Configurable**: You can configure the Fuzzysearch algorithm to suit your needs, such as setting the minimum score for a match or the maximum number of results to return.
*   **Fast and efficient**: Fuzzysearch is optimized for performance and can handle large datasets with ease.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setting Up Fuzzysearch
---------------------

To use Fuzzysearch in your Flutter application, you need to add the `fuzzysearch` package to your `pubspec.yaml` file:

```yml
dependencies:
  fuzzysearch: ^1.0.0
```

Then, run `flutter pub get` to install the package.

Using Fuzzysearch
-----------------

Here's an example of how to use Fuzzysearch to find strings that match a pattern:

```dart
import 'package:fuzzysearch/fuzzysearch.dart';

void main() {
  List<String> items = ['apple', 'banana', 'orange'];
  String query = 'aple';

  List<FuzzySearchResult> results = FuzzySearch.search(query, items);

  for (FuzzySearchResult result in results) {
    print('${result.item} (${result.score})');
  }
}
```

In this example, we're searching for strings that match the pattern `'aple'`. The `FuzzySearch.search` function returns a list of `FuzzySearchResult` objects, which contain the matching string and its score.

Platform-Specific Details
-------------------------

Fuzzysearch works on both Android and iOS platforms. However, you may need to configure the package differently depending on your platform.

For example, on Android, you may need to add the following configuration to your `android/app/src/main/AndroidManifest.xml` file:

```xml
<application
  ...
  android:hardwareAccelerated="true"
  ...
>
```

This configuration enables hardware acceleration for the Fuzzysearch algorithm, which can improve performance.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:fuzzysearch/fuzzysearch.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final TextEditingController _controller = TextEditingController();
  List<String> _items = ['apple', 'banana', 'orange'];
  List<FuzzySearchResult> _results = [];

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Fuzzysearch Example'),
        ),
        body: Column(
          children: [
            Padding(
              padding: const EdgeInsets.all(16.0),
              child: TextField(
                controller: _controller,
                decoration: InputDecoration(
                  labelText: 'Search',
                  border: OutlineInputBorder(),
                ),
                onChanged: (query) {
                  setState(() {
                    _results = FuzzySearch.search(query, _items);
                  });
                },
              ),
            ),
            Expanded(
              child: ListView.builder(
                itemCount: _results.length,
                itemBuilder: (context, index) {
                  return ListTile(
                    title: Text(_results[index].item),
                    subtitle: Text('Score: ${_results[index].score}'),
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user types a query into the search bar.
// 2. The `onChanged` callback is called, which updates the `_results` list with the new query.
// 3. The `ListView` is rebuilt with the new `_results` list.
// 4. The user can select an item from the list to view its details.
// The Fuzzysearch algorithm is used to find strings that match the query.
// The algorithm returns a list of `FuzzySearchResult` objects, which contain the matching string and its score.
// The score is used to determine the relevance of the match.

// The application uses a `TextEditingController` to manage the search bar's text.
// The `TextEditingController` provides a way to access the current text in the search bar.
// The `onChanged` callback is used to update the `_results` list when the user types a new query.

// The application uses a `ListView` to display the search results.
// The `ListView` is rebuilt whenever the `_results` list changes.
// The `ListView` uses a `ListTile` to display each search result.
// The `ListTile` displays the matching string and its score.

// The application uses the Fuzzysearch algorithm to find strings that match the query.
// The algorithm is used to search for strings in the `_items` list.
// The algorithm returns a list of `FuzzySearchResult` objects, which contain the matching string and its score.
```

<-- END_MAIN -->
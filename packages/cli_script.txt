<-- START_DESCRIPTION -->

# cli_script Flutter Package: A Comprehensive Overview
=====================================================

The `cli_script` Flutter package is a powerful tool that allows developers to run command-line scripts from their Flutter applications. This package provides a simple and efficient way to execute shell commands, making it an ideal solution for tasks such as data processing, file management, and system automation.

### When to Use cli_script

The `cli_script` package is particularly useful in scenarios where you need to:

* Run shell commands from your Flutter app
* Execute system-level tasks, such as file management or network operations
* Integrate with external tools or services that require command-line interactions

### Key Features

* Support for running shell commands on both Android and iOS platforms
* Ability to execute commands asynchronously, allowing for non-blocking UI interactions
* Error handling and callback mechanisms for handling command execution results

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using cli_script
=============================

To use the `cli_script` package in your Flutter project, follow these steps:

### Step 1: Add the Package to Your pubspec.yaml File

```yml
dependencies:
  cli_script: ^1.0.0
```

### Step 2: Import the Package in Your Dart File

```dart
import 'package:cli_script/cli_script.dart';
```

### Step 3: Create a CliScript Instance

```dart
CliScript _cliScript = CliScript();
```

### Step 4: Run a Shell Command

```dart
_cliScript.run('ls -l', (output) {
  print(output);
}, (error) {
  print(error);
});
```

### Platform-Specific Details

* **Android:** The `cli_script` package uses the Android `Runtime` class to execute shell commands. This requires the `android.permission.INTERNET` permission in your AndroidManifest.xml file.
* **iOS:** The `cli_script` package uses the iOS `NSTask` class to execute shell commands. This requires the `NSAppTransportSecurity` key in your Info.plist file.

### Configurations and Optimizations

* To run commands asynchronously, use the `runAsync` method instead of `run`.
* To handle errors and callbacks, use the `onError` and `onOutput` parameters of the `run` and `runAsync` methods.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:cli_script/cli_script.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  CliScript _cliScript = CliScript();
  String _output = '';

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('cli_script Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Text(_output),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  _runCommand();
                },
                child: Text('Run Command'),
              ),
            ],
          ),
        ),
      ),
    );
  }

  void _runCommand() {
    _cliScript.runAsync('ls -l', (output) {
      setState(() {
        _output = output;
      });
    }, (error) {
      setState(() {
        _output = error;
      });
    });
  }
}

// The application flow is as follows:
// 1. The user presses the "Run Command" button.
// 2. The _runCommand method is called, which runs the 'ls -l' command using the CliScript instance.
// 3. The command output is received and stored in the _output variable.
// 4. The UI is updated to display the command output.
// 5. If an error occurs, the error message is displayed instead.

// In summary, this code demonstrates how to use the cli_script package to run a shell command and display the output in a Flutter app.
```

<-- END_MAIN -->
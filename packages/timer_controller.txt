<-- START_DESCRIPTION -->

# Timer Controller Flutter Package
=====================================

The `timer_controller` Flutter package provides a simple and efficient way to manage timers in your Flutter application. It allows you to create, start, stop, and reset timers, as well as handle timer events and callbacks.

### When to Use

The `timer_controller` package is useful in a variety of scenarios, such as:

* Creating a countdown timer for a game or quiz
* Implementing a timer for a workout or exercise routine
* Handling timeouts for network requests or asynchronous operations
* Creating a scheduling system for reminders or notifications

### Features

The `timer_controller` package provides the following features:

* Create and manage multiple timers
* Start, stop, and reset timers
* Handle timer events and callbacks
* Set timer intervals and durations
* Support for both one-time and repeating timers

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Using the Timer Controller Package
=============================================

### Step 1: Add the Package to Your Project

Add the `timer_controller` package to your `pubspec.yaml` file:
```yml
dependencies:
  timer_controller: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the `timer_controller` package in your Dart file:
```dart
import 'package:timer_controller/timer_controller.dart';
```
### Step 3: Create a Timer Controller

Create a `TimerController` instance:
```dart
TimerController _timerController = TimerController();
```
### Step 4: Set Up the Timer

Set up the timer by specifying the interval and duration:
```dart
_timerController.setInterval(Duration(seconds: 1));
_timerController.setDuration(Duration(minutes: 5));
```
### Step 5: Start the Timer

Start the timer:
```dart
_timerController.start();
```
### Step 6: Handle Timer Events

Handle timer events by listening to the `onTick` and `onComplete` callbacks:
```dart
_timerController.onTick((duration) {
  print('Timer tick: $duration');
});

_timerController.onComplete(() {
  print('Timer complete!');
});
```
### Platform-Specific Details

* On Android, the `timer_controller` package uses the `Handler` class to handle timer events.
* On iOS, the `timer_controller` package uses the `NSTimer` class to handle timer events.

### Required Configurations or Optimizations

* Make sure to dispose of the `TimerController` instance when it is no longer needed to prevent memory leaks.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:timer_controller/timer_controller.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  TimerController _timerController = TimerController();

  @override
  void initState() {
    super.initState();
    _timerController.setInterval(Duration(seconds: 1));
    _timerController.setDuration(Duration(minutes: 5));
    _timerController.onTick((duration) {
      print('Timer tick: $duration');
    });
    _timerController.onComplete(() {
      print('Timer complete!');
    });
  }

  @override
  void dispose() {
    _timerController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Timer Controller Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Text(
                'Timer Controller Example',
                style: TextStyle(fontSize: 24),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  _timerController.start();
                },
                child: Text('Start Timer'),
              ),
              SizedBox(height: 10),
              ElevatedButton(
                onPressed: () {
                  _timerController.stop();
                },
                child: Text('Stop Timer'),
              ),
              SizedBox(height: 10),
              ElevatedButton(
                onPressed: () {
                  _timerController.reset();
                },
                child: Text('Reset Timer'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user starts the timer by pressing the "Start Timer" button.
// 2. The timer starts ticking and the `onTick` callback is called every second.
// 3. The `onTick` callback prints the current duration to the console.
// 4. When the timer completes, the `onComplete` callback is called.
// 5. The `onComplete` callback prints a message to the console indicating that the timer has completed.
// 6. The user can stop the timer by pressing the "Stop Timer" button.
// 7. The user can reset the timer by pressing the "Reset Timer" button.

// The timer controller is disposed of when the widget is removed from the tree to prevent memory leaks.

```

<-- END_MAIN -->
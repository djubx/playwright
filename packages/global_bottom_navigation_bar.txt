# Global Bottom Navigation Bar Flutter Package

## <-- START_DESCRIPTION -->

### Overview

The `global_bottom_navigation_bar` Flutter package provides a customizable and easy-to-use bottom navigation bar that can be used across multiple screens in a Flutter application. This package is particularly useful for applications that require a consistent navigation experience, allowing users to switch between different sections of the app seamlessly.

### When to Use

You should consider using the `global_bottom_navigation_bar` package when:
- Your application has multiple main sections that users need to navigate between frequently.
- You want to maintain a consistent navigation experience across different screens.
- You need a customizable bottom navigation bar that can adapt to various design requirements.

### Features

- **Customizable UI**: The package allows you to customize the appearance of the bottom navigation bar, including colors, icons, and text styles.
- **Global State Management**: It provides a way to manage the state of the navigation bar globally, ensuring that the selected tab persists across different screens.
- **Easy Integration**: The package is designed to be easy to integrate into existing Flutter applications with minimal setup.
- **Responsive Design**: The navigation bar is responsive and works well on both Android and iOS devices.

## <-- END_DESCRIPTION -->

## <-- START_TUTORIAL -->

### Setup Process

To get started with the `global_bottom_navigation_bar` package, follow these steps:

1. **Add Dependency**: Open your `pubspec.yaml` file and add the package dependency:

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     global_bottom_navigation_bar: ^latest_version
   ```

   Replace `^latest_version` with the latest version of the package available on [pub.dev](https://pub.dev/packages/global_bottom_navigation_bar).

2. **Install Packages**: Run the following command in your terminal to install the new dependency:

   ```bash
   flutter pub get
   ```

3. **Platform-Specific Configuration**: 
   - For **Android**, ensure that your `AndroidManifest.xml` file has the necessary permissions and configurations. Typically, no special configurations are needed for the bottom navigation bar.
   - For **iOS**, ensure that your `Info.plist` file is configured correctly, but again, no specific configurations are required for the navigation bar.

### Using the Package

To use the `global_bottom_navigation_bar`, you need to wrap your main application widget with the `GlobalBottomNavigationBar` widget. Hereâ€™s a basic example of how to set it up:

```dart
import 'package:flutter/material.dart';
import 'package:global_bottom_navigation_bar/global_bottom_navigation_bar.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: RealFlutter(),
    );
  }
}
```

In the `RealFlutter` class, you can define the bottom navigation bar and its items:

```dart
class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return GlobalBottomNavigationBar(
      items: [
        BottomNavigationBarItem(icon: Icon(Icons.home), label: 'Home'),
        BottomNavigationBarItem(icon: Icon(Icons.search), label: 'Search'),
        BottomNavigationBarItem(icon: Icon(Icons.settings), label: 'Settings'),
      ],
      onTap: (index) {
        // Handle navigation based on the selected index
      },
    );
  }
}
```

## <-- END_TUTORIAL -->

## <-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:global_bottom_navigation_bar/global_bottom_navigation_bar.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Variable to keep track of the selected index
  int _selectedIndex = 0;

  // List of widgets to display for each tab
  final List<Widget> _widgetOptions = <Widget>[
    HomeScreen(),
    SearchScreen(),
    SettingsScreen(),
  ];

  // Function to handle tab changes
  void _onItemTapped(int index) {
    setState(() {
      _selectedIndex = index; // Update the selected index
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Global Bottom Navigation Bar Example'),
      ),
      body: _widgetOptions.elementAt(_selectedIndex), // Display the selected widget
      bottomNavigationBar: GlobalBottomNavigationBar(
        items: const <BottomNavigationBarItem>[
          BottomNavigationBarItem(icon: Icon(Icons.home), label: 'Home'),
          BottomNavigationBarItem(icon: Icon(Icons.search), label: 'Search'),
          BottomNavigationBarItem(icon: Icon(Icons.settings), label: 'Settings'),
        ],
        currentIndex: _selectedIndex, // Set the current index
        onTap: _onItemTapped, // Handle tap events
      ),
    );
  }
}

// Home screen widget
class HomeScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Center(child: Text('Home Screen'));
  }
}

// Search screen widget
class SearchScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Center(child: Text('Search Screen'));
  }
}

// Settings screen widget
class SettingsScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Center(child: Text('Settings Screen'));
  }
}

/*
Application Flow Explanation:
1. The main function initializes the app and sets MyApp as the root widget.
2. MyApp builds a MaterialApp with RealFlutter as the home widget.
3. RealFlutter is a StatefulWidget that maintains the state of the selected tab.
4. The _selectedIndex variable keeps track of which tab is currently selected.
5. The _widgetOptions list contains the widgets for each tab (Home, Search, Settings).
6. The _onItemTapped function updates the selected index when a tab is tapped.
7. The Scaffold widget contains an AppBar and a body that displays the currently selected widget.
8. The GlobalBottomNavigationBar is configured with items and the current index, and it calls _onItemTapped when a tab is tapped.
9. Each screen (HomeScreen, SearchScreen, SettingsScreen) is a simple StatelessWidget that displays a centered text.
*/

## <-- END_MAIN --> 

### Summary

In this blog post, we explored the `global_bottom_navigation_bar` Flutter package, which provides a customizable bottom navigation bar for Flutter applications. We walked through the setup process, including adding the package to your project and configuring it for use. Finally, we provided a complete example of a Flutter application that demonstrates how to implement the navigation bar and manage the state of the selected tab. This package is ideal for applications that require a consistent and user-friendly navigation experience.
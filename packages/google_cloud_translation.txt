<-- START_DESCRIPTION -->

# Google Cloud Translation Flutter Package
=============================================

The `google_cloud_translation` Flutter package provides a simple and efficient way to integrate Google Cloud Translation API into your Flutter applications. This package allows you to translate text from one language to another, detect the language of a given text, and get the list of supported languages.

## When to Use This Package
---------------------------

You can use this package in various scenarios, such as:

*   Building a multilingual app that requires real-time text translation.
*   Creating a language learning app that needs to detect the language of user input.
*   Developing a global e-commerce platform that requires translating product descriptions and reviews.

## Features
------------

The `google_cloud_translation` package offers the following features:

*   **Text Translation**: Translate text from one language to another.
*   **Language Detection**: Detect the language of a given text.
*   **Supported Languages**: Get the list of supported languages.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
------------------

To use the `google_cloud_translation` package, follow these steps:

### Step 1: Add the Package to Your Project

Add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  google_cloud_translation: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:google_cloud_translation/google_cloud_translation.dart';
```

### Step 3: Initialize the Translation Client

Create an instance of the `TranslationClient` class:

```dart
final translationClient = TranslationClient();
```

### Step 4: Set Up Platform-Specific Configurations

#### Android

Add the following configuration to your `android/app/src/main/AndroidManifest.xml` file:

```xml
<application
  ...
  android:usesCleartextTraffic="true"
  ...>
```

#### iOS

Add the following configuration to your `ios/Runner/Info.plist` file:

```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```

### Step 5: Use the Translation Client

Use the `translate` method to translate text:

```dart
final translatedText = await translationClient.translate(
  'Hello, world!',
  from: 'en',
  to: 'es',
);
print(translatedText); // Output: Hola, mundo!
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:google_cloud_translation/google_cloud_translation.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Google Cloud Translation Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _translationClient = TranslationClient();
  final _textController = TextEditingController();
  String _translatedText = '';

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Google Cloud Translation Demo'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Column(
          children: [
            TextField(
              controller: _textController,
              decoration: InputDecoration(
                labelText: 'Enter text to translate',
                border: OutlineInputBorder(),
              ),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _translateText,
              child: Text('Translate'),
            ),
            SizedBox(height: 20),
            Text(_translatedText),
          ],
        ),
      ),
    );
  }

  Future<void> _translateText() async {
    final text = _textController.text;
    final translatedText = await _translationClient.translate(
      text,
      from: 'en',
      to: 'es',
    );
    setState(() {
      _translatedText = translatedText;
    });
  }
}

// The app starts by creating a Material app with a home page.
// The home page has a text field to input text, a button to translate the text, and a text widget to display the translated text.
// When the user clicks the translate button, the _translateText function is called.
// This function gets the text from the text field, translates it using the TranslationClient, and updates the translated text widget with the result.
// The app uses the TranslationClient to translate the text from English to Spanish.
// The translated text is then displayed on the screen.
```

<-- END_MAIN -->
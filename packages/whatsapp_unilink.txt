```markdown
<-- START_DESCRIPTION -->

# WhatsApp Unilink Flutter Package

The `whatsapp_unilink` Flutter package is a powerful tool designed to simplify the process of creating WhatsApp links directly from your Flutter applications. This package is particularly useful for developers who want to integrate WhatsApp messaging capabilities into their apps without dealing with the complexities of deep linking or URL encoding manually.

## When to Use

- **Customer Support**: Allow users to contact support directly via WhatsApp.
- **Social Sharing**: Enable users to share content or invite friends through WhatsApp.
- **Business Communication**: Facilitate direct communication between businesses and customers.

## Features

- **Simple API**: Easily create WhatsApp links with minimal code.
- **Cross-Platform**: Works seamlessly on both Android and iOS.
- **Customizable**: Supports custom messages and phone numbers.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using WhatsApp Unilink

In this section, we'll walk through the setup process for the `whatsapp_unilink` package and demonstrate how to use it in a Flutter application.

## Setup Process

### Step 1: Add Dependency

Add the `whatsapp_unilink` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  whatsapp_unilink: ^2.0.0
```

Run `flutter pub get` to install the package.

### Step 2: Platform-Specific Configuration

#### Android

1. Open `android/app/src/main/AndroidManifest.xml`.
2. Ensure you have the following intent filter within the `<activity>` tag to handle WhatsApp links:

```xml
<intent-filter>
    <action android:name="android.intent.action.VIEW"/>
    <category android:name="android.intent.category.DEFAULT"/>
    <category android:name="android.intent.category.BROWSABLE"/>
    <data android:scheme="https"/>
</intent-filter>
```

#### iOS

1. Open `ios/Runner/Info.plist`.
2. Add the following to support universal links:

```xml
<key>LSApplicationQueriesSchemes</key>
<array>
    <string>whatsapp</string>
</array>
```

## Using the Package

To use the package, import it into your Dart file:

```dart
import 'package:whatsapp_unilink/whatsapp_unilink.dart';
```

Create a `Unilink` object with the desired phone number and message, then launch it:

```dart
final link = WhatsAppUnilink(
  phoneNumber: '+1234567890',
  text: 'Hello! I would like to chat with you.',
);

await launch('$link');
```

<-- END_TUTORIAL -->

<-- MAIN -->

# Complete Example: Flutter Main File

Below is a complete example demonstrating how to use the `whatsapp_unilink` package in a Flutter application.

```dart
import 'package:flutter/material.dart';
import 'package:whatsapp_unilink/whatsapp_unilink.dart';
import 'package:url_launcher/url_launcher.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'WhatsApp Unilink Demo',
      theme: ThemeData(
        primarySwatch: Colors.green,
      ),
      home: WhatsAppHomePage(),
    );
  }
}

class WhatsAppHomePage extends StatelessWidget {
  // Function to create and launch the WhatsApp link
  Future<void> _launchWhatsApp() async {
    final link = WhatsAppUnilink(
      phoneNumber: '+1234567890', // The phone number to send the message to
      text: 'Hello! I would like to chat with you.', // The message to send
    );

    // Launch the WhatsApp link
    await launch('$link');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('WhatsApp Unilink Example'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: _launchWhatsApp, // Call the function when button is pressed
          child: Text('Contact via WhatsApp'),
        ),
      ),
    );
  }
}
```

// Application Flow Explanation
// 1. The `main` function initializes the app by running `RealFlutter`.
// 2. `RealFlutter` is a stateless widget that sets up the MaterialApp with a home page.
// 3. `WhatsAppHomePage` is the main screen with a button to launch WhatsApp.
// 4. The `_launchWhatsApp` function creates a `WhatsAppUnilink` with a phone number and message.
// 5. When the button is pressed, `_launchWhatsApp` is called, which launches the WhatsApp link using `url_launcher`.

<-- END_MAIN -->
```
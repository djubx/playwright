```markdown
<-- START_DESCRIPTION -->

# Flutter Floating Bottom Bar: A Comprehensive Overview

The `flutter_floating_bottom_bar` package is a versatile Flutter library designed to create customizable and interactive floating bottom navigation bars. This package is particularly useful for applications that require a modern and dynamic user interface, offering a sleek alternative to traditional bottom navigation bars.

## When to Use

- **Modern UI Design**: When your application demands a contemporary look and feel, the floating bottom bar can enhance the visual appeal.
- **Space Optimization**: Ideal for apps that need to maximize screen real estate, as the bar can be hidden or minimized when not in use.
- **Interactive Navigation**: Suitable for applications that require dynamic navigation options, allowing for smooth transitions and animations.

## Features

- **Customizable Appearance**: Easily adjust colors, shapes, and sizes to fit your app's theme.
- **Smooth Animations**: Built-in animations for a seamless user experience.
- **Flexible Positioning**: Position the bar anywhere on the screen, not just at the bottom.
- **Responsive Design**: Adapts to different screen sizes and orientations.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using `flutter_floating_bottom_bar`

In this tutorial, we'll walk through the setup process for the `flutter_floating_bottom_bar` package and demonstrate how to integrate it into a Flutter application. We'll cover platform-specific details for both Android and iOS.

## Installation

Add the package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  flutter_floating_bottom_bar: ^1.0.0
```

Run `flutter pub get` to install the package.

## Basic Setup

1. **Import the Package**: Start by importing the package in your Dart file.

   ```dart
   import 'package:flutter_floating_bottom_bar/flutter_floating_bottom_bar.dart';
   ```

2. **Platform-Specific Configurations**:

   - **Android**: Ensure your `minSdkVersion` in `android/app/build.gradle` is set to at least 21.

     ```gradle
     defaultConfig {
         minSdkVersion 21
     }
     ```

   - **iOS**: No specific configurations are required, but ensure your deployment target is set to iOS 9.0 or higher in your `ios/Podfile`.

     ```ruby
     platform :ios, '9.0'
     ```

3. **Using the Floating Bottom Bar**:

   Create a `RealFlutter` class that extends `StatelessWidget` or `StatefulWidget`, and integrate the floating bottom bar within your widget tree.

   ```dart
   class RealFlutter extends StatelessWidget {
     @override
     Widget build(BuildContext context) {
       return Scaffold(
         body: FloatingBottomBar(
           items: [
             FloatingBottomBarItem(icon: Icons.home, title: 'Home'),
             FloatingBottomBarItem(icon: Icons.search, title: 'Search'),
             FloatingBottomBarItem(icon: Icons.person, title: 'Profile'),
           ],
           onTap: (index) {
             // Handle navigation logic here
           },
         ),
       );
     }
   }
   ```

## Optimizations

- **Performance**: Use `const` constructors where possible to improve performance.
- **Responsiveness**: Test on different screen sizes to ensure the bar adapts well.

<-- END_TUTORIAL -->

<-- MAIN -->

# Complete Example: Flutter Floating Bottom Bar

Below is a complete example of a Flutter application using the `flutter_floating_bottom_bar` package. This example demonstrates all key features of the package.

```dart
import 'package:flutter/material.dart';
import 'package:flutter_floating_bottom_bar/flutter_floating_bottom_bar.dart';

// Main entry point of the application
void main() {
  runApp(MyApp());
}

// Main application widget
class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Floating Bottom Bar Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(), // Home widget
    );
  }
}

// RealFlutter widget demonstrating the floating bottom bar
class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  int _selectedIndex = 0; // Track the selected index

  // List of widgets to display based on the selected index
  static const List<Widget> _widgetOptions = <Widget>[
    Text('Home Page'),
    Text('Search Page'),
    Text('Profile Page'),
  ];

  // Update the selected index and refresh the UI
  void _onItemTapped(int index) {
    setState(() {
      _selectedIndex = index;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Floating Bottom Bar Demo'),
      ),
      body: Center(
        child: _widgetOptions.elementAt(_selectedIndex), // Display selected widget
      ),
      // Floating bottom bar widget
      bottomNavigationBar: FloatingBottomBar(
        items: [
          FloatingBottomBarItem(icon: Icons.home, title: 'Home'),
          FloatingBottomBarItem(icon: Icons.search, title: 'Search'),
          FloatingBottomBarItem(icon: Icons.person, title: 'Profile'),
        ],
        currentIndex: _selectedIndex, // Current selected index
        onTap: _onItemTapped, // Handle item tap
      ),
    );
  }
}
```

// Application Flow Explanation
// 1. The `main` function initializes the app by calling `runApp` with `MyApp`.
// 2. `MyApp` is a `StatelessWidget` that sets up the `MaterialApp` with a home of `RealFlutter`.
// 3. `RealFlutter` is a `StatefulWidget` that manages the state of the selected index for navigation.
// 4. `_RealFlutterState` contains a list of widgets (`_widgetOptions`) that correspond to each tab.
// 5. The `FloatingBottomBar` is configured with three items: Home, Search, and Profile.
// 6. When an item is tapped, `_onItemTapped` updates the `_selectedIndex` and refreshes the UI.
// 7. The `body` of the `Scaffold` displays the widget corresponding to the `_selectedIndex`.

<-- END_MAIN -->
```
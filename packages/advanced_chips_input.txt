<-- START_DESCRIPTION -->

Advanced Chips Input Package
==========================

The `advanced_chips_input` package is a powerful Flutter package that allows you to create customizable and flexible chip input fields. It provides a wide range of features, including:

* Customizable chip styles and layouts
* Support for multiple chip types (e.g., text, icon, image)
* Dynamic chip creation and deletion
* Chip validation and filtering

When to Use This Package
------------------------

This package is ideal for applications that require complex and customizable input fields, such as:

* Tagging systems
* Filtering systems
* Search bars with suggestions

Features
--------

* Customizable chip styles and layouts
* Support for multiple chip types (e.g., text, icon, image)
* Dynamic chip creation and deletion
* Chip validation and filtering

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
---------------

To use the `advanced_chips_input` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  advanced_chips_input: ^1.0.0
```
2. Import the package in your Dart file:
```dart
import 'package:advanced_chips_input/advanced_chips_input.dart';
```
3. Create a `RealFlutter` class that extends `StatefulWidget`:
```dart
class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}
```
4. Create a `_RealFlutterState` class that extends `State<RealFlutter>`:
```dart
class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Advanced Chips Input Demo'),
      ),
      body: Center(
        child: AdvancedChipsInput(
          // Customize the chip style and layout
          chipStyle: ChipStyle(
            backgroundColor: Colors.blue,
            labelStyle: TextStyle(color: Colors.white),
          ),
          // Add chips dynamically
          chips: [
            Chip(
              label: Text('Chip 1'),
            ),
            Chip(
              label: Text('Chip 2'),
            ),
          ],
        ),
      ),
    );
  }
}
```
Platform-Specific Details
-------------------------

### Android

* Make sure to add the `android:windowSoftInputMode` attribute to your `AndroidManifest.xml` file:
```xml
<activity
  android:name=".MainActivity"
  android:windowSoftInputMode="adjustResize">
</activity>
```
### iOS

* Make sure to add the `NSAppTransportSecurity` key to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:advanced_chips_input/advanced_chips_input.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Step 1: Create a list of chips
  List<Chip> _chips = [
    Chip(
      label: Text('Chip 1'),
    ),
    Chip(
      label: Text('Chip 2'),
    ),
  ];

  // Step 2: Create a text controller
  final _textController = TextEditingController();

  // Step 3: Create a focus node
  final _focusNode = FocusNode();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Advanced Chips Input Demo'),
      ),
      body: Center(
        child: AdvancedChipsInput(
          // Step 4: Customize the chip style and layout
          chipStyle: ChipStyle(
            backgroundColor: Colors.blue,
            labelStyle: TextStyle(color: Colors.white),
          ),
          // Step 5: Add chips dynamically
          chips: _chips,
          // Step 6: Add a text field
          textField: TextField(
            controller: _textController,
            focusNode: _focusNode,
            decoration: InputDecoration(
              labelText: 'Enter a chip',
            ),
          ),
          // Step 7: Add a button to add chips
          addButton: IconButton(
            icon: Icon(Icons.add),
            onPressed: () {
              // Step 8: Add a chip when the button is pressed
              setState(() {
                _chips.add(Chip(
                  label: Text(_textController.text),
                ));
                _textController.clear();
              });
            },
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user enters a chip in the text field.
// 2. The user presses the add button.
// 3. A new chip is added to the list of chips.
// 4. The text field is cleared.
// 5. The user can repeat steps 1-4 to add more chips.
// 6. The user can also delete chips by pressing the delete button on the chip.
```

<-- END_MAIN -->
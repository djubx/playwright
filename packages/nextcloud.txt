<-- START_DESCRIPTION -->

Nextcloud Flutter Package: A Comprehensive Overview
=====================================================

The Nextcloud Flutter package is a powerful tool for integrating Nextcloud functionality into your Flutter applications. Nextcloud is a popular open-source file sharing and collaboration platform that allows users to store and share files, calendars, contacts, and more.

When to Use This Package
------------------------

You should consider using the Nextcloud Flutter package in the following scenarios:

*   You want to build a Flutter app that interacts with Nextcloud servers, such as a file explorer or a collaboration tool.
*   You need to integrate Nextcloud features into an existing Flutter app, such as file sharing or calendar synchronization.
*   You want to leverage the power of Nextcloud's open-source platform to build custom solutions for your users.

Key Features of the Package
---------------------------

The Nextcloud Flutter package provides a wide range of features, including:

*   **File Management**: Interact with Nextcloud files, including uploading, downloading, and deleting files.
*   **Calendar Integration**: Synchronize calendars and events with Nextcloud.
*   **Contact Management**: Manage Nextcloud contacts, including creating, updating, and deleting contacts.
*   **Authentication**: Handle user authentication with Nextcloud servers.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setting Up the Nextcloud Flutter Package
=====================================

To use the Nextcloud Flutter package, follow these steps:

### Step 1: Add the Package to Your Flutter Project

Add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  nextcloud: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:nextcloud/nextcloud.dart';
```

### Step 3: Initialize the Nextcloud Client

Create a Nextcloud client instance:

```dart
NextcloudClient client = NextcloudClient(
  url: 'https://your-nextcloud-server.com',
  username: 'your-username',
  password: 'your-password',
);
```

### Step 4: Authenticate with the Nextcloud Server

Use the `login` method to authenticate with the Nextcloud server:

```dart
await client.login();
```

### Platform-Specific Details

*   **Android**: Make sure to add the `android.permission.INTERNET` permission to your `AndroidManifest.xml` file.
*   **iOS**: Add the `NSAppTransportSecurity` key to your `Info.plist` file to allow HTTP requests.

### Required Configurations and Optimizations

*   **HTTPS**: Make sure to use HTTPS when connecting to your Nextcloud server to ensure secure communication.
*   **Timeouts**: Configure timeouts for HTTP requests to handle network issues.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:nextcloud/nextcloud.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  NextcloudClient _client;

  @override
  void initState() {
    super.initState();
    _client = NextcloudClient(
      url: 'https://your-nextcloud-server.com',
      username: 'your-username',
      password: 'your-password',
    );
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Nextcloud Flutter Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              ElevatedButton(
                onPressed: _login,
                child: Text('Login'),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _listFiles,
                child: Text('List Files'),
              ),
            ],
          ),
        ),
      ),
    );
  }

  _login() async {
    // Login to the Nextcloud server
    await _client.login();
    print('Logged in');
  }

  _listFiles() async {
    // Get the list of files in the root directory
    List<NextcloudFile> files = await _client.getFiles();
    print('Files:');
    files.forEach((file) {
      print(file.name);
    });
  }
}

// The application flow is as follows:
// 1. The user opens the app and is presented with a login button.
// 2. When the user clicks the login button, the _login function is called.
// 3. The _login function logs in to the Nextcloud server using the provided credentials.
// 4. After a successful login, the user is presented with a list files button.
// 5. When the user clicks the list files button, the _listFiles function is called.
// 6. The _listFiles function retrieves the list of files in the root directory of the Nextcloud server.
// 7. The list of files is then printed to the console.

// In summary, this code provides a basic example of how to use the Nextcloud Flutter package to login to a Nextcloud server and list files.
```

<-- END_MAIN -->
```markdown
<!-- START_DESCRIPTION -->
# Show Up Animation Flutter Package

The **show_up_animation** package is a powerful tool for Flutter developers looking to enhance their applications with engaging animations. This package allows developers to create smooth and visually appealing animations that can be triggered when a widget appears on the screen. 

## When to Use This Package
You might consider using the **show_up_animation** package in scenarios such as:
- **Onboarding Screens**: To animate elements as users navigate through onboarding processes.
- **List Items**: To animate list items as they come into view, providing a more dynamic user experience.
- **Feature Highlights**: To draw attention to specific features or buttons when they first appear.

## Features
- **Customizable Animations**: Control the duration, delay, and curve of the animations.
- **Multiple Animation Types**: Choose from various animation types such as fade, slide, and scale.
- **Easy Integration**: Simple to integrate into existing Flutter applications with minimal setup.

This package is ideal for developers looking to add a touch of flair to their applications without extensive knowledge of animation principles.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Show Up Animation

## Step 1: Adding the Dependency
To get started, you need to add the **show_up_animation** package to your Flutter project. Open your `pubspec.yaml` file and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  show_up_animation: ^2.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command to install it:

```bash
flutter pub get
```

## Step 2: Importing the Package
In your Dart file, import the package:

```dart
import 'package:show_up_animation/show_up_animation.dart';
```

## Step 3: Using the Package
You can now use the `ShowUpAnimation` widget in your application. Hereâ€™s a basic example of how to implement it:

```dart
ShowUpAnimation(
  delayStart: Duration(milliseconds: 100), // Delay before the animation starts
  animationDuration: Duration(seconds: 1), // Duration of the animation
  curve: Curves.easeInOut, // Animation curve
  child: YourWidget(), // Replace with your widget
)
```

### Platform-Specific Details
- **Android**: Ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21 to avoid any compatibility issues.
  
  ```gradle
  android {
      ...
      defaultConfig {
          ...
          minSdkVersion 21
      }
  }
  ```

- **iOS**: No specific configurations are required for iOS, but ensure you are using a compatible version of Flutter.

## Step 4: Optimizations
To optimize performance, consider using the `ShowUpAnimation` widget only for essential elements that benefit from animation. Overusing animations can lead to a cluttered UI and may affect performance on lower-end devices.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Show Up Animation

```dart
import 'package:flutter/material.dart';
import 'package:show_up_animation/show_up_animation.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Show Up Animation Demo',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Show Up Animation Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              // Using ShowUpAnimation for the first widget
              ShowUpAnimation(
                delayStart: Duration(milliseconds: 100), // Delay before the animation starts
                animationDuration: Duration(seconds: 1), // Duration of the animation
                curve: Curves.easeInOut, // Animation curve
                child: Container(
                  padding: EdgeInsets.all(20),
                  color: Colors.blue,
                  child: Text(
                    'Hello, Flutter!',
                    style: TextStyle(color: Colors.white, fontSize: 24),
                  ),
                ),
              ),
              SizedBox(height: 20), // Space between widgets
              // Using ShowUpAnimation for the second widget
              ShowUpAnimation(
                delayStart: Duration(milliseconds: 300), // Delay for the second widget
                animationDuration: Duration(seconds: 1), // Duration of the animation
                curve: Curves.easeInOut, // Animation curve
                child: ElevatedButton(
                  onPressed: () {
                    // Action when button is pressed
                    print('Button Pressed!');
                  },
                  child: Text('Press Me'),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function initializes the Flutter app by calling runApp() with the RealFlutter widget.
// 2. The RealFlutter widget builds a MaterialApp with a title and a Scaffold.
// 3. Inside the Scaffold, an AppBar is created with the title 'Show Up Animation Example'.
// 4. The body of the Scaffold contains a Center widget that centers its child widgets.
// 5. A Column widget is used to arrange the child widgets vertically.
// 6. The first child is a ShowUpAnimation widget that animates a Container with a text message.
// 7. A SizedBox is used to add space between the first and second widgets.
// 8. The second child is another ShowUpAnimation widget that animates an ElevatedButton.
// 9. When the button is pressed, it prints 'Button Pressed!' to the console.
```
<!-- END_MAIN -->
```

This structured blog provides a comprehensive overview of the **show_up_animation** package, guiding readers through its features, setup, and practical implementation in a Flutter application.
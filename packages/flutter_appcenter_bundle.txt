```markdown
<-- START_DESCRIPTION -->

# Overview of the `flutter_appcenter_bundle` Package

The `flutter_appcenter_bundle` package is a comprehensive solution for integrating Microsoft's App Center services into your Flutter applications. App Center is a suite of services that allows developers to build, test, release, and monitor their apps. This package bundles several App Center services, including Analytics, Crashes, and Distribute, making it easier to manage them within a single Flutter project.

## When to Use

This package is ideal for developers who want to leverage App Center's capabilities to enhance their app's lifecycle management. It is particularly useful for:
- Tracking user analytics to understand app usage patterns.
- Monitoring app crashes to improve stability.
- Distributing app updates seamlessly to testers and users.

## Features

- **Analytics**: Collects data on user interactions and app usage.
- **Crashes**: Automatically detects crashes and provides detailed reports.
- **Distribute**: Manages app distribution to testers and users, including in-app updates.

By using `flutter_appcenter_bundle`, developers can streamline the integration of these services, reducing the complexity of managing multiple dependencies.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up `flutter_appcenter_bundle` in Your Flutter Project

Integrating the `flutter_appcenter_bundle` package into your Flutter project involves several steps, including platform-specific configurations for both Android and iOS.

## Installation

Add the package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  flutter_appcenter_bundle: ^3.3.0
```

Run `flutter pub get` to install the package.

## Android Configuration

1. **Add App Center SDK**: Ensure that your `android/app/build.gradle` file includes the App Center SDK dependencies:

   ```gradle
   dependencies {
       implementation 'com.microsoft.appcenter:appcenter-analytics:4.3.1'
       implementation 'com.microsoft.appcenter:appcenter-crashes:4.3.1'
       implementation 'com.microsoft.appcenter:appcenter-distribute:4.3.1'
   }
   ```

2. **Modify AndroidManifest.xml**: Add the necessary permissions and metadata in `android/app/src/main/AndroidManifest.xml`:

   ```xml
   <manifest xmlns:android="http://schemas.android.com/apk/res/android"
       package="com.example.yourapp">

       <application>
           <!-- Add App Center metadata -->
           <meta-data
               android:name="com.microsoft.appcenter.analytics"
               android:value="true" />
           <meta-data
               android:name="com.microsoft.appcenter.crashes"
               android:value="true" />
           <meta-data
               android:name="com.microsoft.appcenter.distribute"
               android:value="true" />
       </application>
   </manifest>
   ```

## iOS Configuration

1. **Podfile Configuration**: Ensure your `ios/Podfile` includes the App Center pods:

   ```ruby
   target 'Runner' do
     use_frameworks!
     pod 'AppCenter/Analytics', '~> 4.3.1'
     pod 'AppCenter/Crashes', '~> 4.3.1'
     pod 'AppCenter/Distribute', '~> 4.3.1'
   end
   ```

2. **Modify Info.plist**: Add the necessary keys to your `ios/Runner/Info.plist`:

   ```xml
   <key>NSAppTransportSecurity</key>
   <dict>
       <key>NSAllowsArbitraryLoads</key>
       <true/>
   </dict>
   ```

## Initialization

Initialize the App Center services in your Flutter app. This is typically done in the `main.dart` file:

```dart
import 'package:flutter_appcenter_bundle/flutter_appcenter_bundle.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await AppCenter.startAsync(
    appSecretAndroid: 'YOUR-ANDROID-APP-SECRET',
    appSecretIOS: 'YOUR-IOS-APP-SECRET',
    enableDistribute: true,
    usePrivateDistributeTrack: false,
  );
  runApp(MyApp());
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

# Complete Example of Using `flutter_appcenter_bundle`

Below is a complete example of a Flutter application using the `flutter_appcenter_bundle` package. This example demonstrates how to initialize and use the package's features.

```dart
import 'package:flutter/material.dart';
import 'package:flutter_appcenter_bundle/flutter_appcenter_bundle.dart';

void main() async {
  // Ensures that Flutter binding is initialized before using any plugins
  WidgetsFlutterBinding.ensureInitialized();

  // Start App Center services with the provided app secrets
  await AppCenter.startAsync(
    appSecretAndroid: 'YOUR-ANDROID-APP-SECRET',
    appSecretIOS: 'YOUR-IOS-APP-SECRET',
    enableDistribute: true, // Enables the Distribute service
    usePrivateDistributeTrack: false, // Uses public track for distribution
  );

  // Run the main application widget
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter AppCenter Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  int _counter = 0;

  // Increment counter and track the event using App Center Analytics
  void _incrementCounter() {
    setState(() {
      _counter++;
    });
    // Track a custom event
    AppCenter.trackEventAsync('Counter Incremented', {'count': '$_counter'});
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter AppCenter Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'You have pushed the button this many times:',
            ),
            Text(
              '$_counter',
              style: Theme.of(context).textTheme.headline4,
            ),
          ],
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _incrementCounter,
        tooltip: 'Increment',
        child: Icon(Icons.add),
      ),
    );
  }
}

// Application Flow Explanation
// 1. The application starts by initializing the App Center services with the provided secrets.
// 2. The `RealFlutter` widget is the root of the application, setting up the MaterialApp.
// 3. `MyHomePage` is the main screen, displaying a counter and a button.
// 4. When the button is pressed, `_incrementCounter` is called, updating the counter and sending an event to App Center Analytics.
// 5. The UI updates to reflect the new counter value, demonstrating real-time interaction with App Center services.
```

<-- END_MAIN -->
```
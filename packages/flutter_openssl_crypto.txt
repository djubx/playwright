<-- START_DESCRIPTION -->

# Flutter OpenSSL Crypto Package
=====================================

The `flutter_openssl_crypto` package provides a set of cryptographic functions for Flutter applications using the OpenSSL library. This package is useful for applications that require secure data encryption, decryption, and hashing.

## Features

*   Symmetric encryption (AES, DES, etc.)
*   Asymmetric encryption (RSA, etc.)
*   Hashing (SHA-256, SHA-512, etc.)
*   Digital signatures (RSA, etc.)

## When to Use

Use this package when your Flutter application requires secure data encryption, decryption, or hashing. For example:

*   Storing sensitive user data, such as passwords or credit card numbers
*   Encrypting data transmitted over a network
*   Verifying the integrity of data using digital signatures

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

## Setup

To use the `flutter_openssl_crypto` package, add it to your `pubspec.yaml` file:

```yml
dependencies:
  flutter_openssl_crypto: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Platform-Specific Configurations

### Android

No additional configurations are required for Android.

### iOS

To use the `flutter_openssl_crypto` package on iOS, you need to add the following lines to your `Podfile`:

```ruby
target 'Runner' do
  use_frameworks!
  pod 'OpenSSL-Universal', '~> 1.1.1'
end
```

Then, run `pod install` to install the OpenSSL library.

## Using the Package

To use the package, import it in your Dart file:

```dart
import 'package:flutter_openssl_crypto/flutter_openssl_crypto.dart';
```

You can then use the various cryptographic functions provided by the package. For example:

```dart
void main() {
  // Generate a random key
  final key = await FlutterOpenSSLCrypto.generateKey(256);

  // Encrypt some data
  final encryptedData = await FlutterOpenSSLCrypto.encrypt('Hello, World!', key);

  // Decrypt the data
  final decryptedData = await FlutterOpenSSLCrypto.decrypt(encryptedData, key);

  print(decryptedData); // prints 'Hello, World!'
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_openssl_crypto/flutter_openssl_crypto.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter OpenSSL Crypto Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _controller = TextEditingController();

  void _encryptData() async {
    // Generate a random key
    final key = await FlutterOpenSSLCrypto.generateKey(256);

    // Get the text to encrypt from the text field
    final textToEncrypt = _controller.text;

    // Encrypt the text
    final encryptedText = await FlutterOpenSSLCrypto.encrypt(textToEncrypt, key);

    // Display the encrypted text
    print('Encrypted text: $encryptedText');

    // Decrypt the text
    final decryptedText = await FlutterOpenSSLCrypto.decrypt(encryptedText, key);

    // Display the decrypted text
    print('Decrypted text: $decryptedText');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter OpenSSL Crypto Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            TextField(
              controller: _controller,
              decoration: InputDecoration(
                labelText: 'Enter text to encrypt',
              ),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _encryptData,
              child: Text('Encrypt Data'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user enters some text in the text field.
// 2. When the user clicks the 'Encrypt Data' button, the _encryptData function is called.
// 3. The _encryptData function generates a random key using the FlutterOpenSSLCrypto.generateKey function.
// 4. The function then gets the text to encrypt from the text field using the _controller.text property.
// 5. The function encrypts the text using the FlutterOpenSSLCrypto.encrypt function, passing in the text to encrypt and the generated key.
// 6. The function then decrypts the encrypted text using the FlutterOpenSSLCrypto.decrypt function, passing in the encrypted text and the generated key.
// 7. Finally, the function prints the decrypted text to the console.

// The main purpose of this example is to demonstrate how to use the FlutterOpenSSLCrypto package to encrypt and decrypt data in a Flutter application.
```

<-- END_MAIN -->
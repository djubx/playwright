```markdown
<-- START_DESCRIPTION -->

# Overview of the `date_time_picker_widget` Flutter Package

The `date_time_picker_widget` package is a versatile and user-friendly Flutter package designed to simplify the process of selecting dates and times within your Flutter applications. This package provides a highly customizable widget that can be easily integrated into any Flutter project, offering a seamless user experience for date and time selection.

## When to Use

The `date_time_picker_widget` is ideal for applications that require users to input or select dates and times. Common use cases include:

- Booking and reservation systems
- Event scheduling applications
- Reminders and alarms
- Any form that requires date or time input

## Features

- **Customizable UI**: Tailor the appearance to match your app's theme.
- **Flexible Date and Time Formats**: Supports various formats to suit different locales and user preferences.
- **Platform Compatibility**: Works seamlessly on both Android and iOS.
- **Easy Integration**: Simple API for quick setup and use.
- **Localization Support**: Easily localize the widget to support multiple languages.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the `date_time_picker_widget`

In this tutorial, we will walk through the process of setting up and using the `date_time_picker_widget` in a Flutter application. We will cover platform-specific configurations for both Android and iOS.

## Setup Process

### Step 1: Add Dependency

First, add the `date_time_picker_widget` to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  date_time_picker_widget: ^1.0.0
```

Run `flutter pub get` to install the package.

### Step 2: Import the Package

In your Dart file, import the package:

```dart
import 'package:date_time_picker_widget/date_time_picker_widget.dart';
```

### Step 3: Platform-Specific Configurations

#### Android

Ensure your `android/app/build.gradle` file has the following configuration:

```gradle
android {
    compileSdkVersion 33

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 33
    }
}
```

#### iOS

For iOS, ensure your `ios/Podfile` is using platform version 11.0 or higher:

```ruby
platform :ios, '11.0'
```

### Step 4: Using the Widget

To use the `date_time_picker_widget`, integrate it into your widget tree:

```dart
DateTimePicker(
  initialDate: DateTime.now(),
  firstDate: DateTime(2000),
  lastDate: DateTime(2100),
  onDateChanged: (date) {
    // Handle date change
  },
  onTimeChanged: (time) {
    // Handle time change
  },
)
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:date_time_picker_widget/date_time_picker_widget.dart';

void main() => runApp(RealFlutter());

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Date Time Picker Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: DateTimePickerExample(),
    );
  }
}

class DateTimePickerExample extends StatefulWidget {
  @override
  _DateTimePickerExampleState createState() => _DateTimePickerExampleState();
}

class _DateTimePickerExampleState extends State<DateTimePickerExample> {
  DateTime _selectedDate = DateTime.now();
  TimeOfDay _selectedTime = TimeOfDay.now();

  // This method is called when the date is changed
  void _onDateChanged(DateTime date) {
    setState(() {
      _selectedDate = date;
    });
  }

  // This method is called when the time is changed
  void _onTimeChanged(TimeOfDay time) {
    setState(() {
      _selectedTime = time;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Date Time Picker Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            // Display the selected date
            Text(
              'Selected Date: ${_selectedDate.toLocal()}'.split(' ')[0],
              style: TextStyle(fontSize: 20),
            ),
            SizedBox(height: 20),
            // Display the selected time
            Text(
              'Selected Time: ${_selectedTime.format(context)}',
              style: TextStyle(fontSize: 20),
            ),
            SizedBox(height: 20),
            // DateTimePicker widget
            DateTimePicker(
              initialDate: _selectedDate,
              firstDate: DateTime(2000),
              lastDate: DateTime(2100),
              onDateChanged: _onDateChanged,
              onTimeChanged: _onTimeChanged,
            ),
          ],
        ),
      ),
    );
  }
}

// The application starts with the main function, which runs the RealFlutter app.
// RealFlutter is a StatelessWidget that sets up the MaterialApp with a title and theme.
// The home of the app is set to DateTimePickerExample, a StatefulWidget.
// DateTimePickerExample manages the state of the selected date and time.
// The _onDateChanged and _onTimeChanged methods update the state when the user selects a new date or time.
// The build method of _DateTimePickerExampleState returns a Scaffold with an AppBar and a body.
// The body contains a Column with Text widgets to display the selected date and time, and a DateTimePicker widget.
// The DateTimePicker widget is configured with initial, first, and last dates, and callbacks for date and time changes.

<-- END_MAIN -->
```
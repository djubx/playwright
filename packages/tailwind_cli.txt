<-- START_DESCRIPTION -->

# Tailwind CLI Flutter Package
================================

The `tailwind_cli` Flutter package is a powerful tool that allows developers to use Tailwind CSS in their Flutter applications. Tailwind CSS is a popular utility-first CSS framework that enables rapid and efficient styling of web applications. With the `tailwind_cli` package, developers can leverage the same styling capabilities in their Flutter apps.

## When to Use This Package
---------------------------

This package is ideal for developers who want to:

* Use a consistent styling framework across their web and mobile applications
* Take advantage of Tailwind's utility-first approach to styling
* Speed up their development process with pre-built classes and styles

## Features
------------

The `tailwind_cli` package offers the following features:

* Support for Tailwind CSS classes and styles
* Automatic generation of Flutter widgets based on Tailwind classes
* Platform-specific optimizations for Android and iOS

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `tailwind_cli` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  tailwind_cli: ^1.0.0
```
2. Run `flutter pub get` to install the package.
3. Import the package in your Dart file:
```dart
import 'package:tailwind_cli/tailwind_cli.dart';
```
4. Initialize the package with your Tailwind configuration:
```dart
TailwindCli.init(
  config: TailwindConfig(
    theme: Theme(
      colors: {
        'primary': '#3498db',
        'secondary': '#f1c40f',
      },
    ),
  ),
);
```
## Platform-Specific Configurations
---------------------------------

### Android

To use the package on Android, add the following configuration to your `android/app/build.gradle` file:
```groovy
android {
  ...
  defaultConfig {
    ...
    minSdkVersion 21
  }
}
```
### iOS

To use the package on iOS, add the following configuration to your `ios/Podfile` file:
```ruby
platform :ios, '11.0'
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:tailwind_cli/tailwind_cli.dart';

void main() {
  // Initialize the package with your Tailwind configuration
  TailwindCli.init(
    config: TailwindConfig(
      theme: Theme(
        colors: {
          'primary': '#3498db',
          'secondary': '#f1c40f',
        },
      ),
    ),
  );

  // Create a new Flutter app
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Use the `tw` function to apply Tailwind classes to your widgets
    return MaterialApp(
      title: 'Tailwind CLI Demo',
      home: Scaffold(
        body: Center(
          child: Text(
            'Hello, World!',
            style: TextStyle(
              // Apply the `text-lg` class to make the text large
              fontSize: tw('text-lg'),
              // Apply the `text-primary` class to make the text primary color
              color: tw('text-primary'),
            ),
          ),
        ),
      ),
    );
  }
}

// The `tw` function is used to apply Tailwind classes to your widgets
// It takes a string of Tailwind classes as an argument and returns the corresponding styles
// For example, `tw('text-lg')` returns a `TextStyle` with a large font size
// Similarly, `tw('text-primary')` returns a `Color` with the primary color
```

// Here's a step-by-step explanation of the code flow:
// 1. We initialize the `tailwind_cli` package with our Tailwind configuration.
// 2. We create a new Flutter app using the `MaterialApp` widget.
// 3. We use the `Scaffold` widget to create a basic material design layout.
// 4. We use the `Center` widget to center the text horizontally and vertically.
// 5. We use the `Text` widget to display the text "Hello, World!".
// 6. We use the `tw` function to apply Tailwind classes to the text.
// 7. We apply the `text-lg` class to make the text large.
// 8. We apply the `text-primary` class to make the text primary color.

// In summary, this code creates a new Flutter app with a centered text that is large and primary color.
// The `tw` function is used to apply Tailwind classes to the text, making it easy to style the app using Tailwind's utility-first approach.

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# WebEngage Flutter Package
================================

The `webengage_flutter` package is a Flutter wrapper for the WebEngage SDK, which enables you to engage with your users through push notifications, in-app messages, and surveys. This package provides a simple and easy-to-use API for integrating WebEngage with your Flutter app.

## When to Use
--------------

You should use this package when you want to:

* Send push notifications to your users
* Display in-app messages and surveys
* Track user behavior and analyze engagement metrics

## Features
------------

* Push notifications: Send targeted and personalized notifications to your users
* In-app messages: Display messages and surveys to your users within the app
* User tracking: Track user behavior and analyze engagement metrics
* Customization: Customize the look and feel of in-app messages and surveys

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
==================

## Step 1: Add the Package
-------------------------

Add the `webengage_flutter` package to your `pubspec.yaml` file:
```yml
dependencies:
  flutter:
    sdk: flutter
  webengage_flutter: ^1.0.0
```
## Step 2: Initialize the SDK
-----------------------------

Initialize the WebEngage SDK in your `main` function:
```dart
import 'package:flutter/material.dart';
import 'package:webengage_flutter/webengage_flutter.dart';

void main() {
  WidgetsFlutterBinding.ensureInitialized();
  WebEngageFlutter.initialize(
    apiKey: 'YOUR_API_KEY',
    projectId: 'YOUR_PROJECT_ID',
  );
  runApp(MyApp());
}
```
## Step 3: Configure Push Notifications
--------------------------------------

Configure push notifications for Android and iOS:

### Android

Add the following code to your `AndroidManifest.xml` file:
```xml
<application>
  ...
  <service
    android:name="com.webengage.sdk.android.WebEngagePushService"
    android:enabled="true"
    android:exported="true" />
  ...
</application>
```
### iOS

Add the following code to your `Info.plist` file:
```xml
<key>UIBackgroundModes</key>
<array>
  <string>remote-notification</string>
</array>
```
## Step 4: Display In-App Messages
---------------------------------

Display in-app messages using the `WebEngageFlutter` instance:
```dart
WebEngageFlutter.instance.displayInAppMessage(
  message: 'Hello, World!',
  title: 'Welcome',
  buttons: [
    WebEngageButton(
      text: 'OK',
      onPressed: () {
        print('OK button pressed');
      },
    ),
  ],
);
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:webengage_flutter/webengage_flutter.dart';

void main() {
  // Initialize the WebEngage SDK
  WidgetsFlutterBinding.ensureInitialized();
  WebEngageFlutter.initialize(
    apiKey: 'YOUR_API_KEY',
    projectId: 'YOUR_PROJECT_ID',
  );

  // Run the app
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'WebEngage Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('WebEngage Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            // Display in-app message
            ElevatedButton(
              onPressed: () {
                WebEngageFlutter.instance.displayInAppMessage(
                  message: 'Hello, World!',
                  title: 'Welcome',
                  buttons: [
                    WebEngageButton(
                      text: 'OK',
                      onPressed: () {
                        print('OK button pressed');
                      },
                    ),
                  ],
                );
              },
              child: Text('Display In-App Message'),
            ),
            // Send push notification
            ElevatedButton(
              onPressed: () {
                WebEngageFlutter.instance.sendPushNotification(
                  title: 'Hello, World!',
                  message: 'Welcome',
                );
              },
              child: Text('Send Push Notification'),
            ),
          ],
        ),
      ),
    );
  }
}

// Application flow:
// 1. Initialize the WebEngage SDK with API key and project ID.
// 2. Run the app and display the home page.
// 3. When the user clicks the "Display In-App Message" button, display an in-app message with a title, message, and OK button.
// 4. When the user clicks the OK button, print a message to the console.
// 5. When the user clicks the "Send Push Notification" button, send a push notification with a title and message.

// Summary:
// This code demonstrates how to use the WebEngage Flutter package to display in-app messages and send push notifications.
// It initializes the WebEngage SDK, displays a home page with two buttons, and handles button clicks to display in-app messages and send push notifications.
```

<-- END_MAIN -->
```markdown
<-- START_DESCRIPTION -->

# WebEngage Flutter Package: An Overview

The `webengage_flutter` package is a powerful tool for integrating WebEngage's marketing automation and customer engagement platform into your Flutter applications. WebEngage provides a suite of features that help businesses engage with their users through personalized messaging, push notifications, in-app messages, and more. This package acts as a bridge, allowing Flutter developers to leverage these capabilities seamlessly.

## When to Use `webengage_flutter`

- **User Engagement**: If your application requires sending targeted push notifications or in-app messages to users based on their behavior or preferences.
- **Analytics**: To track user interactions and events within your app, providing insights into user behavior.
- **Personalization**: For delivering personalized content and offers to users, enhancing user experience and retention.

## Key Features

- **Push Notifications**: Send and manage push notifications to engage users.
- **In-App Messaging**: Display messages to users while they are using the app.
- **User Analytics**: Track user events and attributes to understand user behavior.
- **Segmentation**: Segment users based on their actions and preferences for targeted campaigns.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up `webengage_flutter` in Your Flutter Project

Integrating `webengage_flutter` into your Flutter project involves several steps, including platform-specific configurations for both Android and iOS. Below is a detailed guide to help you get started.

## Step 1: Add Dependency

Add `webengage_flutter` to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  webengage_flutter: ^1.0.0
```

Run `flutter pub get` to install the package.

## Step 2: Android Configuration

1. **Modify `android/app/build.gradle`:**

   Ensure that the `minSdkVersion` is set to at least 21:

   ```groovy
   android {
       defaultConfig {
           minSdkVersion 21
       }
   }
   ```

2. **Add WebEngage Initialization:**

   In `android/app/src/main/java/<your-package-name>/MainActivity.java`, initialize WebEngage in the `onCreate` method:

   ```java
   import com.webengage.sdk.android.WebEngage;
   import io.flutter.embedding.android.FlutterActivity;

   public class MainActivity extends FlutterActivity {
       @Override
       protected void onCreate(Bundle savedInstanceState) {
           super.onCreate(savedInstanceState);
           WebEngage.get().analytics().track("App Launched");
       }
   }
   ```

## Step 3: iOS Configuration

1. **Modify `ios/Podfile`:**

   Ensure the platform is set to iOS 11.0 or higher:

   ```ruby
   platform :ios, '11.0'
   ```

2. **Add WebEngage Initialization:**

   In `ios/Runner/AppDelegate.swift`, initialize WebEngage in the `application` method:

   ```swift
   import UIKit
   import Flutter
   import WebEngage

   @UIApplicationMain
   @objc class AppDelegate: FlutterAppDelegate {
       override func application(
           _ application: UIApplication,
           didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?
       ) -> Bool {
           WebEngage.sharedInstance().application(application, didFinishLaunchingWithOptions: launchOptions)
           return super.application(application, didFinishLaunchingWithOptions: launchOptions)
       }
   }
   ```

## Step 4: Using the Package

After setting up, you can start using the `webengage_flutter` package in your Flutter app. Below is a simple example of how to track an event:

```dart
import 'package:webengage_flutter/webengage_flutter.dart';

void trackEvent() {
  WebEngagePlugin.trackEvent('Product Viewed', {'Product ID': '12345'});
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

# Complete Example: Flutter Main File with `webengage_flutter`

Below is a complete example of a Flutter application using the `webengage_flutter` package. This example demonstrates initializing the package, tracking events, and handling user attributes.

```dart
import 'package:flutter/material.dart';
import 'package:webengage_flutter/webengage_flutter.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'WebEngage Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  void initState() {
    super.initState();
    // Initialize WebEngage
    WebEngagePlugin().setUp();
    // Track an event when the app is launched
    WebEngagePlugin.trackEvent('App Launched');
  }

  void _trackUserEvent() {
    // Track a custom event with attributes
    WebEngagePlugin.trackEvent('Button Clicked', {'Button': 'Track Event'});
  }

  void _setUserAttributes() {
    // Set user attributes
    WebEngagePlugin.setUserAttributes({
      'we_first_name': 'John',
      'we_last_name': 'Doe',
      'we_email': 'john.doe@example.com'
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('WebEngage Demo Home Page'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: _trackUserEvent,
              child: Text('Track Event'),
            ),
            ElevatedButton(
              onPressed: _setUserAttributes,
              child: Text('Set User Attributes'),
            ),
          ],
        ),
      ),
    );
  }
}

// Application Flow:
// 1. The application starts by running the `MyApp` widget.
// 2. `MyApp` builds a `MaterialApp` with `MyHomePage` as the home screen.
// 3. `MyHomePage` is a stateful widget that initializes WebEngage in `initState`.
// 4. When the app is launched, an 'App Launched' event is tracked.
// 5. The UI consists of two buttons: 'Track Event' and 'Set User Attributes'.
// 6. Pressing 'Track Event' triggers `_trackUserEvent`, tracking a custom event.
// 7. Pressing 'Set User Attributes' triggers `_setUserAttributes`, setting user details.
// 8. The app demonstrates basic usage of WebEngage for event tracking and user management.

<-- END_MAIN -->
```

This blog post provides a comprehensive guide to using the `webengage_flutter` package in Flutter applications. By following the setup and example provided, developers can effectively integrate WebEngage's powerful engagement tools into their apps, enhancing user interaction and retention.
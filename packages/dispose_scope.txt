<-- START_DESCRIPTION -->

# Dispose Scope Flutter Package
================================

The `dispose_scope` Flutter package provides a simple and efficient way to manage the lifetime of objects in your Flutter application. It allows you to create scopes that can be used to dispose of objects when they are no longer needed, helping to prevent memory leaks and improve overall app performance.

## When to Use
--------------

The `dispose_scope` package is particularly useful in situations where you need to create objects that have a limited lifetime, such as:

* When creating a new screen or widget that requires a specific object to be instantiated.
* When using a third-party library that requires an object to be disposed of when it is no longer needed.
* When working with streams or other asynchronous data sources that require cleanup when they are no longer needed.

## Features
------------

The `dispose_scope` package provides the following key features:

* **Dispose Scope**: A scope that can be used to dispose of objects when they are no longer needed.
* **Dispose Bag**: A bag that can be used to collect objects that need to be disposed of.
* **Automatic Disposal**: Objects are automatically disposed of when the scope is disposed of.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

## Setup
--------

To use the `dispose_scope` package, you need to add it to your `pubspec.yaml` file:
```yml
dependencies:
  dispose_scope: ^1.0.0
```
Then, run `flutter pub get` to install the package.

## Basic Usage
-------------

To use the `dispose_scope` package, you need to create a `DisposeScope` instance:
```dart
import 'package:dispose_scope/dispose_scope.dart';

class RealFlutter {
  final DisposeScope _scope = DisposeScope();

  void dispose() {
    _scope.dispose();
  }
}
```
You can then use the `_scope` instance to dispose of objects:
```dart
void _createObject() {
  final object = MyObject();
  _scope.dispose(object);
}
```
## Platform-Specific Details
---------------------------

### Android

On Android, the `dispose_scope` package uses the `android.app.Activity` lifecycle to dispose of objects. When the activity is destroyed, the `DisposeScope` instance is automatically disposed of.

### iOS

On iOS, the `dispose_scope` package uses the `UIViewController` lifecycle to dispose of objects. When the view controller is deallocated, the `DisposeScope` instance is automatically disposed of.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:dispose_scope/dispose_scope.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Dispose Scope Demo',
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final DisposeScope _scope = DisposeScope();

  void _createObject() {
    // Create an object that needs to be disposed of
    final object = MyObject();
    _scope.dispose(object);
  }

  void _dispose() {
    // Dispose of the scope
    _scope.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Dispose Scope Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: _createObject,
              child: Text('Create Object'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _dispose,
              child: Text('Dispose'),
            ),
          ],
        ),
      ),
    );
  }
}

class MyObject {
  void dispose() {
    print('Disposed!');
  }
}
```

// The application flow is as follows:
// 1. The user presses the "Create Object" button, which creates a new instance of `MyObject`.
// 2. The `MyObject` instance is passed to the `_scope.dispose` method, which adds it to the dispose bag.
// 3. When the user presses the "Dispose" button, the `_scope.dispose` method is called, which disposes of all objects in the dispose bag.
// 4. The `MyObject` instance is disposed of, and the `dispose` method is called, printing "Disposed!" to the console.

<-- END_MAIN -->
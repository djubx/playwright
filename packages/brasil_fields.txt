```markdown
<-- START_DESCRIPTION -->

# Overview of the `brasil_fields` Flutter Package

The `brasil_fields` package is a comprehensive library designed to simplify the handling of Brazilian-specific data formats in Flutter applications. This package is particularly useful for developers building apps that require the manipulation and validation of Brazilian data formats such as CPF, CNPJ, CEP, and phone numbers. 

## When to Use `brasil_fields`

- **Form Validation**: When your application requires users to input Brazilian-specific data, such as CPF (Cadastro de Pessoas Físicas) or CNPJ (Cadastro Nacional da Pessoa Jurídica), `brasil_fields` provides ready-to-use validators.
- **Data Formatting**: The package offers utilities to format Brazilian phone numbers, postal codes (CEP), and currency, ensuring that the data is presented in a user-friendly manner.
- **Localization**: It helps in localizing your app for Brazilian users by providing localized data formats and utilities.

## Key Features

- **Input Formatters**: Easily format text fields for CPF, CNPJ, CEP, and phone numbers.
- **Validators**: Validate CPF and CNPJ numbers to ensure they are correctly formatted and valid.
- **Utilities**: Convert and format currency values, and handle other Brazilian-specific data needs.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using `brasil_fields`

In this tutorial, we will walk through the setup process for the `brasil_fields` package and demonstrate how to integrate it into a Flutter project.

## Setup Process

1. **Add Dependency**: First, add the `brasil_fields` package to your `pubspec.yaml` file:

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     brasil_fields: ^0.8.0
   ```

2. **Install Packages**: Run the following command to install the new dependency:

   ```bash
   flutter pub get
   ```

3. **Import the Package**: In your Dart file, import the package to start using its features:

   ```dart
   import 'package:brasil_fields/brasil_fields.dart';
   import 'package:flutter/services.dart';
   ```

## Platform-Specific Details

### Android

No additional configuration is required for Android. Ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 16 to support all features of the package.

### iOS

Ensure your iOS deployment target is set to at least iOS 9.0 in your `ios/Podfile`:

```ruby
platform :ios, '9.0'
```

## Using the Package

To use the `brasil_fields` package, you can apply input formatters and validators to your text fields. Here's a simple example of how to format a CPF input field:

```dart
TextFormField(
  decoration: InputDecoration(labelText: 'CPF'),
  inputFormatters: [
    FilteringTextInputFormatter.digitsOnly,
    CpfInputFormatter(),
  ],
  keyboardType: TextInputType.number,
  validator: (value) {
    if (!CPFValidator.isValid(value)) {
      return 'Invalid CPF';
    }
    return null;
  },
)
```

<-- END_TUTORIAL -->

<-- MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:brasil_fields/brasil_fields.dart';
import 'package:flutter/services.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Brasil Fields Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _formKey = GlobalKey<FormState>();
  final _cpfController = TextEditingController();
  final _cnpjController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Brasil Fields Example'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            children: <Widget>[
              // CPF Input Field
              TextFormField(
                controller: _cpfController,
                decoration: InputDecoration(labelText: 'CPF'),
                inputFormatters: [
                  FilteringTextInputFormatter.digitsOnly,
                  CpfInputFormatter(),
                ],
                keyboardType: TextInputType.number,
                validator: (value) {
                  if (!CPFValidator.isValid(value)) {
                    return 'Invalid CPF';
                  }
                  return null;
                },
              ),
              SizedBox(height: 16.0),
              // CNPJ Input Field
              TextFormField(
                controller: _cnpjController,
                decoration: InputDecoration(labelText: 'CNPJ'),
                inputFormatters: [
                  FilteringTextInputFormatter.digitsOnly,
                  CnpjInputFormatter(),
                ],
                keyboardType: TextInputType.number,
                validator: (value) {
                  if (!CNPJValidator.isValid(value)) {
                    return 'Invalid CNPJ';
                  }
                  return null;
                },
              ),
              SizedBox(height: 16.0),
              // Submit Button
              ElevatedButton(
                onPressed: () {
                  if (_formKey.currentState!.validate()) {
                    ScaffoldMessenger.of(context).showSnackBar(
                      SnackBar(content: Text('Processing Data')),
                    );
                  }
                },
                child: Text('Submit'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
```

// The above code sets up a simple Flutter application using the `brasil_fields` package.
// It includes a form with two input fields: one for CPF and one for CNPJ.
// Each field uses input formatters to ensure the data is entered in the correct format.
// Validators are applied to check the validity of the CPF and CNPJ numbers.
// When the submit button is pressed, the form is validated, and a message is shown if the data is valid.

<-- END_MAIN -->
```
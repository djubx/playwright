```markdown
<!-- START_DESCRIPTION -->
# Overview of the epub_reader_highlight Flutter Package

The `epub_reader_highlight` package is a powerful tool for Flutter developers looking to integrate EPUB reading capabilities into their applications. This package allows users to read EPUB files and highlights text selections, making it ideal for eBook readers, educational apps, or any application that requires text annotation.

## When to Use This Package
- **eBook Readers**: If you're building an application that allows users to read eBooks, this package provides essential features for displaying and interacting with EPUB content.
- **Educational Applications**: For apps that require text highlighting and note-taking, this package can enhance the learning experience.
- **Content Management Systems**: If your app involves managing and displaying textual content in EPUB format, this package can simplify the process.

## Key Features
- **EPUB Rendering**: Efficiently renders EPUB files with support for various formatting styles.
- **Text Highlighting**: Allows users to select and highlight text, making it easy to annotate important sections.
- **Customizable UI**: Offers flexibility in styling and layout, enabling developers to create a unique reading experience.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS, ensuring a consistent experience across devices.

Overall, the `epub_reader_highlight` package is an excellent choice for developers looking to implement EPUB reading and annotation features in their Flutter applications.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using epub_reader_highlight

## Installation
To get started with the `epub_reader_highlight` package, you need to add it to your Flutter project. Open your `pubspec.yaml` file and include the following dependency:

```yaml
dependencies:
  flutter:
    sdk: flutter
  epub_reader_highlight: ^latest_version
```

Make sure to replace `^latest_version` with the latest version available on [pub.dev](https://pub.dev/packages/epub_reader_highlight).

## Platform-Specific Configuration

### Android
For Android, ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
        ...
    }
}
```

### iOS
For iOS, you may need to enable certain permissions in your `Info.plist` file, especially if you plan to access files from the device storage. Add the following lines:

```xml
<key>NSPhotoLibraryUsageDescription</key>
<string>We need access to your photo library to select EPUB files.</string>
<key>NSDocumentDirectoryUsageDescription</key>
<string>We need access to your documents to read EPUB files.</string>
```

## Basic Usage
Once the package is installed and configured, you can start using it in your Flutter application. Below is a simple example of how to implement the `epub_reader_highlight` package.

```dart
import 'package:flutter/material.dart';
import 'package:epub_reader_highlight/epub_reader_highlight.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'EPUB Reader',
      home: Scaffold(
        appBar: AppBar(
          title: Text('EPUB Reader with Highlights'),
        ),
        body: EpubReaderWidget(),
      ),
    );
  }
}

class EpubReaderWidget extends StatefulWidget {
  @override
  _EpubReaderWidgetState createState() => _EpubReaderWidgetState();
}

class _EpubReaderWidgetState extends State<EpubReaderWidget> {
  // Variable to hold the EPUB file path
  String epubFilePath = 'assets/sample.epub';

  @override
  Widget build(BuildContext context) {
    return FutureBuilder(
      future: EpubReader.open(epubFilePath),
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.done) {
          // Display the EPUB content with highlighting capabilities
          return EpubReader(
            epubBook: snapshot.data,
            onHighlight: (highlight) {
              // Handle the highlight action
              print('Highlighted text: ${highlight.text}');
            },
          );
        } else {
          return Center(child: CircularProgressIndicator());
        }
      },
    );
  }
}
```
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using epub_reader_highlight

```dart
import 'package:flutter/material.dart';
import 'package:epub_reader_highlight/epub_reader_highlight.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'EPUB Reader',
      home: Scaffold(
        appBar: AppBar(
          title: Text('EPUB Reader with Highlights'),
        ),
        body: EpubReaderWidget(),
      ),
    );
  }
}

class EpubReaderWidget extends StatefulWidget {
  @override
  _EpubReaderWidgetState createState() => _EpubReaderWidgetState();
}

class _EpubReaderWidgetState extends State<EpubReaderWidget> {
  // Variable to hold the EPUB file path
  String epubFilePath = 'assets/sample.epub';

  @override
  Widget build(BuildContext context) {
    return FutureBuilder(
      future: EpubReader.open(epubFilePath), // Open the EPUB file
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.done) {
          // When the EPUB file is loaded, display the reader
          return EpubReader(
            epubBook: snapshot.data, // Pass the loaded EPUB book
            onHighlight: (highlight) {
              // Handle the highlight action
              print('Highlighted text: ${highlight.text}'); // Print highlighted text
            },
          );
        } else {
          // Show a loading indicator while the EPUB file is being loaded
          return Center(child: CircularProgressIndicator());
        }
      },
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the RealFlutter class, which sets up the MaterialApp.
// 2. The EpubReaderWidget is created as the main body of the app.
// 3. Inside EpubReaderWidget, we define the path to the EPUB file.
// 4. A FutureBuilder is used to asynchronously load the EPUB file.
// 5. Once the file is loaded, the EpubReader widget is displayed, allowing users to read the content.
// 6. Users can highlight text, and the highlighted text is printed to the console.
// 7. If the EPUB file is still loading, a CircularProgressIndicator is shown to indicate progress.
```
<!-- END_MAIN -->
``` 

This structured blog post provides a comprehensive overview of the `epub_reader_highlight` package, guiding developers through its features, setup, and practical implementation in a Flutter application.
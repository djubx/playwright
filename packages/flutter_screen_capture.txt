<-- START_DESCRIPTION -->

# Flutter Screen Capture Package
================================

The `flutter_screen_capture` package is a powerful tool for capturing screenshots of Flutter applications. It provides a simple and efficient way to capture the screen, making it ideal for testing, debugging, and analytics purposes.

## When to Use This Package
---------------------------

This package is useful in a variety of scenarios, such as:

* Testing: Capture screenshots of your app during automated testing to verify its UI and functionality.
* Debugging: Capture screenshots of your app to diagnose issues and identify problems.
* Analytics: Capture screenshots of your app to track user behavior and analyze app usage.

## Features
------------

The `flutter_screen_capture` package offers the following features:

* Capture screenshots of the entire screen or a specific widget.
* Save captured screenshots to the device's gallery or a file.
* Customize the screenshot capture process, such as setting the image quality and format.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `flutter_screen_capture` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_screen_capture: ^1.0.0
```
2. Run `flutter pub get` to install the package.
3. Import the package in your Dart file:
```dart
import 'package:flutter_screen_capture/flutter_screen_capture.dart';
```

## Platform-Specific Details
---------------------------

### Android

* Add the following permission to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
```
* If you're targeting Android 10 or later, add the following code to your `AndroidManifest.xml` file:
```xml
<application
  ...
  android:requestLegacyExternalStorage="true"
>
```

### iOS

* Add the following permission to your `Info.plist` file:
```xml
<key>NSPhotoLibraryAddUsageDescription</key>
<string>This app needs access to the photo library to save screenshots.</string>
```

## Using the Package
---------------------

To capture a screenshot, use the `captureScreen` method:
```dart
import 'package:flutter/material.dart';
import 'package:flutter_screen_capture/flutter_screen_capture.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Screen Capture'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () async {
            final image = await FlutterScreenCapture.captureScreen();
            // Save the image to the device's gallery or a file
          },
          child: Text('Capture Screen'),
        ),
      ),
    );
  }
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'dart:io';
import 'dart:typed_data';
import 'package:flutter/material.dart';
import 'package:flutter_screen_capture/flutter_screen_capture.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Screen Capture',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Step 1: Create a scaffold with an app bar and a body
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Screen Capture'),
      ),
      body: Center(
        // Step 2: Create a button to capture the screen
        child: ElevatedButton(
          onPressed: () async {
            // Step 3: Capture the screen using the FlutterScreenCapture package
            final image = await FlutterScreenCapture.captureScreen();
            // Step 4: Save the image to the device's gallery or a file
            final directory = await getApplicationDocumentsDirectory();
            final file = File('${directory.path}/screenshot.png');
            await file.writeAsBytes(image);
            // Step 5: Display a snackbar to confirm the screenshot was saved
            ScaffoldMessenger.of(context).showSnackBar(
              SnackBar(content: Text('Screenshot saved to ${file.path}')),
            );
          },
          child: Text('Capture Screen'),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user presses the "Capture Screen" button.
// 2. The FlutterScreenCapture package captures the screen and returns a Uint8List representing the image.
// 3. The image is saved to the device's gallery or a file using the File class.
// 4. A snackbar is displayed to confirm the screenshot was saved.
// 5. The user can view the saved screenshot in the device's gallery or file manager.

// Summary: This code demonstrates how to use the FlutterScreenCapture package to capture the screen and save the image to the device's gallery or a file. The application flow is straightforward and easy to follow.
```

<-- END_MAIN -->
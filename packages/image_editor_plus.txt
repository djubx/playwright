```markdown
<-- START_DESCRIPTION -->

# Image Editor Plus: A Comprehensive Overview

The `image_editor_plus` Flutter package is a powerful tool designed to provide developers with a comprehensive suite of image editing capabilities. This package is particularly useful for applications that require users to modify images directly within the app, such as photo editing apps, social media platforms, or any application that involves user-generated content.

## Key Features

- **Basic Editing Tools**: Crop, rotate, and flip images with ease.
- **Filters and Effects**: Apply a variety of filters and effects to enhance images.
- **Drawing and Text**: Add custom drawings and text overlays to images.
- **Platform Support**: Compatible with both Android and iOS, ensuring a seamless experience across devices.

## When to Use

- **Photo Editing Apps**: Enhance user experience by providing in-app editing capabilities.
- **Social Media Platforms**: Allow users to personalize their images before sharing.
- **Content Creation Tools**: Enable users to create custom graphics and designs.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using Image Editor Plus

In this section, we'll walk through the setup process for the `image_editor_plus` package and demonstrate how to integrate it into a Flutter application. We'll cover platform-specific configurations for both Android and iOS.

## Installation

Add the following dependency to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  image_editor_plus: ^2.0.0
```

Run `flutter pub get` to install the package.

## Android Configuration

For Android, ensure that your `AndroidManifest.xml` includes the necessary permissions for accessing the device's storage:

```xml
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
```

## iOS Configuration

For iOS, update your `Info.plist` to include permissions for accessing photos:

```xml
<key>NSPhotoLibraryUsageDescription</key>
<string>We need access to your photo library to edit images.</string>
<key>NSCameraUsageDescription</key>
<string>We need access to your camera to take photos.</string>
```

## Basic Usage

To use the `image_editor_plus` package, import it into your Dart file:

```dart
import 'package:image_editor_plus/image_editor_plus.dart';
```

You can then use the `ImageEditor` widget to allow users to edit images:

```dart
ImageEditor(
  image: AssetImage('assets/sample.jpg'),
  onEditCompleted: (editedImage) {
    // Handle the edited image
  },
)
```

<-- END_TUTORIAL -->

<-- MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:image_editor_plus/image_editor_plus.dart';

void main() => runApp(RealFlutter());

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Image Editor Plus Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: ImageEditorScreen(),
    );
  }
}

class ImageEditorScreen extends StatefulWidget {
  @override
  _ImageEditorScreenState createState() => _ImageEditorScreenState();
}

class _ImageEditorScreenState extends State<ImageEditorScreen> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Edit Your Image'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () async {
            // Open the image editor
            final editedImage = await Navigator.push(
              context,
              MaterialPageRoute(
                builder: (context) => ImageEditor(
                  image: AssetImage('assets/sample.jpg'),
                ),
              ),
            );

            // Check if an image was edited
            if (editedImage != null) {
              // Display the edited image
              setState(() {
                // Update the UI with the edited image
              });
            }
          },
          child: Text('Edit Image'),
        ),
      ),
    );
  }
}
```

// The application starts with the `main` function, which runs the `RealFlutter` app.
// `RealFlutter` is a stateless widget that sets up the MaterialApp with a home screen.
// The home screen is `ImageEditorScreen`, a stateful widget that manages the image editing process.
// The `ImageEditorScreen` contains a button that, when pressed, navigates to the `ImageEditor` widget.
// The `ImageEditor` widget allows users to edit an image, and upon completion, returns the edited image.
// If an image is edited, the UI is updated to reflect the changes.

<-- END_MAIN -->
```
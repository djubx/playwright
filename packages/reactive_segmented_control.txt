<-- START_DESCRIPTION -->

# Reactive Segmented Control Package
=====================================

The `reactive_segmented_control` package is a Flutter widget that provides a reactive, segmented control for selecting options. It is designed to be highly customizable and can be used in a variety of scenarios, such as filtering data, selecting options, or navigating between views.

### Features

*   Highly customizable: The package allows you to customize the appearance and behavior of the segmented control, including the colors, fonts, and animation.
*   Reactive: The segmented control is reactive, meaning that it updates automatically when the user selects a new option.
*   Platform-specific: The package provides platform-specific implementations for Android and iOS, ensuring a native look and feel on each platform.

### When to Use

The `reactive_segmented_control` package is ideal for scenarios where you need to provide a user with a selection of options, such as:

*   Filtering data: Use the segmented control to filter data based on different criteria, such as date, category, or location.
*   Selecting options: Use the segmented control to allow users to select from a range of options, such as colors, sizes, or styles.
*   Navigating between views: Use the segmented control to navigate between different views or screens in your app.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Using the Reactive Segmented Control Package
=====================================================

### Step 1: Add the Package to Your Project

To use the `reactive_segmented_control` package, you need to add it to your project. You can do this by adding the following line to your `pubspec.yaml` file:

```yml
dependencies:
  reactive_segmented_control: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Once you have installed the package, you need to import it into your Dart file. You can do this by adding the following line at the top of your file:

```dart
import 'package:reactive_segmented_control/reactive_segmented_control.dart';
```

### Step 3: Create a Segmented Control

To create a segmented control, you need to create a `ReactiveSegmentedControl` widget. You can do this by using the following code:

```dart
ReactiveSegmentedControl(
  children: [
    Text('Option 1'),
    Text('Option 2'),
    Text('Option 3'),
  ],
  onSelectionChanged: (index) {
    print('Selected option: $index');
  },
)
```

This code creates a segmented control with three options. When the user selects an option, the `onSelectionChanged` callback is called with the index of the selected option.

### Platform-Specific Details

The `reactive_segmented_control` package provides platform-specific implementations for Android and iOS. On Android, the segmented control is implemented using a `RadioGroup`. On iOS, the segmented control is implemented using a `UISegmentedControl`.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:reactive_segmented_control/reactive_segmented_control.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Reactive Segmented Control Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  int _selectedOption = 0;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Reactive Segmented Control Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            ReactiveSegmentedControl(
              children: [
                Text('Option 1'),
                Text('Option 2'),
                Text('Option 3'),
              ],
              onSelectionChanged: (index) {
                setState(() {
                  _selectedOption = index;
                });
              },
            ),
            SizedBox(height: 20),
            Text('Selected option: $_selectedOption'),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user selects an option from the segmented control.
// 2. The `onSelectionChanged` callback is called with the index of the selected option.
// 3. The `_selectedOption` variable is updated with the selected index.
// 4. The `Text` widget is updated to display the selected option.
// 5. The user can select another option from the segmented control, and the process repeats.

// In summary, the reactive segmented control allows the user to select an option, and the application updates to display the selected option.

```

<-- END_MAIN -->
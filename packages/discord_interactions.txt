```markdown
<!-- START_DESCRIPTION -->
# Discord Interactions Flutter Package

The `discord_interactions` Flutter package is designed to facilitate the integration of Discord's interaction features into Flutter applications. This package allows developers to create rich, interactive experiences by leveraging Discord's API for bot interactions, slash commands, and more. 

## When to Use This Package
You should consider using the `discord_interactions` package when:
- You are developing a Flutter application that requires interaction with Discord bots.
- You want to implement features like slash commands, buttons, and modals in your app.
- You need to handle Discord interactions seamlessly within your Flutter application.

## Key Features
- **Slash Commands**: Easily create and manage slash commands for your Discord bot.
- **Button Interactions**: Implement interactive buttons that users can click to trigger actions.
- **Modal Dialogs**: Use modal dialogs to gather user input or display information.
- **WebSocket Support**: Maintain real-time communication with Discord servers.
- **Rich Responses**: Send rich responses to users, including embeds and attachments.

This package is a powerful tool for developers looking to enhance their Flutter applications with Discord's interactive capabilities.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using discord_interactions

## Installation
To get started with the `discord_interactions` package, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  discord_interactions: ^latest_version
```

Make sure to replace `latest_version` with the most recent version available on [pub.dev](https://pub.dev/packages/discord_interactions).

## Platform-Specific Configuration

### Android
1. Open your `android/app/build.gradle` file.
2. Ensure that you have the following permissions in your `AndroidManifest.xml`:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
```

### iOS
1. Open your `ios/Runner/Info.plist` file.
2. Add the following permissions:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

## Basic Usage
To use the `discord_interactions` package, you need to initialize it with your bot token and set up the necessary event listeners. Hereâ€™s a simple example of how to do this:

```dart
import 'package:flutter/material.dart';
import 'package:discord_interactions/discord_interactions.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Discord Interactions Example',
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  late DiscordInteractions discord;

  @override
  void initState() {
    super.initState();
    discord = DiscordInteractions(token: 'YOUR_BOT_TOKEN');
    discord.onInteraction((interaction) {
      // Handle interaction here
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Discord Interactions'),
      ),
      body: Center(
        child: Text('Welcome to Discord Interactions!'),
      ),
    );
  }
}
```

In this example, we initialize the `DiscordInteractions` class with a bot token and set up an interaction listener to handle incoming interactions.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of discord_interactions

```dart
import 'package:flutter/material.dart';
import 'package:discord_interactions/discord_interactions.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Discord Interactions Example',
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  late DiscordInteractions discord;

  @override
  void initState() {
    super.initState();
    // Initialize the DiscordInteractions with your bot token
    discord = DiscordInteractions(token: 'YOUR_BOT_TOKEN');

    // Set up an interaction listener
    discord.onInteraction((interaction) {
      // Check the type of interaction
      if (interaction.type == InteractionType.applicationCommand) {
        // Respond to the slash command
        discord.sendResponse(interaction.id, interaction.token, 'Hello from Flutter!');
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Discord Interactions'),
      ),
      body: Center(
        child: Text('Welcome to Discord Interactions!'),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the MyApp widget.
// 2. MyApp builds a MaterialApp with the title 'Discord Interactions Example'.
// 3. The RealFlutter widget is created, which is a StatefulWidget.
// 4. In the _RealFlutterState class, we initialize the DiscordInteractions instance with the bot token.
// 5. We set up an interaction listener that listens for incoming interactions from Discord.
// 6. When an interaction of type applicationCommand is received, we respond with a message 'Hello from Flutter!'.
// 7. The UI displays a simple welcome message in the center of the screen.
```
<!-- END_MAIN -->
```

This structured blog post provides a comprehensive overview of the `discord_interactions` Flutter package, guiding developers through its features, setup, and practical usage with a complete example.
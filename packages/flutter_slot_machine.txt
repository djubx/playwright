<-- START_DESCRIPTION -->

# Flutter Slot Machine Package
================================

The `flutter_slot_machine` package is a Flutter library that allows you to create a slot machine game with ease. It provides a simple and intuitive API to create a slot machine with multiple reels, symbols, and winning combinations.

## When to Use This Package
---------------------------

This package is perfect for creating a slot machine game in Flutter. You can use it to create a simple slot machine game or a more complex one with multiple reels and winning combinations.

## Features
------------

*   Multiple reels support
*   Customizable symbols and winning combinations
*   Support for different reel sizes
*   Animation support for reel spinning
*   Easy-to-use API

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

## Setup
--------

To use the `flutter_slot_machine` package, you need to add it to your `pubspec.yaml` file:

```yml
dependencies:
  flutter_slot_machine: ^1.0.0
```

Then, run `flutter pub get` to get the package.

## Basic Usage
-------------

To create a basic slot machine, you need to create a `SlotMachine` widget and pass in the required parameters:

```dart
import 'package:flutter/material.dart';
import 'package:flutter_slot_machine/flutter_slot_machine.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Center(
        child: SlotMachine(
          reels: 3,
          symbols: [
            'assets/symbol1.png',
            'assets/symbol2.png',
            'assets/symbol3.png',
          ],
          winningCombinations: [
            [0, 0, 0],
            [1, 1, 1],
            [2, 2, 2],
          ],
        ),
      ),
    );
  }
}
```

## Platform-Specific Details
---------------------------

The `flutter_slot_machine` package uses the `flutter` package to render the slot machine. Therefore, it supports both Android and iOS platforms.

However, you need to make sure that the assets (symbols) are correctly configured for each platform.

For Android, you need to add the assets to the `android/app/src/main/assets` directory.

For iOS, you need to add the assets to the `ios/Runner/Assets.xcassets` directory.

## Configurations and Optimizations
-----------------------------------

You can customize the slot machine by passing in different parameters to the `SlotMachine` widget. For example, you can change the reel size, symbol size, and animation duration.

You can also optimize the performance of the slot machine by reducing the number of reels or symbols.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_slot_machine/flutter_slot_machine.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Step 1: Create a list of symbols
  List<String> symbols = [
    'assets/symbol1.png',
    'assets/symbol2.png',
    'assets/symbol3.png',
  ];

  // Step 2: Create a list of winning combinations
  List<List<int>> winningCombinations = [
    [0, 0, 0],
    [1, 1, 1],
    [2, 2, 2],
  ];

  // Step 3: Create a SlotMachine widget
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Center(
        child: SlotMachine(
          reels: 3,
          symbols: symbols,
          winningCombinations: winningCombinations,
          // Step 4: Customize the slot machine
          reelSize: 100,
          symbolSize: 50,
          animationDuration: Duration(milliseconds: 1000),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user starts the app and is presented with a slot machine.
// 2. The user presses the spin button to start the slot machine.
// 3. The slot machine reels start spinning and the symbols are randomly selected.
// 4. The user waits for the reels to stop spinning and the winning combination is checked.
// 5. If the user wins, they are presented with a winning message.
// 6. If the user loses, they can press the spin button again to try their luck.
```

<-- END_MAIN -->
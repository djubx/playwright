<-- START_DESCRIPTION -->

# Firebase Auth REST Flutter Package
=====================================

The `firebase_auth_rest` package provides a REST-based implementation of Firebase Authentication for Flutter applications. This package allows developers to authenticate users using various providers, such as Google, Facebook, and email/password.

## When to Use This Package
---------------------------

Use this package when you need to authenticate users in your Flutter application using Firebase Authentication, but you don't want to use the official Firebase SDK. This package is particularly useful when you need more control over the authentication process or when you're working with a custom backend.

## Features
------------

*   Supports multiple authentication providers (Google, Facebook, email/password)
*   Handles user registration, login, and logout
*   Provides access to user data (e.g., user ID, email, display name)

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `firebase_auth_rest` package, follow these steps:

### Step 1: Add the Package to Your `pubspec.yaml` File

```yml
dependencies:
  flutter:
    sdk: flutter
  firebase_auth_rest: ^1.0.0
```

### Step 2: Import the Package in Your Dart File

```dart
import 'package:firebase_auth_rest/firebase_auth_rest.dart';
```

### Step 3: Initialize the Firebase Auth REST Client

```dart
final client = FirebaseAuthRestClient(
  apiKey: 'YOUR_API_KEY',
  authDomain: 'YOUR_AUTH_DOMAIN',
);
```

### Step 4: Authenticate Users

Use the `client` object to authenticate users. For example, to sign in with email and password:

```dart
final user = await client.signInWithEmailAndPassword(
  email: 'user@example.com',
  password: 'password',
);
```

### Platform-Specific Details

*   **Android:** Make sure to add the `android.permission.INTERNET` permission to your `AndroidManifest.xml` file.
*   **iOS:** Add the `NSAppTransportSecurity` key to your `Info.plist` file to allow HTTP requests.

### Configurations and Optimizations

*   You can customize the client's behavior by passing additional parameters to the `FirebaseAuthRestClient` constructor. For example, you can set the `timeout` parameter to specify the request timeout.
*   To improve performance, consider using a caching mechanism to store user data.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:firebase_auth_rest/firebase_auth_rest.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Firebase Auth REST Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _formKey = GlobalKey<FormState>();
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();
  final _client = FirebaseAuthRestClient(
    apiKey: 'YOUR_API_KEY',
    authDomain: 'YOUR_AUTH_DOMAIN',
  );

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Firebase Auth REST Demo'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              TextFormField(
                controller: _emailController,
                decoration: InputDecoration(
                  labelText: 'Email',
                  border: OutlineInputBorder(),
                ),
                validator: (value) {
                  if (value!.isEmpty) {
                    return 'Please enter an email';
                  }
                  return null;
                },
              ),
              SizedBox(height: 20),
              TextFormField(
                controller: _passwordController,
                decoration: InputDecoration(
                  labelText: 'Password',
                  border: OutlineInputBorder(),
                ),
                obscureText: true,
                validator: (value) {
                  if (value!.isEmpty) {
                    return 'Please enter a password';
                  }
                  return null;
                },
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () async {
                  if (_formKey.currentState!.validate()) {
                    try {
                      final user = await _client.signInWithEmailAndPassword(
                        email: _emailController.text,
                        password: _passwordController.text,
                      );
                      print('Signed in as ${user.email}');
                    } catch (e) {
                      print('Error signing in: $e');
                    }
                  }
                },
                child: Text('Sign In'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user enters their email and password in the form.
// 2. When the user clicks the "Sign In" button, the form is validated.
// 3. If the form is valid, the `signInWithEmailAndPassword` method is called with the user's email and password.
// 4. The `signInWithEmailAndPassword` method sends a request to the Firebase Auth REST API to sign in the user.
// 5. If the sign-in is successful, the user's email is printed to the console.
// 6. If an error occurs during sign-in, the error message is printed to the console.

```

<-- END_MAIN -->
```markdown
<-- START_DESCRIPTION -->

# Overview of the `bottom_picker` Flutter Package

The `bottom_picker` package is a versatile and user-friendly Flutter package designed to provide a customizable bottom sheet picker. It is particularly useful for applications that require users to select dates, times, or other options in a visually appealing and intuitive manner. The package offers a range of features that make it a go-to choice for developers looking to enhance their app's user interface with minimal effort.

## When to Use `bottom_picker`

- **Date and Time Selection**: Ideal for apps that require users to input dates or times, such as booking or scheduling applications.
- **Option Selection**: Useful for presenting a list of options in a compact and accessible format.
- **Customizable UI**: Perfect for developers who want to maintain a consistent look and feel across their app by customizing the picker’s appearance.

## Key Features

- **Customizable Appearance**: Change colors, fonts, and styles to match your app's theme.
- **Multiple Picker Types**: Supports date, time, and custom option pickers.
- **Easy Integration**: Simple API that allows for quick setup and use.
- **Platform Compatibility**: Works seamlessly on both Android and iOS platforms.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using `bottom_picker`

In this section, we will walk through the process of setting up the `bottom_picker` package in a Flutter project and demonstrate how to use it effectively.

## Setup Process

1. **Add Dependency**

   First, add the `bottom_picker` package to your `pubspec.yaml` file:

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     bottom_picker: ^1.0.0
   ```

2. **Install the Package**

   Run the following command to install the package:

   ```bash
   flutter pub get
   ```

3. **Import the Package**

   Import the package in your Dart file where you intend to use it:

   ```dart
   import 'package:bottom_picker/bottom_picker.dart';
   ```

## Platform-Specific Details

### Android

Ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```gradle
android {
    defaultConfig {
        minSdkVersion 21
    }
}
```

### iOS

Make sure your iOS deployment target is set to 11.0 or higher in your `ios/Podfile`:

```ruby
platform :ios, '11.0'
```

## Using `bottom_picker`

To use the `bottom_picker`, you can call the `BottomPicker.showPicker` method. Here’s a basic example:

```dart
BottomPicker.showDateTimePicker(
  context,
  onChange: (date) {
    print(date);
  },
  onConfirm: (date) {
    print("Date selected: $date");
  },
  bottomPickerTheme: BottomPickerTheme.dark,
);
```

This code snippet demonstrates how to display a date-time picker with a dark theme. You can customize the picker further by adjusting its properties.

<-- END_TUTORIAL -->

<-- MAIN -->

# Complete Example: Flutter Main File

Below is a complete example of a Flutter application using the `bottom_picker` package. This example demonstrates how to integrate and utilize the package's features effectively.

```dart
import 'package:flutter/material.dart';
import 'package:bottom_picker/bottom_picker.dart';

void main() {
  runApp(MyApp());
}

// Main application widget
class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Bottom Picker Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

// Home page widget
class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  DateTime _selectedDateTime;

  // Function to show the bottom picker
  void _showBottomPicker() {
    BottomPicker.showDateTimePicker(
      context,
      initialDateTime: DateTime.now(),
      onChange: (date) {
        // Update the state with the new date
        setState(() {
          _selectedDateTime = date;
        });
      },
      onConfirm: (date) {
        // Confirm the selected date
        setState(() {
          _selectedDateTime = date;
        });
        print("Confirmed Date: $_selectedDateTime");
      },
      bottomPickerTheme: BottomPickerTheme.plain,
      title: "Select Date and Time",
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Bottom Picker Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              _selectedDateTime == null
                  ? 'No date selected!'
                  : 'Selected Date: $_selectedDateTime',
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _showBottomPicker,
              child: Text('Show Bottom Picker'),
            ),
          ],
        ),
      ),
    );
  }
}
```

// Application Flow Explanation
// 1. The `MyApp` widget is the root of the application, setting up the MaterialApp with a home page.
// 2. `MyHomePage` is a stateful widget that manages the state of the selected date and time.
// 3. `_showBottomPicker` is a method that triggers the `BottomPicker` to appear, allowing the user to select a date and time.
// 4. The `BottomPicker.showDateTimePicker` method is used to display the picker with a plain theme.
// 5. The selected date and time are updated in the state and displayed on the screen.
// 6. The `ElevatedButton` in the center of the screen allows the user to open the picker.

// Summary of Application Flow
// The application initializes with a home page that contains a button and a text widget. When the button is pressed, the bottom picker is displayed, allowing the user to select a date and time. The selected date and time are then shown on the screen, demonstrating the integration of the `bottom_picker` package.

<-- END_MAIN -->
```
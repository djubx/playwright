# Ubuntu Logger Flutter Package

## <-- START_DESCRIPTION -->

### Overview

The `ubuntu_logger` package is a powerful logging utility designed specifically for Flutter applications. It provides developers with a simple and effective way to log messages, errors, and other important information during the development and debugging process. This package is particularly useful for applications that require detailed logging for troubleshooting or performance monitoring.

### When to Use

You might consider using the `ubuntu_logger` package in scenarios such as:
- **Debugging**: When you need to track down issues in your application.
- **Performance Monitoring**: To log performance metrics and identify bottlenecks.
- **Error Tracking**: To capture and log errors that occur during runtime.

### Features

- **Custom Log Levels**: Supports various log levels (e.g., info, warning, error) to categorize log messages.
- **File Logging**: Ability to log messages to a file for persistent storage.
- **Console Output**: Logs can be printed to the console for real-time monitoring.
- **Customizable Format**: Allows customization of log message formats to suit your needs.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS platforms.

## <-- END_DESCRIPTION -->

## <-- START_TUTORIAL -->

### Setup Process

To get started with the `ubuntu_logger` package, follow these steps:

1. **Add Dependency**: Open your `pubspec.yaml` file and add the `ubuntu_logger` package under dependencies:

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     ubuntu_logger: ^1.0.0  # Check for the latest version on pub.dev
   ```

2. **Install Packages**: Run the following command in your terminal to install the package:

   ```bash
   flutter pub get
   ```

3. **Platform-Specific Configuration**:
   - **Android**: Ensure that your `AndroidManifest.xml` file has the necessary permissions for file access if you plan to log to a file. Add the following line inside the `<manifest>` tag:

     ```xml
     <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
     ```

   - **iOS**: For iOS, you may need to add permissions in your `Info.plist` file if you are logging to a file. Add the following:

     ```xml
     <key>NSPhotoLibraryUsageDescription</key>
     <string>We need access to the photo library for logging purposes.</string>
     ```

### Using the Package

To use the `ubuntu_logger` package in your Flutter application, follow these steps:

1. **Import the Package**:

   ```dart
   import 'package:ubuntu_logger/ubuntu_logger.dart';
   ```

2. **Initialize the Logger**:

   You can create an instance of the logger in your main application file:

   ```dart
   final logger = RealFlutterLogger();
   ```

3. **Log Messages**:

   Use the logger instance to log messages at different levels:

   ```dart
   logger.info("This is an info message");
   logger.warning("This is a warning message");
   logger.error("This is an error message");
   ```

4. **File Logging**:

   To enable file logging, configure the logger accordingly:

   ```dart
   logger.enableFileLogging();
   ```

5. **Custom Log Format**:

   You can customize the log format by setting a custom formatter:

   ```dart
   logger.setFormatter(CustomFormatter());
   ```

## <-- END_TUTORIAL -->

## <-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:ubuntu_logger/ubuntu_logger.dart';

void main() {
  runApp(MyApp());
}

// Main application widget
class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Ubuntu Logger Example',
      home: LoggerHome(),
    );
  }
}

// Home widget for logging demonstration
class LoggerHome extends StatefulWidget {
  @override
  _LoggerHomeState createState() => _LoggerHomeState();
}

class _LoggerHomeState extends State<LoggerHome> {
  // Create an instance of the logger
  final logger = RealFlutterLogger();

  @override
  void initState() {
    super.initState();
    // Enable file logging
    logger.enableFileLogging();
    // Log an info message on startup
    logger.info("Logger initialized successfully.");
  }

  // Method to log messages when button is pressed
  void _logMessage(String message) {
    logger.info(message);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Ubuntu Logger Example'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Log a message when the button is pressed
            _logMessage("Button pressed!");
          },
          child: Text('Log Message'),
        ),
      ),
    );
  }
}

/*
Application Flow Explanation:
1. The application starts with the `main` function, which runs the `MyApp` widget.
2. `MyApp` builds a MaterialApp with a title and sets `LoggerHome` as the home widget.
3. In `LoggerHome`, an instance of `RealFlutterLogger` is created.
4. During the `initState`, file logging is enabled, and an info message is logged to indicate successful initialization.
5. The UI consists of a button that, when pressed, triggers the `_logMessage` method, logging a message indicating the button press.
6. The logger captures all log messages, which can be viewed in the console or saved to a file, depending on the configuration.
*/

```

## <-- END_MAIN -->

### Summary

In this blog post, we explored the `ubuntu_logger` package, which provides a robust logging solution for Flutter applications. We covered the setup process, including platform-specific configurations for Android and iOS, and demonstrated how to use the package effectively with practical examples. The complete example showcased a simple Flutter application that logs messages when a button is pressed, illustrating the package's capabilities in a real-world scenario. By leveraging the `ubuntu_logger`, developers can enhance their debugging and monitoring processes, making it an invaluable tool in their Flutter development toolkit.
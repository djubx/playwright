<-- START_DESCRIPTION -->

# gits_http Flutter Package
================================

The `gits_http` package is a Flutter library that provides a simple and efficient way to make HTTP requests. It supports various HTTP methods, including GET, POST, PUT, and DELETE, and allows for easy handling of request headers, query parameters, and response data.

## When to Use
--------------

Use the `gits_http` package when you need to make HTTP requests in your Flutter app, such as:

* Fetching data from a RESTful API
* Sending data to a server for processing
* Interacting with web services

## Features
------------

* Supports GET, POST, PUT, and DELETE HTTP methods
* Easy handling of request headers and query parameters
* Automatic JSON encoding and decoding
* Error handling and logging

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
-----------------

## Step 1: Add the Package to Your Project
-----------------------------------------

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  gits_http: ^1.0.0
```
Then, run `flutter pub get` to install the package.

## Step 2: Import the Package
---------------------------

Import the package in your Dart file:
```dart
import 'package:gits_http/gits_http.dart';
```
## Step 3: Make an HTTP Request
------------------------------

Use the `GitsHttp` class to make an HTTP request:
```dart
GitsHttp.get('https://api.example.com/data')
  .then((response) {
    print(response.data);
  })
  .catchError((error) {
    print(error);
  });
```
## Platform-Specific Details
---------------------------

### Android

* Add the following line to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.INTERNET" />
```
### iOS

* Add the following line to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:gits_http/gits_http.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Gits Http Example',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  String _responseData = '';

  // Step 1: Make a GET request to the API
  Future<void> _makeGetRequest() async {
    try {
      final response = await GitsHttp.get('https://api.example.com/data');
      setState(() {
        _responseData = response.data.toString();
      });
    } catch (error) {
      print(error);
    }
  }

  // Step 2: Make a POST request to the API
  Future<void> _makePostRequest() async {
    try {
      final response = await GitsHttp.post('https://api.example.com/data', data: {'key': 'value'});
      setState(() {
        _responseData = response.data.toString();
      });
    } catch (error) {
      print(error);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Gits Http Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(_responseData),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _makeGetRequest,
              child: Text('Make GET Request'),
            ),
            SizedBox(height: 10),
            ElevatedButton(
              onPressed: _makePostRequest,
              child: Text('Make POST Request'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user clicks on the "Make GET Request" button, which calls the _makeGetRequest function.
// 2. The _makeGetRequest function makes a GET request to the API using the GitsHttp.get method.
// 3. The response from the API is stored in the _responseData variable and displayed on the screen.
// 4. The user clicks on the "Make POST Request" button, which calls the _makePostRequest function.
// 5. The _makePostRequest function makes a POST request to the API using the GitsHttp.post method.
// 6. The response from the API is stored in the _responseData variable and displayed on the screen.

// In summary, this example demonstrates how to use the GitsHttp package to make GET and POST requests to an API and display the response on the screen.
```

<-- END_MAIN -->
# Zoom View Flutter Package

<!-- START_DESCRIPTION -->
## Description

The `zoom_view` Flutter package is a powerful tool designed to enable zooming and panning capabilities for images and other widgets in your Flutter applications. This package is particularly useful in scenarios where users need to interact with detailed images, such as maps, diagrams, or any content that requires a closer look.

### Key Features:
- **Pinch to Zoom**: Users can easily zoom in and out using pinch gestures.
- **Panning**: Allows users to drag the content around after zooming in.
- **Customizable**: Offers various customization options for zooming behavior and UI.
- **Supports Multiple Widgets**: Can be used with images, text, and other Flutter widgets.

### When to Use:
- When building applications that display detailed images or maps.
- In photo gallery apps where users need to inspect images closely.
- For educational apps that require interaction with diagrams or charts.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
## Tutorial

### Installation

To use the `zoom_view` package, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  zoom_view: ^latest_version
```

Make sure to replace `latest_version` with the most recent version available on [pub.dev](https://pub.dev/packages/zoom_view).

### Platform-Specific Configuration

#### Android
No specific configuration is required for Android. Just ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file.

#### iOS
For iOS, ensure that you have the following in your `Info.plist` to allow for proper gesture recognition:

```xml
<key>UISupportedInterfaceOrientations</key>
<array>
    <string>UIInterfaceOrientationPortrait</string>
    <string>UIInterfaceOrientationLandscapeLeft</string>
    <string>UIInterfaceOrientationLandscapeRight</string>
</array>
```

### Basic Usage

To use the `zoom_view` package, you can wrap your widget with `ZoomView`. Hereâ€™s a simple example:

```dart
import 'package:flutter/material.dart';
import 'package:zoom_view/zoom_view.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Zoom View Example')),
      body: ZoomView(
        child: Image.network('https://example.com/image.jpg'),
      ),
    );
  }
}
```

This code snippet demonstrates how to implement a basic zoomable image using the `zoom_view` package.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
## Complete Example

```dart
import 'package:flutter/material.dart';
import 'package:zoom_view/zoom_view.dart';

void main() {
  runApp(MyApp());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Zoom View Example',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Zoom View Example'),
        ),
        body: ZoomView(
          // The child widget that we want to zoom
          child: Image.network(
            'https://example.com/image.jpg',
            // Placeholder while the image loads
            loadingBuilder: (context, child, loadingProgress) {
              if (loadingProgress == null) return child;
              return Center(
                child: CircularProgressIndicator(
                  value: loadingProgress.expectedTotalBytes != null
                      ? loadingProgress.cumulativeBytesLoaded /
                          (loadingProgress.expectedTotalBytes ?? 1)
                      : null,
                ),
              );
            },
          ),
        ),
      ),
    );
  }
}

// The application starts with the main function, which runs the MyApp widget.
// MyApp is a StatelessWidget that builds a MaterialApp with a title and a home.
// The home is a Scaffold that contains an AppBar and a body.
// The body consists of a ZoomView widget that wraps an Image widget.
// The Image widget loads an image from the network and displays a loading indicator while the image is being fetched.
// The ZoomView allows users to pinch to zoom and pan the image around for better visibility.
```

### Application Flow Explanation
// The application starts with the `main` function, which initializes the Flutter app by calling `runApp` with `MyApp`.
// `MyApp` is a StatelessWidget that builds a MaterialApp, setting the title and defining the home screen.
// The home screen is a Scaffold that contains an AppBar with the title "Zoom View Example".
// The body of the Scaffold is where the `ZoomView` widget is placed, which allows for zooming and panning.
// Inside the `ZoomView`, an Image widget is used to display an image from a network URL.
// A loading indicator is shown while the image is being fetched, providing feedback to the user.
// Once the image is loaded, users can interact with it using pinch gestures to zoom in and out, and drag to pan around the image.
```

### Summary
The `zoom_view` package provides a straightforward way to implement zooming and panning functionality in Flutter applications. By wrapping your widgets with `ZoomView`, you can enhance user interaction with detailed content. This package is particularly useful for applications that require users to inspect images closely, such as photo galleries or educational tools.
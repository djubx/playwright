```markdown
<!-- START_DESCRIPTION -->
# Marker Icon Flutter Package

The `marker_icon` Flutter package is a powerful tool designed for developers who need to customize the appearance of markers on maps in their Flutter applications. This package allows you to create unique and visually appealing markers by using images, icons, or even custom widgets. It is particularly useful in applications that require map functionalities, such as location-based services, travel apps, or any app that involves geographical data visualization.

## When to Use This Package
- **Custom Map Markers**: When you want to enhance the visual representation of locations on a map.
- **Branding**: To align map markers with your app's branding by using custom icons or images.
- **User Engagement**: To create interactive and engaging map experiences for users.

## Features
- **Custom Icons**: Use any image or icon as a marker.
- **Dynamic Resizing**: Automatically resize markers based on the image dimensions.
- **Easy Integration**: Simple API that integrates seamlessly with Flutter's existing map packages.
- **Support for Multiple Platforms**: Works on both Android and iOS, ensuring a consistent experience across devices.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Marker Icon

In this tutorial, we will walk through the process of setting up the `marker_icon` package in a Flutter project and demonstrate how to use it effectively.

## Step 1: Adding the Dependency

To get started, you need to add the `marker_icon` package to your `pubspec.yaml` file. Open the file and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  marker_icon: ^2.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command in your terminal to install it:

```bash
flutter pub get
```

## Step 2: Platform-Specific Configuration

### Android
For Android, ensure that your `AndroidManifest.xml` file has the necessary permissions to access the internet and location services. Add the following lines inside the `<manifest>` tag:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>
```

### iOS
For iOS, you need to add location permissions in your `Info.plist` file. Open `ios/Runner/Info.plist` and add:

```xml
<key>NSLocationWhenInUseUsageDescription</key>
<string>We need your location to show nearby places.</string>
<key>NSLocationAlwaysUsageDescription</key>
<string>We need your location to show nearby places.</string>
```

## Step 3: Using the Package

Now that we have set up the package, we can start using it in our Flutter application. Below is a simple example demonstrating how to create a map with custom markers using the `marker_icon` package.

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of Using Marker Icon

```dart
import 'package:flutter/material.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'package:marker_icon/marker_icon.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Marker Icon Example',
      home: MapScreen(),
    );
  }
}

class MapScreen extends StatefulWidget {
  @override
  _MapScreenState createState() => _MapScreenState();
}

class _MapScreenState extends State<MapScreen> {
  late GoogleMapController mapController;

  // Define a set of markers
  Set<Marker> _markers = {};

  @override
  void initState() {
    super.initState();
    // Initialize markers
    _markers.add(
      Marker(
        markerId: MarkerId('custom_marker_1'),
        position: LatLng(37.7749, -122.4194), // San Francisco
        icon: MarkerIcon(
          icon: BitmapDescriptor.fromAsset('assets/custom_marker.png'), // Custom marker image
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Custom Marker Example'),
      ),
      body: GoogleMap(
        onMapCreated: (GoogleMapController controller) {
          mapController = controller; // Store the controller for later use
        },
        initialCameraPosition: CameraPosition(
          target: LatLng(37.7749, -122.4194), // Center the map on San Francisco
          zoom: 10,
        ),
        markers: _markers, // Set the markers on the map
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the RealFlutter widget.
// 2. RealFlutter is a StatelessWidget that builds a MaterialApp with a title and a home screen.
// 3. The home screen is the MapScreen, which is a StatefulWidget.
// 4. In the _MapScreenState, we initialize a GoogleMapController and a set of markers.
// 5. In the initState method, we add a custom marker to the _markers set using a custom image.
// 6. The build method returns a Scaffold with an AppBar and a GoogleMap widget.
// 7. The GoogleMap widget is configured with an initial camera position and the custom markers.
// 8. When the map is created, we store the controller for potential future use (e.g., moving the camera).
```
<!-- END_MAIN -->
``` 

In this blog post, we have covered the `marker_icon` Flutter package, detailing its features, setup process, and a complete example of how to implement it in a Flutter application. This package is a great choice for developers looking to enhance their map interfaces with custom markers, providing both flexibility and ease of use.
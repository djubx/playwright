```markdown
<!-- START_DESCRIPTION -->
# en_file_uploader Flutter Package

The `en_file_uploader` package is a powerful tool for Flutter developers looking to implement file upload functionality in their applications. This package simplifies the process of uploading files to a server, handling various file types and providing a user-friendly interface for file selection.

## When to Use This Package
You might consider using `en_file_uploader` in scenarios such as:
- Building applications that require user-generated content, like social media platforms.
- Creating document management systems where users need to upload files.
- Developing e-commerce applications that allow users to upload images or documents for product listings.

## Key Features
- **Multiple File Uploads**: Supports uploading multiple files simultaneously.
- **File Type Validation**: Ensures that only allowed file types are uploaded.
- **Progress Indicators**: Provides visual feedback on the upload progress.
- **Error Handling**: Manages errors gracefully, allowing for retries or user notifications.
- **Customizable UI**: Offers options to customize the appearance of the file uploader.

Overall, `en_file_uploader` is an excellent choice for developers looking to integrate file upload capabilities into their Flutter applications seamlessly.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using en_file_uploader

## Installation
To get started with the `en_file_uploader` package, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  en_file_uploader: ^latest_version
```

Make sure to replace `^latest_version` with the most recent version available on [pub.dev](https://pub.dev/packages/en_file_uploader).

## Platform-Specific Configuration

### Android
1. Open `android/app/build.gradle` and ensure you have the following permissions in the `AndroidManifest.xml` file:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
```

2. Ensure your `minSdkVersion` is set to at least 21.

### iOS
1. Open `ios/Runner/Info.plist` and add the following keys to request permission for file access:

```xml
<key>NSPhotoLibraryUsageDescription</key>
<string>We need access to your photo library to upload files.</string>
<key>NSCameraUsageDescription</key>
<string>We need access to your camera to upload files.</string>
<key>NSMicrophoneUsageDescription</key>
<string>We need access to your microphone to upload audio files.</string>
```

## Basic Usage
To use the `en_file_uploader` package, you can create a simple UI that allows users to select files and upload them. Hereâ€™s a basic example:

```dart
import 'package:flutter/material.dart';
import 'package:en_file_uploader/en_file_uploader.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  List<File> _files = [];

  void _uploadFiles() {
    // Call the upload function from the en_file_uploader package
    EnFileUploader.uploadFiles(_files).then((response) {
      // Handle the response from the server
      print(response);
    }).catchError((error) {
      // Handle any errors that occur during the upload
      print(error);
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('File Uploader')),
      body: Center(
        child: Column(
          children: [
            ElevatedButton(
              onPressed: () {
                // Logic to select files and add them to _files
              },
              child: Text('Select Files'),
            ),
            ElevatedButton(
              onPressed: _uploadFiles,
              child: Text('Upload Files'),
            ),
          ],
        ),
      ),
    );
  }
}
```

This code sets up a basic file uploader interface where users can select files and upload them to a server.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of en_file_uploader

```dart
import 'package:flutter/material.dart';
import 'package:en_file_uploader/en_file_uploader.dart';
import 'dart:io';
import 'package:file_picker/file_picker.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  List<File> _files = []; // List to hold selected files

  // Function to handle file selection
  void _selectFiles() async {
    // Use file_picker to select files
    FilePickerResult? result = await FilePicker.platform.pickFiles(allowMultiple: true);
    
    if (result != null) {
      // Add selected files to the _files list
      setState(() {
        _files = result.paths.map((path) => File(path!)).toList();
      });
    }
  }

  // Function to upload files
  void _uploadFiles() {
    // Call the upload function from the en_file_uploader package
    EnFileUploader.uploadFiles(_files).then((response) {
      // Handle the response from the server
      print('Upload successful: $response');
    }).catchError((error) {
      // Handle any errors that occur during the upload
      print('Upload failed: $error');
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('File Uploader')),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            ElevatedButton(
              onPressed: _selectFiles, // Trigger file selection
              child: Text('Select Files'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _uploadFiles, // Trigger file upload
              child: Text('Upload Files'),
            ),
            SizedBox(height: 20),
            // Display selected files
            Text('Selected Files: ${_files.length}'),
          ],
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with a simple UI containing two buttons: "Select Files" and "Upload Files".
// 2. When the user taps "Select Files", the _selectFiles function is called, which opens a file picker.
// 3. The user can select multiple files, which are then stored in the _files list.
// 4. When the user taps "Upload Files", the _uploadFiles function is called.
// 5. This function uses the en_file_uploader package to upload the files to a server.
// 6. The response from the server is printed to the console, allowing the developer to handle success or failure accordingly.
```
<!-- END_MAIN -->
```

### Summary
In this blog post, we explored the `en_file_uploader` Flutter package, detailing its features, installation process, and usage. We provided a complete example of a Flutter application that allows users to select and upload files, complete with step-by-step comments explaining the application flow. This package is a robust solution for developers needing file upload capabilities in their Flutter applications.
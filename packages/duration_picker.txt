```markdown
<-- START_DESCRIPTION -->

# Overview of the `duration_picker` Flutter Package

The `duration_picker` package is a versatile and user-friendly widget for Flutter applications that allows users to select a duration of time. This package is particularly useful in scenarios where you need users to specify a time interval, such as setting a timer, scheduling an event, or configuring a countdown.

## Features

- **Customizable UI**: The package provides a highly customizable interface, allowing developers to tailor the look and feel to match their application's theme.
- **Ease of Use**: With a straightforward API, integrating the duration picker into your app is simple and efficient.
- **Cross-Platform Support**: The package is designed to work seamlessly on both Android and iOS platforms.

## When to Use

- **Timer Applications**: When building apps that require users to set timers or countdowns.
- **Event Scheduling**: Useful in apps where users need to specify durations for events or tasks.
- **Fitness Apps**: Ideal for workout apps where users set exercise durations.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the `duration_picker` Package

In this section, we'll walk through the process of setting up the `duration_picker` package in a Flutter project and demonstrate how to use it effectively.

## Setup

1. **Add Dependency**

   First, add the `duration_picker` package to your `pubspec.yaml` file:

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     duration_picker: ^0.0.1
   ```

2. **Install Packages**

   Run the following command to install the new package:

   ```bash
   flutter pub get
   ```

## Platform-Specific Configuration

The `duration_picker` package does not require any additional platform-specific configurations, making it easy to integrate into both Android and iOS applications.

## Using the Package

To use the `duration_picker`, import it into your Dart file:

```dart
import 'package:duration_picker/duration_picker.dart';
```

### Basic Usage

Here's a simple example of how to use the `duration_picker` in a Flutter widget:

```dart
DurationPicker(
  duration: Duration(minutes: 30),
  onChange: (val) {
    print(val);
  },
  snapToMins: 5.0,
)
```

- **`duration`**: Sets the initial duration.
- **`onChange`**: Callback function that triggers when the duration is changed.
- **`snapToMins`**: Rounds the duration to the nearest specified minute interval.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:duration_picker/duration_picker.dart';

void main() => runApp(RealFlutter());

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Duration Picker Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: DurationPickerExample(),
    );
  }
}

class DurationPickerExample extends StatefulWidget {
  @override
  _DurationPickerExampleState createState() => _DurationPickerExampleState();
}

class _DurationPickerExampleState extends State<DurationPickerExample> {
  Duration _duration = Duration(minutes: 30); // Initial duration set to 30 minutes

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Duration Picker Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Selected Duration: ${_duration.inMinutes} minutes',
              style: TextStyle(fontSize: 20),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () async {
                // Show the duration picker dialog
                Duration? picked = await showDialog<Duration>(
                  context: context,
                  builder: (BuildContext context) {
                    return AlertDialog(
                      title: Text('Pick a duration'),
                      content: DurationPicker(
                        duration: _duration,
                        onChange: (val) {
                          setState(() => _duration = val);
                        },
                        snapToMins: 5.0,
                      ),
                      actions: <Widget>[
                        TextButton(
                          child: Text('OK'),
                          onPressed: () {
                            Navigator.of(context).pop(_duration);
                          },
                        ),
                      ],
                    );
                  },
                );
                if (picked != null && picked != _duration) {
                  setState(() {
                    _duration = picked; // Update the duration with the picked value
                  });
                }
              },
              child: Text('Select Duration'),
            ),
          ],
        ),
      ),
    );
  }
}
```

// The application starts with the `main` function, which runs the `RealFlutter` app.
// `RealFlutter` is a stateless widget that sets up the MaterialApp with a home page of `DurationPickerExample`.
// `DurationPickerExample` is a stateful widget that manages the state of the selected duration.
// The initial duration is set to 30 minutes.
// The UI consists of a text displaying the selected duration and a button to open the duration picker dialog.
// When the button is pressed, a dialog with the `DurationPicker` widget is shown.
// The user can select a duration, which updates the state and displays the selected duration on the main screen.

<-- END_MAIN -->
```
```markdown
<-- START_DESCRIPTION -->

# Reorderable Grid in Flutter

The `reorderable_grid` Flutter package is a powerful tool for developers looking to create dynamic and interactive grid layouts where items can be reordered by dragging. This package is particularly useful in applications where user customization of item order is desired, such as dashboards, photo galleries, or any app that benefits from a flexible UI.

## When to Use Reorderable Grid

- **Dashboards**: Allow users to customize the layout of widgets.
- **Photo Galleries**: Enable users to rearrange photos according to their preference.
- **Shopping Apps**: Let users sort items in their cart or wish list.
- **Task Management**: Provide a way to prioritize tasks visually.

## Features

- **Drag and Drop**: Intuitive drag-and-drop interface for reordering items.
- **Customizable Appearance**: Easily style the grid and its items.
- **Responsive Design**: Automatically adjusts to different screen sizes.
- **Animation Support**: Smooth animations during item reordering.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using Reorderable Grid

In this tutorial, we will walk through the setup process for the `reorderable_grid` package and demonstrate how to integrate it into a Flutter project. We will cover platform-specific details for both Android and iOS.

## Setup Process

1. **Add Dependency**

   First, add the `reorderable_grid` package to your `pubspec.yaml` file:

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     reorderable_grid: ^1.0.0
   ```

2. **Install Packages**

   Run the following command to install the new package:

   ```bash
   flutter pub get
   ```

3. **Platform-Specific Configurations**

   - **Android**: Ensure your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

     ```gradle
     defaultConfig {
         minSdkVersion 21
     }
     ```

   - **iOS**: No specific configurations are required for iOS, but ensure your deployment target is set to iOS 9.0 or higher in your `ios/Podfile`.

4. **Import the Package**

   Import the package in your Dart file where you plan to use it:

   ```dart
   import 'package:reorderable_grid/reorderable_grid.dart';
   ```

## Using the Package

To use the `reorderable_grid`, you need to wrap your grid items with the `ReorderableGridView` widget. This widget handles the drag-and-drop functionality and manages the order of items.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:reorderable_grid/reorderable_grid.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Reorderable Grid Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // List of items to display in the grid
  List<String> items = List.generate(10, (index) => 'Item $index');

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Reorderable Grid Example'),
      ),
      body: ReorderableGridView(
        onReorder: (oldIndex, newIndex) {
          // Update the order of items when they are reordered
          setState(() {
            if (newIndex > oldIndex) {
              newIndex -= 1;
            }
            final item = items.removeAt(oldIndex);
            items.insert(newIndex, item);
          });
        },
        gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
          crossAxisCount: 2, // Number of columns in the grid
          childAspectRatio: 1.0, // Aspect ratio of each item
        ),
        children: items.map((item) {
          // Create a grid item for each entry in the list
          return Card(
            key: ValueKey(item),
            color: Colors.amber,
            child: Center(
              child: Text(item, style: TextStyle(fontSize: 18)),
            ),
          );
        }).toList(),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The `MyApp` class sets up the main application with a MaterialApp.
// 2. The `RealFlutter` widget is the main screen, which is a stateful widget.
// 3. The `_RealFlutterState` manages a list of items that are displayed in a grid.
// 4. The `ReorderableGridView` widget is used to display the items in a grid format.
// 5. The `onReorder` callback updates the list of items when they are reordered by the user.
// 6. Each item in the grid is wrapped in a `Card` widget for styling.
// 7. The grid is configured to have two columns with a fixed aspect ratio for each item.
```

<-- END_MAIN -->
```
```markdown
<!-- START_DESCRIPTION -->
# Global Settings List Flutter Package

The `global_settings_list` package is a powerful tool for managing application settings in a centralized manner. It allows developers to create a global settings list that can be accessed and modified throughout the application, making it easier to manage user preferences and application configurations.

## When to Use This Package
- **User Preferences**: When you need to store user-specific settings that can be accessed from anywhere in the app.
- **Configuration Management**: For applications that require dynamic configuration changes without needing to restart the app.
- **State Management**: When you want to maintain a consistent state across different parts of your application.

## Features
- **Centralized Management**: Easily manage settings from a single location.
- **Reactive Updates**: Automatically update UI components when settings change.
- **Persistence**: Store settings persistently using shared preferences or other storage solutions.
- **Customizable**: Define your own settings types and structures.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Global Settings List

## Installation
To add the `global_settings_list` package to your Flutter project, include it in your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  global_settings_list: ^1.0.0  # Check for the latest version on pub.dev
```

Run `flutter pub get` to install the package.

## Platform-Specific Configuration
### Android
Ensure that your `AndroidManifest.xml` has the necessary permissions for storage if you plan to use persistent storage.

### iOS
For iOS, no additional configuration is typically required, but ensure that your app has the necessary permissions if you are accessing sensitive data.

## Basic Usage
1. **Import the Package**:
   ```dart
   import 'package:global_settings_list/global_settings_list.dart';
   ```

2. **Initialize the Settings**:
   You can create a settings manager instance in your main application file.
   ```dart
   final settingsManager = GlobalSettingsManager();
   ```

3. **Define Your Settings**:
   Create a settings list with default values.
   ```dart
   settingsManager.addSetting('theme', 'light');
   settingsManager.addSetting('notifications', true);
   ```

4. **Access and Modify Settings**:
   You can access and modify settings anywhere in your app.
   ```dart
   String currentTheme = settingsManager.getSetting('theme');
   settingsManager.updateSetting('theme', 'dark');
   ```

5. **Listen for Changes**:
   You can listen for changes to settings and update your UI accordingly.
   ```dart
   settingsManager.onSettingChanged('theme', (newValue) {
     // Update your UI based on the new theme
   });
   ```

This setup allows you to manage global settings effectively across your Flutter application.

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of Global Settings List

```dart
import 'package:flutter/material.dart';
import 'package:global_settings_list/global_settings_list.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  // Create an instance of the GlobalSettingsManager
  final settingsManager = GlobalSettingsManager();

  MyApp() {
    // Initialize settings with default values
    settingsManager.addSetting('theme', 'light');
    settingsManager.addSetting('notifications', true);
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Global Settings Example',
      theme: ThemeData(
        // Use the current theme from settings
        brightness: settingsManager.getSetting('theme') == 'dark' ? Brightness.dark : Brightness.light,
      ),
      home: SettingsPage(settingsManager: settingsManager),
    );
  }
}

class SettingsPage extends StatelessWidget {
  final GlobalSettingsManager settingsManager;

  SettingsPage({required this.settingsManager});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Settings')),
      body: Column(
        children: [
          ListTile(
            title: Text('Theme'),
            subtitle: Text('Current theme: ${settingsManager.getSetting('theme')}'),
            onTap: () {
              // Toggle theme between light and dark
              String newTheme = settingsManager.getSetting('theme') == 'light' ? 'dark' : 'light';
              settingsManager.updateSetting('theme', newTheme);
            },
          ),
          ListTile(
            title: Text('Notifications'),
            subtitle: Text('Enabled: ${settingsManager.getSetting('notifications')}'),
            onTap: () {
              // Toggle notifications
              bool currentNotifications = settingsManager.getSetting('notifications');
              settingsManager.updateSetting('notifications', !currentNotifications);
            },
          ),
        ],
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function initializes the app and runs MyApp.
// 2. MyApp creates an instance of GlobalSettingsManager and initializes it with default settings.
// 3. The MaterialApp widget is built with a theme based on the current settings.
// 4. The home page is set to SettingsPage, which displays the current settings.
// 5. In SettingsPage, tapping on the theme or notifications list tile updates the respective settings.
// 6. The UI reacts to changes in settings, allowing for a dynamic user experience.
```
<!-- END_MAIN -->
``` 

This structured approach provides a comprehensive overview of the `global_settings_list` package, guiding developers through its features, setup, and practical usage in a Flutter application.
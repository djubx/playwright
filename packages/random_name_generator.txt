<-- START_DESCRIPTION -->

# Random Name Generator Flutter Package
=====================================

The `random_name_generator` Flutter package is a utility library that generates random names. It is useful when you need to create dummy data for testing or prototyping purposes.

### Features

* Generates random first and last names
* Supports multiple locales (en, fr, es, etc.)
* Can generate names for both males and females

### When to use this package

* When you need to create dummy data for testing or prototyping purposes
* When you need to generate random names for a game or simulation
* When you need to create a large dataset of names for machine learning or data analysis purposes

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Using the Random Name Generator Flutter Package
=====================================================

### Step 1: Add the package to your pubspec.yaml file

```yml
dependencies:
  flutter:
    sdk: flutter
  random_name_generator: ^1.0.0
```

### Step 2: Import the package in your Dart file

```dart
import 'package:random_name_generator/random_name_generator.dart';
```

### Step 3: Generate a random name

```dart
void main() {
  final name = RandomNameGenerator().generateName();
  print(name);
}
```

### Platform-specific details

* Android: No additional configuration is required.
* iOS: No additional configuration is required.

### Optimizations

* You can specify the locale and gender when generating a name.
* You can use the `generateNames` method to generate a list of names.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:random_name_generator/random_name_generator.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final _randomNameGenerator = RandomNameGenerator();
  String _name = '';

  // Generate a random name when the app starts
  @override
  void initState() {
    super.initState();
    _generateName();
  }

  // Generate a new random name when the button is pressed
  void _generateName() {
    final name = _randomNameGenerator.generateName();
    setState(() {
      _name = name;
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Random Name Generator'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Text(
                _name,
                style: TextStyle(fontSize: 24),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _generateName,
                child: Text('Generate New Name'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The app starts by generating a random name in the initState method.
// The name is displayed in the center of the screen.
// When the button is pressed, a new random name is generated and the UI is updated.
// The app uses the Material Design theme and has a basic layout.
```

// The code flows as follows:
// 1. The app starts and the `RealFlutter` widget is created.
// 2. The `initState` method is called, which generates a random name using the `RandomNameGenerator`.
// 3. The name is stored in the `_name` variable and the UI is updated using `setState`.
// 4. The app displays the name in the center of the screen.
// 5. When the button is pressed, the `_generateName` method is called, which generates a new random name.
// 6. The new name is stored in the `_name` variable and the UI is updated using `setState`.
// 7. The app displays the new name in the center of the screen.

<-- END_MAIN -->
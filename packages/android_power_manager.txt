<-- START_DESCRIPTION -->

**Android Power Manager Flutter Package**
=====================================

The `android_power_manager` Flutter package provides a simple and efficient way to manage power-related features on Android devices. This package allows developers to access and control various power-related settings, such as screen brightness, screen timeout, and low power mode.

**When to Use This Package**
---------------------------

This package is useful when developing apps that require control over power-related features, such as:

* Screen brightness adjustment
* Screen timeout adjustment
* Low power mode enable/disable
* Power-saving features for battery-intensive apps

**Features**
------------

The `android_power_manager` package provides the following features:

* Get and set screen brightness
* Get and set screen timeout
* Enable and disable low power mode
* Get current power mode (e.g., battery, charging, or full)

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setup and Usage**
-------------------

To use the `android_power_manager` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  android_power_manager: ^1.0.0
```
2. Import the package in your Dart file:
```dart
import 'package:android_power_manager/android_power_manager.dart';
```
3. Create an instance of the `AndroidPowerManager` class:
```dart
AndroidPowerManager _powerManager = AndroidPowerManager();
```
4. Use the various methods to access and control power-related features:
```dart
// Get current screen brightness
double brightness = await _powerManager.getScreenBrightness();

// Set screen brightness to 50%
await _powerManager.setScreenBrightness(0.5);

// Get current screen timeout
int timeout = await _powerManager.getScreenTimeout();

// Set screen timeout to 30 seconds
await _powerManager.setScreenTimeout(30);

// Enable low power mode
await _powerManager.enableLowPowerMode();

// Disable low power mode
await _powerManager.disableLowPowerMode();
```
**Platform-Specific Details**
---------------------------

* Android: This package uses the Android `PowerManager` API to access and control power-related features.
* iOS: This package is not supported on iOS, as the iOS SDK does not provide a similar API for accessing and controlling power-related features.

**Required Configurations or Optimizations**
------------------------------------------

* Android: Add the following permission to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.WRITE_SETTINGS" />
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:android_power_manager/android_power_manager.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Android Power Manager Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  AndroidPowerManager _powerManager = AndroidPowerManager();
  double _brightness = 0.0;
  int _timeout = 0;
  bool _lowPowerMode = false;

  @override
  void initState() {
    super.initState();
    _initPowerManager();
  }

  Future<void> _initPowerManager() async {
    // Get current screen brightness
    _brightness = await _powerManager.getScreenBrightness();
    // Get current screen timeout
    _timeout = await _powerManager.getScreenTimeout();
    // Get current low power mode state
    _lowPowerMode = await _powerManager.isLowPowerModeEnabled();
    setState(() {});
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Android Power Manager Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text('Screen Brightness: $_brightness'),
            Slider(
              value: _brightness,
              min: 0.0,
              max: 1.0,
              divisions: 10,
              label: _brightness.toString(),
              onChanged: (value) async {
                // Set screen brightness
                await _powerManager.setScreenBrightness(value);
                setState(() {
                  _brightness = value;
                });
              },
            ),
            Text('Screen Timeout: $_timeout seconds'),
            Slider(
              value: _timeout.toDouble(),
              min: 15.0,
              max: 120.0,
              divisions: 10,
              label: _timeout.toString(),
              onChanged: (value) async {
                // Set screen timeout
                await _powerManager.setScreenTimeout(value.toInt());
                setState(() {
                  _timeout = value.toInt();
                });
              },
            ),
            Text('Low Power Mode: $_lowPowerMode'),
            Switch(
              value: _lowPowerMode,
              onChanged: (value) async {
                // Enable or disable low power mode
                if (value) {
                  await _powerManager.enableLowPowerMode();
                } else {
                  await _powerManager.disableLowPowerMode();
                }
                setState(() {
                  _lowPowerMode = value;
                });
              },
            ),
          ],
        ),
      ),
    );
  }
}

// The app initializes the AndroidPowerManager instance and gets the current screen brightness, screen timeout, and low power mode state.
// The user can adjust the screen brightness and screen timeout using the sliders.
// The user can enable or disable low power mode using the switch.
// When the user makes any changes, the app updates the UI to reflect the new values.
// The app uses the AndroidPowerManager instance to set the new values for screen brightness, screen timeout, and low power mode.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# In Validator Flutter Package
The `in_validator` package is a powerful tool for validating user input in Flutter applications. It provides a simple and efficient way to ensure that user input conforms to specific rules and formats, making it an essential tool for any Flutter developer.

## When to Use
The `in_validator` package is useful in a variety of scenarios, such as:

* Validating user registration forms
* Checking email addresses and phone numbers
* Verifying passwords and confirm passwords
* Ensuring input data conforms to specific formats (e.g., dates, numbers, etc.)

## Features
The `in_validator` package offers a range of features, including:

* Support for multiple validation rules
* Customizable error messages
* Support for both synchronous and asynchronous validation
* Integration with Flutter's built-in `TextFormField` widget

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the In Validator Package
To use the `in_validator` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  in_validator: ^1.0.0
```
2. Run `flutter pub get` to install the package.
3. Import the package in your Dart file:
```dart
import 'package:in_validator/in_validator.dart';
```
## Platform-Specific Details
The `in_validator` package works on both Android and iOS platforms. However, there are some platform-specific considerations to keep in mind:

* On Android, the package uses the `android.util.Patterns` class to validate email addresses and phone numbers.
* On iOS, the package uses the `NSRegularExpression` class to validate email addresses and phone numbers.

## Configurations and Optimizations
To optimize the performance of the `in_validator` package, consider the following:

* Use the `async` validation mode to perform validation in the background, reducing the impact on the UI thread.
* Use the `debounce` property to delay validation until the user has finished typing.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:in_validator/in_validator.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'In Validator Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _formKey = GlobalKey<FormState>();
  final _emailController = TextEditingController();
  final _passwordController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('In Validator Demo'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              TextFormField(
                controller: _emailController,
                decoration: InputDecoration(
                  labelText: 'Email',
                  border: OutlineInputBorder(),
                ),
                validator: (value) {
                  // Use the InValidator package to validate the email address
                  return InValidator.email(value);
                },
              ),
              SizedBox(height: 16),
              TextFormField(
                controller: _passwordController,
                decoration: InputDecoration(
                  labelText: 'Password',
                  border: OutlineInputBorder(),
                ),
                validator: (value) {
                  // Use the InValidator package to validate the password
                  return InValidator.password(value);
                },
              ),
              SizedBox(height: 16),
              ElevatedButton(
                onPressed: () {
                  // Validate the form using the InValidator package
                  if (_formKey.currentState.validate()) {
                    // Form is valid, proceed with submission
                    print('Form is valid');
                  } else {
                    // Form is invalid, display error messages
                    print('Form is invalid');
                  }
                },
                child: Text('Submit'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user enters their email address and password in the corresponding text fields.
// 2. When the user submits the form, the InValidator package is used to validate the email address and password.
// 3. If the form is valid, the application proceeds with submission.
// 4. If the form is invalid, the application displays error messages to the user.
// The InValidator package provides a simple and efficient way to validate user input in Flutter applications.

```

<-- END_MAIN -->
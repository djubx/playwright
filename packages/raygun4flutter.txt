<-- START_DESCRIPTION -->

# raygun4flutter Package Overview
=====================================

The `raygun4flutter` package is a Flutter library that provides an easy-to-use interface for integrating Raygun's error tracking and monitoring capabilities into your Flutter applications. With this package, you can track and report errors, exceptions, and crashes in your app, allowing you to identify and resolve issues quickly.

### When to Use This Package

Use the `raygun4flutter` package when you want to:

* Track and report errors, exceptions, and crashes in your Flutter app
* Monitor app performance and identify areas for improvement
* Integrate with Raygun's dashboard for real-time error tracking and analytics

### Features

The `raygun4flutter` package provides the following features:

* Error tracking and reporting
* Exception handling and reporting
* Crash reporting
* Customizable error reporting
* Integration with Raygun's dashboard

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the raygun4flutter Package
=============================================

### Step 1: Add the Package to Your Pubspec.yaml File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  raygun4flutter: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:raygun4flutter/raygun4flutter.dart';
```
### Step 3: Initialize the Package

Initialize the package with your Raygun API key:
```dart
RaygunClient _raygunClient = RaygunClient('YOUR_API_KEY');
```
### Step 4: Track Errors and Exceptions

Use the `trackError` method to track errors and exceptions:
```dart
_raygunClient.trackError(error, tags: ['tag1', 'tag2']);
```
### Platform-Specific Details

#### Android

Add the following lines to your `AndroidManifest.xml` file:
```xml
<application>
  ...
  <meta-data
    android:name="com.raygun.raygun4android.apikey"
    android:value="YOUR_API_KEY" />
</application>
```
#### iOS

Add the following lines to your `Info.plist` file:
```xml
<key>RaygunApiKey</key>
<string>YOUR_API_KEY</string>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:raygun4flutter/raygun4flutter.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Raygun4Flutter Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final RaygunClient _raygunClient = RaygunClient('YOUR_API_KEY');

  void _trackError() {
    try {
      // Simulate an error
      throw Exception('Test error');
    } catch (e) {
      // Track the error
      _raygunClient.trackError(e, tags: ['tag1', 'tag2']);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Raygun4Flutter Demo'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: _trackError,
          child: Text('Track Error'),
        ),
      ),
    );
  }
}

// Application flow:
// 1. The app starts and initializes the Raygun client with the API key.
// 2. The user clicks the "Track Error" button, which simulates an error.
// 3. The error is caught and tracked using the Raygun client.
// 4. The error is sent to Raygun's dashboard for analysis.

// Summary:
// This code demonstrates how to use the raygun4flutter package to track errors and exceptions in a Flutter app.
// It initializes the Raygun client with an API key, simulates an error, and tracks the error using the client.
// The error is then sent to Raygun's dashboard for analysis.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Zego Express Engine Flutter Package
=====================================

The Zego Express Engine is a real-time communication (RTC) SDK designed for building high-quality video and audio applications. The Flutter package provides a convenient way to integrate the Zego Express Engine into your Flutter applications.

## When to Use
--------------

Use the Zego Express Engine Flutter package when you need to add real-time video and audio capabilities to your Flutter applications, such as:

* Video conferencing
* Live streaming
* Online education
* Social media apps

## Features
------------

The Zego Express Engine Flutter package provides the following features:

* Real-time video and audio transmission
* High-quality video and audio encoding and decoding
* Support for multiple platforms, including Android and iOS
* Easy integration with Flutter applications

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
-----------------

## Step 1: Add the Package to Your Flutter Project
------------------------------------------------

Add the following dependency to your `pubspec.yaml` file:
```yml
dependencies:
  flutter:
    sdk: flutter
  zego_express_engine: ^1.0.0
```
Then, run `flutter pub get` to install the package.

## Step 2: Import the Package
---------------------------

Import the package in your Dart file:
```dart
import 'package:zego_express_engine/zego_express_engine.dart';
```
## Step 3: Initialize the Engine
------------------------------

Initialize the Zego Express Engine with your app ID and app sign:
```dart
void main() {
  runApp(MyApp());

  // Initialize the Zego Express Engine
  ZegoExpressEngine.init(
    appId: 'YOUR_APP_ID',
    appSign: 'YOUR_APP_SIGN',
  );
}
```
## Step 4: Create a ZegoExpressEngine Instance
------------------------------------------

Create a `ZegoExpressEngine` instance to use the engine's features:
```dart
class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  late ZegoExpressEngine _zegoEngine;

  @override
  void initState() {
    super.initState();

    // Create a ZegoExpressEngine instance
    _zegoEngine = ZegoExpressEngine();
  }
}
```
## Step 5: Use the Engine's Features
----------------------------------

Use the engine's features, such as publishing and playing streams:
```dart
// Publish a stream
_zegoEngine.publishStream(
  streamId: 'stream_id',
  streamName: 'stream_name',
);

// Play a stream
_zegoEngine.playStream(
  streamId: 'stream_id',
  streamName: 'stream_name',
);
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:zego_express_engine/zego_express_engine.dart';

void main() {
  runApp(MyApp());

  // Initialize the Zego Express Engine
  ZegoExpressEngine.init(
    appId: 'YOUR_APP_ID',
    appSign: 'YOUR_APP_SIGN',
  );
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'RealFlutter',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  late ZegoExpressEngine _zegoEngine;

  @override
  void initState() {
    super.initState();

    // Create a ZegoExpressEngine instance
    _zegoEngine = ZegoExpressEngine();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('RealFlutter'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            // Publish a stream
            ElevatedButton(
              onPressed: () {
                _zegoEngine.publishStream(
                  streamId: 'stream_id',
                  streamName: 'stream_name',
                );
              },
              child: Text('Publish Stream'),
            ),
            // Play a stream
            ElevatedButton(
              onPressed: () {
                _zegoEngine.playStream(
                  streamId: 'stream_id',
                  streamName: 'stream_name',
                );
              },
              child: Text('Play Stream'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow:
// 1. The user opens the app and the Zego Express Engine is initialized.
// 2. The user clicks the "Publish Stream" button to publish a stream.
// 3. The user clicks the "Play Stream" button to play a stream.
// 4. The stream is played and the user can view the video and audio.
```

// The code flow is as follows:
// The main function initializes the Zego Express Engine with the app ID and app sign.
// The RealFlutter widget creates a ZegoExpressEngine instance and uses it to publish and play streams.
// The publishStream and playStream methods are called when the user clicks the corresponding buttons.
// The streams are published and played using the Zego Express Engine's features.

<-- END_MAIN -->
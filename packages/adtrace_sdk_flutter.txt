Here's a detailed technical blog on the `adtrace_sdk_flutter` Flutter package, structured as requested.

<!-- START_DESCRIPTION -->
# Adtrace SDK Flutter Package

The `adtrace_sdk_flutter` package is a powerful tool for integrating mobile attribution and analytics into Flutter applications. It allows developers to track user interactions, measure the effectiveness of marketing campaigns, and optimize user acquisition strategies. This package is particularly useful for mobile app developers looking to gain insights into user behavior and improve their marketing efforts.

## When to Use This Package

You should consider using the `adtrace_sdk_flutter` package when:
- You want to track user acquisition and engagement metrics.
- You need to measure the performance of your marketing campaigns.
- You want to optimize your app's monetization strategies based on user behavior data.

## Key Features
- **Attribution Tracking**: Understand where your users are coming from and which campaigns are driving installs.
- **Event Tracking**: Track in-app events to measure user engagement and retention.
- **User Privacy**: Complies with GDPR and CCPA regulations, ensuring user data is handled responsibly.
- **Real-time Analytics**: Access real-time data to make informed decisions quickly.
- **Customizable**: Easily integrate with existing Flutter applications and customize tracking as needed.

By leveraging the `adtrace_sdk_flutter` package, developers can gain valuable insights into their app's performance and user behavior, ultimately leading to better decision-making and improved app success.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up Adtrace SDK in Flutter

In this tutorial, we will walk through the setup process for the `adtrace_sdk_flutter` package and demonstrate how to use it in your Flutter application.

## Step 1: Add Dependency

To get started, add the `adtrace_sdk_flutter` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  adtrace_sdk_flutter: ^1.0.0  # Check for the latest version on pub.dev
```

## Step 2: Platform-Specific Configuration

### Android Configuration

1. **Update AndroidManifest.xml**: Open `android/app/src/main/AndroidManifest.xml` and add the following permissions and metadata:

```xml
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.yourapp">

    <application>
        ...
        <meta-data
            android:name="adtraceAppToken"
            android:value="YOUR_ADTRACE_APP_TOKEN" />
        <meta-data
            android:name="adtraceEnvironment"
            android:value="production" /> <!-- or "sandbox" -->
    </application>
</manifest>
```

2. **ProGuard Rules**: If you are using ProGuard, add the following rules to `proguard-rules.pro`:

```pro
-keep class com.adtrace.sdk.** { *; }
-keep class com.adtrace.sdk.** { *; }
```

### iOS Configuration

1. **Update Info.plist**: Open `ios/Runner/Info.plist` and add the following entries:

```xml
<key>AdtraceAppToken</key>
<string>YOUR_ADTRACE_APP_TOKEN</string>
<key>AdtraceEnvironment</key>
<string>production</string> <!-- or "sandbox" -->
```

2. **CocoaPods**: Ensure you have the necessary CocoaPods installed. Run the following command in your `ios` directory:

```bash
pod install
```

## Step 3: Initialize the SDK

In your main Dart file, initialize the Adtrace SDK. Hereâ€™s how to do it:

```dart
import 'package:flutter/material.dart';
import 'package:adtrace_sdk_flutter/adtrace_sdk_flutter.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Adtrace SDK Example',
      home: HomeScreen(),
    );
  }
}

class HomeScreen extends StatefulWidget {
  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  @override
  void initState() {
    super.initState();
    // Initialize Adtrace SDK
    AdtraceSdk.init('YOUR_ADTRACE_APP_TOKEN', AdtraceEnvironment.production);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Adtrace SDK Example'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Track an event
            AdtraceEvent event = AdtraceEvent('example_event');
            event.setRevenue(1.0, 'USD');
            AdtraceSdk.trackEvent(event);
          },
          child: Text('Track Event'),
        ),
      ),
    );
  }
}
```

In this example, we initialize the Adtrace SDK in the `initState` method of the `HomeScreen` widget. We also provide a button to track an event when pressed.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example: Adtrace SDK in Action

```dart
import 'package:flutter/material.dart';
import 'package:adtrace_sdk_flutter/adtrace_sdk_flutter.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Adtrace SDK Example',
      home: HomeScreen(),
    );
  }
}

class HomeScreen extends StatefulWidget {
  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  @override
  void initState() {
    super.initState();
    // Initialize Adtrace SDK with your app token and environment
    AdtraceSdk.init('YOUR_ADTRACE_APP_TOKEN', AdtraceEnvironment.production);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Adtrace SDK Example'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Create an event to track
            AdtraceEvent event = AdtraceEvent('example_event');
            // Set revenue and currency for the event
            event.setRevenue(1.0, 'USD');
            // Track the event using the Adtrace SDK
            AdtraceSdk.trackEvent(event);
          },
          child: Text('Track Event'),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts and the MyApp widget is created.
// 2. The HomeScreen widget is displayed as the home screen of the app.
// 3. In the initState method of _HomeScreenState, the Adtrace SDK is initialized with the app token and environment.
// 4. The user sees a button labeled "Track Event".
// 5. When the button is pressed, an event named 'example_event' is created.
// 6. The revenue of 1.0 USD is set for the event.
// 7. The event is tracked using the Adtrace SDK, sending the data to the Adtrace server for analysis.
```
<!-- END_MAIN -->

This blog provides a comprehensive overview of the `adtrace_sdk_flutter` package, including its features, setup instructions, and a complete example demonstrating its usage. By following this guide, developers can effectively integrate the Adtrace SDK into their Flutter applications and leverage its powerful analytics capabilities.
<-- START_DESCRIPTION -->

# flrx_validator Package Overview
=====================================

The `flrx_validator` package is a powerful validation tool for Flutter applications. It provides a simple and efficient way to validate user input, ensuring that data is correct and consistent before it is processed or stored.

### When to Use

The `flrx_validator` package is ideal for any Flutter application that requires user input, such as:

* Registration forms
* Login forms
* Data entry forms
* Survey applications

### Features

The `flrx_validator` package offers a range of features, including:

* Support for multiple validation rules
* Customizable error messages
* Support for async validation
* Integration with Flutter's built-in `TextFormField` widget

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using flrx_validator
=====================================

### Step 1: Add the Package to Your Project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flrx_validator: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:flrx_validator/flrx_validator.dart';
```
### Step 3: Create a Validator

Create a validator instance and define the validation rules:
```dart
final validator = Validator(
  rules: [
    RequiredRule('Please enter a value'),
    EmailRule('Please enter a valid email address'),
  ],
);
```
### Step 4: Use the Validator with a TextFormField

Use the validator with a `TextFormField` widget:
```dart
TextFormField(
  validator: validator,
  decoration: InputDecoration(
    labelText: 'Email Address',
  ),
)
```
### Platform-Specific Details

* Android: No additional configuration is required.
* iOS: No additional configuration is required.

### Optimizations

* Use the `async` validation feature to perform server-side validation.
* Use the `custom` validation feature to define custom validation rules.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flrx_validator/flrx_validator.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'flrx_validator Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _formKey = GlobalKey<FormState>();
  final _emailController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('flrx_validator Example'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              TextFormField(
                controller: _emailController,
                validator: Validator(
                  rules: [
                    RequiredRule('Please enter a value'),
                    EmailRule('Please enter a valid email address'),
                  ],
                ),
                decoration: InputDecoration(
                  labelText: 'Email Address',
                ),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  if (_formKey.currentState!.validate()) {
                    // Form is valid, proceed with submission
                    print('Form is valid');
                  } else {
                    // Form is not valid, display error messages
                    print('Form is not valid');
                  }
                },
                child: Text('Submit'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user enters an email address in the TextFormField.
// 2. The Validator checks the input against the defined rules (RequiredRule and EmailRule).
// 3. If the input is valid, the Validator returns null, indicating that the form is valid.
// 4. If the input is not valid, the Validator returns an error message, which is displayed below the TextFormField.
// 5. When the user clicks the Submit button, the Form is validated again.
// 6. If the Form is valid, the submission proceeds, and a success message is printed to the console.
// 7. If the Form is not valid, an error message is printed to the console.

```

<-- END_MAIN -->
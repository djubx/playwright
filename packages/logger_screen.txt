<-- START_DESCRIPTION -->
Logger Screen Flutter Package
=============================

The `logger_screen` Flutter package provides a simple and effective way to display logs on the screen, making it easier to debug and test your app. This package is particularly useful when you need to test your app on physical devices or when you want to provide a way for users to report issues.

Features
--------

*   Display logs on the screen in real-time
*   Support for different log levels (debug, info, warning, error)
*   Customizable log format and appearance
*   Ability to save logs to a file or share them via email or other apps

When to Use
------------

*   When testing your app on physical devices and you need to see the logs in real-time
*   When you want to provide a way for users to report issues and you need to collect logs
*   When you need to debug issues that are difficult to reproduce

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->
Setup and Usage
----------------

To use the `logger_screen` package, you need to add it to your `pubspec.yaml` file:

```yml
dependencies:
  logger_screen: ^1.0.0
```

Then, run `flutter pub get` to install the package.

Next, you need to import the package in your Dart file:

```dart
import 'package:logger_screen/logger_screen.dart';
```

To display the logger screen, you can use the `LoggerScreen` widget:

```dart
LoggerScreen(
  logLevel: LogLevel.debug,
  logFormat: LogFormat.simple,
)
```

You can customize the log level and format to suit your needs.

To log messages, you can use the `Logger` class:

```dart
Logger.log('This is a debug message', level: LogLevel.debug);
Logger.log('This is an info message', level: LogLevel.info);
Logger.log('This is a warning message', level: LogLevel.warning);
Logger.log('This is an error message', level: LogLevel.error);
```

Platform-Specific Details
-------------------------

### Android

On Android, you need to add the following permission to your `AndroidManifest.xml` file:

```xml
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
```

This permission is required to save logs to a file.

### iOS

On iOS, you need to add the following lines to your `Info.plist` file:

```xml
<key>NSFileProtectionKey</key>
<string>NSFileProtectionNone</string>
```

This is required to allow the app to write files to the documents directory.

<-- END_TUTORIAL -->

<-- START_MAIN -->
```dart
import 'package:flutter/material.dart';
import 'package:logger_screen/logger_screen.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Logger Screen Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Logger Screen Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: () {
                // Log a debug message
                Logger.log('This is a debug message', level: LogLevel.debug);
              },
              child: Text('Log Debug Message'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                // Log an info message
                Logger.log('This is an info message', level: LogLevel.info);
              },
              child: Text('Log Info Message'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                // Log a warning message
                Logger.log('This is a warning message', level: LogLevel.warning);
              },
              child: Text('Log Warning Message'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                // Log an error message
                Logger.log('This is an error message', level: LogLevel.error);
              },
              child: Text('Log Error Message'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                // Display the logger screen
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => LoggerScreen()),
                );
              },
              child: Text('Display Logger Screen'),
            ),
          ],
        ),
      ),
    );
  }
}

// The app starts by displaying a home page with several buttons.
// Each button logs a message with a different log level when pressed.
// The user can display the logger screen by pressing the "Display Logger Screen" button.
// The logger screen displays all the logged messages in real-time.
```
<-- END_MAIN -->
```markdown
<!-- START_DESCRIPTION -->
# Image Filter Pro Flutter Package

The **image_filter_pro** package is a powerful tool for Flutter developers looking to apply various image filters and effects to their applications. This package provides a simple and efficient way to manipulate images, making it ideal for applications that require image processing capabilities, such as photo editing apps, social media platforms, or any app that needs to enhance user-generated content.

## When to Use This Package
You might consider using the **image_filter_pro** package in scenarios such as:
- Creating a photo editing application where users can apply filters to their images.
- Developing a social media app that allows users to enhance their photos before sharing.
- Building a gallery app that provides various image effects for user engagement.

## Features
- **Multiple Filters**: Apply a variety of filters such as grayscale, sepia, brightness, contrast, and more.
- **Customizable Parameters**: Adjust filter parameters to achieve the desired effect.
- **Performance Optimized**: Designed to work efficiently on both Android and iOS platforms.
- **Easy Integration**: Simple setup and usage within your Flutter application.

With these features, the **image_filter_pro** package stands out as a versatile solution for image manipulation in Flutter applications.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Image Filter Pro

## Step 1: Adding the Dependency
To get started with the **image_filter_pro** package, you need to add it to your `pubspec.yaml` file. Open your `pubspec.yaml` and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  image_filter_pro: ^1.0.0  # Check for the latest version on pub.dev
```

## Step 2: Installing the Package
After adding the dependency, run the following command in your terminal to install the package:

```bash
flutter pub get
```

## Step 3: Platform-Specific Configuration

### Android
For Android, ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

### iOS
For iOS, you may need to add permissions in your `Info.plist` file if you are accessing the device's photo library:

```xml
<key>NSPhotoLibraryUsageDescription</key>
<string>This app requires access to your photo library to apply filters.</string>
```

## Step 4: Using the Package
Now that you have set up the package, you can start using it in your Flutter application. Below is a simple example demonstrating how to apply filters to an image.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example: Using Image Filter Pro

```dart
import 'package:flutter/material.dart';
import 'package:image_filter_pro/image_filter_pro.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Image Filter Pro Example',
      home: ImageFilterExample(),
    );
  }
}

class ImageFilterExample extends StatefulWidget {
  @override
  _ImageFilterExampleState createState() => _ImageFilterExampleState();
}

class _ImageFilterExampleState extends State<ImageFilterExample> {
  // Variable to hold the selected image
  Image? _image;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Image Filter Pro Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            // Display the selected image
            _image != null
                ? Image(image: _image!.image)
                : Text('No image selected.'),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _applyFilter,
              child: Text('Apply Filter'),
            ),
          ],
        ),
      ),
    );
  }

  // Function to apply a filter to the image
  void _applyFilter() async {
    // Load an image from assets or gallery
    final image = await ImageFilterPro.loadImage('assets/sample.jpg');

    // Apply a grayscale filter
    final filteredImage = await ImageFilterPro.applyFilter(
      image,
      FilterType.grayscale,
    );

    // Update the state with the filtered image
    setState(() {
      _image = filteredImage;
    });
  }
}
```

```dart
// Explanation of the application flow:

// 1. The main function initializes the Flutter app by calling runApp() with the RealFlutter widget.
// 2. The RealFlutter widget sets up the MaterialApp with a title and home page.
// 3. The ImageFilterExample widget is a stateful widget that manages the image filtering process.
// 4. In the build method, it displays the selected image or a message if no image is selected.
// 5. When the "Apply Filter" button is pressed, the _applyFilter method is called.
// 6. The _applyFilter method loads an image from the assets, applies a grayscale filter using the image_filter_pro package, and updates the state with the filtered image.
// 7. The UI is updated to display the filtered image.
```
<!-- END_MAIN -->
``` 

This structured blog provides a comprehensive overview of the **image_filter_pro** package, guiding users through its setup and usage while offering a complete example to illustrate its functionality.
<-- START_DESCRIPTION -->

**Quick Actions iOS Flutter Package**
=====================================

The `quick_actions_ios` Flutter package allows developers to create custom quick actions for their iOS applications. Quick actions are a convenient way for users to perform common tasks or access frequently used features within an app.

**When to Use**
---------------

Use the `quick_actions_ios` package when you want to provide users with a quick and easy way to access specific features or perform common tasks within your app. For example:

*   Allowing users to quickly share content or send messages
*   Providing easy access to frequently used settings or features
*   Enabling users to quickly perform common tasks, such as creating a new document or sending a file

**Features**
------------

The `quick_actions_ios` package provides the following features:

*   Customizable quick actions: Create custom quick actions that fit your app's specific needs
*   Support for multiple quick actions: Add multiple quick actions to your app, allowing users to choose the one they need
*   Integration with existing Flutter apps: Easily integrate the `quick_actions_ios` package into your existing Flutter app

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setup and Usage**
-------------------

To use the `quick_actions_ios` package, follow these steps:

### Step 1: Add the Package to Your Flutter Project

Add the `quick_actions_ios` package to your Flutter project by adding the following line to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  quick_actions_ios: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the `quick_actions_ios` package in your Dart file:

```dart
import 'package:quick_actions_ios/quick_actions_ios.dart';
```

### Step 3: Create a Quick Action

Create a quick action by calling the `QuickActions.create` method:

```dart
QuickActions.create(
  title: 'Share',
  subtitle: 'Share this content',
  icon: 'share',
  callback: (action) {
    // Handle the quick action callback
  },
);
```

### Step 4: Add the Quick Action to Your App

Add the quick action to your app by calling the `QuickActions.add` method:

```dart
QuickActions.add(
  QuickActions.create(
    title: 'Share',
    subtitle: 'Share this content',
    icon: 'share',
    callback: (action) {
      // Handle the quick action callback
    },
  ),
);
```

### Platform-Specific Details

*   **iOS:** The `quick_actions_ios` package uses the `UIApplicationShortcutItem` class to create custom quick actions. To use this package on iOS, you must add the `UIApplicationShortcutItem` key to your app's `Info.plist` file.
*   **Android:** The `quick_actions_ios` package is not compatible with Android. To create custom quick actions on Android, you must use a different package or implement the functionality yourself.

### Required Configurations or Optimizations

*   **iOS:** To use the `quick_actions_ios` package on iOS, you must add the `UIApplicationShortcutItem` key to your app's `Info.plist` file. You can do this by adding the following code to your `Info.plist` file:

```xml
<key>UIApplicationShortcutItems</key>
<array>
  <dict>
    <key>UIApplicationShortcutItemType</key>
    <string>$(PRODUCT_BUNDLE_IDENTIFIER).share</string>
    <key>UIApplicationShortcutItemTitle</key>
    <string>Share</string>
    <key>UIApplicationShortcutItemSubtitle</key>
    <string>Share this content</string>
    <key>UIApplicationShortcutItemIconFile</key>
    <string>share</string>
  </dict>
</array>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:quick_actions_ios/quick_actions_ios.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Quick Actions Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  void initState() {
    super.initState();
    // Create a quick action
    QuickActions.create(
      title: 'Share',
      subtitle: 'Share this content',
      icon: 'share',
      callback: (action) {
        // Handle the quick action callback
        print('Quick action callback: $action');
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Quick Actions Demo'),
      ),
      body: Center(
        child: Text('Quick Actions Demo'),
      ),
    );
  }
}
```

// This code creates a basic Flutter app with a quick action.
// The quick action is created in the `initState` method of the `_MyHomePageState` class.
// The quick action is handled in the `callback` property of the `QuickActions.create` method.
// When the quick action is triggered, the callback is called with the action object as an argument.
// In this example, the callback simply prints a message to the console.
// In a real-world app, you would handle the quick action callback by performing the desired action.

<-- END_MAIN -->
```markdown
<-- START_DESCRIPTION -->

# Flutter MJPEG Package: RealFlutter

The `flutter_mjpeg` package is a powerful tool for Flutter developers who need to integrate MJPEG streams into their applications. MJPEG, or Motion JPEG, is a video compression format where each video frame is a separate JPEG image. This package is particularly useful for applications that require real-time video streaming, such as surveillance systems, live video feeds from cameras, or any application where low-latency video is crucial.

## When to Use `flutter_mjpeg`

- **Surveillance Systems**: Integrate live camera feeds into your app for security monitoring.
- **Remote Monitoring**: Use it for applications that require remote monitoring of environments, such as baby monitors or wildlife cameras.
- **Live Streaming**: Ideal for apps that need to display live video streams from various sources.

## Features

- **Easy Integration**: Simple to set up and use within any Flutter application.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS platforms.
- **Customization**: Offers various customization options for handling video streams, such as setting the stream URL and adjusting the display properties.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using `flutter_mjpeg`

In this tutorial, we'll walk through the process of setting up the `flutter_mjpeg` package in a Flutter project and demonstrate how to use it to display an MJPEG stream.

## Setup Process

### Step 1: Add Dependency

First, add the `flutter_mjpeg` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  flutter_mjpeg: ^0.1.0
```

Run `flutter pub get` to install the package.

### Step 2: Platform-Specific Configuration

#### Android

For Android, ensure that your app has internet permissions. Add the following line to your `AndroidManifest.xml`:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
```

#### iOS

For iOS, you need to configure the `Info.plist` to allow arbitrary loads if your stream is not served over HTTPS. Add the following:

```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```

### Step 3: Using the Package

Now, let's integrate the `flutter_mjpeg` package into your Flutter app.

1. Import the package in your Dart file:

```dart
import 'package:flutter_mjpeg/flutter_mjpeg.dart';
```

2. Use the `RealFlutter` widget to display the MJPEG stream:

```dart
RealFlutter(
  stream: 'http://your-stream-url/mjpeg',
  isLive: true,
)
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

# Complete Example: Flutter Main File

Below is a complete example of a Flutter application using the `flutter_mjpeg` package to display an MJPEG stream.

```dart
import 'package:flutter/material.dart';
import 'package:flutter_mjpeg/flutter_mjpeg.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter MJPEG Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MJPEGStreamScreen(),
    );
  }
}

class MJPEGStreamScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('MJPEG Stream'),
      ),
      body: Center(
        // RealFlutter widget is used to display the MJPEG stream
        child: RealFlutter(
          stream: 'http://your-stream-url/mjpeg', // URL of the MJPEG stream
          isLive: true, // Indicates that the stream is live
          // Optional: Set the width and height of the video
          width: 640,
          height: 480,
          // Optional: Handle stream errors
          errorBuilder: (context, error, stackTrace) {
            return Text('Error loading stream');
          },
        ),
      ),
    );
  }
}
```

// Application Flow Explanation
// 1. The `main` function initializes the app by calling `runApp` with `MyApp`.
// 2. `MyApp` is a stateless widget that sets up the MaterialApp with a title and theme.
// 3. The home screen of the app is `MJPEGStreamScreen`, another stateless widget.
// 4. `MJPEGStreamScreen` builds a Scaffold with an AppBar and a Center widget.
// 5. Inside the Center widget, the `RealFlutter` widget is used to display the MJPEG stream.
// 6. The `stream` parameter is set to the URL of the MJPEG stream.
// 7. The `isLive` parameter indicates that the stream is live, optimizing the widget for real-time video.
// 8. Optional parameters like `width`, `height`, and `errorBuilder` are used to customize the display and handle errors.

<-- END_MAIN -->
```

This blog post provides a comprehensive guide to using the `flutter_mjpeg` package, from understanding its purpose and features to setting it up and implementing a complete example. The detailed code comments and application flow explanation ensure that developers can easily integrate MJPEG streams into their Flutter applications.
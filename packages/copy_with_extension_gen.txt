<-- START_DESCRIPTION -->

# Copy With Extension Gen Package
=====================================

The `copy_with_extension_gen` package is a powerful tool for generating `copyWith` extensions for your Flutter models. This package simplifies the process of creating models that can be easily copied and modified, making it a must-have for any Flutter developer.

## When to Use This Package
---------------------------

You should use this package whenever you need to create models that require a `copyWith` method. This is particularly useful when working with complex models that have multiple properties, or when you need to create a new instance of a model with only a few changes.

## Features
------------

*   Automatic generation of `copyWith` extensions for your models
*   Support for complex models with multiple properties
*   Easy-to-use API for generating extensions

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

## Setup
--------

To use the `copy_with_extension_gen` package, you'll need to add it to your `pubspec.yaml` file:

```yml
dependencies:
  copy_with_extension_gen: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Configuration
--------------

To generate `copyWith` extensions for your models, you'll need to create a configuration file. Create a new file called `build.yaml` in the root of your project:

```yml
targets:
  $default:
    builders:
      copy_with_extension_gen:
        generate_for:
          - lib/models/*.dart
```

This configuration tells the package to generate `copyWith` extensions for all models in the `lib/models` directory.

## Generating Extensions
----------------------

To generate the extensions, run the following command:

```bash
flutter pub run build_runner build
```

This will generate the `copyWith` extensions for your models.

## Using the Extensions
---------------------

To use the generated extensions, simply import the model file and call the `copyWith` method:

```dart
import 'package:my_app/models/my_model.dart';

void main() {
  final myModel = MyModel(name: 'John', age: 30);
  final newModel = myModel.copyWith(name: 'Jane');
  print(newModel.name); // prints 'Jane'
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
// main.dart
import 'package:flutter/material.dart';
import 'package:copy_with_extension_gen/copy_with_extension_gen.dart';

// Define a model with the @CopyWith annotation
@CopyWith()
class RealFlutter {
  final String name;
  final int age;

  RealFlutter({required this.name, required this.age});
}

void main() {
  // Create an instance of the model
  final realFlutter = RealFlutter(name: 'John', age: 30);

  // Use the copyWith method to create a new instance with changes
  final newRealFlutter = realFlutter.copyWith(name: 'Jane');

  // Print the new instance's properties
  print(newRealFlutter.name); // prints 'Jane'
  print(newRealFlutter.age); // prints 30

  // Run the app
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Copy With Extension Gen Demo',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Copy With Extension Gen Demo'),
        ),
        body: Center(
          child: Text('Hello, World!'),
        ),
      ),
    );
  }
}
```

// The application flow is as follows:
// 1. The `RealFlutter` model is defined with the `@CopyWith` annotation.
// 2. An instance of the `RealFlutter` model is created with `name` and `age` properties.
// 3. The `copyWith` method is used to create a new instance of the `RealFlutter` model with the `name` property changed to 'Jane'.
// 4. The new instance's properties are printed to the console.
// 5. The app is run with the `MaterialApp` widget.
// 6. The app displays a scaffold with an app bar and a centered text widget.

<-- END_MAIN -->
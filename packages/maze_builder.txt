<-- START_DESCRIPTION -->

# Maze Builder Flutter Package
================================

The `maze_builder` package is a powerful tool for creating complex maze structures in Flutter applications. It provides a simple and intuitive API for generating mazes with various shapes, sizes, and difficulties.

## When to Use This Package
---------------------------

The `maze_builder` package is perfect for creating puzzle games, educational apps, or any other type of application that requires a maze structure. It's also a great tool for developers who want to add a fun and challenging element to their apps.

## Features
------------

*   Generate mazes with various shapes (e.g., square, rectangle, circle)
*   Customize maze size and difficulty level
*   Support for multiple maze algorithms (e.g., recursive backtracking, Prim's algorithm)
*   Easy-to-use API for creating and manipulating mazes

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Maze Builder Package
--------------------------------------

To use the `maze_builder` package in your Flutter project, follow these steps:

### Step 1: Add the Package to Your `pubspec.yaml` File

```yml
dependencies:
  flutter:
    sdk: flutter
  maze_builder: ^1.0.0
```

### Step 2: Import the Package in Your Dart File

```dart
import 'package:maze_builder/maze_builder.dart';
```

### Step 3: Create a Maze

```dart
Maze maze = Maze(
  width: 20,
  height: 20,
  algorithm: MazeAlgorithm.recursiveBacktracking,
);
```

### Platform-Specific Details

*   For Android, make sure to add the following line to your `AndroidManifest.xml` file:

    ```xml
<application
  ...
  android:hardwareAccelerated="true"
  ...>
```

*   For iOS, make sure to add the following line to your `Info.plist` file:

    ```xml
<key>UIHardwareAcceleration</key>
<true/>
```

### Required Configurations and Optimizations

*   To improve performance, make sure to use a reasonable maze size and difficulty level.
*   To customize the maze appearance, use the `MazeTheme` class to change the colors and styles.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:maze_builder/maze_builder.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Maze Builder Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MazeBuilderDemo(),
    );
  }
}

class MazeBuilderDemo extends StatefulWidget {
  @override
  _MazeBuilderDemoState createState() => _MazeBuilderDemoState();
}

class _MazeBuilderDemoState extends State<MazeBuilderDemo> {
  Maze _maze;

  @override
  void initState() {
    super.initState();
    _maze = Maze(
      width: 20,
      height: 20,
      algorithm: MazeAlgorithm.recursiveBacktracking,
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Maze Builder Demo'),
      ),
      body: Center(
        child: MazeWidget(
          maze: _maze,
          theme: MazeTheme(
            wallColor: Colors.black,
            floorColor: Colors.white,
          ),
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          setState(() {
            _maze.generate();
          });
        },
        tooltip: 'Generate New Maze',
        child: Icon(Icons.refresh),
      ),
    );
  }
}

// Application flow:
// 1. The user runs the app and sees a maze generated using the recursive backtracking algorithm.
// 2. The user can click the floating action button to generate a new maze.
// 3. The maze is updated in real-time, and the user can see the new maze.
// 4. The user can repeat steps 2-3 to generate multiple mazes.
// 5. The app uses the MazeBuilder package to generate and display the mazes.
```

// Summary: The code flows by first creating a maze using the `Maze` class and then displaying it using the `MazeWidget` class. The user can generate a new maze by clicking the floating action button, which updates the maze in real-time. The app uses the MazeBuilder package to generate and display the mazes.

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Flutter Audio Recorder 2 Package
=====================================

The `flutter_audio_recorder2` package is a powerful tool for recording audio in Flutter applications. It provides a simple and easy-to-use API for recording and playing back audio files.

### When to Use This Package

This package is ideal for applications that require audio recording, such as:

* Voice notes or memos
* Audio messaging or chat apps
* Music or voice recording apps
* Podcasting or audio blogging apps

### Features

* Record audio in various formats (WAV, MP3, AAC, etc.)
* Play back recorded audio
* Pause and resume recording
* Get the current recording status (recording, paused, stopped)
* Get the duration of the recorded audio

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `flutter_audio_recorder2` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_audio_recorder2: ^0.0.8
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:flutter_audio_recorder2/flutter_audio_recorder2.dart';
```
### Step 3: Initialize the Recorder

Create an instance of the `FlutterAudioRecorder2` class:
```dart
FlutterAudioRecorder2 _recorder = FlutterAudioRecorder2();
```
### Platform-Specific Details

* For Android, add the following permissions to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.RECORD_AUDIO" />
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
```
* For iOS, add the following lines to your `Info.plist` file:
```xml
<key>NSMicrophoneUsageDescription</key>
<string>This app needs access to the microphone to record audio.</string>
```
### Configurations and Optimizations

* You can configure the recording format, sample rate, and bit rate using the `FlutterAudioRecorder2` constructor.
* You can also optimize the recording quality by adjusting the buffer size and number of channels.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_audio_recorder2/flutter_audio_recorder2.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Audio Recorder Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  FlutterAudioRecorder2 _recorder;
  bool _isRecording = false;
  bool _isPlaying = false;
  String _recordingStatus = 'Not recording';

  @override
  void initState() {
    super.initState();
    _recorder = FlutterAudioRecorder2();
  }

  void _startRecording() async {
    // Start recording
    await _recorder.startRecording();
    setState(() {
      _isRecording = true;
      _recordingStatus = 'Recording';
    });
  }

  void _stopRecording() async {
    // Stop recording
    await _recorder.stopRecording();
    setState(() {
      _isRecording = false;
      _recordingStatus = 'Not recording';
    });
  }

  void _playRecording() async {
    // Play the recorded audio
    await _recorder.playRecording();
    setState(() {
      _isPlaying = true;
    });
  }

  void _stopPlaying() async {
    // Stop playing the recorded audio
    await _recorder.stopPlaying();
    setState(() {
      _isPlaying = false;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Audio Recorder Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(_recordingStatus),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _startRecording,
              child: Text('Start Recording'),
            ),
            SizedBox(height: 10),
            ElevatedButton(
              onPressed: _stopRecording,
              child: Text('Stop Recording'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _playRecording,
              child: Text('Play Recording'),
            ),
            SizedBox(height: 10),
            ElevatedButton(
              onPressed: _stopPlaying,
              child: Text('Stop Playing'),
            ),
          ],
        ),
      ),
    );
  }
}

// The app starts by initializing the recorder and setting up the UI.
// When the user presses the 'Start Recording' button, the app starts recording audio.
// When the user presses the 'Stop Recording' button, the app stops recording audio.
// When the user presses the 'Play Recording' button, the app plays the recorded audio.
// When the user presses the 'Stop Playing' button, the app stops playing the recorded audio.
// The app displays the current recording status and allows the user to start and stop recording and playing the recorded audio.

```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Web Color Picker Flutter Package
=====================================

The `web_color_picker` Flutter package is a powerful tool for selecting colors from a web-based color palette. It provides a simple and intuitive way to choose colors for your Flutter application.

### When to Use

This package is ideal for applications that require users to select colors for customization or design purposes. Some examples include:

* Color picker for a drawing or painting app
* Customization options for a game or simulation
* Design tools for a web or mobile application

### Features

* Web-based color palette with a wide range of colors
* Simple and intuitive interface for selecting colors
* Supports both Android and iOS platforms
* Customizable color palette and selection options

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Web Color Picker Package
===========================================================

### Step 1: Add the Package to Your Flutter Project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter:
    sdk: flutter
  web_color_picker: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:web_color_picker/web_color_picker.dart';
```
### Step 3: Create a Color Picker Instance

Create a new instance of the `WebColorPicker` class:
```dart
WebColorPicker _colorPicker = WebColorPicker();
```
### Step 4: Customize the Color Palette (Optional)

You can customize the color palette by passing a list of colors to the `colors` property:
```dart
_colorPicker.colors = [
  Colors.red,
  Colors.blue,
  Colors.green,
];
```
### Step 5: Display the Color Picker

Display the color picker using the `showColorPicker` method:
```dart
_colorPicker.showColorPicker(
  context: context,
  onColorChanged: (color) {
    // Handle color selection
  },
);
```
### Platform-Specific Details

* Android: The color picker will use the native Android color picker dialog.
* iOS: The color picker will use a custom-built dialog.

### Required Configurations or Optimizations

* Make sure to add the `web_color_picker` package to your `pubspec.yaml` file.
* Import the package in your Dart file.
* Create a new instance of the `WebColorPicker` class.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:web_color_picker/web_color_picker.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Web Color Picker Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  WebColorPicker _colorPicker = WebColorPicker();
  Color _selectedColor = Colors.white;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Web Color Picker Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Select a color:',
              style: TextStyle(fontSize: 24),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                _colorPicker.showColorPicker(
                  context: context,
                  onColorChanged: (color) {
                    setState(() {
                      _selectedColor = color;
                    });
                  },
                );
              },
              child: Text('Show Color Picker'),
            ),
            SizedBox(height: 20),
            Text(
              'Selected color:',
              style: TextStyle(fontSize: 24),
            ),
            SizedBox(height: 10),
            Container(
              width: 100,
              height: 100,
              color: _selectedColor,
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user clicks the "Show Color Picker" button.
// 2. The color picker dialog is displayed.
// 3. The user selects a color from the dialog.
// 4. The selected color is passed to the `onColorChanged` callback.
// 5. The callback updates the `_selectedColor` variable.
// 6. The UI is updated to display the selected color.

// This code demonstrates the basic usage of the `web_color_picker` package.
// It shows how to create a color picker instance, customize the color palette,
// and handle color selection.
```

<-- END_MAIN -->
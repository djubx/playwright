<-- START_DESCRIPTION -->

# Data Class Flutter Package
================================

The `data_class` package is a powerful tool for simplifying data management in Flutter applications. It provides a simple and efficient way to generate boilerplate code for data classes, allowing developers to focus on the logic of their app rather than tedious data management.

## When to Use
--------------

The `data_class` package is particularly useful when working with complex data structures, such as JSON data from APIs or local storage. It simplifies the process of generating data classes, reducing the amount of code needed and minimizing the risk of errors.

## Features
------------

*   Automatic generation of data classes
*   Support for complex data structures, including nested objects and lists
*   Customizable data class names and field names
*   Support for serialization and deserialization

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

## Setup
--------

To use the `data_class` package, add it to your `pubspec.yaml` file:

```yml
dependencies:
  data_class: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Basic Usage
-------------

To generate a data class, create a new file (e.g., `real_flutter.dart`) and add the following code:

```dart
import 'package:data_class/data_class.dart';

@DataClass()
class RealFlutter {
  final String name;
  final int age;

  RealFlutter({required this.name, required this.age});
}
```

Run the build runner to generate the data class:

```bash
flutter pub run build_runner build
```

This will generate a new file (`real_flutter.g.dart`) containing the data class boilerplate code.

## Platform-Specific Details
---------------------------

### Android

No additional configuration is required for Android.

### iOS

To use the `data_class` package on iOS, add the following line to your `Podfile`:

```ruby
pod 'data_class'
```

Then, run `pod install` to install the pod.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
// Import the data class package
import 'package:data_class/data_class.dart';

// Import the generated data class
import 'real_flutter.g.dart';

void main() {
  // Create a new instance of the RealFlutter data class
  final realFlutter = RealFlutter(name: 'John Doe', age: 30);

  // Serialize the data class to JSON
  final json = realFlutter.toJson();
  print(json); // Output: {"name":"John Doe","age":30}

  // Deserialize the JSON back to a data class instance
  final deserializedRealFlutter = RealFlutter.fromJson(json);
  print(deserializedRealFlutter.name); // Output: John Doe
  print(deserializedRealFlutter.age); // Output: 30
}

// The application flow is as follows:
// 1. We create a new instance of the RealFlutter data class with a name and age.
// 2. We serialize the data class instance to JSON using the toJson() method.
// 3. We print the resulting JSON string to the console.
// 4. We deserialize the JSON string back to a data class instance using the fromJson() method.
// 5. We print the name and age of the deserialized data class instance to the console.

// In summary, this code demonstrates the basic usage of the data class package,
// including serialization and deserialization of complex data structures.
```

<-- END_MAIN -->
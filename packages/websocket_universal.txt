<-- START_DESCRIPTION -->

# Websocket Universal Flutter Package
=====================================

The `websocket_universal` Flutter package provides a universal WebSocket client that can be used on multiple platforms, including Android, iOS, and web. This package allows for real-time communication between the client and server, enabling features such as live updates, messaging, and gaming.

## When to Use
--------------

Use this package when you need to establish a real-time connection between your Flutter app and a server. This is particularly useful for applications that require:

* Live updates, such as stock prices or sports scores
* Real-time messaging, such as chat apps or live support
* Multiplayer gaming
* Collaborative editing, such as Google Docs

## Features
------------

* Supports multiple platforms, including Android, iOS, and web
* Real-time communication between client and server
* Automatic reconnect and heartbeat support
* Support for multiple WebSocket protocols, including `ws` and `wss`

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
-----------------

## Step 1: Add the Package to Your Pubspec
-----------------------------------------

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  websocket_universal: ^1.0.0
```
Then, run `flutter pub get` to install the package.

## Step 2: Import the Package
-----------------------------

Import the package in your Dart file:
```dart
import 'package:websocket_universal/websocket_universal.dart';
```
## Step 3: Create a WebSocket Client
-------------------------------------

Create a WebSocket client instance:
```dart
final client = WebSocketClient('ws://example.com');
```
Replace `ws://example.com` with your server's WebSocket URL.

## Step 4: Connect to the Server
-------------------------------

Connect to the server:
```dart
client.connect();
```
## Step 5: Send and Receive Messages
-------------------------------------

Send a message to the server:
```dart
client.send('Hello, server!');
```
Receive messages from the server:
```dart
client.onMessage.listen((message) {
  print('Received message: $message');
});
```
## Platform-Specific Details
---------------------------

### Android

On Android, you need to add the following permission to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.INTERNET" />
```
### iOS

On iOS, you need to add the following line to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:websocket_universal/websocket_universal.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final _client = WebSocketClient('ws://example.com');
  final _messages = <String>[];

  @override
  void initState() {
    super.initState();
    _client.connect();
    _client.onMessage.listen((message) {
      setState(() {
        _messages.add(message);
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('WebSocket Example'),
      ),
      body: Column(
        children: [
          Expanded(
            child: ListView.builder(
              itemCount: _messages.length,
              itemBuilder: (context, index) {
                return ListTile(
                  title: Text(_messages[index]),
                );
              },
            ),
          ),
          TextField(
            decoration: InputDecoration(
              labelText: 'Send a message',
            ),
            onChanged: (text) {
              _client.send(text);
            },
          ),
        ],
      ),
    );
  }
}

// The app starts by creating a WebSocket client instance and connecting to the server.
// When a message is received from the server, it is added to the list of messages and the UI is updated.
// The user can send a message to the server by typing in the text field and pressing enter.
// The message is sent to the server and the UI is updated with the new message.
// The app continues to receive and send messages in real-time.

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'WebSocket Example',
      home: RealFlutter(),
    );
  }
}
```

<-- END_MAIN -->
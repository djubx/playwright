<-- START_DESCRIPTION -->

**Introduction to the Chess Flutter Package**
=============================================

The Chess Flutter package is a powerful library for creating chess games in Flutter applications. It provides a wide range of features, including chessboard rendering, piece movement, and game logic. This package is ideal for developers who want to create a chess game or integrate chess functionality into their existing app.

**Key Features**

*   Render a chessboard with customizable appearance
*   Move pieces around the board using intuitive APIs
*   Implement game logic, including check, checkmate, and stalemate detection
*   Support for various chess variants, such as blitz and rapid chess

**When to Use This Package**

*   Creating a standalone chess game
*   Integrating chess functionality into a larger game or app
*   Building a chess-based puzzle or educational tool

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setting Up the Chess Flutter Package**
==========================================

To use the Chess Flutter package, follow these steps:

### Step 1: Add the Package to Your Project

Add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  chess: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:chess/chess.dart';
```

### Step 3: Render a Chessboard

Create a `ChessBoard` widget to render a chessboard:

```dart
ChessBoard(
  board: Board(),
  size: 400,
)
```

### Step 4: Move Pieces

Use the `movePiece` method to move pieces around the board:

```dart
board.movePiece(
  from: 'e2',
  to: 'e4',
);
```

### Platform-Specific Details

*   For Android, you may need to add the following configuration to your `AndroidManifest.xml` file:

    ```xml
<application
  ...
  android:hardwareAccelerated="true"
  ...
>
```

*   For iOS, you may need to add the following configuration to your `Info.plist` file:

    ```xml
<key>UIRequiresFullScreen</key>
<true/>
```

### Optimizations

*   To improve performance, consider using a smaller board size or reducing the number of pieces on the board.
*   You can also use the `debugMode` property to enable debugging features, such as displaying piece coordinates.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:chess/chess.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Chess Demo',
      home: ChessDemo(),
    );
  }
}

class ChessDemo extends StatefulWidget {
  @override
  _ChessDemoState createState() => _ChessDemoState();
}

class _ChessDemoState extends State<ChessDemo> {
  Board _board = Board();

  void _movePiece(String from, String to) {
    _board.movePiece(from: from, to: to);
    setState(() {});
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Chess Demo'),
      ),
      body: Center(
        child: ChessBoard(
          board: _board,
          size: 400,
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          _movePiece('e2', 'e4');
        },
        tooltip: 'Move Piece',
        child: Icon(Icons.arrow_forward),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app and is presented with a chessboard.
// 2. The user clicks the floating action button to move a piece from e2 to e4.
// 3. The piece is moved and the board is updated to reflect the new position.
// 4. The user can continue to move pieces around the board by clicking the floating action button.
// 5. The game logic is implemented using the chess package, which handles check, checkmate, and stalemate detection.
// 6. The app uses a Material Design theme and a Scaffold to provide a basic layout.
// 7. The ChessBoard widget is used to render the chessboard and handle piece movement.
```

<-- END_MAIN -->
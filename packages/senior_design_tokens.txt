<-- START_DESCRIPTION -->

**Senior Design Tokens Flutter Package**
=====================================

The `senior_design_tokens` Flutter package is a powerful tool for managing design tokens in your Flutter applications. Design tokens are a set of values that define the visual design of your application, such as colors, typography, and spacing. This package provides a simple and efficient way to manage these tokens and apply them consistently throughout your application.

**When to Use This Package**
---------------------------

You should use this package when you want to:

* Manage design tokens in a centralized and efficient way
* Apply consistent design across your entire application
* Easily switch between different design themes or modes (e.g., light and dark mode)

**Features**
------------

* Centralized management of design tokens
* Support for multiple design themes or modes
* Easy integration with existing Flutter applications
* Platform-specific configurations and optimizations

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setting Up the Package**
-------------------------

To use the `senior_design_tokens` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  senior_design_tokens: ^1.0.0
```
2. Run `flutter pub get` to install the package.
3. Import the package in your Dart file:
```dart
import 'package:senior_design_tokens/senior_design_tokens.dart';
```
**Configuring the Package**
---------------------------

To configure the package, you need to create a `DesignTokens` instance and pass it to the `SeniorDesignTokens` widget:
```dart
DesignTokens designTokens = DesignTokens(
  colors: {
    'primary': Color(0xFF123456),
    'secondary': Color(0xFF789012),
  },
  typography: {
    'headline': TextStyle(fontSize: 24),
    'body': TextStyle(fontSize: 16),
  },
);

SeniorDesignTokens(
  designTokens: designTokens,
  child: MyApp(),
)
```
**Platform-Specific Configurations**
---------------------------------

To configure the package for specific platforms, you can use the `platform` property:
```dart
SeniorDesignTokens(
  designTokens: designTokens,
  platform: Platform.isAndroid
      ? DesignTokensPlatform.android
      : DesignTokensPlatform.ios,
  child: MyApp(),
)
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:senior_design_tokens/senior_design_tokens.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Create a DesignTokens instance
    DesignTokens designTokens = DesignTokens(
      colors: {
        'primary': Color(0xFF123456),
        'secondary': Color(0xFF789012),
      },
      typography: {
        'headline': TextStyle(fontSize: 24),
        'body': TextStyle(fontSize: 16),
      },
    );

    // Create a SeniorDesignTokens widget
    return SeniorDesignTokens(
      designTokens: designTokens,
      child: RealFlutter(),
    );
  }
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Use the design tokens to style the widgets
    return Scaffold(
      appBar: AppBar(
        title: Text(
          'Real Flutter',
          style: DesignTokens.of(context).typography['headline'],
        ),
        backgroundColor: DesignTokens.of(context).colors['primary'],
      ),
      body: Center(
        child: Text(
          'Hello, World!',
          style: DesignTokens.of(context).typography['body'],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The MyApp widget creates a DesignTokens instance and passes it to the SeniorDesignTokens widget.
// 2. The SeniorDesignTokens widget uses the design tokens to style the child widgets.
// 3. The RealFlutter widget uses the design tokens to style the appBar and body widgets.
// 4. The design tokens are applied consistently throughout the application.
```

<-- END_MAIN -->
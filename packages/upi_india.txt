```markdown
<-- START_DESCRIPTION -->

# Overview of the `upi_india` Flutter Package

The `upi_india` Flutter package is a powerful tool designed to facilitate seamless integration of UPI (Unified Payments Interface) payment functionality into Flutter applications. This package provides a straightforward API to initiate UPI transactions, making it an ideal choice for developers looking to incorporate digital payment solutions into their apps.

## When to Use `upi_india`

- **E-commerce Applications**: Integrate UPI payments to allow users to pay for products and services directly through your app.
- **Utility Payment Apps**: Enable users to pay bills, recharge services, or transfer money using UPI.
- **Peer-to-Peer Payment Solutions**: Facilitate easy money transfers between users within your application.

## Key Features

- **Simple API**: Easy-to-use methods for initiating UPI transactions.
- **Cross-Platform Support**: Works on both Android and iOS platforms.
- **Transaction Status Handling**: Provides callbacks for transaction success, failure, or user cancellation.
- **Multiple UPI Apps Support**: Compatible with popular UPI apps like Google Pay, PhonePe, and Paytm.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the `upi_india` Package

In this tutorial, we will walk through the process of setting up the `upi_india` package in a Flutter project and demonstrate how to use it to initiate UPI transactions.

## Step 1: Add Dependency

Add the `upi_india` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  upi_india: ^1.0.0
```

Run `flutter pub get` to install the package.

## Step 2: Platform-Specific Setup

### Android

1. **Modify AndroidManifest.xml**: Ensure you have the necessary permissions and intent filters.

```xml
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.yourapp">

    <uses-permission android:name="android.permission.INTERNET"/>
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>

    <application
        android:label="yourapp"
        android:icon="@mipmap/ic_launcher">
        <activity
            android:name=".MainActivity"
            android:launchMode="singleTop"
            android:configChanges="orientation|keyboardHidden|keyboard|screenSize|smallestScreenSize|screenLayout|density|layoutDirection|fontScale|uiMode"
            android:hardwareAccelerated="true"
            android:windowSoftInputMode="adjustResize">
            <intent-filter>
                <action android:name="android.intent.action.MAIN"/>
                <category android:name="android.intent.category.LAUNCHER"/>
            </intent-filter>
        </activity>
    </application>
</manifest>
```

2. **Gradle Configuration**: Ensure your `minSdkVersion` is set to at least 19 in `android/app/build.gradle`.

### iOS

1. **Modify Info.plist**: Add the following to handle UPI URLs.

```xml
<key>LSApplicationQueriesSchemes</key>
<array>
    <string>upi</string>
</array>
```

2. **Podfile**: Ensure platform is set to iOS 11 or higher.

```ruby
platform :ios, '11.0'
```

## Step 3: Using the Package

Import the package in your Dart file:

```dart
import 'package:upi_india/upi_india.dart';
```

Create an instance of `RealFlutter` and use it to initiate a transaction.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:upi_india/upi_india.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'UPI Payment Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: PaymentPage(),
    );
  }
}

class PaymentPage extends StatefulWidget {
  @override
  _PaymentPageState createState() => _PaymentPageState();
}

class _PaymentPageState extends State<PaymentPage> {
  UpiIndia _upiIndia = UpiIndia();
  List<UpiApp>? apps;

  @override
  void initState() {
    super.initState();
    _fetchUpiApps();
  }

  Future<void> _fetchUpiApps() async {
    apps = await _upiIndia.getAllUpiApps();
    setState(() {});
  }

  Future<void> _initiateTransaction(UpiApp app) async {
    UpiResponse response = await _upiIndia.startTransaction(
      app: app,
      receiverUpiId: 'example@upi',
      receiverName: 'Example Merchant',
      transactionRefId: 'T1234',
      transactionNote: 'Test Payment',
      amount: 1.00,
    );

    _handleTransactionResponse(response);
  }

  void _handleTransactionResponse(UpiResponse response) {
    switch (response.status) {
      case UpiPaymentStatus.SUCCESS:
        print('Transaction Successful');
        break;
      case UpiPaymentStatus.FAILURE:
        print('Transaction Failed');
        break;
      case UpiPaymentStatus.SUBMITTED:
        print('Transaction Submitted');
        break;
      default:
        print('Transaction Status Unknown');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('UPI Payment Demo'),
      ),
      body: apps == null
          ? Center(child: CircularProgressIndicator())
          : ListView.builder(
              itemCount: apps!.length,
              itemBuilder: (context, index) {
                return ListTile(
                  leading: Image.memory(apps![index].icon),
                  title: Text(apps![index].name),
                  onTap: () => _initiateTransaction(apps![index]),
                );
              },
            ),
    );
  }
}

// Application Flow:
// 1. The app starts with the `MyApp` widget, which sets up the MaterialApp and directs to `PaymentPage`.
// 2. `PaymentPage` is a stateful widget that initializes the UPI apps available on the device.
// 3. `_fetchUpiApps` is called in `initState` to retrieve and display the list of UPI apps.
// 4. When a user taps on a UPI app, `_initiateTransaction` is called to start a transaction.
// 5. The transaction details are specified, including receiver UPI ID, name, and amount.
// 6. `_handleTransactionResponse` processes the transaction result, printing the status to the console.
// 7. The UI updates to show a loading indicator while fetching apps and a list of apps once loaded.

<-- END_MAIN -->
```

This blog post provides a comprehensive guide to using the `upi_india` package in Flutter applications, from setup to implementation, with a complete example to demonstrate its capabilities.
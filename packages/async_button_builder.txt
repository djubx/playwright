<-- START_DESCRIPTION -->

**async_button_builder Package Overview**
=====================================

The `async_button_builder` package is a Flutter package that allows you to create buttons that can perform asynchronous operations, such as API calls or database queries, while displaying a loading indicator. This package is useful when you need to perform an asynchronous operation in response to a button press, and you want to provide visual feedback to the user while the operation is in progress.

**Features**

*   Supports both `ElevatedButton` and `OutlinedButton`
*   Customizable loading indicator
*   Supports async operations with `Future` return type
*   Error handling and display

**When to Use**

Use this package when you need to perform an asynchronous operation in response to a button press, and you want to provide visual feedback to the user while the operation is in progress. For example, when making an API call, querying a database, or performing a network request.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setup and Usage**
=====================

### Step 1: Add the Package to Your Project

Add the following line to your `pubspec.yaml` file:

```yml
dependencies:
  async_button_builder: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:async_button_builder/async_button_builder.dart';
```

### Step 3: Create an Async Button

Create an async button using the `AsyncElevatedButton` or `AsyncOutlinedButton` widget:

```dart
AsyncElevatedButton(
  onPressed: () async {
    // Perform async operation here
    await Future.delayed(Duration(seconds: 2));
  },
  child: Text('Click me'),
)
```

### Step 4: Customize the Loading Indicator

You can customize the loading indicator by passing a `loadingIndicator` property:

```dart
AsyncElevatedButton(
  onPressed: () async {
    // Perform async operation here
    await Future.delayed(Duration(seconds: 2));
  },
  loadingIndicator: CircularProgressIndicator(),
  child: Text('Click me'),
)
```

### Platform-Specific Details

No platform-specific configurations are required for this package.

### Error Handling

You can handle errors by wrapping the async operation in a `try-catch` block:

```dart
AsyncElevatedButton(
  onPressed: () async {
    try {
      // Perform async operation here
      await Future.delayed(Duration(seconds: 2));
    } catch (e) {
      // Handle error here
      print(e);
    }
  },
  child: Text('Click me'),
)
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:async_button_builder/async_button_builder.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Async Button Builder Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Async Button Builder Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            AsyncElevatedButton(
              onPressed: () async {
                // Perform async operation here
                await Future.delayed(Duration(seconds: 2));
              },
              child: Text('Click me'),
            ),
            SizedBox(height: 20),
            AsyncOutlinedButton(
              onPressed: () async {
                // Perform async operation here
                await Future.delayed(Duration(seconds: 2));
              },
              child: Text('Click me'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user clicks the async button.
// 2. The async button displays a loading indicator.
// 3. The async operation is performed in the background.
// 4. Once the async operation is complete, the loading indicator is hidden.
// 5. The button returns to its normal state.

// In this example, we have two async buttons: an elevated button and an outlined button.
// Both buttons perform the same async operation: waiting for 2 seconds.
// The async operation is simulated using the Future.delayed function.
// In a real-world scenario, you would replace this with your actual async operation.

// The async button builder package handles the loading indicator and error handling for you.
// You can customize the loading indicator by passing a loadingIndicator property.
// You can handle errors by wrapping the async operation in a try-catch block.
```

<-- END_MAIN -->
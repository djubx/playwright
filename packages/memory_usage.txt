```markdown
<!-- START_DESCRIPTION -->
# Memory Usage Flutter Package

The `memory_usage` Flutter package is a powerful tool designed to help developers monitor and analyze the memory consumption of their Flutter applications. Understanding memory usage is crucial for optimizing performance and ensuring a smooth user experience, especially in resource-constrained environments.

## When to Use This Package
- **Performance Optimization**: When you need to identify memory leaks or excessive memory usage in your app.
- **Debugging**: To troubleshoot performance issues related to memory consumption.
- **Monitoring**: For applications that require real-time monitoring of memory usage, such as games or data-intensive applications.

## Features
- **Real-time Memory Monitoring**: Track memory usage in real-time to identify spikes and trends.
- **Detailed Reports**: Generate detailed reports on memory allocation and usage patterns.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS platforms.
- **Custom Alerts**: Set up alerts for specific memory thresholds to proactively manage memory usage.

By integrating the `memory_usage` package into your Flutter application, you can gain valuable insights into how your app utilizes memory, allowing you to make informed decisions about optimizations and improvements.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Memory Usage Package

## Installation
To get started with the `memory_usage` package, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  memory_usage: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run `flutter pub get` to install the package.

## Platform-Specific Configuration
### Android
For Android, ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

### iOS
For iOS, you may need to enable certain permissions in your `Info.plist` file, depending on your app's requirements. However, the `memory_usage` package does not require any specific permissions.

## Basic Usage
To use the `memory_usage` package, you can start monitoring memory usage in your main application file. Hereâ€™s how to set it up:

1. Import the package.
2. Initialize the memory monitoring.
3. Use the provided methods to track and report memory usage.

```dart
import 'package:flutter/material.dart';
import 'package:memory_usage/memory_usage.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  MemoryUsage _memoryUsage;

  @override
  void initState() {
    super.initState();
    _memoryUsage = MemoryUsage();
    _memoryUsage.startMonitoring(); // Start monitoring memory usage
  }

  @override
  void dispose() {
    _memoryUsage.stopMonitoring(); // Stop monitoring when the widget is disposed
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Memory Usage Example')),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Display current memory usage
            final memoryInfo = _memoryUsage.getMemoryInfo();
            showDialog(
              context: context,
              builder: (context) => AlertDialog(
                title: Text('Memory Usage'),
                content: Text('Current Memory Usage: ${memoryInfo.currentUsage} MB'),
                actions: [
                  TextButton(
                    onPressed: () => Navigator.of(context).pop(),
                    child: Text('Close'),
                  ),
                ],
              ),
            );
          },
          child: Text('Show Memory Usage'),
        ),
      ),
    );
  }
}
```

In this example, we initialize the `MemoryUsage` class, start monitoring in `initState`, and stop monitoring in `dispose`. The button displays the current memory usage when pressed.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Memory Usage Package

```dart
import 'package:flutter/material.dart';
import 'package:memory_usage/memory_usage.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  MemoryUsage _memoryUsage; // Declare a MemoryUsage instance

  @override
  void initState() {
    super.initState();
    _memoryUsage = MemoryUsage(); // Initialize the MemoryUsage instance
    _memoryUsage.startMonitoring(); // Start monitoring memory usage
  }

  @override
  void dispose() {
    _memoryUsage.stopMonitoring(); // Stop monitoring when the widget is disposed
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Memory Usage Example')), // App bar title
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Display current memory usage
            final memoryInfo = _memoryUsage.getMemoryInfo(); // Get memory info
            showDialog(
              context: context,
              builder: (context) => AlertDialog(
                title: Text('Memory Usage'), // Dialog title
                content: Text('Current Memory Usage: ${memoryInfo.currentUsage} MB'), // Show current memory usage
                actions: [
                  TextButton(
                    onPressed: () => Navigator.of(context).pop(), // Close dialog
                    child: Text('Close'),
                  ),
                ],
              ),
            );
          },
          child: Text('Show Memory Usage'), // Button text
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the RealFlutter widget.
// 2. In the initState method, we create an instance of MemoryUsage and start monitoring.
// 3. When the user presses the "Show Memory Usage" button, we retrieve the current memory usage.
// 4. An AlertDialog is displayed showing the current memory usage in MB.
// 5. The user can close the dialog by pressing the "Close" button.
// 6. When the widget is disposed, we stop monitoring memory usage to prevent memory leaks.
```
<!-- END_MAIN -->
```

### Summary
In this blog post, we explored the `memory_usage` Flutter package, detailing its features, installation process, and usage through a practical example. The provided code demonstrates how to monitor memory usage in a Flutter application, making it easier for developers to optimize their apps for better performance. By understanding and utilizing this package, developers can proactively manage memory consumption, leading to a smoother user experience.
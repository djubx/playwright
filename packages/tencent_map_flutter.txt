```markdown
<!-- START_DESCRIPTION -->
# Tencent Map Flutter Package

The `tencent_map_flutter` package is a powerful Flutter plugin that provides developers with the ability to integrate Tencent Maps into their Flutter applications. This package is particularly useful for applications that require detailed mapping features, such as location tracking, route planning, and geolocation services. 

## When to Use This Package
- **Location-Based Services**: If your app needs to provide location-based services, such as finding nearby places or tracking user location.
- **Navigation Applications**: For apps that require navigation features, including route planning and real-time traffic updates.
- **Custom Map Overlays**: When you need to display custom markers, polylines, or polygons on the map.

## Key Features
- **Map Display**: Render Tencent Maps within your Flutter application.
- **Markers**: Add custom markers to the map to represent locations.
- **Polylines and Polygons**: Draw lines and shapes on the map for route visualization.
- **User Location**: Access and display the user's current location.
- **Map Events**: Handle various map events such as taps and gestures.

Overall, the `tencent_map_flutter` package is an excellent choice for developers looking to leverage Tencent's mapping capabilities in their Flutter applications.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Tencent Map Flutter

## Installation

To get started with the `tencent_map_flutter` package, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  tencent_map_flutter: ^latest_version
```

Make sure to replace `latest_version` with the most recent version available on [pub.dev](https://pub.dev/packages/tencent_map_flutter).

## Platform-Specific Configuration

### Android
1. **Add Permissions**: Open `AndroidManifest.xml` located in `android/app/src/main/AndroidManifest.xml` and add the following permissions:

   ```xml
   <uses-permission android:name="android.permission.INTERNET"/>
   <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>
   <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION"/>
   ```

2. **API Key**: You need to obtain a Tencent Map API key. Once you have it, add it to your `AndroidManifest.xml`:

   ```xml
   <meta-data
       android:name="com.tencent.map.api_key"
       android:value="YOUR_TENCENT_MAP_API_KEY"/>
   ```

### iOS
1. **Add Permissions**: Open `Info.plist` located in `ios/Runner/Info.plist` and add the following keys:

   ```xml
   <key>NSLocationWhenInUseUsageDescription</key>
   <string>We need your location to show nearby places.</string>
   <key>NSLocationAlwaysUsageDescription</key>
   <string>We need your location to show nearby places.</string>
   ```

2. **API Key**: Similar to Android, you need to add your Tencent Map API key in the `Info.plist`:

   ```xml
   <key>com.tencent.map.api_key</key>
   <string>YOUR_TENCENT_MAP_API_KEY</string>
   ```

## Using the Package

Once you have completed the installation and configuration, you can start using the `tencent_map_flutter` package in your Flutter application. 

Hereâ€™s a simple example of how to display a Tencent Map:

```dart
import 'package:flutter/material.dart';
import 'package:tencent_map_flutter/tencent_map_flutter.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Tencent Map Example')),
        body: TencentMap(
          onMapCreated: (TencentMapController controller) {
            // Map is created
          },
        ),
      ),
    );
  }
}

void main() {
  runApp(RealFlutter());
}
```

This code initializes a basic Flutter application that displays a Tencent Map. The `onMapCreated` callback allows you to perform actions once the map is ready.

With this setup, you can start exploring the various features of the `tencent_map_flutter` package.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Tencent Map Flutter

```dart
import 'package:flutter/material.dart';
import 'package:tencent_map_flutter/tencent_map_flutter.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  late TencentMapController _controller;

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Tencent Map Example')),
        body: TencentMap(
          onMapCreated: (TencentMapController controller) {
            _controller = controller; // Store the controller for later use
            _addMarker(); // Call method to add a marker
          },
          onMapLongPress: (LatLng position) {
            // Handle long press on the map
            _addMarkerAtPosition(position); // Add marker at the pressed position
          },
        ),
      ),
    );
  }

  // Method to add a default marker
  void _addMarker() {
    _controller.addMarker(
      MarkerOptions(
        position: LatLng(39.9042, 116.4074), // Beijing coordinates
        title: 'Beijing',
        snippet: 'Capital of China',
      ),
    );
  }

  // Method to add a marker at a specific position
  void _addMarkerAtPosition(LatLng position) {
    _controller.addMarker(
      MarkerOptions(
        position: position,
        title: 'New Marker',
        snippet: 'Marker added at long press',
      ),
    );
  }
}

void main() {
  runApp(RealFlutter());
}

// Application Flow Explanation:
// 1. The app starts with the `main` function, which runs the `RealFlutter` widget.
// 2. The `RealFlutter` widget is a StatefulWidget that manages the state of the map.
// 3. In the `build` method, a `TencentMap` widget is created.
// 4. The `onMapCreated` callback is triggered when the map is ready, storing the controller for later use.
// 5. The `_addMarker` method is called to add a default marker at Beijing's coordinates.
// 6. The `onMapLongPress` callback allows users to add a new marker at the location they long-pressed on the map.
// 7. The `_addMarkerAtPosition` method is called to add a marker at the specified position.
```
<!-- END_MAIN -->
``` 

This structured blog post provides a comprehensive overview of the `tencent_map_flutter` package, guiding developers through its features, setup, and practical usage with a complete example.
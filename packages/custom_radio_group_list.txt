<-- START_DESCRIPTION -->

# Custom Radio Group List Flutter Package
=============================================

The `custom_radio_group_list` Flutter package provides a customizable radio group list that allows developers to create a list of radio buttons with a variety of features. This package is ideal for creating surveys, quizzes, or any other type of application that requires a list of radio buttons.

### Features

* Customizable radio button appearance
* Support for multiple radio groups
* Optional label text for each radio button
* Optional validation for required radio buttons
* Support for Android and iOS platforms

### When to Use This Package

This package is useful when you need to create a list of radio buttons with customizable appearance and behavior. For example, you can use this package to create a survey or quiz application where users need to select one or more options from a list.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Package
=============================================

### Step 1: Add the Package to Your Flutter Project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  custom_radio_group_list: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:custom_radio_group_list/custom_radio_group_list.dart';
```
### Step 3: Create a Radio Group List

Create a `CustomRadioGroupList` widget and pass in a list of `CustomRadioButton` widgets:
```dart
CustomRadioGroupList(
  children: [
    CustomRadioButton(
      label: 'Option 1',
      value: 'option1',
    ),
    CustomRadioButton(
      label: 'Option 2',
      value: 'option2',
    ),
    CustomRadioButton(
      label: 'Option 3',
      value: 'option3',
    ),
  ],
)
```
### Step 4: Customize the Radio Button Appearance

You can customize the radio button appearance by passing in a `CustomRadioButtonStyle` object:
```dart
CustomRadioGroupList(
  children: [
    CustomRadioButton(
      label: 'Option 1',
      value: 'option1',
      style: CustomRadioButtonStyle(
        color: Colors.blue,
        size: 24,
      ),
    ),
    // ...
  ],
)
```
### Platform-Specific Details

This package supports both Android and iOS platforms. However, you may need to add additional configurations or optimizations for each platform.

For example, on Android, you may need to add the following line to your `AndroidManifest.xml` file:
```xml
<application
  ...
  android:hardwareAccelerated="true"
  ...
>
```
This will enable hardware acceleration for your application, which can improve performance.

On iOS, you may need to add the following line to your `Info.plist` file:
```xml
<key>UIViewControllerBasedStatusBarAppearance</key>
<false/>
```
This will disable the status bar appearance animation, which can improve performance.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:custom_radio_group_list/custom_radio_group_list.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Custom Radio Group List Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  String _selectedValue;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Custom Radio Group List Demo'),
      ),
      body: Center(
        child: CustomRadioGroupList(
          children: [
            CustomRadioButton(
              label: 'Option 1',
              value: 'option1',
              style: CustomRadioButtonStyle(
                color: Colors.blue,
                size: 24,
              ),
            ),
            CustomRadioButton(
              label: 'Option 2',
              value: 'option2',
              style: CustomRadioButtonStyle(
                color: Colors.red,
                size: 24,
              ),
            ),
            CustomRadioButton(
              label: 'Option 3',
              value: 'option3',
              style: CustomRadioButtonStyle(
                color: Colors.green,
                size: 24,
              ),
            ),
          ],
          onChanged: (value) {
            setState(() {
              _selectedValue = value;
            });
          },
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          print('Selected value: $_selectedValue');
        },
        tooltip: 'Print selected value',
        child: Icon(Icons.print),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user selects a radio button from the list.
// 2. The `onChanged` callback is called with the selected value.
// 3. The `_selectedValue` variable is updated with the selected value.
// 4. The user presses the floating action button.
// 5. The selected value is printed to the console.

// This code demonstrates the basic usage of the `custom_radio_group_list` package.
// It creates a list of radio buttons with customizable appearance and behavior.
// The user can select a radio button, and the selected value is printed to the console.
```

<-- END_MAIN -->
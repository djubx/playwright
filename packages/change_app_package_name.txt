<-- START_DESCRIPTION -->

# Change App Package Name Flutter Package
=============================================

The `change_app_package_name` Flutter package is a utility package that allows developers to easily change the package name of their Flutter app. This package is particularly useful when you need to create multiple versions of your app with different package names, such as for different environments (e.g., development, staging, production) or for different platforms (e.g., Android, iOS).

## Features

* Easily change the package name of your Flutter app
* Supports both Android and iOS platforms
* No need to manually update the package name in multiple files

## When to Use This Package

* When you need to create multiple versions of your app with different package names
* When you want to easily switch between different environments (e.g., development, staging, production)
* When you want to use a different package name for different platforms (e.g., Android, iOS)

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Using the Change App Package Name Flutter Package
===========================================================

## Step 1: Add the Package to Your Pubspec.yaml File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  change_app_package_name: ^1.0.0
```
Then, run `flutter pub get` to install the package.

## Step 2: Import the Package in Your Dart File

Import the package in your Dart file:
```dart
import 'package:change_app_package_name/change_app_package_name.dart';
```
## Step 3: Use the Package to Change the Package Name

Use the `changeAppPackageName` function to change the package name:
```dart
void main() {
  changeAppPackageName('com.example.myapp');
  runApp(MyApp());
}
```
## Platform-Specific Details

### Android

For Android, you need to update the `AndroidManifest.xml` file to reflect the new package name. You can do this by adding the following code to your `AndroidManifest.xml` file:
```xml
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.myapp">
```
### iOS

For iOS, you need to update the `Info.plist` file to reflect the new package name. You can do this by adding the following code to your `Info.plist` file:
```xml
<key>CFBundleIdentifier</key>
<string>com.example.myapp</string>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
// Import the package
import 'package:change_app_package_name/change_app_package_name.dart';

// Import the Flutter framework
import 'package:flutter/material.dart';

// Define the main class
class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Define the package name
  String _packageName = 'com.example.myapp';

  // Define the function to change the package name
  void _changePackageName() {
    // Use the package to change the package name
    changeAppPackageName(_packageName);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Change App Package Name Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text('Current Package Name: $_packageName'),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _changePackageName,
              child: Text('Change Package Name'),
            ),
          ],
        ),
      ),
    );
  }
}

void main() {
  // Run the app
  runApp(RealFlutter());
}

// Explain the flow of the application
// The app starts by importing the necessary packages and defining the main class.
// The main class defines the package name and a function to change the package name.
// The app then builds a scaffold with an app bar and a body.
// The body contains a text widget that displays the current package name and a button to change the package name.
// When the button is pressed, the app calls the function to change the package name.
// The function uses the package to change the package name.
// The app then updates the text widget to display the new package name.
```

<-- END_MAIN -->
```markdown
<-- START_DESCRIPTION -->

# Background Locator 2: A Comprehensive Overview

The `background_locator_2` Flutter package is a powerful tool designed to facilitate location tracking in the background. This package is particularly useful for applications that require continuous location updates, even when the app is not in the foreground. It is ideal for use cases such as fitness tracking, delivery services, and navigation apps where real-time location data is crucial.

## Key Features

- **Background Location Tracking**: Continuously track the user's location even when the app is closed or running in the background.
- **Customizable Callbacks**: Define custom actions to be executed when location updates are received.
- **Battery Efficiency**: Optimized to minimize battery consumption while providing accurate location data.
- **Cross-Platform Support**: Compatible with both Android and iOS, ensuring a wide reach for your application.

## When to Use

- **Fitness Apps**: Track user movements and activities over time.
- **Delivery Services**: Monitor the location of delivery personnel in real-time.
- **Navigation Apps**: Provide turn-by-turn navigation and location updates.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up Background Locator 2

In this section, we'll walk through the setup process for the `background_locator_2` package, including platform-specific configurations for Android and iOS.

## Installation

Add the package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  background_locator_2: ^1.0.0
```

Run `flutter pub get` to install the package.

## Android Configuration

1. **Permissions**: Update your `AndroidManifest.xml` to include the necessary permissions:

```xml
<manifest xmlns:android="http://schemas.android.com/apk/res/android"
    package="com.example.app">
    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
    <uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION" />
    <uses-permission android:name="android.permission.FOREGROUND_SERVICE" />
    <uses-permission android:name="android.permission.ACCESS_BACKGROUND_LOCATION" />
    ...
</manifest>
```

2. **Service Declaration**: Add the service declaration inside the `<application>` tag:

```xml
<service
    android:name="com.example.app.LocationService"
    android:permission="android.permission.BIND_JOB_SERVICE"
    android:exported="true"/>
```

## iOS Configuration

1. **Permissions**: Update your `Info.plist` with the required location permissions:

```xml
<key>NSLocationAlwaysAndWhenInUseUsageDescription</key>
<string>Your location is used to provide better services.</string>
<key>NSLocationWhenInUseUsageDescription</key>
<string>Your location is used to provide better services.</string>
<key>UIBackgroundModes</key>
<array>
    <string>location</string>
</array>
```

2. **Background Modes**: Ensure that the "Background Modes" capability is enabled in Xcode, with "Location updates" checked.

## Using the Package

1. **Initialization**: Initialize the locator in your main application file:

```dart
import 'package:background_locator_2/background_locator_2.dart';

void main() {
  runApp(MyApp());
  RealFlutter.initialize();
}
```

2. **Start Location Service**: Start the location service with desired settings:

```dart
RealFlutter.startLocationService();
```

3. **Define Callbacks**: Implement callback functions to handle location updates:

```dart
void locationCallback(LocationDto locationDto) {
  // Handle location update
}

void notificationCallback() {
  // Handle notification
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:background_locator_2/background_locator_2.dart';
import 'package:background_locator_2/location_dto.dart';

void main() {
  runApp(MyApp());
  RealFlutter.initialize();
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Background Locator Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: LocationTrackingPage(),
    );
  }
}

class LocationTrackingPage extends StatefulWidget {
  @override
  _LocationTrackingPageState createState() => _LocationTrackingPageState();
}

class _LocationTrackingPageState extends State<LocationTrackingPage> {
  String _location = 'Unknown';

  @override
  void initState() {
    super.initState();
    RealFlutter.startLocationService();
    BackgroundLocator.registerLocationUpdate(locationCallback);
  }

  static void locationCallback(LocationDto locationDto) {
    // This callback is triggered whenever a new location is received
    print('New location: ${locationDto.latitude}, ${locationDto.longitude}');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Location Tracker'),
      ),
      body: Center(
        child: Text('Current Location: $_location'),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _stopLocationService,
        tooltip: 'Stop Tracking',
        child: Icon(Icons.stop),
      ),
    );
  }

  void _stopLocationService() {
    // Stops the location service
    BackgroundLocator.unRegisterLocationUpdate();
    setState(() {
      _location = 'Tracking Stopped';
    });
  }
}

// Application Flow:
// 1. The app initializes and starts the location service using RealFlutter.
// 2. The locationCallback function is registered to handle location updates.
// 3. When a new location is received, it is printed to the console.
// 4. The user interface displays the current location status.
// 5. A floating action button allows the user to stop the location tracking service.
// 6. When tracking is stopped, the UI updates to reflect this change.
```

<-- END_MAIN -->
```

This blog post provides a comprehensive guide to using the `background_locator_2` package in Flutter applications. It covers the package's features, setup process, and provides a complete example to demonstrate its capabilities. By following this guide, developers can effectively implement background location tracking in their Flutter apps.
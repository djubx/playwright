<-- START_DESCRIPTION -->

# Flutter Random Color Package
================================

The `flutter_randomcolor` package is a simple and easy-to-use library for generating random colors in Flutter applications. It provides a convenient way to add some visual interest to your app by randomly selecting colors for various UI elements.

## When to Use This Package
---------------------------

You can use this package in a variety of scenarios, such as:

* Generating random background colors for widgets or screens
* Creating random color schemes for charts or graphs
* Adding some visual interest to your app's UI elements, such as buttons or icons

## Features
------------

The `flutter_randomcolor` package provides the following features:

* Generates random colors in a variety of formats, including RGB, HSL, and HEX
* Allows you to specify a range of colors to generate from
* Provides a simple and easy-to-use API for generating random colors

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `flutter_randomcolor` package in your Flutter app, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_randomcolor: ^1.0.0
```
2. Run `flutter pub get` to install the package
3. Import the package in your Dart file:
```dart
import 'package:flutter_randomcolor/flutter_randomcolor.dart';
```

## Using the Package
---------------------

To generate a random color, simply call the `RandomColor` constructor:
```dart
Color randomColor = RandomColor();
```
You can also specify a range of colors to generate from:
```dart
Color randomColor = RandomColor(
  minRed: 100,
  maxRed: 200,
  minGreen: 50,
  maxGreen: 150,
  minBlue: 200,
  maxBlue: 250,
);
```
For platform-specific details, please note that this package uses the `dart:math` library to generate random numbers, which is compatible with both Android and iOS platforms.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_randomcolor/flutter_randomcolor.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Random Color Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  Color _randomColor;

  void _generateRandomColor() {
    setState(() {
      _randomColor = RandomColor();
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Random Color Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Random Color:',
              style: TextStyle(fontSize: 24),
            ),
            Container(
              width: 200,
              height: 200,
              color: _randomColor,
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _generateRandomColor,
              child: Text('Generate Random Color'),
            ),
          ],
        ),
      ),
    );
  }
}

// The app starts by running the main function, which calls runApp with an instance of MyApp.
// MyApp builds a MaterialApp with a title and theme, and sets the home property to an instance of MyHomePage.
// MyHomePage is a stateful widget that generates a random color when the user presses a button.
// The random color is stored in the _randomColor variable and used to set the color of a Container widget.
// When the user presses the button, the _generateRandomColor function is called, which sets the state of the widget to a new random color.
// The app then rebuilds the widget tree with the new random color.
```

<-- END_MAIN -->
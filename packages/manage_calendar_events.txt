<-- START_DESCRIPTION -->

Manage Calendar Events Flutter Package
=====================================

The `manage_calendar_events` Flutter package provides a simple and efficient way to manage calendar events on both Android and iOS platforms. This package allows developers to create, update, and delete calendar events, making it a useful tool for apps that require calendar integration.

When to Use This Package
------------------------

This package is ideal for apps that need to interact with the device's calendar, such as:

* Scheduling apps
* Event planning apps
* Social media apps
* Productivity apps

Features
--------

* Create, update, and delete calendar events
* Support for recurring events
* Ability to set reminders and notifications
* Compatible with both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
---------------

To use the `manage_calendar_events` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  manage_calendar_events: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:manage_calendar_events/manage_calendar_events.dart';
```
### Step 3: Request Permissions

Request the necessary permissions to access the device's calendar:
```dart
await ManageCalendarEvents.requestPermissions();
```
### Step 4: Create a Calendar Event

Create a new calendar event:
```dart
final event = ManageCalendarEvents.createEvent(
  title: 'My Event',
  startDate: DateTime.now(),
  endDate: DateTime.now().add(Duration(hours: 1)),
);
```
### Platform-Specific Details

#### Android

* Make sure to add the following permissions to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.READ_CALENDAR" />
<uses-permission android:name="android.permission.WRITE_CALENDAR" />
```
#### iOS

* Make sure to add the following lines to your `Info.plist` file:
```xml
<key>NSCalendarsUsageDescription</key>
<string>This app needs access to your calendar to schedule events</string>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:manage_calendar_events/manage_calendar_events.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Manage Calendar Events Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  void initState() {
    super.initState();
    // Request permissions to access the device's calendar
    ManageCalendarEvents.requestPermissions().then((_) {
      // Create a new calendar event
      final event = ManageCalendarEvents.createEvent(
        title: 'My Event',
        startDate: DateTime.now(),
        endDate: DateTime.now().add(Duration(hours: 1)),
      );
      // Print the event ID
      print('Event ID: ${event.id}');
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Manage Calendar Events Demo'),
      ),
      body: Center(
        child: Text('Calendar event created successfully!'),
      ),
    );
  }
}

// Application flow:
// 1. The app requests permissions to access the device's calendar.
// 2. Once the permissions are granted, the app creates a new calendar event.
// 3. The event ID is printed to the console.
// 4. The app displays a success message on the screen.

// Summary:
// This code demonstrates how to use the `manage_calendar_events` package to create a new calendar event.
// The app requests permissions to access the device's calendar, creates a new event, and prints the event ID to the console.
// Finally, the app displays a success message on the screen.
```

<-- END_MAIN -->
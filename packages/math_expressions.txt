```markdown
<-- START_DESCRIPTION -->

# Math Expressions Flutter Package: An Overview

The `math_expressions` Flutter package is a powerful tool designed to parse and evaluate mathematical expressions. It is particularly useful in applications that require dynamic calculation capabilities, such as scientific calculators, educational apps, or any software that needs to process user-defined mathematical formulas.

## When to Use

- **Scientific Calculators**: For apps that need to evaluate complex mathematical expressions.
- **Educational Apps**: To help students learn and test mathematical concepts.
- **Financial Applications**: For calculating interest rates, loan payments, or other financial metrics based on user input.

## Features

- **Expression Parsing**: Convert strings into mathematical expressions.
- **Custom Variables**: Define and use variables within expressions.
- **Function Support**: Includes a variety of built-in mathematical functions.
- **Custom Functions**: Ability to define and use custom functions.
- **Error Handling**: Provides mechanisms to handle parsing and evaluation errors gracefully.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the Math Expressions Package

In this tutorial, we will walk through the process of setting up the `math_expressions` package in a Flutter project and demonstrate how to use its features effectively.

## Setup Process

1. **Add Dependency**: First, add the `math_expressions` package to your `pubspec.yaml` file.

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     math_expressions: ^2.0.0
   ```

2. **Install Packages**: Run `flutter pub get` to install the new package.

3. **Import the Package**: In your Dart file, import the package to start using it.

   ```dart
   import 'package:math_expressions/math_expressions.dart';
   ```

## Platform-Specific Details

### Android

No additional configuration is required for Android. Ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21 to support all Flutter features.

### iOS

Ensure that your iOS deployment target is set to at least 9.0 in your `ios/Podfile`:

```ruby
platform :ios, '9.0'
```

## Using the Package

- **Parsing Expressions**: Use the `Parser` class to convert a string into an expression.
- **Evaluating Expressions**: Use the `ContextModel` to evaluate expressions with or without variables.
- **Handling Variables**: Define variables and assign values using the `Variable` class.

<-- END_TUTORIAL -->

<-- MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:math_expressions/math_expressions.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Math Expressions Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MathExpressionHome(),
    );
  }
}

class MathExpressionHome extends StatefulWidget {
  @override
  _MathExpressionHomeState createState() => _MathExpressionHomeState();
}

class _MathExpressionHomeState extends State<MathExpressionHome> {
  final TextEditingController _controller = TextEditingController();
  String _result = '';

  void _evaluateExpression() {
    // Create a parser object
    Parser parser = Parser();
    // Parse the expression from the input text
    Expression expression = parser.parse(_controller.text);

    // Create a context model to hold variable values
    ContextModel contextModel = ContextModel();

    // Evaluate the expression
    double eval = expression.evaluate(EvaluationType.REAL, contextModel);

    // Update the result state
    setState(() {
      _result = eval.toString();
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Math Expressions Demo'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: <Widget>[
            TextField(
              controller: _controller,
              decoration: InputDecoration(
                labelText: 'Enter Expression',
              ),
              keyboardType: TextInputType.number,
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _evaluateExpression,
              child: Text('Evaluate'),
            ),
            SizedBox(height: 20),
            Text(
              'Result: $_result',
              style: TextStyle(fontSize: 24),
            ),
          ],
        ),
      ),
    );
  }
}

// Application Flow:
// 1. The app starts with the `RealFlutter` widget, which sets up the MaterialApp.
// 2. The `MathExpressionHome` widget is the main screen, containing a text field and a button.
// 3. Users input a mathematical expression into the text field.
// 4. When the "Evaluate" button is pressed, `_evaluateExpression` is called.
// 5. The `Parser` object parses the input string into an `Expression`.
// 6. The `Expression` is evaluated using a `ContextModel`, which can hold variable values.
// 7. The result of the evaluation is displayed on the screen.

```

<-- END_MAIN -->
```
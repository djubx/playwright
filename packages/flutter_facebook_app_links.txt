<-- START_DESCRIPTION -->

# Flutter Facebook App Links Package
=====================================

The `flutter_facebook_app_links` package is a Flutter plugin that allows you to handle Facebook App Links in your Flutter application. App Links is a Facebook feature that enables users to open specific content within your app from Facebook.

## When to Use This Package
---------------------------

You should use this package if you want to:

* Handle Facebook App Links in your Flutter application
* Open specific content within your app from Facebook
* Improve user experience by allowing users to navigate directly to specific content within your app

## Features
------------

* Handle Facebook App Links on Android and iOS
* Support for custom App Link schemes
* Easy integration with Flutter

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Package
=============================================

## Step 1: Add the Package to Your pubspec.yaml File
------------------------------------------------

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_facebook_app_links: ^1.0.0
```
Then, run `flutter pub get` to get the package.

## Step 2: Configure the Package on Android
--------------------------------------------

In your `AndroidManifest.xml` file, add the following code:
```xml
<application>
  ...
  <activity
    android:name=".MainActivity"
    android:exported="true">
    <intent-filter>
      <action android:name="android.intent.action.VIEW" />
      <category android:name="android.intent.category.DEFAULT" />
      <category android:name="android.intent.category.BROWSABLE" />
      <data android:scheme="fb${your_app_id}" android:host="authorize" />
    </intent-filter>
  </activity>
  ...
</application>
```
Replace `${your_app_id}` with your Facebook app ID.

## Step 3: Configure the Package on iOS
------------------------------------------

In your `Info.plist` file, add the following code:
```xml
<key>CFBundleURLTypes</key>
<array>
  <dict>
    <key>CFBundleURLSchemes</key>
    <array>
      <string>fb${your_app_id}</string>
    </array>
    <key>CFBundleURLName</key>
    <string>${your_app_name}</string>
  </dict>
</array>
```
Replace `${your_app_id}` with your Facebook app ID and `${your_app_name}` with your app name.

## Step 4: Use the Package in Your Flutter App
----------------------------------------------

Import the package in your Dart file:
```dart
import 'package:flutter_facebook_app_links/flutter_facebook_app_links.dart';
```
Then, use the `FacebookAppLinks` class to handle App Links:
```dart
FacebookAppLinks _facebookAppLinks = FacebookAppLinks();

Future<void> _handleAppLink() async {
  final Uri? appLink = await _facebookAppLinks.getInitialAppLink();
  if (appLink != null) {
    // Handle the App Link
  }
}
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_facebook_app_links/flutter_facebook_app_links.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Facebook App Links Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  FacebookAppLinks _facebookAppLinks = FacebookAppLinks();

  Future<void> _handleAppLink() async {
    // Get the initial App Link
    final Uri? appLink = await _facebookAppLinks.getInitialAppLink();
    if (appLink != null) {
      // Handle the App Link
      print('App Link: $appLink');
      // Navigate to the specific content
      Navigator.push(
        context,
        MaterialPageRoute(builder: (context) => ContentPage(appLink)),
      );
    }
  }

  @override
  void initState() {
    super.initState();
    // Handle the App Link when the app starts
    _handleAppLink();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Facebook App Links Demo'),
      ),
      body: Center(
        child: Text('This is the home page'),
      ),
    );
  }
}

class ContentPage extends StatelessWidget {
  final Uri appLink;

  ContentPage(this.appLink);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Content Page'),
      ),
      body: Center(
        child: Text('This is the content page for $appLink'),
      ),
    );
  }
}
```

// This is the main entry point of the app.
// The app starts by running the `main` function, which creates a `MaterialApp` instance.
// The `MaterialApp` instance is the root of the app's widget tree.
// The app's home page is the `MyHomePage` widget.

// The `MyHomePage` widget is a stateful widget that handles the App Link.
// When the app starts, the `MyHomePage` widget checks for an App Link using the `FacebookAppLinks` class.
// If an App Link is found, the `MyHomePage` widget navigates to the `ContentPage` widget, passing the App Link as an argument.

// The `ContentPage` widget displays the content associated with the App Link.
// In this example, the `ContentPage` widget simply displays a text message indicating that it is the content page for the given App Link.

// The app's flow is as follows:
// 1. The app starts and runs the `main` function.
// 2. The `main` function creates a `MaterialApp` instance, which is the root of the app's widget tree.
// 3. The `MaterialApp` instance creates a `MyHomePage` widget, which is the app's home page.
// 4. The `MyHomePage` widget checks for an App Link using the `FacebookAppLinks` class.
// 5. If an App Link is found, the `MyHomePage` widget navigates to the `ContentPage` widget, passing the App Link as an argument.
// 6. The `ContentPage` widget displays the content associated with the App Link.

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Introduction to the lrc Flutter Package
=====================================

The `lrc` Flutter package is a lightweight and easy-to-use library for displaying lyrics in a Flutter application. It provides a simple and customizable way to show lyrics in a scrolling list, making it perfect for music streaming apps, karaoke apps, or any other app that requires displaying lyrics.

## Features

*   Displays lyrics in a scrolling list
*   Customizable font size, color, and style
*   Supports multiple languages
*   Easy to use and integrate into existing Flutter apps

## When to Use This Package

This package is ideal for any Flutter app that requires displaying lyrics, such as:

*   Music streaming apps
*   Karaoke apps
*   Lyric viewer apps
*   Music education apps

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the lrc Flutter Package
=============================================

## Step 1: Add the Package to Your Flutter Project

To use the `lrc` package, you need to add it to your Flutter project. Open your `pubspec.yaml` file and add the following line under the `dependencies` section:

```yml
dependencies:
  flutter:
    sdk: flutter
  lrc: ^1.0.0
```

Then, run `flutter pub get` in your terminal to get the package.

## Step 2: Import the Package

In your Dart file, import the `lrc` package:

```dart
import 'package:lrc/lrc.dart';
```

## Step 3: Create a Lyric Object

Create a `Lyric` object with the lyrics you want to display:

```dart
Lyric lyric = Lyric(
  text: 'Your lyrics here',
  timestamp: Duration(seconds: 0),
);
```

## Step 4: Create a LyricList

Create a `LyricList` widget and pass the `Lyric` object to it:

```dart
LyricList(
  lyrics: [lyric],
  fontSize: 20,
  fontColor: Colors.black,
)
```

## Platform-Specific Details

The `lrc` package works on both Android and iOS platforms. However, you may need to adjust the font size and style to fit your app's design.

## Required Configurations or Optimizations

You can customize the `LyricList` widget by passing different parameters, such as `fontSize`, `fontColor`, and `fontStyle`. You can also use the `Lyric` object to display multiple lines of lyrics.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:lrc/lrc.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'LRC Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  List<Lyric> _lyrics = [
    Lyric(
      text: 'Line 1',
      timestamp: Duration(seconds: 0),
    ),
    Lyric(
      text: 'Line 2',
      timestamp: Duration(seconds: 2),
    ),
    Lyric(
      text: 'Line 3',
      timestamp: Duration(seconds: 4),
    ),
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('LRC Demo'),
      ),
      body: Center(
        child: LyricList(
          lyrics: _lyrics,
          fontSize: 24,
          fontColor: Colors.black,
        ),
      ),
    );
  }
}

// The app starts by running the main function, which creates a new instance of MyApp.
// MyApp is a stateless widget that returns a MaterialApp with a title and a theme.
// The home property of the MaterialApp is set to MyHomePage, which is a stateful widget.
// MyHomePage creates a list of Lyric objects and uses the LyricList widget to display them.
// The LyricList widget is customized with a font size and color.
// The app displays a scrolling list of lyrics with the specified font size and color.
```

<-- END_MAIN -->
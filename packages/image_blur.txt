<-- START_DESCRIPTION -->
# Image Blur Flutter Package
================================

The `image_blur` Flutter package is a powerful tool for blurring images in Flutter applications. It provides a simple and efficient way to blur images, making it ideal for use cases such as:

* Blurring backgrounds to focus attention on foreground elements
* Creating blurred thumbnails for images
* Adding a blur effect to images to enhance visual appeal

The package offers the following features:

* Support for blurring images using various algorithms (e.g., Gaussian blur, box blur)
* Adjustable blur radius and sigma values for customizable blur effects
* Support for blurring images in various formats (e.g., JPEG, PNG, WebP)
* Efficient and fast blurring, even for large images

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->
# Tutorial: Using the Image Blur Flutter Package
=============================================

## Step 1: Add the Package to Your Project

Add the `image_blur` package to your project by adding the following line to your `pubspec.yaml` file:
```yml
dependencies:
  image_blur: ^1.0.0
```
Then, run `flutter pub get` to install the package.

## Step 2: Import the Package

Import the `image_blur` package in your Dart file:
```dart
import 'package:image_blur/image_blur.dart';
```
## Step 3: Load the Image

Load the image you want to blur using the `Image.asset` or `Image.network` constructor:
```dart
Image image = Image.asset('assets/image.jpg');
```
## Step 4: Blur the Image

Blur the image using the `ImageBlur` widget:
```dart
ImageBlur(
  image: image,
  blurRadius: 10,
  sigmaX: 5,
  sigmaY: 5,
)
```
## Platform-Specific Details

* Android: The `image_blur` package uses the Android `RenderScript` API to blur images. This API is available on Android 4.4 (API level 19) and later.
* iOS: The `image_blur` package uses the iOS `Core Image` framework to blur images. This framework is available on iOS 6 and later.

## Required Configurations and Optimizations

* To optimize performance, it is recommended to use a small blur radius and sigma values.
* To improve image quality, it is recommended to use a high-quality image and a large blur radius and sigma values.

<-- END_TUTORIAL -->

<-- START_MAIN -->
```dart
import 'package:flutter/material.dart';
import 'package:image_blur/image_blur.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Image Blur Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  Image _image;

  @override
  void initState() {
    super.initState();
    _image = Image.asset('assets/image.jpg');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Image Blur Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            // Original image
            _image,

            // Blurred image
            ImageBlur(
              image: _image,
              blurRadius: 10,
              sigmaX: 5,
              sigmaY: 5,
            ),
          ],
        ),
      ),
    );
  }
}
```
// The application flow is as follows:
// 1. The user runs the app and the `MyApp` widget is created.
// 2. The `MyApp` widget builds the `MaterialApp` widget with the `MyHomePage` widget as the home page.
// 3. The `MyHomePage` widget is created and the `initState` method is called.
// 4. In the `initState` method, the `_image` variable is initialized with the original image.
// 5. The `build` method is called and the `Scaffold` widget is created with the `AppBar` and the `Center` widget.
// 6. The `Center` widget contains the original image and the blurred image.
// 7. The blurred image is created using the `ImageBlur` widget with the original image, blur radius, and sigma values.
// 8. The user can view the original image and the blurred image.

<-- END_MAIN -->
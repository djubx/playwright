<-- START_DESCRIPTION -->

# Flutter MMCalendar Package
================================

The `flutter_mmcalendar` package is a powerful and customizable calendar library for Flutter applications. It provides a simple and intuitive way to display a calendar in your app, allowing users to select dates and navigate through months and years.

## When to Use This Package
---------------------------

You can use this package in a variety of scenarios, such as:

* Scheduling appointments or events
* Displaying a calendar of upcoming events or holidays
* Allowing users to select a date range for a specific task or activity
* Creating a calendar-based interface for a specific industry or use case (e.g. a school calendar or a conference schedule)

## Features
------------

The `flutter_mmcalendar` package includes the following features:

* Customizable calendar layout and design
* Support for multiple calendar systems (Gregorian, Julian, etc.)
* Ability to select single dates or date ranges
* Navigation through months and years
* Optional display of week numbers and days of the week
* Support for internationalization and localization

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `flutter_mmcalendar` package in your Flutter app, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_mmcalendar: ^1.0.0
```
2. Run `flutter pub get` to install the package.
3. Import the package in your Dart file:
```dart
import 'package:flutter_mmcalendar/flutter_mmcalendar.dart';
```
4. Create a `RealFlutter` widget and add a `MMCalendar` widget as a child:
```dart
class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('MMCalendar Demo'),
      ),
      body: Center(
        child: MMCalendar(),
      ),
    );
  }
}
```
## Platform-Specific Details
---------------------------

### Android

* Make sure to add the `android.permission.INTERNET` permission to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.INTERNET" />
```
* If you want to use a custom font for the calendar, add the font file to your `assets` folder and specify the font family in your `pubspec.yaml` file:
```yml
flutter:
  assets:
    - assets/fonts/your_font.ttf
```
### iOS

* Make sure to add the `NSCalendarsUsageDescription` key to your `Info.plist` file:
```xml
<key>NSCalendarsUsageDescription</key>
<string>This app needs access to your calendar to display events.</string>
```
* If you want to use a custom font for the calendar, add the font file to your `Resources` folder and specify the font family in your `pubspec.yaml` file:
```yml
flutter:
  assets:
    - Resources/fonts/your_font.ttf
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_mmcalendar/flutter_mmcalendar.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'MMCalendar Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  DateTime _selectedDate = DateTime.now();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('MMCalendar Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            MMCalendar(
              // Set the initial date to the current date
              initialDate: _selectedDate,
              // Set the minimum and maximum dates
              minDate: DateTime(2020),
              maxDate: DateTime(2025),
              // Set the calendar layout to month view
              calendarLayout: CalendarLayout.month,
              // Set the selected date callback
              onDateSelected: (date) {
                setState(() {
                  _selectedDate = date;
                });
              },
            ),
            SizedBox(height: 20),
            Text(
              'Selected Date: ${_selectedDate.toString()}',
              style: TextStyle(fontSize: 18),
            ),
          ],
        ),
      ),
    );
  }
}

// The app starts by running the main function, which creates a MaterialApp with a RealFlutter widget as the home page.
// The RealFlutter widget is a stateful widget that displays a MMCalendar widget and a text widget to display the selected date.
// The MMCalendar widget is initialized with the current date and allows the user to select a date between 2020 and 2025.
// When a date is selected, the onDateSelected callback is called, which updates the _selectedDate variable and rebuilds the widget tree.
// The text widget displays the selected date in the format 'Selected Date: yyyy-MM-dd'.
```

<-- END_MAIN -->
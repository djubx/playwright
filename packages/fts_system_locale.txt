```markdown
<!-- START_DESCRIPTION -->
# Overview of the fts_system_locale Flutter Package

The `fts_system_locale` package is a Flutter plugin that provides developers with a straightforward way to access the system locale settings of the device. This package is particularly useful for applications that need to adapt their content based on the user's language and regional settings. 

## When to Use This Package
- **Localization**: When building applications that require localization support, knowing the system locale is essential for displaying the correct language and formatting.
- **User Preferences**: If your app needs to adjust its content based on user preferences, such as date formats or currency symbols, this package can help retrieve the necessary locale information.

## Key Features
- **Easy Access to Locale**: Retrieve the current system locale with minimal setup.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS platforms.
- **Lightweight**: The package is designed to be lightweight, ensuring it does not bloat your application.

Overall, `fts_system_locale` is a valuable tool for Flutter developers looking to enhance their applications' internationalization capabilities.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using fts_system_locale

## Installation
To get started with the `fts_system_locale` package, you need to add it to your `pubspec.yaml` file. Open your `pubspec.yaml` and add the following line under dependencies:

```yaml
dependencies:
  fts_system_locale: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command in your terminal to install the package:

```bash
flutter pub get
```

## Platform-Specific Configuration

### Android
For Android, no additional configuration is required. The package will work out of the box as long as you have the necessary permissions set in your `AndroidManifest.xml`.

### iOS
For iOS, ensure that your app's `Info.plist` file includes the following key to support localization:

```xml
<key>CFBundleLocalizations</key>
<array>
    <string>en</string>
    <string>fr</string>
    <string>es</string>
    <!-- Add other languages as needed -->
</array>
```

## Using the Package
Once the package is installed, you can easily access the system locale in your Flutter application. Hereâ€™s a simple example of how to use it:

```dart
import 'package:flutter/material.dart';
import 'package:fts_system_locale/fts_system_locale.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: LocaleDisplay(),
    );
  }
}

class LocaleDisplay extends StatefulWidget {
  @override
  _LocaleDisplayState createState() => _LocaleDisplayState();
}

class _LocaleDisplayState extends State<LocaleDisplay> {
  String _locale = 'Unknown';

  @override
  void initState() {
    super.initState();
    _getSystemLocale();
  }

  Future<void> _getSystemLocale() async {
    String locale = await FtsSystemLocale.getSystemLocale();
    setState(() {
      _locale = locale;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('System Locale Example'),
      ),
      body: Center(
        child: Text('Current Locale: $_locale'),
      ),
    );
  }
}
```

In this example, we create a simple Flutter application that displays the current system locale on the screen. The `LocaleDisplay` widget retrieves the locale in its `initState` method and updates the UI accordingly.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of fts_system_locale

```dart
import 'package:flutter/material.dart';
import 'package:fts_system_locale/fts_system_locale.dart';

void main() {
  runApp(MyApp());
}

// MyApp is the root widget of the application
class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: LocaleDisplay(), // Set LocaleDisplay as the home widget
    );
  }
}

// LocaleDisplay is a StatefulWidget that displays the system locale
class LocaleDisplay extends StatefulWidget {
  @override
  _LocaleDisplayState createState() => _LocaleDisplayState();
}

// _LocaleDisplayState manages the state of LocaleDisplay
class _LocaleDisplayState extends State<LocaleDisplay> {
  String _locale = 'Unknown'; // Initialize locale variable

  @override
  void initState() {
    super.initState();
    _getSystemLocale(); // Call method to get system locale
  }

  // Asynchronous method to fetch the system locale
  Future<void> _getSystemLocale() async {
    String locale = await FtsSystemLocale.getSystemLocale(); // Fetch locale
    setState(() {
      _locale = locale; // Update state with fetched locale
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('System Locale Example'), // App bar title
      ),
      body: Center(
        child: Text('Current Locale: $_locale'), // Display current locale
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function runs the MyApp widget.
// 2. MyApp builds the MaterialApp and sets LocaleDisplay as the home widget.
// 3. LocaleDisplay initializes its state and calls _getSystemLocale() in initState.
// 4. _getSystemLocale() fetches the system locale asynchronously and updates the state.
// 5. The UI rebuilds, displaying the current locale in the center of the screen.
```
<!-- END_MAIN -->
```

### Summary
In this blog post, we explored the `fts_system_locale` Flutter package, detailing its features, installation process, and usage. We provided a complete example that demonstrates how to retrieve and display the system locale in a Flutter application. This package is particularly useful for developers looking to implement localization features in their apps, ensuring a better user experience across different languages and regions.
<-- START_DESCRIPTION -->

# Flutter NSD Package: A Comprehensive Overview
=====================================================

The `flutter_nsd` package is a Flutter plugin that allows you to discover and connect to network services using the Network Service Discovery (NSD) protocol. This package is useful when you want to enable device-to-device communication over a local network.

### Features

*   Discover network services using NSD
*   Register your own network service using NSD
*   Connect to discovered network services
*   Supports both Android and iOS platforms

### When to Use

*   When you want to enable device-to-device communication over a local network
*   When you want to discover and connect to network services using NSD
*   When you want to register your own network service using NSD

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the Flutter NSD Package
=============================================

### Step 1: Add the Package to Your Flutter Project

Add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  flutter_nsd: ^0.1.0
```

Then, run `flutter pub get` to get the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:flutter_nsd/flutter_nsd.dart';
```

### Step 3: Discover Network Services

Use the `startDiscovery` method to discover network services:

```dart
Future<void> _discoverServices() async {
  try {
    await FlutterNsd.startDiscovery('_http._tcp');
  } on PlatformException catch (e) {
    print(e);
  }
}
```

### Step 4: Register Your Own Network Service

Use the `registerService` method to register your own network service:

```dart
Future<void> _registerService() async {
  try {
    await FlutterNsd.registerService('_http._tcp', 8080);
  } on PlatformException catch (e) {
    print(e);
  }
}
```

### Step 5: Connect to Discovered Network Services

Use the `connectToService` method to connect to discovered network services:

```dart
Future<void> _connectToService(String serviceName) async {
  try {
    await FlutterNsd.connectToService(serviceName);
  } on PlatformException catch (e) {
    print(e);
  }
}
```

### Platform-Specific Details

*   Android: Make sure to add the `NSD` permission to your `AndroidManifest.xml` file:

    ```xml
<uses-permission android:name="android.permission.INTERNET" />
```

*   iOS: Make sure to add the `NSBonjourServices` key to your `Info.plist` file:

    ```xml
<key>NSBonjourServices</key>
<array>
    <string>_http._tcp</string>
</array>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_nsd/flutter_nsd.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter NSD Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _serviceNameController = TextEditingController();

  Future<void> _discoverServices() async {
    // Start discovering network services
    try {
      await FlutterNsd.startDiscovery('_http._tcp');
    } on PlatformException catch (e) {
      print(e);
    }
  }

  Future<void> _registerService() async {
    // Register your own network service
    try {
      await FlutterNsd.registerService('_http._tcp', 8080);
    } on PlatformException catch (e) {
      print(e);
    }
  }

  Future<void> _connectToService() async {
    // Connect to discovered network services
    try {
      await FlutterNsd.connectToService(_serviceNameController.text);
    } on PlatformException catch (e) {
      print(e);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter NSD Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            TextField(
              controller: _serviceNameController,
              decoration: InputDecoration(
                labelText: 'Service Name',
              ),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _discoverServices,
              child: Text('Discover Services'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _registerService,
              child: Text('Register Service'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _connectToService,
              child: Text('Connect to Service'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and is presented with a text field to enter the service name.
// 2. The user clicks the "Discover Services" button to start discovering network services.
// 3. The app uses the FlutterNsd.startDiscovery method to start discovering network services.
// 4. The user clicks the "Register Service" button to register their own network service.
// 5. The app uses the FlutterNsd.registerService method to register the network service.
// 6. The user clicks the "Connect to Service" button to connect to the discovered network service.
// 7. The app uses the FlutterNsd.connectToService method to connect to the network service.

```

<-- END_MAIN -->
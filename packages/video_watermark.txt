<-- START_DESCRIPTION -->

# Video Watermark Flutter Package
=====================================

The `video_watermark` Flutter package allows you to add watermarks to videos. It provides a simple and efficient way to overlay images or text on top of videos.

### When to Use This Package

This package is useful when you want to:

* Add a logo or branding to a video
* Display text or images on top of a video
* Create a video with a watermark that cannot be removed

### Features

* Supports both image and text watermarks
* Allows for customization of watermark position, size, and opacity
* Works on both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Video Watermark Package
===========================================================

### Step 1: Add the Package to Your Pubspec.yaml File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  video_watermark: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:video_watermark/video_watermark.dart';
```
### Step 3: Create a Video Watermark Object

Create a `VideoWatermark` object and pass in the video file path and watermark image or text:
```dart
VideoWatermark _watermark = VideoWatermark(
  videoFile: 'path/to/video.mp4',
  watermark: ImageWatermark('path/to/watermark.png'),
);
```
### Step 4: Configure the Watermark (Optional)

You can customize the watermark position, size, and opacity:
```dart
_watermark.setPosition(Alignment.bottomRight);
_watermark.setSize(100);
_watermark.setOpacity(0.5);
```
### Step 5: Apply the Watermark

Apply the watermark to the video:
```dart
_watermark.apply();
```
### Platform-Specific Details

* On Android, the package uses the `MediaCodec` API to apply the watermark.
* On iOS, the package uses the `AVFoundation` framework to apply the watermark.

### Required Configurations or Optimizations

* Make sure to add the necessary permissions to your AndroidManifest.xml file:
```xml
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
```
* On iOS, make sure to add the necessary frameworks to your Podfile:
```ruby
pod 'AVFoundation'
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:video_watermark/video_watermark.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Video Watermark Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  VideoWatermark _watermark;

  @override
  void initState() {
    super.initState();
    _watermark = VideoWatermark(
      videoFile: 'path/to/video.mp4',
      watermark: ImageWatermark('path/to/watermark.png'),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Video Watermark Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text('Video Watermark Demo'),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                _watermark.apply();
              },
              child: Text('Apply Watermark'),
            ),
          ],
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user opens the app and is presented with a button to apply the watermark.
// 2. When the button is pressed, the _watermark.apply() method is called.
// 3. The _watermark.apply() method uses the video_file and watermark image to apply the watermark to the video.
// 4. The watermarked video is then saved to the device's storage.
// 5. The user can then view the watermarked video by opening the video file on their device.

// Final summary:
// The video_watermark package provides a simple and efficient way to add watermarks to videos.
// The package can be used to add image or text watermarks to videos.
// The package works on both Android and iOS platforms.
// The app flow is straightforward, with the user pressing a button to apply the watermark, and the watermarked video being saved to the device's storage.
```

<-- END_MAIN -->
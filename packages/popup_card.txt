<-- START_DESCRIPTION -->

# Popup Card Flutter Package
The `popup_card` Flutter package is a customizable widget that allows you to create popup cards with various features. It's perfect for displaying additional information, warnings, or options to users without navigating away from the current screen.

## When to Use
Use the `popup_card` package when you need to:

* Display a popup with custom content
* Show a warning or error message
* Provide additional options or actions
* Create a tooltip or hint

## Features

* Customizable content and layout
* Support for various popup positions (top, bottom, left, right)
* Animations and transitions
* Gesture support (tap, swipe, etc.)

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
To use the `popup_card` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  flutter:
    sdk: flutter
  popup_card: ^1.0.0
```
2. Run `flutter pub get` to install the package.
3. Import the package in your Dart file:
```dart
import 'package:popup_card/popup_card.dart';
```
4. Create a `PopupCard` widget and customize its properties:
```dart
PopupCard(
  child: Text('Hello, World!'),
  position: PopupPosition.bottom,
  animation: PopupAnimation.fade,
)
```
5. Show the popup using the `show` method:
```dart
PopupCard(
  // ...
).show(context);
```
### Platform-Specific Details

* Android: No additional configuration required.
* iOS: Add the following line to your `Info.plist` file:
```xml
<key>UIViewControllerBasedStatusBarAppearance</key>
<false/>
```
### Optimizations

* Use a `Stack` widget to position the popup correctly.
* Set `clipBehavior` to `Clip.antiAlias` for smooth edges.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:popup_card/popup_card.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Popup Card Example'),
        ),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              // Create a popup card with custom content
              PopupCard(
                child: Container(
                  width: 200,
                  height: 100,
                  color: Colors.white,
                  child: Text('Hello, World!'),
                ),
                position: PopupPosition.bottom,
                animation: PopupAnimation.fade,
              ).show(context);
            },
            child: Text('Show Popup'),
          ),
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user presses the "Show Popup" button.
// 2. The `PopupCard` widget is created with custom content.
// 3. The `show` method is called to display the popup.
// 4. The popup is positioned at the bottom of the screen with a fade animation.
// 5. The user can interact with the popup (e.g., tap, swipe).
// 6. The popup is dismissed when the user taps outside or presses the back button.

// Final summary:
// The code creates a simple Flutter app with a button that shows a popup card when pressed.
// The popup card is customized with a white background, text content, and a fade animation.
// The app demonstrates the basic usage of the `popup_card` package.
```

<-- END_MAIN -->
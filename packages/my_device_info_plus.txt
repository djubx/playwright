<-- START_DESCRIPTION -->

# my_device_info_plus Flutter Package
=====================================

The `my_device_info_plus` Flutter package provides an easy-to-use interface for retrieving device information, such as device model, operating system version, and screen resolution. This package is a fork of the original `device_info` package, with additional features and improvements.

### When to Use This Package

This package is useful when you need to:

* Retrieve device information for analytics or logging purposes
* Display device information to the user
* Use device-specific features or optimizations

### Features

* Retrieves device model, operating system version, and screen resolution
* Supports both Android and iOS platforms
* Provides a simple and easy-to-use API

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the Package
=====================================

### Step 1: Add the Package to Your Project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  my_device_info_plus: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:my_device_info_plus/my_device_info_plus.dart';
```
### Step 3: Use the Package

Use the `MyDeviceInfoPlus` class to retrieve device information:
```dart
MyDeviceInfoPlus deviceInfo = MyDeviceInfoPlus();

String deviceModel = deviceInfo.deviceModel;
String osVersion = deviceInfo.osVersion;
String screenResolution = deviceInfo.screenResolution;
```
### Platform-Specific Details

* Android: This package uses the `android.os.Build` class to retrieve device information.
* iOS: This package uses the `UIDevice` class to retrieve device information.

### Required Configurations or Optimizations

* Android: You need to add the following permission to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.READ_PHONE_STATE" />
```
* iOS: You need to add the following key to your `Info.plist` file:
```xml
<key>NSDeviceInformation</key>
<string>YES</string>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:my_device_info_plus/my_device_info_plus.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'My Device Info Plus Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  MyDeviceInfoPlus _deviceInfo = MyDeviceInfoPlus();

  @override
  void initState() {
    super.initState();
    _initDeviceInfo();
  }

  Future<void> _initDeviceInfo() async {
    // Initialize the device info
    await _deviceInfo.init();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('My Device Info Plus Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Device Model: ${_deviceInfo.deviceModel}',
              style: TextStyle(fontSize: 20),
            ),
            Text(
              'OS Version: ${_deviceInfo.osVersion}',
              style: TextStyle(fontSize: 20),
            ),
            Text(
              'Screen Resolution: ${_deviceInfo.screenResolution}',
              style: TextStyle(fontSize: 20),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app.
// 2. The app initializes the device info using the `MyDeviceInfoPlus` class.
// 3. The app displays the device model, OS version, and screen resolution on the screen.
// 4. The user can view the device information on the screen.

// The code flow is as follows:
// 1. The `main` function runs the app.
// 2. The `MyApp` widget is created and returned.
// 3. The `MyHomePage` widget is created and returned.
// 4. The `_MyHomePageState` class is created and returned.
// 5. The `initState` method is called to initialize the device info.
// 6. The `build` method is called to display the device information on the screen.

// In summary, the code flows from the `main` function to the `MyApp` widget to the `MyHomePage` widget to the `_MyHomePageState` class, and finally to the `build` method, which displays the device information on the screen.
```

<-- END_MAIN -->
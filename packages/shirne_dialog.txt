<-- START_DESCRIPTION -->

# Shirne Dialog Flutter Package
================================

The `shirne_dialog` Flutter package provides a simple and customizable way to display dialogs in your Flutter application. It offers a range of features, including support for various dialog types, animations, and platform-specific configurations.

## When to Use
--------------

You can use the `shirne_dialog` package in a variety of scenarios, such as:

* Displaying alerts or confirmations to the user
* Prompting the user for input or feedback
* Showing loading or progress indicators
* Creating custom dialog designs

## Features
------------

* Support for various dialog types, including alert, confirm, and prompt
* Customizable dialog designs and animations
* Platform-specific configurations for Android and iOS
* Easy-to-use API for displaying and managing dialogs

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the Shirne Dialog Package
---------------------------------------------

## Step 1: Add the Package to Your Project
-----------------------------------------

Add the following dependency to your `pubspec.yaml` file:
```yml
dependencies:
  shirne_dialog: ^1.0.0
```
Then, run `flutter pub get` to install the package.

## Step 2: Import the Package
---------------------------

Import the package in your Dart file:
```dart
import 'package:shirne_dialog/shirne_dialog.dart';
```
## Step 3: Display a Dialog
-------------------------

Use the `showDialog` function to display a dialog:
```dart
showDialog(
  context: context,
  builder: (BuildContext context) {
    return AlertDialog(
      title: Text('Dialog Title'),
      content: Text('Dialog content'),
      actions: [
        TextButton(
          child: Text('OK'),
          onPressed: () {
            Navigator.of(context).pop();
          },
        ),
      ],
    );
  },
);
```
## Platform-Specific Configurations
---------------------------------

### Android

To customize the dialog design on Android, you can use the `android` property:
```dart
showDialog(
  context: context,
  builder: (BuildContext context) {
    return AlertDialog(
      title: Text('Dialog Title'),
      content: Text('Dialog content'),
      actions: [
        TextButton(
          child: Text('OK'),
          onPressed: () {
            Navigator.of(context).pop();
          },
        ),
      ],
      android: AndroidDialogProperties(
        backgroundColor: Colors.blue,
        textColor: Colors.white,
      ),
    );
  },
);
```
### iOS

To customize the dialog design on iOS, you can use the `ios` property:
```dart
showDialog(
  context: context,
  builder: (BuildContext context) {
    return AlertDialog(
      title: Text('Dialog Title'),
      content: Text('Dialog content'),
      actions: [
        TextButton(
          child: Text('OK'),
          onPressed: () {
            Navigator.of(context).pop();
          },
        ),
      ],
      ios: IOSDialogProperties(
        backgroundColor: Colors.blue,
        textColor: Colors.white,
      ),
    );
  },
);
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:shirne_dialog/shirne_dialog.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Shirne Dialog Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Shirne Dialog Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            ElevatedButton(
              onPressed: () {
                // Show a simple dialog
                showDialog(
                  context: context,
                  builder: (BuildContext context) {
                    return AlertDialog(
                      title: Text('Dialog Title'),
                      content: Text('Dialog content'),
                      actions: [
                        TextButton(
                          child: Text('OK'),
                          onPressed: () {
                            Navigator.of(context).pop();
                          },
                        ),
                      ],
                    );
                  },
                );
              },
              child: Text('Show Simple Dialog'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                // Show a dialog with custom design
                showDialog(
                  context: context,
                  builder: (BuildContext context) {
                    return AlertDialog(
                      title: Text('Custom Dialog Title'),
                      content: Text('Custom dialog content'),
                      actions: [
                        TextButton(
                          child: Text('OK'),
                          onPressed: () {
                            Navigator.of(context).pop();
                          },
                        ),
                      ],
                      android: AndroidDialogProperties(
                        backgroundColor: Colors.blue,
                        textColor: Colors.white,
                      ),
                      ios: IOSDialogProperties(
                        backgroundColor: Colors.blue,
                        textColor: Colors.white,
                      ),
                    );
                  },
                );
              },
              child: Text('Show Custom Dialog'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user clicks on the "Show Simple Dialog" button.
// 2. The showDialog function is called with a simple AlertDialog.
// 3. The dialog is displayed on the screen.
// 4. The user clicks on the "OK" button.
// 5. The Navigator.of(context).pop() function is called to dismiss the dialog.
// 6. The user clicks on the "Show Custom Dialog" button.
// 7. The showDialog function is called with a custom AlertDialog.
// 8. The dialog is displayed on the screen with a custom design.
// 9. The user clicks on the "OK" button.
// 10. The Navigator.of(context).pop() function is called to dismiss the dialog.

```

<-- END_MAIN -->
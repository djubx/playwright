```markdown
<!-- START_DESCRIPTION -->
# Equatable Lint: Simplifying Equality in Dart

The `equatable_lint` package is a powerful tool designed to enhance the development experience in Flutter by providing linting rules for the `equatable` package. This package is particularly useful for developers who want to ensure that their classes are correctly implementing equality checks, which is crucial for state management and data comparison in Flutter applications.

## When to Use `equatable_lint`

You should consider using `equatable_lint` when:
- You are working with classes that require equality checks, such as models or state classes.
- You want to enforce best practices in your codebase regarding equality.
- You are using the `equatable` package and want to ensure that your implementation adheres to the recommended patterns.

## Key Features
- **Linting Rules**: Provides specific linting rules to ensure that classes using `equatable` are implemented correctly.
- **Error Detection**: Helps catch common mistakes in equality implementation, reducing bugs related to state management.
- **Integration**: Easily integrates with existing Flutter projects that utilize the `equatable` package.

By incorporating `equatable_lint` into your Flutter project, you can maintain cleaner, more reliable code that adheres to best practices for equality checks.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Setting Up and Using `equatable_lint`

## Installation

To get started with `equatable_lint`, you need to add it to your `dev_dependencies` in the `pubspec.yaml` file:

```yaml
dev_dependencies:
  equatable_lint: ^latest_version
```

Make sure to replace `^latest_version` with the latest version available on [pub.dev](https://pub.dev/packages/equatable_lint).

## Configuration

After adding the package, you need to configure it in your `analysis_options.yaml` file. Hereâ€™s how to do it:

```yaml
include: package:equatable_lint/equatable_lint.yaml
```

This line includes the linting rules provided by the `equatable_lint` package into your project.

## Platform-Specific Details

### Android
No specific configurations are required for Android. Just ensure that your Flutter environment is set up correctly.

### iOS
Similarly, there are no additional configurations needed for iOS. The package works seamlessly across both platforms.

## Usage

Once you have set up the package, you can start using it in your Dart files. The linter will automatically check your code for compliance with the `equatable` best practices.

For example, if you have a class that extends `Equatable`, the linter will ensure that you are correctly overriding the `props` getter.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using `equatable_lint`

```dart
import 'package:equatable/equatable.dart';
import 'package:flutter/material.dart';

// Define a class that extends Equatable
class RealFlutter extends Equatable {
  final String name;
  final int age;

  // Constructor
  RealFlutter({required this.name, required this.age});

  // Override props to include fields for equality comparison
  @override
  List<Object?> get props => [name, age];

  // A method to display information
  String getInfo() {
    return 'Name: $name, Age: $age';
  }
}

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Equatable Lint Example',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Equatable Lint Example'),
        ),
        body: Center(
          child: RealFlutterWidget(),
        ),
      ),
    );
  }
}

class RealFlutterWidget extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Create two instances of RealFlutter
    final person1 = RealFlutter(name: 'Alice', age: 30);
    final person2 = RealFlutter(name: 'Alice', age: 30);
    final person3 = RealFlutter(name: 'Bob', age: 25);

    // Check equality
    final isEqual1 = person1 == person2; // true
    final isEqual2 = person1 == person3; // false

    return Column(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        Text(person1.getInfo()),
        Text('Is person1 equal to person2? $isEqual1'),
        Text('Is person1 equal to person3? $isEqual2'),
      ],
    );
  }
}

// Application Flow Explanation:
// 1. The main function starts the Flutter application by calling runApp() with MyApp.
// 2. MyApp builds a MaterialApp with a title and a Scaffold containing an AppBar and a centered RealFlutterWidget.
// 3. RealFlutterWidget creates three instances of the RealFlutter class.
// 4. It checks the equality of the first two instances (person1 and person2) and the first and third instances (person1 and person3).
// 5. The results of the equality checks are displayed in the UI, demonstrating how the equatable package simplifies equality checks.
```

<!-- END_MAIN -->
```

### Summary of the Code Flow
The provided code demonstrates how to use the `equatable_lint` package effectively. It starts with the `main` function, which initializes the Flutter app. The `MyApp` class sets up the main structure of the app, including an AppBar and a centered widget. The `RealFlutterWidget` class creates instances of the `RealFlutter` class, checks their equality, and displays the results in the UI. This example illustrates the importance of implementing equality checks correctly and how `equatable_lint` can help enforce best practices in your Flutter projects.
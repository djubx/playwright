<-- START_DESCRIPTION -->

# ivs_broadcaster Flutter Package
=====================================

The `ivs_broadcaster` Flutter package is a powerful tool for broadcasting live video streams from your Flutter application. It provides a simple and efficient way to share live video content with a large audience, making it ideal for applications such as live events, conferences, and social media platforms.

### Features

*   Live video broadcasting
*   Real-time video encoding and streaming
*   Support for multiple platforms, including Android and iOS
*   Customizable video quality and bitrate
*   Integration with popular streaming services, such as Amazon IVS

### When to Use

The `ivs_broadcaster` package is perfect for applications that require live video broadcasting, such as:

*   Live events and conferences
*   Social media platforms
*   Online education and training
*   Entertainment and gaming applications

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the ivs_broadcaster Package
==========================================

To use the `ivs_broadcaster` package in your Flutter application, follow these steps:

### Step 1: Add the Package to Your pubspec.yaml File

```yml
dependencies:
  ivs_broadcaster: ^1.0.0
```

### Step 2: Import the Package in Your Dart File

```dart
import 'package:ivs_broadcaster/ivs_broadcaster.dart';
```

### Step 3: Initialize the IVSBroadcaster

```dart
IVSBroadcaster _broadcaster = IVSBroadcaster(
  ingestServer: 'https://your-ingest-server.com',
  streamName: 'your-stream-name',
  streamKey: 'your-stream-key',
);
```

### Step 4: Start the Broadcast

```dart
_broadcaster.startBroadcast();
```

### Platform-Specific Details

*   **Android:** Make sure to add the necessary permissions to your `AndroidManifest.xml` file:

    ```xml
<uses-permission android:name="android.permission.CAMERA" />
<uses-permission android:name="android.permission.RECORD_AUDIO" />
<uses-permission android:name="android.permission.INTERNET" />
```

*   **iOS:** Make sure to add the necessary permissions to your `Info.plist` file:

    ```xml
<key>NSCameraUsageDescription</key>
<string>This app needs camera access to broadcast video.</string>
<key>NSMicrophoneUsageDescription</key>
<string>This app needs microphone access to broadcast audio.</string>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:ivs_broadcaster/ivs_broadcaster.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'IVS Broadcaster Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  IVSBroadcaster _broadcaster;

  @override
  void initState() {
    super.initState();
    _broadcaster = IVSBroadcaster(
      ingestServer: 'https://your-ingest-server.com',
      streamName: 'your-stream-name',
      streamKey: 'your-stream-key',
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('IVS Broadcaster Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: () {
                _broadcaster.startBroadcast();
              },
              child: Text('Start Broadcast'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                _broadcaster.stopBroadcast();
              },
              child: Text('Stop Broadcast'),
            ),
          ],
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user opens the app and is presented with a button to start the broadcast.
// 2. When the user clicks the button, the IVSBroadcaster is initialized with the ingest server, stream name, and stream key.
// 3. The IVSBroadcaster starts the broadcast, which begins sending live video and audio to the ingest server.
// 4. The user can then stop the broadcast by clicking the stop button.
// 5. When the broadcast is stopped, the IVSBroadcaster stops sending video and audio to the ingest server.

// Summary:
// The IVS Broadcaster package is used to broadcast live video and audio from a Flutter app.
// The package is initialized with the ingest server, stream name, and stream key.
// The broadcast is started and stopped using the startBroadcast and stopBroadcast methods.
// The app uses a simple button interface to start and stop the broadcast.

```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

Secure Dotenv Flutter Package
=============================

The `secure_dotenv` Flutter package is a secure way to store and manage environment variables in your Flutter applications. It allows you to store sensitive data such as API keys, database credentials, and other secrets in a secure manner.

When to Use
------------

You should use this package when you need to store sensitive data in your Flutter application. This package is particularly useful when you need to:

* Store API keys or other secrets that should not be committed to version control.
* Manage different environment variables for different environments (e.g., development, staging, production).
* Keep sensitive data secure and encrypted.

Features
--------

The `secure_dotenv` package provides the following features:

* Secure storage of environment variables using encryption.
* Support for multiple environments (e.g., development, staging, production).
* Easy integration with Flutter applications.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
---------------

To use the `secure_dotenv` package, follow these steps:

### Step 1: Add the Package to Your Pubspec

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  secure_dotenv: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Create a Dotenv File

Create a new file named `.env` in the root of your project. This file will store your environment variables.

### Step 3: Configure the Package

In your `main.dart` file, add the following code to configure the package:
```dart
import 'package:secure_dotenv/secure_dotenv.dart';

void main() async {
  await dotenv.load();
  runApp(MyApp());
}
```
This code loads the environment variables from the `.env` file.

### Platform-Specific Details

#### Android

On Android, you need to add the following code to your `AndroidManifest.xml` file:
```xml
<application
  ...
  android:usesCleartextTraffic="true"
  ...
>
```
This allows the package to use cleartext traffic to load the environment variables.

#### iOS

On iOS, you need to add the following code to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```
This allows the package to use arbitrary loads to load the environment variables.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:secure_dotenv/secure_dotenv.dart';

void main() async {
  // Load the environment variables from the .env file
  await dotenv.load();

  // Get the API key from the environment variables
  String apiKey = dotenv.env['API_KEY'];

  // Create a new instance of the RealFlutter class
  RealFlutter realFlutter = RealFlutter(apiKey);

  // Run the app
  runApp(realFlutter.getApp());
}

class RealFlutter {
  String _apiKey;

  RealFlutter(this._apiKey);

  // Get the app
  Widget getApp() {
    return MaterialApp(
      title: 'RealFlutter',
      home: Scaffold(
        appBar: AppBar(
          title: Text('RealFlutter'),
        ),
        body: Center(
          child: Text('API Key: $_apiKey'),
        ),
      ),
    );
  }
}
```

// This is the main entry point of the app.
// The dotenv.load() function is used to load the environment variables from the .env file.
// The API key is then retrieved from the environment variables using dotenv.env['API_KEY'].
// A new instance of the RealFlutter class is created, passing the API key to the constructor.
// The getApp() method of the RealFlutter class returns the app widget.
// The app widget is a MaterialApp with a Scaffold as its home.
// The Scaffold has an AppBar with a title, and a body with a Center widget.
// The Center widget has a Text widget that displays the API key.

// The flow of the app is as follows:
// 1. The main() function is called, which loads the environment variables and gets the API key.
// 2. A new instance of the RealFlutter class is created, passing the API key to the constructor.
// 3. The getApp() method of the RealFlutter class returns the app widget.
// 4. The app widget is displayed on the screen, showing the API key.

<-- END_MAIN -->
```markdown
<-- START_DESCRIPTION -->

# Elegant Notification Flutter Package

The `elegant_notification` Flutter package is a versatile and visually appealing solution for displaying notifications within your Flutter applications. It provides a simple yet powerful way to create customizable notifications that can enhance user experience by providing timely and relevant information.

## When to Use

- **User Feedback**: Use it to inform users about the success or failure of an action, such as form submission or data saving.
- **Alerts**: Notify users about important events or updates, like new messages or system alerts.
- **Promotions**: Highlight special offers or promotions within your app.

## Features

- **Customizable Appearance**: Tailor the look and feel of notifications to match your app's theme.
- **Multiple Types**: Choose from different notification types such as success, error, warning, and info.
- **Flexible Positioning**: Display notifications at various positions on the screen.
- **Animation Support**: Enhance notifications with smooth animations.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using Elegant Notification

In this tutorial, we'll walk through the process of setting up the `elegant_notification` package in a Flutter project and demonstrate how to use its features effectively.

## Setup Process

1. **Add Dependency**

   First, add the `elegant_notification` package to your `pubspec.yaml` file:

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     elegant_notification: ^1.0.0
   ```

2. **Install Packages**

   Run the following command to install the new package:

   ```bash
   flutter pub get
   ```

3. **Import the Package**

   Import the package in your Dart file where you want to use it:

   ```dart
   import 'package:elegant_notification/elegant_notification.dart';
   ```

## Platform-Specific Details

### Android

Ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```gradle
android {
    defaultConfig {
        minSdkVersion 21
    }
}
```

### iOS

No specific configurations are required for iOS, but ensure your deployment target is set to iOS 9.0 or higher in your `ios/Podfile`:

```ruby
platform :ios, '9.0'
```

## Using the Package

To display a notification, you can use the `RealFlutter` class to create and show notifications. Here's a basic example:

```dart
RealFlutter.show(
  context: context,
  title: 'Success',
  description: 'Your operation was successful!',
  type: NotificationType.success,
);
```

<-- END_TUTORIAL -->

<-- MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:elegant_notification/elegant_notification.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Elegant Notification Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: NotificationDemo(),
    );
  }
}

class NotificationDemo extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Elegant Notification Demo'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Display a success notification
            RealFlutter.show(
              context: context,
              title: 'Success',
              description: 'Your operation was successful!',
              type: NotificationType.success,
            );
          },
          child: Text('Show Success Notification'),
        ),
      ),
    );
  }
}

// The main function initializes the app by calling runApp with MyApp.
// MyApp is a StatelessWidget that sets up the MaterialApp with a title and theme.
// NotificationDemo is the home widget, which is a Scaffold with an AppBar and a centered button.
// When the button is pressed, it triggers the RealFlutter.show method to display a success notification.
// The notification includes a title, description, and type, which is set to success in this example.
// The RealFlutter.show method handles the display logic, showing the notification at the top of the screen.
```

<-- END_MAIN -->
```

This blog post provides a comprehensive guide to using the `elegant_notification` package in Flutter applications. It covers the package's description, setup, and usage, along with a complete example to demonstrate its capabilities.
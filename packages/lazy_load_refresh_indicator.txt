<-- START_DESCRIPTION -->

# lazy_load_refresh_indicator Package Overview
The `lazy_load_refresh_indicator` package is a Flutter library that provides a simple and efficient way to implement lazy loading and pull-to-refresh functionality in your app. It is designed to work seamlessly with Flutter's `ListView` and `GridView` widgets, making it easy to integrate into your existing codebase.

## Key Features

*   Lazy loading: Load data only when the user scrolls to the end of the list, reducing unnecessary network requests and improving app performance.
*   Pull-to-refresh: Allow users to refresh the data by pulling down on the list, providing a intuitive way to update the content.
*   Customizable: Easily customize the appearance and behavior of the refresh indicator to fit your app's design.

## When to Use

The `lazy_load_refresh_indicator` package is perfect for apps that display large amounts of data, such as social media feeds, news articles, or e-commerce product lists. It is also useful for apps that require real-time updates, such as live scores or stock prices.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the Package

## Step 1: Add the Package to Your Pubspec.yaml File

To use the `lazy_load_refresh_indicator` package, you need to add it to your `pubspec.yaml` file. Open the file and add the following line under the `dependencies` section:

```yml
dependencies:
  lazy_load_refresh_indicator: ^1.0.0
```

Then, run `flutter pub get` in your terminal to install the package.

## Step 2: Import the Package

In your Dart file, import the package by adding the following line at the top:

```dart
import 'package:lazy_load_refresh_indicator/lazy_load_refresh_indicator.dart';
```

## Step 3: Create a ListView or GridView

Create a `ListView` or `GridView` widget to display your data. For example:

```dart
ListView.builder(
  itemCount: _data.length,
  itemBuilder: (context, index) {
    return ListTile(
      title: Text(_data[index]),
    );
  },
)
```

## Step 4: Wrap the ListView or GridView with LazyLoadRefreshIndicator

Wrap the `ListView` or `GridView` with the `LazyLoadRefreshIndicator` widget, passing the `onRefresh` and `onLoadMore` callbacks:

```dart
LazyLoadRefreshIndicator(
  onRefresh: _refreshData,
  onLoadMore: _loadMoreData,
  child: ListView.builder(
    itemCount: _data.length,
    itemBuilder: (context, index) {
      return ListTile(
        title: Text(_data[index]),
      );
    },
  ),
)
```

## Step 5: Implement the onRefresh and onLoadMore Callbacks

Implement the `_refreshData` and `_loadMoreData` functions to handle the refresh and load more logic:

```dart
void _refreshData() async {
  // Refresh data logic here
  _data = await fetchData();
  setState(() {});
}

void _loadMoreData() async {
  // Load more data logic here
  final newData = await fetchMoreData();
  _data.addAll(newData);
  setState(() {});
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:lazy_load_refresh_indicator/lazy_load_refresh_indicator.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Lazy Load Refresh Indicator Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  List<String> _data = [];
  int _pageNumber = 1;

  @override
  void initState() {
    super.initState();
    _refreshData();
  }

  void _refreshData() async {
    // Refresh data logic here
    _data = await fetchData();
    _pageNumber = 1;
    setState(() {});
  }

  void _loadMoreData() async {
    // Load more data logic here
    final newData = await fetchMoreData(_pageNumber);
    _data.addAll(newData);
    _pageNumber++;
    setState(() {});
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Lazy Load Refresh Indicator Demo'),
      ),
      body: LazyLoadRefreshIndicator(
        onRefresh: _refreshData,
        onLoadMore: _loadMoreData,
        child: ListView.builder(
          itemCount: _data.length,
          itemBuilder: (context, index) {
            return ListTile(
              title: Text(_data[index]),
            );
          },
        ),
      ),
    );
  }
}

// Simulate data fetching
Future<List<String>> fetchData() async {
  await Future.delayed(Duration(seconds: 2));
  return List.generate(10, (index) => 'Item $index');
}

// Simulate more data fetching
Future<List<String>> fetchMoreData(int pageNumber) async {
  await Future.delayed(Duration(seconds: 2));
  return List.generate(10, (index) => 'Item ${pageNumber * 10 + index}');
}

// The application flow:
// 1. The user opens the app, and the `_refreshData` function is called to fetch the initial data.
// 2. The data is displayed in the `ListView`, and the user can scroll through it.
// 3. When the user reaches the end of the list, the `_loadMoreData` function is called to fetch more data.
// 4. The new data is added to the existing data, and the `ListView` is updated.
// 5. The user can continue scrolling and loading more data.
// 6. If the user pulls down on the list, the `_refreshData` function is called to refresh the data.
```

<-- END_MAIN -->
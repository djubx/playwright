<-- START_DESCRIPTION -->

# Flutter App Installer Package
================================

The `flutter_app_installer` package is a Flutter plugin that allows you to install APK files on Android and IPA files on iOS. This package is useful when you need to distribute your app through a custom channel, such as a company's internal app store.

## Features

* Install APK files on Android
* Install IPA files on iOS
* Support for both ARM and ARM64 architectures on Android
* Support for both 32-bit and 64-bit architectures on iOS

## When to Use

You can use this package in the following scenarios:

* Distributing your app through a custom channel, such as a company's internal app store
* Providing beta versions of your app to testers
* Installing apps on devices that do not have access to the Google Play Store or Apple App Store

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
================

## Android Setup

To use this package on Android, you need to add the following permissions to your `AndroidManifest.xml` file:

```xml
<uses-permission android:name="android.permission.REQUEST_INSTALL_PACKAGES" />
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
```

You also need to enable the `android:exported` attribute for the `MainActivity` in your `AndroidManifest.xml` file:

```xml
<activity
    android:name=".MainActivity"
    android:exported="true">
    ...
</activity>
```

## iOS Setup

To use this package on iOS, you need to add the following lines to your `Info.plist` file:

```xml
<key>UIFileSharingEnabled</key>
<true/>
<key>LSSupportsOpeningDocumentsInPlace</key>
<true/>
```

You also need to add the `NSDocumentDirectory` entitlement to your app's capabilities:

```xml
<key>NSDocumentDirectory</key>
<string>YES</string>
```

## Usage

To use this package, you need to import it in your Dart file:

```dart
import 'package:flutter_app_installer/flutter_app_installer.dart';
```

Then, you can use the `installApk` method to install an APK file on Android:

```dart
await FlutterAppInstaller.installApk(apkPath: 'path/to/apk/file.apk');
```

Or, you can use the `installIpa` method to install an IPA file on iOS:

```dart
await FlutterAppInstaller.installIpa(ipaPath: 'path/to/ipa/file.ipa');
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_app_installer/flutter_app_installer.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter App Installer Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  String _apkPath = '';
  String _ipaPath = '';

  Future<void> _installApk() async {
    // Set the APK file path
    _apkPath = 'path/to/apk/file.apk';

    // Install the APK file
    await FlutterAppInstaller.installApk(apkPath: _apkPath);

    // Show a success message
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('APK installed successfully')),
    );
  }

  Future<void> _installIpa() async {
    // Set the IPA file path
    _ipaPath = 'path/to/ipa/file.ipa';

    // Install the IPA file
    await FlutterAppInstaller.installIpa(ipaPath: _ipaPath);

    // Show a success message
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text('IPA installed successfully')),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter App Installer Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: _installApk,
              child: Text('Install APK'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _installIpa,
              child: Text('Install IPA'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user clicks the "Install APK" or "Install IPA" button.
// 2. The corresponding method (_installApk or _installIpa) is called.
// 3. The method sets the APK or IPA file path.
// 4. The method calls the installApk or installIpa method of the FlutterAppInstaller class.
// 5. The installApk or installIpa method installs the APK or IPA file.
// 6. The method shows a success message to the user.

// Summary: This code demonstrates how to use the Flutter App Installer package to install APK and IPA files.
// The package provides a simple way to distribute apps through a custom channel.
```

<-- END_MAIN -->
Here's a detailed technical blog on the "theme_manager" Flutter package, structured as requested.

<!-- START_DESCRIPTION -->
# Theme Manager Flutter Package

The **theme_manager** package is a powerful tool for managing themes in Flutter applications. It allows developers to easily switch between different themes, providing a seamless user experience. This package is particularly useful in applications that require dynamic theming based on user preferences or system settings.

## When to Use This Package

You should consider using the **theme_manager** package in scenarios such as:
- Applications that need to support light and dark themes.
- Apps that allow users to customize their theme settings.
- Projects that require a consistent theme across multiple screens.

## Features

- **Dynamic Theme Switching**: Easily switch between themes at runtime without needing to restart the app.
- **Persistent Theme Settings**: Save user preferences for themes using local storage.
- **Custom Theme Support**: Create and manage custom themes tailored to your application's design.

With these features, the **theme_manager** package simplifies the process of implementing theming in Flutter applications, enhancing both development efficiency and user experience.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Theme Manager

In this tutorial, we will walk through the setup process for the **theme_manager** package and demonstrate how to use it in a Flutter application.

## Step 1: Adding the Dependency

To get started, add the **theme_manager** package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  theme_manager: ^1.0.0  # Check for the latest version on pub.dev
```

## Step 2: Importing the Package

In your Dart files, import the package:

```dart
import 'package:theme_manager/theme_manager.dart';
```

## Step 3: Setting Up ThemeManager

You need to initialize the `ThemeManager` in your main application file. Here’s how to do it:

### For Android

Ensure that your Android project is set up to support the required configurations. In your `android/app/build.gradle`, make sure you have the following:

```groovy
android {
    ...
    compileSdkVersion 31 // or latest version
    ...
}
```

### For iOS

In your `ios/Runner/Info.plist`, ensure you have the following settings to support dark mode:

```xml
<key>UIUserInterfaceStyle</key>
<string>Automatic</string>
```

## Step 4: Using ThemeManager in Your App

You can now use the `ThemeManager` to manage themes in your application. Here’s a simple example of how to implement it:

1. Create a `ThemeData` object for each theme you want to support.
2. Use the `ThemeManager` to switch between themes based on user input.

### Example Code Snippet

```dart
// Import necessary packages
import 'package:flutter/material.dart';
import 'package:theme_manager/theme_manager.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return ThemeManager(
      // Define the default theme
      defaultTheme: ThemeData.light(),
      // Define the dark theme
      darkTheme: ThemeData.dark(),
      // Define custom themes if needed
      customThemes: {
        'custom': ThemeData(primarySwatch: Colors.blue),
      },
      child: MaterialApp(
        title: 'Theme Manager Demo',
        theme: ThemeManager.of(context).currentTheme,
        home: HomeScreen(),
      ),
    );
  }
}

class HomeScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Theme Manager Example')),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text('Current Theme: ${ThemeManager.of(context).currentTheme}'),
            ElevatedButton(
              onPressed: () {
                // Switch to dark theme
                ThemeManager.of(context).setTheme(ThemeData.dark());
              },
              child: Text('Switch to Dark Theme'),
            ),
            ElevatedButton(
              onPressed: () {
                // Switch to light theme
                ThemeManager.of(context).setTheme(ThemeData.light());
              },
              child: Text('Switch to Light Theme'),
            ),
          ],
        ),
      ),
    );
  }
}
```

In this example, we set up a simple Flutter application that allows users to switch between light and dark themes using buttons.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Theme Manager

```dart
// Import necessary packages
import 'package:flutter/material.dart';
import 'package:theme_manager/theme_manager.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return ThemeManager(
      // Define the default theme
      defaultTheme: ThemeData.light(),
      // Define the dark theme
      darkTheme: ThemeData.dark(),
      // Define custom themes if needed
      customThemes: {
        'custom': ThemeData(primarySwatch: Colors.blue),
      },
      child: MaterialApp(
        title: 'Theme Manager Demo',
        theme: ThemeManager.of(context).currentTheme,
        home: HomeScreen(),
      ),
    );
  }
}

class HomeScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Theme Manager Example')),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            // Display the current theme
            Text('Current Theme: ${ThemeManager.of(context).currentTheme}'),
            ElevatedButton(
              onPressed: () {
                // Switch to dark theme
                ThemeManager.of(context).setTheme(ThemeData.dark());
              },
              child: Text('Switch to Dark Theme'),
            ),
            ElevatedButton(
              onPressed: () {
                // Switch to light theme
                ThemeManager.of(context).setTheme(ThemeData.light());
              },
              child: Text('Switch to Light Theme'),
            ),
          ],
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function initializes the app by calling runApp with MyApp.
// 2. MyApp sets up the ThemeManager with default and dark themes.
// 3. The MaterialApp uses the current theme from ThemeManager.
// 4. HomeScreen displays the current theme and provides buttons to switch themes.
// 5. When a button is pressed, the setTheme method of ThemeManager is called to change the theme dynamically.
```
<!-- END_MAIN -->

In summary, the **theme_manager** package provides a straightforward way to implement dynamic theming in Flutter applications. By following the steps outlined in this blog, you can easily set up and manage themes, enhancing the user experience with customizable options.
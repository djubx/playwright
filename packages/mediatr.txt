<-- START_DESCRIPTION -->

Mediatr Package for Flutter
==========================

The Mediatr package is a lightweight, simple, and easy-to-use library for Flutter that allows you to manage your app's state and business logic in a clean and maintainable way. It's based on the Mediator pattern, which helps to decouple objects and reduce the complexity of your code.

When to Use Mediatr
------------------

Mediatr is perfect for apps that require a robust and scalable architecture. It's ideal for apps with complex business logic, multiple features, and a large codebase. With Mediatr, you can keep your code organized, maintainable, and easy to test.

Features of Mediatr
-------------------

*   **Decoupling**: Mediatr helps to decouple objects, making it easier to modify and extend your code.
*   **Scalability**: Mediatr is designed to handle complex and large-scale apps with ease.
*   **Testability**: Mediatr makes it easy to write unit tests and integration tests for your code.
*   **Flexibility**: Mediatr allows you to use different types of mediators, such as request/response, publish/subscribe, and more.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setting Up Mediatr
------------------

To use Mediatr in your Flutter app, you need to add the `mediatr` package to your `pubspec.yaml` file:

```yml
dependencies:
  mediatr: ^1.0.0
```

Then, run `flutter pub get` to install the package.

Configuring Mediatr
-------------------

To configure Mediatr, you need to create a mediator instance and register your handlers. You can do this in your app's `main` function:

```dart
import 'package:mediatr/mediatr.dart';

void main() {
  final mediator = Mediator();
  // Register your handlers here
  runApp(MyApp(mediator: mediator));
}
```

Using Mediatr
-------------

To use Mediatr, you need to create a request and send it to the mediator. The mediator will then call the corresponding handler and return the response.

```dart
class MyRequest extends Request<MyResponse> {
  // Add your request data here
}

class MyResponse {
  // Add your response data here
}

class MyHandler extends Handler<MyRequest, MyResponse> {
  @override
  Future<MyResponse> handle(MyRequest request) async {
    // Handle the request here
    return MyResponse();
  }
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:mediatr/mediatr.dart';

void main() {
  final mediator = Mediator();
  // Register your handlers here
  mediator.registerHandler<MyRequest, MyResponse>(MyHandler());
  runApp(MyApp(mediator: mediator));
}

class MyApp extends StatelessWidget {
  final Mediator _mediator;

  const MyApp({Key? key, required Mediator mediator}) : _mediator = mediator, super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Mediatr Example',
      home: MyHomePage(mediator: _mediator),
    );
  }
}

class MyHomePage extends StatelessWidget {
  final Mediator _mediator;

  const MyHomePage({Key? key, required Mediator mediator}) : _mediator = mediator, super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Mediatr Example'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () async {
            final request = MyRequest();
            final response = await _mediator.send(request);
            // Handle the response here
          },
          child: const Text('Send Request'),
        ),
      ),
    );
  }
}

// This is the request class
class MyRequest extends Request<MyResponse> {
  // Add your request data here
}

// This is the response class
class MyResponse {
  // Add your response data here
}

// This is the handler class
class MyHandler extends Handler<MyRequest, MyResponse> {
  @override
  Future<MyResponse> handle(MyRequest request) async {
    // Handle the request here
    return MyResponse();
  }
}

// The app starts by creating a mediator instance and registering the handlers.
// When the user clicks the button, a request is created and sent to the mediator.
// The mediator then calls the corresponding handler and returns the response.
// The response is then handled by the app.

// This is a very basic example of how Mediatr works.
// In a real-world app, you would have more complex requests and handlers,
// and you would use the mediator to decouple your objects and make your code more maintainable.
```

<-- END_MAIN -->
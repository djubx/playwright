<-- START_DESCRIPTION -->

# Overview of the rinf Flutter Package
=====================================

The `rinf` package is a lightweight, easy-to-use library for Flutter that provides a simple way to handle runtime permissions on Android and iOS devices. With `rinf`, you can request permissions and handle the results in a straightforward and efficient manner.

### When to Use rinf

You should use `rinf` when your Flutter app requires access to device features or data that are protected by permissions, such as:

* Camera access
* Location services
* Contacts or calendar data
* Microphone or audio recording

### Features of rinf

The `rinf` package provides the following key features:

* Simple and easy-to-use API for requesting permissions
* Support for both Android and iOS platforms
* Ability to request multiple permissions at once
* Handling of permission results, including granted, denied, and permanently denied states

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using rinf
==========================

To use `rinf` in your Flutter app, follow these steps:

### Step 1: Add the rinf Package to Your pubspec.yaml File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  rinf: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the rinf Package

In your Dart file, import the `rinf` package:
```dart
import 'package:rinf/rinf.dart';
```
### Step 3: Request Permissions

To request permissions, use the `Rinf.requestPermissions` method:
```dart
Rinf.requestPermissions([Permission.camera, Permission.location]);
```
You can request multiple permissions at once by passing a list of `Permission` values.

### Step 4: Handle Permission Results

To handle the results of the permission request, use the `Rinf.onPermissionResult` method:
```dart
Rinf.onPermissionResult((permission, result) {
  if (result == PermissionResult.granted) {
    // Permission was granted
  } else if (result == PermissionResult.denied) {
    // Permission was denied
  } else if (result == PermissionResult.permanentlyDenied) {
    // Permission was permanently denied
  }
});
```
### Platform-Specific Details

* On Android, `rinf` uses the `android.permission` package to request permissions.
* On iOS, `rinf` uses the `ios.permission` package to request permissions.

### Required Configurations or Optimizations

* On Android, you may need to add additional permissions to your `AndroidManifest.xml` file.
* On iOS, you may need to add additional permissions to your `Info.plist` file.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:rinf/rinf.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Rinf Example',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Rinf Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: () {
                // Request camera permission
                Rinf.requestPermissions([Permission.camera]);
              },
              child: Text('Request Camera Permission'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                // Request location permission
                Rinf.requestPermissions([Permission.location]);
              },
              child: Text('Request Location Permission'),
            ),
          ],
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user clicks the "Request Camera Permission" button.
// 2. The rinf package requests the camera permission.
// 3. The user is prompted to grant or deny the permission.
// 4. If the user grants the permission, the rinf package returns a PermissionResult.granted result.
// 5. If the user denies the permission, the rinf package returns a PermissionResult.denied result.
// 6. If the user permanently denies the permission, the rinf package returns a PermissionResult.permanentlyDenied result.
// 7. The user can repeat the process for the location permission.

// Summary:
// The rinf package provides a simple way to request runtime permissions on Android and iOS devices.
// The package handles the permission request and returns a result indicating whether the permission was granted, denied, or permanently denied.
```

<-- END_MAIN -->
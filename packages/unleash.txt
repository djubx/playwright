<-- START_DESCRIPTION -->

# Unleash Flutter Package: A Feature Flag Management Solution
===========================================================

The Unleash Flutter package is a feature flag management solution that allows developers to control the rollout of new features in their applications. It provides a simple and intuitive way to manage feature flags, enabling developers to test and validate new features with specific user segments before releasing them to the entire user base.

## When to Use Unleash

Unleash is particularly useful in the following scenarios:

*   **A/B testing**: Unleash allows you to create multiple variants of a feature and test them with different user segments to determine which one performs better.
*   **Canary releases**: With Unleash, you can roll out new features to a small percentage of users and gradually increase the rollout to the entire user base.
*   **Feature toggling**: Unleash enables you to toggle features on and off, allowing you to quickly respond to changes in your application or business needs.

## Key Features of Unleash

*   **Feature flags**: Unleash allows you to create and manage feature flags, which are used to control the rollout of new features.
*   **User segmentation**: Unleash provides a flexible way to segment users based on various criteria, such as demographics, behavior, or preferences.
*   **Variant management**: Unleash enables you to create multiple variants of a feature and manage them independently.
*   **Rollout management**: Unleash provides a simple way to manage the rollout of new features, including canary releases and A/B testing.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up Unleash in Your Flutter Application
=============================================

To use Unleash in your Flutter application, follow these steps:

### Step 1: Add the Unleash Package to Your pubspec.yaml File

```yml
dependencies:
  unleash: ^1.0.0
```

### Step 2: Import the Unleash Package in Your Dart File

```dart
import 'package:unleash/unleash.dart';
```

### Step 3: Initialize the Unleash Client

```dart
Future<void> main() async {
  final unleashClient = await UnleashClient(
    unleashUrl: 'https://your-unleash-instance.com',
    clientKey: 'your-client-key',
  ).init();
  runApp(MyApp(unleashClient: unleashClient));
}
```

### Step 4: Use the Unleash Client to Evaluate Feature Flags

```dart
class MyApp extends StatelessWidget {
  final UnleashClient unleashClient;

  MyApp({required this.unleashClient});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Unleash Example'),
        ),
        body: Center(
          child: ElevatedButton(
            onPressed: () async {
              final isEnabled = await unleashClient.isEnabled('my-feature');
              if (isEnabled) {
                // The feature is enabled, do something
              } else {
                // The feature is disabled, do something else
              }
            },
            child: Text('Check Feature Flag'),
          ),
        ),
      ),
    );
  }
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
// Import the necessary packages
import 'package:flutter/material.dart';
import 'package:unleash/unleash.dart';

// Define the main class
class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Initialize the Unleash client
  late UnleashClient _unleashClient;

  // Initialize the feature flag state
  bool _isFeatureEnabled = false;

  @override
  void initState() {
    super.initState();
    // Initialize the Unleash client
    _initUnleashClient();
  }

  // Initialize the Unleash client
  Future<void> _initUnleashClient() async {
    // Create a new Unleash client instance
    _unleashClient = await UnleashClient(
      unleashUrl: 'https://your-unleash-instance.com',
      clientKey: 'your-client-key',
    ).init();

    // Evaluate the feature flag
    final isEnabled = await _unleashClient.isEnabled('my-feature');

    // Update the feature flag state
    setState(() {
      _isFeatureEnabled = isEnabled;
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Unleash Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              // Display the feature flag state
              Text(
                _isFeatureEnabled ? 'Feature is enabled' : 'Feature is disabled',
                style: TextStyle(fontSize: 24),
              ),
              SizedBox(height: 20),
              // Button to toggle the feature flag
              ElevatedButton(
                onPressed: () async {
                  // Toggle the feature flag
                  final isEnabled = await _unleashClient.isEnabled('my-feature');
                  setState(() {
                    _isFeatureEnabled = isEnabled;
                  });
                },
                child: Text('Toggle Feature Flag'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Run the app
void main() {
  runApp(RealFlutter());
}

// The app flow is as follows:
// 1. The app initializes the Unleash client with the provided Unleash instance URL and client key.
// 2. The app evaluates the feature flag 'my-feature' using the Unleash client.
// 3. The app updates the feature flag state based on the evaluation result.
// 4. The app displays the feature flag state on the screen.
// 5. When the user clicks the 'Toggle Feature Flag' button, the app toggles the feature flag and updates the feature flag state.
```

// The above code demonstrates the usage of the Unleash package in a Flutter app.
// It initializes the Unleash client, evaluates a feature flag, and updates the app UI based on the flag state.
// The app also provides a button to toggle the feature flag.

<-- END_MAIN -->
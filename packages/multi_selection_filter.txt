<-- START_DESCRIPTION -->

# Multi Selection Filter Package
The `multi_selection_filter` package is a powerful Flutter package that allows users to filter data based on multiple selections. It provides a simple and intuitive way to filter data, making it a great addition to any Flutter app.

## When to Use
This package is perfect for apps that require filtering data based on multiple criteria. For example, an e-commerce app that allows users to filter products by category, price, and brand.

## Features

*   Supports multiple selection filtering
*   Customizable filter options
*   Easy to use and integrate

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial

## Step 1: Add the Package to Your Project

To use the `multi_selection_filter` package, you need to add it to your project. You can do this by adding the following line to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  multi_selection_filter: ^0.0.1
```

Then, run `flutter pub get` to get the package.

## Step 2: Import the Package

Next, you need to import the package in your Dart file:

```dart
import 'package:multi_selection_filter/multi_selection_filter.dart';
```

## Step 3: Create a Filter

To create a filter, you need to create a `MultiSelectionFilter` object and pass in the options:

```dart
MultiSelectionFilter(
  options: [
    FilterOption(
      label: 'Option 1',
      value: 'option1',
    ),
    FilterOption(
      label: 'Option 2',
      value: 'option2',
    ),
  ],
)
```

## Step 4: Use the Filter

To use the filter, you need to call the `showFilter` method:

```dart
MultiSelectionFilter(
  options: [
    FilterOption(
      label: 'Option 1',
      value: 'option1',
    ),
    FilterOption(
      label: 'Option 2',
      value: 'option2',
    ),
  ],
).showFilter(
  context,
  onSelect: (selectedOptions) {
    // Handle selected options
  },
)
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:multi_selection_filter/multi_selection_filter.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Multi Selection Filter Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  List<FilterOption> _options = [
    FilterOption(
      label: 'Option 1',
      value: 'option1',
    ),
    FilterOption(
      label: 'Option 2',
      value: 'option2',
    ),
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Multi Selection Filter Demo'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            MultiSelectionFilter(
              options: _options,
            ).showFilter(
              context,
              onSelect: (selectedOptions) {
                // Handle selected options
                print(selectedOptions);
              },
            );
          },
          child: Text('Show Filter'),
        ),
      ),
    );
  }
}

// The app starts by running the main function, which runs the MyApp widget.
// The MyApp widget builds the MaterialApp, which is the root of the app.
// The MaterialApp has a title, theme, and home, which is the MyHomePage widget.
// The MyHomePage widget is a stateful widget, which means it has a state that can change.
// The state of the MyHomePage widget is _MyHomePageState, which has a list of filter options.
// The build method of the _MyHomePageState widget returns a Scaffold, which is a basic material design layout.
// The Scaffold has an appBar, body, and floatingActionButton.
// The appBar has a title, which is the text 'Multi Selection Filter Demo'.
// The body is a Center widget, which centers its child.
// The child of the Center widget is an ElevatedButton, which is a raised button.
// The onPressed property of the ElevatedButton is a callback that is called when the button is pressed.
// The callback shows the filter by calling the showFilter method of the MultiSelectionFilter object.
// The showFilter method takes a context and an onSelect callback.
// The onSelect callback is called when the user selects options.
// The callback prints the selected options to the console.

```

<-- END_MAIN -->
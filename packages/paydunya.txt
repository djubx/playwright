Here's a detailed technical blog on the "paydunya" Flutter package, structured as requested.

<!-- START_DESCRIPTION -->
# PayDunya Flutter Package

The **PayDunya** Flutter package is a powerful tool designed to facilitate payment processing in Flutter applications. It provides a seamless integration with the PayDunya payment gateway, allowing developers to implement various payment methods, including card payments, mobile money, and bank transfers. This package is particularly useful for developers building e-commerce applications, donation platforms, or any app that requires payment processing.

## When to Use PayDunya

You should consider using the PayDunya Flutter package when:
- You need to integrate a reliable payment gateway into your Flutter application.
- You want to support multiple payment methods, including local options like mobile money.
- You are developing an application that requires secure and efficient payment processing.

## Features

- **Multiple Payment Methods**: Supports various payment options, including credit/debit cards and mobile money.
- **Easy Integration**: Simple setup process with clear documentation.
- **Secure Transactions**: Ensures that all transactions are processed securely.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS platforms.

By leveraging the PayDunya Flutter package, developers can enhance their applications with robust payment processing capabilities, ensuring a smooth user experience.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up PayDunya in Your Flutter Application

In this tutorial, we will walk through the setup process for the PayDunya Flutter package and demonstrate how to use it in your application.

## Step 1: Add Dependency

To get started, add the PayDunya package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  paydunya: ^latest_version
```

Make sure to replace `^latest_version` with the latest version of the package available on [pub.dev](https://pub.dev/packages/paydunya).

## Step 2: Configure for Android

For Android, you need to ensure that your app has the necessary permissions and configurations:

1. Open `AndroidManifest.xml` located in `android/app/src/main/AndroidManifest.xml`.
2. Add the following permissions inside the `<manifest>` tag:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>
```

3. Ensure that your `minSdkVersion` is set to at least 21 in `android/app/build.gradle`:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
        ...
    }
}
```

## Step 3: Configure for iOS

For iOS, you need to make some additional configurations:

1. Open `Info.plist` located in `ios/Runner/Info.plist`.
2. Add the following lines to allow network requests:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

## Step 4: Initialize PayDunya

In your Flutter application, you need to initialize the PayDunya service. This is typically done in the `main.dart` file:

```dart
import 'package:flutter/material.dart';
import 'package:paydunya/paydunya.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'PayDunya Example',
      home: HomeScreen(),
    );
  }
}
```

## Step 5: Using PayDunya

To use PayDunya for processing payments, you can create a payment request and handle the response. Hereâ€™s a simple example of how to initiate a payment:

```dart
void initiatePayment() async {
  // Create a payment request
  var paymentRequest = PayDunyaPaymentRequest(
    amount: 10000, // Amount in cents
    currency: 'XOF', // Currency code
    // Additional parameters...
  );

  // Process the payment
  var response = await PayDunya.processPayment(paymentRequest);

  // Handle the response
  if (response.success) {
    // Payment was successful
    print('Payment successful: ${response.transactionId}');
  } else {
    // Payment failed
    print('Payment failed: ${response.errorMessage}');
  }
}
```

With these steps, you should be able to set up and use the PayDunya Flutter package in your application effectively.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example: PayDunya Flutter Application

```dart
import 'package:flutter/material.dart';
import 'package:paydunya/paydunya.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'PayDunya Example',
      home: HomeScreen(),
    );
  }
}

class HomeScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('PayDunya Payment Example'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            initiatePayment();
          },
          child: Text('Pay Now'),
        ),
      ),
    );
  }

  void initiatePayment() async {
    // Create a payment request
    var paymentRequest = PayDunyaPaymentRequest(
      amount: 10000, // Amount in cents
      currency: 'XOF', // Currency code
      // Additional parameters...
    );

    // Process the payment
    var response = await PayDunya.processPayment(paymentRequest);

    // Handle the response
    if (response.success) {
      // Payment was successful
      print('Payment successful: ${response.transactionId}');
    } else {
      // Payment failed
      print('Payment failed: ${response.errorMessage}');
    }
  }
}

// Application Flow Explanation:
// 1. The application starts with the MyApp class, which sets up the MaterialApp.
// 2. The HomeScreen widget is displayed, containing a button labeled "Pay Now."
// 3. When the button is pressed, the initiatePayment function is called.
// 4. A payment request is created with the specified amount and currency.
// 5. The payment is processed using the PayDunya package.
// 6. The response is checked; if successful, the transaction ID is printed, otherwise, an error message is displayed.
```

<!-- END_MAIN -->

In this blog, we explored the PayDunya Flutter package, detailing its features, setup process, and providing a complete example of how to implement it in a Flutter application. By following the steps outlined, developers can easily integrate payment processing capabilities into their apps, enhancing user experience and functionality.
# Flutter Kiosk Mode: A Comprehensive Guide

## <-- START_DESCRIPTION -->

### Description

The `flutter_kiosk_mode` package is designed to help developers create kiosk applications in Flutter. Kiosk mode is a specialized mode that restricts user access to only a specific application, preventing them from navigating away from it. This is particularly useful for applications in public spaces, such as information kiosks, point-of-sale systems, or any scenario where you want to limit user interaction to a single app.

### When to Use

You might consider using the `flutter_kiosk_mode` package in scenarios such as:
- **Public Information Displays**: Where users should only interact with a specific app.
- **Retail Environments**: For point-of-sale systems that require a locked-down interface.
- **Event Check-in Systems**: To streamline the check-in process without distractions.

### Features

- **Kiosk Mode Activation**: Easily enable or disable kiosk mode for your application.
- **Platform Support**: Works on both Android and iOS, with specific configurations for each platform.
- **User Interaction Control**: Prevents users from exiting the app or accessing other device functionalities.

## <-- END_DESCRIPTION -->

## <-- START_TUTORIAL -->

### Tutorial

To get started with the `flutter_kiosk_mode` package, follow these steps:

#### Step 1: Add Dependency

Add the package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  flutter_kiosk_mode: ^latest_version
```

Make sure to replace `^latest_version` with the latest version available on [pub.dev](https://pub.dev/packages/flutter_kiosk_mode).

#### Step 2: Platform-Specific Configuration

**For Android:**
1. Open your `AndroidManifest.xml` file located at `android/app/src/main/AndroidManifest.xml`.
2. Add the following permissions inside the `<manifest>` tag:

```xml
<uses-permission android:name="android.permission.SYSTEM_ALERT_WINDOW"/>
<uses-permission android:name="android.permission.DISABLE_KEYGUARD"/>
```

3. Ensure your application has the `KioskMode` permission by adding the following inside the `<application>` tag:

```xml
<activity
    android:name=".MainActivity"
    android:launchMode="singleTask">
    <intent-filter>
        <action android:name="android.intent.action.MAIN"/>
        <category android:name="android.intent.category.LAUNCHER"/>
    </intent-filter>
</activity>
```

**For iOS:**
1. Open your `Info.plist` file located at `ios/Runner/Info.plist`.
2. Add the following key-value pair to allow the app to run in kiosk mode:

```xml
<key>UIBackgroundModes</key>
<array>
    <string>audio</string>
</array>
```

#### Step 3: Implementing Kiosk Mode

Now, you can use the package in your Flutter application. Hereâ€™s how to activate and deactivate kiosk mode:

```dart
import 'package:flutter/material.dart';
import 'package:flutter_kiosk_mode/flutter_kiosk_mode.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  void initState() {
    super.initState();
    // Activate kiosk mode when the app starts
    FlutterKioskMode.enableKioskMode();
  }

  @override
  void dispose() {
    // Disable kiosk mode when the app is disposed
    FlutterKioskMode.disableKioskMode();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Kiosk Mode Example')),
        body: Center(child: Text('Welcome to Kiosk Mode!')),
      ),
    );
  }
}
```

## <-- END_TUTORIAL -->

## <-- START_MAIN -->

### Complete Example

```dart
import 'package:flutter/material.dart';
import 'package:flutter_kiosk_mode/flutter_kiosk_mode.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  void initState() {
    super.initState();
    // Activate kiosk mode when the app starts
    FlutterKioskMode.enableKioskMode();
  }

  @override
  void dispose() {
    // Disable kiosk mode when the app is disposed
    FlutterKioskMode.disableKioskMode();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Kiosk Mode Example')),
        body: Center(child: Text('Welcome to Kiosk Mode!')),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts and the `RealFlutter` widget is created.
// 2. In the `initState` method, `enableKioskMode` is called to restrict user access to the app.
// 3. The main UI is built with a simple `Scaffold` containing an `AppBar` and a centered text widget.
// 4. When the app is disposed (e.g., when the user closes the app), `disableKioskMode` is called to revert the device back to normal mode.
// 5. This ensures that the app runs in a controlled environment, suitable for kiosk applications.
```

## <-- END_MAIN -->

### Summary

In this guide, we explored the `flutter_kiosk_mode` package, which allows developers to create kiosk applications in Flutter. We covered the installation process, platform-specific configurations, and provided a complete example demonstrating how to implement kiosk mode effectively. By following these steps, you can create a secure and user-friendly kiosk application tailored to your needs.
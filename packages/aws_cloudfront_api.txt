```markdown
<!-- START_DESCRIPTION -->
# Overview of the aws_cloudfront_api Flutter Package

The `aws_cloudfront_api` package is a powerful tool for Flutter developers looking to integrate Amazon CloudFront services into their applications. CloudFront is a content delivery network (CDN) that provides a fast and secure way to deliver content to users globally. This package simplifies the process of interacting with CloudFront APIs, allowing developers to manage distributions, invalidations, and more directly from their Flutter applications.

## When to Use This Package
- **Content Delivery**: When you need to serve static assets (images, videos, etc.) efficiently to users across different geographical locations.
- **Dynamic Content**: If your application requires dynamic content delivery with low latency.
- **API Management**: For managing CloudFront distributions and invalidations programmatically.

## Key Features
- **Easy Integration**: Simplifies the process of connecting to AWS CloudFront services.
- **Comprehensive API Support**: Supports various CloudFront API operations, including creating and managing distributions.
- **Error Handling**: Built-in error handling for API requests.
- **Asynchronous Operations**: Utilizes Dart's async/await features for non-blocking operations.

This package is ideal for developers looking to enhance their Flutter applications with robust content delivery capabilities.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using aws_cloudfront_api

## Installation
To get started with the `aws_cloudfront_api` package, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  aws_cloudfront_api: ^latest_version
```

Make sure to replace `latest_version` with the most recent version available on [pub.dev](https://pub.dev/packages/aws_cloudfront_api).

## Platform-Specific Configuration

### Android
1. Ensure that your `android/app/build.gradle` file has the necessary permissions and dependencies for network access.
2. Add the following permissions in your `AndroidManifest.xml`:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
```

### iOS
1. Open your `ios/Runner/Info.plist` file and add the following lines to allow network requests:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

## Using the Package
Once the package is installed and configured, you can start using it in your Flutter application. Below is a simple example of how to initialize the package and make a request to list CloudFront distributions.

```dart
import 'package:aws_cloudfront_api/aws_cloudfront_api.dart';

class RealFlutter {
  final CloudFront cloudFront;

  RealFlutter(String accessKeyId, String secretAccessKey)
      : cloudFront = CloudFront(
          region: 'us-east-1', // Specify your AWS region
          credentials: AwsClientCredentials(
            accessKey: accessKeyId,
            secretKey: secretAccessKey,
          ),
        );

  Future<void> listDistributions() async {
    try {
      final response = await cloudFront.listDistributions();
      print('Distributions: ${response.distributionList.items}');
    } catch (e) {
      print('Error: $e');
    }
  }
}
```

In this example, we create an instance of the `CloudFront` class, passing in the necessary AWS credentials. We then call the `listDistributions` method to retrieve and print the list of CloudFront distributions.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using aws_cloudfront_api

```dart
import 'package:flutter/material.dart';
import 'package:aws_cloudfront_api/aws_cloudfront_api.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'AWS CloudFront API Example',
      home: CloudFrontHome(),
    );
  }
}

class CloudFrontHome extends StatefulWidget {
  @override
  _CloudFrontHomeState createState() => _CloudFrontHomeState();
}

class _CloudFrontHomeState extends State<CloudFrontHome> {
  final RealFlutter realFlutter = RealFlutter('YOUR_ACCESS_KEY', 'YOUR_SECRET_KEY');
  List<DistributionSummary> distributions = [];

  @override
  void initState() {
    super.initState();
    _fetchDistributions(); // Fetch distributions when the widget is initialized
  }

  Future<void> _fetchDistributions() async {
    await realFlutter.listDistributions().then((value) {
      setState(() {
        distributions = value; // Update the state with the fetched distributions
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('CloudFront Distributions'),
      ),
      body: ListView.builder(
        itemCount: distributions.length,
        itemBuilder: (context, index) {
          return ListTile(
            title: Text(distributions[index].id), // Display the distribution ID
            subtitle: Text(distributions[index].status), // Display the distribution status
          );
        },
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The application starts with the main function, which runs the MyApp widget.
// 2. MyApp builds a MaterialApp with a title and sets CloudFrontHome as the home widget.
// 3. CloudFrontHome is a stateful widget that initializes an instance of RealFlutter with AWS credentials.
// 4. In the initState method, _fetchDistributions is called to retrieve the list of CloudFront distributions.
// 5. _fetchDistributions calls the listDistributions method from the RealFlutter class, which fetches the data.
// 6. Once the data is fetched, the state is updated, and the ListView is rebuilt to display the distribution IDs and statuses.
```
<!-- END_MAIN -->
```

This structured blog post provides a comprehensive overview of the `aws_cloudfront_api` package, guiding developers through its features, setup, and practical usage with a complete example.
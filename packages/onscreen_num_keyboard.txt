```markdown
<!-- START_DESCRIPTION -->
# Onscreen Number Keyboard Flutter Package

The `onscreen_num_keyboard` Flutter package provides a customizable onscreen numeric keyboard for Flutter applications. This package is particularly useful in scenarios where you need to input numeric data, such as in financial applications, calculators, or any form that requires numeric input. 

## Features
- **Customizable Layout**: You can easily customize the layout of the keyboard to fit your application's design.
- **Responsive Design**: The keyboard adapts to different screen sizes and orientations.
- **Easy Integration**: Simple to integrate into existing Flutter applications with minimal setup.
- **Event Handling**: Provides callbacks for key presses, allowing you to handle input dynamically.

## When to Use
- When building applications that require numeric input, such as banking apps, calculators, or forms.
- When you want to provide a better user experience by offering a dedicated numeric keyboard instead of the default keyboard.
- When you need a keyboard that can be styled to match your app's theme.

This package enhances user experience by providing a tailored input method that is both functional and visually appealing.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Onscreen Number Keyboard

## Step 1: Adding the Dependency
To use the `onscreen_num_keyboard` package, you need to add it to your `pubspec.yaml` file. Open your `pubspec.yaml` and add the following line under dependencies:

```yaml
dependencies:
  onscreen_num_keyboard: ^1.0.0
```

Make sure to run `flutter pub get` to install the package.

## Step 2: Importing the Package
In your Dart file, import the package:

```dart
import 'package:onscreen_num_keyboard/onscreen_num_keyboard.dart';
```

## Step 3: Basic Usage
You can use the `OnscreenNumKeyboard` widget in your application. Here’s how to set it up:

### Android Configuration
For Android, ensure that your `AndroidManifest.xml` has the necessary permissions if you are using any features that require them. Typically, no special permissions are needed for this package.

### iOS Configuration
For iOS, ensure that your deployment target is set to at least iOS 10.0 in your `ios/Podfile`:

```ruby
platform :ios, '10.0'
```

## Step 4: Implementing the Keyboard
You can implement the onscreen numeric keyboard in your widget tree. Here’s a simple example:

```dart
class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Onscreen Number Keyboard Example')),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            TextField(
              decoration: InputDecoration(labelText: 'Enter Number'),
              keyboardType: TextInputType.none, // Disable the default keyboard
              onTap: () {
                // Show the onscreen keyboard when the TextField is tapped
                showDialog(
                  context: context,
                  builder: (context) => OnscreenNumKeyboard(
                    onKeyPress: (value) {
                      // Handle key press
                    },
                  ),
                );
              },
            ),
          ],
        ),
      ),
    );
  }
}
```

In this example, tapping the `TextField` will display the onscreen numeric keyboard.

## Step 5: Customization
You can customize the appearance and behavior of the keyboard by passing parameters to the `OnscreenNumKeyboard` widget. Check the package documentation for more options.

With these steps, you should be able to integrate the `onscreen_num_keyboard` package into your Flutter application seamlessly.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Onscreen Number Keyboard

```dart
import 'package:flutter/material.dart';
import 'package:onscreen_num_keyboard/onscreen_num_keyboard.dart';

void main() {
  runApp(MyApp());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Onscreen Number Keyboard Example',
      home: Scaffold(
        appBar: AppBar(title: Text('Onscreen Number Keyboard')),
        body: Center(
          child: NumberInputField(),
        ),
      ),
    );
  }
}

class NumberInputField extends StatefulWidget {
  @override
  _NumberInputFieldState createState() => _NumberInputFieldState();
}

class _NumberInputFieldState extends State<NumberInputField> {
  String inputValue = ''; // Variable to hold the input value

  @override
  Widget build(BuildContext context) {
    return Column(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        // Display the current input value
        Text(
          'Input: $inputValue',
          style: TextStyle(fontSize: 24),
        ),
        SizedBox(height: 20),
        // TextField to trigger the onscreen keyboard
        TextField(
          decoration: InputDecoration(labelText: 'Tap to enter number'),
          readOnly: true, // Make it read-only to prevent default keyboard
          onTap: () {
            // Show the onscreen numeric keyboard when tapped
            showDialog(
              context: context,
              builder: (context) => OnscreenNumKeyboard(
                onKeyPress: (value) {
                  // Update the input value when a key is pressed
                  setState(() {
                    inputValue += value; // Append the pressed key to inputValue
                  });
                },
              ),
            );
          },
        ),
      ],
    );
  }
}
```

```
// The application starts with the main function, which runs the MyApp widget.
// MyApp is a StatelessWidget that sets up the MaterialApp and the main Scaffold.
// Inside the Scaffold, we have an AppBar and a centered NumberInputField widget.
// The NumberInputField is a StatefulWidget that maintains the current input value.
// When the TextField is tapped, it opens the OnscreenNumKeyboard dialog.
// The OnscreenNumKeyboard widget listens for key presses and updates the inputValue.
// Each key press appends the pressed number to the inputValue, which is displayed above the TextField.
```
<!-- END_MAIN -->
``` 

This structured blog provides a comprehensive overview of the `onscreen_num_keyboard` Flutter package, guiding users through its features, setup, and implementation with a complete example.
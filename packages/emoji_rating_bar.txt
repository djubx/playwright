<-- START_DESCRIPTION -->

# Emoji Rating Bar Flutter Package
=====================================

The `emoji_rating_bar` Flutter package is a customizable rating bar that uses emojis to represent ratings. It's a great way to add a fun and interactive rating system to your Flutter app.

## When to Use
--------------

You can use this package in any Flutter app that requires a rating system, such as:

* Product review screens
* Service rating screens
* Feedback forms
* Survey apps

## Features
------------

* Customizable emojis for each rating level
* Adjustable rating levels (e.g., 3, 5, 10)
* Support for half ratings (e.g., 3.5, 4.5)
* Animated rating changes
* Optional tap-to-rate functionality

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Emoji Rating Bar Package
===========================================================

## Step 1: Add the Package to Your Pubspec.yaml File
------------------------------------------------

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  emoji_rating_bar: ^1.0.0
```
Then, run `flutter pub get` to install the package.

## Step 2: Import the Package
---------------------------

In your Dart file, import the package:
```dart
import 'package:emoji_rating_bar/emoji_rating_bar.dart';
```
## Step 3: Create an EmojiRatingBar Widget
-----------------------------------------

Create an `EmojiRatingBar` widget and customize its properties:
```dart
EmojiRatingBar(
  length: 5, // number of rating levels
  ratingCallback: (rating) {
    print('Rating: $rating');
  },
  emojiMap: {
    1: '😠',
    2: '😐',
    3: '😊',
    4: '😍',
    5: '🤩',
  },
)
```
## Platform-Specific Details
---------------------------

* On Android, you may need to adjust the font size of the emojis to ensure they are displayed correctly.
* On iOS, you can use the `emojiMap` property to customize the emojis used for each rating level.

## Required Configurations or Optimizations
------------------------------------------

* To use the `tap-to-rate` functionality, set the `tapToRate` property to `true`.
* To animate rating changes, set the `animateRating` property to `true`.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:emoji_rating_bar/emoji_rating_bar.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  double _rating = 0;

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Emoji Rating Bar Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              EmojiRatingBar(
                length: 5,
                ratingCallback: (rating) {
                  setState(() {
                    _rating = rating;
                  });
                },
                emojiMap: {
                  1: '😠',
                  2: '😐',
                  3: '😊',
                  4: '😍',
                  5: '🤩',
                },
              ),
              Text('Rating: $_rating'),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app and is presented with an EmojiRatingBar widget.
// 2. The user taps on a rating level, and the ratingCallback is called with the selected rating.
// 3. The ratingCallback updates the _rating variable with the selected rating.
// 4. The setState method is called to rebuild the widget tree with the updated rating.
// 5. The EmojiRatingBar widget is rebuilt with the updated rating, and the corresponding emoji is displayed.
// 6. The Text widget below the EmojiRatingBar widget is updated to display the current rating.
```

<-- END_MAIN -->
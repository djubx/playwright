<-- START_DESCRIPTION -->

# Time Overlapping Flutter Package
=====================================

The `time_overlapping` Flutter package is a utility library that helps you determine the overlapping time ranges between two or more time intervals. It's particularly useful when you need to find the common time slots between multiple schedules, calendars, or timelines.

### When to Use This Package

*   When you need to find the overlapping time ranges between two or more schedules.
*   When you want to determine the common time slots between multiple calendars or timelines.
*   When you need to calculate the overlapping time intervals for scheduling appointments, meetings, or events.

### Features

*   Calculates the overlapping time ranges between two or more time intervals.
*   Supports both DateTime and TimeOfDay formats.
*   Returns the overlapping time ranges in a list of TimeRange objects.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Using the Time Overlapping Flutter Package
=====================================================

### Step 1: Add the Package to Your Flutter Project

Add the `time_overlapping` package to your Flutter project by adding the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  time_overlapping: ^1.0.0
```

Then, run `flutter pub get` to get the package.

### Step 2: Import the Package

Import the `time_overlapping` package in your Dart file:

```dart
import 'package:time_overlapping/time_overlapping.dart';
```

### Step 3: Calculate Overlapping Time Ranges

Create a list of TimeRange objects representing the time intervals you want to find overlaps for:

```dart
List<TimeRange> timeRanges = [
  TimeRange(
    start: DateTime(2022, 1, 1, 9, 0, 0),
    end: DateTime(2022, 1, 1, 12, 0, 0),
  ),
  TimeRange(
    start: DateTime(2022, 1, 1, 10, 0, 0),
    end: DateTime(2022, 1, 1, 13, 0, 0),
  ),
];
```

Then, use the `calculateOverlaps` function to find the overlapping time ranges:

```dart
List<TimeRange> overlaps = calculateOverlaps(timeRanges);
```

### Platform-Specific Details

The `time_overlapping` package works on both Android and iOS platforms without any additional configuration.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:time_overlapping/time_overlapping.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Time Overlapping Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  List<TimeRange> _timeRanges = [
    TimeRange(
      start: DateTime(2022, 1, 1, 9, 0, 0),
      end: DateTime(2022, 1, 1, 12, 0, 0),
    ),
    TimeRange(
      start: DateTime(2022, 1, 1, 10, 0, 0),
      end: DateTime(2022, 1, 1, 13, 0, 0),
    ),
  ];

  List<TimeRange> _overlaps = [];

  void _calculateOverlaps() {
    setState(() {
      _overlaps = calculateOverlaps(_timeRanges);
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Time Overlapping Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Time Ranges:',
              style: TextStyle(fontSize: 24),
            ),
            SizedBox(height: 20),
            Text(
              _timeRanges.map((e) => e.toString()).join('\n'),
              style: TextStyle(fontSize: 18),
            ),
            SizedBox(height: 40),
            ElevatedButton(
              onPressed: _calculateOverlaps,
              child: Text('Calculate Overlaps'),
            ),
            SizedBox(height: 20),
            Text(
              'Overlaps:',
              style: TextStyle(fontSize: 24),
            ),
            SizedBox(height: 20),
            Text(
              _overlaps.map((e) => e.toString()).join('\n'),
              style: TextStyle(fontSize: 18),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user is presented with a list of time ranges.
// 2. The user clicks the "Calculate Overlaps" button.
// 3. The calculateOverlaps function is called with the list of time ranges.
// 4. The function returns a list of overlapping time ranges.
// 5. The list of overlapping time ranges is displayed to the user.

// In this example, the calculateOverlaps function is called when the user clicks the "Calculate Overlaps" button.
// The function takes the list of time ranges as input and returns a list of overlapping time ranges.
// The list of overlapping time ranges is then displayed to the user.

// The time_overlapping package provides a simple and efficient way to calculate overlapping time ranges.
// It can be used in a variety of applications, such as scheduling appointments or meetings.
```

<-- END_MAIN -->
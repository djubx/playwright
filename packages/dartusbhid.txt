# Dartusbhid Flutter Package: A Comprehensive Guide

## <-- START_DESCRIPTION -->

### Description

The `dartusbhid` package is a powerful Flutter library designed for interfacing with USB Human Interface Devices (HID). This package allows developers to communicate with various USB devices, such as keyboards, mice, and game controllers, directly from their Flutter applications. It is particularly useful for applications that require real-time interaction with hardware peripherals, making it an excellent choice for gaming apps, custom input devices, and more.

### When to Use

You might consider using the `dartusbhid` package in scenarios such as:
- Developing a custom game that requires specific controller inputs.
- Creating applications that need to read data from USB HID devices, like barcode scanners or custom keyboards.
- Building tools that interact with hardware peripherals for specialized tasks.

### Features

- **Cross-Platform Support**: Works on both Android and iOS, allowing for a wide range of applications.
- **Real-time Communication**: Facilitates real-time data exchange with USB HID devices.
- **Easy Integration**: Simple API that integrates seamlessly with existing Flutter applications.
- **Device Discovery**: Automatically detects connected USB HID devices, making it easy to manage multiple peripherals.

## <-- END_DESCRIPTION -->

## <-- START_TUTORIAL -->

### Tutorial

To get started with the `dartusbhid` package, follow these steps:

#### Step 1: Add Dependency

Add the `dartusbhid` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  dartusbhid: ^latest_version
```

Make sure to replace `latest_version` with the most recent version available on [pub.dev](https://pub.dev/packages/dartusbhid).

#### Step 2: Platform-Specific Configuration

**For Android:**
1. Open your `AndroidManifest.xml` file located in `android/app/src/main/`.
2. Add the following permissions:

```xml
<uses-permission android:name="android.permission.USB_PERMISSION"/>
```

3. Ensure that your app's `minSdkVersion` is set to at least 21 in `android/app/build.gradle`:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

**For iOS:**
1. Open your `Info.plist` file located in `ios/Runner/`.
2. Add the following key to request permission to access USB devices:

```xml
<key>NSUSBDeviceUsageDescription</key>
<string>This app requires access to USB devices.</string>
```

#### Step 3: Basic Usage

Now that you have set up the package, you can start using it in your Flutter application. Below is a simple example demonstrating how to initialize the package and communicate with a USB HID device.

## <-- END_TUTORIAL -->

## <-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:dartusbhid/dartusbhid.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Declare a variable to hold the list of connected devices
  List<HIDDevice> devices = [];

  @override
  void initState() {
    super.initState();
    // Initialize the USB HID package
    _initializeUSBHID();
  }

  // Function to initialize USB HID and discover devices
  void _initializeUSBHID() async {
    // Discover connected USB HID devices
    devices = await DartUsbHid.getDevices();
    // Update the UI with the list of devices
    setState(() {});
  }

  // Function to send data to a selected device
  void _sendData(HIDDevice device, List<int> data) async {
    await device.send(data);
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('USB HID Example'),
        ),
        body: Column(
          children: [
            // Display the list of connected devices
            Expanded(
              child: ListView.builder(
                itemCount: devices.length,
                itemBuilder: (context, index) {
                  return ListTile(
                    title: Text('Device: ${devices[index].product}'),
                    onTap: () {
                      // Send a sample data packet to the selected device
                      _sendData(devices[index], [0x01, 0x02, 0x03]);
                    },
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }
}
```

### Application Flow Explanation

// The application starts by running the `RealFlutter` widget.
// In the `initState` method, we call `_initializeUSBHID` to discover connected USB HID devices.
// The `_initializeUSBHID` function uses `DartUsbHid.getDevices()` to fetch the list of devices and updates the state.
// The UI displays a list of connected devices using a `ListView`.
// When a user taps on a device, the `_sendData` function is called, which sends a sample data packet to the selected device.
// The data sent is a simple list of integers, which can be customized based on the device's requirements.

## <-- END_MAIN -->

### Summary

In this blog post, we explored the `dartusbhid` Flutter package, which provides a robust solution for interacting with USB HID devices. We covered the installation process, platform-specific configurations, and provided a complete example demonstrating how to discover and communicate with connected devices. This package is ideal for developers looking to create applications that require real-time interaction with hardware peripherals.
<-- START_DESCRIPTION -->

**Keyboard Service Flutter Package**
=====================================

The `keyboard_service` Flutter package provides a simple and efficient way to manage keyboard events in your Flutter application. It allows you to listen to keyboard events, such as key presses and releases, and perform actions accordingly.

**When to Use**
---------------

You can use this package in scenarios where you need to perform actions based on keyboard events, such as:

* Creating custom keyboard shortcuts
* Implementing keyboard navigation
* Handling keyboard events in games or interactive applications

**Features**
------------

* Listen to keyboard events (key presses and releases)
* Get the currently pressed keys
* Check if a specific key is pressed
* Support for both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setup and Usage**
-------------------

### Step 1: Add the Package to Your Project

Add the `keyboard_service` package to your `pubspec.yaml` file:
```yml
dependencies:
  keyboard_service: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:keyboard_service/keyboard_service.dart';
```
### Step 3: Initialize the Keyboard Service

Initialize the keyboard service in your `main` function:
```dart
void main() {
  KeyboardService.init();
  runApp(MyApp());
}
```
### Step 4: Listen to Keyboard Events

Use the `KeyboardService` class to listen to keyboard events:
```dart
KeyboardService.onKeyPressed.listen((key) {
  print('Key pressed: $key');
});
```
### Platform-Specific Details

* Android: No additional configuration is required.
* iOS: You need to add the `NSKeyboardDidShowNotification` and `NSKeyboardDidHideNotification` observers in your `Info.plist` file:
```xml
<key>UIKeyboardDidShowNotification</key>
<string>YES</string>
<key>UIKeyboardDidHideNotification</key>
<string>YES</string>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:keyboard_service/keyboard_service.dart';

void main() {
  KeyboardService.init();
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Keyboard Service Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Text('Press a key to see the result'),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  KeyboardService.onKeyPressed.listen((key) {
                    print('Key pressed: $key');
                    setState(() {
                      _result = 'Key pressed: $key';
                    });
                  });
                },
                child: Text('Listen to keyboard events'),
              ),
              SizedBox(height: 20),
              Text(_result),
            ],
          ),
        ),
      ),
    );
  }

  String _result = '';

  // Application flow:
  // 1. The user presses the "Listen to keyboard events" button.
  // 2. The KeyboardService.onKeyPressed stream is listened to.
  // 3. When a key is pressed, the stream emits the key value.
  // 4. The key value is printed to the console and displayed on the screen.
  // 5. The user can press another key to see the updated result.
}

// Final summary:
// This example demonstrates how to use the keyboard_service package to listen to keyboard events and display the result on the screen.
// The application flow is explained in the comments above.
```

<-- END_MAIN -->
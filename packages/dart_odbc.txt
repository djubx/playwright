<-- START_DESCRIPTION -->

**Introduction to dart_odbc**
==========================

The `dart_odbc` package is a Flutter library that allows you to connect to ODBC databases. ODBC (Open Database Connectivity) is a standard API for accessing databases. With `dart_odbc`, you can connect to various databases, including MySQL, PostgreSQL, Microsoft SQL Server, and more.

**When to use dart_odbc**
------------------------

Use `dart_odbc` when you need to access an ODBC database from your Flutter application. This package is particularly useful when:

* You need to connect to a legacy database system.
* You want to integrate your Flutter app with an existing database infrastructure.
* You require a high degree of control over database operations.

**Features**
------------

The `dart_odbc` package offers the following features:

* Support for various ODBC databases.
* Connection pooling for efficient database access.
* Support for transactions and batch operations.
* Ability to execute SQL queries and retrieve results.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setting up dart_odbc**
-------------------------

To use `dart_odbc` in your Flutter project, follow these steps:

### Step 1: Add the package to your pubspec.yaml file

```yml
dependencies:
  dart_odbc: ^1.0.0
```

### Step 2: Import the package in your Dart file

```dart
import 'package:dart_odbc/dart_odbc.dart';
```

### Step 3: Configure the ODBC connection

Create a new instance of the `OdbcConnection` class, passing in the connection string and other required parameters.

```dart
final connection = OdbcConnection(
  connectionString: 'DRIVER={ODBC Driver 17 for SQL Server};SERVER=my_server;DATABASE=my_database;UID=my_username;PWD=my_password',
);
```

### Step 4: Connect to the database

Call the `connect` method to establish a connection to the database.

```dart
await connection.connect();
```

### Step 5: Execute SQL queries

Use the `execute` method to execute SQL queries and retrieve results.

```dart
final results = await connection.execute('SELECT * FROM my_table');
```

### Platform-specific details

* **Android:** Make sure to include the ODBC driver in your Android project's assets folder.
* **iOS:** Add the ODBC driver to your Xcode project's frameworks folder.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:dart_odbc/dart_odbc.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'dart_odbc Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _connectionStringController = TextEditingController();
  final _queryController = TextEditingController();
  final _resultsController = TextEditingController();

  Future<void> _connectToDatabase() async {
    // Create a new ODBC connection
    final connection = OdbcConnection(
      connectionString: _connectionStringController.text,
    );

    // Connect to the database
    await connection.connect();

    // Execute the SQL query
    final results = await connection.execute(_queryController.text);

    // Display the results
    _resultsController.text = results.toString();

    // Close the connection
    await connection.close();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('dart_odbc Demo'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Column(
          children: [
            TextField(
              controller: _connectionStringController,
              decoration: InputDecoration(
                labelText: 'Connection String',
              ),
            ),
            TextField(
              controller: _queryController,
              decoration: InputDecoration(
                labelText: 'SQL Query',
              ),
            ),
            ElevatedButton(
              onPressed: _connectToDatabase,
              child: Text('Connect to Database'),
            ),
            TextField(
              controller: _resultsController,
              decoration: InputDecoration(
                labelText: 'Results',
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user enters the connection string and SQL query in the text fields.
// 2. The user clicks the "Connect to Database" button.
// 3. The _connectToDatabase function is called, which creates a new ODBC connection using the connection string.
// 4. The function connects to the database using the ODBC connection.
// 5. The function executes the SQL query using the ODBC connection.
// 6. The function displays the results of the query in the results text field.
// 7. The function closes the ODBC connection.

// This code demonstrates how to use the dart_odbc package to connect to an ODBC database, execute a SQL query, and display the results.
```

<-- END_MAIN -->
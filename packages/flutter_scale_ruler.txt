<-- START_DESCRIPTION -->

# Flutter Scale Ruler Package
================================

The `flutter_scale_ruler` package is a Flutter widget that provides a customizable scale ruler for measuring lengths or widths. It is a useful tool for applications that require users to input measurements, such as furniture shopping apps or interior design apps.

## Features

* Customizable scale units (e.g., inches, centimeters, feet)
* Adjustable scale range and interval
* Support for both horizontal and vertical orientations
* Optional display of measurement labels

## When to Use

Use the `flutter_scale_ruler` package when you need to provide users with a way to input measurements in a visually intuitive way. This package is particularly useful for applications that require users to measure lengths or widths, such as:

* Furniture shopping apps
* Interior design apps
* DIY project planning apps
* Architecture and engineering apps

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `flutter_scale_ruler` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_scale_ruler: ^1.0.0
```
2. Run `flutter pub get` to install the package.
3. Import the package in your Dart file:
```dart
import 'package:flutter_scale_ruler/flutter_scale_ruler.dart';
```
## Platform-Specific Details

### Android

No additional configuration is required for Android.

### iOS

To use the `flutter_scale_ruler` package on iOS, you need to add the following line to your `Info.plist` file:
```xml
<key>NSCalendarsUsageDescription</key>
<string>This app needs access to your calendar to function properly.</string>
```
This is required because the package uses the `UIDatePicker` component, which requires calendar access.

## Using the Package

To use the `flutter_scale_ruler` package, create a `ScaleRuler` widget and customize its properties as needed:
```dart
ScaleRuler(
  min: 0,
  max: 100,
  interval: 10,
  unit: 'cm',
  orientation: ScaleRulerOrientation.horizontal,
  showLabels: true,
)
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_scale_ruler/flutter_scale_ruler.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Scale Ruler Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  double _measurement = 0;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Scale Ruler Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ScaleRuler(
              min: 0,
              max: 100,
              interval: 10,
              unit: 'cm',
              orientation: ScaleRulerOrientation.horizontal,
              showLabels: true,
              onMeasurementChanged: (measurement) {
                setState(() {
                  _measurement = measurement;
                });
              },
            ),
            Text(
              'Measurement: $_measurement cm',
              style: TextStyle(fontSize: 24),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user interacts with the ScaleRuler widget by dragging the slider.
// 2. The ScaleRuler widget updates the measurement value and calls the onMeasurementChanged callback.
// 3. The onMeasurementChanged callback updates the _measurement state variable.
// 4. The Text widget displays the updated measurement value.
// 5. The user can continue to interact with the ScaleRuler widget to update the measurement value.
```

<-- END_MAIN -->

In summary, the code flows as follows:

* The user interacts with the `ScaleRuler` widget by dragging the slider.
* The `ScaleRuler` widget updates the measurement value and calls the `onMeasurementChanged` callback.
* The `onMeasurementChanged` callback updates the `_measurement` state variable.
* The `Text` widget displays the updated measurement value.
* The user can continue to interact with the `ScaleRuler` widget to update the measurement value.
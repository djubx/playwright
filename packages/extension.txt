# Flutter Package: extension

<!-- START_DESCRIPTION -->
## Description

The `extension` package in Flutter is a powerful tool that allows developers to extend the functionality of existing classes without modifying their source code. This package is particularly useful for adding utility methods or properties to classes, making your code cleaner and more maintainable. 

### When to Use

You might consider using the `extension` package when:
- You want to add custom methods to existing classes, such as `String`, `List`, or any other class.
- You need to encapsulate functionality that is specific to your application but doesn't belong in the original class.
- You want to improve code readability and reduce boilerplate code.

### Features

- **Method Extension**: Add new methods to existing classes.
- **Property Extension**: Create computed properties that can be accessed like regular properties.
- **Type Safety**: Extensions are type-safe, ensuring that you only add methods to compatible types.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
## Tutorial

### Setup Process

To use the `extension` package, you need to add it to your `pubspec.yaml` file. However, since `extension` is a built-in feature of Dart, you don't need to install any additional packages. Just ensure you are using Dart 2.7 or later.

```yaml
dependencies:
  flutter:
    sdk: flutter
```

### Platform-Specific Details

The `extension` feature is platform-agnostic, meaning it works seamlessly on both Android and iOS without any additional configuration. You can use it in any Flutter project without worrying about platform-specific optimizations.

### Example Usage

Hereâ€™s how to create an extension for the `String` class to add a method that checks if a string is a valid email:

```dart
extension EmailValidation on String {
  bool isValidEmail() {
    return RegExp(r'^[^@]+@[^@]+\.[^@]+').hasMatch(this);
  }
}
```

You can then use this extension in your Flutter application as follows:

```dart
void main() {
  String email = "example@example.com";
  print(email.isValidEmail()); // Outputs: true
}
```

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
## Complete Example

```dart
import 'package:flutter/material.dart';

// Define the main class of the application
void main() {
  runApp(RealFlutter());
}

// Create a StatefulWidget to manage the state of the application
class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

// State class for RealFlutter
class _RealFlutterState extends State<RealFlutter> {
  // Initialize a text controller to capture user input
  final TextEditingController _controller = TextEditingController();
  String _emailValidationMessage = '';

  // Build method to create the UI
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Email Validator')),
        body: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            children: [
              // TextField for user to input email
              TextField(
                controller: _controller,
                decoration: InputDecoration(labelText: 'Enter your email'),
              ),
              SizedBox(height: 20),
              // Button to validate email
              ElevatedButton(
                onPressed: _validateEmail,
                child: Text('Validate Email'),
              ),
              SizedBox(height: 20),
              // Display validation message
              Text(_emailValidationMessage),
            ],
          ),
        ),
      ),
    );
  }

  // Method to validate the email using the extension
  void _validateEmail() {
    String email = _controller.text;
    // Check if the email is valid using the extension method
    if (email.isValidEmail()) {
      setState(() {
        _emailValidationMessage = 'Valid Email!';
      });
    } else {
      setState(() {
        _emailValidationMessage = 'Invalid Email!';
      });
    }
  }
}

// Extension to add email validation method to String class
extension EmailValidation on String {
  bool isValidEmail() {
    // Regular expression to validate email format
    return RegExp(r'^[^@]+@[^@]+\.[^@]+').hasMatch(this);
  }
}

/*
  Application Flow Explanation:
  1. The application starts with the main function, which runs the RealFlutter widget.
  2. RealFlutter is a StatefulWidget that maintains the state of the email input and validation message.
  3. The build method creates a simple UI with a TextField for email input and a button to validate the email.
  4. When the button is pressed, the _validateEmail method is called.
  5. This method retrieves the text from the TextField and checks if it is a valid email using the isValidEmail extension method.
  6. Based on the validation result, it updates the _emailValidationMessage state, which is displayed on the screen.
  7. The extension method is defined at the end, which uses a regular expression to validate the email format.
*/
```
<!-- END_MAIN -->

## Summary

In this blog post, we explored the `extension` package in Flutter, which allows developers to enhance existing classes with new methods and properties. We walked through the setup process, which is straightforward since it is a built-in feature of Dart. A complete example demonstrated how to create a simple email validation application using an extension on the `String` class. This approach not only improves code readability but also encapsulates functionality in a clean and maintainable way.
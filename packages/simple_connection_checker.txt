<-- START_DESCRIPTION -->

# Simple Connection Checker Package
=====================================

The `simple_connection_checker` package is a Flutter library that allows you to check the internet connection status of a device. It provides a simple and efficient way to determine whether the device is connected to the internet or not.

## When to Use
--------------

This package is useful in scenarios where your app requires an active internet connection to function properly. For example:

*   When making API calls to a server
*   When downloading or uploading files
*   When checking for updates or notifications

## Features
------------

*   Checks internet connection status in real-time
*   Supports both Android and iOS platforms
*   Provides a simple and easy-to-use API

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `simple_connection_checker` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:

```yml
dependencies:
  simple_connection_checker: ^1.0.0
```

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:simple_connection_checker/simple_connection_checker.dart';
```

### Step 3: Initialize the Package

Initialize the package by calling the `init` method:

```dart
await SimpleConnectionChecker.init();
```

### Step 4: Check Internet Connection Status

Use the `isConnected` method to check the internet connection status:

```dart
bool isConnected = await SimpleConnectionChecker.isConnected();
```

### Platform-Specific Details

*   **Android:** The package uses the `ConnectivityManager` class to check the internet connection status.
*   **iOS:** The package uses the `Reachability` class to check the internet connection status.

### Required Configurations or Optimizations

*   Make sure to add the necessary permissions to your `AndroidManifest.xml` file:

    ```xml
<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
```

*   For iOS, make sure to add the following lines to your `Info.plist` file:

    ```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:simple_connection_checker/simple_connection_checker.dart';

void main() async {
  // Initialize the package
  await SimpleConnectionChecker.init();

  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Simple Connection Checker Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  bool _isConnected = false;

  @override
  void initState() {
    super.initState();

    // Check internet connection status
    SimpleConnectionChecker.isConnected().then((isConnected) {
      setState(() {
        _isConnected = isConnected;
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Simple Connection Checker Demo'),
      ),
      body: Center(
        child: Text(
          _isConnected ? 'Connected to the internet' : 'Not connected to the internet',
          style: TextStyle(fontSize: 24),
        ),
      ),
    );
  }
}

// Application flow:
// 1. The app initializes the SimpleConnectionChecker package.
// 2. The app checks the internet connection status using the isConnected method.
// 3. The app updates the UI based on the connection status.
// 4. The app displays a message indicating whether the device is connected to the internet or not.

// Final summary:
// The code initializes the SimpleConnectionChecker package, checks the internet connection status, and updates the UI accordingly.
// The app displays a message indicating whether the device is connected to the internet or not.
```

<-- END_MAIN -->
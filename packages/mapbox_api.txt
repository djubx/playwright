```markdown
<!-- START_DESCRIPTION -->
# Overview of the mapbox_api Flutter Package

The `mapbox_api` Flutter package is a powerful tool for integrating Mapbox's mapping services into Flutter applications. It allows developers to leverage Mapbox's extensive features, including customizable maps, geocoding, and routing, providing a rich user experience for location-based applications.

## When to Use This Package
You should consider using the `mapbox_api` package when:
- You need to display interactive maps in your Flutter application.
- You want to implement location-based features such as geocoding or routing.
- You require a customizable map experience with various styles and overlays.

## Key Features
- **Customizable Maps**: Easily change map styles and add custom markers.
- **Geocoding**: Convert addresses into geographic coordinates and vice versa.
- **Routing**: Get directions between locations with detailed route information.
- **Offline Maps**: Support for offline map usage, enhancing user experience in low-connectivity areas.

The `mapbox_api` package is ideal for applications that require advanced mapping capabilities, such as travel apps, delivery services, or any app that relies on geographical data.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Setting Up the mapbox_api Package

To get started with the `mapbox_api` package, follow these steps:

## Step 1: Add Dependency
Add the `mapbox_api` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  mapbox_api: ^latest_version
```

Make sure to replace `latest_version` with the most recent version available on [pub.dev](https://pub.dev/packages/mapbox_api).

## Step 2: Platform-Specific Configuration

### Android
1. Open `android/app/build.gradle` and ensure you have the following permissions:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21 // Minimum SDK version
    }
}
```

2. Add the following permissions in `AndroidManifest.xml`:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>
<uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION"/>
```

### iOS
1. Open `ios/Runner/Info.plist` and add the following keys for location services:

```xml
<key>NSLocationWhenInUseUsageDescription</key>
<string>We need your location to show it on the map.</string>
<key>NSLocationAlwaysUsageDescription</key>
<string>We need your location to show it on the map.</string>
```

2. Ensure you have the latest iOS deployment target set in `ios/Podfile`:

```ruby
platform :ios, '10.0'
```

## Step 3: Obtain a Mapbox Access Token
To use Mapbox services, you need an access token. Sign up at [Mapbox](https://www.mapbox.com/) and create a new access token in your account settings.

## Step 4: Initialize the Package
In your Flutter application, initialize the `mapbox_api` package with your access token:

```dart
import 'package:mapbox_api/mapbox_api.dart';

void main() {
  MapboxApi.init('YOUR_MAPBOX_ACCESS_TOKEN');
  runApp(MyApp());
}
```

Now you are ready to use the `mapbox_api` package in your Flutter application!

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of Using mapbox_api

```dart
import 'package:flutter/material.dart';
import 'package:mapbox_api/mapbox_api.dart';

void main() {
  // Initialize the Mapbox API with your access token
  MapboxApi.init('YOUR_MAPBOX_ACCESS_TOKEN');
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Mapbox API Example',
      home: MapScreen(),
    );
  }
}

class MapScreen extends StatefulWidget {
  @override
  _MapScreenState createState() => _MapScreenState();
}

class _MapScreenState extends State<MapScreen> {
  // Define a variable to hold the map controller
  MapboxMapController? mapController;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Mapbox API Example'),
      ),
      body: MapboxMap(
        onMapCreated: _onMapCreated,
        styleString: MapboxStyles.MAPBOX_STREETS,
        initialCameraPosition: CameraPosition(
          target: LatLng(37.7749, -122.4194), // San Francisco coordinates
          zoom: 10.0,
        ),
      ),
    );
  }

  void _onMapCreated(MapboxMapController controller) {
    // Store the map controller for later use
    mapController = controller;

    // Add a marker on the map
    mapController?.addSymbol(
      SymbolOptions(
        geometry: LatLng(37.7749, -122.4194), // San Francisco coordinates
        iconImage: "assets/icon.png", // Path to your icon image
        iconSize: 1.5,
      ),
    );

    // Example of geocoding an address
    _geocodeAddress("1 Infinite Loop, Cupertino, CA");
  }

  void _geocodeAddress(String address) async {
    // Use the geocoding feature to get coordinates from an address
    var result = await MapboxApi.geocode(address);
    if (result.isNotEmpty) {
      // Move the camera to the geocoded location
      var location = result.first;
      mapController?.animateCamera(
        CameraUpdate.newLatLng(LatLng(location.latitude, location.longitude)),
      );
    }
  }
}

// Application Flow Explanation:
// 1. The app starts by initializing the Mapbox API with the access token.
// 2. The RealFlutter widget is created, which sets up the MaterialApp.
// 3. The MapScreen widget is displayed, containing a MapboxMap widget.
// 4. When the map is created, the _onMapCreated method is called.
// 5. A marker is added to the map at the specified coordinates (San Francisco).
// 6. The app geocodes an address and moves the camera to the resulting location if found.

```
<!-- END_MAIN -->
``` 

This structured blog post provides a comprehensive overview of the `mapbox_api` Flutter package, guiding developers through its features, setup, and practical usage with a complete example.
<-- START_DESCRIPTION -->

# Geocoder Offline Flutter Package
=====================================

The `geocoder_offline` Flutter package provides an offline geocoding solution for converting latitude and longitude coordinates to human-readable addresses and vice versa. This package is ideal for applications that require geocoding functionality without relying on internet connectivity.

### When to Use

*   Offline applications that require geocoding functionality
*   Applications with limited internet connectivity
*   Applications that require fast and efficient geocoding

### Features

*   Offline geocoding for converting latitude and longitude to addresses
*   Offline reverse geocoding for converting addresses to latitude and longitude
*   Support for Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Geocoder Offline Package
===========================================================

### Step 1: Add the Package to Your Flutter Project

Add the `geocoder_offline` package to your Flutter project by adding the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  geocoder_offline: ^1.0.0
```

Then, run `flutter pub get` to get the package.

### Step 2: Import the Package

Import the `geocoder_offline` package in your Dart file:

```dart
import 'package:geocoder_offline/geocoder_offline.dart';
```

### Step 3: Initialize the Geocoder

Initialize the geocoder by calling the `init` method:

```dart
GeocoderOffline geocoder = GeocoderOffline();
await geocoder.init();
```

### Step 4: Perform Geocoding

Perform geocoding by calling the `geocode` method:

```dart
List<Address> addresses = await geocoder.geocode(latitude: 37.7749, longitude: -122.4194);
```

### Step 5: Perform Reverse Geocoding

Perform reverse geocoding by calling the `reverseGeocode` method:

```dart
List<Address> addresses = await geocoder.reverseGeocode(address: '1600 Amphitheatre Parkway, Mountain View, CA');
```

### Platform-Specific Details

*   Android: The package uses the Android NDK to perform geocoding. Make sure to add the following configuration to your `android/app/build.gradle` file:

```groovy
android {
    ...
    defaultConfig {
        ...
        ndk {
            abiFilters 'armeabi-v7l', 'arm64-v8a', 'x86', 'x86_64'
        }
    }
}
```

*   iOS: The package uses the Core Location framework to perform geocoding. Make sure to add the following configuration to your `ios/Runner/Info.plist` file:

```xml
<key>NSLocationWhenInUseUsageDescription</key>
<string>This app needs access to location to work properly</string>
<key>NSLocationAlwaysAndWhenInUseUsageDescription</key>
<string>This app needs access to location to work properly</string>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:geocoder_offline/geocoder_offline.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Geocoder Offline Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _geocoder = GeocoderOffline();
  final _latitudeController = TextEditingController();
  final _longitudeController = TextEditingController();
  final _addressController = TextEditingController();
  String _result = '';

  @override
  void initState() {
    super.initState();
    _initGeocoder();
  }

  Future<void> _initGeocoder() async {
    await _geocoder.init();
  }

  Future<void> _geocode() async {
    final latitude = double.parse(_latitudeController.text);
    final longitude = double.parse(_longitudeController.text);
    final addresses = await _geocoder.geocode(latitude: latitude, longitude: longitude);
    setState(() {
      _result = addresses.map((address) => address.toString()).join('\n');
    });
  }

  Future<void> _reverseGeocode() async {
    final address = _addressController.text;
    final addresses = await _geocoder.reverseGeocode(address: address);
    setState(() {
      _result = addresses.map((address) => address.toString()).join('\n');
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Geocoder Offline Demo'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            TextField(
              controller: _latitudeController,
              decoration: InputDecoration(
                labelText: 'Latitude',
                border: OutlineInputBorder(),
              ),
            ),
            SizedBox(height: 16),
            TextField(
              controller: _longitudeController,
              decoration: InputDecoration(
                labelText: 'Longitude',
                border: OutlineInputBorder(),
              ),
            ),
            SizedBox(height: 16),
            ElevatedButton(
              onPressed: _geocode,
              child: Text('Geocode'),
            ),
            SizedBox(height: 16),
            TextField(
              controller: _addressController,
              decoration: InputDecoration(
                labelText: 'Address',
                border: OutlineInputBorder(),
              ),
            ),
            SizedBox(height: 16),
            ElevatedButton(
              onPressed: _reverseGeocode,
              child: Text('Reverse Geocode'),
            ),
            SizedBox(height: 16),
            Text(_result),
          ],
        ),
      ),
    );
  }
}

// The app starts by initializing the geocoder.
// The user can then enter a latitude and longitude to perform geocoding.
// The user can also enter an address to perform reverse geocoding.
// The result of the geocoding or reverse geocoding is displayed on the screen.
// The app uses the GeocoderOffline package to perform geocoding and reverse geocoding.
// The app also uses the TextField widget to get the user input and the ElevatedButton widget to perform the geocoding and reverse geocoding.
```

<-- END_MAIN -->
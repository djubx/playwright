<-- START_DESCRIPTION -->

# is_ios_app_on_mac Flutter Package
=====================================

The `is_ios_app_on_mac` Flutter package is a utility library that allows developers to detect whether their iOS app is running on a Mac device. This package is particularly useful for developers who want to provide a different user experience or functionality for their app when it's running on a Mac.

## Features

*   Detects whether the app is running on a Mac device
*   Provides a simple and easy-to-use API

## When to Use

You can use this package in scenarios where you want to:

*   Provide a different UI or UX for Mac users
*   Optimize your app's performance for Mac devices
*   Integrate Mac-specific features or functionality

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
------------------

To use the `is_ios_app_on_mac` package, follow these steps:

### Step 1: Add the Package to Your Project

Add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  is_ios_app_on_mac: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:is_ios_app_on_mac/is_ios_app_on_mac.dart';
```

### Step 3: Use the Package

Use the `IsIosAppOnMac` class to detect whether your app is running on a Mac device:

```dart
bool isOnMac = await IsIosAppOnMac.isAppOnMac();
if (isOnMac) {
  // App is running on a Mac device
} else {
  // App is not running on a Mac device
}
```

### Platform-Specific Details

*   **iOS:** This package uses the `UIDevice` class to detect whether the app is running on a Mac device.
*   **Android:** This package is not applicable for Android devices, as it's designed specifically for iOS apps running on Mac devices.

### Required Configurations or Optimizations

None required.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:is_ios_app_on_mac/is_ios_app_on_mac.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Is iOS App on Mac Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  bool _isOnMac = false;

  @override
  void initState() {
    super.initState();
    _checkIfAppIsOnMac();
  }

  Future<void> _checkIfAppIsOnMac() async {
    // Use the IsIosAppOnMac class to detect whether the app is running on a Mac device
    bool isOnMac = await IsIosAppOnMac.isAppOnMac();
    setState(() {
      _isOnMac = isOnMac;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Is iOS App on Mac Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              _isOnMac ? 'App is running on a Mac device' : 'App is not running on a Mac device',
              style: TextStyle(fontSize: 24),
            ),
          ],
        ),
      ),
    );
  }
}

// Application flow:
// 1. The app starts and runs the main function.
// 2. The main function creates a new instance of the MyApp widget.
// 3. The MyApp widget builds the app's UI, including the MyHomePage widget.
// 4. The MyHomePage widget checks whether the app is running on a Mac device using the IsIosAppOnMac class.
// 5. If the app is running on a Mac device, the MyHomePage widget displays a message indicating this.
// 6. If the app is not running on a Mac device, the MyHomePage widget displays a different message.

// Summary: This code demonstrates how to use the is_ios_app_on_mac package to detect whether an iOS app is running on a Mac device. The app's UI changes depending on whether it's running on a Mac device or not.
```

<-- END_MAIN -->
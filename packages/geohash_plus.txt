<-- START_DESCRIPTION -->

# Geohash Plus Flutter Package
The geohash_plus Flutter package is a powerful library for geohashing, a technique used to encode latitude and longitude coordinates into a compact string. This package provides an efficient way to store and retrieve location data, making it ideal for applications that require location-based services.

## Key Features

*   Geohashing: Encode latitude and longitude coordinates into a compact string
*   Reverse Geohashing: Decode geohash strings back into latitude and longitude coordinates
*   Neighbor Search: Find neighboring geohashes for a given geohash
*   Boundary Search: Find the boundary geohashes for a given geohash

## Use Cases

*   Location-based services: Store and retrieve location data efficiently
*   Proximity search: Find nearby locations using geohash neighbor search
*   Boundary search: Find locations within a specific boundary using geohash boundary search

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Geohash Plus Flutter Package

To use the geohash_plus Flutter package, follow these steps:

1.  Add the package to your pubspec.yaml file:

    ```yml
dependencies:
  flutter:
    sdk: flutter
  geohash_plus: ^1.0.0
```

2.  Run `flutter pub get` to install the package.

## Platform-Specific Details

The geohash_plus package works on both Android and iOS platforms. No additional configurations are required.

## Required Configurations or Optimizations

No additional configurations or optimizations are required to use the geohash_plus package.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:geohash_plus/geohash_plus.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Geohash Plus Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _latitudeController = TextEditingController();
  final _longitudeController = TextEditingController();
  final _geohashController = TextEditingController();
  final _neighborController = TextEditingController();
  final _boundaryController = TextEditingController();

  void _encodeGeohash() {
    // Encode latitude and longitude into geohash
    final geohash = Geohash.encode(
      double.parse(_latitudeController.text),
      double.parse(_longitudeController.text),
      9,
    );
    _geohashController.text = geohash;
  }

  void _decodeGeohash() {
    // Decode geohash into latitude and longitude
    final latLong = Geohash.decode(_geohashController.text);
    _latitudeController.text = latLong.latitude.toString();
    _longitudeController.text = latLong.longitude.toString();
  }

  void _findNeighbors() {
    // Find neighboring geohashes
    final neighbors = Geohash.neighbors(_geohashController.text);
    _neighborController.text = neighbors.join(', ');
  }

  void _findBoundary() {
    // Find boundary geohashes
    final boundary = Geohash.boundary(_geohashController.text);
    _boundaryController.text = boundary.join(', ');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Geohash Plus Demo'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            TextField(
              controller: _latitudeController,
              decoration: InputDecoration(
                labelText: 'Latitude',
              ),
            ),
            TextField(
              controller: _longitudeController,
              decoration: InputDecoration(
                labelText: 'Longitude',
              ),
            ),
            TextField(
              controller: _geohashController,
              decoration: InputDecoration(
                labelText: 'Geohash',
              ),
            ),
            SizedBox(height: 16),
            Row(
              children: [
                ElevatedButton(
                  onPressed: _encodeGeohash,
                  child: Text('Encode Geohash'),
                ),
                SizedBox(width: 16),
                ElevatedButton(
                  onPressed: _decodeGeohash,
                  child: Text('Decode Geohash'),
                ),
              ],
            ),
            SizedBox(height: 16),
            TextField(
              controller: _neighborController,
              decoration: InputDecoration(
                labelText: 'Neighbors',
              ),
            ),
            SizedBox(height: 16),
            ElevatedButton(
              onPressed: _findNeighbors,
              child: Text('Find Neighbors'),
            ),
            SizedBox(height: 16),
            TextField(
              controller: _boundaryController,
              decoration: InputDecoration(
                labelText: 'Boundary',
              ),
            ),
            SizedBox(height: 16),
            ElevatedButton(
              onPressed: _findBoundary,
              child: Text('Find Boundary'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user inputs the latitude and longitude values.
// 2. The user clicks the "Encode Geohash" button to encode the latitude and longitude into a geohash.
// 3. The encoded geohash is displayed in the geohash text field.
// 4. The user can click the "Decode Geohash" button to decode the geohash back into latitude and longitude values.
// 5. The user can click the "Find Neighbors" button to find the neighboring geohashes.
// 6. The neighboring geohashes are displayed in the neighbors text field.
// 7. The user can click the "Find Boundary" button to find the boundary geohashes.
// 8. The boundary geohashes are displayed in the boundary text field.

// In summary, this application demonstrates the usage of the geohash_plus package to encode and decode geohashes, find neighboring geohashes, and find boundary geohashes.

```

<-- END_MAIN -->
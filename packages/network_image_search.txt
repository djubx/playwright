<-- START_DESCRIPTION -->

# Network Image Search Flutter Package
=====================================

The `network_image_search` Flutter package allows you to easily search for images on the internet and display them in your Flutter app. This package is perfect for apps that require image searching, such as image editors, meme generators, or social media apps.

### Features

* Search for images using a query string
* Display search results in a grid or list view
* Support for multiple image sources (e.g. Google Images, Bing Images)
* Customizable search parameters (e.g. image size, color, type)

### When to Use This Package

* When you need to add image search functionality to your Flutter app
* When you want to display a grid or list of images based on a search query
* When you need to customize the search parameters for image searching

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Package
=============================================

### Step 1: Add the Package to Your Pubspec.yaml File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  network_image_search: ^1.0.0
```
Then run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:network_image_search/network_image_search.dart';
```
### Step 3: Set Up the Image Search

Create an instance of the `NetworkImageSearch` class:
```dart
NetworkImageSearch _imageSearch = NetworkImageSearch();
```
### Step 4: Search for Images

Use the `search` method to search for images:
```dart
_imageSearch.search(query: 'cats').then((results) {
  // Display the search results
});
```
### Platform-Specific Details

* Android: Make sure to add the `android.permission.INTERNET` permission to your `AndroidManifest.xml` file.
* iOS: Make sure to add the `NSAppTransportSecurity` key to your `Info.plist` file.

### Configurations and Optimizations

* You can customize the search parameters by passing a `SearchOptions` object to the `search` method.
* You can also use the `cancel` method to cancel an ongoing search.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:network_image_search/network_image_search.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Network Image Search Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  NetworkImageSearch _imageSearch = NetworkImageSearch();
  List<NetworkImage> _searchResults = [];

  // Step 1: Create a text field to input the search query
  final _searchController = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Network Image Search Demo'),
      ),
      body: Column(
        children: [
          // Step 2: Create a text field to input the search query
          Padding(
            padding: const EdgeInsets.all(16.0),
            child: TextField(
              controller: _searchController,
              decoration: InputDecoration(
                labelText: 'Search Query',
                border: OutlineInputBorder(),
              ),
            ),
          ),
          // Step 3: Create a button to start the search
          ElevatedButton(
            onPressed: () {
              // Step 4: Start the search
              _imageSearch.search(query: _searchController.text).then((results) {
                // Step 5: Display the search results
                setState(() {
                  _searchResults = results;
                });
              });
            },
            child: Text('Search'),
          ),
          // Step 6: Display the search results
          Expanded(
            child: GridView.builder(
              gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                crossAxisCount: 3,
              ),
              itemCount: _searchResults.length,
              itemBuilder: (context, index) {
                return Image.network(_searchResults[index].url);
              },
            ),
          ),
        ],
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user inputs a search query in the text field.
// 2. The user clicks the "Search" button.
// 3. The search query is passed to the `NetworkImageSearch` instance.
// 4. The `NetworkImageSearch` instance starts the search.
// 5. The search results are received and stored in the `_searchResults` list.
// 6. The search results are displayed in a grid view.

// Note: This is a basic example and does not include error handling or other features that you may want to add to a real-world application.
```

<-- END_MAIN -->
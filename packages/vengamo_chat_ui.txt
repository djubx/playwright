<-- START_DESCRIPTION -->

# Vengamo Chat UI Flutter Package
=====================================

The `vengamo_chat_ui` Flutter package provides a customizable and easy-to-use chat interface for your Flutter applications. It supports various features such as text messaging, image sharing, and voice notes.

### When to Use This Package

This package is ideal for applications that require a chat interface, such as:

* Social media apps
* Messaging apps
* Customer support apps
* Online community forums

### Features

* Customizable chat interface
* Text messaging
* Image sharing
* Voice notes
* Support for multiple chat participants

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Vengamo Chat UI Package
==========================================

To use the `vengamo_chat_ui` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  vengamo_chat_ui: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:vengamo_chat_ui/vengamo_chat_ui.dart';
```
### Step 3: Initialize the Chat Interface

Create a new instance of the `VengamoChatUI` class and pass the required parameters:
```dart
VengamoChatUI chatUI = VengamoChatUI(
  chatParticipants: [
    ChatParticipant(
      id: 'participant1',
      name: 'John Doe',
      avatar: 'https://example.com/avatar1.jpg',
    ),
    ChatParticipant(
      id: 'participant2',
      name: 'Jane Doe',
      avatar: 'https://example.com/avatar2.jpg',
    ),
  ],
);
```
### Step 4: Customize the Chat Interface (Optional)

You can customize the chat interface by passing additional parameters to the `VengamoChatUI` constructor:
```dart
VengamoChatUI chatUI = VengamoChatUI(
  // ...
  backgroundColor: Colors.blue,
  textColor: Colors.white,
  // ...
);
```
### Platform-Specific Details

* Android: Make sure to add the `android.permission.INTERNET` permission to your `AndroidManifest.xml` file.
* iOS: Make sure to add the `NSAppTransportSecurity` key to your `Info.plist` file.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:vengamo_chat_ui/vengamo_chat_ui.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Vengamo Chat UI Demo',
      home: ChatScreen(),
    );
  }
}

class ChatScreen extends StatefulWidget {
  @override
  _ChatScreenState createState() => _ChatScreenState();
}

class _ChatScreenState extends State<ChatScreen> {
  VengamoChatUI _chatUI;

  @override
  void initState() {
    super.initState();
    _chatUI = VengamoChatUI(
      chatParticipants: [
        ChatParticipant(
          id: 'participant1',
          name: 'John Doe',
          avatar: 'https://example.com/avatar1.jpg',
        ),
        ChatParticipant(
          id: 'participant2',
          name: 'Jane Doe',
          avatar: 'https://example.com/avatar2.jpg',
        ),
      ],
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Vengamo Chat UI Demo'),
      ),
      body: _chatUI,
    );
  }
}
```

// This is the main entry point of the application.
// The `MyApp` widget is the root of the application.
// It uses the `MaterialApp` widget to provide a material design theme.
// The `home` property is set to the `ChatScreen` widget, which is the main screen of the application.

// The `ChatScreen` widget is a stateful widget that contains the chat interface.
// It uses the `VengamoChatUI` widget to provide the chat interface.
// The `chatParticipants` property is set to a list of `ChatParticipant` objects, which represent the participants in the chat.

// The `VengamoChatUI` widget is a customizable chat interface that provides a text input field and a list of chat messages.
// It uses the `ChatParticipant` objects to display the names and avatars of the participants in the chat.

// The application flow is as follows:
// 1. The user opens the application and is presented with the chat interface.
// 2. The user can enter text into the text input field and send it to the other participants in the chat.
// 3. The chat interface displays the chat messages in a list, with the most recent message at the bottom.
// 4. The user can customize the chat interface by changing the background color, text color, and other properties.

<-- END_MAIN -->
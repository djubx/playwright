<-- START_DESCRIPTION -->

# Flutter Google Maps Webservices Package
=====================================

The `flutter_google_maps_webservices` package is a Flutter library that provides a set of APIs for interacting with Google Maps Web Services. It allows developers to access Google Maps data, such as directions, places, and geocoding, in their Flutter applications.

## When to Use This Package
---------------------------

This package is useful when you need to:

* Get directions between two or more locations
* Search for places and retrieve their details
* Geocode addresses to get their latitude and longitude
* Reverse geocode coordinates to get the address

## Features
------------

* Directions API: Get directions between two or more locations
* Places API: Search for places and retrieve their details
* Geocoding API: Geocode addresses to get their latitude and longitude
* Reverse Geocoding API: Reverse geocode coordinates to get the address

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `flutter_google_maps_webservices` package, you need to add it to your `pubspec.yaml` file:

```yml
dependencies:
  flutter_google_maps_webservices: ^0.0.1
```

Then, run `flutter pub get` to get the package.

## Platform-Specific Details
---------------------------

### Android

To use the package on Android, you need to add the following lines to your `AndroidManifest.xml` file:

```xml
<application>
  ...
  <meta-data
    android:name="com.google.android.geo.API_KEY"
    android:value="YOUR_API_KEY" />
</application>
```

Replace `YOUR_API_KEY` with your actual Google Maps API key.

### iOS

To use the package on iOS, you need to add the following lines to your `Info.plist` file:

```xml
<key>NSLocationWhenInUseUsageDescription</key>
<string>This app needs access to location to work properly</string>
<key>NSLocationAlwaysAndWhenInUseUsageDescription</key>
<string>This app needs access to location to work properly</string>
```

## Configurations and Optimizations
-----------------------------------

You can configure the package by creating a `GoogleMapsWebservices` instance and passing it to the `RealFlutter` class:

```dart
GoogleMapsWebservices _googleMapsWebservices = GoogleMapsWebservices(
  apiKey: 'YOUR_API_KEY',
  baseUrl: 'https://maps.googleapis.com/maps/api/',
);

RealFlutter _realFlutter = RealFlutter(_googleMapsWebservices);
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_google_maps_webservices/flutter_google_maps_webservices.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Google Maps Webservices Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  GoogleMapsWebservices _googleMapsWebservices;
  RealFlutter _realFlutter;

  @override
  void initState() {
    super.initState();
    _googleMapsWebservices = GoogleMapsWebservices(
      apiKey: 'YOUR_API_KEY',
      baseUrl: 'https://maps.googleapis.com/maps/api/',
    );
    _realFlutter = RealFlutter(_googleMapsWebservices);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Google Maps Webservices Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: _getDirections,
              child: Text('Get Directions'),
            ),
            ElevatedButton(
              onPressed: _searchPlaces,
              child: Text('Search Places'),
            ),
            ElevatedButton(
              onPressed: _geocodeAddress,
              child: Text('Geocode Address'),
            ),
            ElevatedButton(
              onPressed: _reverseGeocodeCoordinates,
              child: Text('Reverse Geocode Coordinates'),
            ),
          ],
        ),
      ),
    );
  }

  void _getDirections() async {
    // Get directions between two points
    DirectionsResponse response = await _realFlutter.getDirections(
      origin: 'New York, NY',
      destination: 'Los Angeles, CA',
    );
    print(response.routes[0].overviewPolyline.points);
  }

  void _searchPlaces() async {
    // Search for places
    PlacesResponse response = await _realFlutter.searchPlaces(
      query: 'coffee shops near me',
    );
    print(response.results[0].name);
  }

  void _geocodeAddress() async {
    // Geocode an address
    GeocodingResponse response = await _realFlutter.geocodeAddress(
      address: '1600 Amphitheatre Parkway, Mountain View, CA',
    );
    print(response.results[0].geometry.location.lat);
  }

  void _reverseGeocodeCoordinates() async {
    // Reverse geocode coordinates
    ReverseGeocodingResponse response = await _realFlutter.reverseGeocodeCoordinates(
      lat: 37.4223406,
      lng: -122.0855602,
    );
    print(response.results[0].formattedAddress);
  }
}

// The application flow is as follows:
// 1. The user opens the app and is presented with a screen containing four buttons.
// 2. The user clicks on a button to perform an action (e.g. get directions, search places, etc.).
// 3. The app sends a request to the Google Maps Webservices API to perform the action.
// 4. The API returns a response, which is then processed by the app.
// 5. The app displays the results to the user.
```

<-- END_MAIN -->
```markdown
<-- START_DESCRIPTION -->

# Overview of the `desktop_multi_window` Flutter Package

The `desktop_multi_window` package is a powerful tool for Flutter developers looking to enhance their desktop applications with multi-window capabilities. This package allows you to create and manage multiple windows within a single Flutter application, providing a more dynamic and flexible user experience.

## When to Use

- **Complex Applications**: Ideal for applications that require multiple views or panels, such as IDEs, design tools, or data analysis software.
- **Enhanced User Experience**: Useful for applications that benefit from having separate windows for different tasks, improving user productivity.
- **Cross-Platform Consistency**: Ensures a consistent multi-window experience across different desktop platforms like Windows, macOS, and Linux.

## Features

- **Window Management**: Create, close, and manage multiple windows easily.
- **Communication**: Send messages between windows to synchronize data or trigger actions.
- **Customization**: Customize window properties such as size, position, and title.
- **Platform Support**: Supports major desktop platforms, ensuring broad usability.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the `desktop_multi_window` Package

In this tutorial, we will walk through the process of setting up the `desktop_multi_window` package in a Flutter project and demonstrate how to use its features effectively.

## Setup Process

1. **Add Dependency**: First, add the `desktop_multi_window` package to your `pubspec.yaml` file.

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     desktop_multi_window: ^0.1.0
   ```

2. **Platform-Specific Configuration**:
   - **Windows**: Ensure you have the necessary Windows development environment set up. No additional configuration is required for Windows.
   - **macOS**: Modify the `macos/Runner/Info.plist` to allow multiple windows.
   - **Linux**: Ensure your development environment supports GTK, as it is required for Linux desktop applications.

3. **Import the Package**: Import the package in your Dart files where you plan to use it.

   ```dart
   import 'package:desktop_multi_window/desktop_multi_window.dart';
   ```

## Using the Package

- **Creating a New Window**: Use the `createWindow` method to open a new window.

  ```dart
  Future<void> openNewWindow() async {
    final window = await RealFlutter.createWindow();
    window.show();
  }
  ```

- **Sending Messages**: Communicate between windows using the `sendMessage` method.

  ```dart
  window.sendMessage({'action': 'update', 'data': 'New Data'});
  ```

- **Handling Messages**: Listen for messages in each window.

  ```dart
  RealFlutter.onMessage.listen((message) {
    // Handle incoming messages
  });
  ```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:desktop_multi_window/desktop_multi_window.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Multi-Window Demo',
      home: MainWindow(),
    );
  }
}

class MainWindow extends StatelessWidget {
  // Main window widget
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Main Window'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () async {
            // Create and show a new window
            final window = await RealFlutter.createWindow();
            window.show();
          },
          child: Text('Open New Window'),
        ),
      ),
    );
  }
}

class SecondaryWindow extends StatelessWidget {
  // Secondary window widget
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Secondary Window'),
      ),
      body: Center(
        child: Text('This is a secondary window'),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The application starts with the `MyApp` widget, which sets up the main window using `MainWindow`.
// 2. `MainWindow` contains a button that, when pressed, creates a new window using `RealFlutter.createWindow()`.
// 3. The new window is displayed using the `show()` method.
// 4. `SecondaryWindow` is a placeholder for the content of the new window, demonstrating how to set up additional windows.
// 5. The application can handle messages between windows, allowing for dynamic updates and interactions.

```

<-- END_MAIN -->
```
```markdown
<!-- START_DESCRIPTION -->
# Confirmation Success Flutter Package

The `confirmation_success` Flutter package is designed to provide a seamless user experience when confirming actions within an application. This package is particularly useful in scenarios where user confirmation is critical, such as deleting an item, submitting a form, or any action that requires user validation before proceeding.

## When to Use This Package

You should consider using the `confirmation_success` package in the following scenarios:

- **User Actions**: When you need to confirm user actions that could lead to significant changes, such as deleting data or making purchases.
- **Form Submissions**: To ensure that users are aware of the consequences of their submissions, especially in forms that modify or delete existing data.
- **Critical Operations**: In applications where user confirmation is necessary to prevent accidental actions.

## Features

- **Customizable Dialogs**: The package allows you to create customizable confirmation dialogs that can be tailored to fit the design of your application.
- **Easy Integration**: It integrates smoothly with existing Flutter applications, requiring minimal setup.
- **Platform Support**: The package supports both Android and iOS platforms, ensuring a consistent user experience across devices.

By leveraging the `confirmation_success` package, developers can enhance user interactions and ensure that critical actions are confirmed, thereby reducing the likelihood of errors.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Confirmation Success Package

## Step 1: Adding the Dependency

To get started with the `confirmation_success` package, you need to add it to your `pubspec.yaml` file. Open your `pubspec.yaml` and add the following line under dependencies:

```yaml
dependencies:
  confirmation_success: ^1.0.0
```

Make sure to run `flutter pub get` to install the package.

## Step 2: Importing the Package

In your Dart file, import the package:

```dart
import 'package:confirmation_success/confirmation_success.dart';
```

## Step 3: Using the Package

### Android Configuration

For Android, ensure that your `AndroidManifest.xml` file has the necessary permissions if your confirmation actions involve sensitive data or require specific features.

### iOS Configuration

For iOS, you may need to adjust your `Info.plist` file to include any necessary permissions or configurations based on your app's requirements.

## Step 4: Implementing Confirmation Dialogs

You can now implement confirmation dialogs in your application. Hereâ€™s a simple example of how to use the `ConfirmationSuccess` class:

```dart
void showConfirmationDialog(BuildContext context) {
  ConfirmationSuccess(
    title: 'Confirm Action',
    message: 'Are you sure you want to proceed?',
    onConfirm: () {
      // Action to perform on confirmation
      print('Action confirmed!');
    },
    onCancel: () {
      // Action to perform on cancellation
      print('Action cancelled!');
    },
  ).show(context);
}
```

This function can be called when a user attempts to perform a critical action, such as deleting an item.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using the Confirmation Success Package

```dart
import 'package:flutter/material.dart';
import 'package:confirmation_success/confirmation_success.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Confirmation Success Example',
      home: HomeScreen(),
    );
  }
}

class HomeScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Confirmation Success Example'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Show confirmation dialog when button is pressed
            showConfirmationDialog(context);
          },
          child: Text('Delete Item'),
        ),
      ),
    );
  }

  void showConfirmationDialog(BuildContext context) {
    // Create a confirmation dialog
    ConfirmationSuccess(
      title: 'Confirm Deletion',
      message: 'Are you sure you want to delete this item?',
      onConfirm: () {
        // Action to perform on confirmation
        print('Item deleted!');
        // You can also update the UI or state here
      },
      onCancel: () {
        // Action to perform on cancellation
        print('Deletion cancelled!');
      },
    ).show(context); // Show the dialog
  }
}

// Application Flow Explanation:
// 1. The app starts with the MyApp class, which sets up the MaterialApp.
// 2. The HomeScreen widget is displayed, containing a button labeled "Delete Item."
// 3. When the button is pressed, the showConfirmationDialog function is called.
// 4. The ConfirmationSuccess dialog is created with a title and message.
// 5. If the user confirms, the onConfirm callback is executed, printing 'Item deleted!'.
// 6. If the user cancels, the onCancel callback is executed, printing 'Deletion cancelled!'.
```
<!-- END_MAIN -->
```

This structured blog provides a comprehensive overview of the `confirmation_success` Flutter package, guiding users through its features, setup, and practical implementation with detailed code examples and explanations.
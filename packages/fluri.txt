```markdown
<!-- START_DESCRIPTION -->
# Fluri: A Powerful Flutter Package for URL Handling

Fluri is a Flutter package designed to simplify the handling of URLs in your applications. It provides a robust way to parse, manipulate, and construct URLs, making it an essential tool for developers who need to work with web links, deep links, or any form of URL data.

## When to Use Fluri
- **Deep Linking**: If your app requires deep linking capabilities, Fluri can help you parse and manage the incoming URLs effectively.
- **URL Manipulation**: When you need to construct or modify URLs dynamically based on user input or app state.
- **Data Extraction**: Extracting query parameters or path segments from URLs for further processing.

## Key Features
- **URL Parsing**: Easily parse URLs into their components (scheme, host, path, query parameters).
- **URL Construction**: Build URLs from components, ensuring proper encoding and formatting.
- **Query Parameter Management**: Add, remove, or modify query parameters effortlessly.
- **Path Manipulation**: Handle path segments with ease, allowing for dynamic routing in your app.

Fluri is a versatile package that can enhance your Flutter applications by providing a straightforward approach to URL management.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Fluri

## Installation
To get started with Fluri, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  fluri: ^1.0.0
```

Run `flutter pub get` to install the package.

## Platform-Specific Configuration
### Android
For Android, ensure that your `AndroidManifest.xml` is configured to handle deep links. Add an intent filter to your activity:

```xml
<intent-filter>
    <action android:name="android.intent.action.VIEW" />
    <category android:name="android.intent.category.DEFAULT" />
    <category android:name="android.intent.category.BROWSABLE" />
    <data android:scheme="your_scheme" android:host="your_host" />
</intent-filter>
```

### iOS
For iOS, you need to configure your `Info.plist` to support URL schemes:

```xml
<key>CFBundleURLTypes</key>
<array>
    <dict>
        <key>CFBundleURLSchemes</key>
        <array>
            <string>your_scheme</string>
        </array>
    </dict>
</array>
```

## Using Fluri
Once you have installed the package and configured your platforms, you can start using Fluri in your Flutter application.

### Basic Usage Example
Hereâ€™s a simple example of how to use Fluri to parse a URL and manipulate its components:

```dart
import 'package:flutter/material.dart';
import 'package:fluri/fluri.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Example URL
    final url = 'https://example.com/path?query=1&other=2';
    
    // Parse the URL
    final uri = Fluri.parse(url);
    
    // Access components
    final scheme = uri.scheme; // 'https'
    final host = uri.host; // 'example.com'
    final path = uri.path; // '/path'
    final queryParams = uri.queryParameters; // {'query': '1', 'other': '2'}

    return Scaffold(
      appBar: AppBar(title: Text('Fluri Example')),
      body: Center(
        child: Text('Parsed URL: $url\nScheme: $scheme\nHost: $host\nPath: $path\nQuery Params: $queryParams'),
      ),
    );
  }
}
```

This example demonstrates how to parse a URL and access its components using Fluri. You can further manipulate the URL as needed.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Fluri in Action

```dart
import 'package:flutter/material.dart';
import 'package:fluri/fluri.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Example URL to be parsed
    final url = 'https://example.com/path?query=1&other=2';
    
    // Parse the URL using Fluri
    final uri = Fluri.parse(url);
    
    // Accessing different components of the URL
    final scheme = uri.scheme; // Extracting the scheme (e.g., 'https')
    final host = uri.host; // Extracting the host (e.g., 'example.com')
    final path = uri.path; // Extracting the path (e.g., '/path')
    final queryParams = uri.queryParameters; // Extracting query parameters as a map

    // Constructing a new URL by modifying the query parameters
    final newUri = uri.replace(queryParameters: {
      'query': '2', // Modifying existing parameter
      'newParam': '3' // Adding a new parameter
    });

    return Scaffold(
      appBar: AppBar(title: Text('Fluri Example')),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text('Parsed URL: $url'),
            Text('Scheme: $scheme'),
            Text('Host: $host'),
            Text('Path: $path'),
            Text('Query Params: $queryParams'),
            Text('New URL: ${newUri.toString()}'), // Displaying the new URL
          ],
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts by running the main function, which initializes the RealFlutter widget.
// 2. Inside the RealFlutter widget, a sample URL is defined.
// 3. The URL is parsed using Fluri, extracting its components like scheme, host, path, and query parameters.
// 4. A new URL is constructed by modifying the existing query parameters and adding a new one.
// 5. The parsed components and the new URL are displayed in the app's UI, allowing users to see the results of the URL manipulation.
```
<!-- END_MAIN -->
```

### Summary
In this blog post, we explored the Fluri package, which simplifies URL handling in Flutter applications. We covered its installation, platform-specific configurations, and provided a practical example demonstrating its capabilities. The complete example showcased how to parse a URL, access its components, and manipulate query parameters, making Fluri a valuable tool for any Flutter developer working with URLs.
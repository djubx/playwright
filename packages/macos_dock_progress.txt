# macos_dock_progress Flutter Package

<!-- START_DESCRIPTION -->
## Description

The `macos_dock_progress` Flutter package is designed to provide developers with the ability to display progress indicators in the macOS dock. This package is particularly useful for applications that require background processing or long-running tasks, allowing users to see the status of these tasks directly from the dock without needing to switch back to the application window.

### When to Use

You might consider using `macos_dock_progress` in scenarios such as:
- Downloading files or data in the background.
- Performing long computations or data processing tasks.
- Any application where user feedback on task completion is essential.

### Features

- **Dock Progress Indicator**: Displays a progress bar in the macOS dock.
- **Customizable**: Allows customization of the progress appearance.
- **Easy Integration**: Simple API for integrating with existing Flutter applications.
- **Automatic Updates**: Automatically updates the progress based on the task's state.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
## Tutorial

### Installation

To use the `macos_dock_progress` package, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  macos_dock_progress: ^1.0.0
```

After adding the dependency, run `flutter pub get` to install the package.

### Setup

1. **macOS Configuration**: Ensure that your Flutter project is set up for macOS development. You can create a new Flutter project with macOS support by running:
   ```bash
   flutter create my_flutter_app --platforms=macos
   ```

2. **Import the Package**: In your Dart file, import the package:
   ```dart
   import 'package:macos_dock_progress/macos_dock_progress.dart';
   ```

3. **Using the Package**: You can start using the package by initializing the progress indicator and updating it as needed. Hereâ€™s a simple example of how to do this:

   ```dart
   void main() {
     // Initialize the dock progress
     MacosDockProgress.init();

     // Start a long-running task
     for (int i = 0; i <= 100; i++) {
       // Update the dock progress
       MacosDockProgress.setProgress(i / 100);
       // Simulate a delay
       sleep(Duration(milliseconds: 50));
     }

     // Complete the progress
     MacosDockProgress.setProgress(1.0);
   }
   ```

### Platform-Specific Details

- **macOS**: The package is specifically designed for macOS applications. Ensure that your app has the necessary permissions to display dock notifications.
- **iOS and Android**: This package does not support iOS or Android, as it is tailored for macOS applications only.

### Optimizations

- **Performance**: Avoid updating the progress too frequently to prevent performance issues. A good practice is to update the progress every few milliseconds or after significant task milestones.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
## Complete Example

```dart
import 'dart:async'; // Importing async for Future and Timer
import 'dart:io'; // Importing for sleep function
import 'package:flutter/material.dart'; // Importing Flutter material package
import 'package:macos_dock_progress/macos_dock_progress.dart'; // Importing the macos_dock_progress package

void main() {
  runApp(MyApp()); // Running the main application
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'macOS Dock Progress Example',
      home: Scaffold(
        appBar: AppBar(
          title: Text('macOS Dock Progress Example'),
        ),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              // Start the long-running task when the button is pressed
              startLongRunningTask();
            },
            child: Text('Start Task'),
          ),
        ),
      ),
    );
  }

  void startLongRunningTask() {
    // Initialize the dock progress
    MacosDockProgress.init();

    // Simulate a long-running task
    for (int i = 0; i <= 100; i++) {
      // Update the dock progress
      MacosDockProgress.setProgress(i / 100);
      // Simulate a delay
      sleep(Duration(milliseconds: 50));
    }

    // Complete the progress
    MacosDockProgress.setProgress(1.0);
  }
}
```

### Application Flow Explanation

// The application starts by running the `MyApp` widget.
// The `MyApp` widget builds a simple UI with an AppBar and a Center widget containing a button.
// When the button is pressed, it triggers the `startLongRunningTask` function.
// Inside this function, the dock progress is initialized using `MacosDockProgress.init()`.
// A for loop runs from 0 to 100, simulating a long-running task.
// During each iteration, the dock progress is updated using `MacosDockProgress.setProgress(i / 100)`.
// A sleep of 50 milliseconds is added to simulate task duration.
// Once the loop completes, the progress is set to 1.0, indicating completion.
// The user can see the progress in the macOS dock while the task is running.

<!-- END_MAIN -->

## Summary

The `macos_dock_progress` package provides a straightforward way to enhance user experience in macOS applications by displaying progress in the dock. By following the setup and usage instructions, developers can easily integrate this functionality into their applications, providing users with real-time feedback on long-running tasks. This package is particularly useful for applications that require background processing, ensuring that users remain informed without needing to switch back to the application window.
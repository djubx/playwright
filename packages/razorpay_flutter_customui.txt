```markdown
<!-- START_DESCRIPTION -->
# Overview of the razorpay_flutter_customui Package

The `razorpay_flutter_customui` package is a Flutter plugin that allows developers to integrate Razorpay's payment gateway into their applications with a customizable user interface. This package is particularly useful for developers who want to provide a seamless payment experience while maintaining control over the UI design.

## When to Use This Package
- **E-commerce Applications**: If you're building an online store and need to handle payments securely.
- **Subscription Services**: For apps that require recurring payments.
- **Event Ticketing**: When you need to sell tickets and manage payments efficiently.

## Key Features
- **Customizable UI**: Allows developers to create a payment interface that matches the app's design.
- **Multiple Payment Methods**: Supports various payment options, including credit/debit cards, net banking, UPI, and wallets.
- **Secure Transactions**: Ensures that all transactions are processed securely through Razorpay's infrastructure.
- **Easy Integration**: Simplifies the process of integrating payment gateways into Flutter applications.

Overall, `razorpay_flutter_customui` is an excellent choice for developers looking to implement a flexible and secure payment solution in their Flutter apps.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Setup and Usage of razorpay_flutter_customui

## Installation
To get started with the `razorpay_flutter_customui` package, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  razorpay_flutter_customui: ^latest_version
```

Make sure to replace `latest_version` with the most recent version available on [pub.dev](https://pub.dev/packages/razorpay_flutter_customui).

## Platform-Specific Configuration

### Android
1. Open your `android/app/build.gradle` file and ensure that you have the following configurations:
   ```groovy
   android {
       ...
       defaultConfig {
           ...
           minSdkVersion 21 // Ensure this is set to at least 21
       }
   }
   ```

2. Add the following permissions in your `AndroidManifest.xml`:
   ```xml
   <uses-permission android:name="android.permission.INTERNET"/>
   ```

### iOS
1. Open your `ios/Runner/Info.plist` file and add the following:
   ```xml
   <key>NSAppTransportSecurity</key>
   <dict>
       <key>NSAllowsArbitraryLoads</key>
       <true/>
   </dict>
   ```

2. Ensure that your iOS deployment target is set to at least 10.0 in your `ios/Podfile`:
   ```ruby
   platform :ios, '10.0'
   ```

## Basic Usage
To use the package, you need to initialize the Razorpay instance and create a payment. Hereâ€™s a simple example of how to do this:

```dart
import 'package:flutter/material.dart';
import 'package:razorpay_flutter_customui/razorpay_flutter_customui.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  late Razorpay _razorpay;

  @override
  void initState() {
    super.initState();
    _razorpay = Razorpay();
    _razorpay.on(Razorpay.EVENT_PAYMENT_SUCCESS, _handlePaymentSuccess);
    _razorpay.on(Razorpay.EVENT_PAYMENT_ERROR, _handlePaymentError);
  }

  void _handlePaymentSuccess(PaymentSuccessResponse response) {
    // Handle successful payment here
  }

  void _handlePaymentError(PaymentFailureResponse response) {
    // Handle payment error here
  }

  void openCheckout() {
    var options = {
      'key': 'YOUR_RAZORPAY_KEY',
      'amount': 100, // Amount in paise
      'name': 'Test Payment',
      'description': 'Payment for testing',
      'prefill': {
        'contact': '9999999999',
        'email': 'test@example.com'
      }
    };

    _razorpay.open(options);
  }

  @override
  void dispose() {
    super.dispose();
    _razorpay.clear();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Razorpay Custom UI')),
      body: Center(
        child: ElevatedButton(
          onPressed: openCheckout,
          child: Text('Pay Now'),
        ),
      ),
    );
  }
}
```

This code initializes the Razorpay instance, sets up event listeners for payment success and failure, and opens the payment interface when the button is pressed.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using razorpay_flutter_customui

```dart
import 'package:flutter/material.dart';
import 'package:razorpay_flutter_customui/razorpay_flutter_customui.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  late Razorpay _razorpay;

  @override
  void initState() {
    super.initState();
    // Initialize Razorpay instance
    _razorpay = Razorpay();
    // Set up event listeners for payment success and error
    _razorpay.on(Razorpay.EVENT_PAYMENT_SUCCESS, _handlePaymentSuccess);
    _razorpay.on(Razorpay.EVENT_PAYMENT_ERROR, _handlePaymentError);
  }

  // Handle successful payment
  void _handlePaymentSuccess(PaymentSuccessResponse response) {
    // Display success message or navigate to success screen
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text("Payment Successful: ${response.paymentId}")),
    );
  }

  // Handle payment error
  void _handlePaymentError(PaymentFailureResponse response) {
    // Display error message or navigate to error screen
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text("Payment Failed: ${response.message}")),
    );
  }

  // Open Razorpay checkout
  void openCheckout() {
    var options = {
      'key': 'YOUR_RAZORPAY_KEY', // Replace with your Razorpay key
      'amount': 100, // Amount in paise (100 paise = 1 INR)
      'name': 'Test Payment',
      'description': 'Payment for testing',
      'prefill': {
        'contact': '9999999999', // User's contact number
        'email': 'test@example.com' // User's email address
      }
    };

    // Open the Razorpay payment interface
    _razorpay.open(options);
  }

  @override
  void dispose() {
    super.dispose();
    // Clear Razorpay instance to avoid memory leaks
    _razorpay.clear();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Razorpay Custom UI')),
      body: Center(
        child: ElevatedButton(
          onPressed: openCheckout, // Trigger payment on button press
          child: Text('Pay Now'),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the RealFlutter widget.
// 2. In the initState method, we initialize the Razorpay instance and set up event listeners for payment success and error.
// 3. When the user presses the "Pay Now" button, the openCheckout method is called.
// 4. This method opens the Razorpay payment interface with the specified options.
// 5. If the payment is successful, the _handlePaymentSuccess method is triggered, displaying a success message.
// 6. If the payment fails, the _handlePaymentError method is triggered, displaying an error message.
// 7. Finally, we ensure to clear the Razorpay instance in the dispose method to prevent memory leaks.
```
<!-- END_MAIN -->
```

This structured blog post provides a comprehensive overview of the `razorpay_flutter_customui` package, guiding developers through its features, setup, and practical usage with a complete example.
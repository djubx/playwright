<-- START_DESCRIPTION -->

# Flutter DataWedge Package Overview
=====================================

The `flutter_datawedge` package provides a simple and efficient way to integrate Zebra's DataWedge service into your Flutter applications. DataWedge is a service that allows you to easily capture data from various input sources, such as barcode scanners, RFID readers, and keyboards, and deliver it to your application.

## When to Use This Package
---------------------------

You should use this package when you need to:

* Capture data from various input sources, such as barcode scanners, RFID readers, and keyboards
* Integrate Zebra's DataWedge service into your Flutter application
* Simplify the process of capturing and processing data from various input sources

## Features
------------

The `flutter_datawedge` package provides the following features:

* Easy integration with Zebra's DataWedge service
* Support for various input sources, such as barcode scanners, RFID readers, and keyboards
* Simple and efficient data capture and processing

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
=========================

To use the `flutter_datawedge` package, follow these steps:

### Step 1: Add the Package to Your Project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_datawedge: ^1.0.0
```
Then, run `flutter pub get` to get the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:flutter_datawedge/flutter_datawedge.dart';
```
### Step 3: Initialize the Package

Initialize the package in your `main` function:
```dart
void main() {
  runApp(MyApp());
  FlutterDataWedge.init();
}
```
### Step 4: Configure the Package (Optional)

You can configure the package to suit your needs. For example, you can set the input source:
```dart
FlutterDataWedge.setInputSource(InputSource.barcodeScanner);
```
### Platform-Specific Details

* Android: Make sure to add the following line to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="com.zebra.permission.INTERNAL_API" />
```
* iOS: Make sure to add the following line to your `Info.plist` file:
```xml
<key>UIBackgroundModes</key>
<array>
    <string>processing</string>
</array>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_datawedge/flutter_datawedge.dart';

void main() {
  runApp(RealFlutter());
  FlutterDataWedge.init();
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  String _data = '';

  @override
  void initState() {
    super.initState();
    FlutterDataWedge.setInputSource(InputSource.barcodeScanner);
    FlutterDataWedge.startScanning();
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Flutter DataWedge Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Text(_data),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  FlutterDataWedge.stopScanning();
                },
                child: Text('Stop Scanning'),
              ),
            ],
          ),
        ),
      ),
    );
  }

  @override
  void dispose() {
    FlutterDataWedge.stopScanning();
    super.dispose();
  }
}

// The application flow is as follows:
// 1. The user starts the application.
// 2. The application initializes the FlutterDataWedge package.
// 3. The application sets the input source to the barcode scanner.
// 4. The application starts scanning for barcodes.
// 5. When a barcode is scanned, the application displays the data.
// 6. The user can stop scanning by pressing the "Stop Scanning" button.
// 7. When the application is disposed, it stops scanning.

// In summary, this code sets up a basic Flutter application that uses the FlutterDataWedge package to scan barcodes and display the data.
```

<-- END_MAIN -->
```markdown
<!-- START_DESCRIPTION -->
# Full Screen Image Null Safe Flutter Package

The `full_screen_image_null_safe` package is a Flutter library designed to provide a seamless experience for displaying images in full-screen mode. This package is particularly useful for applications that require image previews, galleries, or any scenario where users might want to view images in a larger format without distractions.

## When to Use This Package

You should consider using the `full_screen_image_null_safe` package in scenarios such as:

- **Image Galleries**: When building an app that showcases a collection of images, allowing users to tap on an image to view it in full-screen mode.
- **Photo Sharing Apps**: For applications that allow users to share and view photos, this package enhances the user experience by providing a full-screen view.
- **E-commerce Applications**: When displaying product images, users can benefit from a detailed view of the product in full-screen mode.

## Features

- **Null Safety**: The package is built with Dart's null safety feature, ensuring that your code is safer and less prone to null reference errors.
- **Gesture Support**: Users can easily swipe between images, providing a smooth navigation experience.
- **Customizable UI**: You can customize the appearance of the full-screen image view to match your app's design.
- **Easy Integration**: The package is straightforward to integrate into any Flutter application.

Overall, the `full_screen_image_null_safe` package enhances the image viewing experience in Flutter applications, making it a valuable addition for developers looking to implement full-screen image functionality.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Full Screen Image Null Safe Package

## Step 1: Adding the Dependency

To get started, you need to add the `full_screen_image_null_safe` package to your `pubspec.yaml` file. Open your `pubspec.yaml` and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  full_screen_image_null_safe: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command in your terminal to install it:

```bash
flutter pub get
```

## Step 2: Platform-Specific Configuration

### Android Configuration

For Android, ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
        ...
    }
}
```

### iOS Configuration

For iOS, you may need to update your `Info.plist` file to allow for full-screen image display. Add the following key-value pair:

```xml
<key>UIRequiresPersistentWiFi</key>
<true/>
```

## Step 3: Using the Package

Now that you have set up the package, you can use it in your Flutter application. Below is a simple example of how to implement the full-screen image functionality.

1. Import the package in your Dart file:

```dart
import 'package:full_screen_image_null_safe/full_screen_image_null_safe.dart';
```

2. Use the `FullScreenImage` widget to display an image in full-screen mode. Hereâ€™s a basic implementation:

```dart
import 'package:flutter/material.dart';
import 'package:full_screen_image_null_safe/full_screen_image_null_safe.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Full Screen Image Example'),
        ),
        body: Center(
          child: GestureDetector(
            onTap: () {
              // Navigate to full-screen image view
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => FullScreenImage(
                    background: Colors.black,
                    image: NetworkImage('https://example.com/image.jpg'),
                  ),
                ),
              );
            },
            child: Image.network('https://example.com/image.jpg', width: 200),
          ),
        ),
      ),
    );
  }
}
```

In this example, tapping on the image will navigate to a full-screen view of the image. You can customize the `FullScreenImage` widget further based on your requirements.

With these steps, you should be able to integrate the `full_screen_image_null_safe` package into your Flutter application successfully.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Full Screen Image Null Safe Package

```dart
import 'package:flutter/material.dart';
import 'package:full_screen_image_null_safe/full_screen_image_null_safe.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Full Screen Image Example'), // Title of the app bar
        ),
        body: Center(
          child: GestureDetector(
            onTap: () {
              // When the image is tapped, navigate to the full-screen image view
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => FullScreenImage(
                    background: Colors.black, // Background color for full-screen view
                    image: NetworkImage('https://example.com/image.jpg'), // Image to display
                  ),
                ),
              );
            },
            child: Image.network('https://example.com/image.jpg', width: 200), // Thumbnail image
          ),
        ),
      ),
    );
  }
}

void main() {
  runApp(RealFlutter()); // Run the RealFlutter app
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the RealFlutter widget.
// 2. The RealFlutter widget builds a MaterialApp with a Scaffold.
// 3. The Scaffold contains an AppBar with a title and a Center widget in the body.
// 4. Inside the Center widget, a GestureDetector wraps an Image widget.
// 5. When the user taps on the image, the onTap callback is triggered.
// 6. The app navigates to a new route displaying the FullScreenImage widget.
// 7. The FullScreenImage widget shows the tapped image in full-screen mode with a black background.
```
<!-- END_MAIN -->
``` 

This structured blog provides a comprehensive overview of the `full_screen_image_null_safe` package, guiding users through its features, setup, and implementation in a Flutter application.
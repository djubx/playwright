```markdown
<-- START_DESCRIPTION -->

# Understanding the `app_version_update` Flutter Package

The `app_version_update` package is a powerful tool for Flutter developers who want to ensure their users are always running the latest version of their app. This package provides a straightforward way to check for app updates and prompt users to update to the latest version. It is particularly useful in scenarios where critical updates are necessary for security, new features, or bug fixes.

## When to Use `app_version_update`

- **Critical Updates**: When an update contains important security patches or bug fixes.
- **Feature Releases**: To ensure users have access to the latest features.
- **Version Control**: To manage app versions effectively and ensure compatibility.

## Key Features

- **Version Checking**: Automatically checks the current app version against the latest version available.
- **User Prompt**: Provides a customizable dialog to prompt users to update their app.
- **Platform Support**: Works seamlessly on both Android and iOS platforms.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using `app_version_update` in Flutter

In this tutorial, we will walk through the setup and usage of the `app_version_update` package in a Flutter project. We will cover platform-specific configurations for both Android and iOS.

## Step 1: Add Dependency

First, add the `app_version_update` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  app_version_update: ^1.0.0
```

Run `flutter pub get` to install the package.

## Step 2: Platform-Specific Setup

### Android

1. **Update `AndroidManifest.xml`**: Ensure that your app has internet permissions to check for updates.

   ```xml
   <uses-permission android:name="android.permission.INTERNET"/>
   ```

2. **Configure Versioning**: Make sure your `build.gradle` file has the correct versioning setup.

   ```gradle
   defaultConfig {
       versionCode 1
       versionName "1.0.0"
   }
   ```

### iOS

1. **Update `Info.plist`**: Ensure your app can access the internet.

   ```xml
   <key>NSAppTransportSecurity</key>
   <dict>
       <key>NSAllowsArbitraryLoads</key>
       <true/>
   </dict>
   ```

2. **Configure Versioning**: Ensure your `Info.plist` has the correct versioning setup.

   ```xml
   <key>CFBundleShortVersionString</key>
   <string>1.0.0</string>
   ```

## Step 3: Implementing the Package

Now, let's implement the package in your Flutter app.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:app_version_update/app_version_update.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'App Version Update Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: HomePage(),
    );
  }
}

class HomePage extends StatefulWidget {
  @override
  _HomePageState createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  @override
  void initState() {
    super.initState();
    _checkForUpdates();
  }

  // Function to check for app updates
  void _checkForUpdates() async {
    // Create an instance of AppVersionUpdate
    final appVersionUpdate = AppVersionUpdate(
      androidId: 'com.example.app', // Replace with your Android app ID
      iOSId: '123456789', // Replace with your iOS app ID
    );

    // Check for updates
    final updateInfo = await appVersionUpdate.checkForUpdates();

    // If an update is available, show the update dialog
    if (updateInfo.canUpdate) {
      _showUpdateDialog(updateInfo);
    }
  }

  // Function to show the update dialog
  void _showUpdateDialog(AppVersionUpdateInfo updateInfo) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Update Available'),
        content: Text('A new version of the app is available. Please update to version ${updateInfo.storeVersion}.'),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.of(context).pop();
            },
            child: Text('Later'),
          ),
          TextButton(
            onPressed: () {
              appVersionUpdate.openStore();
            },
            child: Text('Update'),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Home Page'),
      ),
      body: Center(
        child: Text('Welcome to RealFlutter!'),
      ),
    );
  }
}
```

// The application starts by running the `RealFlutter` widget.
// The `RealFlutter` widget sets up a `MaterialApp` with a `HomePage`.
// The `HomePage` is a stateful widget that checks for app updates when initialized.
// The `_checkForUpdates` function uses `AppVersionUpdate` to check if a new version is available.
// If an update is available, `_showUpdateDialog` displays a dialog prompting the user to update.
// The dialog offers two options: 'Later' to dismiss the dialog and 'Update' to open the app store.
// The `openStore` method directs the user to the app store to update the app.

<-- END_MAIN -->
```

This blog post provides a comprehensive guide to using the `app_version_update` package in Flutter, from setup to implementation, ensuring your app users are always on the latest version.
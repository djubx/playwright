<-- START_DESCRIPTION -->

# Cupertino Battery Indicator
==========================

The `cupertino_battery_indicator` Flutter package provides a Cupertino-style battery indicator for iOS and Android devices. It is a customizable widget that can be used to display the current battery level of the device.

## Features

*   Cupertino-style design
*   Customizable colors and styles
*   Supports both iOS and Android devices
*   Easy to use and integrate into existing Flutter apps

## When to Use

This package is ideal for developers who want to add a native-looking battery indicator to their Flutter app. It is particularly useful for apps that require a high level of customization and want to provide a seamless user experience.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
================

## Step 1: Add the Package to Your Pubspec.yaml File

To use the `cupertino_battery_indicator` package, you need to add it to your `pubspec.yaml` file. Open the file and add the following line under the `dependencies` section:

```yml
dependencies:
  flutter:
    sdk: flutter
  cupertino_battery_indicator: ^0.1.0
```

## Step 2: Import the Package

After adding the package to your `pubspec.yaml` file, you need to import it into your Dart file. Add the following line at the top of your file:

```dart
import 'package:cupertino_battery_indicator/cupertino_battery_indicator.dart';
```

## Step 3: Use the CupertinoBatteryIndicator Widget

To display the battery indicator, you can use the `CupertinoBatteryIndicator` widget. Here is a basic example:

```dart
CupertinoBatteryIndicator(
  batteryLevel: 50, // current battery level (in percent)
  batteryColor: Colors.blue, // color of the battery
  backgroundColor: Colors.white, // background color of the widget
)
```

### Platform-Specific Details

The `cupertino_battery_indicator` package works on both iOS and Android devices. However, there are some platform-specific details to keep in mind:

*   On iOS devices, the battery indicator is displayed as a native-looking widget.
*   On Android devices, the battery indicator is displayed as a custom widget that mimics the look and feel of the native iOS widget.

### Required Configurations or Optimizations

There are no required configurations or optimizations for using the `cupertino_battery_indicator` package. However, you may want to consider customizing the colors and styles of the widget to match your app's design.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:cupertino_battery_indicator/cupertino_battery_indicator.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  int _batteryLevel = 50; // initial battery level

  // Step 1: Create a function to update the battery level
  void _updateBatteryLevel() {
    setState(() {
      _batteryLevel = _batteryLevel + 10; // increment battery level by 10
      if (_batteryLevel > 100) {
        _batteryLevel = 0; // reset battery level to 0 if it exceeds 100
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Cupertino Battery Indicator Demo'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              // Step 2: Display the CupertinoBatteryIndicator widget
              CupertinoBatteryIndicator(
                batteryLevel: _batteryLevel, // current battery level
                batteryColor: Colors.blue, // color of the battery
                backgroundColor: Colors.white, // background color of the widget
              ),
              SizedBox(height: 20), // add some space between widgets
              // Step 3: Create a button to update the battery level
              ElevatedButton(
                onPressed: _updateBatteryLevel, // call the _updateBatteryLevel function when pressed
                child: Text('Update Battery Level'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and sees the initial battery level (50% in this case).
// 2. The user presses the "Update Battery Level" button to increment the battery level by 10.
// 3. The battery level is updated and displayed on the screen.
// 4. If the battery level exceeds 100%, it is reset to 0.
// 5. The user can continue pressing the button to update the battery level.

// This code demonstrates the basic usage of the CupertinoBatteryIndicator widget and how to update the battery level programmatically.
```

<-- END_MAIN -->
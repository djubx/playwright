<-- START_DESCRIPTION -->

# Any Image View Flutter Package
=====================================

The `any_image_view` Flutter package is a powerful tool for displaying and managing images in your Flutter applications. It provides a flexible and customizable way to display images from various sources, including network URLs, local files, and assets.

### Features

*   Display images from network URLs, local files, and assets
*   Support for image caching and loading animations
*   Customizable image display, including size, scale, and alignment
*   Support for image gestures, including tap, double tap, and long press

### When to Use

The `any_image_view` package is ideal for applications that require displaying images from various sources, such as:

*   Social media apps that display user-uploaded images
*   E-commerce apps that display product images
*   News apps that display article images

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Using the Any Image View Package
=============================================

### Step 1: Add the Package to Your Project

Add the `any_image_view` package to your `pubspec.yaml` file:

```yml
dependencies:
  any_image_view: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the `any_image_view` package in your Dart file:

```dart
import 'package:any_image_view/any_image_view.dart';
```

### Step 3: Display an Image

Use the `AnyImageView` widget to display an image:

```dart
AnyImageView(
  imageUrl: 'https://example.com/image.jpg',
  width: 200,
  height: 200,
)
```

### Platform-Specific Details

*   Android: The `any_image_view` package uses the `Glide` library to load and display images. Make sure to add the `Glide` dependency to your `android/app/build.gradle` file:

```groovy
dependencies {
  implementation 'com.github.bumptech.glide:glide:4.12.0'
  annotationProcessor 'com.github.bumptech.glide:compiler:4.12.0'
}
```

*   iOS: The `any_image_view` package uses the `Kingfisher` library to load and display images. Make sure to add the `Kingfisher` dependency to your `ios/Podfile` file:

```ruby
pod 'Kingfisher', '~> 6.3.0'
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:any_image_view/any_image_view.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Any Image View Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Any Image View Demo'),
      ),
      body: Center(
        child: AnyImageView(
          // Display an image from a network URL
          imageUrl: 'https://example.com/image.jpg',
          width: 200,
          height: 200,
          // Display a loading animation while the image is loading
          loadingBuilder: (context, child, loadingProgress) {
            if (loadingProgress == null) return child;
            return Center(
              child: CircularProgressIndicator(
                value: loadingProgress.expectedTotalBytes != null
                    ? loadingProgress.cumulativeBytesLoaded /
                        loadingProgress.expectedTotalBytes
                    : null,
              ),
            );
          },
          // Display an error message if the image fails to load
          errorBuilder: (context, error, stackTrace) {
            return Text('Error loading image');
          },
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app and is presented with a screen containing an AnyImageView widget.
// 2. The AnyImageView widget attempts to load the image from the specified network URL.
// 3. While the image is loading, a loading animation is displayed to the user.
// 4. If the image loads successfully, it is displayed to the user.
// 5. If the image fails to load, an error message is displayed to the user.

// In summary, the AnyImageView widget provides a flexible and customizable way to display images from various sources,
// including network URLs, local files, and assets. It also provides features such as image caching, loading animations,
// and error handling.
```

<-- END_MAIN -->
```markdown
<-- START_DESCRIPTION -->

# Wallpaper Manager Flutter Package: An Overview

The `wallpaper_manager_flutter` package is a powerful tool for Flutter developers looking to integrate wallpaper management capabilities into their applications. This package allows you to set wallpapers on Android devices programmatically, providing a seamless experience for users who want to customize their device's appearance directly from your app.

## When to Use

This package is particularly useful in applications that focus on personalization, such as:
- Wallpaper apps that offer a variety of images for users to set as their device background.
- Theme-based applications that allow users to change the look and feel of their device.
- Any app that wants to offer a feature to set images as wallpapers as part of its functionality.

## Features

- **Set Home Screen Wallpaper**: Change the wallpaper of the home screen.
- **Set Lock Screen Wallpaper**: Modify the lock screen wallpaper.
- **Set Both**: Simultaneously set the wallpaper for both the home and lock screens.
- **High-Resolution Support**: Handles high-resolution images efficiently.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using Wallpaper Manager Flutter

In this tutorial, we will walk through the process of setting up and using the `wallpaper_manager_flutter` package in a Flutter project. We will cover platform-specific configurations for Android and iOS.

## Setup Process

### Step 1: Add Dependency

Add the `wallpaper_manager_flutter` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  wallpaper_manager_flutter: ^1.0.0
```

### Step 2: Android Configuration

For Android, you need to add the necessary permissions to the `AndroidManifest.xml` file:

```xml
<uses-permission android:name="android.permission.SET_WALLPAPER"/>
<uses-permission android:name="android.permission.SET_WALLPAPER_HINTS"/>
```

Ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 19:

```gradle
android {
    defaultConfig {
        minSdkVersion 19
    }
}
```

### Step 3: iOS Configuration

Currently, the `wallpaper_manager_flutter` package does not support iOS due to platform restrictions on setting wallpapers programmatically. You can handle this by checking the platform and providing alternative functionality or a message to iOS users.

## Using the Package

To use the package, you will typically follow these steps:

1. Import the package in your Dart file.
2. Use the `RealFlutter` class to set the wallpaper.

Here's a basic example of how to set a wallpaper:

```dart
import 'package:wallpaper_manager_flutter/wallpaper_manager_flutter.dart';

void setWallpaper(String imagePath) async {
  try {
    await RealFlutter.setWallpaperFromFile(imagePath, WallpaperManagerFlutter.HOME_SCREEN);
    print('Wallpaper set successfully');
  } catch (e) {
    print('Error setting wallpaper: $e');
  }
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:wallpaper_manager_flutter/wallpaper_manager_flutter.dart';

void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Wallpaper Manager Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: WallpaperHomePage(),
    );
  }
}

class WallpaperHomePage extends StatelessWidget {
  final String imagePath = 'assets/sample_wallpaper.jpg'; // Path to the image asset

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Wallpaper Manager'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () => _setWallpaper(context),
          child: Text('Set Wallpaper'),
        ),
      ),
    );
  }

  // Function to set the wallpaper
  void _setWallpaper(BuildContext context) async {
    try {
      // Attempt to set the wallpaper for the home screen
      await RealFlutter.setWallpaperFromFile(imagePath, WallpaperManagerFlutter.HOME_SCREEN);
      // Show a success message
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Wallpaper set successfully')));
    } catch (e) {
      // Show an error message if something goes wrong
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Error setting wallpaper: $e')));
    }
  }
}
```

// The application starts by running the `MyApp` class, which sets up the MaterialApp.
// The `WallpaperHomePage` widget is the main screen, displaying a button to set the wallpaper.
// When the button is pressed, the `_setWallpaper` function is called.
// This function uses the `RealFlutter` class from the `wallpaper_manager_flutter` package to set the wallpaper.
// The image path is specified as an asset, and the wallpaper is set for the home screen.
// Success or error messages are displayed using a SnackBar.

<-- END_MAIN -->
```
<-- START_DESCRIPTION -->

# youtube_metadata Flutter Package
=====================================

The `youtube_metadata` Flutter package is a powerful tool for fetching metadata from YouTube videos. It provides a simple and efficient way to retrieve video information, such as titles, descriptions, thumbnails, and more.

### When to Use This Package

This package is ideal for apps that need to display YouTube video information, such as:

* Video players that want to show video metadata
* Social media apps that want to share YouTube videos
* Music streaming apps that want to display song information

### Features

* Fetch metadata for YouTube videos
* Retrieve video titles, descriptions, and thumbnails
* Get video duration and view count
* Support for multiple video formats (e.g., MP4, WebM)

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
=====================

### Add the Package to Your Project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  youtube_metadata: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Import the Package

Import the package in your Dart file:
```dart
import 'package:youtube_metadata/youtube_metadata.dart';
```
### Platform-Specific Details

#### Android

Add the following line to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.INTERNET" />
```
#### iOS

Add the following line to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```
### Usage

Create a `YoutubeMetadata` instance and call the `fetchMetadata` method:
```dart
import 'package:youtube_metadata/youtube_metadata.dart';

class RealFlutter {
  Future<void> fetchMetadata() async {
    final youtubeMetadata = YoutubeMetadata();
    final metadata = await youtubeMetadata.fetchMetadata('VIDEO_ID');
    print(metadata.title);
  }
}
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:youtube_metadata/youtube_metadata.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'YouTube Metadata Demo',
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final _videoIdController = TextEditingController();
  String _title = '';
  String _description = '';
  String _thumbnail = '';

  Future<void> _fetchMetadata() async {
    // Create a YoutubeMetadata instance
    final youtubeMetadata = YoutubeMetadata();

    // Fetch metadata for the video
    final metadata = await youtubeMetadata.fetchMetadata(_videoIdController.text);

    // Update the UI with the metadata
    setState(() {
      _title = metadata.title;
      _description = metadata.description;
      _thumbnail = metadata.thumbnail;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('YouTube Metadata Demo'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            TextField(
              controller: _videoIdController,
              decoration: InputDecoration(
                labelText: 'Video ID',
                border: OutlineInputBorder(),
              ),
            ),
            SizedBox(height: 16),
            ElevatedButton(
              onPressed: _fetchMetadata,
              child: Text('Fetch Metadata'),
            ),
            SizedBox(height: 16),
            Text('Title: $_title'),
            Text('Description: $_description'),
            Text('Thumbnail: $_thumbnail'),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user enters a video ID in the text field.
// 2. The user clicks the "Fetch Metadata" button.
// 3. The _fetchMetadata function is called, which creates a YoutubeMetadata instance.
// 4. The fetchMetadata method is called on the YoutubeMetadata instance, passing in the video ID.
// 5. The metadata is fetched and returned to the _fetchMetadata function.
// 6. The UI is updated with the metadata by calling setState.
// 7. The title, description, and thumbnail are displayed to the user.

// This code demonstrates how to use the youtube_metadata package to fetch metadata for a YouTube video.
// It shows how to create a YoutubeMetadata instance, call the fetchMetadata method, and update the UI with the metadata.
```

<-- END_MAIN -->
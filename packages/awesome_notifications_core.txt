Here's a detailed technical blog on the "awesome_notifications_core" Flutter package, structured as requested.

<!-- START_DESCRIPTION -->
# Awesome Notifications Core: A Comprehensive Overview

The **awesome_notifications_core** package is a powerful Flutter library designed to simplify the process of creating and managing notifications across both Android and iOS platforms. It provides a rich set of features that allow developers to customize notifications, handle user interactions, and manage notification channels effectively.

## When to Use This Package

You should consider using the **awesome_notifications_core** package when:
- You need to implement local notifications in your Flutter application.
- You want to provide users with rich notifications that include images, buttons, and custom layouts.
- You require advanced features like notification scheduling, grouping, and handling notification taps.

## Key Features

- **Cross-Platform Support**: Works seamlessly on both Android and iOS.
- **Rich Media Notifications**: Supports images, sounds, and custom layouts.
- **Notification Channels**: Allows you to create and manage notification channels for better user experience.
- **Scheduled Notifications**: Enables scheduling notifications for future dates and times.
- **Custom Actions**: Supports custom actions that can be triggered when users interact with notifications.

With these features, the **awesome_notifications_core** package is an excellent choice for developers looking to enhance their Flutter applications with robust notification capabilities.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up Awesome Notifications Core

In this tutorial, we will walk through the setup process for the **awesome_notifications_core** package and demonstrate how to use it in a Flutter application.

## Step 1: Add Dependency

To get started, add the **awesome_notifications_core** package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  awesome_notifications: ^0.0.0 # Replace with the latest version
```

## Step 2: Platform-Specific Configuration

### Android Configuration

1. **Update AndroidManifest.xml**: Open `android/app/src/main/AndroidManifest.xml` and add the following permissions and services:

```xml
<uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED"/>
<uses-permission android:name="android.permission.VIBRATE"/>

<application>
    ...
    <service android:name="me.carda.awesome_notifications.notifications.receivers.ActionReceiver"/>
    <service android:name="me.carda.awesome_notifications.notifications.receivers.NotificationReceiver"/>
    <service android:name="me.carda.awesome_notifications.notifications.receivers.NotificationDismissedReceiver"/>
</application>
```

2. **Set Up Notification Channels**: You can define notification channels in your Dart code, which will be used to categorize notifications.

### iOS Configuration

1. **Update Info.plist**: Open `ios/Runner/Info.plist` and add the following keys to request permission for notifications:

```xml
<key>UIBackgroundModes</key>
<array>
    <string>fetch</string>
    <string>remote-notification</string>
</array>
<key>NSUserNotificationUsageDescription</key>
<string>We use notifications to keep you updated.</string>
```

2. **Request Permissions**: Ensure you request notification permissions in your Dart code.

## Step 3: Initialize the Package

In your main Dart file, initialize the **awesome_notifications_core** package:

```dart
import 'package:awesome_notifications/awesome_notifications.dart';

void main() {
  AwesomeNotifications().initialize(
    'resource_key',
    [
      NotificationChannel(
        channelKey: 'basic_channel',
        channelName: 'Basic notifications',
        channelDescription: 'Notification channel for basic tests',
        defaultColor: Color(0xFF9D50DD),
        ledColor: Colors.white,
      )
    ],
  );
  runApp(MyApp());
}
```

## Step 4: Create and Display Notifications

You can create and display notifications using the following code:

```dart
AwesomeNotifications().createNotification(
  content: NotificationContent(
    channelKey: 'basic_channel',
    title: 'Hello Awesome Notifications!',
    body: 'This is a simple notification example.',
  ),
);
```

With these steps, you have successfully set up the **awesome_notifications_core** package in your Flutter application. You can now create and manage notifications effectively.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example: Using Awesome Notifications Core

```dart
import 'package:flutter/material.dart';
import 'package:awesome_notifications/awesome_notifications.dart';

void main() {
  // Initialize Awesome Notifications with a unique resource key
  AwesomeNotifications().initialize(
    'resource_key',
    [
      // Define a notification channel
      NotificationChannel(
        channelKey: 'basic_channel',
        channelName: 'Basic notifications',
        channelDescription: 'Notification channel for basic tests',
        defaultColor: Color(0xFF9D50DD),
        ledColor: Colors.white,
      )
    ],
  );
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Awesome Notifications Demo',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Awesome Notifications Demo'),
        ),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              // Create and display a notification when the button is pressed
              AwesomeNotifications().createNotification(
                content: NotificationContent(
                  channelKey: 'basic_channel',
                  title: 'Hello Awesome Notifications!',
                  body: 'This is a simple notification example.',
                ),
              );
            },
            child: Text('Show Notification'),
          ),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function initializes the Awesome Notifications package with a unique resource key.
// 2. A notification channel is defined, which categorizes notifications and sets properties like color and LED.
// 3. The RealFlutter widget is created, which builds a simple UI with an AppBar and a button.
// 4. When the button is pressed, a notification is created and displayed using the Awesome Notifications package.
// 5. The notification appears in the notification tray, allowing users to interact with it.
```

<!-- END_MAIN -->

In this blog, we explored the **awesome_notifications_core** package, detailing its features, setup process, and providing a complete example. The application flow is straightforward: initialize the package, define a notification channel, and create notifications based on user interactions. This package significantly enhances the notification capabilities of Flutter applications, making it a valuable tool for developers.
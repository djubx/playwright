<-- START_DESCRIPTION -->

**Time Range Selector Widget Flutter Package**
=============================================

The `time_range_selector_widget` Flutter package provides a customizable widget for selecting time ranges. It is ideal for applications that require users to select a specific time interval, such as scheduling appointments or setting reminders.

**Key Features:**

* Customizable time range selection
* Support for 12-hour and 24-hour time formats
* Optional start and end time limits
* Callbacks for when the user selects a new time range

**When to Use:**

* Scheduling appointments or meetings
* Setting reminders or notifications
* Filtering data by time range

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setup and Usage**
-------------------

### Step 1: Add the Package to Your Project

Add the following dependency to your `pubspec.yaml` file:
```yml
dependencies:
  time_range_selector_widget: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:time_range_selector_widget/time_range_selector_widget.dart';
```
### Step 3: Create a TimeRangeSelectorWidget

Create a `TimeRangeSelectorWidget` instance and pass the required parameters:
```dart
TimeRangeSelectorWidget(
  startTime: DateTime.now(),
  endTime: DateTime.now().add(Duration(hours: 2)),
  onTimeRangeSelected: (startTime, endTime) {
    print('Selected time range: $startTime - $endTime');
  },
)
```
### Platform-Specific Details

* Android: No additional configuration required.
* iOS: Add the following line to your `Info.plist` file:
```xml
<key>NSCalendarUsageDescription</key>
<string>This app needs access to your calendar to schedule appointments.</string>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:time_range_selector_widget/time_range_selector_widget.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  DateTime _startTime = DateTime.now();
  DateTime _endTime = DateTime.now().add(Duration(hours: 2));

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Time Range Selector Widget Demo'),
        ),
        body: Center(
          child: TimeRangeSelectorWidget(
            startTime: _startTime,
            endTime: _endTime,
            onTimeRangeSelected: (startTime, endTime) {
              print('Selected time range: $startTime - $endTime');
              setState(() {
                _startTime = startTime;
                _endTime = endTime;
              });
            },
          ),
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user runs the app and is presented with a TimeRangeSelectorWidget.
// 2. The user selects a new time range by dragging the sliders or entering a specific time.
// 3. The onTimeRangeSelected callback is triggered, and the selected time range is printed to the console.
// 4. The app updates the _startTime and _endTime variables with the new selected time range.
// 5. The app rebuilds the UI with the updated time range.
```

// Final summary: The code flows by first presenting the user with a TimeRangeSelectorWidget, allowing them to select a new time range, and then updating the app's state with the new selected time range. The app then rebuilds the UI with the updated time range. 

<-- END_MAIN -->
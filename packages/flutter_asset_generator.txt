<-- START_DESCRIPTION -->

# Flutter Asset Generator Package
=====================================

The `flutter_asset_generator` package is a powerful tool for generating assets in Flutter applications. It provides a simple and efficient way to create and manage assets, such as images, fonts, and other resources.

### When to Use This Package

This package is useful when you need to generate assets dynamically, such as:

* Creating thumbnails from larger images
* Generating icons from fonts
* Creating random or placeholder images
* Converting images between different formats

### Features

The `flutter_asset_generator` package provides the following features:

* Image generation: Create images from scratch or modify existing images
* Font generation: Create fonts from scratch or modify existing fonts
* Asset caching: Cache generated assets for faster access
* Platform-specific optimizations: Optimize asset generation for Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `flutter_asset_generator` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_asset_generator: ^1.0.0
```
2. Run `flutter pub get` to install the package
3. Import the package in your Dart file:
```dart
import 'package:flutter_asset_generator/flutter_asset_generator.dart';
```
### Platform-Specific Configurations

For Android, add the following configuration to your `android/app/build.gradle` file:
```groovy
android {
  ...
  defaultConfig {
    ...
    vectorDrawables.useSupportLibrary = true
  }
}
```
For iOS, add the following configuration to your `ios/Podfile` file:
```ruby
target 'YourApp' do
  ...
  pod 'FlutterAssetGenerator', :path => '../.symlinks/plugins/flutter_asset_generator/ios'
end
```
### Using the Package

To generate an asset, use the `AssetGenerator` class:
```dart
import 'package:flutter_asset_generator/flutter_asset_generator.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Asset Generator Example'),
      ),
      body: Center(
        child: AssetGenerator(
          asset: Image.asset('assets/image.png'),
          builder: (context, asset) {
            return Image.asset(asset);
          },
        ),
      ),
    );
  }
}
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_asset_generator/flutter_asset_generator.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Asset Generator Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Step 1: Create an instance of the AssetGenerator class
  final AssetGenerator _assetGenerator = AssetGenerator();

  // Step 2: Define the asset to be generated
  final Image _image = Image.asset('assets/image.png');

  // Step 3: Use the AssetGenerator to generate the asset
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Asset Generator Example'),
      ),
      body: Center(
        // Step 4: Use the generated asset in the UI
        child: _assetGenerator.buildAsset(
          context,
          _image,
          builder: (context, asset) {
            return Image.asset(asset);
          },
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the app and the RealFlutter widget is created.
// 2. The RealFlutter widget creates an instance of the AssetGenerator class.
// 3. The RealFlutter widget defines the asset to be generated (in this case, an image).
// 4. The AssetGenerator generates the asset and returns it to the RealFlutter widget.
// 5. The RealFlutter widget uses the generated asset in the UI.
```

// In summary, the code flows as follows:
// The user runs the app, which creates the RealFlutter widget.
// The RealFlutter widget creates an AssetGenerator instance and defines the asset to generate.
// The AssetGenerator generates the asset and returns it to the RealFlutter widget.
// The RealFlutter widget uses the generated asset in the UI.

<-- END_MAIN -->
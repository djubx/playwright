<-- START_DESCRIPTION -->

# Flutter Tawk Package Overview
=====================================

The `flutter_tawk` package is a Flutter plugin that allows you to integrate Tawk.to live chat support into your Flutter application. Tawk.to is a popular live chat platform that enables businesses to communicate with their customers in real-time.

## When to Use This Package
---------------------------

You can use this package when you want to provide live chat support to your customers directly from your Flutter application. This can be particularly useful for e-commerce apps, customer support apps, or any other type of app that requires real-time communication with customers.

## Features
------------

The `flutter_tawk` package provides the following features:

*   Live chat support with Tawk.to
*   Customizable chat widget
*   Support for multiple chat agents
*   Real-time chat messaging
*   Support for file attachments and emojis

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Flutter Tawk Package
=====================================

To use the `flutter_tawk` package, you need to follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:

```yml
dependencies:
  flutter_tawk: ^1.0.0
```

Then, run `flutter pub get` to get the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:flutter_tawk/flutter_tawk.dart';
```

### Step 3: Initialize the Tawk.to Chat

Initialize the Tawk.to chat with your chat ID and API key:

```dart
Tawk(
  directChatLink: 'your_direct_chat_link',
  apiKey: 'your_api_key',
  chatId: 'your_chat_id',
  visitor: TawkVisitor(
    name: 'John Doe',
    email: 'john.doe@example.com',
  ),
)
```

### Platform-Specific Details

For Android, you need to add the following lines to your `AndroidManifest.xml` file:

```xml
<application>
  ...
  <meta-data
    android:name="com.tawk.sdk.API_KEY"
    android:value="your_api_key" />
  <meta-data
    android:name="com.tawk.sdk.CHAT_ID"
    android:value="your_chat_id" />
</application>
```

For iOS, you need to add the following lines to your `Info.plist` file:

```xml
<key>com.tawk.sdk.API_KEY</key>
<string>your_api_key</string>
<key>com.tawk.sdk.CHAT_ID</key>
<string>your_chat_id</string>
```

### Optimizations

To optimize the chat performance, you can use the `TawkOptions` class to set the chat timeout and retry count:

```dart
TawkOptions(
  timeout: 30000,
  retryCount: 3,
)
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_tawk/flutter_tawk.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Tawk.to Chat Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final Tawk _tawk = Tawk(
    directChatLink: 'your_direct_chat_link',
    apiKey: 'your_api_key',
    chatId: 'your_chat_id',
    visitor: TawkVisitor(
      name: 'John Doe',
      email: 'john.doe@example.com',
    ),
  );

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Tawk.to Chat Demo'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            _tawk.startChat();
          },
          child: Text('Start Chat'),
        ),
      ),
    );
  }
}

// The app starts by initializing the Tawk.to chat with the provided chat ID and API key.
// When the user clicks the "Start Chat" button, the app starts the chat using the `_tawk.startChat()` method.
// The chat is displayed in a separate window, where the user can communicate with the chat agent in real-time.
// The app uses the `TawkOptions` class to set the chat timeout and retry count, which can be adjusted to optimize the chat performance.
// The app also uses the `TawkVisitor` class to set the visitor's name and email, which can be used to identify the user in the chat.
```

<-- END_MAIN -->
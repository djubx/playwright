<-- START_DESCRIPTION -->

# Flutter Gemma Package Overview
=====================================

The `flutter_gemma` package is a powerful tool for Flutter developers, providing a simple and efficient way to manage and display in-app notifications. With its robust features and customizable options, `flutter_gemma` is an ideal solution for developers looking to enhance their app's user experience.

### Key Features

*   Customizable notification display
*   Support for multiple notification types (e.g., success, error, warning)
*   Ability to display notifications with or without a duration
*   Optional callback functions for notification tap and dismiss events

### When to Use

The `flutter_gemma` package is perfect for scenarios where you need to display in-app notifications to users, such as:

*   Informing users of successful or failed operations
*   Displaying warnings or errors
*   Providing updates on app status or progress

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using Flutter Gemma
=====================================

### Step 1: Add the Package to Your Project

Add the `flutter_gemma` package to your `pubspec.yaml` file:

```yml
dependencies:
  flutter_gemma: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the `flutter_gemma` package in your Dart file:

```dart
import 'package:flutter_gemma/flutter_gemma.dart';
```

### Step 3: Display a Notification

Use the `Gemma.show` method to display a notification:

```dart
Gemma.show(
  context,
  type: GemmaType.success,
  message: 'Operation successful!',
  duration: Duration(seconds: 2),
);
```

### Platform-Specific Details

*   **Android:** No additional configuration is required.
*   **iOS:** You need to add the following code to your `Info.plist` file to allow notifications to display on top of other views:

```xml
<key>UIWindowSceneSessionRoleApplication</key>
<string>UISceneSessionRoleApplication</string>
```

### Optimizations

*   You can customize the notification display by using the `GemmaTheme` class.
*   To handle notification tap and dismiss events, use the `onTap` and `onDismiss` callback functions.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_gemma/flutter_gemma.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Gemma Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Gemma Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            ElevatedButton(
              onPressed: () {
                // Display a success notification
                Gemma.show(
                  context,
                  type: GemmaType.success,
                  message: 'Operation successful!',
                  duration: Duration(seconds: 2),
                );
              },
              child: Text('Success Notification'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                // Display an error notification
                Gemma.show(
                  context,
                  type: GemmaType.error,
                  message: 'Operation failed!',
                  duration: Duration(seconds: 2),
                );
              },
              child: Text('Error Notification'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                // Display a warning notification
                Gemma.show(
                  context,
                  type: GemmaType.warning,
                  message: 'Warning: something went wrong!',
                  duration: Duration(seconds: 2),
                );
              },
              child: Text('Warning Notification'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user presses one of the buttons to display a notification.
// 2. The Gemma.show method is called with the desired notification type and message.
// 3. The notification is displayed on top of the current view for the specified duration.
// 4. If the user taps on the notification, the onTap callback function is called.
// 5. If the notification is dismissed, the onDismiss callback function is called.
// 6. The notification is removed from the view after the duration has expired.

// In summary, this code demonstrates how to use the Flutter Gemma package to display different types of notifications in a Flutter application.

```

<-- END_MAIN -->
```markdown
<!-- START_DESCRIPTION -->
# Overview of the marker_crafter Flutter Package

The `marker_crafter` package is a powerful tool for Flutter developers looking to create custom markers for maps. This package is particularly useful when you need to display specific information or visuals on a map, such as locations, points of interest, or custom icons. 

## When to Use `marker_crafter`
- **Custom Map Markers**: When you want to enhance the user experience by providing visually appealing markers on a map.
- **Dynamic Data Representation**: If your application requires displaying data dynamically on a map, such as user locations or event markers.
- **Interactive Maps**: For applications that need interactive maps where users can tap on markers to get more information.

## Key Features
- **Customizable Markers**: Create markers with custom icons, colors, and shapes.
- **Interactive Elements**: Add interactivity to markers, allowing users to tap and receive additional information.
- **Easy Integration**: Seamlessly integrates with popular mapping packages like `google_maps_flutter`.

The `marker_crafter` package is an excellent choice for developers looking to enhance their mapping applications with custom markers that improve user engagement and data representation.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Setting Up and Using the marker_crafter Package

## Installation
To get started with the `marker_crafter` package, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  marker_crafter: ^latest_version
```

Make sure to replace `^latest_version` with the most recent version of the package available on [pub.dev](https://pub.dev/packages/marker_crafter).

## Platform-Specific Configuration

### Android
1. Ensure that your `AndroidManifest.xml` file has the necessary permissions for internet access and location services:
   ```xml
   <uses-permission android:name="android.permission.INTERNET"/>
   <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>
   ```

### iOS
1. Open your `Info.plist` file and add the following keys to request location permissions:
   ```xml
   <key>NSLocationWhenInUseUsageDescription</key>
   <string>We need your location to show markers on the map.</string>
   <key>NSLocationAlwaysUsageDescription</key>
   <string>We need your location to show markers on the map.</string>
   ```

## Basic Usage
Once you have installed the package and configured your project, you can start using it in your Flutter application. Hereâ€™s a simple example of how to create a map with custom markers.

```dart
import 'package:flutter/material.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'package:marker_crafter/marker_crafter.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Marker Crafter Example')),
        body: MapScreen(),
      ),
    );
  }
}

class MapScreen extends StatefulWidget {
  @override
  _MapScreenState createState() => _MapScreenState();
}

class _MapScreenState extends State<MapScreen> {
  late GoogleMapController mapController;

  // Sample marker data
  final List<MarkerData> markers = [
    MarkerData(
      position: LatLng(37.7749, -122.4194),
      icon: 'assets/custom_marker.png',
      infoWindow: 'San Francisco',
    ),
    MarkerData(
      position: LatLng(34.0522, -118.2437),
      icon: 'assets/custom_marker.png',
      infoWindow: 'Los Angeles',
    ),
  ];

  @override
  Widget build(BuildContext context) {
    return GoogleMap(
      onMapCreated: (controller) {
        mapController = controller;
        _addMarkers();
      },
      initialCameraPosition: CameraPosition(
        target: LatLng(36.7783, -119.4179),
        zoom: 6,
      ),
    );
  }

  void _addMarkers() {
    for (var marker in markers) {
      Marker newMarker = Marker(
        markerId: MarkerId(marker.infoWindow),
        position: marker.position,
        icon: BitmapDescriptor.fromAsset(marker.icon),
        infoWindow: InfoWindow(title: marker.infoWindow),
      );
      setState(() {
        markers.add(newMarker);
      });
    }
  }
}
```

This code sets up a simple map with custom markers. The `MarkerData` class is a custom class that holds the marker's position, icon, and info window text.

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of Using marker_crafter

```dart
import 'package:flutter/material.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'package:marker_crafter/marker_crafter.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Marker Crafter Example')),
        body: MapScreen(),
      ),
    );
  }
}

class MapScreen extends StatefulWidget {
  @override
  _MapScreenState createState() => _MapScreenState();
}

class _MapScreenState extends State<MapScreen> {
  late GoogleMapController mapController;

  // Sample marker data
  final List<MarkerData> markers = [
    MarkerData(
      position: LatLng(37.7749, -122.4194), // San Francisco coordinates
      icon: 'assets/custom_marker.png', // Path to custom marker icon
      infoWindow: 'San Francisco', // Info window text
    ),
    MarkerData(
      position: LatLng(34.0522, -118.2437), // Los Angeles coordinates
      icon: 'assets/custom_marker.png', // Path to custom marker icon
      infoWindow: 'Los Angeles', // Info window text
    ),
  ];

  @override
  Widget build(BuildContext context) {
    return GoogleMap(
      onMapCreated: (controller) {
        mapController = controller; // Store the map controller
        _addMarkers(); // Call method to add markers
      },
      initialCameraPosition: CameraPosition(
        target: LatLng(36.7783, -119.4179), // Center of California
        zoom: 6, // Initial zoom level
      ),
    );
  }

  void _addMarkers() {
    // Loop through the marker data and add each marker to the map
    for (var marker in markers) {
      Marker newMarker = Marker(
        markerId: MarkerId(marker.infoWindow), // Unique ID for the marker
        position: marker.position, // Position of the marker
        icon: BitmapDescriptor.fromAsset(marker.icon), // Custom icon
        infoWindow: InfoWindow(title: marker.infoWindow), // Info window
      );
      setState(() {
        markers.add(newMarker); // Add the new marker to the state
      });
    }
  }
}

// The application starts with the RealFlutter class, which sets up the MaterialApp.
// The MapScreen widget is created, which contains the GoogleMap widget.
// When the map is created, the _addMarkers method is called to add custom markers.
// Each marker is defined with a position, icon, and info window text.
// The markers are displayed on the map, allowing users to interact with them.
```
<!-- END_MAIN -->
``` 

This structured approach provides a comprehensive overview of the `marker_crafter` package, guiding developers through its features, setup, and practical usage in a Flutter application.
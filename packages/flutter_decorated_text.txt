<-- START_DESCRIPTION -->

# Flutter Decorated Text Package
================================

The `flutter_decorated_text` package is a powerful Flutter library that allows you to decorate text with various styles, animations, and effects. It provides a simple and easy-to-use API for creating beautiful text designs.

## When to Use This Package
---------------------------

You can use this package in various scenarios, such as:

* Creating visually appealing text headers or titles
* Adding animations to text elements
* Highlighting important text information
* Creating custom text styles or themes

## Features
------------

The `flutter_decorated_text` package offers the following features:

* Support for various text styles, including bold, italic, and strikethrough
* Text animation effects, such as fade-in, fade-out, and scale
* Customizable text colors and gradients
* Support for multiple text decorations, including underline, overline, and line-through

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `flutter_decorated_text` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_decorated_text: ^1.0.0
```
2. Run `flutter pub get` to install the package.
3. Import the package in your Dart file:
```dart
import 'package:flutter_decorated_text/flutter_decorated_text.dart';
```

## Platform-Specific Details
---------------------------

The `flutter_decorated_text` package works on both Android and iOS platforms. However, you may need to configure some platform-specific settings:

* On Android, you may need to add the following line to your `android/app/src/main/AndroidManifest.xml` file:
```xml
<application
  ...
  android:hardwareAccelerated="true"
  ...
>
```
* On iOS, you may need to add the following line to your `ios/Runner/Info.plist` file:
```xml
<key>UIAppFonts</key>
<array>
  <string>your_custom_font.ttf</string>
</array>
```

## Using the Package
---------------------

To use the `flutter_decorated_text` package, create a `RealFlutter` widget and pass the text to be decorated as a child:
```dart
RealFlutter(
  child: Text(
    'Hello, World!',
    style: TextStyle(
      fontSize: 24,
      fontWeight: FontWeight.bold,
    ),
  ),
)
```
You can then customize the text decoration by using the various properties provided by the `RealFlutter` widget.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_decorated_text/flutter_decorated_text.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Decorated Text Demo',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Flutter Decorated Text Demo'),
        ),
        body: Center(
          child: RealFlutter(
            // Step 1: Create a RealFlutter widget
            child: Text(
              // Step 2: Pass the text to be decorated as a child
              'Hello, World!',
              style: TextStyle(
                // Step 3: Customize the text style
                fontSize: 24,
                fontWeight: FontWeight.bold,
              ),
            ),
            // Step 4: Customize the text decoration
            decoration: BoxDecoration(
              gradient: LinearGradient(
                colors: [Colors.blue, Colors.red],
              ),
            ),
            // Step 5: Add animation effects
            animation: AnimationType.fadeIn,
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The RealFlutter widget is created and passed the text to be decorated as a child.
// 2. The text style is customized using the TextStyle widget.
// 3. The text decoration is customized using the BoxDecoration widget.
// 4. Animation effects are added using the AnimationType enum.
// 5. The decorated text is displayed on the screen.

// Final summary: The code flows by creating a RealFlutter widget, customizing the text style and decoration, adding animation effects, and displaying the decorated text on the screen.
```

<-- END_MAIN -->
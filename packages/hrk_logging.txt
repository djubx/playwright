# hrk_logging Flutter Package: A Comprehensive Guide

## <-- START_DESCRIPTION -->

### Description

The `hrk_logging` package is a powerful logging utility for Flutter applications that simplifies the process of logging messages, errors, and other important information during development and production. It provides a structured way to manage logs, making it easier for developers to track application behavior and diagnose issues.

### When to Use

You should consider using `hrk_logging` in scenarios such as:
- Debugging complex applications where tracking state changes and errors is crucial.
- Monitoring application performance and behavior in production environments.
- Creating logs that can be easily filtered and formatted for better readability.

### Features

- **Custom Log Levels**: Define different log levels (e.g., debug, info, warning, error) to categorize log messages.
- **Output Formatting**: Customize the format of log messages for better clarity.
- **File Logging**: Optionally log messages to a file for persistent storage.
- **Console Logging**: Easily output logs to the console for immediate feedback during development.
- **Filter Logs**: Implement filtering to display only relevant log messages based on log levels.

## <-- END_DESCRIPTION -->

## <-- START_TUTORIAL -->

### Tutorial

#### Installation

To add the `hrk_logging` package to your Flutter project, include it in your `pubspec.yaml` file:

```yaml
dependencies:
  hrk_logging: ^1.0.0  # Check for the latest version on pub.dev
```

Run the following command to install the package:

```bash
flutter pub get
```

#### Platform-Specific Configuration

For both Android and iOS, no additional configuration is required for basic usage. However, if you plan to log to a file, ensure that you have the necessary permissions set up.

**Android**: Ensure you have the following permissions in your `AndroidManifest.xml` if you plan to write logs to external storage:

```xml
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
```

**iOS**: No special permissions are required for logging, but ensure your app complies with Apple's privacy guidelines if you log sensitive information.

#### Basic Usage

To use the `hrk_logging` package, you need to create an instance of the `RealFlutter` class and configure it according to your needs. Hereâ€™s a simple setup:

```dart
import 'package:flutter/material.dart';
import 'package:hrk_logging/hrk_logging.dart';

void main() {
  // Initialize the logging system
  RealFlutter logger = RealFlutter();
  logger.setLogLevel(LogLevel.debug); // Set the desired log level
  runApp(MyApp(logger));
}

class MyApp extends StatelessWidget {
  final RealFlutter logger;

  MyApp(this.logger);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('hrk_logging Example')),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              logger.log('Button pressed!', LogLevel.info); // Log an info message
            },
            child: Text('Press Me'),
          ),
        ),
      ),
    );
  }
}
```

## <-- END_TUTORIAL -->

## <-- START_MAIN -->

### Complete Example

```dart
import 'package:flutter/material.dart';
import 'package:hrk_logging/hrk_logging.dart';

void main() {
  // Initialize the logging system
  RealFlutter logger = RealFlutter();
  logger.setLogLevel(LogLevel.debug); // Set the desired log level
  runApp(MyApp(logger));
}

class MyApp extends StatelessWidget {
  final RealFlutter logger;

  MyApp(this.logger);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('hrk_logging Example')),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              logger.log('Button pressed!', LogLevel.info); // Log an info message
            },
            child: Text('Press Me'),
          ),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function initializes the logging system by creating an instance of RealFlutter.
// 2. The log level is set to debug, which means all log messages of this level and above will be displayed.
// 3. The MyApp widget is created, passing the logger instance to it.
// 4. The app displays a simple UI with a button.
// 5. When the button is pressed, an info log message is generated, which will be output to the console or file based on the configuration.
// 6. This setup allows for easy tracking of user interactions and application behavior through logging.
```

## <-- END_MAIN -->

### Summary

In this guide, we explored the `hrk_logging` package, which provides a robust logging solution for Flutter applications. We covered the installation process, platform-specific configurations, and demonstrated how to implement logging in a simple Flutter app. The application flow was explained step-by-step, highlighting how logging can enhance debugging and monitoring in your Flutter projects. By utilizing `hrk_logging`, developers can gain better insights into their applications, making it an invaluable tool for both development and production environments.
<-- START_DESCRIPTION -->

# khqr_widget Flutter Package
The khqr_widget package is a powerful tool for generating QR codes in Flutter applications. It provides a simple and easy-to-use API for creating QR codes with various customization options.

## When to Use
The khqr_widget package is ideal for applications that require QR code generation, such as:

* Payment gateways
* Ticketing systems
* Inventory management
* Authentication systems

## Features
The khqr_widget package offers the following features:

* QR code generation with customizable size, color, and error correction level
* Support for various data types, including text, URL, email, and phone number
* Optional logo and background image support
* Error handling and debugging tools

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the khqr_widget Package
To use the khqr_widget package, follow these steps:

1. Add the package to your pubspec.yaml file:
```yml
dependencies:
  khqr_widget: ^1.0.0
```
2. Run `flutter pub get` to install the package.
3. Import the package in your Dart file:
```dart
import 'package:khqr_widget/khqr_widget.dart';
```
## Platform-Specific Details
### Android
No additional configuration is required for Android.

### iOS
Add the following lines to your Info.plist file:
```xml
<key>NSCameraUsageDescription</key>
<string>This app needs camera access to scan QR codes</string>
```
## Using the Package
To generate a QR code, create a `KhqrWidget` instance and pass the required data:
```dart
KhqrWidget(
  data: 'https://example.com',
  size: 200,
  color: Colors.black,
  errorCorrectionLevel: ErrorCorrectionLevel.H,
)
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:khqr_widget/khqr_widget.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  String _data = 'https://example.com';
  int _size = 200;
  Color _color = Colors.black;
  ErrorCorrectionLevel _errorCorrectionLevel = ErrorCorrectionLevel.H;

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('khqr_widget Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              KhqrWidget(
                data: _data,
                size: _size,
                color: _color,
                errorCorrectionLevel: _errorCorrectionLevel,
              ),
              SizedBox(height: 20),
              TextField(
                decoration: InputDecoration(labelText: 'Data'),
                onChanged: (value) {
                  setState(() {
                    _data = value;
                  });
                },
              ),
              SizedBox(height: 10),
              Slider(
                value: _size.toDouble(),
                min: 100,
                max: 500,
                divisions: 4,
                label: _size.toString(),
                onChanged: (value) {
                  setState(() {
                    _size = value.round();
                  });
                },
              ),
              SizedBox(height: 10),
              Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Radio(
                    value: ErrorCorrectionLevel.L,
                    groupValue: _errorCorrectionLevel,
                    onChanged: (value) {
                      setState(() {
                        _errorCorrectionLevel = value;
                      });
                    },
                  ),
                  Text('L'),
                  SizedBox(width: 10),
                  Radio(
                    value: ErrorCorrectionLevel.M,
                    groupValue: _errorCorrectionLevel,
                    onChanged: (value) {
                      setState(() {
                        _errorCorrectionLevel = value;
                      });
                    },
                  ),
                  Text('M'),
                  SizedBox(width: 10),
                  Radio(
                    value: ErrorCorrectionLevel.Q,
                    groupValue: _errorCorrectionLevel,
                    onChanged: (value) {
                      setState(() {
                        _errorCorrectionLevel = value;
                      });
                    },
                  ),
                  Text('Q'),
                  SizedBox(width: 10),
                  Radio(
                    value: ErrorCorrectionLevel.H,
                    groupValue: _errorCorrectionLevel,
                    onChanged: (value) {
                      setState(() {
                        _errorCorrectionLevel = value;
                      });
                    },
                  ),
                  Text('H'),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user inputs the data to be encoded in the QR code using the TextField.
// 2. The user selects the size of the QR code using the Slider.
// 3. The user selects the error correction level of the QR code using the Radio buttons.
// 4. The KhqrWidget is updated with the new data, size, and error correction level.
// 5. The KhqrWidget generates the QR code based on the provided data and settings.
// 6. The generated QR code is displayed on the screen.

```

<-- END_MAIN -->
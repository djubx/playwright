<-- START_DESCRIPTION -->

# Flutter Native Screenshot Package
=====================================

The `flutter_native_screenshot` package allows you to capture screenshots of your Flutter app's native views. This package is useful when you need to capture a screenshot of a specific view or the entire screen, and you want to do it natively.

### When to Use This Package

* When you need to capture a screenshot of a specific native view.
* When you need to capture a screenshot of the entire screen.
* When you want to capture a screenshot natively, without using Dart.

### Features

* Capture a screenshot of a specific native view.
* Capture a screenshot of the entire screen.
* Save the screenshot as a PNG or JPEG image.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
=====================

### Add the Package to Your Pubspec

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_native_screenshot: ^1.0.0
```
Then, run `flutter pub get` to get the package.

### Import the Package

Import the package in your Dart file:
```dart
import 'package:flutter_native_screenshot/flutter_native_screenshot.dart';
```
### Capture a Screenshot

To capture a screenshot, you need to create a `NativeScreenshot` object and call its `capture` method:
```dart
NativeScreenshot screenshot = NativeScreenshot();
screenshot.capture().then((image) {
  // Do something with the image
});
```
You can also specify the format of the image (PNG or JPEG) and the quality of the image (only for JPEG):
```dart
screenshot.capture(format: NativeScreenshotFormat.png).then((image) {
  // Do something with the image
});

screenshot.capture(format: NativeScreenshotFormat.jpeg, quality: 80).then((image) {
  // Do something with the image
});
```
### Platform-Specific Details

#### Android

On Android, you need to add the following permission to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
```
You also need to create a directory to store the screenshots:
```dart
import 'dart:io';
import 'package:path_provider/path_provider.dart';

Future<void> _createDirectory() async {
  final directory = await getApplicationDocumentsDirectory();
  await directory.create();
}
```
#### iOS

On iOS, you don't need to add any permissions or create a directory.

### Optimizations

To optimize the performance of the screenshot capture, you can use the ` captureAsync` method instead of `capture`. This method returns a `Future` that completes when the screenshot is captured:
```dart
screenshot.captureAsync().then((image) {
  // Do something with the image
});
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'dart:io';
import 'package:flutter/material.dart';
import 'package:flutter_native_screenshot/flutter_native_screenshot.dart';
import 'package:path_provider/path_provider.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Native Screenshot Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  NativeScreenshot _screenshot = NativeScreenshot();

  Future<void> _createDirectory() async {
    // Create a directory to store the screenshots
    final directory = await getApplicationDocumentsDirectory();
    await directory.create();
  }

  Future<void> _captureScreenshot() async {
    // Capture a screenshot
    _screenshot.capture().then((image) {
      // Do something with the image
      print('Screenshot captured!');
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Native Screenshot Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: _createDirectory,
              child: Text('Create Directory'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _captureScreenshot,
              child: Text('Capture Screenshot'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and is presented with a screen that has two buttons: "Create Directory" and "Capture Screenshot".
// 2. When the user clicks the "Create Directory" button, the app creates a directory to store the screenshots.
// 3. When the user clicks the "Capture Screenshot" button, the app captures a screenshot of the current screen.
// 4. The screenshot is then stored in the directory that was created earlier.
// 5. The app prints a message to the console indicating that the screenshot has been captured.

// This code demonstrates how to use the Flutter Native Screenshot package to capture a screenshot of the current screen.
// It also shows how to create a directory to store the screenshots and how to store the screenshot in that directory.
```

<-- END_MAIN -->
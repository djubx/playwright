<-- START_DESCRIPTION -->

Phone Selector Flutter Package
==============================

The phone_selector package is a Flutter library that allows users to select a phone number from their device's contact list or enter a new phone number manually. This package is useful when you want to enable users to select a phone number for authentication, verification, or other purposes.

Features
--------

*   Allows users to select a phone number from their device's contact list
*   Enables users to enter a new phone number manually
*   Supports both Android and iOS platforms
*   Customizable UI to fit your app's design

When to Use
------------

You can use the phone_selector package in various scenarios, such as:

*   Authentication: Allow users to select a phone number for authentication purposes.
*   Verification: Enable users to select a phone number for verification purposes.
*   Contact management: Allow users to select a phone number from their contact list.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
----------------

To use the phone_selector package, follow these steps:

### Step 1: Add the package to your pubspec.yaml file

```yml
dependencies:
  flutter:
    sdk: flutter
  phone_selector: ^1.0.0
```

### Step 2: Import the package in your Dart file

```dart
import 'package:phone_selector/phone_selector.dart';
```

### Step 3: Use the PhoneSelector widget

```dart
PhoneSelector(
  onPhoneNumberSelected: (phoneNumber) {
    // Handle the selected phone number
  },
)
```

Platform-Specific Details
-------------------------

### Android

*   Add the following permission to your AndroidManifest.xml file:

```xml
<uses-permission android:name="android.permission.READ_CONTACTS" />
```

### iOS

*   Add the following lines to your Info.plist file:

```xml
<key>NSContactsUsageDescription</key>
<string>This app needs access to your contacts to select a phone number.</string>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:phone_selector/phone_selector.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Phone Selector Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  String _selectedPhoneNumber = '';

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Phone Selector Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            PhoneSelector(
              onPhoneNumberSelected: (phoneNumber) {
                // Handle the selected phone number
                setState(() {
                  _selectedPhoneNumber = phoneNumber;
                });
              },
            ),
            SizedBox(height: 20),
            Text(
              _selectedPhoneNumber.isEmpty
                  ? 'No phone number selected'
                  : 'Selected phone number: $_selectedPhoneNumber',
              style: TextStyle(fontSize: 18),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and is presented with a PhoneSelector widget.
// 2. The user clicks on the PhoneSelector widget to select a phone number.
// 3. The PhoneSelector widget displays a list of phone numbers from the user's contact list.
// 4. The user selects a phone number from the list.
// 5. The selected phone number is passed to the onPhoneNumberSelected callback.
// 6. The onPhoneNumberSelected callback updates the _selectedPhoneNumber variable with the selected phone number.
// 7. The UI is updated to display the selected phone number.

// Final summary: The code flows by first displaying a PhoneSelector widget to the user. When the user selects a phone number, the selected phone number is passed to the onPhoneNumberSelected callback, which updates the UI to display the selected phone number.
```

<-- END_MAIN -->
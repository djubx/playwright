<-- START_DESCRIPTION -->

# Ultimate Bottom Navbar
The `ultimate_bottom_navbar` package is a customizable bottom navigation bar for Flutter that allows you to create a bottom navigation bar with various styles and animations. It is a highly customizable package that allows you to create a bottom navigation bar that fits your app's design.

## When to use this package
You can use this package when you want to create a bottom navigation bar that is customizable and has various styles and animations. This package is ideal for apps that have multiple screens and want to provide a easy way for users to navigate between them.

## Features
Some of the key features of this package include:

* Customizable styles and animations
* Support for multiple screens
* Easy to use and implement
* Highly customizable

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
In this tutorial, we will walk through the setup process and explain how to use the `ultimate_bottom_navbar` package.

## Step 1: Add the package to your pubspec.yaml file
To use the `ultimate_bottom_navbar` package, you need to add it to your `pubspec.yaml` file. You can do this by adding the following line to your `pubspec.yaml` file:
```yml
dependencies:
  ultimate_bottom_navbar: ^1.0.0
```
## Step 2: Import the package
Once you have added the package to your `pubspec.yaml` file, you need to import it in your Dart file. You can do this by adding the following line to your Dart file:
```dart
import 'package:ultimate_bottom_navbar/ultimate_bottom_navbar.dart';
```
## Step 3: Create a UltimateBottomNavbar widget
To create a `UltimateBottomNavbar` widget, you need to create a new instance of the `UltimateBottomNavbar` class and pass in the required parameters. Here is an example:
```dart
UltimateBottomNavbar(
  onTap: (index) {
    // Handle tap event
  },
  items: [
    UltimateBottomNavbarItem(
      icon: Icon(Icons.home),
      title: Text('Home'),
    ),
    UltimateBottomNavbarItem(
      icon: Icon(Icons.settings),
      title: Text('Settings'),
    ),
  ],
)
```
## Platform-specific details
The `ultimate_bottom_navbar` package works on both Android and iOS platforms. However, there are some platform-specific details that you need to be aware of:

* On Android, the `UltimateBottomNavbar` widget will automatically adjust its height to fit the screen.
* On iOS, the `UltimateBottomNavbar` widget will not automatically adjust its height to fit the screen. You need to manually set the height of the widget.

## Required configurations or optimizations
There are no required configurations or optimizations for the `ultimate_bottom_navbar` package.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:ultimate_bottom_navbar/ultimate_bottom_navbar.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Ultimate Bottom Navbar Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  int _currentIndex = 0;

  @override
  Widget build(BuildContext context) {
    // Create a list of UltimateBottomNavbarItem widgets
    List<UltimateBottomNavbarItem> items = [
      UltimateBottomNavbarItem(
        icon: Icon(Icons.home),
        title: Text('Home'),
      ),
      UltimateBottomNavbarItem(
        icon: Icon(Icons.settings),
        title: Text('Settings'),
      ),
    ];

    // Create a UltimateBottomNavbar widget
    UltimateBottomNavbar bottomNavbar = UltimateBottomNavbar(
      onTap: (index) {
        // Handle tap event
        setState(() {
          _currentIndex = index;
        });
      },
      items: items,
    );

    // Create a list of widgets to display on each screen
    List<Widget> screens = [
      Center(
        child: Text('Home Screen'),
      ),
      Center(
        child: Text('Settings Screen'),
      ),
    ];

    // Return a Scaffold widget with a bottom navigation bar
    return Scaffold(
      body: screens[_currentIndex],
      bottomNavigationBar: bottomNavbar,
    );
  }
}
```

// The app starts by running the `main` function, which creates a new instance of the `MyApp` widget.
// The `MyApp` widget creates a new instance of the `MaterialApp` widget, which is the root widget of the app.
// The `MaterialApp` widget creates a new instance of the `MyHomePage` widget, which is the home screen of the app.
// The `MyHomePage` widget creates a new instance of the `UltimateBottomNavbar` widget, which is the bottom navigation bar.
// The `UltimateBottomNavbar` widget creates a list of `UltimateBottomNavbarItem` widgets, which are the items in the bottom navigation bar.
// When an item in the bottom navigation bar is tapped, the `onTap` callback is called, which updates the `_currentIndex` variable.
// The `_currentIndex` variable is used to determine which screen to display.
// The app displays the screen at the current index in the `screens` list.

<-- END_MAIN -->
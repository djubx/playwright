```markdown
<!-- START_DESCRIPTION -->
# Overview of the "root_check" Flutter Package

The `root_check` Flutter package is a powerful tool designed to help developers determine whether a device is rooted or jailbroken. This is particularly important for applications that require a high level of security, as rooted devices can pose significant risks, including the potential for malicious software to bypass security measures.

## When to Use

You should consider using the `root_check` package in scenarios such as:

- **Security-sensitive applications**: If your app handles sensitive data (e.g., banking, personal information), checking for root access can help mitigate risks.
- **Game development**: Many games implement root checks to prevent cheating and ensure fair play.
- **Enterprise applications**: Organizations often require that devices used for work are secure and not tampered with.

## Features

- **Cross-platform support**: Works on both Android and iOS.
- **Simple API**: Easy to integrate and use within your Flutter application.
- **Detailed results**: Provides clear information on whether the device is rooted or jailbroken.

By leveraging the `root_check` package, developers can enhance the security posture of their applications and protect user data effectively.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the "root_check" Package

## Step 1: Adding the Dependency

To get started, you need to add the `root_check` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  root_check: ^2.0.0  # Check for the latest version on pub.dev
```

## Step 2: Platform-Specific Configuration

### Android

1. **Permissions**: Ensure that your Android app has the necessary permissions. Open `AndroidManifest.xml` and add the following:

   ```xml
   <uses-permission android:name="android.permission.ACCESS_SUPERUSER" />
   ```

2. **Gradle Configuration**: Make sure your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file:

   ```groovy
   android {
       ...
       defaultConfig {
           ...
           minSdkVersion 21
           ...
       }
   }
   ```

### iOS

For iOS, there are no specific configurations required for the `root_check` package. However, ensure that your app complies with Apple's App Store guidelines regarding security and privacy.

## Step 3: Using the Package

Now that you have set up the package, you can use it in your Flutter application. Hereâ€™s how to check if a device is rooted or jailbroken:

```dart
import 'package:flutter/material.dart';
import 'package:root_check/root_check.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Root Check Example')),
        body: Center(
          child: ElevatedButton(
            onPressed: _checkRoot,
            child: Text('Check if Device is Rooted'),
          ),
        ),
      ),
    );
  }

  void _checkRoot() async {
    bool isRooted = await RootCheck.isRooted;
    if (isRooted) {
      print('Device is rooted or jailbroken!');
    } else {
      print('Device is secure.');
    }
  }
}
```

In this example, when the button is pressed, the app checks if the device is rooted and prints the result to the console.

With these steps, you can effectively integrate the `root_check` package into your Flutter application and ensure that your app runs securely on user devices.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using the "root_check" Package

```dart
import 'package:flutter/material.dart';
import 'package:root_check/root_check.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Root Check Example')),
        body: Center(
          child: ElevatedButton(
            onPressed: _checkRoot,
            child: Text('Check if Device is Rooted'),
          ),
        ),
      ),
    );
  }

  // This function checks if the device is rooted or jailbroken
  void _checkRoot() async {
    // Call the root check method from the root_check package
    bool isRooted = await RootCheck.isRooted;

    // Display the result in the console
    if (isRooted) {
      print('Device is rooted or jailbroken!'); // Inform the user that the device is compromised
    } else {
      print('Device is secure.'); // Inform the user that the device is safe
    }
  }
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the RealFlutter widget.
// 2. The RealFlutter widget builds a MaterialApp with a simple UI.
// 3. The UI contains a button that, when pressed, triggers the _checkRoot function.
// 4. The _checkRoot function asynchronously checks if the device is rooted using the RootCheck package.
// 5. Based on the result, it prints a message to the console indicating whether the device is secure or compromised.
```
<!-- END_MAIN -->
```

This structured blog provides a comprehensive overview of the `root_check` Flutter package, including its description, setup tutorial, and a complete example with detailed comments explaining the application flow.
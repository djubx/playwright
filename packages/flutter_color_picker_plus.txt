<-- START_DESCRIPTION -->

# Flutter Color Picker Plus Package
=====================================

The `flutter_color_picker_plus` package is a powerful and customizable color picker for Flutter applications. It provides a simple and intuitive way to select colors from a variety of palettes, including material design colors, RGB colors, and HEX colors.

### When to Use This Package

This package is ideal for applications that require color selection, such as:

* Graphic design and photo editing apps
* Color palette generators
* Customizable UI components

### Features

* Material design color palette
* RGB color picker
* HEX color input
* Customizable color palettes
* Support for Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `flutter_color_picker_plus` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter_color_picker_plus: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:flutter_color_picker_plus/flutter_color_picker_plus.dart';
```
### Step 3: Use the Color Picker

Create a `ColorPicker` widget and pass in the desired color palette:
```dart
ColorPicker(
  palette: ColorPalette.material,
  onColorChanged: (color) {
    // Handle color change
  },
)
```
### Platform-Specific Details

* Android: No additional configuration required.
* iOS: Add the following line to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_color_picker_plus/flutter_color_picker_plus.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  Color _selectedColor = Colors.white;

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Color Picker Demo'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              ColorPicker(
                palette: ColorPalette.material,
                onColorChanged: (color) {
                  setState(() {
                    _selectedColor = color;
                  });
                },
              ),
              SizedBox(height: 20),
              Text(
                'Selected Color:',
                style: TextStyle(fontSize: 24),
              ),
              SizedBox(height: 10),
              Container(
                width: 100,
                height: 100,
                color: _selectedColor,
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user runs the app and is presented with a color picker.
// 2. The user selects a color from the palette.
// 3. The `onColorChanged` callback is triggered, updating the `_selectedColor` state.
// 4. The UI is rebuilt, displaying the selected color in the container.
// 5. The user can repeat steps 2-4 to change the selected color.

// Final summary:
// This code demonstrates the use of the `flutter_color_picker_plus` package to create a simple color picker app.
// The app displays a color palette and allows the user to select a color.
// The selected color is then displayed in a container.
```

<-- END_MAIN -->
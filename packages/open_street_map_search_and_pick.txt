<-- START_DESCRIPTION -->

Open Street Map Search and Pick
==============================

The `open_street_map_search_and_pick` Flutter package is a powerful tool for integrating OpenStreetMap (OSM) search and pick functionality into your Flutter applications. This package allows users to search for locations and pick a specific location from the search results, which can then be used to get the latitude and longitude of the selected location.

When to Use This Package
------------------------

This package is ideal for applications that require location-based services, such as:

* Ride-hailing apps
* Food delivery apps
* Location-based games
* Travel and tourism apps

Features
--------

* Search for locations using OpenStreetMap data
* Pick a specific location from search results
* Get the latitude and longitude of the selected location
* Supports both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
---------------

To use the `open_street_map_search_and_pick` package, follow these steps:

### Step 1: Add the Package to Your Pubspec.yaml File

```yml
dependencies:
  flutter:
    sdk: flutter
  open_street_map_search_and_pick: ^0.0.1
```

### Step 2: Import the Package in Your Dart File

```dart
import 'package:open_street_map_search_and_pick/open_street_map_search_and_pick.dart';
```

### Step 3: Create an Instance of the OpenStreetMapSearchAndPick Class

```dart
OpenStreetMapSearchAndPick _openStreetMapSearchAndPick = OpenStreetMapSearchAndPick(
  apiKey: 'YOUR_API_KEY',
  limit: 10,
);
```

### Step 4: Use the searchAndPick Method to Search for Locations

```dart
_openStreetMapSearchAndPick.searchAndPick(
  context: context,
  searchText: 'New York',
).then((value) {
  if (value != null) {
    print('Selected location: ${value.name}');
    print('Latitude: ${value.latitude}');
    print('Longitude: ${value.longitude}');
  }
});
```

Platform-Specific Details
-------------------------

### Android

* Make sure to add the following permissions to your AndroidManifest.xml file:
```xml
<uses-permission android:name="android.permission.INTERNET" />
<uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
```

### iOS

* Make sure to add the following lines to your Info.plist file:
```xml
<key>NSLocationWhenInUseUsageDescription</key>
<string>This app needs access to location to work properly</string>
<key>NSLocationAlwaysAndWhenInUseUsageDescription</key>
<string>This app needs access to location to work properly</string>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:open_street_map_search_and_pick/open_street_map_search_and_pick.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Open Street Map Search and Pick Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  OpenStreetMapSearchAndPick _openStreetMapSearchAndPick;
  String _selectedLocationName;
  double _selectedLocationLatitude;
  double _selectedLocationLongitude;

  @override
  void initState() {
    super.initState();
    _openStreetMapSearchAndPick = OpenStreetMapSearchAndPick(
      apiKey: 'YOUR_API_KEY',
      limit: 10,
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Open Street Map Search and Pick Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Selected location:',
              style: TextStyle(fontSize: 20),
            ),
            Text(
              _selectedLocationName ?? '',
              style: TextStyle(fontSize: 20),
            ),
            SizedBox(height: 20),
            Text(
              'Latitude:',
              style: TextStyle(fontSize: 20),
            ),
            Text(
              _selectedLocationLatitude.toString() ?? '',
              style: TextStyle(fontSize: 20),
            ),
            SizedBox(height: 20),
            Text(
              'Longitude:',
              style: TextStyle(fontSize: 20),
            ),
            Text(
              _selectedLocationLongitude.toString() ?? '',
              style: TextStyle(fontSize: 20),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () async {
                final value = await _openStreetMapSearchAndPick.searchAndPick(
                  context: context,
                  searchText: 'New York',
                );
                if (value != null) {
                  setState(() {
                    _selectedLocationName = value.name;
                    _selectedLocationLatitude = value.latitude;
                    _selectedLocationLongitude = value.longitude;
                  });
                }
              },
              child: Text('Search and pick location'),
            ),
          ],
        ),
      ),
    );
  }
}

// The app starts by creating an instance of the OpenStreetMapSearchAndPick class.
// The user is then presented with a button to search and pick a location.
// When the button is pressed, the searchAndPick method is called, which opens a new screen for the user to search for locations.
// Once the user selects a location, the selected location's name, latitude, and longitude are displayed on the screen.

// The app uses the OpenStreetMapSearchAndPick package to handle the search and pick functionality.
// The package uses the OpenStreetMap API to search for locations and retrieve their coordinates.

// The app's UI is built using Flutter's Material Design widgets.
// The app's state is managed using the StatefulWidget class.

// Overall, the app demonstrates how to use the OpenStreetMapSearchAndPick package to add search and pick functionality to a Flutter app.
```

<-- END_MAIN -->
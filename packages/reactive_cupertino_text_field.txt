<-- START_DESCRIPTION -->

# Reactive Cupertino Text Field Package
=====================================

The `reactive_cupertino_text_field` package is a Flutter package that provides a reactive text field widget with a Cupertino style. It is designed to work with the `reactive_forms` package and provides a seamless way to handle form data and validation.

### When to Use This Package

This package is ideal for building forms in Flutter applications that require a Cupertino style text field. It is particularly useful when building applications that require a high level of customization and control over the form fields.

### Features

*   Reactive text field with Cupertino style
*   Supports various input types (e.g., text, email, password)
*   Built-in validation and error handling
*   Customizable appearance and behavior

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Package
=============================================

### Step 1: Add the Package to Your Project

To use the `reactive_cupertino_text_field` package, you need to add it to your project's `pubspec.yaml` file. Add the following line to the `dependencies` section:

```yml
dependencies:
  reactive_cupertino_text_field: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:reactive_cupertino_text_field/reactive_cupertino_text_field.dart';
```

### Step 3: Create a Reactive Form

Create a reactive form using the `ReactiveForm` widget:

```dart
ReactiveForm(
  formGroup: FormGroup({
    'email': FormControl(
      validators: [Validators.required, Validators.email],
    ),
  }),
  child: // Your form fields here
)
```

### Step 4: Add the Reactive Cupertino Text Field

Add the `ReactiveCupertinoTextField` widget to your form:

```dart
ReactiveCupertinoTextField(
  formControlName: 'email',
  placeholder: 'Enter your email',
)
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:reactive_forms/reactive_forms.dart';
import 'package:reactive_cupertino_text_field/reactive_cupertino_text_field.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Reactive Cupertino Text Field Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final FormGroup _formGroup = FormGroup({
    'email': FormControl(
      validators: [Validators.required, Validators.email],
    ),
    'password': FormControl(
      validators: [Validators.required, Validators.minLength(8)],
    ),
  });

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Reactive Cupertino Text Field Demo'),
      ),
      body: ReactiveForm(
        formGroup: _formGroup,
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Column(
            children: [
              // Email field
              ReactiveCupertinoTextField(
                formControlName: 'email',
                placeholder: 'Enter your email',
              ),
              SizedBox(height: 16),
              // Password field
              ReactiveCupertinoTextField(
                formControlName: 'password',
                placeholder: 'Enter your password',
                obscureText: true,
              ),
              SizedBox(height: 16),
              // Submit button
              ElevatedButton(
                onPressed: () {
                  if (_formGroup.valid) {
                    print('Form is valid');
                  } else {
                    print('Form is invalid');
                  }
                },
                child: Text('Submit'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and is presented with a form containing two fields: email and password.
// 2. The user enters their email and password, and the form validates the input in real-time.
// 3. If the form is valid, the user can submit it by pressing the "Submit" button.
// 4. When the form is submitted, the app checks if the form is valid. If it is, the app prints "Form is valid" to the console.
// 5. If the form is invalid, the app prints "Form is invalid" to the console.

```

<-- END_MAIN -->
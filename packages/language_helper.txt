<-- START_DESCRIPTION -->

Language Helper Flutter Package
==============================

The `language_helper` Flutter package is a powerful tool for managing languages and translations in your Flutter applications. It provides a simple and efficient way to handle multiple languages, making it easy to reach a global audience.

When to Use
------------

You should use the `language_helper` package when:

* You want to support multiple languages in your Flutter application.
* You need to manage translations and language settings efficiently.
* You want to provide a seamless user experience for users with different language preferences.

Features
--------

The `language_helper` package offers the following features:

* Easy language management: Add, remove, and manage languages with ease.
* Translation support: Store and retrieve translations for each language.
* Language settings: Get and set the current language, and listen for language changes.
* Locale support: Get the current locale and listen for locale changes.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
----------------

To use the `language_helper` package, follow these steps:

### Step 1: Add the Package to Your Project

Add the `language_helper` package to your `pubspec.yaml` file:
```yml
dependencies:
  language_helper: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the `language_helper` package in your Dart file:
```dart
import 'package:language_helper/language_helper.dart';
```
### Step 3: Initialize the Package

Initialize the `language_helper` package in your `main` function:
```dart
void main() {
  LanguageHelper.init();
  runApp(MyApp());
}
```
### Step 4: Use the Package

Use the `language_helper` package to manage languages and translations:
```dart
class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: LanguageHelper.translate('app_title'),
      home: MyHomePage(),
    );
  }
}
```
Platform-Specific Details
-------------------------

### Android

On Android, you need to add the following code to your `AndroidManifest.xml` file:
```xml
<application
  ...
  android:configChanges="locale"
  ...>
</application>
```
This allows the `language_helper` package to listen for locale changes.

### iOS

On iOS, you need to add the following code to your `Info.plist` file:
```xml
<key>CFBundleLocalizations</key>
<array>
  <string>en</string>
  <string>fr</string>
  <!-- Add more languages as needed -->
</array>
```
This specifies the languages supported by your application.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:language_helper/language_helper.dart';

void main() {
  LanguageHelper.init();
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Get the current language
    String currentLanguage = LanguageHelper.getCurrentLanguage();

    // Listen for language changes
    LanguageHelper.onLanguageChanged.listen((language) {
      print('Language changed to $language');
    });

    // Translate a string
    String translatedString = LanguageHelper.translate('hello_world');

    return MaterialApp(
      title: translatedString,
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Get the current locale
    Locale currentLocale = LanguageHelper.getCurrentLocale();

    // Listen for locale changes
    LanguageHelper.onLocaleChanged.listen((locale) {
      print('Locale changed to $locale');
    });

    return Scaffold(
      appBar: AppBar(
        title: Text(LanguageHelper.translate('app_title')),
      ),
      body: Center(
        child: Text(LanguageHelper.translate('hello_world')),
      ),
    );
  }
}

// Application flow:
// 1. The `main` function initializes the `language_helper` package.
// 2. The `RealFlutter` widget gets the current language and listens for language changes.
// 3. The `RealFlutter` widget translates a string using the `language_helper` package.
// 4. The `MyHomePage` widget gets the current locale and listens for locale changes.
// 5. The `MyHomePage` widget uses the translated string as its title.
// 6. The `MyHomePage` widget displays the translated string in its body.

// Final summary:
// The `language_helper` package provides a simple and efficient way to manage languages and translations in Flutter applications.
// This example demonstrates how to use the package to get the current language, listen for language changes, translate strings, and get the current locale.
```

<-- END_MAIN -->
```markdown
<!-- START_DESCRIPTION -->
# Angel3 Validate: A Comprehensive Overview

The `angel3_validate` package is a powerful validation library for Flutter applications, designed to simplify the process of validating user input. It provides a robust framework for defining validation rules and applying them to various data types, making it an essential tool for developers who want to ensure data integrity in their applications.

## When to Use This Package
You should consider using `angel3_validate` when:
- You need to validate user input forms, such as registration or login forms.
- You want to enforce specific data formats, such as email addresses or phone numbers.
- You require a flexible and extensible validation system that can be easily integrated into your Flutter app.

## Key Features
- **Custom Validation Rules**: Create your own validation rules tailored to your application's needs.
- **Built-in Validators**: Utilize a variety of pre-defined validators for common use cases, such as email and URL validation.
- **Asynchronous Validation**: Support for asynchronous validation, allowing for checks against external data sources.
- **Error Messaging**: Easily manage and display error messages associated with validation failures.

With these features, `angel3_validate` empowers developers to create user-friendly and reliable applications.
<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Setting Up and Using Angel3 Validate

## Installation
To add the `angel3_validate` package to your Flutter project, include it in your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  angel3_validate: ^latest_version
```

Replace `latest_version` with the most recent version available on [pub.dev](https://pub.dev/packages/angel3_validate).

## Platform-Specific Details
### Android
No specific configurations are required for Android. Just ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file.

### iOS
For iOS, ensure that you have the correct permissions set in your `Info.plist` if your validation involves accessing device features (like camera for image uploads).

## Basic Usage
To use `angel3_validate`, you need to create a validation schema and apply it to your data. Hereâ€™s a simple example:

```dart
import 'package:angel3_validate/angel3_validate.dart';

void main() {
  // Create a new validator instance
  final validator = Validator();

  // Define validation rules
  validator.addRule('email', (value) {
    if (value == null || !RegExp(r'^[^@]+@[^@]+\.[^@]+').hasMatch(value)) {
      return 'Invalid email address';
    }
    return null; // No error
  });

  // Validate input
  final emailError = validator.validate('email', 'test@example.com');
  print(emailError); // Should print null if valid
}
```

In this example, we create a simple email validation rule and check if the input is valid.
<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of Angel3 Validate

```dart
import 'package:flutter/material.dart';
import 'package:angel3_validate/angel3_validate.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Angel3 Validate Example',
      home: ValidationForm(),
    );
  }
}

class ValidationForm extends StatefulWidget {
  @override
  _ValidationFormState createState() => _ValidationFormState();
}

class _ValidationFormState extends State<ValidationForm> {
  final _formKey = GlobalKey<FormState>(); // Key to identify the form
  final _validator = Validator(); // Create a validator instance
  String _email = ''; // Variable to hold email input
  String? _emailError; // Variable to hold email error message

  @override
  void initState() {
    super.initState();
    // Define validation rules
    _validator.addRule('email', (value) {
      if (value == null || !RegExp(r'^[^@]+@[^@]+\.[^@]+').hasMatch(value)) {
        return 'Invalid email address'; // Return error message
      }
      return null; // No error
    });
  }

  void _validateAndSubmit() {
    // Validate the form
    if (_formKey.currentState!.validate()) {
      // If valid, show success message
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Email is valid!')),
      );
    } else {
      // If not valid, set the error message
      setState(() {
        _emailError = _validator.validate('email', _email);
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Validation Form')),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey, // Assign the form key
          child: Column(
            children: [
              TextFormField(
                decoration: InputDecoration(
                  labelText: 'Email',
                  errorText: _emailError, // Display error message
                ),
                onChanged: (value) {
                  _email = value; // Update email variable
                  setState(() {
                    _emailError = null; // Clear error message on change
                  });
                },
                validator: (value) {
                  return _validator.validate('email', value); // Validate input
                },
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _validateAndSubmit, // Validate on button press
                child: Text('Submit'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
```

```
// The application starts with the main function, which runs the RealFlutter widget.
// RealFlutter is a StatelessWidget that sets up the MaterialApp with a title and home page.
// The home page is a ValidationForm StatefulWidget that manages the form state.

// In the ValidationForm, we define a GlobalKey to manage the form state and an instance of Validator.
// The email variable holds the user's input, and _emailError holds any validation error messages.

// In the initState method, we define the validation rule for the email field.
// The _validateAndSubmit method checks if the form is valid and shows a success message or sets the error message.

// The build method constructs the UI, including a TextFormField for email input and a submit button.
// The TextFormField uses the validator to check the input against the defined rules and displays any error messages.
// When the submit button is pressed, the form is validated, and appropriate actions are taken based on the validation result.
```
<!-- END_MAIN -->
``` 

This structured approach provides a comprehensive understanding of the `angel3_validate` package, guiding developers through its features, setup, and practical usage in a Flutter application.
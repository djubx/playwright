```markdown
<-- START_DESCRIPTION -->

# translations_cleaner Flutter Package

The `translations_cleaner` Flutter package is a powerful tool designed to streamline the management of translation files in Flutter applications. It helps developers maintain clean and organized translation files by removing unused keys and sorting them alphabetically. This package is particularly useful in projects with extensive localization needs, where managing translation files manually can become cumbersome and error-prone.

## When to Use

- **Large Projects**: In projects with a significant number of translation keys, keeping track of unused keys can be challenging. This package automates the cleanup process.
- **Frequent Updates**: If your application undergoes frequent updates that involve adding or removing UI elements, `translations_cleaner` ensures that your translation files remain up-to-date.
- **Code Refactoring**: During refactoring, some translation keys may become obsolete. This package helps in identifying and removing such keys.

## Features

- **Unused Key Removal**: Automatically detects and removes keys that are no longer used in the codebase.
- **Alphabetical Sorting**: Sorts translation keys alphabetically for better readability and organization.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS platforms.
- **Customizable**: Offers configuration options to tailor the cleaning process to specific project needs.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using translations_cleaner

In this tutorial, we will walk through the setup process for the `translations_cleaner` package and demonstrate how to use it effectively in a Flutter project.

## Setup Process

### Step 1: Add Dependency

Add `translations_cleaner` to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  translations_cleaner: ^1.0.0
```

Run `flutter pub get` to install the package.

### Step 2: Configure the Package

Create a configuration file named `translations_cleaner.yaml` in the root of your project. This file will specify the paths to your translation files and any other settings you wish to customize.

```yaml
input_directory: assets/translations
output_directory: assets/translations
sort_keys: true
```

### Step 3: Platform-Specific Details

#### Android

Ensure that your translation files are correctly referenced in your `pubspec.yaml` under the `assets` section:

```yaml
flutter:
  assets:
    - assets/translations/
```

#### iOS

No additional configuration is required for iOS, as Flutter handles asset management across platforms.

### Step 4: Run the Cleaner

Execute the following command in your terminal to clean your translation files:

```bash
flutter pub run translations_cleaner:clean
```

This command will process the translation files, remove unused keys, and sort them as specified in the configuration file.

<-- END_TUTORIAL -->

<-- START_MAIN -->

# Complete Example: Flutter Main File

Below is a complete example of a Flutter application using the `translations_cleaner` package. This example demonstrates how to integrate and utilize the package within a Flutter app.

```dart
import 'package:flutter/material.dart';
// Import the translations_cleaner package
import 'package:translations_cleaner/translations_cleaner.dart';

void main() {
  runApp(MyApp());
}

// Main application widget
class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Translation Cleaner Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: TranslationHomePage(),
    );
  }
}

// Home page widget
class TranslationHomePage extends StatefulWidget {
  @override
  _TranslationHomePageState createState() => _TranslationHomePageState();
}

class _TranslationHomePageState extends State<TranslationHomePage> {
  // Example translation keys
  final Map<String, String> translations = {
    'hello': 'Hello',
    'welcome': 'Welcome',
    'goodbye': 'Goodbye',
  };

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Translation Cleaner Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(translations['hello'] ?? 'Hello'),
            Text(translations['welcome'] ?? 'Welcome'),
            Text(translations['goodbye'] ?? 'Goodbye'),
          ],
        ),
      ),
    );
  }
}

// Application Flow Explanation
// The application starts by running the MyApp widget, which sets up a MaterialApp.
// The MaterialApp uses TranslationHomePage as its home, which is a stateful widget.
// TranslationHomePage maintains a map of translation keys and their corresponding values.
// The build method of TranslationHomePage returns a Scaffold with an AppBar and a Center widget.
// Inside the Center widget, a Column displays text widgets for each translation key.
// The translations are displayed using the map, and if a key is missing, a default value is shown.
```

<-- END_MAIN -->
```

This blog post provides a comprehensive guide to using the `translations_cleaner` package in Flutter applications. By following the steps outlined in the tutorial, developers can efficiently manage their translation files, ensuring that their applications remain clean and organized. The complete example demonstrates how to integrate the package into a Flutter app, showcasing its key features and benefits.
# Sudoku Dart Flutter Package

## <-- START_DESCRIPTION -->

### Description

The `sudoku_dart` package is a powerful and flexible library designed for generating and solving Sudoku puzzles in Dart and Flutter applications. This package is particularly useful for developers looking to integrate Sudoku games or features into their apps, providing a robust backend for puzzle generation and validation.

### When to Use

You might consider using the `sudoku_dart` package in scenarios such as:
- Developing a Sudoku game app.
- Creating educational tools for learning Sudoku strategies.
- Implementing Sudoku puzzles as part of a larger gaming platform.

### Features

- **Puzzle Generation**: Create Sudoku puzzles of varying difficulty levels.
- **Puzzle Solving**: Solve existing Sudoku puzzles with a built-in solver.
- **Validation**: Check the validity of a Sudoku board.
- **Customizable**: Adjust the difficulty and size of the puzzles.
- **Dart and Flutter Compatibility**: Works seamlessly in both Dart console applications and Flutter mobile apps.

## <-- END_DESCRIPTION -->

## <-- START_TUTORIAL -->

### Tutorial

To get started with the `sudoku_dart` package, follow these steps:

#### Step 1: Add Dependency

Add the `sudoku_dart` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  sudoku_dart: ^1.0.0  # Check for the latest version on pub.dev
```

#### Step 2: Install Packages

Run the following command in your terminal to install the package:

```bash
flutter pub get
```

#### Step 3: Platform-Specific Configuration

For both Android and iOS, no specific configurations are required for the `sudoku_dart` package. However, ensure that your Flutter environment is set up correctly for both platforms.

#### Step 4: Import the Package

In your Dart file, import the package:

```dart
import 'package:sudoku_dart/sudoku_dart.dart';
```

### Basic Usage

You can now use the `sudoku_dart` package to generate and solve Sudoku puzzles. Below is a simple example of how to create a Sudoku puzzle and validate it.

```dart
void main() {
  // Create a new Sudoku puzzle
  final sudoku = Sudoku();
  final puzzle = sudoku.generatePuzzle(difficulty: Difficulty.easy);

  // Print the generated puzzle
  print('Generated Sudoku Puzzle:');
  print(puzzle);

  // Validate the generated puzzle
  final isValid = sudoku.validate(puzzle);
  print('Is the puzzle valid? $isValid');
}
```

## <-- END_TUTORIAL -->

## <-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:sudoku_dart/sudoku_dart.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Sudoku Dart Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: SudokuHome(),
    );
  }
}

class SudokuHome extends StatefulWidget {
  @override
  _SudokuHomeState createState() => _SudokuHomeState();
}

class _SudokuHomeState extends State<SudokuHome> {
  late Sudoku sudoku; // Declare a Sudoku instance
  late List<List<int>> puzzle; // To hold the generated puzzle

  @override
  void initState() {
    super.initState();
    sudoku = Sudoku(); // Initialize the Sudoku instance
    puzzle = sudoku.generatePuzzle(difficulty: Difficulty.easy); // Generate an easy puzzle
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Sudoku Dart Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text('Generated Sudoku Puzzle:', style: TextStyle(fontSize: 20)),
            SizedBox(height: 20),
            // Display the Sudoku puzzle
            SudokuGrid(puzzle: puzzle),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                // Validate the puzzle when the button is pressed
                final isValid = sudoku.validate(puzzle);
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text('Is the puzzle valid? $isValid')),
                );
              },
              child: Text('Validate Puzzle'),
            ),
          ],
        ),
      ),
    );
  }
}

class SudokuGrid extends StatelessWidget {
  final List<List<int>> puzzle;

  SudokuGrid({required this.puzzle});

  @override
  Widget build(BuildContext context) {
    return Column(
      children: puzzle.map((row) {
        return Row(
          mainAxisAlignment: MainAxisAlignment.center,
          children: row.map((cell) {
            return Container(
              width: 30,
              height: 30,
              margin: EdgeInsets.all(2),
              decoration: BoxDecoration(
                border: Border.all(),
              ),
              child: Center(child: Text(cell == 0 ? '' : cell.toString())),
            );
          }).toList(),
        );
      }).toList(),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the RealFlutter widget.
// 2. RealFlutter builds a MaterialApp with a title and theme.
// 3. The home widget is set to SudokuHome, which manages the state of the Sudoku puzzle.
// 4. In the initState method, a new Sudoku instance is created, and an easy puzzle is generated.
// 5. The build method displays the generated puzzle using the SudokuGrid widget.
// 6. When the "Validate Puzzle" button is pressed, the puzzle is validated, and the result is shown in a SnackBar.
```

## <-- END_MAIN -->

### Summary

In this blog post, we explored the `sudoku_dart` package, which provides a comprehensive solution for generating and solving Sudoku puzzles in Flutter applications. We walked through the installation process, basic usage, and provided a complete example of a Flutter app that demonstrates the package's capabilities. The application flow was explained step-by-step through comments in the code, making it easy to understand how to integrate and utilize the `sudoku_dart` package effectively.
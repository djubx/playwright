```markdown
<!-- START_DESCRIPTION -->
# Conversion Units Flutter Package

The `conversion_units` Flutter package is a powerful tool designed to facilitate unit conversions in Flutter applications. It provides a simple and efficient way to convert between various measurement units, making it ideal for applications that require unit conversions, such as scientific calculators, fitness apps, or any app that deals with measurements.

## When to Use This Package
You might consider using the `conversion_units` package in scenarios such as:
- Building a fitness app that converts between different units of weight (e.g., pounds to kilograms).
- Creating a scientific calculator that requires conversions between metric and imperial units.
- Developing a cooking app that needs to convert between volume and weight measurements.

## Features
- **Wide Range of Units**: Supports various categories including length, weight, temperature, area, volume, and more.
- **Simple API**: Easy-to-use methods for converting between units.
- **Custom Units**: Ability to define and convert custom units as needed.
- **Lightweight**: Minimal overhead, ensuring fast performance in your Flutter applications.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Conversion Units Package

## Installation
To use the `conversion_units` package, you need to add it to your `pubspec.yaml` file. Open your Flutter project and add the following line under dependencies:

```yaml
dependencies:
  conversion_units: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command in your terminal to install the package:

```bash
flutter pub get
```

## Platform-Specific Details
The `conversion_units` package is designed to work seamlessly on both Android and iOS platforms. There are no additional configurations required for either platform, making it straightforward to integrate into your Flutter application.

## Basic Usage
To use the package, you need to import it into your Dart file:

```dart
import 'package:conversion_units/conversion_units.dart';
```

You can then use the provided methods to perform conversions. For example, to convert 10 kilometers to miles, you would use:

```dart
double miles = ConversionUnits.convert(10, from: Unit.kilometers, to: Unit.miles);
```

This will return the equivalent value in miles.

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of Using the Conversion Units Package

```dart
import 'package:flutter/material.dart';
import 'package:conversion_units/conversion_units.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Unit Conversion App',
      home: ConversionHome(),
    );
  }
}

class ConversionHome extends StatefulWidget {
  @override
  _ConversionHomeState createState() => _ConversionHomeState();
}

class _ConversionHomeState extends State<ConversionHome> {
  // Controller for input field
  final TextEditingController _controller = TextEditingController();
  // Variable to hold the converted value
  String _convertedValue = '';

  // Method to perform conversion
  void _convertUnits() {
    // Get the input value from the text field
    double inputValue = double.tryParse(_controller.text) ?? 0.0;
    // Convert kilometers to miles
    double miles = ConversionUnits.convert(inputValue, from: Unit.kilometers, to: Unit.miles);
    // Update the state with the converted value
    setState(() {
      _convertedValue = '$inputValue kilometers is equal to $miles miles';
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Unit Conversion'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            // Input field for user to enter kilometers
            TextField(
              controller: _controller,
              decoration: InputDecoration(
                labelText: 'Enter value in kilometers',
              ),
              keyboardType: TextInputType.number,
            ),
            SizedBox(height: 20),
            // Button to trigger conversion
            ElevatedButton(
              onPressed: _convertUnits,
              child: Text('Convert to Miles'),
            ),
            SizedBox(height: 20),
            // Display the converted value
            Text(
              _convertedValue,
              style: TextStyle(fontSize: 20),
            ),
          ],
        ),
      ),
    );
  }
}
```

```
// The main function initializes the app and runs the RealFlutter widget.
// The RealFlutter widget sets up the MaterialApp with a title and home page.
// The ConversionHome widget is a stateful widget that manages the conversion logic.
// It contains a TextField for user input, an ElevatedButton to trigger the conversion,
// and a Text widget to display the result.
// The _convertUnits method retrieves the input value, performs the conversion from kilometers to miles,
// and updates the UI with the result.
```
<!-- END_MAIN -->
```

### Summary
In this blog post, we explored the `conversion_units` Flutter package, which simplifies unit conversions in Flutter applications. We covered the installation process, usage examples, and provided a complete example application that demonstrates how to convert kilometers to miles. The application flow is straightforward, allowing users to input a value, trigger the conversion, and display the result seamlessly. This package is a valuable addition for any Flutter developer looking to implement unit conversions in their projects.
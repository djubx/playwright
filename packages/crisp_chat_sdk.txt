<-- START_DESCRIPTION -->

# Crisp Chat SDK Flutter Package
=====================================

The `crisp_chat_sdk` Flutter package is a powerful tool for integrating Crisp's chat functionality into your Flutter applications. It provides a seamless way to connect with your users, offer support, and enhance their overall experience.

### When to Use This Package

This package is ideal for businesses and organizations that want to provide top-notch customer support through live chat. It's perfect for e-commerce platforms, service-based websites, and any other application where user interaction is crucial.

### Features

*   Easy integration with Crisp's chat platform
*   Customizable chat interface to match your brand
*   Support for multiple chat sessions
*   File sharing and image upload capabilities
*   Real-time chat updates and notifications

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Crisp Chat SDK Flutter Package
---------------------------------------------

### Step 1: Add the Package to Your Project

Add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  crisp_chat_sdk: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:crisp_chat_sdk/crisp_chat_sdk.dart';
```

### Step 3: Initialize the Crisp Chat SDK

Initialize the Crisp Chat SDK with your website ID:

```dart
CrispChatSDK.initialize('YOUR_WEBSITE_ID');
```

### Step 4: Configure Platform-Specific Settings

#### Android

Add the following code to your `AndroidManifest.xml` file:

```xml
<application
    ...
    android:usesCleartextTraffic="true">
    ...
</application>
```

#### iOS

Add the following code to your `Info.plist` file:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

### Step 5: Display the Chat Interface

Use the `CrispChatSDK` widget to display the chat interface:

```dart
CrispChatSDK(
  websiteId: 'YOUR_WEBSITE_ID',
  locale: 'en',
)
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:crisp_chat_sdk/crisp_chat_sdk.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Crisp Chat SDK Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  void initState() {
    super.initState();
    // Initialize the Crisp Chat SDK with your website ID
    CrispChatSDK.initialize('YOUR_WEBSITE_ID');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Crisp Chat SDK Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            // Display the chat interface
            CrispChatSDK(
              websiteId: 'YOUR_WEBSITE_ID',
              locale: 'en',
            ),
          ],
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user opens the app and is presented with a chat interface.
// 2. The user can type and send messages to the Crisp chat platform.
// 3. The Crisp chat platform responds with a message, which is displayed in the chat interface.
// 4. The user can continue to chat with the Crisp chat platform, sending and receiving messages in real-time.
```

// Summary: This code sets up a basic Flutter app with the Crisp Chat SDK. It initializes the SDK with a website ID, displays the chat interface, and allows the user to send and receive messages in real-time.

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Sweet Navigation Bar Package
The sweet_nav_bar package is a popular Flutter package used to create a customizable and responsive navigation bar. It provides a variety of features, including support for both Android and iOS platforms, customizable colors, and animation effects.

## When to Use
This package is ideal for applications that require a navigation bar with a high degree of customization. It is also suitable for applications that need to support both Android and iOS platforms.

## Features
Some of the key features of the sweet_nav_bar package include:

* Customizable colors and animation effects
* Support for both Android and iOS platforms
* Responsive design
* Easy to use and integrate into existing applications

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Sweet Navigation Bar Package
To use the sweet_nav_bar package, follow these steps:

1. Add the package to your pubspec.yaml file:
```yml
dependencies:
  flutter:
    sdk: flutter
  sweet_nav_bar: ^1.0.0
```
2. Run the `flutter pub get` command to install the package.
3. Import the package in your Dart file:
```dart
import 'package:sweet_nav_bar/sweet_nav_bar.dart';
```
4. Create a new instance of the `SweetNavBar` class:
```dart
SweetNavBar sweetNavBar = SweetNavBar(
  items: [
    SweetNavBarItem(icon: Icons.home, title: 'Home'),
    SweetNavBarItem(icon: Icons.search, title: 'Search'),
    SweetNavBarItem(icon: Icons.settings, title: 'Settings'),
  ],
);
```
5. Add the `SweetNavBar` instance to your application's scaffold:
```dart
Scaffold(
  body: Center(
    child: Text('Hello, World!'),
  ),
  bottomNavigationBar: sweetNavBar,
);
```
### Platform-Specific Details
For Android, you need to add the following code to your `AndroidManifest.xml` file:
```xml
<application
  ...
  android:theme="@style/Theme.AppCompat.Light.NoActionBar"
  ...
>
```
For iOS, you need to add the following code to your `Info.plist` file:
```xml
<key>UIViewControllerBasedStatusBarAppearance</key>
<false/>
```
### Required Configurations and Optimizations
To optimize the performance of the sweet_nav_bar package, you can set the `animationDuration` property to a lower value:
```dart
SweetNavBar(
  ...
  animationDuration: Duration(milliseconds: 500),
);
```
You can also customize the colors and animation effects of the navigation bar by using the various properties provided by the `SweetNavBar` class.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:sweet_nav_bar/sweet_nav_bar.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  int _currentIndex = 0;

  @override
  Widget build(BuildContext context) {
    // Create a new instance of the SweetNavBar class
    SweetNavBar sweetNavBar = SweetNavBar(
      // Set the items of the navigation bar
      items: [
        SweetNavBarItem(icon: Icons.home, title: 'Home'),
        SweetNavBarItem(icon: Icons.search, title: 'Search'),
        SweetNavBarItem(icon: Icons.settings, title: 'Settings'),
      ],
      // Set the current index of the navigation bar
      currentIndex: _currentIndex,
      // Set the onIndexChanged callback
      onIndexChanged: (index) {
        // Update the current index
        setState(() {
          _currentIndex = index;
        });
      },
    );

    // Return the Scaffold widget
    return Scaffold(
      // Set the body of the scaffold
      body: Center(
        // Display the current index
        child: Text('Current Index: $_currentIndex'),
      ),
      // Set the bottom navigation bar
      bottomNavigationBar: sweetNavBar,
    );
  }
}

// The application flow is as follows:
// 1. The user launches the application.
// 2. The RealFlutter widget is created and displayed.
// 3. The SweetNavBar instance is created and added to the scaffold.
// 4. The user interacts with the navigation bar by tapping on an item.
// 5. The onIndexChanged callback is called and the current index is updated.
// 6. The scaffold is rebuilt with the new current index.
// 7. The user sees the updated current index displayed on the screen.

// In summary, the code flows as follows:
// RealFlutter -> SweetNavBar -> Scaffold -> Body -> Bottom Navigation Bar
// The SweetNavBar instance is used to display the navigation bar and handle user interactions.
// The Scaffold widget is used to display the body and bottom navigation bar.
```

<-- END_MAIN -->
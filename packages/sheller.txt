<-- START_DESCRIPTION -->

# Sheller Flutter Package: A Comprehensive Overview
=====================================================

The Sheller Flutter package is a powerful tool for creating and managing shell processes in Flutter applications. It provides a simple and efficient way to execute shell commands, handle output, and interact with the underlying operating system.

### When to Use Sheller

Sheller is ideal for Flutter applications that require:

* Execution of shell commands, such as running scripts or system commands
* Interaction with the underlying operating system, such as accessing environment variables or system files
* Handling output from shell commands, such as parsing command output or displaying it in the app

### Features

Sheller offers the following key features:

* Simple and efficient execution of shell commands
* Support for both synchronous and asynchronous command execution
* Ability to handle output from shell commands, including parsing and displaying output
* Interaction with the underlying operating system, including access to environment variables and system files

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using Sheller
=============================

### Adding Sheller to Your Flutter Project

To add Sheller to your Flutter project, simply add the following dependency to your `pubspec.yaml` file:
```yml
dependencies:
  sheller: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Importing Sheller

To use Sheller in your Flutter app, import the package in your Dart file:
```dart
import 'package:sheller/sheller.dart';
```
### Executing Shell Commands

To execute a shell command using Sheller, create a new instance of the `Sheller` class and call the `exec` method:
```dart
Sheller sheller = Sheller();
String output = await sheller.exec('ls -l');
print(output);
```
This will execute the `ls -l` command and print the output to the console.

### Handling Output

Sheller provides several ways to handle output from shell commands, including:

* `exec`: executes the command and returns the output as a string
* `execStream`: executes the command and returns a stream of output
* `execFuture`: executes the command and returns a future that completes with the output

### Platform-Specific Details

Sheller works on both Android and iOS platforms. However, there are some platform-specific details to keep in mind:

* On Android, Sheller uses the `Runtime.getRuntime().exec()` method to execute shell commands. This means that the app must have the `android.permission.INTERNET` permission to use Sheller.
* On iOS, Sheller uses the `NSTask` class to execute shell commands. This means that the app must have the `com.apple.security.network.client` entitlement to use Sheller.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:sheller/sheller.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Sheller Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  String _output = '';

  Future<void> _execCommand() async {
    // Create a new instance of the Sheller class
    Sheller sheller = Sheller();

    // Execute the 'ls -l' command
    String output = await sheller.exec('ls -l');

    // Update the output text
    setState(() {
      _output = output;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Sheller Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(_output),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _execCommand,
              child: Text('Execute Command'),
            ),
          ],
        ),
      ),
    );
  }
}

// The app starts by creating a new instance of the MyApp class.
// The MyApp class builds a MaterialApp with a title and a home page.
// The home page is an instance of the MyHomePage class.
// The MyHomePage class is a stateful widget that builds a Scaffold with an AppBar and a body.
// The body is a Center widget that contains a Column with two children: a Text widget and an ElevatedButton.
// The Text widget displays the output from the shell command.
// The ElevatedButton has an onPressed handler that calls the _execCommand function.
// The _execCommand function creates a new instance of the Sheller class and executes the 'ls -l' command.
// The output from the command is then updated in the Text widget.

// This is a basic demo of how to use the Sheller package to execute shell commands in a Flutter app.
```

<-- END_MAIN -->
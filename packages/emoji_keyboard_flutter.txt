# Flutter Package Overview: emoji_keyboard_flutter

<!-- START_DESCRIPTION -->
## Description

The `emoji_keyboard_flutter` package is a powerful and customizable emoji keyboard for Flutter applications. It allows developers to easily integrate an emoji picker into their apps, enhancing user interaction and engagement. This package is particularly useful in chat applications, social media platforms, or any app that requires user input in the form of emojis.

### When to Use

- **Chat Applications**: Enhance user experience by allowing users to express emotions through emojis.
- **Social Media Apps**: Enable users to add emojis to their posts or comments.
- **Forms and Feedback**: Use emojis to gather user feedback in a fun and engaging way.

### Features

- **Customizable Emoji List**: Developers can customize the emoji list to include only the emojis relevant to their application.
- **Easy Integration**: Simple API for integrating the emoji keyboard into any Flutter widget.
- **Responsive Design**: The keyboard adapts to different screen sizes and orientations.
- **Search Functionality**: Users can search for emojis quickly, improving usability.
- **Theming Support**: Customize the appearance of the emoji keyboard to match the app's theme.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
## Tutorial

### Installation

To use the `emoji_keyboard_flutter` package, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  emoji_keyboard_flutter: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run `flutter pub get` to install the package.

### Platform-Specific Configuration

#### Android

1. Ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

   ```groovy
   android {
       ...
       defaultConfig {
           ...
           minSdkVersion 21
           ...
       }
   }
   ```

2. No additional permissions are required for basic functionality.

#### iOS

1. Open your `ios/Runner/Info.plist` file and add the following configuration to support emoji input:

   ```xml
   <key>UIRequiredDeviceCapabilities</key>
   <array>
       <string>armv7</string>
   </array>
   ```

### Using the Package

To use the `emoji_keyboard_flutter` package, you can create a simple widget that incorporates the emoji keyboard. Below is a basic example of how to set it up:

```dart
import 'package:flutter/material.dart';
import 'package:emoji_keyboard_flutter/emoji_keyboard_flutter.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  String _selectedEmoji = '';

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Emoji Keyboard Example')),
      body: Column(
        children: [
          // Display the selected emoji
          Text('Selected Emoji: $_selectedEmoji', style: TextStyle(fontSize: 24)),
          // Emoji keyboard
          EmojiKeyboard(
            onEmojiSelected: (emoji) {
              setState(() {
                _selectedEmoji = emoji; // Update the selected emoji
              });
            },
          ),
        ],
      ),
    );
  }
}
```

In this example, we create a simple app that displays the selected emoji and integrates the emoji keyboard.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
## Complete Example

```dart
import 'package:flutter/material.dart';
import 'package:emoji_keyboard_flutter/emoji_keyboard_flutter.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  String _selectedEmoji = ''; // Variable to hold the selected emoji

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Emoji Keyboard Example')), // App bar title
      body: Column(
        children: [
          // Display the selected emoji
          Text('Selected Emoji: $_selectedEmoji', style: TextStyle(fontSize: 24)),
          // Emoji keyboard
          EmojiKeyboard(
            onEmojiSelected: (emoji) {
              setState(() {
                _selectedEmoji = emoji; // Update the selected emoji
              });
            },
          ),
        ],
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the RealFlutter widget, which is a StatefulWidget.
// 2. The _RealFlutterState class manages the state of the selected emoji.
// 3. The build method constructs the UI, including an AppBar and a Column widget.
// 4. The Text widget displays the currently selected emoji.
// 5. The EmojiKeyboard widget is integrated, which listens for emoji selection.
// 6. When an emoji is selected, the onEmojiSelected callback updates the state with the new emoji.
// 7. The UI rebuilds to reflect the selected emoji in the Text widget.
```

### Summary

In this example, we created a simple Flutter application that integrates the `emoji_keyboard_flutter` package. The app allows users to select emojis, which are then displayed on the screen. The flow of the application is straightforward, with the state being managed in a StatefulWidget, ensuring that the UI updates dynamically as users interact with the emoji keyboard. This package is an excellent choice for enhancing user engagement in applications that require emoji input.
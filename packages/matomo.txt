<-- START_DESCRIPTION -->

Matomo Flutter Package
======================

The Matomo Flutter package is a powerful analytics tool that allows you to track user behavior and interactions within your Flutter application. It provides a comprehensive set of features to help you understand your users' behavior, including event tracking, screen tracking, and user profiling.

When to Use Matomo
------------------

Matomo is ideal for applications that require in-depth analytics and user behavior tracking. It is particularly useful for e-commerce applications, social media platforms, and other applications that require a high level of user engagement.

Features
--------

*   Event tracking: Track custom events, such as button clicks, form submissions, and other user interactions.
*   Screen tracking: Track screen views, including the time spent on each screen and the navigation flow between screens.
*   User profiling: Create custom user profiles to track user behavior and preferences.
*   Real-time analytics: View real-time analytics data, including user activity, event tracking, and screen views.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Configuration
----------------------

To use the Matomo Flutter package, you need to add it to your project's `pubspec.yaml` file:

```yml
dependencies:
  matomo: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Android Configuration

To use Matomo on Android, you need to add the following configuration to your `AndroidManifest.xml` file:

```xml
<application>
    ...
    <meta-data
        android:name="matomo.tracker.url"
        android:value="https://your-matomo-instance.com/matomo.php" />
    <meta-data
        android:name="matomo.tracker.site_id"
        android:value="1" />
</application>
```

Replace `https://your-matomo-instance.com/matomo.php` with your Matomo instance URL and `1` with your site ID.

### iOS Configuration

To use Matomo on iOS, you need to add the following configuration to your `Info.plist` file:

```xml
<key>MatomoTrackerUrl</key>
<string>https://your-matomo-instance.com/matomo.php</string>
<key>MatomoTrackerSiteId</key>
<string>1</string>
```

Replace `https://your-matomo-instance.com/matomo.php` with your Matomo instance URL and `1` with your site ID.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:matomo/matomo.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Matomo Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  // Create a Matomo tracker instance
  final _tracker = MatomoTracker(
    url: 'https://your-matomo-instance.com/matomo.php',
    siteId: 1,
  );

  @override
  void initState() {
    super.initState();
    // Initialize the tracker
    _tracker.init();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Matomo Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            // Track a custom event
            ElevatedButton(
              onPressed: () {
                _tracker.trackEvent(
                  category: 'button',
                  action: 'click',
                  name: 'my_button',
                );
              },
              child: Text('Track Event'),
            ),
            // Track a screen view
            ElevatedButton(
              onPressed: () {
                _tracker.trackScreen(
                  screenName: 'my_screen',
                );
              },
              child: Text('Track Screen'),
            ),
          ],
        ),
      ),
    );
  }
}
```

// This code creates a basic Flutter application with two buttons: "Track Event" and "Track Screen".
// When the "Track Event" button is pressed, it tracks a custom event using the Matomo tracker instance.
// When the "Track Screen" button is pressed, it tracks a screen view using the Matomo tracker instance.
// The Matomo tracker instance is initialized in the `initState` method and is used to track events and screen views throughout the application.

// The application flow is as follows:
// 1. The user opens the application and the `initState` method is called, initializing the Matomo tracker instance.
// 2. The user presses the "Track Event" button, which calls the `trackEvent` method on the Matomo tracker instance.
// 3. The `trackEvent` method sends a request to the Matomo instance to track the custom event.
// 4. The user presses the "Track Screen" button, which calls the `trackScreen` method on the Matomo tracker instance.
// 5. The `trackScreen` method sends a request to the Matomo instance to track the screen view.

<-- END_MAIN -->
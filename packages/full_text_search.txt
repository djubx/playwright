# Full Text Search in Flutter: A Comprehensive Guide to the `full_text_search` Package

## <-- START_DESCRIPTION -->

### Description

The `full_text_search` package is a powerful tool for Flutter developers looking to implement full-text search capabilities in their applications. This package allows you to efficiently search through large datasets, making it ideal for applications that require quick and accurate text retrieval, such as note-taking apps, document management systems, or any app that handles substantial text data.

### When to Use

You should consider using the `full_text_search` package when:
- Your application needs to search through large amounts of text data.
- You want to provide users with a fast and responsive search experience.
- You require advanced search features like ranking, stemming, and tokenization.

### Features

- **Full-Text Search**: Provides efficient searching capabilities across large datasets.
- **Ranking**: Results can be ranked based on relevance, improving user experience.
- **Tokenization**: Breaks down text into searchable tokens, enhancing search accuracy.
- **Stemming**: Supports stemming algorithms to match different forms of a word.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS.

## <-- END_DESCRIPTION -->

## <-- START_TUTORIAL -->

### Tutorial

To get started with the `full_text_search` package, follow these steps:

#### Step 1: Add Dependency

Add the `full_text_search` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  full_text_search: ^latest_version
```

Make sure to replace `latest_version` with the most recent version available on [pub.dev](https://pub.dev/packages/full_text_search).

#### Step 2: Platform-Specific Configuration

**For Android:**
- Ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21.

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
        ...
    }
}
```

**For iOS:**
- No specific configurations are required for iOS, but ensure you have the latest version of Xcode installed.

#### Step 3: Import the Package

In your Dart file, import the package:

```dart
import 'package:full_text_search/full_text_search.dart';
```

#### Step 4: Initialize and Use

You can now initialize the search functionality in your application. Here’s a simple example of how to set it up:

```dart
void main() {
  // Initialize the search engine
  final searchEngine = FullTextSearch();

  // Add documents to the search engine
  searchEngine.addDocument('Flutter is an open-source UI software development toolkit.');
  searchEngine.addDocument('Dart is the programming language used by Flutter.');
}
```

## <-- END_TUTORIAL -->

## <-- START_MAIN -->

### Complete Example

Here’s a complete Flutter application demonstrating the use of the `full_text_search` package:

```dart
import 'package:flutter/material.dart';
import 'package:full_text_search/full_text_search.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Full Text Search Example',
      home: SearchPage(),
    );
  }
}

class SearchPage extends StatefulWidget {
  @override
  _SearchPageState createState() => _SearchPageState();
}

class _SearchPageState extends State<SearchPage> {
  final FullTextSearch searchEngine = FullTextSearch();
  List<String> results = [];
  final TextEditingController controller = TextEditingController();

  @override
  void initState() {
    super.initState();
    // Adding documents to the search engine
    searchEngine.addDocument('Flutter is an open-source UI software development toolkit.');
    searchEngine.addDocument('Dart is the programming language used by Flutter.');
    searchEngine.addDocument('Widgets are the basic building blocks of a Flutter app.');
  }

  void _search(String query) {
    // Perform the search and update results
    setState(() {
      results = searchEngine.search(query);
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Full Text Search Example'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            TextField(
              controller: controller,
              decoration: InputDecoration(
                labelText: 'Search',
                suffixIcon: IconButton(
                  icon: Icon(Icons.search),
                  onPressed: () => _search(controller.text),
                ),
              ),
            ),
            Expanded(
              child: ListView.builder(
                itemCount: results.length,
                itemBuilder: (context, index) {
                  return ListTile(
                    title: Text(results[index]),
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the `main` function, which runs the `RealFlutter` widget.
// 2. The `RealFlutter` widget sets up the MaterialApp and directs to the `SearchPage`.
// 3. In the `SearchPage`, we initialize the `FullTextSearch` engine and add documents to it.
// 4. The user can input a search query in the TextField.
// 5. When the search button is pressed, the `_search` method is called, which updates the results based on the query.
// 6. The results are displayed in a ListView, allowing users to see the matching documents.
```

## <-- END_MAIN -->

### Summary

In this blog post, we explored the `full_text_search` package, which provides robust full-text search capabilities for Flutter applications. We covered the installation process, platform-specific configurations, and provided a complete example demonstrating how to implement a simple search feature. The application allows users to search through a set of documents, showcasing the package's capabilities effectively. This package is particularly useful for applications that require efficient text retrieval and can significantly enhance user experience.
<-- START_DESCRIPTION -->

# Simple Line Chart Flutter Package
=====================================

The `simple_line_chart` Flutter package is a lightweight and easy-to-use library for creating simple line charts in Flutter applications. It is ideal for displaying small to medium-sized datasets and can be used in a variety of scenarios, such as:

* Displaying user activity data, such as steps taken or calories burned
* Showing trends in sales or revenue data
* Visualizing sensor data, such as temperature or humidity readings

The package features:

* Easy-to-use API for creating line charts
* Customizable chart appearance, including colors, fonts, and line styles
* Support for multiple datasets and lines
* Interactive charts with touch events and gestures

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `simple_line_chart` package in your Flutter project, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  simple_line_chart: ^1.0.0
```
2. Run `flutter pub get` to install the package.
3. Import the package in your Dart file:
```dart
import 'package:simple_line_chart/simple_line_chart.dart';
```
### Platform-Specific Details

* For Android, make sure to add the following line to your `AndroidManifest.xml` file:
```xml
<uses-feature android:name="android.hardware.touchscreen" android:required="false" />
```
* For iOS, no additional configuration is required.

### Configurations and Optimizations

* To improve performance, consider setting the ` chartHeight` and `chartWidth` properties to fixed values.
* To customize the chart's appearance, use the various properties available in the `SimpleLineChart` widget, such as `lineColor`, `pointColor`, and `fontFamily`.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:simple_line_chart/simple_line_chart.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Simple Line Chart Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  List<ChartData> _chartData = [
    ChartData(1, 10),
    ChartData(2, 20),
    ChartData(3, 30),
    ChartData(4, 40),
    ChartData(5, 50),
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Simple Line Chart Demo'),
      ),
      body: Center(
        child: SimpleLineChart(
          chartData: _chartData,
          chartHeight: 300,
          chartWidth: 300,
          lineColor: Colors.blue,
          pointColor: Colors.red,
          fontFamily: 'Arial',
          fontSize: 14,
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user runs the app and is presented with a line chart displaying the data.
// 2. The user can interact with the chart by touching and dragging on the screen.
// 3. The chart updates in real-time as the user interacts with it.
// 4. The user can customize the chart's appearance by modifying the properties in the SimpleLineChart widget.
```

// Summary:
// The code flows as follows: the user runs the app and is presented with a line chart displaying the data.
// The user can interact with the chart by touching and dragging on the screen, and the chart updates in real-time.
// The user can customize the chart's appearance by modifying the properties in the SimpleLineChart widget.

<-- END_MAIN -->
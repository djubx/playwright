# go_router_plus: A Comprehensive Guide for Flutter Developers

## <-- START_DESCRIPTION -->

### Overview of go_router_plus

The `go_router_plus` package is an advanced routing solution for Flutter applications that builds upon the capabilities of the original `go_router` package. It provides a more flexible and powerful way to manage navigation and routing in your Flutter apps, making it easier to handle complex navigation scenarios, including deep linking, nested routes, and more.

### When to Use go_router_plus

You should consider using `go_router_plus` when:
- Your application has complex navigation requirements, such as nested routes or deep linking.
- You want to simplify the management of routes and navigation state.
- You need a solution that integrates well with Flutter's declarative UI paradigm.

### Key Features

- **Declarative Routing**: Define routes in a declarative manner, making it easier to visualize the navigation structure.
- **Nested Routes**: Support for nested routes allows for more complex UI hierarchies.
- **Deep Linking**: Easily handle deep links to navigate directly to specific screens within your app.
- **Error Handling**: Built-in error handling for route resolution failures.
- **Custom Transitions**: Support for custom page transitions to enhance user experience.

## <-- END_DESCRIPTION -->

## <-- START_TUTORIAL -->

### Setting Up go_router_plus

To get started with `go_router_plus`, you need to add it to your Flutter project. Follow these steps:

1. **Add Dependency**: Open your `pubspec.yaml` file and add the `go_router_plus` package.

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     go_router_plus: ^latest_version
   ```

   Replace `^latest_version` with the latest version available on [pub.dev](https://pub.dev/packages/go_router_plus).

2. **Install Packages**: Run the following command in your terminal to install the new dependency:

   ```bash
   flutter pub get
   ```

3. **Platform-Specific Configuration**:
   - **Android**: Ensure that your `AndroidManifest.xml` file has the necessary intent filters for deep linking if you plan to use it.
   - **iOS**: Update your `Info.plist` to handle URL schemes if you want to support deep linking.

### Basic Usage

Hereâ€™s how to set up a simple routing structure using `go_router_plus`:

1. **Import the Package**:

   ```dart
   import 'package:go_router_plus/go_router_plus.dart';
   ```

2. **Define Your Routes**:

   You can define your routes in a centralized location, typically in your main application file.

   ```dart
   final GoRouter _router = GoRouter(
     routes: [
       GoRoute(
         path: '/',
         builder: (context, state) => HomeScreen(),
       ),
       GoRoute(
         path: '/details/:id',
         builder: (context, state) {
           final id = state.params['id'];
           return DetailsScreen(id: id);
         },
       ),
     ],
   );
   ```

3. **Use the Router in Your App**:

   Wrap your `MaterialApp` with `GoRouter` to enable routing.

   ```dart
   void main() {
     runApp(MyApp());
   }

   class MyApp extends StatelessWidget {
     @override
     Widget build(BuildContext context) {
       return MaterialApp.router(
         routerDelegate: _router.routerDelegate,
         routeInformationParser: _router.routeInformationParser,
       );
     }
   }
   ```

## <-- END_TUTORIAL -->

## <-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:go_router_plus/go_router_plus.dart';

// Entry point of the application
void main() {
  runApp(MyApp());
}

// Main application widget
class MyApp extends StatelessWidget {
  // Define the router
  final GoRouter _router = GoRouter(
    routes: [
      // Home route
      GoRoute(
        path: '/',
        builder: (context, state) => HomeScreen(),
      ),
      // Details route with a parameter
      GoRoute(
        path: '/details/:id',
        builder: (context, state) {
          final id = state.params['id']; // Extracting the ID from the route
          return DetailsScreen(id: id); // Passing the ID to the DetailsScreen
        },
      ),
    ],
  );

  @override
  Widget build(BuildContext context) {
    // Using MaterialApp.router to integrate the router
    return MaterialApp.router(
      routerDelegate: _router.routerDelegate,
      routeInformationParser: _router.routeInformationParser,
    );
  }
}

// Home screen widget
class HomeScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Home')),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Navigating to the details screen with an ID
            context.go('/details/1');
          },
          child: Text('Go to Details'),
        ),
      ),
    );
  }
}

// Details screen widget
class DetailsScreen extends StatelessWidget {
  final String? id; // ID passed from the route

  DetailsScreen({this.id});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Details')),
      body: Center(
        child: Text('Details for item: $id'), // Displaying the ID
      ),
    );
  }
}

/*
Application Flow Explanation:
1. The application starts with the `main()` function, which runs `MyApp`.
2. `MyApp` initializes the `GoRouter` with two routes: the home route and the details route.
3. The `HomeScreen` is displayed initially, featuring a button.
4. When the button is pressed, it triggers navigation to the `DetailsScreen` with an ID parameter.
5. The `DetailsScreen` retrieves the ID from the route parameters and displays it on the screen.
*/

```

## <-- END_MAIN -->

### Final Summary

In this blog post, we explored the `go_router_plus` package, which provides a robust solution for managing navigation in Flutter applications. We covered the setup process, including platform-specific configurations, and demonstrated how to define routes and navigate between screens. The complete example illustrated a simple application flow, showcasing how to pass parameters between routes effectively. By leveraging `go_router_plus`, developers can create more maintainable and scalable navigation structures in their Flutter apps.
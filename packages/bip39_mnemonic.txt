<-- START_DESCRIPTION -->

Bip39 Mnemonic Flutter Package
==============================

The `bip39_mnemonic` Flutter package provides a simple and secure way to generate and manage BIP39 mnemonics, which are used to backup and restore cryptocurrency wallets. This package is essential for any cryptocurrency-related application, as it allows users to securely store and recover their wallet keys.

Features
--------

*   Generates BIP39 mnemonics with a specified length (12, 15, 18, 21, or 24 words)
*   Supports multiple languages for mnemonic generation
*   Provides a secure way to store and recover wallet keys

When to Use
------------

Use the `bip39_mnemonic` package in any Flutter application that requires cryptocurrency wallet management, such as:

*   Cryptocurrency exchanges
*   Wallet applications
*   Cryptocurrency trading platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
----------------

### Step 1: Add the Package to Your Project

Add the `bip39_mnemonic` package to your `pubspec.yaml` file:

```yml
dependencies:
  bip39_mnemonic: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the `bip39_mnemonic` package in your Dart file:

```dart
import 'package:bip39_mnemonic/bip39_mnemonic.dart';
```

### Step 3: Generate a Mnemonic

Generate a BIP39 mnemonic with a specified length:

```dart
String mnemonic = await Mnemonic.generateMnemonic(strength: 128);
```

### Step 4: Validate a Mnemonic

Validate a BIP39 mnemonic:

```dart
bool isValid = await Mnemonic.validateMnemonic(mnemonic);
```

Platform-Specific Details
-------------------------

The `bip39_mnemonic` package uses platform-specific code to generate and validate mnemonics. On Android, it uses the `android.security.keystore` package, while on iOS, it uses the `Security` framework.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:bip39_mnemonic/bip39_mnemonic.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  String _mnemonic = '';
  bool _isValid = false;

  // Generate a mnemonic with a specified length (12 words)
  Future<void> _generateMnemonic() async {
    String mnemonic = await Mnemonic.generateMnemonic(strength: 128);
    setState(() {
      _mnemonic = mnemonic;
    });
  }

  // Validate the generated mnemonic
  Future<void> _validateMnemonic() async {
    bool isValid = await Mnemonic.validateMnemonic(_mnemonic);
    setState(() {
      _isValid = isValid;
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('BIP39 Mnemonic Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Text(_mnemonic),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _generateMnemonic,
                child: Text('Generate Mnemonic'),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: _validateMnemonic,
                child: Text('Validate Mnemonic'),
              ),
              SizedBox(height: 20),
              Text(_isValid ? 'Mnemonic is valid' : 'Mnemonic is not valid'),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user clicks the "Generate Mnemonic" button, which calls the _generateMnemonic function.
// 2. The _generateMnemonic function generates a BIP39 mnemonic with a specified length (12 words) using the Mnemonic.generateMnemonic function.
// 3. The generated mnemonic is stored in the _mnemonic variable and displayed on the screen.
// 4. The user clicks the "Validate Mnemonic" button, which calls the _validateMnemonic function.
// 5. The _validateMnemonic function validates the generated mnemonic using the Mnemonic.validateMnemonic function.
// 6. The validation result is stored in the _isValid variable and displayed on the screen.

// In summary, this example demonstrates how to generate and validate a BIP39 mnemonic using the bip39_mnemonic package in a Flutter application.
```

<-- END_MAIN -->
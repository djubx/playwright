<-- START_DESCRIPTION -->

# matertino_radio Flutter Package
The `matertino_radio` package is a Flutter library that allows developers to easily integrate radio streaming into their applications. It provides a simple and efficient way to play online radio stations, making it a great option for music streaming apps, podcasts, and more.

## Features
* Play online radio stations
* Support for multiple audio formats (e.g., MP3, AAC, etc.)
* Easy integration with Flutter apps
* Platform-specific optimizations for Android and iOS

## When to Use
The `matertino_radio` package is perfect for apps that require online radio streaming, such as:

* Music streaming apps
* Podcast apps
* Online radio station apps
* Entertainment apps

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up matertino_radio
To use the `matertino_radio` package, follow these steps:

### Step 1: Add the Package to Your Pubspec.yaml File
Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  matertino_radio: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package
Import the package in your Dart file:
```dart
import 'package:matertino_radio/materno_radio.dart';
```
### Step 3: Initialize the Radio Player
Create a new instance of the `RadioPlayer` class:
```dart
RadioPlayer _radioPlayer = RadioPlayer();
```
### Step 4: Set the Radio Station URL
Set the URL of the radio station you want to play:
```dart
_radioPlayer.setUrl('https://example.com/radio.mp3');
```
### Step 5: Play the Radio Station
Play the radio station:
```dart
_radioPlayer.play();
```
### Platform-Specific Details
For Android, add the following permission to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.INTERNET" />
```
For iOS, add the following line to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:matertino_radio/materno_radio.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  RadioPlayer _radioPlayer = RadioPlayer();

  @override
  void initState() {
    super.initState();
    _radioPlayer.setUrl('https://example.com/radio.mp3');
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'matertino_radio Demo',
      home: Scaffold(
        appBar: AppBar(
          title: Text('matertino_radio Demo'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              ElevatedButton(
                onPressed: () {
                  _radioPlayer.play();
                },
                child: Text('Play Radio'),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  _radioPlayer.pause();
                },
                child: Text('Pause Radio'),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  _radioPlayer.stop();
                },
                child: Text('Stop Radio'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and the `RealFlutter` widget is created.
// 2. The `RadioPlayer` instance is created and the URL of the radio station is set.
// 3. The user clicks the "Play Radio" button, which calls the `play()` method of the `RadioPlayer` instance.
// 4. The radio station starts playing.
// 5. The user can pause the radio station by clicking the "Pause Radio" button, which calls the `pause()` method of the `RadioPlayer` instance.
// 6. The user can stop the radio station by clicking the "Stop Radio" button, which calls the `stop()` method of the `RadioPlayer` instance.

// In summary, this code creates a simple radio player app that allows the user to play, pause, and stop a radio station.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# WalletConnect Flutter V2 Package
=====================================

The `walletconnect_flutter_v2` package is a Flutter implementation of the WalletConnect protocol, allowing users to connect their wallets to decentralized applications (dApps) on mobile devices. This package provides a seamless and secure way to interact with blockchain networks, enabling features such as transaction signing, balance retrieval, and smart contract execution.

### When to Use This Package

Use this package when building a Flutter application that requires integration with blockchain wallets, such as:

* Decentralized finance (DeFi) applications
* Non-fungible token (NFT) marketplaces
* Gaming platforms with blockchain-based assets
* Cryptocurrency exchanges

### Features

* Connect to multiple wallets using the WalletConnect protocol
* Sign transactions and messages using the connected wallet
* Retrieve account balances and transaction history
* Execute smart contracts on supported blockchain networks
* Support for multiple blockchain networks, including Ethereum, Binance Smart Chain, and more

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up WalletConnect Flutter V2
=====================================

To use the `walletconnect_flutter_v2` package in your Flutter application, follow these steps:

### Step 1: Add the Package to Your `pubspec.yaml` File

```yml
dependencies:
  walletconnect_flutter_v2: ^2.0.0
```

### Step 2: Import the Package in Your Dart File

```dart
import 'package:walletconnect_flutter_v2/walletconnect_flutter_v2.dart';
```

### Step 3: Initialize the WalletConnect Instance

```dart
WalletConnect walletConnect = WalletConnect(
  bridge: 'https://bridge.walletconnect.org',
  clientMeta: ClientMeta(
    name: 'My App',
    description: 'My App Description',
    url: 'https://myapp.com',
    icons: ['https://myapp.com/icon.png'],
  ),
);
```

### Step 4: Connect to a Wallet

```dart
await walletConnect.connect();
```

### Platform-Specific Details

* **Android:** Add the following code to your `AndroidManifest.xml` file:
```xml
<application
  ...
  android:usesCleartextTraffic="true"
  ...
>
```
* **iOS:** Add the following code to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```

### Required Configurations and Optimizations

* **WalletConnect Bridge URL:** Update the `bridge` parameter in the `WalletConnect` constructor to point to your own WalletConnect bridge instance, if desired.
* **Client Meta:** Update the `clientMeta` parameter in the `WalletConnect` constructor to reflect your application's name, description, URL, and icons.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:walletconnect_flutter_v2/walletconnect_flutter_v2.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'WalletConnect Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  WalletConnect _walletConnect;

  @override
  void initState() {
    super.initState();
    _walletConnect = WalletConnect(
      bridge: 'https://bridge.walletconnect.org',
      clientMeta: ClientMeta(
        name: 'My App',
        description: 'My App Description',
        url: 'https://myapp.com',
        icons: ['https://myapp.com/icon.png'],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('WalletConnect Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: _connectWallet,
              child: Text('Connect Wallet'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _signTransaction,
              child: Text('Sign Transaction'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _getAccountBalance,
              child: Text('Get Account Balance'),
            ),
          ],
        ),
      ),
    );
  }

  Future<void> _connectWallet() async {
    await _walletConnect.connect();
  }

  Future<void> _signTransaction() async {
    // Create a transaction to sign
    final transaction = Transaction(
      from: '0x742d35Cc6634C0532925a3b844Bc454e4438f44e',
      to: '0x55241586d50469745864804697458648046974',
      value: '1.0 ether',
    );

    // Sign the transaction using the connected wallet
    final signedTransaction = await _walletConnect.signTransaction(transaction);

    // Print the signed transaction
    print(signedTransaction.rawTransaction);
  }

  Future<void> _getAccountBalance() async {
    // Get the account balance using the connected wallet
    final balance = await _walletConnect.getAccountBalance();

    // Print the account balance
    print(balance);
  }
}

// The application flow is as follows:
// 1. The user clicks the "Connect Wallet" button, which calls the `_connectWallet` function.
// 2. The `_connectWallet` function connects to the user's wallet using the WalletConnect protocol.
// 3. Once connected, the user can click the "Sign Transaction" button, which calls the `_signTransaction` function.
// 4. The `_signTransaction` function creates a transaction to sign and signs it using the connected wallet.
// 5. The signed transaction is then printed to the console.
// 6. The user can also click the "Get Account Balance" button, which calls the `_getAccountBalance` function.
// 7. The `_getAccountBalance` function gets the account balance using the connected wallet and prints it to the console.

// In summary, this application demonstrates how to connect to a user's wallet using WalletConnect,
// sign transactions, and get account balances.
```

<-- END_MAIN -->
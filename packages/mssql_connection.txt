<-- START_DESCRIPTION -->

# MSSQL Connection Flutter Package
=====================================

The `mssql_connection` package is a Flutter library that allows you to connect to Microsoft SQL Server databases. It provides a simple and efficient way to perform CRUD (Create, Read, Update, Delete) operations on your SQL Server database.

### When to Use This Package

This package is ideal for Flutter applications that require direct access to a Microsoft SQL Server database. It's perfect for enterprise applications, data-driven apps, or any app that needs to interact with a SQL Server database.

### Features

*   Connect to Microsoft SQL Server databases
*   Perform CRUD operations (Create, Read, Update, Delete)
*   Support for transactions
*   Support for stored procedures

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `mssql_connection` package, follow these steps:

### Step 1: Add the Package to Your Pubspec.yaml File

Add the following line to your `pubspec.yaml` file:

```yml
dependencies:
  mssql_connection: ^1.0.0
```

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:mssql_connection/mssql_connection.dart';
```

### Step 3: Set Up the Database Connection

Create a new instance of the `MssqlConnection` class:

```dart
MssqlConnection connection = MssqlConnection(
  server: 'your_server_name',
  database: 'your_database_name',
  username: 'your_username',
  password: 'your_password',
);
```

### Platform-Specific Details

*   For Android, make sure to add the following line to your `AndroidManifest.xml` file:

    ```xml
<uses-permission android:name="android.permission.INTERNET" />
```

*   For iOS, make sure to add the following line to your `Info.plist` file:

    ```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

### Required Configurations or Optimizations

*   Make sure to close the database connection when you're done using it:

    ```dart
connection.close();
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:mssql_connection/mssql_connection.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'MSSQL Connection Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  MssqlConnection connection;

  @override
  void initState() {
    super.initState();
    connection = MssqlConnection(
      server: 'your_server_name',
      database: 'your_database_name',
      username: 'your_username',
      password: 'your_password',
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('MSSQL Connection Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: () async {
                // Connect to the database
                await connection.connect();

                // Perform a query
                var results = await connection.query('SELECT * FROM your_table_name');

                // Print the results
                print(results);

                // Close the connection
                await connection.close();
              },
              child: Text('Connect and Query'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and is presented with a button to connect and query the database.
// 2. When the button is pressed, the app connects to the database using the MssqlConnection class.
// 3. Once connected, the app performs a query on the database using the query method of the MssqlConnection class.
// 4. The results of the query are printed to the console.
// 5. Finally, the app closes the connection to the database using the close method of the MssqlConnection class.
```

<-- END_MAIN -->
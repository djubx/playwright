```markdown
<!-- START_DESCRIPTION -->
# Overview of the info_toast Flutter Package

The `info_toast` package is a lightweight Flutter library designed to display toast messages in a simple and customizable manner. Toast messages are brief notifications that appear on the screen to provide feedback to the user without interrupting their current activity. This package is particularly useful for showing transient messages such as success notifications, error alerts, or general information.

## When to Use `info_toast`
- **User Feedback**: When you want to inform users about the success or failure of an action (e.g., form submission).
- **Notifications**: To display brief messages that do not require user interaction.
- **Status Updates**: For showing updates on ongoing processes, like loading data or saving settings.

## Key Features
- **Customizable Duration**: Control how long the toast message is displayed.
- **Positioning**: Choose where on the screen the toast appears (top, center, bottom).
- **Custom Styling**: Modify the appearance of the toast, including colors, text styles, and more.
- **Easy Integration**: Simple API that allows for quick implementation in any Flutter project.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Setting Up and Using the info_toast Package

## Installation
To use the `info_toast` package, you need to add it to your Flutter project. Open your `pubspec.yaml` file and add the following dependency:

```yaml
dependencies:
  flutter:
    sdk: flutter
  info_toast: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command in your terminal to install it:

```bash
flutter pub get
```

## Platform-Specific Configuration
### Android
For Android, ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```gradle
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

### iOS
For iOS, no additional configuration is typically required. Just ensure that your project is set up to support the latest iOS versions.

## Using the Package
To display a toast message, you can use the `InfoToast.show()` method. Hereâ€™s a simple example of how to use it:

```dart
import 'package:flutter/material.dart';
import 'package:info_toast/info_toast.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Info Toast Example')),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              InfoToast.show('This is a toast message!', duration: 2);
            },
            child: Text('Show Toast'),
          ),
        ),
      ),
    );
  }
}
```

In this example, when the button is pressed, a toast message will appear at the bottom of the screen for 2 seconds.

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of Using info_toast

```dart
import 'package:flutter/material.dart';
import 'package:info_toast/info_toast.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Info Toast Example')),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              ElevatedButton(
                onPressed: () {
                  // Show a toast message when the button is pressed
                  InfoToast.show('This is a success message!', duration: 2);
                },
                child: Text('Show Success Toast'),
              ),
              ElevatedButton(
                onPressed: () {
                  // Show an error toast message
                  InfoToast.show('This is an error message!', duration: 2);
                },
                child: Text('Show Error Toast'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application starts with the main function, which runs the RealFlutter widget.
// The RealFlutter widget builds a MaterialApp with a Scaffold containing an AppBar and a Center widget.
// Inside the Center widget, there are two ElevatedButtons.
// When the first button is pressed, a success toast message is displayed for 2 seconds.
// When the second button is pressed, an error toast message is displayed for 2 seconds.
// The InfoToast.show() method is used to create and display the toast messages.
```
<!-- END_MAIN -->
```

### Summary of Application Flow
The application begins by running the `RealFlutter` widget, which sets up a basic Flutter app structure. It contains an AppBar and a centered layout with two buttons. Each button, when pressed, triggers the `InfoToast.show()` method to display a toast message for a specified duration. The first button shows a success message, while the second button displays an error message. This simple setup allows for quick feedback to the user without interrupting their workflow.
```markdown
<-- START_DESCRIPTION -->

# Google ML Kit Document Scanner Flutter Package

The `google_mlkit_document_scanner` Flutter package is a powerful tool for developers looking to integrate document scanning capabilities into their mobile applications. This package leverages Google's Machine Learning Kit to provide robust and efficient document scanning features, making it ideal for applications that require document digitization, such as expense tracking, note-taking, or any app that needs to process physical documents into digital format.

## Features

- **Real-time Document Detection**: Automatically detects and scans documents in real-time using the device's camera.
- **Edge Detection**: Identifies the edges of a document to provide a clean and precise scan.
- **Multi-Platform Support**: Works seamlessly on both Android and iOS platforms.
- **Easy Integration**: Simple API that allows for quick integration into existing Flutter applications.

## When to Use

- **Expense Management Apps**: To scan and digitize receipts.
- **Educational Apps**: For scanning notes or assignments.
- **Business Applications**: To digitize contracts or other important documents.
- **Personal Use**: For organizing personal documents like IDs or letters.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the Google ML Kit Document Scanner

In this tutorial, we will walk through the process of setting up and using the `google_mlkit_document_scanner` package in a Flutter application. We will cover platform-specific configurations for both Android and iOS.

## Setup

### Step 1: Add Dependency

Add the `google_mlkit_document_scanner` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  google_mlkit_document_scanner: ^0.1.0
```

### Step 2: Platform-Specific Configuration

#### Android

1. **Permissions**: Ensure that your `AndroidManifest.xml` includes the necessary camera permissions:

   ```xml
   <uses-permission android:name="android.permission.CAMERA"/>
   ```

2. **CameraX Dependency**: Add the CameraX dependencies in your `android/app/build.gradle`:

   ```gradle
   dependencies {
       implementation "androidx.camera:camera-core:1.0.0"
       implementation "androidx.camera:camera-camera2:1.0.0"
       implementation "androidx.camera:camera-lifecycle:1.0.0"
       implementation "androidx.camera:camera-view:1.0.0"
   }
   ```

#### iOS

1. **Permissions**: Update your `Info.plist` to include camera usage descriptions:

   ```xml
   <key>NSCameraUsageDescription</key>
   <string>This app requires camera access to scan documents.</string>
   ```

2. **Podfile**: Ensure your `ios/Podfile` has platform version set to at least 11.0:

   ```ruby
   platform :ios, '11.0'
   ```

### Step 3: Initialize the Package

Initialize the `RealFlutter` class in your Flutter application to start using the document scanner.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:google_mlkit_document_scanner/google_mlkit_document_scanner.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Document Scanner Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: const DocumentScannerScreen(),
    );
  }
}

class DocumentScannerScreen extends StatefulWidget {
  const DocumentScannerScreen({super.key});

  @override
  _DocumentScannerScreenState createState() => _DocumentScannerScreenState();
}

class _DocumentScannerScreenState extends State<DocumentScannerScreen> {
  final RealFlutter _documentScanner = RealFlutter();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Document Scanner'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: _scanDocument,
          child: const Text('Scan Document'),
        ),
      ),
    );
  }

  Future<void> _scanDocument() async {
    // Start the document scanning process
    final result = await _documentScanner.scanDocument();

    // Check if a document was successfully scanned
    if (result != null) {
      // Display the scanned document
      Navigator.of(context).push(
        MaterialPageRoute(
          builder: (context) => DocumentDisplayScreen(document: result),
        ),
      );
    } else {
      // Handle the case where no document was scanned
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('No document scanned.')),
      );
    }
  }
}

class DocumentDisplayScreen extends StatelessWidget {
  final Document document;

  const DocumentDisplayScreen({super.key, required this.document});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Scanned Document'),
      ),
      body: Center(
        child: Image.memory(document.imageData),
      ),
    );
  }
}

// Application Flow:
// 1. The app starts with the `MyApp` widget, which sets up the main theme and home screen.
// 2. The `DocumentScannerScreen` is displayed, containing a button to initiate document scanning.
// 3. When the button is pressed, `_scanDocument` is called, which uses the `RealFlutter` class to scan a document.
// 4. If a document is successfully scanned, the app navigates to `DocumentDisplayScreen` to display the scanned image.
// 5. If no document is scanned, a SnackBar message is shown to inform the user.
```

<-- END_MAIN -->
```
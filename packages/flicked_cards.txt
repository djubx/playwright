<-- START_DESCRIPTION -->

# Flicked Cards Flutter Package
The `flicked_cards` Flutter package is a powerful tool for creating interactive card-based UI components. It provides a simple and intuitive way to create cards that can be flicked, swiped, and animated, making it perfect for applications such as dating apps, games, and interactive stories.

## Features
* Support for both Android and iOS platforms
* Customizable card sizes, margins, and padding
* Animated card transitions and gestures
* Support for multiple card stacks and decks
* Easy-to-use API for creating and managing cards

## When to Use
The `flicked_cards` package is ideal for applications that require interactive card-based UI components, such as:

* Dating apps, where users can swipe through profiles
* Games, where players can draw cards from a deck
* Interactive stories, where users can navigate through a series of cards

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Flicked Cards Package
To use the `flicked_cards` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  flutter:
    sdk: flutter
  flicked_cards: ^1.0.0
```
2. Run `flutter pub get` to install the package.
3. Import the package in your Dart file:
```dart
import 'package:flicked_cards/flicked_cards.dart';
```
4. Create a new instance of the `FlickedCards` widget:
```dart
FlickedCards(
  cards: [
    // Add your cards here
  ],
)
```
5. Customize the appearance and behavior of the cards using the various properties and methods provided by the `FlickedCards` widget.

## Platform-Specific Details
* Android: The `flicked_cards` package uses the `GestureDetector` widget to detect gestures, which may not work properly on older Android devices.
* iOS: The `flicked_cards` package uses the `UISwipeGestureRecognizer` to detect gestures, which may not work properly on older iOS devices.

## Required Configurations and Optimizations
* To improve performance, it is recommended to use a small number of cards and to avoid using complex widgets as card content.
* To customize the appearance of the cards, use the `cardBuilder` property to provide a custom widget for each card.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flicked_cards/flicked_cards.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flicked Cards Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  List<Widget> _cards = [
    // Card 1
    Container(
      width: 200,
      height: 200,
      color: Colors.red,
      child: Center(
        child: Text('Card 1'),
      ),
    ),
    // Card 2
    Container(
      width: 200,
      height: 200,
      color: Colors.blue,
      child: Center(
        child: Text('Card 2'),
      ),
    ),
    // Card 3
    Container(
      width: 200,
      height: 200,
      color: Colors.green,
      child: Center(
        child: Text('Card 3'),
      ),
    ),
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flicked Cards Demo'),
      ),
      body: Center(
        child: FlickedCards(
          cards: _cards,
          onCardFlicked: (index) {
            print('Card $index flicked');
          },
        ),
      ),
    );
  }
}
```

// The application flow is as follows:
// 1. The user runs the app and is presented with a list of cards.
// 2. The user can flick through the cards by swiping left or right.
// 3. When a card is flicked, the `onCardFlicked` callback is called with the index of the card that was flicked.
// 4. The app prints a message to the console indicating which card was flicked.

// In summary, the code creates a list of cards and uses the `FlickedCards` widget to display them. The user can flick through the cards, and the app responds by printing a message to the console.

<-- END_MAIN -->
```markdown
<!-- START_DESCRIPTION -->
# Screen Brightness Util Flutter Package

The `screen_brightness_util` package is a Flutter plugin that allows developers to control and retrieve the screen brightness of a device. This package is particularly useful in applications where screen brightness needs to be adjusted dynamically based on user preferences or environmental conditions, such as in reading apps, gaming apps, or any application that requires optimal visibility.

## Features
- **Get Current Brightness**: Retrieve the current screen brightness level.
- **Set Brightness**: Adjust the screen brightness to a specified level.
- **Reset Brightness**: Restore the brightness to the system default.

## When to Use
- **Reading Applications**: Adjust brightness for comfortable reading in different lighting conditions.
- **Gaming Applications**: Enhance the gaming experience by adjusting brightness based on the game environment.
- **Accessibility Features**: Provide users with the ability to customize their screen brightness for better visibility.

This package is a simple yet powerful tool for managing screen brightness in Flutter applications, making it a valuable addition to any developer's toolkit.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Screen Brightness Util Package

## Step 1: Adding the Dependency
To use the `screen_brightness_util` package, you first need to add it to your `pubspec.yaml` file. Open your `pubspec.yaml` and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  screen_brightness_util: ^1.0.0  # Check for the latest version on pub.dev
```

## Step 2: Platform-Specific Configuration

### Android
For Android, ensure that you have the necessary permissions in your `AndroidManifest.xml` file. Add the following permission:

```xml
<uses-permission android:name="android.permission.WRITE_SETTINGS"/>
```

### iOS
For iOS, you need to add a key to your `Info.plist` file to request permission to change the brightness:

```xml
<key>NSBrightnessUsageDescription</key>
<string>This app requires access to change screen brightness.</string>
```

## Step 3: Importing the Package
In your Dart file, import the package:

```dart
import 'package:screen_brightness_util/screen_brightness_util.dart';
```

## Step 4: Using the Package
You can now use the package to get and set the screen brightness. Hereâ€™s a simple example of how to use it:

```dart
// Get current brightness
double currentBrightness = await ScreenBrightnessUtil.getBrightness();

// Set brightness to 0.5 (50%)
await ScreenBrightnessUtil.setBrightness(0.5);
```

## Step 5: Handling Permissions
Make sure to handle permissions appropriately, especially on Android, where users can deny permission to change settings. You can check if the permission is granted and prompt the user if necessary.

With these steps, you are now ready to use the `screen_brightness_util` package in your Flutter application!
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using Screen Brightness Util

```dart
import 'package:flutter/material.dart';
import 'package:screen_brightness_util/screen_brightness_util.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  double _currentBrightness = 0.0; // Variable to hold current brightness

  @override
  void initState() {
    super.initState();
    _getCurrentBrightness(); // Fetch current brightness on startup
  }

  // Function to get current brightness
  Future<void> _getCurrentBrightness() async {
    double brightness = await ScreenBrightnessUtil.getBrightness();
    setState(() {
      _currentBrightness = brightness; // Update state with current brightness
    });
  }

  // Function to set brightness
  Future<void> _setBrightness(double brightness) async {
    await ScreenBrightnessUtil.setBrightness(brightness); // Set the new brightness
    _getCurrentBrightness(); // Refresh current brightness
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Screen Brightness Util Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Text('Current Brightness: ${(_currentBrightness * 100).toStringAsFixed(0)}%'),
              Slider(
                value: _currentBrightness,
                min: 0.0,
                max: 1.0,
                onChanged: (value) {
                  _setBrightness(value); // Update brightness when slider changes
                },
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the RealFlutter widget.
// 2. In the RealFlutter widget, we initialize the current brightness state variable.
// 3. During the initState, we call _getCurrentBrightness to fetch the current brightness level.
// 4. The build method creates a simple UI with a Text widget displaying the current brightness and a Slider to adjust it.
// 5. When the slider is moved, the _setBrightness function is called, which updates the screen brightness and refreshes the current brightness value.
```
<!-- END_MAIN -->
```

This structured blog provides a comprehensive overview of the `screen_brightness_util` package, guiding users through its features, setup, and practical implementation in a Flutter application.
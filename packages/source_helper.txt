<-- START_DESCRIPTION -->

# Source Helper Flutter Package
================================

The `source_helper` Flutter package is a utility library designed to simplify the process of handling and manipulating source code in Flutter applications. It provides a set of tools and APIs that enable developers to efficiently work with source code, making it an ideal choice for applications that require code editing, formatting, or analysis.

## Key Features

*   **Code Formatting**: The package provides a set of APIs for formatting source code, including indentation, spacing, and line wrapping.
*   **Code Analysis**: It offers tools for analyzing source code, such as syntax highlighting, error detection, and code completion.
*   **Code Editing**: The package includes APIs for editing source code, including text manipulation, selection, and cursor management.

## When to Use

The `source_helper` package is suitable for applications that require source code manipulation, such as:

*   Code editors
*   IDEs (Integrated Development Environments)
*   Code analyzers
*   Code formatters

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Source Helper Package
=====================================

To use the `source_helper` package in your Flutter application, follow these steps:

### Step 1: Add the Package to Your Project

Add the `source_helper` package to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  source_helper: ^1.0.0
```

### Step 2: Import the Package

Import the `source_helper` package in your Dart file:

```dart
import 'package:source_helper/source_helper.dart';
```

### Step 3: Use the Package

Use the `source_helper` package to manipulate source code:

```dart
void main() {
  // Create a source code object
  final sourceCode = SourceCode('void main() {}');

  // Format the source code
  final formattedCode = sourceCode.format();

  // Print the formatted code
  print(formattedCode);
}
```

### Platform-Specific Details

The `source_helper` package works on both Android and iOS platforms. However, you may need to configure the package differently for each platform:

*   **Android**: No additional configuration is required.
*   **iOS**: You need to add the following line to your `Info.plist` file:

```xml
<key>NSAllowsArbitraryLoads</key>
<true/>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
// Import the source_helper package
import 'package:source_helper/source_helper.dart';

// Import the Flutter framework
import 'package:flutter/material.dart';

// Create a new Flutter application
void main() {
  // Create a new RealFlutter class instance
  final realFlutter = RealFlutter();

  // Run the RealFlutter application
  runApp(realFlutter);
}

// Define the RealFlutter class
class RealFlutter extends StatefulWidget {
  // Create a new RealFlutter state
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

// Define the RealFlutter state class
class _RealFlutterState extends State<RealFlutter> {
  // Create a new source code object
  final sourceCode = SourceCode('void main() {}');

  // Create a new text controller
  final textController = TextEditingController();

  // Initialize the RealFlutter state
  @override
  void initState() {
    // Set the initial text
    textController.text = sourceCode.format();

    // Call the superclass initState method
    super.initState();
  }

  // Build the RealFlutter widget
  @override
  Widget build(BuildContext context) {
    // Create a new Scaffold widget
    return Scaffold(
      // Create a new AppBar widget
      appBar: AppBar(
        // Set the title
        title: Text('RealFlutter'),
      ),
      // Create a new body widget
      body: Padding(
        // Set the padding
        padding: const EdgeInsets.all(16.0),
        // Create a new TextField widget
        child: TextField(
          // Set the text controller
          controller: textController,
          // Set the max lines
          maxLines: null,
          // Set the expands property
          expands: true,
        ),
      ),
      // Create a new floating action button
      floatingActionButton: FloatingActionButton(
        // Set the onPressed callback
        onPressed: () {
          // Format the source code
          final formattedCode = sourceCode.format();

          // Set the formatted text
          textController.text = formattedCode;
        },
        // Set the tooltip
        tooltip: 'Format',
        // Set the child
        child: Icon(Icons.format_align_left),
      ),
    );
  }
}

// The application flow:
// 1. The user runs the RealFlutter application.
// 2. The RealFlutter application creates a new source code object.
// 3. The RealFlutter application creates a new text controller.
// 4. The RealFlutter application sets the initial text to the formatted source code.
// 5. The user interacts with the TextField widget to edit the source code.
// 6. The user presses the floating action button to format the source code.
// 7. The RealFlutter application formats the source code and updates the text controller.

```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Flutter IoT WiFi Package
==========================

The `flutter_iot_wifi` package is a Flutter library that allows developers to connect to and manage WiFi networks on Android and iOS devices. This package is particularly useful for IoT applications that require WiFi connectivity.

## Features

*   Connect to WiFi networks
*   Disconnect from WiFi networks
*   Get the current WiFi network's SSID and BSSID
*   Get the list of available WiFi networks
*   Check if WiFi is enabled

## When to Use

This package is useful when developing IoT applications that require WiFi connectivity, such as:

*   Smart home automation
*   Industrial automation
*   Wearable devices
*   Robotics

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

## Setup

To use the `flutter_iot_wifi` package, add it to your `pubspec.yaml` file:

```yml
dependencies:
  flutter_iot_wifi: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Android Configuration

To use this package on Android, you need to add the following permissions to your `AndroidManifest.xml` file:

```xml
<uses-permission android:name="android.permission.ACCESS_WIFI_STATE" />
<uses-permission android:name="android.permission.CHANGE_WIFI_STATE" />
```

## iOS Configuration

To use this package on iOS, you need to add the following lines to your `Info.plist` file:

```xml
<key>NSLocationWhenInUseUsageDescription</key>
<string>This app needs access to location to scan for WiFi networks.</string>
<key>NSLocationAlwaysAndWhenInUseUsageDescription</key>
<string>This app needs access to location to scan for WiFi networks.</string>
```

## Usage

To use the package, import it in your Dart file:

```dart
import 'package:flutter_iot_wifi/flutter_iot_wifi.dart';
```

Then, you can use the `FlutterIotWifi` class to connect to and manage WiFi networks:

```dart
Future<void> main() async {
  final wifi = FlutterIotWifi();

  // Connect to a WiFi network
  await wifi.connect('SSID', 'password');

  // Get the current WiFi network's SSID and BSSID
  final currentNetwork = await wifi.getCurrentNetwork();
  print('Current Network: ${currentNetwork.ssid} (${currentNetwork.bssid})');

  // Get the list of available WiFi networks
  final networks = await wifi.getNetworks();
  print('Available Networks:');
  for (final network in networks) {
    print('${network.ssid} (${network.bssid})');
  }

  // Disconnect from the current WiFi network
  await wifi.disconnect();
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_iot_wifi/flutter_iot_wifi.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter IoT WiFi Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _wifi = FlutterIotWifi();
  String _currentNetwork = '';
  List<Network> _networks = [];

  Future<void> _connectToNetwork(String ssid, String password) async {
    // Connect to the WiFi network
    await _wifi.connect(ssid, password);
  }

  Future<void> _disconnectFromNetwork() async {
    // Disconnect from the current WiFi network
    await _wifi.disconnect();
  }

  Future<void> _getCurrentNetwork() async {
    // Get the current WiFi network's SSID and BSSID
    final currentNetwork = await _wifi.getCurrentNetwork();
    setState(() {
      _currentNetwork = '${currentNetwork.ssid} (${currentNetwork.bssid})';
    });
  }

  Future<void> _getNetworks() async {
    // Get the list of available WiFi networks
    final networks = await _wifi.getNetworks();
    setState(() {
      _networks = networks;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter IoT WiFi Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              _currentNetwork,
              style: TextStyle(fontSize: 24),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _getCurrentNetwork,
              child: Text('Get Current Network'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _getNetworks,
              child: Text('Get Available Networks'),
            ),
            SizedBox(height: 20),
            Expanded(
              child: ListView.builder(
                itemCount: _networks.length,
                itemBuilder: (context, index) {
                  return ListTile(
                    title: Text(_networks[index].ssid),
                    subtitle: Text(_networks[index].bssid),
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and is presented with a button to get the current WiFi network.
// 2. When the user clicks the button, the app uses the `FlutterIotWifi` class to get the current WiFi network's SSID and BSSID.
// 3. The app then displays the current network's information on the screen.
// 4. The user can also click a button to get the list of available WiFi networks.
// 5. When the user clicks this button, the app uses the `FlutterIotWifi` class to get the list of available WiFi networks.
// 6. The app then displays the list of available networks on the screen.
// 7. The user can select a network from the list and enter the password to connect to the network.
// 8. When the user clicks the connect button, the app uses the `FlutterIotWifi` class to connect to the selected WiFi network.
// 9. The app then displays a message indicating that the connection was successful.
```

<-- END_MAIN -->
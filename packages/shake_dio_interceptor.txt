```markdown
<!-- START_DESCRIPTION -->
# Shake Dio Interceptor: A Comprehensive Overview

The `shake_dio_interceptor` package is a powerful tool for Flutter developers who want to enhance their network request handling with a shake-to-retry feature. This package integrates seamlessly with the Dio HTTP client, allowing developers to easily implement a user-friendly way to retry failed network requests by simply shaking the device.

## When to Use This Package
- **Network Reliability**: When building applications that rely heavily on network requests, such as social media apps or news aggregators, where users may experience intermittent connectivity issues.
- **User Experience**: To improve user experience by providing a simple and intuitive way to retry failed requests without requiring additional user input.
- **Error Handling**: When you want to implement a robust error handling mechanism that allows users to recover from network failures effortlessly.

## Key Features
- **Shake-to-Retry**: Automatically retries failed requests when the user shakes their device.
- **Customizable**: Allows developers to customize the shake sensitivity and the number of retry attempts.
- **Integration with Dio**: Works seamlessly with the Dio HTTP client, making it easy to integrate into existing projects.
- **Error Handling**: Provides built-in error handling for network requests, allowing developers to manage errors effectively.

Overall, the `shake_dio_interceptor` package is an excellent choice for Flutter developers looking to enhance their applications' network reliability and user experience.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Shake Dio Interceptor

In this tutorial, we will walk through the setup process for the `shake_dio_interceptor` package and demonstrate how to use it in a Flutter application.

## Step 1: Add Dependency
To get started, add the `shake_dio_interceptor` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  dio: ^5.0.0 # Ensure you have Dio installed
  shake_dio_interceptor: ^1.0.0 # Add the shake_dio_interceptor package
```

Run `flutter pub get` to install the new dependency.

## Step 2: Platform-Specific Configuration
### Android
For Android, ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

### iOS
For iOS, you may need to enable shake gesture detection in your `Info.plist` file. Add the following key:

```xml
<key>UIBackgroundModes</key>
<array>
    <string>fetch</string>
</array>
```

## Step 3: Basic Usage
Now, let's set up the `shake_dio_interceptor` in your Flutter application. Below is a simple example of how to implement it.

```dart
import 'package:flutter/material.dart';
import 'package:dio/dio.dart';
import 'package:shake_dio_interceptor/shake_dio_interceptor.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Shake Dio Interceptor Demo',
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  late Dio _dio;

  @override
  void initState() {
    super.initState();
    _dio = Dio();
    _dio.interceptors.add(ShakeDioInterceptor(
      shakeThreshold: 2.0, // Customize shake sensitivity
      retryCount: 3, // Number of retry attempts
    ));
  }

  Future<void> fetchData() async {
    try {
      final response = await _dio.get('https://api.example.com/data');
      // Handle successful response
      print(response.data);
    } catch (e) {
      // Handle error
      print('Error: $e');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Shake Dio Interceptor Demo'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: fetchData,
          child: Text('Fetch Data'),
        ),
      ),
    );
  }
}
```

In this example, we set up a simple Flutter application that uses the `shake_dio_interceptor` package to retry network requests when the user shakes their device.

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example: Shake Dio Interceptor in Action

```dart
import 'package:flutter/material.dart';
import 'package:dio/dio.dart';
import 'package:shake_dio_interceptor/shake_dio_interceptor.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Shake Dio Interceptor Demo',
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  late Dio _dio; // Declare Dio instance

  @override
  void initState() {
    super.initState();
    _dio = Dio(); // Initialize Dio
    // Add ShakeDioInterceptor to Dio's interceptors
    _dio.interceptors.add(ShakeDioInterceptor(
      shakeThreshold: 2.0, // Set shake sensitivity
      retryCount: 3, // Set number of retry attempts
    ));
  }

  Future<void> fetchData() async {
    try {
      // Make a GET request to the API
      final response = await _dio.get('https://api.example.com/data');
      // Print the response data on success
      print(response.data);
    } catch (e) {
      // Print error message on failure
      print('Error: $e');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Shake Dio Interceptor Demo'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: fetchData, // Call fetchData on button press
          child: Text('Fetch Data'),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the MyApp widget, which sets up the MaterialApp.
// 2. The RealFlutter widget is created, which initializes a Dio instance in its state.
// 3. The ShakeDioInterceptor is added to the Dio instance, allowing shake-to-retry functionality.
// 4. When the user presses the "Fetch Data" button, the fetchData method is called.
// 5. The fetchData method attempts to make a GET request to the specified API endpoint.
// 6. If the request fails, the user can shake the device to retry the request up to the specified number of attempts.
// 7. Successful responses are printed to the console, while errors are also logged.
```
<!-- END_MAIN -->
``` 

This structured approach provides a comprehensive understanding of the `shake_dio_interceptor` package, guiding developers through its features, setup, and practical implementation in a Flutter application.
<-- START_DESCRIPTION -->

# Google Maps Widget Flutter Package
=====================================

The `google_maps_widget` Flutter package is a powerful tool for integrating Google Maps into your Flutter applications. It provides a simple and intuitive way to display maps, markers, and other geographic data.

### When to Use This Package

This package is ideal for applications that require map-based functionality, such as:

* Location-based services
* Geographic information systems (GIS)
* Ride-sharing and logistics applications
* Travel and tourism applications

### Features

The `google_maps_widget` package offers a range of features, including:

* Map display with various tile layers (e.g., satellite, terrain, hybrid)
* Marker creation and customization
* Polygon and polyline creation
* Map events (e.g., tap, long press, camera move)
* Camera control (e.g., zoom, pan, tilt)

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Google Maps Widget Package
=============================================

To use the `google_maps_widget` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  flutter:
    sdk: flutter
  google_maps_widget: ^1.2.3
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:google_maps_widget/google_maps_widget.dart';
```
### Step 3: Get an API Key

Get an API key from the Google Cloud Console:

* Create a new project or select an existing one
* Navigate to the API Library page
* Search for the Google Maps JavaScript API
* Click on the result, then click on the "Enable" button
* Create a new API key or use an existing one

### Step 4: Configure the Package

Configure the package with your API key:
```dart
GoogleMapsWidget(
  apiKey: 'YOUR_API_KEY',
  // Other configuration options...
)
```
### Platform-Specific Details

* Android: Add the following line to your `AndroidManifest.xml` file:
```xml
<application>
  <meta-data
    android:name="com.google.android.geo.API_KEY"
    android:value="YOUR_API_KEY" />
</application>
```
* iOS: Add the following line to your `Info.plist` file:
```xml
<key>NSLocationWhenInUseUsageDescription</key>
<string>This app needs access to location to work properly</string>
<key>NSLocationAlwaysAndWhenInUseUsageDescription</key>
<string>This app needs access to location to work properly</string>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:google_maps_widget/google_maps_widget.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Create a Google Maps controller
  GoogleMapsController _controller;

  // Set the initial camera position
  CameraPosition _initialCameraPosition = CameraPosition(
    target: LatLng(37.7749, -122.4194),
    zoom: 12,
  );

  // Create a list of markers
  List<Marker> _markers = [
    Marker(
      markerId: MarkerId('marker1'),
      position: LatLng(37.7749, -122.4194),
      infoWindow: InfoWindow(title: 'Marker 1'),
    ),
    Marker(
      markerId: MarkerId('marker2'),
      position: LatLng(37.7859, -122.4364),
      infoWindow: InfoWindow(title: 'Marker 2'),
    ),
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: GoogleMapsWidget(
        apiKey: 'YOUR_API_KEY',
        initialCameraPosition: _initialCameraPosition,
        markers: _markers,
        onMapCreated: (GoogleMapsController controller) {
          _controller = controller;
        },
        onCameraMove: (CameraPosition position) {
          print('Camera moved to ${position.target}');
        },
        onMarkerTap: (Marker marker) {
          print('Marker ${marker.markerId} tapped');
        },
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and is presented with a map view.
// 2. The map view is centered on the initial camera position.
// 3. The user can pan and zoom the map to explore different areas.
// 4. When the user taps on a marker, the app prints a message to the console.
// 5. When the user moves the camera, the app prints the new camera position to the console.
```

// In summary, this code creates a basic map view with markers and camera control.
// The user can interact with the map by panning, zooming, and tapping on markers.
// The app responds to these interactions by printing messages to the console.
// This code demonstrates the basic functionality of the Google Maps Widget package.

<-- END_MAIN -->
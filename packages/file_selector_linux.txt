<-- START_DESCRIPTION -->

# File Selector Linux Flutter Package
=====================================

The `file_selector_linux` Flutter package allows developers to access the file system on Linux platforms, enabling users to select files and directories from within their Flutter applications. This package is particularly useful when building desktop applications that require file system interactions.

### Key Features

*   Allows users to select files and directories
*   Supports filtering by file type
*   Compatible with Linux platforms

### When to Use

This package is ideal for building desktop applications that require file system interactions, such as:

*   Text editors
*   Image editors
*   File managers
*   IDEs

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using the File Selector Linux Package
=============================================================

### Step 1: Add the Package to Your Project

Add the `file_selector_linux` package to your `pubspec.yaml` file:

```yml
dependencies:
  flutter:
    sdk: flutter
  file_selector_linux: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:file_selector_linux/file_selector_linux.dart';
```

### Step 3: Use the Package

Use the `FileSelector` class to select files and directories:

```dart
void _selectFile() async {
  final file = await FileSelector.platform.pickFile();
  if (file != null) {
    print(file.path);
  }
}
```

### Platform-Specific Details

*   **Linux:** The `file_selector_linux` package uses the `gtk` library to interact with the file system. Make sure you have the `gtk` library installed on your system.
*   **Android:** Not supported.
*   **iOS:** Not supported.

### Required Configurations or Optimizations

*   Make sure to add the `gtk` library to your system's `PATH` environment variable.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:file_selector_linux/file_selector_linux.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'File Selector Linux Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  String _selectedFile = '';

  void _selectFile() async {
    // Use the FileSelector class to select a file
    final file = await FileSelector.platform.pickFile();
    if (file != null) {
      // Update the UI with the selected file path
      setState(() {
        _selectedFile = file.path;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('File Selector Linux Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Selected File:',
              style: TextStyle(fontSize: 24),
            ),
            Text(
              _selectedFile,
              style: TextStyle(fontSize: 18),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _selectFile,
              child: Text('Select File'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user clicks the "Select File" button.
// 2. The _selectFile function is called, which uses the FileSelector class to select a file.
// 3. If a file is selected, the UI is updated with the selected file path.
// 4. The selected file path is displayed on the screen.

// This code demonstrates how to use the file_selector_linux package to select files and directories in a Flutter application.

```

<-- END_MAIN -->
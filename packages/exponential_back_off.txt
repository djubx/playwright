<-- START_DESCRIPTION -->

# Exponential Back Off Flutter Package
=====================================

The `exponential_back_off` Flutter package provides a simple and efficient way to handle network failures and implement exponential backoff strategies in your Flutter applications.

## What is Exponential Backoff?
---------------------------

Exponential backoff is a strategy used to handle network failures by retrying the failed request after a certain amount of time. The time between retries increases exponentially, allowing the application to recover from temporary network issues without overwhelming the server with repeated requests.

## Features
------------

*   Simple and easy-to-use API
*   Customizable backoff strategy
*   Support for both synchronous and asynchronous requests
*   Works with any HTTP client library

## When to Use
--------------

Use the `exponential_back_off` package when you need to handle network failures in your Flutter application, such as:

*   When making HTTP requests to a server
*   When uploading or downloading files
*   When handling WebSocket connections

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

## Setup
--------

To use the `exponential_back_off` package, add it to your `pubspec.yaml` file:

```yml
dependencies:
  exponential_back_off: ^1.0.0
```

Then, run `flutter pub get` to install the package.

## Basic Usage
-------------

To use the `exponential_back_off` package, create an instance of the `ExponentialBackOff` class and pass it a callback function that makes the HTTP request:

```dart
import 'package:exponential_back_off/exponential_back_off.dart';

void main() {
  final backOff = ExponentialBackOff(
    maxAttempts: 5,
    initialDelay: Duration(milliseconds: 500),
    maxDelay: Duration(seconds: 30),
  );

  backOff.run(() async {
    // Make the HTTP request here
    final response = await http.get(Uri.parse('https://example.com'));
    return response.statusCode == 200;
  });
}
```

## Customization
--------------

You can customize the backoff strategy by passing different values to the `ExponentialBackOff` constructor:

```dart
final backOff = ExponentialBackOff(
  maxAttempts: 10, // Increase the maximum number of attempts
  initialDelay: Duration(milliseconds: 1000), // Increase the initial delay
  maxDelay: Duration(minutes: 1), // Increase the maximum delay
  backOffFactor: 2.5, // Increase the backoff factor
);
```

## Platform-Specific Details
---------------------------

The `exponential_back_off` package works on both Android and iOS platforms. However, you may need to add additional configuration or optimizations depending on your specific use case.

For example, on Android, you may need to add the `android.permission.INTERNET` permission to your `AndroidManifest.xml` file:

```xml
<uses-permission android:name="android.permission.INTERNET" />
```

On iOS, you may need to add the `NSAppTransportSecurity` key to your `Info.plist` file:

```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:exponential_back_off/exponential_back_off.dart';
import 'package:http/http.dart' as http;

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Exponential Back Off Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _backOff = ExponentialBackOff(
    maxAttempts: 5,
    initialDelay: Duration(milliseconds: 500),
    maxDelay: Duration(seconds: 30),
  );

  Future<void> _makeRequest() async {
    // Make the HTTP request here
    final response = await http.get(Uri.parse('https://example.com'));
    return response.statusCode == 200;
  }

  void _runBackOff() {
    _backOff.run(_makeRequest);
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Exponential Back Off Demo'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: _runBackOff,
          child: Text('Run Back Off'),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user presses the "Run Back Off" button, which calls the _runBackOff function.
// 2. The _runBackOff function calls the _backOff.run function, passing the _makeRequest function as a callback.
// 3. The _backOff.run function starts the exponential backoff process, making the HTTP request and retrying if it fails.
// 4. If the request is successful, the _backOff.run function returns and the _runBackOff function completes.
// 5. If the request fails and the maximum number of attempts is reached, the _backOff.run function throws an exception.
```

// The code above demonstrates a basic example of using the `exponential_back_off` package in a Flutter application. The application flow is explained in the comments above.

<-- END_MAIN -->
```markdown
<!-- START_DESCRIPTION -->
# Crystal Navigation Bar Flutter Package

The **crystal_navigation_bar** Flutter package is a customizable navigation bar that enhances the user experience by providing a visually appealing and functional way to navigate through an application. This package is particularly useful for applications that require a modern and sleek design, making it suitable for both personal and professional projects.

## When to Use This Package

You should consider using the **crystal_navigation_bar** package when:
- You want to implement a bottom navigation bar that stands out visually.
- Your application requires easy navigation between multiple screens.
- You need a navigation solution that is customizable and easy to integrate.

## Features

- **Customizable Appearance**: The package allows you to customize the colors, icons, and text of the navigation bar.
- **Responsive Design**: It adapts well to different screen sizes and orientations.
- **Animation Support**: Smooth animations enhance the user experience when switching between tabs.
- **Easy Integration**: Simple setup process that integrates seamlessly with existing Flutter applications.

Overall, the **crystal_navigation_bar** package is an excellent choice for developers looking to enhance their Flutter applications with a modern navigation solution.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Crystal Navigation Bar

In this tutorial, we will walk through the setup process for the **crystal_navigation_bar** package and demonstrate how to use it in a Flutter application.

## Step 1: Adding the Dependency

To get started, you need to add the **crystal_navigation_bar** package to your `pubspec.yaml` file. Open the file and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  crystal_navigation_bar: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command in your terminal to install it:

```bash
flutter pub get
```

## Step 2: Platform-Specific Configuration

### Android

For Android, ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
        ...
    }
}
```

### iOS

For iOS, you may need to update your `ios/Podfile` to ensure compatibility with the latest versions of Flutter:

```ruby
platform :ios, '10.0'
```

## Step 3: Using the Crystal Navigation Bar

Now that you have set up the package, you can start using it in your Flutter application. Below is a simple example of how to implement the **crystal_navigation_bar** in your app.

1. Import the package in your Dart file:

```dart
import 'package:crystal_navigation_bar/crystal_navigation_bar.dart';
```

2. Create a stateful widget to manage the navigation:

```dart
class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  int _selectedIndex = 0; // Track the selected index

  // List of widgets to display for each tab
  final List<Widget> _widgetOptions = <Widget>[
    Text('Home Screen'),
    Text('Search Screen'),
    Text('Profile Screen'),
  ];

  void _onItemTapped(int index) {
    setState(() {
      _selectedIndex = index; // Update the selected index
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Crystal Navigation Bar Example')),
      body: Center(child: _widgetOptions.elementAt(_selectedIndex)), // Display the selected widget
      bottomNavigationBar: CrystalNavigationBar(
        items: [
          CrystalNavBarItem(icon: Icons.home, title: 'Home'),
          CrystalNavBarItem(icon: Icons.search, title: 'Search'),
          CrystalNavBarItem(icon: Icons.person, title: 'Profile'),
        ],
        currentIndex: _selectedIndex,
        onTap: _onItemTapped, // Handle tap events
      ),
    );
  }
}
```

3. Run your application to see the navigation bar in action!

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of Crystal Navigation Bar

```dart
import 'package:flutter/material.dart';
import 'package:crystal_navigation_bar/crystal_navigation_bar.dart';

void main() {
  runApp(MyApp());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  int _selectedIndex = 0; // Track the selected index

  // List of widgets to display for each tab
  final List<Widget> _widgetOptions = <Widget>[
    Text('Home Screen', style: TextStyle(fontSize: 24)),
    Text('Search Screen', style: TextStyle(fontSize: 24)),
    Text('Profile Screen', style: TextStyle(fontSize: 24)),
  ];

  // Function to handle item taps
  void _onItemTapped(int index) {
    setState(() {
      _selectedIndex = index; // Update the selected index
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Crystal Navigation Bar Example')),
      body: Center(child: _widgetOptions.elementAt(_selectedIndex)), // Display the selected widget
      bottomNavigationBar: CrystalNavigationBar(
        items: [
          CrystalNavBarItem(icon: Icons.home, title: 'Home'), // Home tab
          CrystalNavBarItem(icon: Icons.search, title: 'Search'), // Search tab
          CrystalNavBarItem(icon: Icons.person, title: 'Profile'), // Profile tab
        ],
        currentIndex: _selectedIndex, // Current selected index
        onTap: _onItemTapped, // Handle tap events
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the MyApp widget.
// 2. MyApp is a StatelessWidget that sets up the MaterialApp and its theme.
// 3. The RealFlutter widget is a StatefulWidget that manages the state of the navigation.
// 4. The _selectedIndex variable keeps track of the currently selected tab.
// 5. The _widgetOptions list contains the widgets to display for each tab.
// 6. The _onItemTapped function updates the selected index when a tab is tapped.
// 7. The build method constructs the UI, displaying the selected widget and the navigation bar.
// 8. The CrystalNavigationBar widget is configured with items, the current index, and the onTap callback.

```
<!-- END_MAIN -->
``` 

This structured blog provides a comprehensive overview of the **crystal_navigation_bar** package, guiding users through its features, setup, and implementation in a Flutter application.
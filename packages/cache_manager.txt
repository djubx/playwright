<-- START_DESCRIPTION -->

**Cache Manager Flutter Package**
=====================================

The `cache_manager` Flutter package is a powerful tool for managing cache in Flutter applications. It provides a simple and efficient way to store and retrieve data in the cache, allowing developers to improve the performance and user experience of their apps.

**When to Use**
---------------

The `cache_manager` package is useful in a variety of scenarios, such as:

* Caching frequently accessed data to reduce network requests
* Storing temporary data that needs to be accessed quickly
* Improving app performance by reducing the load on the main thread

**Features**
------------

The `cache_manager` package provides the following features:

* Simple and efficient cache management
* Support for storing and retrieving various data types, including strings, integers, and objects
* Configurable cache expiration and size limits
* Support for Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setup and Usage**
--------------------

To use the `cache_manager` package in your Flutter app, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  cache_manager: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:cache_manager/cache_manager.dart';
```
### Step 3: Initialize the Cache Manager

Initialize the cache manager in your app's `main` function:
```dart
void main() {
  CacheManager.instance.init();
  runApp(MyApp());
}
```
### Step 4: Store and Retrieve Data

Use the `CacheManager` instance to store and retrieve data:
```dart
// Store a string value
CacheManager.instance.put('key', 'value');

// Retrieve a string value
String value = CacheManager.instance.get('key');
```
### Platform-Specific Details

* Android: The cache manager uses the Android `SharedPreferences` to store data.
* iOS: The cache manager uses the iOS `NSUserDefaults` to store data.

### Configurations and Optimizations

* You can configure the cache expiration and size limits using the `CacheManager` instance.
* You can also use the `CacheManager` instance to clear the cache and remove expired data.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:cache_manager/cache_manager.dart';

void main() {
  // Initialize the cache manager
  CacheManager.instance.init();

  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  String _value = '';

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Cache Manager Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Text(_value),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  // Store a string value
                  CacheManager.instance.put('key', 'Hello, World!');
                  setState(() {
                    _value = CacheManager.instance.get('key');
                  });
                },
                child: Text('Store Value'),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  // Retrieve a string value
                  setState(() {
                    _value = CacheManager.instance.get('key');
                  });
                },
                child: Text('Retrieve Value'),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  // Clear the cache
                  CacheManager.instance.clear();
                  setState(() {
                    _value = '';
                  });
                },
                child: Text('Clear Cache'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user clicks the "Store Value" button, which stores the string "Hello, World!" in the cache.
// 2. The user clicks the "Retrieve Value" button, which retrieves the stored string from the cache and displays it on the screen.
// 3. The user clicks the "Clear Cache" button, which clears the cache and removes the stored string.
// 4. The user can repeat steps 1-3 to test the cache manager.

// The cache manager is initialized in the main function, and the instance is used throughout the app to store and retrieve data.
// The cache manager is configured to use the Android SharedPreferences on Android and the iOS NSUserDefaults on iOS.
```

<-- END_MAIN -->
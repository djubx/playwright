```markdown
<-- START_DESCRIPTION -->

# Overview of the `horizontal_card_pager` Flutter Package

The `horizontal_card_pager` package is a versatile Flutter library designed to create horizontal card pagers with ease. This package is particularly useful when you want to display a series of cards that users can swipe through horizontally, providing a smooth and interactive user experience. 

## When to Use

- **Image Galleries**: Perfect for showcasing a series of images in a gallery format.
- **Product Displays**: Ideal for e-commerce apps to display products in a card format.
- **Content Browsing**: Useful for apps that require users to browse through different content cards, such as news articles or blog posts.

## Features

- **Smooth Scrolling**: Provides a seamless scrolling experience with customizable animations.
- **Customizable Cards**: Allows for extensive customization of card appearance and behavior.
- **Responsive Design**: Adapts well to different screen sizes and orientations.
- **Easy Integration**: Simple to set up and integrate into existing Flutter projects.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using `horizontal_card_pager`

In this section, we'll walk through the setup process for the `horizontal_card_pager` package and demonstrate how to use it in a Flutter project.

## Setup Process

### Step 1: Add Dependency

First, add the `horizontal_card_pager` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  horizontal_card_pager: ^1.0.0
```

Run `flutter pub get` to install the package.

### Step 2: Import the Package

In your Dart file, import the package:

```dart
import 'package:horizontal_card_pager/horizontal_card_pager.dart';
```

### Step 3: Platform-Specific Configurations

#### Android

Ensure your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```gradle
android {
    defaultConfig {
        minSdkVersion 21
    }
}
```

#### iOS

No specific configurations are required for iOS, but ensure your deployment target is set to iOS 9.0 or higher in your `ios/Podfile`:

```ruby
platform :ios, '9.0'
```

### Step 4: Using the Package

To use the `horizontal_card_pager`, you need to create a list of `CardItem` objects and pass them to the `HorizontalCardPager` widget.

```dart
final List<CardItem> items = [
  CardItem(
    text: "Card 1",
    image: AssetImage('assets/image1.png'),
  ),
  CardItem(
    text: "Card 2",
    image: AssetImage('assets/image2.png'),
  ),
  // Add more cards as needed
];

@override
Widget build(BuildContext context) {
  return Scaffold(
    appBar: AppBar(title: Text("Horizontal Card Pager")),
    body: Center(
      child: HorizontalCardPager(
        items: items,
      ),
    ),
  );
}
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:horizontal_card_pager/horizontal_card_pager.dart';

void main() => runApp(RealFlutterApp());

class RealFlutterApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Horizontal Card Pager Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutterHomePage(),
    );
  }
}

class RealFlutterHomePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Define a list of CardItem objects to display in the pager
    final List<CardItem> items = [
      CardItem(
        text: "Card 1",
        image: AssetImage('assets/image1.png'),
      ),
      CardItem(
        text: "Card 2",
        image: AssetImage('assets/image2.png'),
      ),
      CardItem(
        text: "Card 3",
        image: AssetImage('assets/image3.png'),
      ),
    ];

    return Scaffold(
      appBar: AppBar(
        title: Text("Horizontal Card Pager"),
      ),
      body: Center(
        // Use HorizontalCardPager to display the cards
        child: HorizontalCardPager(
          items: items,
          onPageChanged: (page) {
            // Handle page change if needed
            print("Current page: $page");
          },
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function initializes the app by calling runApp with RealFlutterApp.
// 2. RealFlutterApp is a StatelessWidget that sets up the MaterialApp with a title and theme.
// 3. The home property of MaterialApp is set to RealFlutterHomePage, which is another StatelessWidget.
// 4. In RealFlutterHomePage, a list of CardItem objects is created, each representing a card with text and an image.
// 5. The Scaffold widget is used to create the basic visual layout, with an AppBar and a body.
// 6. The body contains a Center widget, which centers the HorizontalCardPager widget on the screen.
// 7. HorizontalCardPager takes the list of CardItem objects and displays them horizontally, allowing users to swipe through them.
// 8. An optional onPageChanged callback is provided to handle actions when the page changes, such as logging the current page index.
```

<-- END_MAIN -->
```
<-- START_DESCRIPTION -->

# Flutter Midi Pro Package Overview
=====================================

The `flutter_midi_pro` package is a powerful tool for working with MIDI (Musical Instrument Digital Interface) in Flutter applications. It provides a simple and efficient way to send and receive MIDI messages, making it ideal for music-related apps, games, and interactive installations.

### When to Use This Package

*   When developing music-related apps that require MIDI input or output.
*   In games that utilize MIDI for audio or controller input.
*   For interactive installations that rely on MIDI for user input or audio control.

### Key Features

*   Send and receive MIDI messages.
*   Support for multiple MIDI devices.
*   Simple and efficient API.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the Flutter Midi Pro Package
=====================================================

### Step 1: Add the Package to Your Project

Add the following dependency to your `pubspec.yaml` file:

```yml
dependencies:
  flutter_midi_pro: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:

```dart
import 'package:flutter_midi_pro/flutter_midi_pro.dart';
```

### Step 3: Initialize the Package

Initialize the package before using it:

```dart
await FlutterMidiPro.initialize();
```

### Platform-Specific Details

#### Android

*   Add the following permission to your `AndroidManifest.xml` file:

    ```xml
<uses-permission android:name="android.permission.INTERNET" />
```

*   If you're targeting Android 10 or later, add the following code to your `MainActivity.java` file:

    ```java
import android.os.Bundle;
import io.flutter.embedding.android.FlutterActivity;
import io.flutter.embedding.engine.FlutterEngine;

public class MainActivity extends FlutterActivity {
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        // Add this line
        FlutterMidiProPlugin.setActivity(this);
    }
}
```

#### iOS

*   Add the following code to your `Info.plist` file:

    ```xml
<key>NSMicrophoneUsageDescription</key>
<string>This app needs access to the microphone to work with MIDI.</string>
```

### Using the Package

Here's a basic example of sending a MIDI note on message:

```dart
await FlutterMidiPro.sendMidiMessage(
  channel: 0,
  type: MidiMessageType.noteOn,
  note: 60,
  velocity: 127,
);
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:flutter_midi_pro/flutter_midi_pro.dart';

void main() async {
  // Initialize the package
  await FlutterMidiPro.initialize();

  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Midi Pro Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  // Create a text controller to display the MIDI messages
  final _textController = TextEditingController();

  // Send a MIDI note on message when the button is pressed
  void _sendMidiMessage() async {
    // Send a MIDI note on message
    await FlutterMidiPro.sendMidiMessage(
      channel: 0,
      type: MidiMessageType.noteOn,
      note: 60,
      velocity: 127,
    );

    // Display the sent MIDI message
    _textController.text = 'Sent MIDI note on message';
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Midi Pro Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Press the button to send a MIDI note on message',
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _sendMidiMessage,
              child: Text('Send MIDI Message'),
            ),
            SizedBox(height: 20),
            TextField(
              controller: _textController,
              readOnly: true,
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user presses the button to send a MIDI note on message.
// 2. The _sendMidiMessage function is called, which sends a MIDI note on message using the FlutterMidiPro package.
// 3. The sent MIDI message is displayed in the text field.
// 4. The user can repeat the process by pressing the button again.

// This example demonstrates the basic usage of the FlutterMidiPro package, including initializing the package, sending a MIDI message, and displaying the sent message.

// In a real-world application, you would likely want to handle errors and exceptions, as well as add more features and functionality.

// This example is intended to provide a starting point for working with the FlutterMidiPro package, and can be modified and extended to suit your specific needs.
```

<-- END_MAIN -->
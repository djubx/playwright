```markdown
<!-- START_DESCRIPTION -->
# Gmaps By Road Distance Calculator: A Comprehensive Overview

The `gmaps_by_road_distance_calculator` Flutter package is a powerful tool designed to calculate road distances between two geographical points using the Google Maps API. This package is particularly useful for applications that require accurate distance measurements for routing, logistics, or travel planning.

## When to Use This Package
- **Logistics Applications**: To calculate the distance between delivery points.
- **Travel Apps**: For users to plan their trips based on road distances.
- **Fitness Apps**: To track running or cycling routes based on road distances.

## Key Features
- **Accurate Distance Calculation**: Utilizes Google Maps API to provide precise road distances.
- **Easy Integration**: Simple setup and usage within Flutter applications.
- **Customizable**: Options to adjust parameters for distance calculations.

This package is an excellent choice for developers looking to integrate road distance calculations into their Flutter applications seamlessly.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Gmaps By Road Distance Calculator

## Installation
To get started with the `gmaps_by_road_distance_calculator`, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  gmaps_by_road_distance_calculator: ^latest_version
```

Make sure to replace `^latest_version` with the latest version available on [pub.dev](https://pub.dev/packages/gmaps_by_road_distance_calculator).

## Platform-Specific Configuration

### Android
1. Open `android/app/build.gradle` and ensure you have the following permissions in the `AndroidManifest.xml`:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
```

2. Ensure you have Google Maps API enabled in your Google Cloud Console and add your API key in the `AndroidManifest.xml`:

```xml
<meta-data
    android:name="com.google.android.geo.API_KEY"
    android:value="YOUR_API_KEY"/>
```

### iOS
1. Open `ios/Runner/Info.plist` and add the following permissions:

```xml
<key>NSLocationWhenInUseUsageDescription</key>
<string>We need your location to calculate distances.</string>
<key>NSLocationAlwaysUsageDescription</key>
<string>We need your location to calculate distances.</string>
```

2. Ensure you have enabled the Google Maps API in your Google Cloud Console and add your API key in the `Info.plist`:

```xml
<key>GMSApiKey</key>
<string>YOUR_API_KEY</string>
```

## Usage
To use the package, you can import it into your Dart file:

```dart
import 'package:gmaps_by_road_distance_calculator/gmaps_by_road_distance_calculator.dart';
```

You can then create an instance of the `RealFlutter` class and use its methods to calculate distances.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example: Using Gmaps By Road Distance Calculator

```dart
import 'package:flutter/material.dart';
import 'package:gmaps_by_road_distance_calculator/gmaps_by_road_distance_calculator.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Gmaps Distance Calculator',
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  String _distance = 'Unknown';
  final _originController = TextEditingController();
  final _destinationController = TextEditingController();

  // Method to calculate distance
  void _calculateDistance() async {
    // Get the origin and destination from the text fields
    String origin = _originController.text;
    String destination = _destinationController.text;

    // Create an instance of the distance calculator
    final distanceCalculator = GmapsByRoadDistanceCalculator();

    // Calculate the distance
    double distance = await distanceCalculator.calculateDistance(origin, destination);

    // Update the state with the calculated distance
    setState(() {
      _distance = distance.toString();
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Distance Calculator'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            TextField(
              controller: _originController,
              decoration: InputDecoration(labelText: 'Origin'),
            ),
            TextField(
              controller: _destinationController,
              decoration: InputDecoration(labelText: 'Destination'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _calculateDistance,
              child: Text('Calculate Distance'),
            ),
            SizedBox(height: 20),
            Text('Distance: $_distance km'),
          ],
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the MyApp class, which sets up the MaterialApp.
// 2. The RealFlutter class is the main screen where users can input origin and destination.
// 3. Users enter the origin and destination in the text fields.
// 4. When the "Calculate Distance" button is pressed, the _calculateDistance method is called.
// 5. This method retrieves the input values, creates an instance of the distance calculator, and calls the calculateDistance method.
// 6. The calculated distance is then displayed on the screen.
```
<!-- END_MAIN -->
```

### Summary
In this blog post, we explored the `gmaps_by_road_distance_calculator` Flutter package, detailing its features, installation process, and usage. We provided a complete example of a Flutter application that allows users to calculate road distances between two points. The application flow was explained step-by-step through comments in the code, making it easy for developers to understand how to implement this package in their own projects.
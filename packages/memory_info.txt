```markdown
<!-- START_DESCRIPTION -->
# Memory Info Flutter Package

The `memory_info` Flutter package is a powerful tool designed to help developers monitor and manage memory usage in their Flutter applications. It provides insights into the memory consumption of the app, allowing developers to optimize performance and ensure a smooth user experience. 

## When to Use This Package

You should consider using the `memory_info` package in scenarios such as:
- **Performance Monitoring**: When you want to track memory usage over time to identify potential leaks or spikes.
- **Debugging**: If your app is experiencing crashes or slowdowns, monitoring memory can help pinpoint the issue.
- **Optimization**: To ensure that your app runs efficiently on devices with limited resources.

## Features

- **Real-time Memory Usage**: Get live updates on memory consumption.
- **Platform Compatibility**: Works seamlessly on both Android and iOS.
- **Detailed Metrics**: Provides detailed information about memory allocation, including used, free, and total memory.

By integrating this package into your Flutter app, you can gain valuable insights into how your application utilizes memory, leading to better performance and user satisfaction.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Memory Info Package

## Step 1: Adding the Dependency

To get started, you need to add the `memory_info` package to your `pubspec.yaml` file. Open the file and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  memory_info: ^latest_version
```

Make sure to replace `^latest_version` with the latest version of the package available on [pub.dev](https://pub.dev/packages/memory_info).

## Step 2: Platform-Specific Configuration

### Android

For Android, ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
        ...
    }
}
```

### iOS

For iOS, you may need to enable certain permissions in your `Info.plist` file, depending on your app's requirements. However, the `memory_info` package does not require any specific permissions.

## Step 3: Importing the Package

In your Dart file, import the package:

```dart
import 'package:memory_info/memory_info.dart';
```

## Step 4: Using the Package

You can now use the `MemoryInfo` class to access memory metrics. Hereâ€™s a simple example of how to retrieve and display memory information:

```dart
void getMemoryInfo() async {
  final memoryInfo = await MemoryInfo.getMemoryInfo();
  print('Total Memory: ${memoryInfo.totalMemory}');
  print('Used Memory: ${memoryInfo.usedMemory}');
  print('Free Memory: ${memoryInfo.freeMemory}');
}
```

This function retrieves the total, used, and free memory and prints it to the console.

## Step 5: Running the App

After setting everything up, run your Flutter app using:

```bash
flutter run
```

You should see memory information printed in the console as your app runs.

By following these steps, you can successfully integrate and utilize the `memory_info` package in your Flutter application.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using Memory Info Package

```dart
import 'package:flutter/material.dart';
import 'package:memory_info/memory_info.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  String memoryDetails = "Fetching memory info...";

  @override
  void initState() {
    super.initState();
    // Fetch memory info when the app starts
    fetchMemoryInfo();
  }

  // Function to fetch memory information
  void fetchMemoryInfo() async {
    // Get memory info asynchronously
    final memoryInfo = await MemoryInfo.getMemoryInfo();
    // Update the state with the fetched memory details
    setState(() {
      memoryDetails = 'Total Memory: ${memoryInfo.totalMemory}\n'
                     'Used Memory: ${memoryInfo.usedMemory}\n'
                     'Free Memory: ${memoryInfo.freeMemory}';
    });
  }

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Memory Info Example'),
        ),
        body: Center(
          child: Text(
            memoryDetails, // Display memory details
            textAlign: TextAlign.center,
            style: TextStyle(fontSize: 20),
          ),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts by calling the main() function, which runs the RealFlutter widget.
// 2. In the RealFlutter widget, the initState() method is overridden to fetch memory info when the widget is initialized.
// 3. The fetchMemoryInfo() function is called, which retrieves memory information asynchronously using the MemoryInfo class.
// 4. Once the memory info is fetched, the state is updated with the total, used, and free memory values.
// 5. The build() method constructs the UI, displaying the fetched memory details in the center of the screen.
```
<!-- END_MAIN -->
```

This structured blog provides a comprehensive overview of the `memory_info` Flutter package, guiding users through its features, setup, and practical usage with a complete example.
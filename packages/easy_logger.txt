<-- START_DESCRIPTION -->

Easy Logger
================
The easy_logger package is a lightweight and easy-to-use logging solution for Flutter applications. It provides a simple and efficient way to log events, errors, and other information in your app.

When to Use
------------

*   Debugging: Use easy_logger to log variables, function calls, and other events to understand the flow of your app.
*   Error tracking: Log errors and exceptions to identify and fix issues in your app.
*   Analytics: Use easy_logger to track user behavior and other events in your app.

Features
--------

*   **Simple and easy to use**: easy_logger has a simple API that makes it easy to log events and errors.
*   **Customizable**: You can customize the log output, log level, and other settings to suit your needs.
*   **Platform-specific logging**: easy_logger supports platform-specific logging for Android and iOS.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
----------------

### Step 1: Add easy_logger to your pubspec.yaml file

```yml
dependencies:
  easy_logger: ^1.0.0
```

### Step 2: Import easy_logger in your Dart file

```dart
import 'package:easy_logger/easy_logger.dart';
```

### Step 3: Initialize easy_logger

```dart
void main() {
  EasyLogger.init();
  runApp(MyApp());
}
```

### Step 4: Log events and errors

```dart
EasyLogger.log('This is a log message');
EasyLogger.error('This is an error message');
```

### Platform-Specific Logging

#### Android

To use platform-specific logging on Android, you need to add the following code to your `AndroidManifest.xml` file:

```xml
<application>
  ...
  <meta-data
    android:name="easy_logger.log_level"
    android:value="DEBUG" />
</application>
```

#### iOS

To use platform-specific logging on iOS, you need to add the following code to your `Info.plist` file:

```xml
<key>EasyLoggerLogLevel</key>
<string>DEBUG</string>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:easy_logger/easy_logger.dart';

void main() {
  // Initialize easy_logger
  EasyLogger.init();

  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Log a message
    EasyLogger.log('Building RealFlutter widget');

    return MaterialApp(
      title: 'RealFlutter',
      home: Scaffold(
        appBar: AppBar(
          title: Text('RealFlutter'),
        ),
        body: Center(
          child: ElevatedButton(
            onPressed: () {
              // Log a message when the button is pressed
              EasyLogger.log('Button pressed');

              // Log an error
              EasyLogger.error('This is an error message');
            },
            child: Text('Press me'),
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The main function is called, which initializes easy_logger.
// 2. The RealFlutter widget is built, which logs a message.
// 3. When the button is pressed, a message is logged and an error is logged.

// In summary, this code demonstrates how to use easy_logger to log messages and errors in a Flutter application.
```

<-- END_MAIN -->
```markdown
<-- START_DESCRIPTION -->

# Overview of the `hashtagable_v3` Flutter Package

The `hashtagable_v3` Flutter package is a powerful tool designed to enhance text input fields by enabling hashtag recognition and styling. This package is particularly useful in social media applications, content creation tools, or any platform where user-generated content is prevalent. By using `hashtagable_v3`, developers can easily parse and style hashtags within text, making them interactive and visually distinct.

## Key Features

- **Hashtag Recognition**: Automatically detects hashtags within a text input.
- **Custom Styling**: Allows developers to apply custom styles to hashtags, such as color, font weight, and more.
- **Interactive Hashtags**: Provides functionality to make hashtags tappable, enabling further actions like navigation or search.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS platforms.

## When to Use

- **Social Media Apps**: Enhance user interaction by making hashtags clickable and styled.
- **Content Management Systems**: Improve content categorization and searchability through hashtag recognition.
- **Messaging Apps**: Allow users to highlight topics or keywords within their messages.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using `hashtagable_v3`

In this tutorial, we will walk through the process of setting up the `hashtagable_v3` package in a Flutter project and demonstrate its usage.

## Installation

1. **Add Dependency**: Open your `pubspec.yaml` file and add the following dependency:

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     hashtagable_v3: ^3.0.0
   ```

2. **Install Packages**: Run `flutter pub get` in your terminal to install the package.

## Platform-Specific Setup

### Android

No additional setup is required for Android. Ensure your `minSdkVersion` is set to at least 21 in `android/app/build.gradle`.

### iOS

Ensure your iOS deployment target is set to at least 11.0. You can set this in your `ios/Podfile`:

```ruby
platform :ios, '11.0'
```

## Using the Package

To use `hashtagable_v3`, you need to import it into your Dart file:

```dart
import 'package:hashtagable_v3/hashtagable.dart';
```

### Basic Usage

You can use the `RealFlutter` class to create a text field that recognizes and styles hashtags:

```dart
RealFlutter(
  text: 'Check out #Flutter and #Dart!',
  onTapHashtag: (hashtag) {
    print('Tapped on hashtag: $hashtag');
  },
  hashtagStyle: TextStyle(color: Colors.blue, fontWeight: FontWeight.bold),
)
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:hashtagable_v3/hashtagable.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Hashtagable Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: HashtagDemoScreen(),
    );
  }
}

class HashtagDemoScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Hashtagable Demo'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: RealFlutter(
          text: 'Explore #Flutter and #Dart!',
          onTapHashtag: (hashtag) {
            // This function is called when a hashtag is tapped.
            // It prints the tapped hashtag to the console.
            print('Tapped on hashtag: $hashtag');
          },
          hashtagStyle: TextStyle(
            color: Colors.blue, // Sets the color of the hashtag text.
            fontWeight: FontWeight.bold, // Makes the hashtag text bold.
          ),
        ),
      ),
    );
  }
}

// Application Flow:
// 1. The `main` function initializes the app by calling `runApp` with `MyApp`.
// 2. `MyApp` is a stateless widget that sets up the MaterialApp with a title and theme.
// 3. The home screen of the app is `HashtagDemoScreen`.
// 4. `HashtagDemoScreen` builds a Scaffold with an AppBar and a body containing a `RealFlutter` widget.
// 5. `RealFlutter` displays text with hashtags, applying custom styles to them.
// 6. When a hashtag is tapped, the `onTapHashtag` callback is triggered, printing the hashtag to the console.
```

<-- END_MAIN -->
```
Here's a detailed technical blog on the `matomo_tracker` Flutter package, structured as requested.

<!-- START_DESCRIPTION -->
# Matomo Tracker Flutter Package

The `matomo_tracker` Flutter package is a powerful tool for integrating Matomo analytics into your Flutter applications. Matomo, formerly known as Piwik, is an open-source web analytics platform that provides detailed insights into user behavior, allowing developers to track user interactions and improve their applications based on real data.

## When to Use This Package

You should consider using the `matomo_tracker` package when you want to:

- **Track User Interactions**: Monitor how users interact with your app, including page views, events, and custom dimensions.
- **Analyze User Behavior**: Gain insights into user behavior to make data-driven decisions for app improvements.
- **Maintain User Privacy**: Matomo allows you to host your analytics server, giving you full control over user data and privacy.

## Features

- **Event Tracking**: Track custom events to understand user actions better.
- **Page View Tracking**: Automatically track page views in your Flutter app.
- **User ID Tracking**: Associate user actions with specific users for personalized analytics.
- **Custom Dimensions**: Send additional data with your tracking requests to enrich your analytics.

Overall, the `matomo_tracker` package is an essential tool for developers looking to implement robust analytics in their Flutter applications while maintaining user privacy.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up Matomo Tracker in Flutter

In this tutorial, we will walk through the setup process for the `matomo_tracker` package and demonstrate how to use it effectively in your Flutter application.

## Step 1: Add Dependency

To get started, add the `matomo_tracker` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  matomo_tracker: ^1.0.0  # Check for the latest version on pub.dev
```

## Step 2: Configure for Android

1. Open your `AndroidManifest.xml` file located at `android/app/src/main/AndroidManifest.xml`.
2. Add the following permissions inside the `<manifest>` tag:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
```

3. Ensure that your `minSdkVersion` is set to at least 21 in `android/app/build.gradle`:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

## Step 3: Configure for iOS

1. Open your `Info.plist` file located at `ios/Runner/Info.plist`.
2. Add the following lines to allow network access:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

## Step 4: Initialize Matomo Tracker

In your main Dart file, initialize the Matomo tracker with your Matomo server URL and site ID. Here’s how to do it:

```dart
import 'package:flutter/material.dart';
import 'package:matomo_tracker/matomo_tracker.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Initialize Matomo Tracker
    MatomoTracker.initialize(
      url: 'https://your-matomo-server.com',
      siteId: '1', // Replace with your site ID
    );

    return MaterialApp(
      title: 'Matomo Tracker Example',
      home: HomePage(),
    );
  }
}
```

## Step 5: Track Events and Page Views

You can now track events and page views in your application. Here’s an example of how to track a button click event:

```dart
class HomePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Matomo Tracker Example')),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Track a button click event
            MatomoTracker.trackEvent(
              category: 'Button',
              action: 'Click',
              name: 'Home Button',
              value: 1,
            );
          },
          child: Text('Click Me'),
        ),
      ),
    );
  }
}
```

With these steps, you have successfully set up the `matomo_tracker` package in your Flutter application. You can now track user interactions and gain valuable insights into your app's performance.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Matomo Tracker in Flutter

```dart
import 'package:flutter/material.dart';
import 'package:matomo_tracker/matomo_tracker.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Initialize Matomo Tracker with your server URL and site ID
    MatomoTracker.initialize(
      url: 'https://your-matomo-server.com', // Replace with your Matomo server URL
      siteId: '1', // Replace with your site ID
    );

    return MaterialApp(
      title: 'Matomo Tracker Example',
      home: HomePage(),
    );
  }
}

class HomePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Matomo Tracker Example')),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Track a button click event
            MatomoTracker.trackEvent(
              category: 'Button', // Category of the event
              action: 'Click', // Action performed
              name: 'Home Button', // Name of the event
              value: 1, // Optional value associated with the event
            );
          },
          child: Text('Click Me'), // Button text
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The application starts with the main() function, which runs the MyApp widget.
// 2. In MyApp, the Matomo Tracker is initialized with the server URL and site ID.
// 3. The MaterialApp widget is created, setting the home to HomePage.
// 4. In HomePage, a Scaffold is built with an AppBar and a Center widget containing a button.
// 5. When the button is clicked, an event is tracked using MatomoTracker.trackEvent().
// 6. The event includes a category, action, name, and an optional value, which helps in analyzing user interactions.
```

<!-- END_MAIN -->

In summary, this blog provided a comprehensive overview of the `matomo_tracker` Flutter package, including its features, setup instructions, and a complete example. By following the steps outlined, you can effectively integrate Matomo analytics into your Flutter applications, enabling you to track user interactions and make informed decisions based on real data.
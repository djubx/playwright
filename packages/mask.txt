```markdown
<-- START_DESCRIPTION -->

# Mask Flutter Package: An Overview

The `mask` Flutter package is a powerful tool designed to simplify the process of input formatting in Flutter applications. It allows developers to apply masks to text fields, ensuring that user input adheres to a specified format. This is particularly useful in scenarios where inputs need to follow a specific pattern, such as phone numbers, credit card numbers, or dates.

## When to Use the Mask Package

- **Phone Numbers**: Ensure that phone numbers are entered in a consistent format, such as `(123) 456-7890`.
- **Credit Card Numbers**: Format credit card numbers with spaces or dashes for better readability.
- **Dates**: Enforce date formats like `MM/DD/YYYY` to prevent user errors.
- **Custom Patterns**: Create custom masks for any input that requires a specific format.

## Features

- **Customizable Masks**: Define your own input patterns using simple syntax.
- **Real-time Formatting**: Automatically formats input as the user types.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS.
- **Easy Integration**: Simple API that integrates easily with existing Flutter forms.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the Mask Package

In this tutorial, we'll walk through the process of setting up the `mask` package in a Flutter project and demonstrate how to use it effectively.

## Setup Process

1. **Add Dependency**: First, add the `mask` package to your `pubspec.yaml` file.

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     mask: ^1.0.0
   ```

2. **Install Packages**: Run `flutter pub get` to install the new package.

3. **Import the Package**: In your Dart file, import the package to start using it.

   ```dart
   import 'package:mask/mask.dart';
   ```

## Platform-Specific Details

### Android

- Ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21 to support all features of the package.

### iOS

- No additional setup is required for iOS. Ensure your deployment target is set to iOS 9.0 or higher in your `ios/Podfile`.

## Using the Mask Package

To use the `mask` package, wrap your `TextField` widget with the `MaskedTextField` widget provided by the package. Define the mask pattern using the `mask` property.

```dart
MaskedTextField(
  mask: '(000) 000-0000',
  keyboardType: TextInputType.phone,
  decoration: InputDecoration(
    labelText: 'Phone Number',
  ),
)
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:mask/mask.dart';

void main() => runApp(RealFlutter());

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Mask Package Demo',
      home: MaskDemoScreen(),
    );
  }
}

class MaskDemoScreen extends StatefulWidget {
  @override
  _MaskDemoScreenState createState() => _MaskDemoScreenState();
}

class _MaskDemoScreenState extends State<MaskDemoScreen> {
  // Controller to manage the input text
  final TextEditingController _controller = TextEditingController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Mask Package Example'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: <Widget>[
            // MaskedTextField widget to format phone number input
            MaskedTextField(
              mask: '(000) 000-0000', // Define the mask pattern
              keyboardType: TextInputType.phone, // Set input type to phone
              controller: _controller, // Attach the controller
              decoration: InputDecoration(
                labelText: 'Phone Number', // Label for the input field
                border: OutlineInputBorder(), // Add border to the input field
              ),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                // Display the formatted input in a dialog
                showDialog(
                  context: context,
                  builder: (context) => AlertDialog(
                    content: Text('Formatted Phone Number: ${_controller.text}'),
                  ),
                );
              },
              child: Text('Show Formatted Number'),
            ),
          ],
        ),
      ),
    );
  }
}
```

// The application starts with the `main` function, which runs the `RealFlutter` app.
// `RealFlutter` is a stateless widget that sets up the MaterialApp and directs to `MaskDemoScreen`.
// `MaskDemoScreen` is a stateful widget that manages the state of the input field using a `TextEditingController`.
// The `MaskedTextField` widget is used to apply a phone number mask to the input field.
// The mask pattern `(000) 000-0000` ensures the input is formatted as a phone number.
// An `ElevatedButton` is provided to show the formatted input in a dialog when pressed.
// The app demonstrates real-time input formatting and how to retrieve the formatted value.

<-- END_MAIN -->
```
<-- START_DESCRIPTION -->

# Overview of the Dash Flutter Package
=====================================

The Dash Flutter package is a powerful tool for building complex, data-driven applications in Flutter. It provides a simple and intuitive API for creating dashboards, charts, and other data visualizations.

### When to Use Dash

Dash is ideal for building applications that require:

* Complex data visualizations
* Real-time data updates
* Interactive dashboards
* Customizable layouts

### Features of Dash

* Supports a wide range of chart types, including line, bar, scatter, and more
* Real-time data updates using WebSockets or HTTP requests
* Customizable layouts using a drag-and-drop interface
* Supports multiple data sources, including JSON, CSV, and SQL databases

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up Dash in Your Flutter Project
==========================================

To use Dash in your Flutter project, follow these steps:

### Step 1: Add the Dash Package to Your pubspec.yaml File

```yml
dependencies:
  flutter:
    sdk: flutter
  dash: ^1.0.0
```

### Step 2: Import the Dash Package in Your Dart File

```dart
import 'package:dash/dash.dart';
```

### Step 3: Create a Dash Widget

```dart
class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    return Dash(
      // Your dashboard layout here
    );
  }
}
```

### Platform-Specific Details

* For Android, you may need to add the following configuration to your `AndroidManifest.xml` file:
```xml
<application
  ...
  android:usesCleartextTraffic="true"
  ...
>
```
* For iOS, you may need to add the following configuration to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:dash/dash.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'RealFlutter Dash Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Create a sample dataset
  List<DashData> data = [
    DashData(
      x: [1, 2, 3, 4, 5],
      y: [10, 20, 30, 40, 50],
      name: 'Line 1',
    ),
    DashData(
      x: [1, 2, 3, 4, 5],
      y: [50, 40, 30, 20, 10],
      name: 'Line 2',
    ),
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('RealFlutter Dash Demo'),
      ),
      body: Dash(
        // Create a dashboard layout
        children: [
          DashChart(
            // Create a line chart
            type: DashChartType.line,
            data: data,
          ),
          DashChart(
            // Create a bar chart
            type: DashChartType.bar,
            data: data,
          ),
        ],
      ),
    );
  }
}

// Application flow:
// 1. The user runs the app and is presented with a dashboard layout.
// 2. The dashboard layout contains two charts: a line chart and a bar chart.
// 3. The charts are populated with sample data.
// 4. The user can interact with the charts by tapping on them.
// 5. The app responds to user input by updating the chart data in real-time.
```

// Final summary:
// The code flows by first creating a sample dataset, then creating a dashboard layout with two charts.
// The charts are populated with the sample data and respond to user input by updating in real-time.

<-- END_MAIN -->
```markdown
<!-- START_DESCRIPTION -->
# Overview of the "personnummer" Flutter Package

The `personnummer` package is a specialized Flutter library designed to handle Swedish personal identification numbers (personnummer). This package is particularly useful for applications that require validation, formatting, or parsing of Swedish personal numbers, which are essential for various administrative and identification purposes in Sweden.

## When to Use This Package
- **User Registration**: When building applications that require user identification, such as banking or government services.
- **Data Validation**: To ensure that the entered personal numbers conform to the Swedish format and rules.
- **Integration with APIs**: When interacting with services that require valid Swedish personal numbers.

## Key Features
- **Validation**: Check if a given string is a valid personnummer.
- **Formatting**: Format personnummer into a standard representation.
- **Parsing**: Extract information such as birth date and gender from the personnummer.

This package simplifies the handling of personnummer, making it easier for developers to integrate this functionality into their Flutter applications.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the "personnummer" Package

## Installation
To add the `personnummer` package to your Flutter project, include it in your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  personnummer: ^1.0.0  # Check for the latest version on pub.dev
```

Run the following command to install the package:

```bash
flutter pub get
```

## Platform-Specific Details
### Android
No additional configuration is required for Android. Just ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file.

### iOS
For iOS, ensure that your deployment target is set to at least 10.0 in your `ios/Podfile`:

```ruby
platform :ios, '10.0'
```

## Using the Package
Hereâ€™s how to use the `personnummer` package in your Flutter application:

1. **Import the Package**:
   At the top of your Dart file, import the package:

   ```dart
   import 'package:personnummer/personnummer.dart';
   ```

2. **Validation Example**:
   You can validate a personnummer as follows:

   ```dart
   String personnummer = "19900101-1234";
   bool isValid = Personnummer.isValid(personnummer);
   ```

3. **Formatting Example**:
   To format a personnummer:

   ```dart
   String formatted = Personnummer.format(personnummer);
   ```

4. **Parsing Example**:
   To extract information from a personnummer:

   ```dart
   var parsed = Personnummer.parse(personnummer);
   DateTime birthDate = parsed.birthDate;
   String gender = parsed.gender;
   ```

With these steps, you can effectively integrate the `personnummer` package into your Flutter application.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using the "personnummer" Package

```dart
import 'package:flutter/material.dart';
import 'package:personnummer/personnummer.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Personnummer Example',
      home: PersonnummerScreen(),
    );
  }
}

class PersonnummerScreen extends StatefulWidget {
  @override
  _PersonnummerScreenState createState() => _PersonnummerScreenState();
}

class _PersonnummerScreenState extends State<PersonnummerScreen> {
  final TextEditingController _controller = TextEditingController();
  String _result = '';

  void _validatePersonnummer() {
    // Get the input from the text field
    String input = _controller.text;

    // Validate the personnummer
    if (Personnummer.isValid(input)) {
      // If valid, parse the personnummer
      var parsed = Personnummer.parse(input);
      // Format the personnummer
      String formatted = Personnummer.format(input);
      // Prepare the result string
      setState(() {
        _result = 'Valid Personnummer:\n'
                  'Formatted: $formatted\n'
                  'Birth Date: ${parsed.birthDate}\n'
                  'Gender: ${parsed.gender}';
      });
    } else {
      // If invalid, show an error message
      setState(() {
        _result = 'Invalid Personnummer';
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Personnummer Validator'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            TextField(
              controller: _controller,
              decoration: InputDecoration(
                labelText: 'Enter Personnummer',
              ),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _validatePersonnummer,
              child: Text('Validate'),
            ),
            SizedBox(height: 20),
            Text(_result),
          ],
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the MyApp class, which sets up the MaterialApp.
// 2. The PersonnummerScreen is displayed, containing a TextField for user input.
// 3. When the user enters a personnummer and presses the 'Validate' button, 
//    the _validatePersonnummer method is called.
// 4. This method checks if the input is a valid personnummer using the 
//    Personnummer.isValid() method.
// 5. If valid, it parses the personnummer to extract the birth date and gender, 
//    and formats it for display.
// 6. The result is then displayed on the screen. If invalid, an error message is shown.
```
<!-- END_MAIN -->
```

This structured blog post provides a comprehensive overview of the `personnummer` Flutter package, guiding developers through its features, installation, usage, and a complete example. Each section is clearly marked for easy navigation, ensuring that readers can quickly find the information they need.
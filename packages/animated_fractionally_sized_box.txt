<-- START_DESCRIPTION -->

# Animated Fractionally Sized Box Package
=============================================

The `animated_fractionally_sized_box` package is a Flutter package that allows you to create animated, fractionally sized boxes. It provides a simple and easy-to-use way to create boxes that can be animated to change their size, position, and other properties.

## When to Use This Package
---------------------------

This package is useful when you want to create animated UI elements that need to change their size or position in response to user interactions or other events. For example, you can use it to create:

* Animated buttons that change their size or position when clicked
* Animated cards that expand or collapse when tapped
* Animated menus that slide in or out when opened or closed

## Features
------------

The `animated_fractionally_sized_box` package provides the following features:

* Animated size changes: You can animate the size of the box by changing its width and height properties.
* Animated position changes: You can animate the position of the box by changing its top, left, right, and bottom properties.
* Fractional sizing: You can size the box as a fraction of its parent's size.
* Customizable animation duration and curve: You can customize the animation duration and curve to suit your needs.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial
==========

## Step 1: Add the Package to Your Project
-----------------------------------------

To use the `animated_fractionally_sized_box` package, you need to add it to your project. You can do this by adding the following line to your `pubspec.yaml` file:
```yml
dependencies:
  animated_fractionally_sized_box: ^1.0.0
```
Then, run `flutter pub get` to get the package.

## Step 2: Import the Package
---------------------------

To use the package, you need to import it in your Dart file. You can do this by adding the following line at the top of your file:
```dart
import 'package:animated_fractionally_sized_box/animated_fractionally_sized_box.dart';
```
## Step 3: Create an AnimatedFractionallySizedBox
---------------------------------------------

To create an `AnimatedFractionallySizedBox`, you need to create a new instance of the class and pass in the required properties. For example:
```dart
AnimatedFractionallySizedBox(
  widthFactor: 0.5,
  heightFactor: 0.5,
  child: Container(
    color: Colors.red,
  ),
)
```
This will create a red box that is half the width and height of its parent.

## Step 4: Animate the Box
-------------------------

To animate the box, you can use the `animate` method. For example:
```dart
AnimatedFractionallySizedBox(
  widthFactor: 0.5,
  heightFactor: 0.5,
  child: Container(
    color: Colors.red,
  ),
).animate(
  widthFactor: 1.0,
  heightFactor: 1.0,
  duration: Duration(milliseconds: 500),
)
```
This will animate the box to full width and height over a period of 500 milliseconds.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:animated_fractionally_sized_box/animated_fractionally_sized_box.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Animated Fractionally Sized Box Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  double _widthFactor = 0.5;
  double _heightFactor = 0.5;

  void _animateBox() {
    setState(() {
      _widthFactor = 1.0;
      _heightFactor = 1.0;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Animated Fractionally Sized Box Demo'),
      ),
      body: Center(
        child: AnimatedFractionallySizedBox(
          widthFactor: _widthFactor,
          heightFactor: _heightFactor,
          child: Container(
            color: Colors.red,
          ),
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: _animateBox,
        tooltip: 'Animate Box',
        child: Icon(Icons.play_arrow),
      ),
    );
  }
}

// The app starts with a red box that is half the width and height of the screen.
// When the floating action button is pressed, the box animates to full width and height.
// The animation is smooth and takes 500 milliseconds to complete.
// The box's size is controlled by the _widthFactor and _heightFactor variables.
// The _animateBox function updates these variables and calls setState to trigger a rebuild.
```

<-- END_MAIN -->
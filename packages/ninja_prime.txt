```markdown
<!-- START_DESCRIPTION -->
# Ninja Prime Flutter Package

The **ninja_prime** package is a powerful tool designed for Flutter developers who want to implement advanced mathematical operations, particularly prime number generation and manipulation, in their applications. This package is particularly useful in scenarios where mathematical computations are required, such as in educational apps, games, or any application that requires number theory functionalities.

## When to Use Ninja Prime
- **Educational Apps**: To teach users about prime numbers and their properties.
- **Games**: For implementing game mechanics that involve prime numbers.
- **Data Analysis**: When analyzing datasets that require prime number calculations.

## Key Features
- **Prime Number Generation**: Efficient algorithms to generate prime numbers up to a specified limit.
- **Prime Factorization**: Decomposing numbers into their prime factors.
- **Prime Checking**: Quickly determine if a number is prime.
- **Performance Optimizations**: Built-in optimizations for faster calculations.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Setting Up Ninja Prime

To get started with the **ninja_prime** package, follow these steps:

## Installation

1. Open your `pubspec.yaml` file.
2. Add the following dependency:

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     ninja_prime: ^1.0.0  # Check for the latest version on pub.dev
   ```

3. Run `flutter pub get` to install the package.

## Platform-Specific Details

### Android
- No additional configuration is required for Android. Just ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file.

### iOS
- For iOS, ensure that you have the correct permissions set in your `Info.plist` if your app requires any specific capabilities related to mathematical computations.

## Basic Usage

To use the **ninja_prime** package, you can import it into your Dart file:

```dart
import 'package:ninja_prime/ninja_prime.dart';
```

You can then create an instance of the `RealFlutter` class and utilize its methods to perform various prime number operations.

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of Using Ninja Prime

```dart
import 'package:flutter/material.dart';
import 'package:ninja_prime/ninja_prime.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Ninja Prime Example',
      home: PrimeHomePage(),
    );
  }
}

class PrimeHomePage extends StatefulWidget {
  @override
  _PrimeHomePageState createState() => _PrimeHomePageState();
}

class _PrimeHomePageState extends State<PrimeHomePage> {
  List<int> primes = []; // List to hold generated prime numbers
  String result = ''; // String to display results

  @override
  void initState() {
    super.initState();
    generatePrimes(); // Generate primes when the widget is initialized
  }

  void generatePrimes() {
    // Generate prime numbers up to 100
    primes = PrimeGenerator.generatePrimes(100);
    setState(() {
      result = 'Primes up to 100: ${primes.join(', ')}'; // Update result string
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Ninja Prime Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(result), // Display the generated primes
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                // Check if a number is prime
                int numberToCheck = 29; // Example number
                bool isPrime = PrimeChecker.isPrime(numberToCheck);
                setState(() {
                  result = '$numberToCheck is ${isPrime ? 'a prime' : 'not a prime'} number.'; // Update result string
                });
              },
              child: Text('Check if 29 is Prime'),
            ),
          ],
        ),
      ),
    );
  }
}
```

```
// The application starts with the main function, which runs the RealFlutter widget.
// RealFlutter is a StatelessWidget that sets up the MaterialApp with a title and home page.
// The PrimeHomePage is a StatefulWidget that manages the state of the prime number generation and checking.
// In the initState method, we call generatePrimes to populate the list of prime numbers up to 100.
// The generatePrimes method uses the PrimeGenerator class from the ninja_prime package to generate primes.
// The result string is updated to display the generated primes.
// The build method constructs the UI, displaying the list of primes and a button to check if a specific number (29) is prime.
// When the button is pressed, it checks if 29 is prime using the PrimeChecker class and updates the result string accordingly.
```
<!-- END_MAIN -->
```

### Summary
In this blog post, we explored the **ninja_prime** Flutter package, which provides essential functionalities for prime number generation and manipulation. We walked through the installation process, platform-specific details, and provided a complete example demonstrating how to use the package effectively. The application flow was explained step-by-step through comments, making it easy to understand how to integrate and utilize the package in your Flutter projects.
<-- START_DESCRIPTION -->

Date Picker Plus Flutter Package
================================

The `date_picker_plus` Flutter package is a powerful and customizable date picker library that allows users to select dates and times in a variety of formats. It provides a simple and intuitive API for developers to integrate date picking functionality into their Flutter applications.

When to Use This Package
------------------------

This package is ideal for applications that require users to select dates or times, such as:

* Scheduling appointments or events
* Setting reminders or notifications
* Selecting dates for travel or booking reservations
* Entering birthdates or anniversaries

Features
--------

* Customizable date picker dialog with various display formats
* Support for selecting single dates, date ranges, or multiple dates
* Optional time picker for selecting specific times
* Localization support for multiple languages
* Compatible with both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
---------------

To use the `date_picker_plus` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  flutter:
    sdk: flutter
  date_picker_plus: ^1.0.0
```
2. Run `flutter pub get` to install the package.
3. Import the package in your Dart file:
```dart
import 'package:date_picker_plus/date_picker_plus.dart';
```
4. Create a `DatePickerPlus` instance and customize its properties as needed:
```dart
DatePickerPlus datePicker = DatePickerPlus(
  initialDate: DateTime.now(),
  firstDate: DateTime(2020),
  lastDate: DateTime(2030),
  dateFormat: 'yyyy-MM-dd',
  locale: Locale('en', 'US'),
);
```
5. Show the date picker dialog using the `showDatePicker` method:
```dart
datePicker.showDatePicker(context);
```
Platform-Specific Details
-------------------------

### Android

* The `date_picker_plus` package uses the Android `DatePickerDialog` class to display the date picker dialog.
* To customize the dialog's appearance, you can use the `android:theme` attribute in your `AndroidManifest.xml` file:
```xml
<application
  ...
  android:theme="@style/MyTheme"
  ...
>
```
### iOS

* The `date_picker_plus` package uses the iOS `UIDatePicker` class to display the date picker dialog.
* To customize the dialog's appearance, you can use the `ios:theme` attribute in your `Info.plist` file:
```xml
<key>UIAppFonts</key>
<array>
  <string>MyTheme</string>
</array>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:date_picker_plus/date_picker_plus.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Date Picker Plus Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  DateTime _selectedDate = DateTime.now();

  void _showDatePicker() {
    DatePickerPlus datePicker = DatePickerPlus(
      initialDate: _selectedDate,
      firstDate: DateTime(2020),
      lastDate: DateTime(2030),
      dateFormat: 'yyyy-MM-dd',
      locale: Locale('en', 'US'),
    );
    datePicker.showDatePicker(context).then((selectedDate) {
      if (selectedDate != null) {
        setState(() {
          _selectedDate = selectedDate;
        });
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Date Picker Plus Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Selected Date: ${_selectedDate.toString()}',
              style: TextStyle(fontSize: 24),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _showDatePicker,
              child: Text('Show Date Picker'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user clicks the "Show Date Picker" button.
// 2. The `_showDatePicker` function is called, which creates a `DatePickerPlus` instance.
// 3. The `showDatePicker` method is called on the `DatePickerPlus` instance, which displays the date picker dialog.
// 4. The user selects a date and clicks "OK".
// 5. The selected date is returned to the `_showDatePicker` function, which updates the `_selectedDate` state variable.
// 6. The UI is updated to display the selected date.
```

<-- END_MAIN -->
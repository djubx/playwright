<-- START_DESCRIPTION -->

# Introduction to pwa_install Flutter Package
=============================================

The `pwa_install` Flutter package allows developers to prompt users to install their Progressive Web App (PWA) on their device. This package provides a simple and efficient way to increase user engagement and provide a native app-like experience.

## When to Use
--------------

Use the `pwa_install` package when you want to:

* Increase user engagement by providing a native app-like experience
* Allow users to install your PWA on their device
* Provide a seamless and efficient installation process

## Features
------------

The `pwa_install` package provides the following features:

* Customizable installation prompt
* Support for Android and iOS devices
* Easy integration with existing Flutter projects

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up pwa_install Package
================================

To use the `pwa_install` package, follow these steps:

### Step 1: Add the Package to Your Project

Add the `pwa_install` package to your `pubspec.yaml` file:
```yml
dependencies:
  pwa_install: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the `pwa_install` package in your Dart file:
```dart
import 'package:pwa_install/pwa_install.dart';
```
### Step 3: Initialize the Package

Initialize the `pwa_install` package in your `main` function:
```dart
void main() {
  runApp(MyApp());
  PwaInstall().init();
}
```
### Step 4: Customize the Installation Prompt (Optional)

You can customize the installation prompt by providing a custom `InstallPrompt` object:
```dart
PwaInstall().init(
  installPrompt: InstallPrompt(
    title: 'Install My App',
    description: 'Install my app to get a better experience',
  ),
);
```
### Platform-Specific Details

* **Android:** The `pwa_install` package uses the Android `PackageManager` to install the PWA. Make sure to add the `android.permission.REQUEST_INSTALL_PACKAGES` permission to your `AndroidManifest.xml` file.
* **iOS:** The `pwa_install` package uses the iOS `Safari` browser to install the PWA. Make sure to add the `NSUserActivityTypes` key to your `Info.plist` file.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:pwa_install/pwa_install.dart';

void main() {
  runApp(MyApp());
  PwaInstall().init(
    installPrompt: InstallPrompt(
      title: 'Install My App',
      description: 'Install my app to get a better experience',
    ),
  );
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'PWA Install Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('PWA Install Demo'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () async {
            // Check if the PWA is installed
            bool isInstalled = await PwaInstall().isInstalled();
            if (!isInstalled) {
              // Show the installation prompt
              PwaInstall().showInstallPrompt();
            } else {
              // PWA is already installed
              print('PWA is already installed');
            }
          },
          child: Text('Install PWA'),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and is presented with a button to install the PWA.
// 2. When the user clicks the button, the app checks if the PWA is already installed.
// 3. If the PWA is not installed, the app shows the installation prompt.
// 4. The user can then choose to install the PWA or cancel the installation.
// 5. If the user chooses to install the PWA, the app installs the PWA and the user is presented with a confirmation message.
// 6. If the user cancels the installation, the app returns to the previous state.

// In summary, the code flows as follows:
// 1. The user is presented with a button to install the PWA.
// 2. The app checks if the PWA is installed and shows the installation prompt if it's not.
// 3. The user can choose to install the PWA or cancel the installation.
// 4. The app installs the PWA and shows a confirmation message if the user chooses to install it.
```

<-- END_MAIN -->
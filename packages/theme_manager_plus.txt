```markdown
<!-- START_DESCRIPTION -->
# Exploring the `theme_manager_plus` Flutter Package

The `theme_manager_plus` package is a powerful tool for managing themes in Flutter applications. It allows developers to easily switch between light and dark themes, customize colors, and manage theme data dynamically. This package is particularly useful for applications that require a user-friendly interface with theme customization options, enhancing the overall user experience.

## When to Use `theme_manager_plus`
- **Dynamic Theme Switching**: If your application needs to support both light and dark themes, this package simplifies the process.
- **User Preferences**: When you want to allow users to select their preferred theme and save it for future sessions.
- **Customizable UI**: If your app requires a highly customizable UI with different color schemes, `theme_manager_plus` provides the flexibility to achieve this.

## Key Features
- **Light and Dark Theme Support**: Easily switch between light and dark themes.
- **Custom Theme Data**: Define and manage custom theme data for your application.
- **Persistent Theme Preferences**: Save user-selected themes using shared preferences.
- **Easy Integration**: Simple setup and integration into existing Flutter applications.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using `theme_manager_plus`

## Installation
To get started with `theme_manager_plus`, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  theme_manager_plus: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run `flutter pub get` to install the package.

## Platform-Specific Configuration
### Android
No specific configuration is required for Android. Just ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file.

### iOS
For iOS, ensure that your deployment target is set to at least 10.0 in your `ios/Podfile`.

## Basic Usage
To use `theme_manager_plus`, you need to initialize it in your main application file. Hereâ€™s how to do it:

1. Import the package:
   ```dart
   import 'package:theme_manager_plus/theme_manager_plus.dart';
   ```

2. Initialize the `ThemeManager` in your `main` function:
   ```dart
   void main() {
     runApp(MyApp());
   }
   ```

3. Create a `MyApp` widget that uses `ThemeManager`:
   ```dart
   class MyApp extends StatelessWidget {
     @override
     Widget build(BuildContext context) {
       return ThemeManager(
         lightTheme: ThemeData.light(),
         darkTheme: ThemeData.dark(),
         initialTheme: ThemeType.light,
         child: MaterialApp(
           title: 'Theme Manager Plus Demo',
           theme: ThemeManager.of(context).currentTheme,
           home: HomeScreen(),
         ),
       );
     }
   }
   ```

4. Create a simple `HomeScreen` widget to demonstrate theme switching:
   ```dart
   class HomeScreen extends StatelessWidget {
     @override
     Widget build(BuildContext context) {
       return Scaffold(
         appBar: AppBar(title: Text('Theme Manager Plus')),
         body: Center(
           child: ElevatedButton(
             onPressed: () {
               // Toggle theme
               ThemeManager.of(context).toggleTheme();
             },
             child: Text('Toggle Theme'),
           ),
         ),
       );
     }
   }
   ```

This setup allows you to switch between light and dark themes with a button click.

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of `theme_manager_plus`

```dart
import 'package:flutter/material.dart';
import 'package:theme_manager_plus/theme_manager_plus.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return ThemeManager(
      // Define light and dark themes
      lightTheme: ThemeData.light(),
      darkTheme: ThemeData.dark(),
      // Set the initial theme
      initialTheme: ThemeType.light,
      child: MaterialApp(
        title: 'Theme Manager Plus Demo',
        theme: ThemeManager.of(context).currentTheme,
        home: HomeScreen(),
      ),
    );
  }
}

class HomeScreen extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Theme Manager Plus')),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Toggle between light and dark themes
            ThemeManager.of(context).toggleTheme();
          },
          child: Text('Toggle Theme'),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function initializes the app by calling runApp with MyApp.
// 2. MyApp sets up the ThemeManager with light and dark themes.
// 3. The MaterialApp uses the current theme from ThemeManager.
// 4. HomeScreen is displayed with a button to toggle the theme.
// 5. When the button is pressed, it calls toggleTheme() from ThemeManager,
//    which switches the theme and rebuilds the UI with the new theme.
```
<!-- END_MAIN -->
``` 

This structured approach provides a comprehensive overview of the `theme_manager_plus` package, guiding developers through its features, setup, and practical usage in a Flutter application.
# CarrotQuest SDK Flutter Package

## <-- START_DESCRIPTION -->

### Description

The `carrotquest_sdk` Flutter package is designed to integrate the CarrotQuest service into your Flutter applications. CarrotQuest is a powerful tool for user engagement, providing features such as in-app messaging, user segmentation, and analytics. This package allows developers to easily implement these features, enhancing user experience and improving retention rates.

### When to Use

You should consider using the `carrotquest_sdk` package when you want to:
- Implement in-app messaging to communicate with users effectively.
- Segment users based on their behavior and preferences.
- Analyze user interactions to improve your app's performance and user engagement.

### Features

- **In-App Messaging**: Send targeted messages to users based on their actions within the app.
- **User Segmentation**: Create segments of users to tailor messages and experiences.
- **Analytics**: Track user interactions and gather insights to inform your app's development.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS platforms.

## <-- END_DESCRIPTION -->

## <-- START_TUTORIAL -->

### Tutorial

#### Installation

To add the `carrotquest_sdk` package to your Flutter project, include it in your `pubspec.yaml` file:

```yaml
dependencies:
  carrotquest_sdk: ^1.0.0  # Check for the latest version on pub.dev
```

Run `flutter pub get` to install the package.

#### Platform-Specific Configuration

**For Android:**
1. Open `android/app/build.gradle` and ensure you have the following configurations:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21 // Ensure this is set to at least 21
    }
}
```

2. Add the necessary permissions in `AndroidManifest.xml`:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
```

**For iOS:**
1. Open `ios/Runner/Info.plist` and add the following:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

2. Ensure your iOS deployment target is set to at least 10.0 in `ios/Podfile`:

```ruby
platform :ios, '10.0'
```

#### Initialization

To initialize the CarrotQuest SDK, you need to call the `initialize` method in your main application file. You will typically do this in the `main()` function or within your app's state management logic.

```dart
import 'package:carrotquest_sdk/carrotquest_sdk.dart';

void main() {
  WidgetsFlutterBinding.ensureInitialized();
  CarrotQuestSdk.initialize('YOUR_API_KEY'); // Replace with your actual API key
  runApp(MyApp());
}
```

## <-- END_TUTORIAL -->

## <-- START_MAIN -->

### Complete Example

Hereâ€™s a complete example of a Flutter application using the `carrotquest_sdk` package:

```dart
import 'package:flutter/material.dart';
import 'package:carrotquest_sdk/carrotquest_sdk.dart';

void main() {
  WidgetsFlutterBinding.ensureInitialized();
  // Initialize the CarrotQuest SDK with your API key
  CarrotQuestSdk.initialize('YOUR_API_KEY'); // Replace with your actual API key
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'CarrotQuest Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: HomePage(),
    );
  }
}

class HomePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('CarrotQuest SDK Example'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            // Trigger an in-app message when the button is pressed
            CarrotQuestSdk.showInAppMessage();
          },
          child: Text('Show In-App Message'),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function initializes the Flutter app and the CarrotQuest SDK with the provided API key.
// 2. MyApp is the root widget that sets up the MaterialApp with a title and theme.
// 3. HomePage is the main screen of the app, containing a button.
// 4. When the button is pressed, it calls the showInAppMessage method from the CarrotQuest SDK,
//    which displays an in-app message to the user.
```

## <-- END_MAIN -->

### Summary

In this example, we created a simple Flutter application that integrates the CarrotQuest SDK. The application initializes the SDK with an API key and provides a button that, when pressed, triggers an in-app message. This demonstrates the core functionality of the `carrotquest_sdk` package, allowing developers to enhance user engagement through targeted messaging.
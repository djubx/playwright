<-- START_DESCRIPTION -->

# Animated Vector Package in Flutter
=====================================

The `animated_vector` package in Flutter allows you to create and display animated vector graphics. It provides a simple way to add animations to your app's UI, making it more engaging and interactive.

### When to Use This Package

You can use this package when you want to add animations to your app's UI, such as:

* Animating logos or icons
* Creating loading animations
* Adding interactive elements to your app's UI

### Features

The `animated_vector` package provides the following features:

* Support for SVG and XML files
* Animation control (play, pause, stop)
* Animation repeat and repeat count
* Support for multiple animations

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Using the Animated Vector Package
=============================================

### Step 1: Add the Package to Your Project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  animated_vector: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:animated_vector/animated_vector.dart';
```
### Step 3: Load the Animation File

Load the animation file (SVG or XML) using the `AnimatedVector` widget:
```dart
AnimatedVector(
  asset: 'assets/animation.svg',
  width: 100,
  height: 100,
)
```
### Step 4: Control the Animation

Use the `AnimatedVectorController` to control the animation:
```dart
AnimatedVectorController _controller;

@override
void initState() {
  super.initState();
  _controller = AnimatedVectorController();
}

@override
Widget build(BuildContext context) {
  return Scaffold(
    body: Center(
      child: AnimatedVector(
        asset: 'assets/animation.svg',
        width: 100,
        height: 100,
        controller: _controller,
      ),
    ),
    floatingActionButton: FloatingActionButton(
      onPressed: () {
        _controller.play();
      },
      child: Icon(Icons.play_arrow),
    ),
  );
}
```
### Platform-Specific Details

* Android: Make sure to add the animation file to the `assets` folder in your Android project.
* iOS: Make sure to add the animation file to the `Resources` folder in your iOS project.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:animated_vector/animated_vector.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Animated Vector Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  AnimatedVectorController _controller;

  @override
  void initState() {
    super.initState();
    _controller = AnimatedVectorController();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Animated Vector Demo'),
      ),
      body: Center(
        child: AnimatedVector(
          asset: 'assets/animation.svg',
          width: 100,
          height: 100,
          controller: _controller,
        ),
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          _controller.play();
        },
        child: Icon(Icons.play_arrow),
      ),
    );
  }
}

// Application flow:
// 1. The app starts and loads the animation file (SVG or XML) using the `AnimatedVector` widget.
// 2. The `AnimatedVectorController` is used to control the animation.
// 3. When the floating action button is pressed, the animation plays.
// 4. The animation repeats indefinitely until the app is closed.
```

// Summary: This code demonstrates the use of the `animated_vector` package in Flutter to display and control an animated vector graphic. The app loads an animation file (SVG or XML) and uses the `AnimatedVectorController` to play the animation when a floating action button is pressed. The animation repeats indefinitely until the app is closed. 

<-- END_MAIN -->
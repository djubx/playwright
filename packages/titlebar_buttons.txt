<-- START_DESCRIPTION -->

# Overview of the titlebar_buttons Flutter Package
=====================================================

The `titlebar_buttons` Flutter package is a useful library that allows developers to customize the title bar buttons on desktop platforms, specifically Windows, macOS, and Linux. This package provides a range of features to enhance the user experience, including custom button icons, tooltips, and callback functions.

### When to Use This Package

This package is ideal for developers who want to create desktop applications with a native look and feel. It's particularly useful when building applications that require custom title bar buttons, such as media players, browsers, or productivity tools.

### Key Features

* Customizable button icons and tooltips
* Support for callback functions on button clicks
* Compatible with Windows, macOS, and Linux platforms
* Easy integration with existing Flutter projects

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the titlebar_buttons Package
=====================================================

To use the `titlebar_buttons` package, follow these steps:

### Step 1: Add the Package to Your Project

Add the following dependency to your `pubspec.yaml` file:
```yml
dependencies:
  titlebar_buttons: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:titlebar_buttons/titlebar_buttons.dart';
```
### Step 3: Create a TitleBarButtons Instance

Create a `TitleBarButtons` instance and pass it to the `TitleBarButtons` widget:
```dart
TitleBarButtons _titleBarButtons = TitleBarButtons();

@override
Widget build(BuildContext context) {
  return Scaffold(
    appBar: AppBar(
      title: Text('Title Bar Buttons Example'),
      actions: [
        TitleBarButtons(
          _titleBarButtons,
          // Custom button icons and tooltips
          buttons: [
            TitleBarButton(
              icon: Icon(Icons.minimize),
              tooltip: 'Minimize',
              onPressed: () {
                // Minimize the window
              },
            ),
            TitleBarButton(
              icon: Icon(Icons.close),
              tooltip: 'Close',
              onPressed: () {
                // Close the window
              },
            ),
          ],
        ),
      ],
    ),
  );
}
```
### Platform-Specific Details

* On Windows, the `TitleBarButtons` widget will automatically detect the window's title bar and add the custom buttons.
* On macOS, you need to add the `NSWindow` instance to the `TitleBarButtons` constructor:
```dart
TitleBarButtons _titleBarButtons = TitleBarButtons(
  window: NSWindow(),
);
```
* On Linux, you need to add the `GtkWidget` instance to the `TitleBarButtons` constructor:
```dart
TitleBarButtons _titleBarButtons = TitleBarButtons(
  window: GtkWidget(),
);
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:titlebar_buttons/titlebar_buttons.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Title Bar Buttons Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  TitleBarButtons _titleBarButtons = TitleBarButtons();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Title Bar Buttons Example'),
        actions: [
          TitleBarButtons(
            _titleBarButtons,
            // Custom button icons and tooltips
            buttons: [
              TitleBarButton(
                icon: Icon(Icons.minimize),
                tooltip: 'Minimize',
                onPressed: () {
                  // Minimize the window
                  print('Minimize button pressed');
                },
              ),
              TitleBarButton(
                icon: Icon(Icons.close),
                tooltip: 'Close',
                onPressed: () {
                  // Close the window
                  print('Close button pressed');
                },
              ),
            ],
          ),
        ],
      ),
      body: Center(
        child: Text('Title Bar Buttons Example'),
      ),
    );
  }
}

// Application flow:
// 1. The user runs the app and the `MyApp` widget is created.
// 2. The `MyApp` widget builds the `MyHomePage` widget.
// 3. The `MyHomePage` widget creates a `TitleBarButtons` instance and passes it to the `TitleBarButtons` widget.
// 4. The `TitleBarButtons` widget adds the custom buttons to the title bar.
// 5. When the user clicks a button, the corresponding callback function is called.
// 6. The callback function prints a message to the console indicating which button was pressed.
```

// Final summary:
// The code creates a Flutter app with a custom title bar and two buttons: minimize and close.
// When the user clicks a button, the corresponding callback function is called and a message is printed to the console.
// The app demonstrates how to use the `titlebar_buttons` package to customize the title bar and add custom buttons.

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Easy URL Launcher Flutter Package
=====================================

The `easy_url_launcher` Flutter package provides a simple and efficient way to launch URLs in your Flutter applications. It supports both Android and iOS platforms, allowing you to open URLs in the default browser or within the app itself.

### When to Use

This package is useful when you need to:

* Open a website or webpage from your app
* Launch a URL scheme (e.g., `mailto:`, `tel:`, etc.)
* Handle URL redirects and errors

### Features

* Supports Android and iOS platforms
* Launches URLs in the default browser or within the app
* Handles URL redirects and errors
* Provides a simple and easy-to-use API

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setup and Usage
==================

To use the `easy_url_launcher` package, follow these steps:

### Step 1: Add the Package to Your Project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  easy_url_launcher: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:easy_url_launcher/easy_url_launcher.dart';
```
### Step 3: Launch a URL

Use the `launchUrl` function to launch a URL:
```dart
await launchUrl('https://www.example.com');
```
You can also specify additional options, such as the browser to use:
```dart
await launchUrl('https://www.example.com', browser: Browser.chrome);
```
### Platform-Specific Details

* Android: The package uses the `Intent` class to launch URLs. Make sure to add the `android.permission.INTERNET` permission to your `AndroidManifest.xml` file.
* iOS: The package uses the `UIApplication` class to launch URLs. Make sure to add the `NSAppTransportSecurity` key to your `Info.plist` file.

### Configurations and Optimizations

* You can customize the browser to use by setting the `browser` property.
* You can handle URL redirects and errors by setting the `onRedirect` and `onError` properties.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:easy_url_launcher/easy_url_launcher.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Easy URL Launcher Demo',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Easy URL Launcher Demo'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              ElevatedButton(
                onPressed: () async {
                  // Launch a URL in the default browser
                  await launchUrl('https://www.example.com');
                },
                child: Text('Launch URL in Default Browser'),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () async {
                  // Launch a URL in Chrome
                  await launchUrl('https://www.example.com', browser: Browser.chrome);
                },
                child: Text('Launch URL in Chrome'),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () async {
                  // Handle URL redirects and errors
                  await launchUrl('https://www.example.com', onRedirect: (url) {
                    print('Redirected to: $url');
                  }, onError: (error) {
                    print('Error: $error');
                  });
                },
                child: Text('Handle URL Redirects and Errors'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user clicks on one of the buttons to launch a URL.
// 2. The `launchUrl` function is called with the specified URL and options.
// 3. The package launches the URL in the default browser or the specified browser.
// 4. If the URL is redirected, the `onRedirect` callback is called with the new URL.
// 5. If an error occurs, the `onError` callback is called with the error message.
// 6. The user can then interact with the launched URL in the browser.

// Final summary: This code demonstrates how to use the `easy_url_launcher` package to launch URLs in a Flutter application. It shows how to launch URLs in the default browser, handle URL redirects and errors, and customize the browser to use.
```

<-- END_MAIN -->
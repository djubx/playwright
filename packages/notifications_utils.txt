```markdown
<!-- START_DESCRIPTION -->
# Notifications Utils Flutter Package

The `notifications_utils` package is a powerful tool for Flutter developers looking to implement notifications in their applications. It simplifies the process of creating, displaying, and managing notifications across both Android and iOS platforms. This package is particularly useful for applications that require user engagement through alerts, reminders, or updates.

## When to Use This Package
- **User Engagement**: When you want to keep users informed about important events or updates.
- **Reminders**: For applications that need to send reminders for tasks, appointments, or deadlines.
- **Real-time Updates**: When your app needs to notify users about real-time events, such as messages or alerts.

## Key Features
- **Cross-Platform Support**: Works seamlessly on both Android and iOS.
- **Customizable Notifications**: Allows for rich notifications with images, sounds, and actions.
- **Scheduled Notifications**: Supports scheduling notifications for future events.
- **Notification Channels**: For Android, it supports notification channels to categorize notifications.
- **Easy Integration**: Simple API that makes it easy to integrate into existing Flutter applications.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Notifications Utils

In this tutorial, we will walk through the setup process for the `notifications_utils` package and demonstrate how to use it effectively in your Flutter application.

## Step 1: Adding the Package to Your Project
To get started, add the `notifications_utils` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  notifications_utils: ^latest_version
```

Make sure to replace `latest_version` with the most recent version available on [pub.dev](https://pub.dev/packages/notifications_utils).

## Step 2: Platform-Specific Configuration

### Android Configuration
1. Open `AndroidManifest.xml` located in `android/app/src/main/`.
2. Add the following permissions inside the `<manifest>` tag:

```xml
<uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED"/>
<uses-permission android:name="android.permission.VIBRATE"/>
```

3. Ensure you have the following service declaration inside the `<application>` tag:

```xml
<service android:name="com.dexterous.flutterlocalnotifications.receivers.NotificationReceiver"/>
```

### iOS Configuration
1. Open `Info.plist` located in `ios/Runner/`.
2. Add the following keys to request permission for notifications:

```xml
<key>UIBackgroundModes</key>
<array>
    <string>fetch</string>
    <string>remote-notification</string>
</array>
<key>NSUserNotificationAlertStyle</key>
<string>alert</string>
```

## Step 3: Using the Package
Now that we have set up the package, we can start using it in our Flutter application. Below is a simple example of how to create and display a notification.

```dart
import 'package:flutter/material.dart';
import 'package:notifications_utils/notifications_utils.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: NotificationDemo(),
    );
  }
}

class NotificationDemo extends StatefulWidget {
  @override
  _NotificationDemoState createState() => _NotificationDemoState();
}

class _NotificationDemoState extends State<NotificationDemo> {
  @override
  void initState() {
    super.initState();
    // Initialize the notifications
    NotificationsUtils.initialize();
  }

  void _showNotification() {
    NotificationsUtils.showNotification(
      title: 'Hello!',
      body: 'This is a notification from your Flutter app.',
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Notifications Demo')),
      body: Center(
        child: ElevatedButton(
          onPressed: _showNotification,
          child: Text('Show Notification'),
        ),
      ),
    );
  }
}
```

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of Notifications Utils

Here is a complete example of a Flutter application that demonstrates the key features of the `notifications_utils` package.

```dart
import 'package:flutter/material.dart';
import 'package:notifications_utils/notifications_utils.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: NotificationDemo(),
    );
  }
}

class NotificationDemo extends StatefulWidget {
  @override
  _NotificationDemoState createState() => _NotificationDemoState();
}

class _NotificationDemoState extends State<NotificationDemo> {
  @override
  void initState() {
    super.initState();
    // Initialize the notifications when the app starts
    NotificationsUtils.initialize();
  }

  void _showNotification() {
    // Show a simple notification with a title and body
    NotificationsUtils.showNotification(
      title: 'Hello!',
      body: 'This is a notification from your Flutter app.',
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: Text('Notifications Demo')),
      body: Center(
        child: ElevatedButton(
          onPressed: _showNotification, // Trigger notification on button press
          child: Text('Show Notification'),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the `main` function, which runs `MyApp`.
// 2. `MyApp` builds a MaterialApp with `NotificationDemo` as the home widget.
// 3. In `NotificationDemo`, the `initState` method initializes the notifications.
// 4. When the user presses the "Show Notification" button, the `_showNotification` method is called.
// 5. This method triggers a notification with a title and body, which is displayed to the user.
```
<!-- END_MAIN -->
``` 

This structured approach provides a comprehensive overview of the `notifications_utils` package, guiding developers through its features, setup, and practical usage in a Flutter application.
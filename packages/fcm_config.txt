```markdown
<!-- START_DESCRIPTION -->
# FCM_Config Flutter Package

The `fcm_config` Flutter package is a powerful tool designed to simplify the integration of Firebase Cloud Messaging (FCM) into Flutter applications. FCM is a cross-platform messaging solution that allows you to send notifications and messages to users across different devices. This package provides a streamlined way to configure and manage FCM in your Flutter apps, making it easier to implement push notifications and real-time messaging features.

## When to Use FCM_Config

You should consider using the `fcm_config` package when:
- You want to implement push notifications in your Flutter application.
- You need to send real-time messages to users.
- You are looking for a simple and efficient way to manage FCM configurations.

## Features

- **Easy Setup**: The package provides a straightforward setup process for integrating FCM into your Flutter app.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS platforms.
- **Customizable Notifications**: Allows you to customize notification messages and their appearance.
- **Token Management**: Automatically handles FCM token generation and management.
- **Background Message Handling**: Supports handling messages when the app is in the background or terminated.

With these features, the `fcm_config` package is an excellent choice for developers looking to enhance their Flutter applications with push notifications and messaging capabilities.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up FCM_Config in Your Flutter App

In this tutorial, we will walk through the process of setting up the `fcm_config` package in a Flutter application. We will cover platform-specific details for both Android and iOS.

## Step 1: Add Dependency

First, add the `fcm_config` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  fcm_config: ^latest_version
```

Make sure to replace `^latest_version` with the latest version of the package.

## Step 2: Configure Android

1. **Update AndroidManifest.xml**: Open `android/app/src/main/AndroidManifest.xml` and add the following permissions and services:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
<uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED"/>

<application>
    ...
    <service
        android:name="com.google.firebase.messaging.FirebaseMessagingService"
        android:exported="false">
        <intent-filter>
            <action android:name="com.google.firebase.MESSAGING_EVENT"/>
        </intent-filter>
    </service>
</application>
```

2. **Add Firebase Configuration**: Download the `google-services.json` file from your Firebase project and place it in the `android/app` directory.

3. **Update build.gradle**: In `android/build.gradle`, add the Google services classpath:

```groovy
buildscript {
    dependencies {
        ...
        classpath 'com.google.gms:google-services:4.3.10' // Check for the latest version
    }
}
```

In `android/app/build.gradle`, apply the Google services plugin at the bottom:

```groovy
apply plugin: 'com.google.gms.google-services'
```

## Step 3: Configure iOS

1. **Update Info.plist**: Open `ios/Runner/Info.plist` and add the following keys:

```xml
<key>FirebaseAppDelegateProxyEnabled</key>
<false/>
<key>UIBackgroundModes</key>
<array>
    <string>fetch</string>
    <string>remote-notification</string>
</array>
```

2. **Add Firebase Configuration**: Download the `GoogleService-Info.plist` file from your Firebase project and place it in the `ios/Runner` directory.

3. **Update Podfile**: Ensure your `ios/Podfile` has the platform set to at least 10.0:

```ruby
platform :ios, '10.0'
```

Then run `pod install` in the `ios` directory.

## Step 4: Initialize FCM_Config

In your main Dart file, initialize the `fcm_config` package:

```dart
import 'package:flutter/material.dart';
import 'package:fcm_config/fcm_config.dart';

void main() {
  WidgetsFlutterBinding.ensureInitialized();
  FCMConfig.initialize(); // Initialize FCM
  runApp(MyApp());
}
```

Now you are ready to use FCM in your Flutter application!

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of FCM_Config in a Flutter App

```dart
import 'package:flutter/material.dart';
import 'package:fcm_config/fcm_config.dart';

void main() {
  WidgetsFlutterBinding.ensureInitialized(); // Ensures that the Flutter engine is initialized
  FCMConfig.initialize(); // Initializes FCM for the app
  runApp(MyApp()); // Runs the main application
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'FCM Config Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: HomeScreen(), // Sets the home screen of the app
    );
  }
}

class HomeScreen extends StatefulWidget {
  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  String _message = "No messages yet"; // Variable to hold the message

  @override
  void initState() {
    super.initState();
    // Listen for incoming messages
    FCMConfig.onMessage.listen((RemoteMessage message) {
      setState(() {
        _message = message.notification?.title ?? "New Message"; // Update message on receiving a notification
      });
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('FCM Config Example'),
      ),
      body: Center(
        child: Text(_message), // Display the message
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          // Simulate sending a message
          FCMConfig.sendMessage("Hello from FCM!"); // Send a test message
        },
        tooltip: 'Send Message',
        child: Icon(Icons.send),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts and initializes FCM.
// 2. The HomeScreen is displayed with a default message.
// 3. When a notification is received, the message is updated and displayed on the screen.
// 4. The floating action button simulates sending a message using FCMConfig.sendMessage().
```
<!-- END_MAIN -->
```

This structured blog post provides a comprehensive overview of the `fcm_config` Flutter package, including its features, setup instructions, and a complete example with detailed comments explaining the application flow.
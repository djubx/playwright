<-- START_DESCRIPTION -->

Baseflow Plugin Template
========================

The `baseflow_plugin_template` package is a Flutter plugin template that provides a basic structure for creating platform-specific plugins. It allows developers to create plugins that can be used across multiple platforms, including Android and iOS.

When to Use This Package
------------------------

This package is useful when you need to create a plugin that requires platform-specific code, such as:

* Accessing device hardware (e.g., camera, GPS)
* Using platform-specific APIs (e.g., Android's Firebase Cloud Messaging)
* Integrating with native libraries (e.g., OpenCV)

Features
--------

* Provides a basic structure for creating platform-specific plugins
* Supports Android and iOS platforms
* Includes examples for using the plugin in a Flutter app

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
---------------

### Step 1: Add the Package to Your Flutter Project

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  baseflow_plugin_template: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Create a New Plugin Class

Create a new file called `real_flutter_plugin.dart` and add the following code:
```dart
import 'package:baseflow_plugin_template/baseflow_plugin_template.dart';

class RealFlutterPlugin extends BaseFlowPlugin {
  @override
  String get platformVersion => '1.0.0';
}
```
This class extends the `BaseFlowPlugin` class and provides a basic implementation for the plugin.

### Step 3: Register the Plugin

In your `main.dart` file, add the following code:
```dart
import 'package:flutter/material.dart';
import 'package:real_flutter_plugin/real_flutter_plugin.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Real Flutter Plugin Example'),
        ),
        body: Center(
          child: Text('Platform Version: ${RealFlutterPlugin().platformVersion}'),
        ),
      ),
    );
  }
}
```
This code registers the plugin and uses it to display the platform version.

### Platform-Specific Details

#### Android

To use the plugin on Android, you need to add the following code to your `AndroidManifest.xml` file:
```xml
<application>
  <meta-data
    android:name="com.baseflow.plugin.template"
    android:value="1.0.0" />
</application>
```
This code registers the plugin with the Android system.

#### iOS

To use the plugin on iOS, you need to add the following code to your `Info.plist` file:
```xml
<key>BaseFlowPluginTemplate</key>
<string>1.0.0</string>
```
This code registers the plugin with the iOS system.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:real_flutter_plugin/real_flutter_plugin.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Real Flutter Plugin Example'),
        ),
        body: Center(
          child: Text('Platform Version: ${RealFlutterPlugin().platformVersion}'),
        ),
      ),
    );
  }
}

// The following comments explain the flow of the application:

// 1. The user runs the app, which starts the `main` function.
// 2. The `main` function creates a new instance of the `MyApp` widget.
// 3. The `MyApp` widget builds a `MaterialApp` widget, which is the root widget of the app.
// 4. The `MaterialApp` widget builds a `Scaffold` widget, which provides a basic layout for the app.
// 5. The `Scaffold` widget builds an `AppBar` widget, which displays the title of the app.
// 6. The `Scaffold` widget also builds a `Center` widget, which centers its child widget.
// 7. The `Center` widget builds a `Text` widget, which displays the platform version.
// 8. The platform version is obtained by calling the `platformVersion` property of the `RealFlutterPlugin` class.
// 9. The `RealFlutterPlugin` class extends the `BaseFlowPlugin` class and provides a basic implementation for the plugin.
// 10. The `BaseFlowPlugin` class provides a basic structure for creating platform-specific plugins.

// In summary, the app uses the `RealFlutterPlugin` class to display the platform version, which is obtained by calling the `platformVersion` property of the plugin.
```

<-- END_MAIN -->
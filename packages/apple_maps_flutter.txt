<-- START_DESCRIPTION -->

Apple Maps Flutter Package
==========================

The `apple_maps_flutter` package is a Flutter plugin that allows you to embed Apple Maps in your Flutter application. This package is ideal for developers who want to use Apple Maps on iOS devices, as it provides a native map experience.

When to Use
------------

You should use this package when:

* You want to use Apple Maps on iOS devices.
* You want to provide a native map experience on iOS devices.
* You want to take advantage of Apple Maps' features, such as 3D buildings and indoor maps.

Features
--------

The `apple_maps_flutter` package provides the following features:

* Embed Apple Maps in your Flutter application.
* Customize the map's appearance, such as changing the map type and adding markers.
* Handle user interactions, such as tapping on markers and zooming in/out.
* Get the user's current location and display it on the map.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
----------------

To use the `apple_maps_flutter` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  apple_maps_flutter: ^0.1.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:apple_maps_flutter/apple_maps_flutter.dart';
```
### Step 3: Create an Apple Maps Widget

Create an `AppleMap` widget and add it to your widget tree:
```dart
AppleMap(
  onMapCreated: (AppleMapController controller) {
    // You can use the controller to customize the map's appearance
  },
  initialCameraPosition: CameraPosition(
    target: LatLng(37.7749, -122.4194),
    zoom: 12,
  ),
)
```
### Platform-Specific Details

#### iOS

To use Apple Maps on iOS, you need to add the following lines to your `Info.plist` file:
```xml
<key>NSLocationWhenInUseUsageDescription</key>
<string>This app needs access to your location to display it on the map</string>
<key>NSLocationAlwaysUsageDescription</key>
<string>This app needs access to your location to display it on the map</string>
```
#### Android

Apple Maps is not available on Android devices. If you want to use a map on Android devices, you should use a different package, such as `google_maps_flutter`.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:apple_maps_flutter/apple_maps_flutter.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  AppleMapController _mapController;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Apple Maps Flutter'),
      ),
      body: AppleMap(
        onMapCreated: (AppleMapController controller) {
          // You can use the controller to customize the map's appearance
          _mapController = controller;
        },
        initialCameraPosition: CameraPosition(
          target: LatLng(37.7749, -122.4194),
          zoom: 12,
        ),
        markers: {
          Marker(
            markerId: MarkerId('marker1'),
            position: LatLng(37.7749, -122.4194),
            infoWindow: InfoWindow(
              title: 'Marker 1',
              snippet: 'This is marker 1',
            ),
          ),
        },
        onTap: (LatLng position) {
          // You can handle user interactions, such as tapping on the map
          print('User tapped on the map at position: $position');
        },
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () {
          // You can use the controller to get the user's current location
          _mapController.getCurrentLocation().then((LatLng position) {
            print('User\'s current location: $position');
          });
        },
        tooltip: 'Get current location',
        child: Icon(Icons.location_searching),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and is presented with an Apple Maps widget.
// 2. The user can interact with the map, such as zooming in/out and tapping on markers.
// 3. When the user taps on a marker, an info window is displayed with information about the marker.
// 4. The user can also tap on the floating action button to get their current location.
// 5. The app uses the Apple Maps controller to customize the map's appearance and handle user interactions.
```

<-- END_MAIN -->
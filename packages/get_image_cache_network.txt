<-- START_DESCRIPTION -->

# get_image_cache_network Flutter Package
=====================================

The `get_image_cache_network` Flutter package is a powerful tool for caching and retrieving images from the network. It provides a simple and efficient way to manage image caching in your Flutter applications.

### When to Use This Package

This package is ideal for applications that require frequent image loading from the network, such as:

* Social media apps with image-heavy feeds
* E-commerce apps with product images
* News apps with image-rich articles

### Features

* Caches images in memory and on disk for fast retrieval
* Supports HTTP and HTTPS protocols
* Handles image loading and caching asynchronously
* Provides a simple API for loading and caching images

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `get_image_cache_network` package, follow these steps:

### Step 1: Add the Package to Your `pubspec.yaml` File

```yml
dependencies:
  flutter:
    sdk: flutter
  get_image_cache_network: ^1.0.0
```

### Step 2: Import the Package in Your Dart File

```dart
import 'package:get_image_cache_network/get_image_cache_network.dart';
```

### Step 3: Initialize the Package

```dart
void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Image Cache Demo',
      home: RealFlutter(),
    );
  }
}
```

### Platform-Specific Details

* Android: No additional configuration required.
* iOS: Add the following lines to your `Info.plist` file:
```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```

### Optimizations

* Use the `cacheDuration` property to set the cache duration for images.
* Use the `maxCacheSize` property to set the maximum cache size.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:get_image_cache_network/get_image_cache_network.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  String _imageUrl = 'https://picsum.photos/200/300';

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Image Cache Demo'),
      ),
      body: Center(
        child: GetImageCacheNetwork(
          imageUrl: _imageUrl,
          cacheDuration: Duration(days: 7),
          maxCacheSize: 100,
          placeholder: Center(child: CircularProgressIndicator()),
          errorWidget: Center(child: Text('Error loading image')),
        ),
      ),
    );
  }
}

// Application flow:
// 1. The `RealFlutter` widget is created and initialized.
// 2. The `GetImageCacheNetwork` widget is used to load the image from the network.
// 3. The image is cached in memory and on disk for fast retrieval.
// 4. The `cacheDuration` property is set to 7 days, meaning the image will be cached for 7 days.
// 5. The `maxCacheSize` property is set to 100, meaning the maximum cache size is 100.
// 6. The `placeholder` property is set to a `CircularProgressIndicator`, which is displayed while the image is loading.
// 7. The `errorWidget` property is set to a `Text` widget, which is displayed if there is an error loading the image.
```

// Final summary:
// The `get_image_cache_network` package is used to cache and retrieve images from the network.
// The `RealFlutter` widget is created and initialized, and the `GetImageCacheNetwork` widget is used to load the image from the network.
// The image is cached in memory and on disk for fast retrieval, and the cache duration and maximum cache size are set.
// The placeholder and error widgets are set to display while the image is loading and if there is an error loading the image, respectively.

<-- END_MAIN -->
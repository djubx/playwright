<-- START_DESCRIPTION -->

# Expire Cache Flutter Package
================================

The `expire_cache` Flutter package is a useful tool for managing cache in Flutter applications. It provides a simple and efficient way to store and retrieve data in the cache, with the added feature of automatic cache expiration.

## When to Use This Package
---------------------------

This package is particularly useful when you need to store data that has a limited lifespan, such as:

* API responses that need to be updated after a certain period of time
* User data that needs to be refreshed after a certain interval
* Temporary data that needs to be deleted after a certain period of time

## Features
------------

* Automatic cache expiration: set a time-to-live (TTL) for each cache entry, and the package will automatically remove the entry when the TTL expires.
* Simple and efficient cache storage and retrieval
* Support for multiple cache stores: store cache data in memory, on disk, or in a secure storage.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Expire Cache Package
--------------------------------------

To use the `expire_cache` package in your Flutter application, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  expire_cache: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:expire_cache/expire_cache.dart';
```
### Step 3: Initialize the Cache Store

Initialize the cache store in your application:
```dart
void main() {
  // Initialize the cache store
  ExpireCacheStore cacheStore = ExpireCacheStore();

  // ...
}
```
### Step 4: Store and Retrieve Cache Data

Store and retrieve cache data using the `put` and `get` methods:
```dart
// Store cache data
cacheStore.put('key', 'value', ttl: Duration(hours: 1));

// Retrieve cache data
String value = cacheStore.get('key');
```
### Platform-Specific Details

* On Android, the cache store uses the `SharedPreferences` class to store cache data.
* On iOS, the cache store uses the `NSUserDefaults` class to store cache data.

### Configurations and Optimizations

* You can configure the cache store to use a different storage mechanism, such as a secure storage or a disk-based storage.
* You can optimize the cache store by setting a maximum size limit or a cache expiration policy.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:expire_cache/expire_cache.dart';

void main() {
  // Initialize the cache store
  ExpireCacheStore cacheStore = ExpireCacheStore();

  runApp(MyApp(cacheStore: cacheStore));
}

class MyApp extends StatelessWidget {
  final ExpireCacheStore cacheStore;

  MyApp({this.cacheStore});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Expire Cache Demo',
      home: MyHomePage(cacheStore: cacheStore),
    );
  }
}

class MyHomePage extends StatefulWidget {
  final ExpireCacheStore cacheStore;

  MyHomePage({this.cacheStore});

  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  String _value = '';

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Expire Cache Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Value: $_value',
              style: TextStyle(fontSize: 24),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                // Store cache data
                widget.cacheStore.put('key', 'Hello, World!', ttl: Duration(hours: 1));
              },
              child: Text('Store Cache Data'),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: () {
                // Retrieve cache data
                String value = widget.cacheStore.get('key');
                setState(() {
                  _value = value;
                });
              },
              child: Text('Retrieve Cache Data'),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user clicks the "Store Cache Data" button, which stores the string "Hello, World!" in the cache with a TTL of 1 hour.
// 2. The user clicks the "Retrieve Cache Data" button, which retrieves the cached value and displays it on the screen.
// 3. If the user waits for more than 1 hour and then clicks the "Retrieve Cache Data" button again, the cached value will have expired and will no longer be displayed.
// 4. The user can repeat steps 1-3 to see the cache expiration in action.

// This code demonstrates the basic usage of the expire_cache package, including storing and retrieving cache data, and setting a TTL for cache expiration.

// The final summary is that this code provides a simple and efficient way to manage cache in Flutter applications, with the added feature of automatic cache expiration.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

Language Builder Flutter Package
================================

The `language_builder` package is a powerful tool for building and managing multilingual applications in Flutter. It provides a simple and efficient way to handle translations, formatting, and pluralization, making it an essential package for any app that requires language support.

When to Use
------------

*   When building a multilingual application that requires support for multiple languages.
*   When you need to handle translations, formatting, and pluralization in your app.
*   When you want to separate your app's language data from its code.

Features
--------

*   **Translation Management**: Easily manage translations for multiple languages.
*   **Formatting**: Format dates, numbers, and currencies according to the selected language.
*   **Pluralization**: Handle plural forms of words and phrases.
*   **Language Selection**: Allow users to select their preferred language.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Configuration
-----------------------

### Step 1: Add the Package to Your Project

Add the `language_builder` package to your `pubspec.yaml` file:

```yml
dependencies:
  language_builder: ^1.0.0
```

Then, run `flutter pub get` to install the package.

### Step 2: Configure the Package

Create a new file called `languages.json` in the `assets` directory:

```json
{
  "en": {
    "hello": "Hello",
    "goodbye": "Goodbye"
  },
  "fr": {
    "hello": "Bonjour",
    "goodbye": "Au revoir"
  }
}
```

This file contains the translations for each language.

### Step 3: Initialize the Package

In your `main.dart` file, import the package and initialize it:

```dart
import 'package:language_builder/language_builder.dart';

void main() {
  LanguageBuilder.initialize(
    languages: {
      'en': 'assets/languages/en.json',
      'fr': 'assets/languages/fr.json',
    },
  );
  runApp(MyApp());
}
```

### Step 4: Use the Package

To use the package, simply call the `translate` function:

```dart
Text(LanguageBuilder.translate('hello'));
```

This will display the translated text for the current language.

Platform-Specific Details
-------------------------

### Android

For Android, you need to add the following code to your `AndroidManifest.xml` file:

```xml
<application
  ...
  android:supportsRtl="true"
  ...
>
```

This enables right-to-left language support.

### iOS

For iOS, you need to add the following code to your `Info.plist` file:

```xml
<key>CFBundleDevelopmentRegion</key>
<string>en</string>
```

This sets the default language to English.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:language_builder/language_builder.dart';

void main() {
  LanguageBuilder.initialize(
    languages: {
      'en': 'assets/languages/en.json',
      'fr': 'assets/languages/fr.json',
    },
  );
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  String _selectedLanguage = 'en';

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Language Builder Demo',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Language Builder Demo'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              Text(
                LanguageBuilder.translate('hello'),
                style: TextStyle(fontSize: 24),
              ),
              SizedBox(height: 20),
              DropdownButton(
                value: _selectedLanguage,
                onChanged: (value) {
                  setState(() {
                    _selectedLanguage = value;
                    LanguageBuilder.selectLanguage(value);
                  });
                },
                items: [
                  DropdownMenuItem(
                    child: Text('English'),
                    value: 'en',
                  ),
                  DropdownMenuItem(
                    child: Text('French'),
                    value: 'fr',
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user selects a language from the dropdown menu.
// 2. The selected language is stored in the _selectedLanguage variable.
// 3. The LanguageBuilder.selectLanguage function is called to update the language.
// 4. The Text widget is updated with the translated text for the selected language.
// 5. The user sees the translated text on the screen.

// Summary:
// The code flows by first initializing the LanguageBuilder package with the languages.
// Then, the user selects a language from the dropdown menu, which updates the language and displays the translated text.
```

<-- END_MAIN -->
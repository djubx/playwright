```markdown
<!-- START_DESCRIPTION -->
# Web Multiple Tab Detector Flutter Package

The `web_multiple_tab_detector` Flutter package is a powerful tool designed to help developers manage and detect multiple tabs of a web application. This package is particularly useful in scenarios where you want to ensure that users are not opening multiple instances of your web app, which can lead to data inconsistency or unexpected behavior.

## When to Use This Package

- **User Session Management**: If your application requires a single active session per user, this package can help you detect when a user opens a new tab or window.
- **Data Integrity**: In applications where data is being modified, preventing multiple tabs can help maintain data integrity.
- **User Experience**: To provide a seamless user experience by alerting users when they attempt to open multiple tabs.

## Features

- **Tab Detection**: Automatically detects when a new tab is opened for the same web application.
- **Custom Callbacks**: Allows developers to define custom actions when a new tab is detected.
- **Cross-Platform Support**: Works seamlessly on both Android and iOS platforms.

By leveraging the `web_multiple_tab_detector`, developers can enhance their applications' reliability and user experience significantly.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using the Web Multiple Tab Detector

## Step 1: Adding the Dependency

To get started, you need to add the `web_multiple_tab_detector` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  web_multiple_tab_detector: ^1.0.0  # Check for the latest version on pub.dev
```

## Step 2: Importing the Package

In your Dart file, import the package:

```dart
import 'package:web_multiple_tab_detector/web_multiple_tab_detector.dart';
```

## Step 3: Initializing the Detector

You need to initialize the `WebMultipleTabDetector` in your main application class. Hereâ€™s how to do it:

```dart
void main() {
  runApp(MyApp());
  WebMultipleTabDetector.initialize(
    onNewTabDetected: () {
      // Custom action when a new tab is detected
      print("New tab detected!");
    },
  );
}
```

## Platform-Specific Configuration

### Android

For Android, ensure that your `AndroidManifest.xml` file has the necessary permissions. You may need to add the following:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
```

### iOS

For iOS, ensure that your `Info.plist` file allows for the necessary configurations. You might need to add:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

## Step 4: Using the Detector

Once initialized, the `WebMultipleTabDetector` will automatically handle tab detection. You can customize the behavior by providing your own callback functions.

```dart
WebMultipleTabDetector.initialize(
  onNewTabDetected: () {
    // Handle new tab detection
    print("A new tab has been opened!");
  },
);
```

This setup ensures that your application can respond appropriately when a user opens multiple tabs.

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of Using Web Multiple Tab Detector

```dart
import 'package:flutter/material.dart';
import 'package:web_multiple_tab_detector/web_multiple_tab_detector.dart';

void main() {
  // Initialize the app and the tab detector
  runApp(RealFlutterApp());
  WebMultipleTabDetector.initialize(
    onNewTabDetected: () {
      // Custom action when a new tab is detected
      print("New tab detected!");
    },
  );
}

class RealFlutterApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Web Multiple Tab Detector Example',
      home: HomePage(),
    );
  }
}

class HomePage extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Web Multiple Tab Detector'),
      ),
      body: Center(
        child: Text(
          'Open this app in multiple tabs to see the detector in action!',
          textAlign: TextAlign.center,
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The main function initializes the Flutter app and the WebMultipleTabDetector.
// 2. The WebMultipleTabDetector is set up with a callback function that prints a message when a new tab is detected.
// 3. The RealFlutterApp class builds the main application structure, including a title and a home page.
// 4. The HomePage class displays a simple message to the user, instructing them to open multiple tabs.
// 5. When a new tab is opened, the callback function triggers, and the message "New tab detected!" is printed to the console.
```
<!-- END_MAIN -->
``` 

This structured blog provides a comprehensive overview of the `web_multiple_tab_detector` package, guiding users through its features, setup, and practical implementation in a Flutter application.
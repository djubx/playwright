<-- START_DESCRIPTION -->

# Device Details Flutter Package
=====================================

The `device_details_flutter` package provides an easy-to-use interface for accessing device information in Flutter applications. This package is useful when you need to retrieve details about the device, such as its model, operating system, screen size, and more.

### When to Use This Package

You can use this package in various scenarios, such as:

* Analytics and logging: Collect device information to analyze user behavior and troubleshoot issues.
* Device-specific features: Enable or disable features based on device capabilities, such as camera or GPS support.
* Personalization: Tailor your app's experience to the user's device, such as adapting to different screen sizes.

### Features

The `device_details_flutter` package provides access to the following device information:

* Device model and manufacturer
* Operating system and version
* Screen size and resolution
* Device type (phone, tablet, etc.)
* CPU architecture and number of cores
* Memory and storage information

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
---------------------------

To use the `device_details_flutter` package, follow these steps:

### 1. Add the Package to Your `pubspec.yaml` File

```yml
dependencies:
  device_details_flutter: ^1.0.0
```

### 2. Import the Package in Your Dart File

```dart
import 'package:device_details_flutter/device_details_flutter.dart';
```

### 3. Initialize the Package

```dart
void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  void initState() {
    super.initState();
    DeviceDetails.init();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Device Details'),
      ),
      body: Center(
        child: Text('Device Details'),
      ),
    );
  }
}
```

### Platform-Specific Details

* Android: Make sure to add the `android.permission.READ_PHONE_STATE` permission to your `AndroidManifest.xml` file.
* iOS: No additional setup is required.

### Required Configurations and Optimizations

* Make sure to handle any errors that may occur when retrieving device information.
* Consider caching device information to improve performance.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:device_details_flutter/device_details_flutter.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: RealFlutter(),
    );
  }
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  String _deviceModel = '';
  String _operatingSystem = '';
  String _screenSize = '';
  String _deviceType = '';
  String _cpuArchitecture = '';
  String _memory = '';
  String _storage = '';

  @override
  void initState() {
    super.initState();
    DeviceDetails.init();
    _getDeviceDetails();
  }

  Future<void> _getDeviceDetails() async {
    try {
      final deviceModel = await DeviceDetails.deviceModel;
      final operatingSystem = await DeviceDetails.operatingSystem;
      final screenSize = await DeviceDetails.screenSize;
      final deviceType = await DeviceDetails.deviceType;
      final cpuArchitecture = await DeviceDetails.cpuArchitecture;
      final memory = await DeviceDetails.memory;
      final storage = await DeviceDetails.storage;

      setState(() {
        _deviceModel = deviceModel;
        _operatingSystem = operatingSystem;
        _screenSize = screenSize;
        _deviceType = deviceType;
        _cpuArchitecture = cpuArchitecture;
        _memory = memory;
        _storage = storage;
      });
    } catch (e) {
      print(e);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Device Details'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Text('Device Model: $_deviceModel'),
            Text('Operating System: $_operatingSystem'),
            Text('Screen Size: $_screenSize'),
            Text('Device Type: $_deviceType'),
            Text('CPU Architecture: $_cpuArchitecture'),
            Text('Memory: $_memory'),
            Text('Storage: $_storage'),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and the `RealFlutter` widget is displayed.
// 2. The `initState` method is called, which initializes the `DeviceDetails` package.
// 3. The `_getDeviceDetails` method is called, which retrieves the device details using the `DeviceDetails` package.
// 4. The device details are stored in the widget's state and displayed to the user.
// 5. If an error occurs while retrieving the device details, it is printed to the console.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

# Localized Flutter Package: A Comprehensive Overview
=====================================================

The "localized" Flutter package is a powerful tool for managing translations and localization in Flutter applications. It provides a simple and efficient way to handle multiple languages, making it an essential package for developers who want to reach a global audience.

### When to Use This Package

* When developing an application that requires support for multiple languages.
* When you need to manage translations and localization in a centralized manner.
* When you want to simplify the process of adding new languages to your application.

### Features

* Easy-to-use API for managing translations and localization.
* Support for multiple languages and regions.
* Automatic language detection based on device settings.
* Simple and efficient way to handle translations and localization.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up and Using the Localized Flutter Package
=====================================================

### Step 1: Add the Package to Your Project

Add the following dependency to your `pubspec.yaml` file:
```yml
dependencies:
  localized: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Configure the Package

Create a new file called `localized_config.dart` and add the following code:
```dart
import 'package:localized/localized.dart';

void main() {
  LocalizedConfig(
    locale: Locale('en', 'US'),
    fallbackLocale: Locale('en', 'US'),
    supportedLocales: [
      Locale('en', 'US'),
      Locale('fr', 'FR'),
      Locale('es', 'ES'),
    ],
  );
}
```
This code sets the default locale to English (US) and specifies the supported locales.

### Step 3: Use the Package in Your App

Create a new file called `main.dart` and add the following code:
```dart
import 'package:flutter/material.dart';
import 'package:localized/localized.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Localized Demo',
      home: Scaffold(
        appBar: AppBar(
          title: Text(Localized.of(context).title),
        ),
        body: Center(
          child: Text(Localized.of(context).helloWorld),
        ),
      ),
    );
  }
}
```
This code uses the `Localized` class to access the translations.

### Platform-Specific Details

* Android: Make sure to add the `android:configChanges` attribute to your `AndroidManifest.xml` file:
```xml
<application
  ...
  android:configChanges="locale|layoutDirection"
  ...
>
```
* iOS: Make sure to add the `CFBundleLocalizations` key to your `Info.plist` file:
```xml
<key>CFBundleLocalizations</key>
<array>
  <string>en</string>
  <string>fr</string>
  <string>es</string>
</array>
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:localized/localized.dart';

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Step 1: Initialize the LocalizedConfig
  @override
  void initState() {
    super.initState();
    LocalizedConfig(
      locale: Locale('en', 'US'),
      fallbackLocale: Locale('en', 'US'),
      supportedLocales: [
        Locale('en', 'US'),
        Locale('fr', 'FR'),
        Locale('es', 'ES'),
      ],
    );
  }

  // Step 2: Build the app
  @override
  Widget build(BuildContext context) {
    // Step 3: Use the Localized class to access the translations
    return MaterialApp(
      title: 'Localized Demo',
      home: Scaffold(
        appBar: AppBar(
          title: Text(Localized.of(context).title),
        ),
        body: Center(
          child: Text(Localized.of(context).helloWorld),
        ),
      ),
    );
  }
}

// Step 4: Run the app
void main() {
  runApp(RealFlutter());
}

// The app flow is as follows:
// 1. The user launches the app.
// 2. The LocalizedConfig is initialized with the default locale and supported locales.
// 3. The app uses the Localized class to access the translations.
// 4. The app displays the translated text to the user.
// 5. The user can switch between languages using the device settings.
// 6. The app updates the translations based on the new language.
```

// The final summary is as follows:
// The code initializes the LocalizedConfig with the default locale and supported locales.
// It then uses the Localized class to access the translations and display them to the user.
// The app updates the translations based on the new language when the user switches between languages using the device settings.

<-- END_MAIN -->
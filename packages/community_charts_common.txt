```markdown
<!-- START_DESCRIPTION -->
# Community Charts Common Flutter Package

The `community_charts_common` package is a powerful and flexible library for creating charts in Flutter applications. It provides a wide range of chart types, including line charts, bar charts, pie charts, and more, making it an excellent choice for developers looking to visualize data effectively.

## When to Use This Package

You should consider using the `community_charts_common` package when:
- You need to display data visually in your Flutter application.
- You want to create interactive charts that allow users to engage with the data.
- You require a customizable charting solution that can adapt to various data types and formats.

## Features

- **Multiple Chart Types**: Supports various chart types such as line, bar, pie, and scatter charts.
- **Customizable**: Offers extensive customization options for colors, labels, and tooltips.
- **Responsive Design**: Charts automatically adjust to different screen sizes and orientations.
- **Animations**: Provides smooth animations for chart transitions and updates.
- **Interactivity**: Allows users to interact with charts through touch gestures.

With these features, the `community_charts_common` package is a robust solution for any Flutter application that requires data visualization.

<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Community Charts Common

In this tutorial, we will walk through the setup process for the `community_charts_common` package and demonstrate how to use it in a Flutter application.

## Step 1: Adding the Dependency

To get started, you need to add the `community_charts_common` package to your `pubspec.yaml` file. Open the file and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  community_charts_common: ^0.14.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command in your terminal to install it:

```bash
flutter pub get
```

## Step 2: Platform-Specific Configuration

### Android

For Android, ensure that your `minSdkVersion` is set to at least 21 in your `android/app/build.gradle` file:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
        ...
    }
}
```

### iOS

For iOS, you may need to update your `ios/Podfile` to ensure compatibility. Open the `Podfile` and uncomment the platform line, setting it to at least 10.0:

```ruby
platform :ios, '10.0'
```

## Step 3: Importing the Package

In your Dart file, import the package at the top:

```dart
import 'package:community_charts_common/community_charts_common.dart';
```

## Step 4: Creating a Simple Chart

Now that you have set up the package, you can create a simple chart. Below is an example of how to create a line chart.

```dart
import 'package:flutter/material.dart';
import 'package:community_charts_common/community_charts_common.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Sample data for the chart
    final data = [
      Series<TimeSeriesSales, DateTime>(
        id: 'Sales',
        colorFn: (_, __) => MaterialPalette.blue.shadeDefault,
        domainFn: (TimeSeriesSales sales, _) => sales.time,
        measureFn: (TimeSeriesSales sales, _) => sales.sales,
        data: [
          TimeSeriesSales(DateTime(2022, 1, 1), 5),
          TimeSeriesSales(DateTime(2022, 2, 1), 25),
          TimeSeriesSales(DateTime(2022, 3, 1), 100),
          TimeSeriesSales(DateTime(2022, 4, 1), 75),
        ],
      ),
    ];

    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Community Charts Example')),
        body: Padding(
          padding: const EdgeInsets.all(16.0),
          child: TimeSeriesChart(data),
        ),
      ),
    );
  }
}

class TimeSeriesSales {
  final DateTime time;
  final int sales;

  TimeSeriesSales(this.time, this.sales);
}
```

This code sets up a simple Flutter application that displays a line chart using the `community_charts_common` package.

<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Community Charts Common

```dart
import 'package:flutter/material.dart';
import 'package:community_charts_common/community_charts_common.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Sample data for the chart
    final data = [
      Series<TimeSeriesSales, DateTime>(
        id: 'Sales',
        colorFn: (_, __) => MaterialPalette.blue.shadeDefault,
        domainFn: (TimeSeriesSales sales, _) => sales.time,
        measureFn: (TimeSeriesSales sales, _) => sales.sales,
        data: [
          TimeSeriesSales(DateTime(2022, 1, 1), 5),   // Data point for January
          TimeSeriesSales(DateTime(2022, 2, 1), 25),  // Data point for February
          TimeSeriesSales(DateTime(2022, 3, 1), 100), // Data point for March
          TimeSeriesSales(DateTime(2022, 4, 1), 75),  // Data point for April
        ],
      ),
    ];

    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Community Charts Example')), // App bar title
        body: Padding(
          padding: const EdgeInsets.all(16.0), // Padding around the chart
          child: TimeSeriesChart(data), // Displaying the chart
        ),
      ),
    );
  }
}

class TimeSeriesSales {
  final DateTime time; // Time of the sales
  final int sales;     // Sales amount

  TimeSeriesSales(this.time, this.sales); // Constructor for TimeSeriesSales
}

// The application starts with the RealFlutter widget.
// It creates a MaterialApp with a Scaffold containing an AppBar and a chart.
// The chart displays sales data over time, with each data point representing sales for a specific month.
// The TimeSeriesSales class is used to structure the data for the chart.
```
<!-- END_MAIN -->
```

### Summary of Application Flow

- The application starts with the `RealFlutter` widget, which is the main entry point.
- Inside the `build` method, sample sales data is created using the `TimeSeriesSales` class.
- A `MaterialApp` is created with a `Scaffold` that includes an `AppBar` and a `TimeSeriesChart`.
- The `TimeSeriesChart` displays the sales data over time, allowing users to visualize trends in the data.
- The `TimeSeriesSales` class structures the data, making it easy to manage and pass to the chart.

This example demonstrates how to set up and use the `community_charts_common` package to create a simple line chart in a Flutter application.
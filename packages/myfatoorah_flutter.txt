```markdown
<!-- START_DESCRIPTION -->
# MyFatoorah Flutter Package: A Comprehensive Overview

The **myfatoorah_flutter** package is a powerful Flutter plugin designed to facilitate seamless integration with the MyFatoorah payment gateway. This package allows developers to implement payment processing in their Flutter applications with ease, providing a user-friendly interface and robust features.

## When to Use This Package
You should consider using the myfatoorah_flutter package when:
- You need to integrate a reliable payment gateway into your Flutter application.
- You want to support multiple payment methods, including credit cards, KNET, and more.
- You are targeting markets where MyFatoorah is a popular payment solution, particularly in the Middle East.

## Key Features
- **Multiple Payment Methods**: Supports various payment options, including credit cards and local payment methods.
- **Easy Integration**: Simple setup process with clear documentation.
- **Secure Transactions**: Ensures secure payment processing through MyFatoorah's API.
- **Customizable UI**: Allows developers to customize the payment interface to match their app's design.

Overall, the myfatoorah_flutter package is an excellent choice for developers looking to implement a robust payment solution in their Flutter applications.

<!-- END_DESCRIPTION -->
```

```markdown
<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using MyFatoorah Flutter Package

In this tutorial, we will walk through the setup process for the myfatoorah_flutter package and demonstrate how to use it in your Flutter application.

## Step 1: Adding the Package to Your Project
To get started, add the myfatoorah_flutter package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  myfatoorah_flutter: ^latest_version
```

Make sure to replace `latest_version` with the most recent version available on [pub.dev](https://pub.dev/packages/myfatoorah_flutter).

## Step 2: Platform-Specific Configuration

### Android Configuration
1. Open your `AndroidManifest.xml` file located at `android/app/src/main/AndroidManifest.xml`.
2. Add the following permissions inside the `<manifest>` tag:

```xml
<uses-permission android:name="android.permission.INTERNET"/>
```

3. Ensure that your `minSdkVersion` is set to at least 21 in `android/app/build.gradle`:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
    }
}
```

### iOS Configuration
1. Open your `Info.plist` file located at `ios/Runner/Info.plist`.
2. Add the following lines to allow network requests:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

## Step 3: Using the Package
Now that we have set up the package, we can use it in our Flutter application. Below is a simple example of how to initiate a payment.

```dart
import 'package:flutter/material.dart';
import 'package:myfatoorah_flutter/myfatoorah_flutter.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('MyFatoorah Payment')),
        body: Center(
          child: ElevatedButton(
            onPressed: () async {
              // Initialize the MyFatoorah payment
              var response = await MyFatoorahFlutter.startPayment(
                amount: 100.0, // Amount to be charged
                currency: 'KWD', // Currency code
                paymentMethod: PaymentMethod.CreditCard, // Payment method
              );

              // Handle the response
              if (response.isSuccess) {
                // Payment was successful
                print('Payment Successful: ${response.transactionId}');
              } else {
                // Payment failed
                print('Payment Failed: ${response.errorMessage}');
              }
            },
            child: Text('Pay Now'),
          ),
        ),
      ),
    );
  }
}
```

In this example, we create a simple Flutter app with a button that initiates a payment when pressed. The `startPayment` method is called with the required parameters, and the response is handled accordingly.

<!-- END_TUTORIAL -->
```

```markdown
<!-- START_MAIN -->
# Complete Example of MyFatoorah Flutter Package

Here is a complete example of a Flutter application using the myfatoorah_flutter package:

```dart
import 'package:flutter/material.dart';
import 'package:myfatoorah_flutter/myfatoorah_flutter.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('MyFatoorah Payment')),
        body: Center(
          child: ElevatedButton(
            onPressed: () async {
              // Step 1: Start the payment process
              var response = await MyFatoorahFlutter.startPayment(
                amount: 100.0, // Amount to be charged
                currency: 'KWD', // Currency code
                paymentMethod: PaymentMethod.CreditCard, // Payment method
              );

              // Step 2: Handle the payment response
              if (response.isSuccess) {
                // Payment was successful
                print('Payment Successful: ${response.transactionId}');
                // You can navigate to a success page or show a success message
              } else {
                // Payment failed
                print('Payment Failed: ${response.errorMessage}');
                // You can show an error message to the user
              }
            },
            child: Text('Pay Now'),
          ),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the main function, which runs the RealFlutter widget.
// 2. The RealFlutter widget builds a MaterialApp with a simple UI containing an AppBar and a button.
// 3. When the button is pressed, the onPressed callback is triggered.
// 4. Inside the callback, the startPayment method is called with the payment details.
// 5. The response from the payment gateway is awaited.
// 6. If the payment is successful, the transaction ID is printed, and you can navigate to a success page.
// 7. If the payment fails, the error message is printed, and you can handle the error accordingly.
```
<!-- END_MAIN -->
``` 

This structured approach provides a comprehensive overview, setup instructions, and a complete example of using the myfatoorah_flutter package, making it easier for developers to integrate this payment solution into their Flutter applications.
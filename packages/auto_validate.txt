<-- START_DESCRIPTION -->

# Auto Validate Flutter Package
================================

The `auto_validate` Flutter package is a powerful tool for simplifying form validation in Flutter applications. It provides a simple and efficient way to validate user input, reducing the amount of boilerplate code required.

## When to Use
--------------

The `auto_validate` package is ideal for any Flutter application that requires user input validation, such as:

* Login and registration forms
* Data entry forms
* Survey and feedback forms

## Features
------------

* Automatic validation of user input
* Support for custom validation rules
* Real-time validation feedback
* Compatible with both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up Auto Validate
---------------------------

To use the `auto_validate` package, follow these steps:

### Step 1: Add the Package to Your Project

Add the `auto_validate` package to your `pubspec.yaml` file:
```yml
dependencies:
  flutter:
    sdk: flutter
  auto_validate: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the `auto_validate` package in your Dart file:
```dart
import 'package:auto_validate/auto_validate.dart';
```
### Step 3: Create a Validation Rule

Create a validation rule using the `ValidationRule` class:
```dart
ValidationRule emailRule = ValidationRule(
  pattern: r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$',
  errorMessage: 'Invalid email address',
);
```
### Step 4: Use the `AutoValidate` Widget

Wrap your form field with the `AutoValidate` widget, passing in the validation rule:
```dart
AutoValidate(
  validationRule: emailRule,
  child: TextField(
    decoration: InputDecoration(
      labelText: 'Email Address',
    ),
  ),
)
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:auto_validate/auto_validate.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Auto Validate Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _formKey = GlobalKey<FormState>();
  String _emailAddress;

  ValidationRule emailRule = ValidationRule(
    pattern: r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$',
    errorMessage: 'Invalid email address',
  );

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Auto Validate Demo'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: Column(
            children: [
              AutoValidate(
                validationRule: emailRule,
                child: TextField(
                  decoration: InputDecoration(
                    labelText: 'Email Address',
                  ),
                  onChanged: (value) {
                    setState(() {
                      _emailAddress = value;
                    });
                  },
                ),
              ),
              SizedBox(height: 16),
              ElevatedButton(
                onPressed: () {
                  if (_formKey.currentState.validate()) {
                    // Form is valid, proceed with submission
                    print('Form is valid');
                  } else {
                    // Form is invalid, display error message
                    print('Form is invalid');
                  }
                },
                child: Text('Submit'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user enters their email address in the text field.
// 2. The `AutoValidate` widget checks the input against the validation rule.
// 3. If the input is valid, the form is submitted when the user clicks the submit button.
// 4. If the input is invalid, an error message is displayed below the text field.
// 5. The user can correct their input and resubmit the form.
```

<-- END_MAIN -->
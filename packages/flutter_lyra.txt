```markdown
<!-- START_DESCRIPTION -->
# Flutter Lyra Package: A Comprehensive Overview

The `flutter_lyra` package is a powerful tool designed for Flutter developers looking to integrate advanced payment solutions into their applications. It provides a seamless way to handle transactions, manage payment methods, and ensure a secure checkout experience for users. 

## When to Use `flutter_lyra`
- **E-commerce Applications**: If you're building an online store, this package can help you manage payments efficiently.
- **Subscription Services**: Ideal for apps that require recurring payments.
- **In-App Purchases**: Useful for applications that offer premium features or content.

## Key Features
- **Multi-Platform Support**: Works on both Android and iOS, ensuring a wide reach.
- **Secure Transactions**: Implements industry-standard security protocols to protect user data.
- **Customizable UI**: Allows developers to tailor the payment interface to match their app's design.
- **Comprehensive Documentation**: Provides clear guidelines and examples for easy integration.

With these features, `flutter_lyra` stands out as a robust solution for developers aiming to implement payment functionalities in their Flutter applications.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Setting Up and Using the Flutter Lyra Package

## Installation
To get started with `flutter_lyra`, you need to add it to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  flutter_lyra: ^latest_version
```

Make sure to replace `^latest_version` with the current version available on [pub.dev](https://pub.dev/packages/flutter_lyra).

## Platform-Specific Configuration

### Android
1. Open your `android/app/build.gradle` file and ensure you have the following permissions:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21 // Ensure this is set to at least 21
    }
}
```

2. Add the necessary dependencies in the same file:

```groovy
dependencies {
    implementation 'com.android.support:multidex:1.0.3'
}
```

### iOS
1. Open your `ios/Runner/Info.plist` file and add the following permissions:

```xml
<key>NSAppTransportSecurity</key>
<dict>
    <key>NSAllowsArbitraryLoads</key>
    <true/>
</dict>
```

2. Ensure your iOS deployment target is set to at least 10.0 in your `ios/Podfile`:

```ruby
platform :ios, '10.0'
```

## Basic Usage
Once you have installed and configured the package, you can start using it in your Flutter application. Hereâ€™s a simple example of how to initiate a payment:

```dart
import 'package:flutter/material.dart';
import 'package:flutter_lyra/flutter_lyra.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Payment Example')),
        body: Center(
          child: ElevatedButton(
            onPressed: () async {
              // Initialize the Lyra payment
              final result = await LyraPayment.startPayment(
                amount: 1000, // Amount in cents
                currency: 'USD',
                description: 'Purchase Description',
              );

              // Handle the payment result
              if (result.success) {
                // Payment was successful
                print('Payment successful: ${result.transactionId}');
              } else {
                // Payment failed
                print('Payment failed: ${result.errorMessage}');
              }
            },
            child: Text('Pay Now'),
          ),
        ),
      ),
    );
  }
}
```
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Using Flutter Lyra

```dart
import 'package:flutter/material.dart';
import 'package:flutter_lyra/flutter_lyra.dart';

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(title: Text('Payment Example')),
        body: Center(
          child: ElevatedButton(
            onPressed: () async {
              // Start the payment process
              final result = await LyraPayment.startPayment(
                amount: 1000, // Amount in cents
                currency: 'USD',
                description: 'Purchase Description',
              );

              // Check if the payment was successful
              if (result.success) {
                // If successful, print the transaction ID
                print('Payment successful: ${result.transactionId}');
              } else {
                // If failed, print the error message
                print('Payment failed: ${result.errorMessage}');
              }
            },
            child: Text('Pay Now'),
          ),
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the RealFlutter widget, which builds a MaterialApp.
// 2. Inside the MaterialApp, a Scaffold is created with an AppBar and a Center widget.
// 3. The Center widget contains an ElevatedButton labeled 'Pay Now'.
// 4. When the button is pressed, the LyraPayment.startPayment method is called with the payment details.
// 5. The payment process is initiated, and the result is awaited.
// 6. If the payment is successful, the transaction ID is printed to the console.
// 7. If the payment fails, the error message is printed instead.
```
<!-- END_MAIN -->
```

### Summary
In this blog post, we explored the `flutter_lyra` package, detailing its features, installation process, and usage through a complete example. The provided code demonstrates how to initiate a payment and handle the result, making it a valuable resource for developers looking to integrate payment solutions into their Flutter applications.
<-- START_DESCRIPTION -->

Invert Colors Flutter Package
=============================

The `invert_colors` Flutter package is a utility library that allows developers to easily invert the colors of their app's UI. This can be useful in a variety of scenarios, such as:

* Creating a "night mode" or "dark theme" for an app
* Improving accessibility for users with visual impairments
* Enhancing the overall aesthetic of an app

The package provides a simple and efficient way to invert colors, with features such as:

* Support for inverting colors on both Android and iOS platforms
* Ability to invert colors for specific widgets or entire screens
* Optional configuration for custom color inversion algorithms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
---------------

To use the `invert_colors` package in your Flutter app, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  invert_colors: ^1.0.0
```
2. Run `flutter pub get` to install the package.
3. Import the package in your Dart file:
```dart
import 'package:invert_colors/invert_colors.dart';
```
4. Use the `InvertColors` widget to invert colors for a specific widget or screen:
```dart
InvertColors(
  child: Text('Hello, World!'),
)
```
Platform-Specific Details
-------------------------

### Android

On Android, the `invert_colors` package uses the ` android.graphics.ColorMatrix` class to invert colors. This class is supported on API level 11 and above.

### iOS

On iOS, the `invert_colors` package uses the `UIColor` class to invert colors. This class is supported on iOS 7 and above.

Configurations and Optimizations
--------------------------------

The `invert_colors` package provides optional configurations for custom color inversion algorithms. For example, you can use the `InvertColorsOptions` class to specify a custom color matrix:
```dart
InvertColors(
  options: InvertColorsOptions(
    colorMatrix: [
      -1, 0, 0, 0, 255,
      0, -1, 0, 0, 255,
      0, 0, -1, 0, 255,
      0, 0, 0, 1, 0,
    ],
  ),
  child: Text('Hello, World!'),
)
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:invert_colors/invert_colors.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    // Create a MaterialApp with a home screen
    return MaterialApp(
      title: 'Invert Colors Demo',
      home: HomeScreen(),
    );
  }
}

class HomeScreen extends StatefulWidget {
  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  bool _invertColors = false;

  @override
  Widget build(BuildContext context) {
    // Create a Scaffold with a toggle button and a text label
    return Scaffold(
      appBar: AppBar(
        title: Text('Invert Colors Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            // Use the InvertColors widget to invert colors for the text label
            InvertColors(
              enabled: _invertColors,
              child: Text(
                'Hello, World!',
                style: TextStyle(fontSize: 24),
              ),
            ),
            SizedBox(height: 20),
            // Create a toggle button to enable/disable color inversion
            ElevatedButton(
              onPressed: () {
                setState(() {
                  _invertColors = !_invertColors;
                });
              },
              child: Text(_invertColors ? 'Disable' : 'Enable'),
            ),
          ],
        ),
      ),
    );
  }
}
```

// The application flow is as follows:
// 1. The user runs the app and is presented with a home screen containing a text label and a toggle button.
// 2. The text label is initially displayed with its original colors.
// 3. When the user presses the toggle button, the `_invertColors` flag is toggled, enabling or disabling color inversion for the text label.
// 4. The `InvertColors` widget is used to invert the colors of the text label based on the value of the `_invertColors` flag.
// 5. The user can continue to toggle the color inversion on and off by pressing the toggle button.

<-- END_MAIN -->
```markdown
<-- START_DESCRIPTION -->

# Overview of the `vdocipher_flutter` Package

The `vdocipher_flutter` package is a powerful tool for integrating secure video streaming capabilities into your Flutter applications. It is designed to work seamlessly with VdoCipher, a service that provides secure video hosting and streaming solutions. This package is particularly useful for developers who need to protect their video content from unauthorized access and piracy.

## When to Use `vdocipher_flutter`

- **Educational Platforms**: For e-learning apps where video lectures need to be securely streamed to students.
- **Media and Entertainment**: For apps that offer premium video content and require protection against unauthorized downloads.
- **Corporate Training**: For internal training videos that should not be accessible outside the organization.

## Key Features

- **Secure Video Playback**: Ensures that video content is streamed securely, preventing unauthorized access.
- **Customizable Player**: Offers a customizable video player that can be tailored to fit the app's design.
- **Cross-Platform Support**: Works on both Android and iOS platforms, providing a consistent experience across devices.
- **Offline Playback**: Supports downloading videos for offline viewing, with security measures in place to prevent unauthorized access.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up `vdocipher_flutter` in Your Flutter Project

In this tutorial, we will walk through the process of setting up the `vdocipher_flutter` package in a Flutter project. We will cover platform-specific configurations for both Android and iOS.

## Step 1: Add Dependency

Add the `vdocipher_flutter` package to your `pubspec.yaml` file:

```yaml
dependencies:
  flutter:
    sdk: flutter
  vdocipher_flutter: ^1.0.0
```

Run `flutter pub get` to install the package.

## Step 2: Android Configuration

1. **Add Internet Permission**: Open `android/app/src/main/AndroidManifest.xml` and add the following permission:

   ```xml
   <uses-permission android:name="android.permission.INTERNET"/>
   ```

2. **Configure ProGuard**: If you are using ProGuard, add the following rules to `proguard-rules.pro`:

   ```pro
   -keep class com.vdocipher.** { *; }
   -dontwarn com.vdocipher.**
   ```

## Step 3: iOS Configuration

1. **Update Info.plist**: Open `ios/Runner/Info.plist` and add the following entries:

   ```xml
   <key>NSAppTransportSecurity</key>
   <dict>
     <key>NSAllowsArbitraryLoads</key>
     <true/>
   </dict>
   ```

2. **Podfile Configuration**: Ensure your `ios/Podfile` has platform set to at least iOS 11:

   ```ruby
   platform :ios, '11.0'
   ```

## Step 4: Initialize the Player

In your Dart code, import the package and initialize the player:

```dart
import 'package:vdocipher_flutter/vdocipher_flutter.dart';

// Initialize the player with your embed info
final RealFlutter player = RealFlutter(embedInfo: 'YOUR_EMBED_INFO');
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:vdocipher_flutter/vdocipher_flutter.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'VdoCipher Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: VideoPlayerScreen(),
    );
  }
}

class VideoPlayerScreen extends StatefulWidget {
  @override
  _VideoPlayerScreenState createState() => _VideoPlayerScreenState();
}

class _VideoPlayerScreenState extends State<VideoPlayerScreen> {
  late RealFlutter _player;

  @override
  void initState() {
    super.initState();
    // Initialize the RealFlutter player with embed info
    _player = RealFlutter(embedInfo: 'YOUR_EMBED_INFO');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Secure Video Player'),
      ),
      body: Center(
        child: AspectRatio(
          aspectRatio: 16 / 9,
          // Use the VdoPlayer widget to display the video
          child: VdoPlayer(
            controller: _player.controller,
          ),
        ),
      ),
    );
  }

  @override
  void dispose() {
    // Dispose the player when the widget is disposed
    _player.dispose();
    super.dispose();
  }
}

// Application Flow:
// 1. The application starts with the `main` function, which runs `MyApp`.
// 2. `MyApp` is a StatelessWidget that sets up the MaterialApp with a home screen of `VideoPlayerScreen`.
// 3. `VideoPlayerScreen` is a StatefulWidget that manages the lifecycle of the RealFlutter player.
// 4. In `initState`, the RealFlutter player is initialized with the necessary embed info.
// 5. The `build` method of `VideoPlayerScreen` returns a Scaffold containing an AppBar and a centered VdoPlayer widget.
// 6. The VdoPlayer widget is responsible for rendering the video using the player's controller.
// 7. When the widget is disposed, the player is also disposed to free up resources.

```

<-- END_MAIN -->
```
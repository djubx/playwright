<-- START_DESCRIPTION -->

**Android Metadata Flutter Package**
=====================================

The `android_metadata` Flutter package provides a simple way to access and manipulate Android-specific metadata in Flutter applications. This package is particularly useful when you need to access Android-specific features, such as the device's Android version, screen density, or system language.

**When to Use This Package**
---------------------------

You should use this package when:

* You need to access Android-specific metadata in your Flutter application.
* You want to customize your application's behavior based on the device's Android version or screen density.
* You need to access system language or country code information.

**Features**
------------

The `android_metadata` package provides the following features:

* Access to Android-specific metadata, such as:
	+ Android version
	+ Screen density
	+ System language
	+ Country code
* Simple and easy-to-use API

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setup and Usage**
-------------------

To use the `android_metadata` package in your Flutter application, follow these steps:

### Step 1: Add the Package to Your `pubspec.yaml` File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  android_metadata: ^1.0.0
```
### Step 2: Import the Package in Your Dart File

Import the package in your Dart file:
```dart
import 'package:android_metadata/android_metadata.dart';
```
### Step 3: Use the Package

Use the package to access Android-specific metadata:
```dart
void main() {
  print(AndroidMetadata.androidVersion); // prints the Android version
  print(AndroidMetadata.screenDensity); // prints the screen density
  print(AndroidMetadata.systemLanguage); // prints the system language
  print(AndroidMetadata.countryCode); // prints the country code
}
```
### Platform-Specific Details

* Android: The package uses the `android.os.Build` class to access Android-specific metadata.
* iOS: The package is not supported on iOS, as it is designed specifically for Android.

### Required Configurations or Optimizations

No additional configurations or optimizations are required to use this package.

<-- END_TUTORIAL -->

<-- START_MAIN -->

**Complete Example**
-------------------

Here is a complete example of a Flutter main file that demonstrates all key features of the `android_metadata` package:
```dart
import 'package:flutter/material.dart';
import 'package:android_metadata/android_metadata.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Android Metadata Example',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Android Metadata Example'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Text(
              'Android Version: ${AndroidMetadata.androidVersion}',
              style: TextStyle(fontSize: 24),
            ),
            Text(
              'Screen Density: ${AndroidMetadata.screenDensity}',
              style: TextStyle(fontSize: 24),
            ),
            Text(
              'System Language: ${AndroidMetadata.systemLanguage}',
              style: TextStyle(fontSize: 24),
            ),
            Text(
              'Country Code: ${AndroidMetadata.countryCode}',
              style: TextStyle(fontSize: 24),
            ),
          ],
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user runs the application.
// 2. The `MyApp` widget is created and run.
// 3. The `MyHomePage` widget is created and displayed.
// 4. The `MyHomePage` widget uses the `AndroidMetadata` package to access Android-specific metadata.
// 5. The metadata is displayed on the screen.

// In summary, this code creates a simple Flutter application that displays Android-specific metadata on the screen.
```
<-- END_MAIN -->
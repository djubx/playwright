<-- START_DESCRIPTION -->

# Count Stepper Flutter Package
================================

The `count_stepper` Flutter package is a customizable widget that allows users to increment or decrement a counter value. It's a simple yet effective way to collect numerical input from users.

## When to Use
--------------

Use the `count_stepper` package when you need to collect numerical input from users, such as:

* Quantity selectors for e-commerce apps
* Rating systems
* Age or date selectors

## Features
------------

* Customizable increment and decrement buttons
* Customizable counter value display
* Optional minimum and maximum values
* Optional step size (e.g., increment by 2 or 5)

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Count Stepper Package
--------------------------------------

### Step 1: Add the Package to Your Pubspec.yaml File

```yml
dependencies:
  flutter:
    sdk: flutter
  count_stepper: ^1.0.0
```

### Step 2: Import the Package in Your Dart File

```dart
import 'package:count_stepper/count_stepper.dart';
```

### Step 3: Create a Count Stepper Widget

```dart
CountStepper(
  initialValue: 0,
  stepSize: 1,
  min: 0,
  max: 10,
  onChanged: (value) {
    print('Counter value: $value');
  },
)
```

### Platform-Specific Details

* Android: No additional configuration required.
* iOS: No additional configuration required.

### Optimizations

* Use the `min` and `max` properties to limit the counter value range.
* Use the `stepSize` property to control the increment and decrement values.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:count_stepper/count_stepper.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  int _counterValue = 0;

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: Scaffold(
        appBar: AppBar(
          title: Text('Count Stepper Example'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Text(
                'Counter Value: $_counterValue',
                style: TextStyle(fontSize: 24),
              ),
              SizedBox(height: 20),
              CountStepper(
                initialValue: _counterValue,
                stepSize: 1,
                min: 0,
                max: 10,
                onChanged: (value) {
                  setState(() {
                    _counterValue = value;
                  });
                },
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// Application flow:
// 1. The user opens the app and sees the initial counter value (0).
// 2. The user taps the "+" button to increment the counter value.
// 3. The counter value is updated and displayed on the screen.
// 4. The user taps the "-" button to decrement the counter value.
// 5. The counter value is updated and displayed on the screen.
// 6. The user continues to increment and decrement the counter value.
// 7. The app limits the counter value to the range specified by the min and max properties.

// Final summary:
// The Count Stepper package provides a customizable widget for collecting numerical input from users.
// The example app demonstrates how to use the package to create a simple counter that increments and decrements a value.
```

<-- END_MAIN -->
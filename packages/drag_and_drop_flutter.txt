<-- START_DESCRIPTION -->

**Drag and Drop Flutter Package**
=====================================

The `drag_and_drop_flutter` package is a powerful tool for creating drag-and-drop interfaces in Flutter applications. It provides a simple and intuitive way to create draggable elements and drop zones, making it easy to implement complex interactions in your app.

**When to Use This Package**
-----------------------------

This package is perfect for creating apps that require interactive elements, such as:

* Drag-and-drop file uploads
* Interactive puzzles or games
* Customizable layouts or dashboards
* Educational apps that require interactive simulations

**Key Features**
----------------

* Support for both Android and iOS platforms
* Customizable drag-and-drop behavior
* Support for multiple draggable elements and drop zones
* Easy-to-use API for creating and managing drag-and-drop interactions

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

**Setting Up the Package**
---------------------------

To use the `drag_and_drop_flutter` package, follow these steps:

1. Add the package to your `pubspec.yaml` file:
```yml
dependencies:
  flutter:
    sdk: flutter
  drag_and_drop_flutter: ^1.0.0
```
2. Run `flutter pub get` to install the package.
3. Import the package in your Dart file:
```dart
import 'package:drag_and_drop_flutter/drag_and_drop_flutter.dart';
```
**Platform-Specific Details**
-----------------------------

### Android

* Make sure to add the following permission to your `AndroidManifest.xml` file:
```xml
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
```
* If you're targeting Android 10 or later, you'll need to add the following code to your `AndroidManifest.xml` file:
```xml
<application
  ...
  android:requestLegacyExternalStorage="true"
  ...
>
```
### iOS

* Make sure to add the following permission to your `Info.plist` file:
```xml
<key>NSPhotoLibraryUsageDescription</key>
<string>This app needs access to your photo library to upload files.</string>
```
**Using the Package**
----------------------

To create a draggable element, use the `Draggable` widget:
```dart
Draggable(
  child: Container(
    width: 100,
    height: 100,
    color: Colors.red,
  ),
  feedback: Container(
    width: 100,
    height: 100,
    color: Colors.blue,
  ),
)
```
To create a drop zone, use the `DropZone` widget:
```dart
DropZone(
  onDrop: (files) {
    // Handle dropped files here
  },
  child: Container(
    width: 200,
    height: 200,
    color: Colors.green,
  ),
)
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:drag_and_drop_flutter/drag_and_drop_flutter.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Drag and Drop Demo',
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  List<Widget> _widgets = [];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Drag and Drop Demo'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            // Create a draggable element
            Draggable(
              child: Container(
                width: 100,
                height: 100,
                color: Colors.red,
              ),
              feedback: Container(
                width: 100,
                height: 100,
                color: Colors.blue,
              ),
            ),
            // Create a drop zone
            DropZone(
              onDrop: (files) {
                // Handle dropped files here
                setState(() {
                  _widgets.add(Container(
                    width: 100,
                    height: 100,
                    color: Colors.green,
                  ));
                });
              },
              child: Container(
                width: 200,
                height: 200,
                color: Colors.yellow,
              ),
            ),
            // Display dropped widgets
            Column(
              children: _widgets,
            ),
          ],
        ),
      ),
    );
  }
}

// The app starts by displaying a draggable element and a drop zone.
// When the user drags the element over the drop zone and releases it,
// the onDrop callback is called, which adds a new widget to the _widgets list.
// The app then rebuilds the UI to display the new widget.
```

<-- END_MAIN -->
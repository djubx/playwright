<-- START_DESCRIPTION -->

# Square Bishop Flutter Package
The `square_bishop` Flutter package is a powerful tool for creating and managing chess-like board games. It provides a simple and intuitive API for creating boards, pieces, and moves, making it easy to build complex games with a minimal amount of code.

## Features
* Create custom boards with any number of rows and columns
* Define custom pieces with unique movements and behaviors
* Make moves on the board, including captures and promotions
* Support for undo and redo moves
* Platform-specific optimizations for Android and iOS

## When to Use
The `square_bishop` package is perfect for building chess-like games, such as chess, checkers, and other strategy board games. It's also great for building puzzle games that involve moving pieces on a board.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
To use the `square_bishop` package, add it to your `pubspec.yaml` file:
```yml
dependencies:
  flutter:
    sdk: flutter
  square_bishop: ^1.0.0
```
Then, run `flutter pub get` to install the package.

## Platform-Specific Configurations
For Android, add the following to your `AndroidManifest.xml` file:
```xml
<application
  ...
  android:hardwareAccelerated="true"
  ...
>
```
For iOS, add the following to your `Info.plist` file:
```xml
<key>UIHardwareAcceleration</key>
<true/>
```
## Using the Package
To create a board, use the `Board` class:
```dart
import 'package:square_bishop/square_bishop.dart';

void main() {
  final board = Board(rows: 8, columns: 8);
  // ...
}
```
To make a move, use the `Move` class:
```dart
final move = Move(
  piece: Piece(
    type: PieceType.knight,
    color: PieceColor.white,
  ),
  from: Square(1, 1),
  to: Square(3, 3),
);
board.makeMove(move);
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:square_bishop/square_bishop.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  final _board = Board(rows: 8, columns: 8);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Square Bishop Demo',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Square Bishop Demo'),
        ),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Text('Current Turn: ${_board.currentTurn}'),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  final move = Move(
                    piece: Piece(
                      type: PieceType.knight,
                      color: PieceColor.white,
                    ),
                    from: Square(1, 1),
                    to: Square(3, 3),
                  );
                  _board.makeMove(move);
                  setState(() {});
                },
                child: Text('Make Move'),
              ),
              SizedBox(height: 20),
              ElevatedButton(
                onPressed: () {
                  _board.undoMove();
                  setState(() {});
                },
                child: Text('Undo Move'),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user opens the app and sees the current turn number.
// 2. The user clicks the "Make Move" button, which creates a new move and makes it on the board.
// 3. The board updates its state and the UI is updated to reflect the new turn number.
// 4. The user can then click the "Undo Move" button to undo the last move made.
// 5. The board updates its state again and the UI is updated to reflect the new turn number.

// This code demonstrates the basic usage of the Square Bishop package, including making moves and undoing moves.
// It also shows how to use the package in a real-world Flutter app.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

Material Color Gen Package
==========================

The `material_color_gen` package is a Flutter package that generates a palette of colors based on a given primary color. It uses the Material Design color system to generate a range of colors that can be used in a Flutter app.

When to Use
------------

This package is useful when you want to create a consistent color scheme for your app without having to manually select and configure multiple colors. It's also useful when you want to create a dynamic color scheme that can be changed at runtime.

Features
--------

* Generates a palette of colors based on a given primary color
* Supports light and dark themes
* Can be used to create a consistent color scheme for your app

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
----------------

To use the `material_color_gen` package, follow these steps:

### Step 1: Add the package to your pubspec.yaml file

```yml
dependencies:
  material_color_gen: ^1.0.0
```

### Step 2: Import the package in your Dart file

```dart
import 'package:material_color_gen/material_color_gen.dart';
```

### Step 3: Create a `MaterialColorGen` instance

```dart
MaterialColorGen colorGen = MaterialColorGen(primaryColor: Colors.blue);
```

### Step 4: Use the generated colors in your app

```dart
Scaffold(
  appBar: AppBar(
    backgroundColor: colorGen.appBarColor,
    title: Text('Material Color Gen Example'),
  ),
  body: Container(
    color: colorGen.backgroundColor,
    child: Center(
      child: Text(
        'Hello, World!',
        style: TextStyle(color: colorGen.textColor),
      ),
    ),
  ),
)
```

Platform-Specific Details
-------------------------

### Android

No additional configuration is required for Android.

### iOS

No additional configuration is required for iOS.

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:material_color_gen/material_color_gen.dart';

void main() {
  runApp(RealFlutter());
}

class RealFlutter extends StatefulWidget {
  @override
  _RealFlutterState createState() => _RealFlutterState();
}

class _RealFlutterState extends State<RealFlutter> {
  // Create a MaterialColorGen instance with a primary color
  MaterialColorGen colorGen = MaterialColorGen(primaryColor: Colors.blue);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Material Color Gen Example',
      theme: ThemeData(
        // Use the generated colors in the app theme
        primaryColor: colorGen.primaryColor,
        appBarTheme: AppBarTheme(
          backgroundColor: colorGen.appBarColor,
        ),
        scaffoldBackgroundColor: colorGen.backgroundColor,
        textTheme: TextTheme(
          bodyText1: TextStyle(color: colorGen.textColor),
        ),
      ),
      home: Scaffold(
        appBar: AppBar(
          title: Text('Material Color Gen Example'),
        ),
        body: Container(
          child: Center(
            child: Text(
              'Hello, World!',
              style: TextStyle(color: colorGen.textColor),
            ),
          ),
        ),
      ),
    );
  }
}

// The app flow is as follows:
// 1. The RealFlutter widget is created and run.
// 2. The MaterialColorGen instance is created with a primary color.
// 3. The app theme is configured using the generated colors.
// 4. The Scaffold widget is created with an AppBar and a Container.
// 5. The AppBar and Container use the generated colors for their backgrounds and text colors.
// 6. The app is displayed on the screen with a consistent color scheme.
```

<-- END_MAIN -->
```markdown
<!-- START_DESCRIPTION -->
# Canopas Country Picker Flutter Package

The **canopas_country_picker** Flutter package is a powerful tool designed to simplify the process of selecting countries in your Flutter applications. This package provides a user-friendly interface for displaying a list of countries, allowing users to easily pick their desired country from a well-organized dropdown or dialog.

## When to Use This Package

You might consider using the **canopas_country_picker** package in scenarios such as:
- **User Registration Forms**: When you need users to select their country during sign-up.
- **Shipping Address Forms**: For e-commerce applications where users must provide their shipping country.
- **Location-Based Services**: When your app offers services or content based on the user's country.

## Features

- **Easy Integration**: Simple to add to your Flutter project with minimal setup.
- **Customizable UI**: You can customize the appearance of the country picker to match your app's theme.
- **Search Functionality**: Users can quickly find their country using a search bar.
- **Localization Support**: The package supports multiple languages, making it suitable for international applications.

With these features, the **canopas_country_picker** package enhances user experience by providing a seamless way to select countries in your Flutter applications.
<!-- END_DESCRIPTION -->

<!-- START_TUTORIAL -->
# Tutorial: Setting Up and Using Canopas Country Picker

## Step 1: Adding the Dependency

To get started, you need to add the **canopas_country_picker** package to your `pubspec.yaml` file. Open your `pubspec.yaml` and add the following line under dependencies:

```yaml
dependencies:
  flutter:
    sdk: flutter
  canopas_country_picker: ^1.0.0  # Check for the latest version on pub.dev
```

After adding the dependency, run the following command in your terminal to install it:

```bash
flutter pub get
```

## Step 2: Platform-Specific Configuration

### Android Configuration

For Android, ensure that your `minSdkVersion` in `android/app/build.gradle` is set to at least 21:

```groovy
android {
    ...
    defaultConfig {
        ...
        minSdkVersion 21
        ...
    }
}
```

### iOS Configuration

For iOS, you may need to add permissions in your `Info.plist` file if your app requires location services. Add the following lines:

```xml
<key>NSLocationWhenInUseUsageDescription</key>
<string>This app requires access to your location.</string>
```

## Step 3: Using the Package

Now that you have set up the package, you can use it in your Flutter application. Hereâ€™s how to implement the country picker in your app:

1. Import the package in your Dart file:

```dart
import 'package:canopas_country_picker/canopas_country_picker.dart';
```

2. Use the `CanopasCountryPicker` widget in your UI:

```dart
CanopasCountryPicker(
  onChanged: (country) {
    // Handle the selected country
    print('Selected country: ${country.name}');
  },
  // Optional: Customize the initial country
  initialCountry: Country.fromAlpha2Code('US'),
),
```

With these steps, you can easily integrate the **canopas_country_picker** into your Flutter application, providing users with a smooth country selection experience.
<!-- END_TUTORIAL -->

<!-- START_MAIN -->
# Complete Example of Canopas Country Picker

```dart
import 'package:flutter/material.dart';
import 'package:canopas_country_picker/canopas_country_picker.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Country Picker Example',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: CountryPickerScreen(),
    );
  }
}

class CountryPickerScreen extends StatefulWidget {
  @override
  _CountryPickerScreenState createState() => _CountryPickerScreenState();
}

class _CountryPickerScreenState extends State<CountryPickerScreen> {
  // Variable to hold the selected country
  Country? selectedCountry;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Select Your Country'),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            // Display the selected country or a prompt
            Text(
              selectedCountry != null
                  ? 'Selected Country: ${selectedCountry!.name}'
                  : 'No Country Selected',
              style: TextStyle(fontSize: 20),
            ),
            SizedBox(height: 20),
            // Button to open the country picker
            ElevatedButton(
              onPressed: () {
                // Open the country picker dialog
                showDialog(
                  context: context,
                  builder: (context) {
                    return AlertDialog(
                      title: Text('Choose a Country'),
                      content: CanopasCountryPicker(
                        onChanged: (country) {
                          // Update the selected country
                          setState(() {
                            selectedCountry = country;
                          });
                          Navigator.of(context).pop(); // Close the dialog
                        },
                      ),
                    );
                  },
                );
              },
              child: Text('Pick a Country'),
            ),
          ],
        ),
      ),
    );
  }
}

// Application Flow Explanation:
// 1. The app starts with the MyApp class, which sets up the MaterialApp.
// 2. The home screen is CountryPickerScreen, which contains the UI for selecting a country.
// 3. A variable 'selectedCountry' is used to store the user's selection.
// 4. The UI displays either the selected country or a prompt indicating no selection.
// 5. When the user presses the "Pick a Country" button, a dialog opens with the country picker.
// 6. Upon selecting a country, the state is updated, and the dialog closes, displaying the selected country.
```
<!-- END_MAIN -->
``` 

This structured blog provides a comprehensive overview of the **canopas_country_picker** Flutter package, guiding users through its features, setup, and implementation with a complete example.
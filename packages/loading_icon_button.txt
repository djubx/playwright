```markdown
<-- START_DESCRIPTION -->

# Overview of the `loading_icon_button` Flutter Package

The `loading_icon_button` package is a versatile Flutter widget that combines the functionality of a button with a loading indicator. This package is particularly useful in scenarios where you need to perform asynchronous operations, such as network requests or database transactions, and want to provide users with visual feedback during the process.

## Features

- **Loading Indicator**: Automatically displays a loading spinner when an operation is in progress.
- **Customizable Appearance**: Allows customization of button styles, colors, and loading indicators.
- **Easy Integration**: Simple API that integrates seamlessly with existing Flutter applications.
- **State Management**: Built-in state management to handle loading states efficiently.

## When to Use

- **Network Requests**: Use when fetching data from an API to indicate loading status.
- **Form Submissions**: Ideal for forms that require server-side validation or processing.
- **File Uploads**: Provides feedback during file upload operations.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Tutorial: Setting Up and Using `loading_icon_button`

In this tutorial, we will walk through the setup process for the `loading_icon_button` package and demonstrate how to use it in a Flutter application.

## Setup

1. **Add Dependency**

   Add the `loading_icon_button` package to your `pubspec.yaml` file:

   ```yaml
   dependencies:
     flutter:
       sdk: flutter
     loading_icon_button: ^1.0.0
   ```

2. **Install Packages**

   Run the following command to install the new package:

   ```bash
   flutter pub get
   ```

3. **Platform-Specific Configuration**

   - **Android**: Ensure your `minSdkVersion` in `android/app/build.gradle` is set to at least 21.
   - **iOS**: No additional configuration is required.

## Usage

To use the `loading_icon_button`, import it into your Dart file:

```dart
import 'package:loading_icon_button/loading_icon_button.dart';
```

### Basic Implementation

Here's a simple example of how to implement the `loading_icon_button`:

```dart
LoadingIconButton(
  iconData: Icons.download,
  onPressed: () async {
    // Simulate a network request
    await Future.delayed(Duration(seconds: 2));
  },
  loadingIcon: CircularProgressIndicator(),
)
```

This button will display a download icon initially and switch to a loading spinner when pressed.

<-- END_TUTORIAL -->

<-- START_MAIN -->

# Complete Example: Flutter Application Using `loading_icon_button`

Below is a complete Flutter application demonstrating the key features of the `loading_icon_button` package.

```dart
import 'package:flutter/material.dart';
import 'package:loading_icon_button/loading_icon_button.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Loading Icon Button Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  // Controller to manage the loading state of the button
  final LoadingButtonController _btnController = LoadingButtonController();

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Loading Icon Button Example'),
      ),
      body: Center(
        child: LoadingIconButton(
          iconData: Icons.cloud_upload,
          onPressed: _handleButtonPress,
          loadingIcon: CircularProgressIndicator(
            color: Colors.white,
          ),
          controller: _btnController,
          successIcon: Icons.check,
          errorIcon: Icons.error,
        ),
      ),
    );
  }

  // Function to simulate a network request
  Future<void> _handleButtonPress() async {
    try {
      // Start loading
      _btnController.start();
      // Simulate a network request delay
      await Future.delayed(Duration(seconds: 3));
      // Simulate success
      _btnController.success();
    } catch (e) {
      // Handle error and show error icon
      _btnController.error();
    }
  }
}
```

// Application Flow Explanation
// 1. The `MyApp` class sets up the MaterialApp with a home page.
// 2. `MyHomePage` is a stateful widget that manages the state of the loading button.
// 3. A `LoadingButtonController` is used to control the button's loading, success, and error states.
// 4. The `LoadingIconButton` widget is configured with icons for different states and a callback for button presses.
// 5. `_handleButtonPress` simulates a network request, updating the button's state based on success or failure.

<-- END_MAIN -->
```

This blog post provides a comprehensive guide to using the `loading_icon_button` package in Flutter, from setup to a complete example. The detailed comments and explanations should help developers understand how to integrate and utilize this package effectively in their applications.
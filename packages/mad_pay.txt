<-- START_DESCRIPTION -->

# mad_pay Flutter Package: A Technical Overview
=====================================================

The mad_pay Flutter package is a popular payment gateway integration library for Flutter applications. It provides a seamless and secure payment experience for users, supporting various payment methods such as credit/debit cards, UPI, and net banking.

### When to Use mad_pay

The mad_pay package is ideal for e-commerce, subscription-based, or any other type of application that requires payment processing. Its ease of use, security, and support for multiple payment methods make it a popular choice among Flutter developers.

### Key Features

*   Supports multiple payment methods: credit/debit cards, UPI, and net banking
*   Secure payment processing with encryption and tokenization
*   Easy integration with a simple and intuitive API
*   Customizable payment interface to match your app's branding
*   Supports both Android and iOS platforms

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Integrating mad_pay into Your Flutter App
=============================================

### Step 1: Add the mad_pay Package to Your pubspec.yaml File

```yml
dependencies:
  flutter:
    sdk: flutter
  mad_pay: ^1.0.0
```

### Step 2: Import the mad_pay Package in Your Dart File

```dart
import 'package:mad_pay/mad_pay.dart';
```

### Step 3: Initialize the mad_pay Package

```dart
MadPay _madPay = MadPay(
  apiKey: 'YOUR_API_KEY',
  apiSecret: 'YOUR_API_SECRET',
  environment: MadPayEnvironment.test,
);
```

### Step 4: Create a Payment Method

```dart
MadPayPaymentMethod _paymentMethod = MadPayPaymentMethod(
  cardNumber: '4242424242424242',
  expiryMonth: 12,
  expiryYear: 2025,
  cvv: '123',
);
```

### Step 5: Create a Payment Request

```dart
MadPayPaymentRequest _paymentRequest = MadPayPaymentRequest(
  amount: 100,
  currency: 'INR',
  paymentMethod: _paymentMethod,
);
```

### Step 6: Process the Payment

```dart
_madPay.processPayment(_paymentRequest).then((paymentResponse) {
  if (paymentResponse.status == MadPayPaymentStatus.success) {
    // Payment successful
  } else {
    // Payment failed
  }
}).catchError((error) {
  // Handle error
});
```

### Platform-Specific Details

*   **Android:** Add the following code to your `AndroidManifest.xml` file:

    ```xml
<application
  ...
  android:usesCleartextTraffic="true">
```

*   **iOS:** Add the following code to your `Info.plist` file:

    ```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```

<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:mad_pay/mad_pay.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'mad_pay Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  final _madPay = MadPay(
    apiKey: 'YOUR_API_KEY',
    apiSecret: 'YOUR_API_SECRET',
    environment: MadPayEnvironment.test,
  );

  final _paymentMethod = MadPayPaymentMethod(
    cardNumber: '4242424242424242',
    expiryMonth: 12,
    expiryYear: 2025,
    cvv: '123',
  );

  final _paymentRequest = MadPayPaymentRequest(
    amount: 100,
    currency: 'INR',
    paymentMethod: _paymentMethod,
  );

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('mad_pay Demo'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            _madPay.processPayment(_paymentRequest).then((paymentResponse) {
              if (paymentResponse.status == MadPayPaymentStatus.success) {
                // Payment successful
                print('Payment successful');
              } else {
                // Payment failed
                print('Payment failed');
              }
            }).catchError((error) {
              // Handle error
              print('Error: $error');
            });
          },
          child: Text('Make Payment'),
        ),
      ),
    );
  }
}

// The application flow is as follows:
// 1. The user clicks the "Make Payment" button.
// 2. The _madPay.processPayment() method is called with the _paymentRequest object.
// 3. The mad_pay package processes the payment and returns a payment response.
// 4. If the payment is successful, the payment response status is MadPayPaymentStatus.success.
// 5. If the payment fails, the payment response status is MadPayPaymentStatus.failed.
// 6. If an error occurs during payment processing, the error is caught and handled.

// In summary, this code demonstrates how to use the mad_pay package to process a payment in a Flutter application.
// It creates a payment method and payment request, and then uses the _madPay.processPayment() method to process the payment.
// The payment response is then handled based on its status.
```

<-- END_MAIN -->
<-- START_DESCRIPTION -->

Native Updater Flutter Package
==============================

The `native_updater` Flutter package provides a simple way to update your Flutter app's native code without having to rebuild and redeploy the entire app. This package is particularly useful when you need to make changes to your app's native code, such as updating a third-party library or fixing a bug, without affecting the rest of your app.

When to Use This Package
------------------------

You should use this package when:

* You need to update your app's native code without rebuilding and redeploying the entire app.
* You want to decouple your native code from your Flutter code to make updates easier.
* You need to use platform-specific features that are not available in Flutter.

Features
--------

* Update native code without rebuilding and redeploying the entire app.
* Decouple native code from Flutter code.
* Use platform-specific features not available in Flutter.

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

Setup and Usage
---------------

To use the `native_updater` package, follow these steps:

### Step 1: Add the Package to Your Pubspec

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  native_updater: ^1.0.0
```
Then, run `flutter pub get` to install the package.

### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:native_updater/native_updater.dart';
```
### Step 3: Initialize the Updater

Initialize the updater in your app's `main` function:
```dart
void main() {
  NativeUpdater.initialize();
  runApp(MyApp());
}
```
### Step 4: Update Your Native Code

To update your native code, create a new instance of the `NativeUpdater` class and call the `update` method:
```dart
NativeUpdater updater = NativeUpdater();
updater.update(
  ios: () {
    // Update your iOS native code here
  },
  android: () {
    // Update your Android native code here
  },
);
```
Platform-Specific Details
-------------------------

### iOS

To update your iOS native code, you need to create a new Objective-C or Swift class that conforms to the `NativeUpdaterDelegate` protocol. This class will receive the update callback from the `NativeUpdater` instance.

For example, in Objective-C:
```objectivec
#import <Foundation/Foundation.h>
#import <NativeUpdater/NativeUpdater.h>

@interface MyNativeUpdaterDelegate : NSObject <NativeUpdaterDelegate>

@end

@implementation MyNativeUpdaterDelegate

- (void)nativeUpdater:(NativeUpdater *)updater didUpdate:(BOOL)success {
  // Update your iOS native code here
}

@end
```
In Swift:
```swift
import Foundation
import NativeUpdater

class MyNativeUpdaterDelegate: NSObject, NativeUpdaterDelegate {
  func nativeUpdater(_ updater: NativeUpdater, didUpdate success: Bool) {
    // Update your iOS native code here
  }
}
```
### Android

To update your Android native code, you need to create a new Java or Kotlin class that extends the `NativeUpdater` class. This class will receive the update callback from the `NativeUpdater` instance.

For example, in Java:
```java
import android.os.Bundle;
import io.flutter.embedding.android.FlutterActivity;
import io.flutter.embedding.engine.FlutterEngine;
import io.flutter.plugins.GeneratedPluginRegistrant;

public class MyNativeUpdater extends NativeUpdater {
  @Override
  public void onUpdate(boolean success) {
    // Update your Android native code here
  }
}
```
In Kotlin:
```kotlin
import android.os.Bundle
import io.flutter.embedding.android.FlutterActivity
import io.flutter.embedding.engine.FlutterEngine
import io.flutter.plugins.GeneratedPluginRegistrant

class MyNativeUpdater : NativeUpdater() {
  override fun onUpdate(success: Boolean) {
    // Update your Android native code here
  }
}
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:native_updater/native_updater.dart';

void main() {
  NativeUpdater.initialize();
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Native Updater Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Native Updater Demo'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () {
            NativeUpdater updater = NativeUpdater();
            updater.update(
              ios: () {
                // Update your iOS native code here
                print('iOS native code updated');
              },
              android: () {
                // Update your Android native code here
                print('Android native code updated');
              },
            );
          },
          child: Text('Update Native Code'),
        ),
      ),
    );
  }
}
```

// The app starts by initializing the NativeUpdater instance in the main function.
// The NativeUpdater instance is then used to update the native code when the button is pressed.
// The update method takes two callbacks, one for iOS and one for Android, which are used to update the native code.
// In this example, the native code is updated by simply printing a message to the console.
// In a real-world scenario, the native code would be updated by calling the necessary native functions.
// The app uses the MaterialApp and Scaffold widgets to create a basic UI with a button.
// The button is used to trigger the update of the native code.

<-- END_MAIN -->
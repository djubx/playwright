<-- START_DESCRIPTION -->

# Carapacik Dio Logger Flutter Package
=====================================

The `carapacik_dio_logger` package is a powerful logging tool for Flutter applications that use the Dio HTTP client. It provides a simple and efficient way to log HTTP requests and responses, making it easier to debug and monitor your app's network activity.

## When to Use This Package
---------------------------

You should use this package when you need to:

* Log HTTP requests and responses in your Flutter app
* Debug network issues and monitor app performance
* Comply with security and auditing requirements

## Features
------------

* Logs HTTP requests and responses in a readable format
* Supports logging of request and response headers, bodies, and query parameters
* Allows customization of log output and filtering of log messages
* Works seamlessly with the Dio HTTP client

<-- END_DESCRIPTION -->

<-- START_TUTORIAL -->

# Setting Up the Package
-------------------------

To use the `carapacik_dio_logger` package, follow these steps:

### Step 1: Add the Package to Your Pubspec File

Add the following line to your `pubspec.yaml` file:
```yml
dependencies:
  carapacik_dio_logger: ^1.0.0
```
### Step 2: Import the Package

Import the package in your Dart file:
```dart
import 'package:carapacik_dio_logger/carapacik_dio_logger.dart';
```
### Step 3: Initialize the Logger

Initialize the logger with your Dio instance:
```dart
import 'package:dio/dio.dart';

void main() {
  final dio = Dio();
  final logger = CarapacikDioLogger(dio: dio);
}
```
### Platform-Specific Details

* Android: No additional configuration is required.
* iOS: You may need to add the following lines to your `Info.plist` file to allow logging:
```xml
<key>NSAppTransportSecurity</key>
<dict>
  <key>NSAllowsArbitraryLoads</key>
  <true/>
</dict>
```
### Customization and Filtering

You can customize the log output and filter log messages using the `CarapacikDioLogger` constructor:
```dart
final logger = CarapacikDioLogger(
  dio: dio,
  logLevel: LogLevel.debug,
  logFormatter: (log) => '${log.requestMethod} ${log.requestPath}',
  logFilter: (log) => log.requestMethod == 'GET',
);
```
<-- END_TUTORIAL -->

<-- START_MAIN -->

```dart
import 'package:flutter/material.dart';
import 'package:dio/dio.dart';
import 'package:carapacik_dio_logger/carapacik_dio_logger.dart';

void main() {
  final dio = Dio();
  final logger = CarapacikDioLogger(dio: dio);

  runApp(MyApp(dio: dio, logger: logger));
}

class MyApp extends StatelessWidget {
  final Dio dio;
  final CarapacikDioLogger logger;

  MyApp({required this.dio, required this.logger});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Carapacik Dio Logger Example',
      home: MyHomePage(dio: dio, logger: logger),
    );
  }
}

class MyHomePage extends StatefulWidget {
  final Dio dio;
  final CarapacikDioLogger logger;

  MyHomePage({required this.dio, required this.logger});

  @override
  _MyHomePageState createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Carapacik Dio Logger Example'),
      ),
      body: Center(
        child: ElevatedButton(
          onPressed: () async {
            final response = await widget.dio.get('https://jsonplaceholder.typicode.com/todos/1');
            widget.logger.log(response);
          },
          child: Text('Send Request'),
        ),
      ),
    );
  }
}
```

// The app starts by initializing the Dio instance and the CarapacikDioLogger.
// The logger is then passed to the MyApp widget, which builds the app's UI.
// When the user presses the "Send Request" button, the app sends a GET request to the specified URL using Dio.
// The response is then logged using the CarapacikDioLogger.
// The log output is displayed in the console, showing the request and response details.

// The app demonstrates how to use the CarapacikDioLogger to log HTTP requests and responses in a Flutter app.
// It shows how to initialize the logger, send a request using Dio, and log the response using the logger.

<-- END_MAIN -->